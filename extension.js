/*! For license information please see extension.js.LICENSE.txt */
var __webpack_modules__={5207:()=>{!function(t,e,r){if(t.MutationObserver&&"undefined"!=typeof HTMLElement){var n,i=0,a=(n=HTMLElement.prototype.matches||HTMLElement.prototype.webkitMatchesSelector||HTMLElement.prototype.mozMatchesSelector||HTMLElement.prototype.msMatchesSelector,{matchesSelector:function(t,e){return t instanceof HTMLElement&&n.call(t,e)},addMethod:function(t,e,r){var n=t[e];t[e]=function(){return r.length==arguments.length?r.apply(this,arguments):"function"==typeof n?n.apply(this,arguments):void 0}},callCallbacks:function(t,e){e&&e.options.onceOnly&&1==e.firedElems.length&&(t=[t[0]]);for(var r,n=0;r=t[n];n++)r&&r.callback&&r.callback.call(r.elem,r.elem);e&&e.options.onceOnly&&1==e.firedElems.length&&e.me.unbindEventWithSelectorAndCallback.call(e.target,e.selector,e.callback)},checkChildNodesRecursively:function(t,e,r,n){for(var i,o=0;i=t[o];o++)r(i,e,n)&&n.push({callback:e.callback,elem:i}),i.childNodes.length>0&&a.checkChildNodesRecursively(i.childNodes,e,r,n)},mergeArrays:function(t,e){var r,n={};for(r in t)t.hasOwnProperty(r)&&(n[r]=t[r]);for(r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);return n},toElementsArray:function(e){return void 0===e||"number"==typeof e.length&&e!==t||(e=[e]),e}}),o=function(){var t=function(){this._eventsBucket=[],this._beforeAdding=null,this._beforeRemoving=null};return t.prototype.addEvent=function(t,e,r,n){var i={target:t,selector:e,options:r,callback:n,firedElems:[]};return this._beforeAdding&&this._beforeAdding(i),this._eventsBucket.push(i),i},t.prototype.removeEvent=function(t){for(var e,r=this._eventsBucket.length-1;e=this._eventsBucket[r];r--)if(t(e)){this._beforeRemoving&&this._beforeRemoving(e);var n=this._eventsBucket.splice(r,1);n&&n.length&&(n[0].callback=null)}},t.prototype.beforeAdding=function(t){this._beforeAdding=t},t.prototype.beforeRemoving=function(t){this._beforeRemoving=t},t}(),s=function(e,n){var i=new o,s=this,l={fireOnAttributesModification:!1};return i.beforeAdding((function(r){var i,a=r.target;a!==t.document&&a!==t||(a=document.getElementsByTagName("html")[0]),i=new MutationObserver((function(t){n.call(this,t,r)}));var o=e(r.options);i.observe(a,o),r.observer=i,r.me=s})),i.beforeRemoving((function(t){t.observer.disconnect()})),this.bindEvent=function(t,e,r){e=a.mergeArrays(l,e);for(var n=a.toElementsArray(this),o=0;o<n.length;o++)i.addEvent(n[o],t,e,r)},this.unbindEvent=function(){var t=a.toElementsArray(this);i.removeEvent((function(e){for(var n=0;n<t.length;n++)if(this===r||e.target===t[n])return!0;return!1}))},this.unbindEventWithSelectorOrCallback=function(t){var e,n=a.toElementsArray(this),o=t;e="function"==typeof t?function(t){for(var e=0;e<n.length;e++)if((this===r||t.target===n[e])&&t.callback===o)return!0;return!1}:function(e){for(var i=0;i<n.length;i++)if((this===r||e.target===n[i])&&e.selector===t)return!0;return!1},i.removeEvent(e)},this.unbindEventWithSelectorAndCallback=function(t,e){var n=a.toElementsArray(this);i.removeEvent((function(i){for(var a=0;a<n.length;a++)if((this===r||i.target===n[a])&&i.selector===t&&i.callback===e)return!0;return!1}))},this},l=new function(){var t={fireOnAttributesModification:!1,onceOnly:!1,existing:!1};function e(t,e,n){return!(!a.matchesSelector(t,e.selector)||(t._id===r&&(t._id=i++),-1!=e.firedElems.indexOf(t._id))||(e.firedElems.push(t._id),0))}var n=(l=new s((function(t){var e={attributes:!1,childList:!0,subtree:!0};return t.fireOnAttributesModification&&(e.attributes=!0),e}),(function(t,r){t.forEach((function(t){var n=t.addedNodes,i=t.target,o=[];null!==n&&n.length>0?a.checkChildNodesRecursively(n,r,e,o):"attributes"===t.type&&e(i,r)&&o.push({callback:r.callback,elem:i}),a.callCallbacks(o,r)}))}))).bindEvent;return l.bindEvent=function(e,r,i){void 0===i?(i=r,r=t):r=a.mergeArrays(t,r);var o=a.toElementsArray(this);if(r.existing){for(var s=[],l=0;l<o.length;l++)for(var c=o[l].querySelectorAll(e),h=0;h<c.length;h++)s.push({callback:i,elem:c[h]});if(r.onceOnly&&s.length)return i.call(s[0].elem,s[0].elem);setTimeout(a.callCallbacks,1,s)}n.call(this,e,r,i)},l},c=new function(){var t={};function e(t,e){return a.matchesSelector(t,e.selector)}var r=(c=new s((function(){return{childList:!0,subtree:!0}}),(function(t,r){t.forEach((function(t){var n=t.removedNodes,i=[];null!==n&&n.length>0&&a.checkChildNodesRecursively(n,r,e,i),a.callCallbacks(i,r)}))}))).bindEvent;return c.bindEvent=function(e,n,i){void 0===i?(i=n,n=t):n=a.mergeArrays(t,n),r.call(this,e,n,i)},c};e&&f(e.fn),f(HTMLElement.prototype),f(NodeList.prototype),f(HTMLCollection.prototype),f(HTMLDocument.prototype),f(Window.prototype);var h={};return u(l,h,"unbindAllArrive"),u(c,h,"unbindAllLeave"),h}function u(t,e,r){a.addMethod(e,r,t.unbindEvent),a.addMethod(e,r,t.unbindEventWithSelectorOrCallback),a.addMethod(e,r,t.unbindEventWithSelectorAndCallback)}function f(t){t.arrive=l.bindEvent,u(l,t,"unbindArrive"),t.leave=c.bindEvent,u(c,t,"unbindLeave")}}(window,"undefined"==typeof jQuery?null:jQuery,void 0)},8667:(t,e,r)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,o(n.key),n)}}function a(t,e,r){return(e=o(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t){var e=function(t,e){if("object"!=n(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var i=r.call(t,"string");if("object"!=n(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==n(e)?e:String(e)}r.r(e),r.d(e,{default:()=>c,roamFocusManager:()=>l});var s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,"blurEventHandler",null),a(this,"isActive",!1),a(this,"initCheckInterval",null),a(this,"ROAM_EDITABLE_SELECTOR",'input, textarea, [contenteditable="true"], .rm-block__input.roam-block')}var e,r,n;return e=t,n=[{key:"getInstance",value:function(){return t.instance||(t.instance=new t),t.instance}}],(r=[{key:"activateFocusProtection",value:function(){var t=this;this.isActive?console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§Â∑≤ÊøÄÊ¥ªÔºåÊó†ÈúÄÈáçÂ§çÊøÄÊ¥ª"):(this.blurEventHandler=function(e){var r=e.target;r&&r.matches&&r.matches(t.ROAM_EDITABLE_SELECTOR)&&(console.log("üéØ Roam Memo: Êã¶Êà™Âà∞ Roam ÂùóÁöÑÁÑ¶ÁÇπ‰∏¢Â§±‰∫ã‰ª∂ÔºåÈòªÊ≠¢ÈªòËÆ§Ë°å‰∏∫"),console.log("üéØ Â§±ÁÑ¶ÂÖÉÁ¥†:",{tagName:r.tagName,className:r.className,id:r.id}),e.preventDefault(),e.stopPropagation())},document.addEventListener("blur",this.blurEventHandler,!0),this.isActive=!0,this.waitForRoamInitialization(),console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§Êú∫Âà∂Â∑≤ÊøÄÊ¥ª"))}},{key:"deactivateFocusProtection",value:function(){this.isActive?(this.blurEventHandler&&(document.removeEventListener("blur",this.blurEventHandler,!0),this.blurEventHandler=null),this.initCheckInterval&&(clearInterval(this.initCheckInterval),this.initCheckInterval=null),this.isActive=!1,console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§Êú∫Âà∂Â∑≤ÂÅúÁî®")):console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§Êú™ÊøÄÊ¥ªÔºåÊó†ÈúÄÂÅúÁî®")}},{key:"isFocusProtectionActive",value:function(){return this.isActive}},{key:"toggleFocusProtection",value:function(){this.isActive?this.deactivateFocusProtection():this.activateFocusProtection()}},{key:"waitForRoamInitialization",value:function(){var t=this;this.initCheckInterval=window.setInterval((function(){var e=document.querySelector(".roam-app"),r=document.querySelector(".roam-main");e&&r&&(console.log("üéØ Roam Memo: Roam Â∫îÁî®ÂàùÂßãÂåñÂÆåÊàêÔºåÁÑ¶ÁÇπ‰øùÊä§ËÑöÊú¨ÂáÜÂ§áÂ∞±Áª™"),t.initCheckInterval&&(clearInterval(t.initCheckInterval),t.initCheckInterval=null))}),500)}},{key:"forceCleanup",value:function(){console.log("üéØ Roam Memo: ÊâßË°åÁÑ¶ÁÇπÁÆ°ÁêÜÂô®Âº∫Âà∂Ê∏ÖÁêÜ"),this.deactivateFocusProtection(),this.blurEventHandler&&(document.removeEventListener("blur",this.blurEventHandler,!0),document.removeEventListener("blur",this.blurEventHandler,!1),this.blurEventHandler=null),console.log("üéØ Roam Memo: ÁÑ¶ÁÇπÁÆ°ÁêÜÂô®Ê∏ÖÁêÜÂÆåÊàê")}}])&&i(e.prototype,r),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),l=s.getInstance();const c=s},1419:(t,e,r)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,o(n.key),n)}}function a(t,e,r){return(e=o(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t){var e=function(t,e){if("object"!=n(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var i=r.call(t,"string");if("object"!=n(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==n(e)?e:String(e)}r.r(e),r.d(e,{default:()=>c,roamZIndexManager:()=>l});var s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,"styleElement",null),a(this,"STYLE_ID","roam-memo-zindex-fix")}var e,r,n;return e=t,n=[{key:"getInstance",value:function(){return t.instance||(t.instance=new t),t.instance}}],(r=[{key:"injectZIndexFix",value:function(){this.styleElement||(this.styleElement=document.createElement("style"),this.styleElement.id=this.STYLE_ID,this.styleElement.type="text/css",this.styleElement.textContent="\n      /*\n       * Roam Research ÂõæÁâáÊÇ¨ÊµÆÁ™óÂè£ÁöÑÂ±ÇÁ∫ßÊèêÂçá\n       * Ëß£ÂÜ≥Ë¢´ Memo Êèí‰ª∂ÈÅÆÊå°ÁöÑÈóÆÈ¢ò\n       */\n      \n      /* ÊèêÂçá Roam ÂõæÁâáÊµÆÂ±ÇÁöÑ Z-index */\n      #rm-modal-portal {\n        z-index: 1002 !important; /* Roam ÂõæÁâáÊµÆÂ±ÇÊï¥‰ΩìÁöÑ z-indexÔºåÊúÄÈ´ò */\n      }\n      \n      #rm-modal-portal > div > div > div.bp3-dialog-container.bp3-overlay-content > div {\n        z-index: 1001 !important; /* Á°Æ‰øùÂõæÁâáÂÆûÈôÖÂÜÖÂÆπ‰πüÈ´ò */\n      }\n      \n      /* ÊèêÂçá Roam ÂèåÈìæÂºπÂá∫ËèúÂçïÁöÑ Z-index */\n      .rm-autocomplete__results {\n        z-index: 1000 !important; /* ‰ΩøÁî®‰∏Ä‰∏™ÈùûÂ∏∏È´òÁöÑÂÄºÔºåÁ°Æ‰øùÊòæÁ§∫Âú®ÊâÄÊúâÂÖ∂‰ªñÂÖÉÁ¥†‰πã‰∏ä */\n        width: auto !important; /* Ë∞ÉÊï¥‰∏∫Ëá™ÈÄÇÂ∫îÂÆΩÂ∫¶ */\n        max-width: unset !important; /* ÂèñÊ∂àÊúÄÂ§ßÂÆΩÂ∫¶ÈôêÂà∂ */\n        min-width: 150px !important; /* ËÆæÁΩÆÊúÄÂ∞èÂÆΩÂ∫¶ÔºåÈò≤Ê≠¢ËøáÁ™Ñ */\n      }\n      \n             /* ÊèêÂçáÂÖ∂‰ªñÂèØËÉΩË¢´ÈÅÆÊå°ÁöÑ Roam UI ÂÖÉÁ¥† */\n       .bp3-popover {\n         z-index: 999 !important;\n       }\n       \n       .bp3-tooltip {\n         z-index: 998 !important;\n       }\n    ",document.head.appendChild(this.styleElement),console.log("üîß Roam Memo: Z-index fix Â∑≤ÊøÄÊ¥ª"))}},{key:"removeZIndexFix",value:function(){this.styleElement&&(document.head.removeChild(this.styleElement),this.styleElement=null,console.log("üîß Roam Memo: Z-index fix Â∑≤ÁßªÈô§"))}},{key:"isFixActive",value:function(){return null!==this.styleElement}},{key:"toggleZIndexFix",value:function(){this.isFixActive()?this.removeZIndexFix():this.injectZIndexFix()}}])&&i(e.prototype,r),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),l=s.getInstance();const c=s},3193:(t,e,r)=>{t.exports={default:r(4734),__esModule:!0}},1156:(t,e,r)=>{t.exports={default:r(8271),__esModule:!0}},9829:(t,e,r)=>{t.exports={default:r(2696),__esModule:!0}},6007:(t,e,r)=>{t.exports={default:r(2160),__esModule:!0}},5971:(t,e,r)=>{t.exports={default:r(1724),__esModule:!0}},5522:(t,e,r)=>{t.exports={default:r(6560),__esModule:!0}},6327:(t,e,r)=>{t.exports={default:r(4220),__esModule:!0}},9506:(t,e)=>{e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},7588:(t,e,r)=>{e.__esModule=!0;var n,i=(n=r(9829))&&n.__esModule?n:{default:n};e.default=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,i.default)(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}()},5505:(t,e,r)=>{e.__esModule=!0;var n,i=(n=r(3193))&&n.__esModule?n:{default:n};e.default=i.default||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}},7714:(t,e,r)=>{e.__esModule=!0;var n=o(r(5971)),i=o(r(1156)),a=o(r(7479));function o(t){return t&&t.__esModule?t:{default:t}}e.default=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+(void 0===e?"undefined":(0,a.default)(e)));t.prototype=(0,i.default)(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(n.default?(0,n.default)(t,e):t.__proto__=e)}},539:(t,e,r)=>{e.__esModule=!0;var n,i=(n=r(7479))&&n.__esModule?n:{default:n};e.default=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!==(void 0===e?"undefined":(0,i.default)(e))&&"function"!=typeof e?t:e}},7479:(t,e,r)=>{e.__esModule=!0;var n=o(r(6327)),i=o(r(5522)),a="function"==typeof i.default&&"symbol"==typeof n.default?function(t){return typeof t}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":typeof t};function o(t){return t&&t.__esModule?t:{default:t}}e.default="function"==typeof i.default&&"symbol"===a(n.default)?function(t){return void 0===t?"undefined":a(t)}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":void 0===t?"undefined":a(t)}},4734:(t,e,r)=>{r(3758),t.exports=r(6438).Object.assign},8271:(t,e,r)=>{r(1951);var n=r(6438).Object;t.exports=function(t,e){return n.create(t,e)}},2696:(t,e,r)=>{r(4712);var n=r(6438).Object;t.exports=function(t,e,r){return n.defineProperty(t,e,r)}},2160:(t,e,r)=>{r(8128),t.exports=r(6438).Object.getPrototypeOf},1724:(t,e,r)=>{r(4284),t.exports=r(6438).Object.setPrototypeOf},6560:(t,e,r)=>{r(9626),r(8978),r(2860),r(716),t.exports=r(6438).Symbol},4220:(t,e,r)=>{r(7863),r(7914),t.exports=r(4336).f("iterator")},5219:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},2560:t=>{t.exports=function(){}},812:(t,e,r)=>{var n=r(4401);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},4448:(t,e,r)=>{var n=r(5133),i=r(181),a=r(2917);t.exports=function(t){return function(e,r,o){var s,l=n(e),c=i(l.length),h=a(o,c);if(t&&r!=r){for(;c>h;)if((s=l[h++])!=s)return!0}else for(;c>h;h++)if((t||h in l)&&l[h]===r)return t||h||0;return!t&&-1}}},3417:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},6438:t=>{var e=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=e)},8852:(t,e,r)=>{var n=r(5219);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},7608:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},8219:(t,e,r)=>{t.exports=!r(1984)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},3802:(t,e,r)=>{var n=r(4401),i=r(6670).document,a=n(i)&&n(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},7956:t=>{t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},6473:(t,e,r)=>{var n=r(4311),i=r(9820),a=r(6569);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var o,s=r(t),l=a.f,c=0;s.length>c;)l.call(t,o=s[c++])&&e.push(o);return e}},8535:(t,e,r)=>{var n=r(6670),i=r(6438),a=r(8852),o=r(2677),s=r(5509),l="prototype",c=function(t,e,r){var h,u,f,p=t&c.F,d=t&c.G,m=t&c.S,y=t&c.P,v=t&c.B,g=t&c.W,b=d?i:i[e]||(i[e]={}),x=b[l],w=d?n:m?n[e]:(n[e]||{})[l];for(h in d&&(r=e),r)(u=!p&&w&&void 0!==w[h])&&s(b,h)||(f=u?w[h]:r[h],b[h]=d&&"function"!=typeof w[h]?r[h]:v&&u?a(f,n):g&&w[h]==f?function(t){var e=function(e,r,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,r)}return new t(e,r,n)}return t.apply(this,arguments)};return e[l]=t[l],e}(f):y&&"function"==typeof f?a(Function.call,f):f,y&&((b.virtual||(b.virtual={}))[h]=f,t&c.R&&x&&!x[h]&&o(x,h,f)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},1984:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},6670:t=>{var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},5509:t=>{var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},2677:(t,e,r)=>{var n=r(8423),i=r(6260);t.exports=r(8219)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},3879:(t,e,r)=>{var n=r(6670).document;t.exports=n&&n.documentElement},2484:(t,e,r)=>{t.exports=!r(8219)&&!r(1984)((function(){return 7!=Object.defineProperty(r(3802)("div"),"a",{get:function(){return 7}}).a}))},7001:(t,e,r)=>{var n=r(3417);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},5461:(t,e,r)=>{var n=r(3417);t.exports=Array.isArray||function(t){return"Array"==n(t)}},4401:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},8248:(t,e,r)=>{var n=r(2087),i=r(6260),a=r(1356),o={};r(2677)(o,r(254)("iterator"),(function(){return this})),t.exports=function(t,e,r){t.prototype=n(o,{next:i(1,r)}),a(t,e+" Iterator")}},8839:(t,e,r)=>{var n=r(4742),i=r(8535),a=r(1331),o=r(2677),s=r(210),l=r(8248),c=r(1356),h=r(6123),u=r(254)("iterator"),f=!([].keys&&"next"in[].keys()),p="keys",d="values",m=function(){return this};t.exports=function(t,e,r,y,v,g,b){l(r,e,y);var x,w,E,k=function(t){if(!f&&t in C)return C[t];switch(t){case p:case d:return function(){return new r(this,t)}}return function(){return new r(this,t)}},S=e+" Iterator",_=v==d,P=!1,C=t.prototype,A=C[u]||C["@@iterator"]||v&&C[v],T=A||k(v),M=v?_?k("entries"):T:void 0,D="Array"==e&&C.entries||A;if(D&&(E=h(D.call(new t)))!==Object.prototype&&E.next&&(c(E,S,!0),n||"function"==typeof E[u]||o(E,u,m)),_&&A&&A.name!==d&&(P=!0,T=function(){return A.call(this)}),n&&!b||!f&&!P&&C[u]||o(C,u,T),s[e]=T,s[S]=m,v)if(x={values:_?T:k(d),keys:g?T:k(p),entries:M},b)for(w in x)w in C||a(C,w,x[w]);else i(i.P+i.F*(f||P),e,x);return x}},322:t=>{t.exports=function(t,e){return{value:e,done:!!t}}},210:t=>{t.exports={}},4742:t=>{t.exports=!0},5172:(t,e,r)=>{var n=r(9191)("meta"),i=r(4401),a=r(5509),o=r(8423).f,s=0,l=Object.isExtensible||function(){return!0},c=!r(1984)((function(){return l(Object.preventExtensions({}))})),h=function(t){o(t,n,{value:{i:"O"+ ++s,w:{}}})},u=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!a(t,n)){if(!l(t))return"F";if(!e)return"E";h(t)}return t[n].i},getWeak:function(t,e){if(!a(t,n)){if(!l(t))return!0;if(!e)return!1;h(t)}return t[n].w},onFreeze:function(t){return c&&u.NEED&&l(t)&&!a(t,n)&&h(t),t}}},6854:(t,e,r)=>{var n=r(8219),i=r(4311),a=r(9820),o=r(6569),s=r(6310),l=r(7001),c=Object.assign;t.exports=!c||r(1984)((function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach((function(t){e[t]=t})),7!=c({},t)[r]||Object.keys(c({},e)).join("")!=n}))?function(t,e){for(var r=s(t),c=arguments.length,h=1,u=a.f,f=o.f;c>h;)for(var p,d=l(arguments[h++]),m=u?i(d).concat(u(d)):i(d),y=m.length,v=0;y>v;)p=m[v++],n&&!f.call(d,p)||(r[p]=d[p]);return r}:c},2087:(t,e,r)=>{var n=r(812),i=r(82),a=r(7956),o=r(4566)("IE_PROTO"),s=function(){},l="prototype",c=function(){var t,e=r(3802)("iframe"),n=a.length;for(e.style.display="none",r(3879).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;n--;)delete c[l][a[n]];return c()};t.exports=Object.create||function(t,e){var r;return null!==t?(s[l]=n(t),r=new s,s[l]=null,r[o]=t):r=c(),void 0===e?r:i(r,e)}},8423:(t,e,r)=>{var n=r(812),i=r(2484),a=r(752),o=Object.defineProperty;e.f=r(8219)?Object.defineProperty:function(t,e,r){if(n(t),e=a(e,!0),n(r),i)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},82:(t,e,r)=>{var n=r(8423),i=r(812),a=r(4311);t.exports=r(8219)?Object.defineProperties:function(t,e){i(t);for(var r,o=a(e),s=o.length,l=0;s>l;)n.f(t,r=o[l++],e[r]);return t}},1033:(t,e,r)=>{var n=r(6569),i=r(6260),a=r(5133),o=r(752),s=r(5509),l=r(2484),c=Object.getOwnPropertyDescriptor;e.f=r(8219)?c:function(t,e){if(t=a(t),e=o(e,!0),l)try{return c(t,e)}catch(t){}if(s(t,e))return i(!n.f.call(t,e),t[e])}},6309:(t,e,r)=>{var n=r(5133),i=r(1743).f,a={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==a.call(t)?function(t){try{return i(t)}catch(t){return o.slice()}}(t):i(n(t))}},1743:(t,e,r)=>{var n=r(5081),i=r(7956).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},9820:(t,e)=>{e.f=Object.getOwnPropertySymbols},6123:(t,e,r)=>{var n=r(5509),i=r(6310),a=r(4566)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},5081:(t,e,r)=>{var n=r(5509),i=r(5133),a=r(4448)(!1),o=r(4566)("IE_PROTO");t.exports=function(t,e){var r,s=i(t),l=0,c=[];for(r in s)r!=o&&n(s,r)&&c.push(r);for(;e.length>l;)n(s,r=e[l++])&&(~a(c,r)||c.push(r));return c}},4311:(t,e,r)=>{var n=r(5081),i=r(7956);t.exports=Object.keys||function(t){return n(t,i)}},6569:(t,e)=>{e.f={}.propertyIsEnumerable},7331:(t,e,r)=>{var n=r(8535),i=r(6438),a=r(1984);t.exports=function(t,e){var r=(i.Object||{})[t]||Object[t],o={};o[t]=e(r),n(n.S+n.F*a((function(){r(1)})),"Object",o)}},6260:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},1331:(t,e,r)=>{t.exports=r(2677)},2074:(t,e,r)=>{var n=r(4401),i=r(812),a=function(t,e){if(i(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(8852)(Function.call,r(1033).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return a(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:a}},1356:(t,e,r)=>{var n=r(8423).f,i=r(5509),a=r(254)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,a)&&n(t,a,{configurable:!0,value:e})}},4566:(t,e,r)=>{var n=r(6308)("keys"),i=r(9191);t.exports=function(t){return n[t]||(n[t]=i(t))}},6308:(t,e,r)=>{var n=r(6438),i=r(6670),a="__core-js_shared__",o=i[a]||(i[a]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(4742)?"pure":"global",copyright:"¬© 2020 Denis Pushkarev (zloirock.ru)"})},3172:(t,e,r)=>{var n=r(9383),i=r(7608);t.exports=function(t){return function(e,r){var a,o,s=String(i(e)),l=n(r),c=s.length;return l<0||l>=c?t?"":void 0:(a=s.charCodeAt(l))<55296||a>56319||l+1===c||(o=s.charCodeAt(l+1))<56320||o>57343?t?s.charAt(l):a:t?s.slice(l,l+2):o-56320+(a-55296<<10)+65536}}},2917:(t,e,r)=>{var n=r(9383),i=Math.max,a=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):a(t,e)}},9383:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},5133:(t,e,r)=>{var n=r(7001),i=r(7608);t.exports=function(t){return n(i(t))}},181:(t,e,r)=>{var n=r(9383),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},6310:(t,e,r)=>{var n=r(7608);t.exports=function(t){return Object(n(t))}},752:(t,e,r)=>{var n=r(4401);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},9191:t=>{var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},7816:(t,e,r)=>{var n=r(6670),i=r(6438),a=r(4742),o=r(4336),s=r(8423).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=a?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:o.f(t)})}},4336:(t,e,r)=>{e.f=r(254)},254:(t,e,r)=>{var n=r(6308)("wks"),i=r(9191),a=r(6670).Symbol,o="function"==typeof a;(t.exports=function(t){return n[t]||(n[t]=o&&a[t]||(o?a:i)("Symbol."+t))}).store=n},2293:(t,e,r)=>{var n=r(2560),i=r(322),a=r(210),o=r(5133);t.exports=r(8839)(Array,"Array",(function(t,e){this._t=o(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])}),"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},3758:(t,e,r)=>{var n=r(8535);n(n.S+n.F,"Object",{assign:r(6854)})},1951:(t,e,r)=>{var n=r(8535);n(n.S,"Object",{create:r(2087)})},4712:(t,e,r)=>{var n=r(8535);n(n.S+n.F*!r(8219),"Object",{defineProperty:r(8423).f})},8128:(t,e,r)=>{var n=r(6310),i=r(6123);r(7331)("getPrototypeOf",(function(){return function(t){return i(n(t))}}))},4284:(t,e,r)=>{var n=r(8535);n(n.S,"Object",{setPrototypeOf:r(2074).set})},8978:()=>{},7863:(t,e,r)=>{var n=r(3172)(!0);r(8839)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})}))},9626:(t,e,r)=>{var n=r(6670),i=r(5509),a=r(8219),o=r(8535),s=r(1331),l=r(5172).KEY,c=r(1984),h=r(6308),u=r(1356),f=r(9191),p=r(254),d=r(4336),m=r(7816),y=r(6473),v=r(5461),g=r(812),b=r(4401),x=r(6310),w=r(5133),E=r(752),k=r(6260),S=r(2087),_=r(6309),P=r(1033),C=r(9820),A=r(8423),T=r(4311),M=P.f,D=A.f,L=_.f,F=n.Symbol,O=n.JSON,I=O&&O.stringify,j="prototype",R=p("_hidden"),N=p("toPrimitive"),B={}.propertyIsEnumerable,V=h("symbol-registry"),G=h("symbols"),z=h("op-symbols"),H=Object[j],$="function"==typeof F&&!!C.f,U=n.QObject,q=!U||!U[j]||!U[j].findChild,W=a&&c((function(){return 7!=S(D({},"a",{get:function(){return D(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=M(H,e);n&&delete H[e],D(t,e,r),n&&t!==H&&D(H,e,n)}:D,Y=function(t){var e=G[t]=S(F[j]);return e._k=t,e},X=$&&"symbol"==typeof F.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof F},K=function(t,e,r){return t===H&&K(z,e,r),g(t),e=E(e,!0),g(r),i(G,e)?(r.enumerable?(i(t,R)&&t[R][e]&&(t[R][e]=!1),r=S(r,{enumerable:k(0,!1)})):(i(t,R)||D(t,R,k(1,{})),t[R][e]=!0),W(t,e,r)):D(t,e,r)},J=function(t,e){g(t);for(var r,n=y(e=w(e)),i=0,a=n.length;a>i;)K(t,r=n[i++],e[r]);return t},Z=function(t){var e=B.call(this,t=E(t,!0));return!(this===H&&i(G,t)&&!i(z,t))&&(!(e||!i(this,t)||!i(G,t)||i(this,R)&&this[R][t])||e)},Q=function(t,e){if(t=w(t),e=E(e,!0),t!==H||!i(G,e)||i(z,e)){var r=M(t,e);return!r||!i(G,e)||i(t,R)&&t[R][e]||(r.enumerable=!0),r}},tt=function(t){for(var e,r=L(w(t)),n=[],a=0;r.length>a;)i(G,e=r[a++])||e==R||e==l||n.push(e);return n},et=function(t){for(var e,r=t===H,n=L(r?z:w(t)),a=[],o=0;n.length>o;)!i(G,e=n[o++])||r&&!i(H,e)||a.push(G[e]);return a};$||(s((F=function(){if(this instanceof F)throw TypeError("Symbol is not a constructor!");var t=f(arguments.length>0?arguments[0]:void 0),e=function(r){this===H&&e.call(z,r),i(this,R)&&i(this[R],t)&&(this[R][t]=!1),W(this,t,k(1,r))};return a&&q&&W(H,t,{configurable:!0,set:e}),Y(t)})[j],"toString",(function(){return this._k})),P.f=Q,A.f=K,r(1743).f=_.f=tt,r(6569).f=Z,C.f=et,a&&!r(4742)&&s(H,"propertyIsEnumerable",Z,!0),d.f=function(t){return Y(p(t))}),o(o.G+o.W+o.F*!$,{Symbol:F});for(var rt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;rt.length>nt;)p(rt[nt++]);for(var it=T(p.store),at=0;it.length>at;)m(it[at++]);o(o.S+o.F*!$,"Symbol",{for:function(t){return i(V,t+="")?V[t]:V[t]=F(t)},keyFor:function(t){if(!X(t))throw TypeError(t+" is not a symbol!");for(var e in V)if(V[e]===t)return e},useSetter:function(){q=!0},useSimple:function(){q=!1}}),o(o.S+o.F*!$,"Object",{create:function(t,e){return void 0===e?S(t):J(S(t),e)},defineProperty:K,defineProperties:J,getOwnPropertyDescriptor:Q,getOwnPropertyNames:tt,getOwnPropertySymbols:et});var ot=c((function(){C.f(1)}));o(o.S+o.F*ot,"Object",{getOwnPropertySymbols:function(t){return C.f(x(t))}}),O&&o(o.S+o.F*(!$||c((function(){var t=F();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))}))),"JSON",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(b(e)||void 0!==t)&&!X(t))return v(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!X(e))return e}),n[1]=e,I.apply(O,n)}}),F[j][N]||r(2677)(F[j],N,F[j].valueOf),u(F,"Symbol"),u(Math,"Math",!0),u(n.JSON,"JSON",!0)},2860:(t,e,r)=>{r(7816)("asyncIterator")},716:(t,e,r)=>{r(7816)("observable")},7914:(t,e,r)=>{r(2293);for(var n=r(6670),i=r(2677),a=r(210),o=r(254)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),l=0;l<s.length;l++){var c=s[l],h=n[c],u=h&&h.prototype;u&&!u[o]&&i(u,o,c),a[c]=a.Array}},4353:function(t){t.exports=function(){var t=6e4,e=36e5,r="millisecond",n="second",i="minute",a="hour",o="day",s="week",l="month",c="quarter",h="year",u="date",f="Invalid Date",p=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,d=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,m={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(t){var e=["th","st","nd","rd"],r=t%100;return"["+t+(e[(r-20)%10]||e[r]||e[0])+"]"}},y=function(t,e,r){var n=String(t);return!n||n.length>=e?t:""+Array(e+1-n.length).join(r)+t},v={s:y,z:function(t){var e=-t.utcOffset(),r=Math.abs(e),n=Math.floor(r/60),i=r%60;return(e<=0?"+":"-")+y(n,2,"0")+":"+y(i,2,"0")},m:function t(e,r){if(e.date()<r.date())return-t(r,e);var n=12*(r.year()-e.year())+(r.month()-e.month()),i=e.clone().add(n,l),a=r-i<0,o=e.clone().add(n+(a?-1:1),l);return+(-(n+(r-i)/(a?i-o:o-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:l,y:h,w:s,d:o,D:u,h:a,m:i,s:n,ms:r,Q:c}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},g="en",b={};b[g]=m;var x="$isDayjsObject",w=function(t){return t instanceof _||!(!t||!t[x])},E=function t(e,r,n){var i;if(!e)return g;if("string"==typeof e){var a=e.toLowerCase();b[a]&&(i=a),r&&(b[a]=r,i=a);var o=e.split("-");if(!i&&o.length>1)return t(o[0])}else{var s=e.name;b[s]=e,i=s}return!n&&i&&(g=i),i||!n&&g},k=function(t,e){if(w(t))return t.clone();var r="object"==typeof e?e:{};return r.date=t,r.args=arguments,new _(r)},S=v;S.l=E,S.i=w,S.w=function(t,e){return k(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function m(t){this.$L=E(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[x]=!0}var y=m.prototype;return y.parse=function(t){this.$d=function(t){var e=t.date,r=t.utc;if(null===e)return new Date(NaN);if(S.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var n=e.match(p);if(n){var i=n[2]-1||0,a=(n[7]||"0").substring(0,3);return r?new Date(Date.UTC(n[1],i,n[3]||1,n[4]||0,n[5]||0,n[6]||0,a)):new Date(n[1],i,n[3]||1,n[4]||0,n[5]||0,n[6]||0,a)}}return new Date(e)}(t),this.init()},y.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},y.$utils=function(){return S},y.isValid=function(){return!(this.$d.toString()===f)},y.isSame=function(t,e){var r=k(t);return this.startOf(e)<=r&&r<=this.endOf(e)},y.isAfter=function(t,e){return k(t)<this.startOf(e)},y.isBefore=function(t,e){return this.endOf(e)<k(t)},y.$g=function(t,e,r){return S.u(t)?this[e]:this.set(r,t)},y.unix=function(){return Math.floor(this.valueOf()/1e3)},y.valueOf=function(){return this.$d.getTime()},y.startOf=function(t,e){var r=this,c=!!S.u(e)||e,f=S.p(t),p=function(t,e){var n=S.w(r.$u?Date.UTC(r.$y,e,t):new Date(r.$y,e,t),r);return c?n:n.endOf(o)},d=function(t,e){return S.w(r.toDate()[t].apply(r.toDate("s"),(c?[0,0,0,0]:[23,59,59,999]).slice(e)),r)},m=this.$W,y=this.$M,v=this.$D,g="set"+(this.$u?"UTC":"");switch(f){case h:return c?p(1,0):p(31,11);case l:return c?p(1,y):p(0,y+1);case s:var b=this.$locale().weekStart||0,x=(m<b?m+7:m)-b;return p(c?v-x:v+(6-x),y);case o:case u:return d(g+"Hours",0);case a:return d(g+"Minutes",1);case i:return d(g+"Seconds",2);case n:return d(g+"Milliseconds",3);default:return this.clone()}},y.endOf=function(t){return this.startOf(t,!1)},y.$set=function(t,e){var s,c=S.p(t),f="set"+(this.$u?"UTC":""),p=(s={},s[o]=f+"Date",s[u]=f+"Date",s[l]=f+"Month",s[h]=f+"FullYear",s[a]=f+"Hours",s[i]=f+"Minutes",s[n]=f+"Seconds",s[r]=f+"Milliseconds",s)[c],d=c===o?this.$D+(e-this.$W):e;if(c===l||c===h){var m=this.clone().set(u,1);m.$d[p](d),m.init(),this.$d=m.set(u,Math.min(this.$D,m.daysInMonth())).$d}else p&&this.$d[p](d);return this.init(),this},y.set=function(t,e){return this.clone().$set(t,e)},y.get=function(t){return this[S.p(t)]()},y.add=function(r,c){var u,f=this;r=Number(r);var p=S.p(c),d=function(t){var e=k(f);return S.w(e.date(e.date()+Math.round(t*r)),f)};if(p===l)return this.set(l,this.$M+r);if(p===h)return this.set(h,this.$y+r);if(p===o)return d(1);if(p===s)return d(7);var m=(u={},u[i]=t,u[a]=e,u[n]=1e3,u)[p]||1,y=this.$d.getTime()+r*m;return S.w(y,this)},y.subtract=function(t,e){return this.add(-1*t,e)},y.format=function(t){var e=this,r=this.$locale();if(!this.isValid())return r.invalidDate||f;var n=t||"YYYY-MM-DDTHH:mm:ssZ",i=S.z(this),a=this.$H,o=this.$m,s=this.$M,l=r.weekdays,c=r.months,h=r.meridiem,u=function(t,r,i,a){return t&&(t[r]||t(e,n))||i[r].slice(0,a)},p=function(t){return S.s(a%12||12,t,"0")},m=h||function(t,e,r){var n=t<12?"AM":"PM";return r?n.toLowerCase():n};return n.replace(d,(function(t,n){return n||function(t){switch(t){case"YY":return String(e.$y).slice(-2);case"YYYY":return S.s(e.$y,4,"0");case"M":return s+1;case"MM":return S.s(s+1,2,"0");case"MMM":return u(r.monthsShort,s,c,3);case"MMMM":return u(c,s);case"D":return e.$D;case"DD":return S.s(e.$D,2,"0");case"d":return String(e.$W);case"dd":return u(r.weekdaysMin,e.$W,l,2);case"ddd":return u(r.weekdaysShort,e.$W,l,3);case"dddd":return l[e.$W];case"H":return String(a);case"HH":return S.s(a,2,"0");case"h":return p(1);case"hh":return p(2);case"a":return m(a,o,!0);case"A":return m(a,o,!1);case"m":return String(o);case"mm":return S.s(o,2,"0");case"s":return String(e.$s);case"ss":return S.s(e.$s,2,"0");case"SSS":return S.s(e.$ms,3,"0");case"Z":return i}return null}(t)||i.replace(":","")}))},y.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},y.diff=function(r,u,f){var p,d=this,m=S.p(u),y=k(r),v=(y.utcOffset()-this.utcOffset())*t,g=this-y,b=function(){return S.m(d,y)};switch(m){case h:p=b()/12;break;case l:p=b();break;case c:p=b()/3;break;case s:p=(g-v)/6048e5;break;case o:p=(g-v)/864e5;break;case a:p=g/e;break;case i:p=g/t;break;case n:p=g/1e3;break;default:p=g}return f?p:S.a(p)},y.daysInMonth=function(){return this.endOf(l).$D},y.$locale=function(){return b[this.$L]},y.locale=function(t,e){if(!t)return this.$L;var r=this.clone(),n=E(t,e,!0);return n&&(r.$L=n),r},y.clone=function(){return S.w(this.$d,this)},y.toDate=function(){return new Date(this.valueOf())},y.toJSON=function(){return this.isValid()?this.toISOString():null},y.toISOString=function(){return this.$d.toISOString()},y.toString=function(){return this.$d.toUTCString()},m}(),P=_.prototype;return k.prototype=P,[["$ms",r],["$s",n],["$m",i],["$H",a],["$W",o],["$M",l],["$y",h],["$D",u]].forEach((function(t){P[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),k.extend=function(t,e){return t.$i||(t(e,_,k),t.$i=!0),k},k.locale=E,k.isDayjs=w,k.unix=function(t){return k(1e3*t)},k.en=b[g],k.Ls=b,k.p={},k}()},8720:function(t){t.exports=function(t,e,r){var n="h:mm A",i={lastDay:"[Yesterday at] "+n,sameDay:"[Today at] "+n,nextDay:"[Tomorrow at] "+n,nextWeek:"dddd [at] "+n,lastWeek:"[Last] dddd [at] "+n,sameElse:"MM/DD/YYYY"};e.prototype.calendar=function(t,e){var n=e||this.$locale().calendar||i,a=r(t||void 0).startOf("d"),o=this.diff(a,"d",!0),s="sameElse",l=o<-6?s:o<-1?"lastWeek":o<0?"lastDay":o<1?"sameDay":o<2?"nextDay":o<7?"nextWeek":s,c=n[l]||i[l];return"function"==typeof c?c.call(this,r()):this.format(c)}}},6279:function(t){t.exports=function(t,e,r){t=t||{};var n=e.prototype,i={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function a(t,e,r,i){return n.fromToBase(t,e,r,i)}r.en.relativeTime=i,n.fromToBase=function(e,n,a,o,s){for(var l,c,h,u=a.$locale().relativeTime||i,f=t.thresholds||[{l:"s",r:44,d:"second"},{l:"m",r:89},{l:"mm",r:44,d:"minute"},{l:"h",r:89},{l:"hh",r:21,d:"hour"},{l:"d",r:35},{l:"dd",r:25,d:"day"},{l:"M",r:45},{l:"MM",r:10,d:"month"},{l:"y",r:17},{l:"yy",d:"year"}],p=f.length,d=0;d<p;d+=1){var m=f[d];m.d&&(l=o?r(e).diff(a,m.d,!0):a.diff(e,m.d,!0));var y=(t.rounding||Math.round)(Math.abs(l));if(h=l>0,y<=m.r||!m.r){y<=1&&d>0&&(m=f[d-1]);var v=u[m.l];s&&(y=s(""+y)),c="string"==typeof v?v.replace("%d",y):v(y,n,m.l,h);break}}if(n)return c;var g=h?u.future:u.past;return"function"==typeof g?g(c):g.replace("%s",c)},n.to=function(t,e){return a(t,e,this,!0)},n.from=function(t,e){return a(t,e,this)};var o=function(t){return t.$u?r.utc():r()};n.toNow=function(t){return this.to(o(this),t)},n.fromNow=function(t){return this.from(o(this),t)}}},9891:function(module,exports,__webpack_require__){var factory;"undefined"!=typeof navigator&&(factory=function(){var svgNS="http://www.w3.org/2000/svg",locationHref="",_useWebWorker=!1,initialDefaultFrame=-999999,setWebWorker=function(t){_useWebWorker=!!t},getWebWorker=function(){return _useWebWorker},setLocationHref=function(t){locationHref=t},getLocationHref=function(){return locationHref};function createTag(t){return document.createElement(t)}function extendPrototype(t,e){var r,n,i=t.length;for(r=0;r<i;r+=1)for(var a in n=t[r].prototype)Object.prototype.hasOwnProperty.call(n,a)&&(e.prototype[a]=n[a])}function getDescriptor(t,e){return Object.getOwnPropertyDescriptor(t,e)}function createProxyFunction(t){function e(){}return e.prototype=t,e}var audioControllerFactory=function(){function t(t){this.audios=[],this.audioFactory=t,this._volume=1,this._isMuted=!1}return t.prototype={addAudio:function(t){this.audios.push(t)},pause:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].pause()},resume:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].resume()},setRate:function(t){var e,r=this.audios.length;for(e=0;e<r;e+=1)this.audios[e].setRate(t)},createAudio:function(t){return this.audioFactory?this.audioFactory(t):window.Howl?new window.Howl({src:[t]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(t){this.audioFactory=t},setVolume:function(t){this._volume=t,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].volume(this._volume*(this._isMuted?0:1))}},function(){return new t}}(),createTypedArray=function(){function t(t,e){var r,n=0,i=[];switch(t){case"int16":case"uint8c":r=1;break;default:r=1.1}for(n=0;n<e;n+=1)i.push(r);return i}return"function"==typeof Uint8ClampedArray&&"function"==typeof Float32Array?function(e,r){return"float32"===e?new Float32Array(r):"int16"===e?new Int16Array(r):"uint8c"===e?new Uint8ClampedArray(r):t(e,r)}:t}();function createSizedArray(t){return Array.apply(null,{length:t})}function _typeof$6(t){return _typeof$6="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$6(t)}var subframeEnabled=!0,expressionsPlugin=null,expressionsInterfaces=null,idPrefix$1="",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),_shouldRoundValues=!1,bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};function ProjectInterface$1(){return{}}!function(){var t,e=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],r=e.length;for(t=0;t<r;t+=1)BMMath[e[t]]=Math[e[t]]}(),BMMath.random=Math.random,BMMath.abs=function(t){if("object"===_typeof$6(t)&&t.length){var e,r=createSizedArray(t.length),n=t.length;for(e=0;e<n;e+=1)r[e]=Math.abs(t[e]);return r}return Math.abs(t)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function roundValues(t){_shouldRoundValues=!!t}function bmRnd(t){return _shouldRoundValues?Math.round(t):t}function styleDiv(t){t.style.position="absolute",t.style.top=0,t.style.left=0,t.style.display="block",t.style.transformOrigin="0 0",t.style.webkitTransformOrigin="0 0",t.style.backfaceVisibility="visible",t.style.webkitBackfaceVisibility="visible",t.style.transformStyle="preserve-3d",t.style.webkitTransformStyle="preserve-3d",t.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(t,e,r,n){this.type=t,this.currentTime=e,this.totalTime=r,this.direction=n<0?-1:1}function BMCompleteEvent(t,e){this.type=t,this.direction=e<0?-1:1}function BMCompleteLoopEvent(t,e,r,n){this.type=t,this.currentLoop=r,this.totalLoops=e,this.direction=n<0?-1:1}function BMSegmentStartEvent(t,e,r){this.type=t,this.firstFrame=e,this.totalFrames=r}function BMDestroyEvent(t,e){this.type=t,this.target=e}function BMRenderFrameErrorEvent(t,e){this.type="renderFrameError",this.nativeError=t,this.currentTime=e}function BMConfigErrorEvent(t){this.type="configError",this.nativeError=t}function BMAnimationConfigErrorEvent(t,e){this.type=t,this.nativeError=e}var createElementID=(_count=0,function(){return idPrefix$1+"__lottie_element_"+(_count+=1)}),_count;function HSVtoRGB(t,e,r){var n,i,a,o,s,l,c,h;switch(l=r*(1-e),c=r*(1-(s=6*t-(o=Math.floor(6*t)))*e),h=r*(1-(1-s)*e),o%6){case 0:n=r,i=h,a=l;break;case 1:n=c,i=r,a=l;break;case 2:n=l,i=r,a=h;break;case 3:n=l,i=c,a=r;break;case 4:n=h,i=l,a=r;break;case 5:n=r,i=l,a=c}return[n,i,a]}function RGBtoHSV(t,e,r){var n,i=Math.max(t,e,r),a=Math.min(t,e,r),o=i-a,s=0===i?0:o/i,l=i/255;switch(i){case a:n=0;break;case t:n=e-r+o*(e<r?6:0),n/=6*o;break;case e:n=r-t+2*o,n/=6*o;break;case r:n=t-e+4*o,n/=6*o}return[n,s,l]}function addSaturationToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[1]+=e,r[1]>1?r[1]=1:r[1]<=0&&(r[1]=0),HSVtoRGB(r[0],r[1],r[2])}function addBrightnessToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[2]+=e,r[2]>1?r[2]=1:r[2]<0&&(r[2]=0),HSVtoRGB(r[0],r[1],r[2])}function addHueToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[0]+=e/360,r[0]>1?r[0]-=1:r[0]<0&&(r[0]+=1),HSVtoRGB(r[0],r[1],r[2])}var rgbToHex=function(){var t,e,r=[];for(t=0;t<256;t+=1)e=t.toString(16),r[t]=1===e.length?"0"+e:e;return function(t,e,n){return t<0&&(t=0),e<0&&(e=0),n<0&&(n=0),"#"+r[t]+r[e]+r[n]}}(),setSubframeEnabled=function(t){subframeEnabled=!!t},getSubframeEnabled=function(){return subframeEnabled},setExpressionsPlugin=function(t){expressionsPlugin=t},getExpressionsPlugin=function(){return expressionsPlugin},setExpressionInterfaces=function(t){expressionsInterfaces=t},getExpressionInterfaces=function(){return expressionsInterfaces},setDefaultCurveSegments=function(t){defaultCurveSegments=t},getDefaultCurveSegments=function(){return defaultCurveSegments},setIdPrefix=function(t){idPrefix$1=t},getIdPrefix=function(){return idPrefix$1};function createNS(t){return document.createElementNS(svgNS,t)}function _typeof$5(t){return _typeof$5="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$5(t)}var dataManager=function(){var t,e,r=1,n=[],i={onmessage:function(){},postMessage:function(e){t({data:e})}},a={postMessage:function(t){i.onmessage({data:t})}};function o(){e||(e=function(e){if(window.Worker&&window.Blob&&getWebWorker()){var r=new Blob(["var _workerSelf = self; self.onmessage = ",e.toString()],{type:"text/javascript"}),n=URL.createObjectURL(r);return new Worker(n)}return t=e,i}((function(t){if(a.dataManager||(a.dataManager=function(){function t(i,a){var o,s,l,c,h,u,f,p=i.length;for(s=0;s<p;s+=1)if("ks"in(o=i[s])&&!o.completed){if(o.completed=!0,o.hasMask){var d=o.masksProperties;for(c=d.length,l=0;l<c;l+=1)if(d[l].pt.k.i)n(d[l].pt.k);else for(u=d[l].pt.k.length,h=0;h<u;h+=1)d[l].pt.k[h].s&&n(d[l].pt.k[h].s[0]),d[l].pt.k[h].e&&n(d[l].pt.k[h].e[0])}0===o.ty?(o.layers=e(o.refId,a),t(o.layers,a)):4===o.ty?r(o.shapes):5===o.ty&&(0===(f=o).t.a.length&&f.t.p)}}function e(t,e){var r=function(t,e){for(var r=0,n=e.length;r<n;){if(e[r].id===t)return e[r];r+=1}return null}(t,e);return r?r.layers.__used?JSON.parse(JSON.stringify(r.layers)):(r.layers.__used=!0,r.layers):null}function r(t){var e,i,a;for(e=t.length-1;e>=0;e-=1)if("sh"===t[e].ty)if(t[e].ks.k.i)n(t[e].ks.k);else for(a=t[e].ks.k.length,i=0;i<a;i+=1)t[e].ks.k[i].s&&n(t[e].ks.k[i].s[0]),t[e].ks.k[i].e&&n(t[e].ks.k[i].e[0]);else"gr"===t[e].ty&&r(t[e].it)}function n(t){var e,r=t.i.length;for(e=0;e<r;e+=1)t.i[e][0]+=t.v[e][0],t.i[e][1]+=t.v[e][1],t.o[e][0]+=t.v[e][0],t.o[e][1]+=t.v[e][1]}function i(t,e){var r=e?e.split("."):[100,100,100];return t[0]>r[0]||!(r[0]>t[0])&&(t[1]>r[1]||!(r[1]>t[1])&&(t[2]>r[2]||!(r[2]>t[2])&&null))}var a,o=function(){var t=[4,4,14];function e(t){var e,r,n,i=t.length;for(e=0;e<i;e+=1)5===t[e].ty&&(void 0,n=(r=t[e]).t.d,r.t.d={k:[{s:n,t:0}]})}return function(r){if(i(t,r.v)&&(e(r.layers),r.assets)){var n,a=r.assets.length;for(n=0;n<a;n+=1)r.assets[n].layers&&e(r.assets[n].layers)}}}(),s=(a=[4,7,99],function(t){if(t.chars&&!i(a,t.v)){var e,n=t.chars.length;for(e=0;e<n;e+=1){var o=t.chars[e];o.data&&o.data.shapes&&(r(o.data.shapes),o.data.ip=0,o.data.op=99999,o.data.st=0,o.data.sr=1,o.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}},t.chars[e].t||(o.data.shapes.push({ty:"no"}),o.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:"tr"})))}}}),l=function(){var t=[5,7,15];function e(t){var e,r,n=t.length;for(e=0;e<n;e+=1)5===t[e].ty&&(r=void 0,"number"==typeof(r=t[e].t.p).a&&(r.a={a:0,k:r.a}),"number"==typeof r.p&&(r.p={a:0,k:r.p}),"number"==typeof r.r&&(r.r={a:0,k:r.r}))}return function(r){if(i(t,r.v)&&(e(r.layers),r.assets)){var n,a=r.assets.length;for(n=0;n<a;n+=1)r.assets[n].layers&&e(r.assets[n].layers)}}}(),c=function(){var t=[4,1,9];function e(t){var r,n,i,a=t.length;for(r=0;r<a;r+=1)if("gr"===t[r].ty)e(t[r].it);else if("fl"===t[r].ty||"st"===t[r].ty)if(t[r].c.k&&t[r].c.k[0].i)for(i=t[r].c.k.length,n=0;n<i;n+=1)t[r].c.k[n].s&&(t[r].c.k[n].s[0]/=255,t[r].c.k[n].s[1]/=255,t[r].c.k[n].s[2]/=255,t[r].c.k[n].s[3]/=255),t[r].c.k[n].e&&(t[r].c.k[n].e[0]/=255,t[r].c.k[n].e[1]/=255,t[r].c.k[n].e[2]/=255,t[r].c.k[n].e[3]/=255);else t[r].c.k[0]/=255,t[r].c.k[1]/=255,t[r].c.k[2]/=255,t[r].c.k[3]/=255}function r(t){var r,n=t.length;for(r=0;r<n;r+=1)4===t[r].ty&&e(t[r].shapes)}return function(e){if(i(t,e.v)&&(r(e.layers),e.assets)){var n,a=e.assets.length;for(n=0;n<a;n+=1)e.assets[n].layers&&r(e.assets[n].layers)}}}(),h=function(){var t=[4,4,18];function e(t){var r,n,i;for(r=t.length-1;r>=0;r-=1)if("sh"===t[r].ty)if(t[r].ks.k.i)t[r].ks.k.c=t[r].closed;else for(i=t[r].ks.k.length,n=0;n<i;n+=1)t[r].ks.k[n].s&&(t[r].ks.k[n].s[0].c=t[r].closed),t[r].ks.k[n].e&&(t[r].ks.k[n].e[0].c=t[r].closed);else"gr"===t[r].ty&&e(t[r].it)}function r(t){var r,n,i,a,o,s,l=t.length;for(n=0;n<l;n+=1){if((r=t[n]).hasMask){var c=r.masksProperties;for(a=c.length,i=0;i<a;i+=1)if(c[i].pt.k.i)c[i].pt.k.c=c[i].cl;else for(s=c[i].pt.k.length,o=0;o<s;o+=1)c[i].pt.k[o].s&&(c[i].pt.k[o].s[0].c=c[i].cl),c[i].pt.k[o].e&&(c[i].pt.k[o].e[0].c=c[i].cl)}4===r.ty&&e(r.shapes)}}return function(e){if(i(t,e.v)&&(r(e.layers),e.assets)){var n,a=e.assets.length;for(n=0;n<a;n+=1)e.assets[n].layers&&r(e.assets[n].layers)}}}();var u={completeData:function(r){r.__complete||(c(r),o(r),s(r),l(r),h(r),t(r.layers,r.assets),function(r,n){if(r){var i=0,a=r.length;for(i=0;i<a;i+=1)1===r[i].t&&(r[i].data.layers=e(r[i].data.refId,n),t(r[i].data.layers,n))}}(r.chars,r.assets),r.__complete=!0)}};return u.checkColors=c,u.checkChars=s,u.checkPathProperties=l,u.checkShapes=h,u.completeLayers=t,u}()),a.assetLoader||(a.assetLoader=function(){function t(t){var e=t.getResponseHeader("content-type");return e&&"json"===t.responseType&&-1!==e.indexOf("json")||t.response&&"object"===_typeof$5(t.response)?t.response:t.response&&"string"==typeof t.response?JSON.parse(t.response):t.responseText?JSON.parse(t.responseText):null}return{load:function(e,r,n,i){var a,o=new XMLHttpRequest;try{o.responseType="json"}catch(t){}o.onreadystatechange=function(){if(4===o.readyState)if(200===o.status)a=t(o),n(a);else try{a=t(o),n(a)}catch(t){i&&i(t)}};try{o.open(["G","E","T"].join(""),e,!0)}catch(t){o.open(["G","E","T"].join(""),r+"/"+e,!0)}o.send()}}}()),"loadAnimation"===t.data.type)a.assetLoader.load(t.data.path,t.data.fullPath,(function(e){a.dataManager.completeData(e),a.postMessage({id:t.data.id,payload:e,status:"success"})}),(function(){a.postMessage({id:t.data.id,status:"error"})}));else if("complete"===t.data.type){var e=t.data.animation;a.dataManager.completeData(e),a.postMessage({id:t.data.id,payload:e,status:"success"})}else"loadData"===t.data.type&&a.assetLoader.load(t.data.path,t.data.fullPath,(function(e){a.postMessage({id:t.data.id,payload:e,status:"success"})}),(function(){a.postMessage({id:t.data.id,status:"error"})}))})),e.onmessage=function(t){var e=t.data,r=e.id,i=n[r];n[r]=null,"success"===e.status?i.onComplete(e.payload):i.onError&&i.onError()})}function s(t,e){var i="processId_"+(r+=1);return n[i]={onComplete:t,onError:e},i}return{loadAnimation:function(t,r,n){o();var i=s(r,n);e.postMessage({type:"loadAnimation",path:t,fullPath:window.location.origin+window.location.pathname,id:i})},loadData:function(t,r,n){o();var i=s(r,n);e.postMessage({type:"loadData",path:t,fullPath:window.location.origin+window.location.pathname,id:i})},completeAnimation:function(t,r,n){o();var i=s(r,n);e.postMessage({type:"complete",animation:t,id:i})}}}(),ImagePreloader=function(){var t=function(){var t=createTag("canvas");t.width=1,t.height=1;var e=t.getContext("2d");return e.fillStyle="rgba(0,0,0,0)",e.fillRect(0,0,1,1),t}();function e(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function r(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function n(t,e,r){var n="";if(t.e)n=t.p;else if(e){var i=t.p;-1!==i.indexOf("images/")&&(i=i.split("/")[1]),n=e+i}else n=r,n+=t.u?t.u:"",n+=t.p;return n}function i(t){var e=0,r=setInterval(function(){(t.getBBox().width||e>500)&&(this._imageLoaded(),clearInterval(r)),e+=1}.bind(this),50)}function a(t){var e={assetData:t},r=n(t,this.assetsPath,this.path);return dataManager.loadData(r,function(t){e.img=t,this._footageLoaded()}.bind(this),function(){e.img={},this._footageLoaded()}.bind(this)),e}function o(){this._imageLoaded=e.bind(this),this._footageLoaded=r.bind(this),this.testImageLoaded=i.bind(this),this.createFootageData=a.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return o.prototype={loadAssets:function(t,e){var r;this.imagesLoadedCb=e;var n=t.length;for(r=0;r<n;r+=1)t[r].layers||(t[r].t&&"seq"!==t[r].t?3===t[r].t&&(this.totalFootages+=1,this.images.push(this.createFootageData(t[r]))):(this.totalImages+=1,this.images.push(this._createImageData(t[r]))))},setAssetsPath:function(t){this.assetsPath=t||""},setPath:function(t){this.path=t||""},loadedImages:function(){return this.totalImages===this.loadedAssets},loadedFootages:function(){return this.totalFootages===this.loadedFootagesCount},destroy:function(){this.imagesLoadedCb=null,this.images.length=0},getAsset:function(t){for(var e=0,r=this.images.length;e<r;){if(this.images[e].assetData===t)return this.images[e].img;e+=1}return null},createImgData:function(e){var r=n(e,this.assetsPath,this.path),i=createTag("img");i.crossOrigin="anonymous",i.addEventListener("load",this._imageLoaded,!1),i.addEventListener("error",function(){a.img=t,this._imageLoaded()}.bind(this),!1),i.src=r;var a={img:i,assetData:e};return a},createImageData:function(e){var r=n(e,this.assetsPath,this.path),i=createNS("image");isSafari?this.testImageLoaded(i):i.addEventListener("load",this._imageLoaded,!1),i.addEventListener("error",function(){a.img=t,this._imageLoaded()}.bind(this),!1),i.setAttributeNS("http://www.w3.org/1999/xlink","href",r),this._elementHelper.append?this._elementHelper.append(i):this._elementHelper.appendChild(i);var a={img:i,assetData:e};return a},imageLoaded:e,footageLoaded:r,setCacheType:function(t,e){"svg"===t?(this._elementHelper=e,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}},o}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(t,e){if(this._cbs[t])for(var r=this._cbs[t],n=0;n<r.length;n+=1)r[n](e)},addEventListener:function(t,e){return this._cbs[t]||(this._cbs[t]=[]),this._cbs[t].push(e),function(){this.removeEventListener(t,e)}.bind(this)},removeEventListener:function(t,e){if(e){if(this._cbs[t]){for(var r=0,n=this._cbs[t].length;r<n;)this._cbs[t][r]===e&&(this._cbs[t].splice(r,1),r-=1,n-=1),r+=1;this._cbs[t].length||(this._cbs[t]=null)}}else this._cbs[t]=null}};var markerParser=function(){function t(t){for(var e,r=t.split("\r\n"),n={},i=0,a=0;a<r.length;a+=1)2===(e=r[a].split(":")).length&&(n[e[0]]=e[1].trim(),i+=1);if(0===i)throw new Error;return n}return function(e){for(var r=[],n=0;n<e.length;n+=1){var i=e[n],a={time:i.tm,duration:i.dr};try{a.payload=JSON.parse(e[n].cm)}catch(r){try{a.payload=t(e[n].cm)}catch(t){a.payload={name:e[n].cm}}}r.push(a)}return r}}(),ProjectInterface=function(){function t(t){this.compositions.push(t)}return function(){function e(t){for(var e=0,r=this.compositions.length;e<r;){if(this.compositions[e].data&&this.compositions[e].data.nm===t)return this.compositions[e].prepareFrame&&this.compositions[e].data.xt&&this.compositions[e].prepareFrame(this.currentFrame),this.compositions[e].compInterface;e+=1}return null}return e.compositions=[],e.currentFrame=0,e.registerComposition=t,e}}(),renderers={},registerRenderer=function(t,e){renderers[t]=e};function getRenderer(t){return renderers[t]}function getRegisteredRenderer(){if(renderers.canvas)return"canvas";for(var t in renderers)if(renderers[t])return t;return""}function _typeof$4(t){return _typeof$4="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$4(t)}var AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=getSubframeEnabled(),this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[],this.configAnimation=this.configAnimation.bind(this),this.onSetupError=this.onSetupError.bind(this),this.onSegmentComplete=this.onSegmentComplete.bind(this),this.drawnFrameEvent=new BMEnterFrameEvent("drawnFrame",0,0,0),this.expressionsPlugin=getExpressionsPlugin()};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(t){(t.wrapper||t.container)&&(this.wrapper=t.wrapper||t.container);var e="svg";t.animType?e=t.animType:t.renderer&&(e=t.renderer);var r=getRenderer(e);this.renderer=new r(this,t.rendererSettings),this.imagePreloader.setCacheType(e,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=e,""===t.loop||null===t.loop||void 0===t.loop||!0===t.loop?this.loop=!0:!1===t.loop?this.loop=!1:this.loop=parseInt(t.loop,10),this.autoplay=!("autoplay"in t)||t.autoplay,this.name=t.name?t.name:"",this.autoloadSegments=!Object.prototype.hasOwnProperty.call(t,"autoloadSegments")||t.autoloadSegments,this.assetsPath=t.assetsPath,this.initialSegment=t.initialSegment,t.audioFactory&&this.audioController.setAudioFactory(t.audioFactory),t.animationData?this.setupAnimation(t.animationData):t.path&&(-1!==t.path.lastIndexOf("\\")?this.path=t.path.substr(0,t.path.lastIndexOf("\\")+1):this.path=t.path.substr(0,t.path.lastIndexOf("/")+1),this.fileName=t.path.substr(t.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),dataManager.loadAnimation(t.path,this.configAnimation,this.onSetupError))},AnimationItem.prototype.onSetupError=function(){this.trigger("data_failed")},AnimationItem.prototype.setupAnimation=function(t){dataManager.completeAnimation(t,this.configAnimation)},AnimationItem.prototype.setData=function(t,e){e&&"object"!==_typeof$4(e)&&(e=JSON.parse(e));var r={wrapper:t,animationData:e},n=t.attributes;r.path=n.getNamedItem("data-animation-path")?n.getNamedItem("data-animation-path").value:n.getNamedItem("data-bm-path")?n.getNamedItem("data-bm-path").value:n.getNamedItem("bm-path")?n.getNamedItem("bm-path").value:"",r.animType=n.getNamedItem("data-anim-type")?n.getNamedItem("data-anim-type").value:n.getNamedItem("data-bm-type")?n.getNamedItem("data-bm-type").value:n.getNamedItem("bm-type")?n.getNamedItem("bm-type").value:n.getNamedItem("data-bm-renderer")?n.getNamedItem("data-bm-renderer").value:n.getNamedItem("bm-renderer")?n.getNamedItem("bm-renderer").value:getRegisteredRenderer()||"canvas";var i=n.getNamedItem("data-anim-loop")?n.getNamedItem("data-anim-loop").value:n.getNamedItem("data-bm-loop")?n.getNamedItem("data-bm-loop").value:n.getNamedItem("bm-loop")?n.getNamedItem("bm-loop").value:"";"false"===i?r.loop=!1:"true"===i?r.loop=!0:""!==i&&(r.loop=parseInt(i,10));var a=n.getNamedItem("data-anim-autoplay")?n.getNamedItem("data-anim-autoplay").value:n.getNamedItem("data-bm-autoplay")?n.getNamedItem("data-bm-autoplay").value:!n.getNamedItem("bm-autoplay")||n.getNamedItem("bm-autoplay").value;r.autoplay="false"!==a,r.name=n.getNamedItem("data-name")?n.getNamedItem("data-name").value:n.getNamedItem("data-bm-name")?n.getNamedItem("data-bm-name").value:n.getNamedItem("bm-name")?n.getNamedItem("bm-name").value:"","false"===(n.getNamedItem("data-anim-prerender")?n.getNamedItem("data-anim-prerender").value:n.getNamedItem("data-bm-prerender")?n.getNamedItem("data-bm-prerender").value:n.getNamedItem("bm-prerender")?n.getNamedItem("bm-prerender").value:"")&&(r.prerender=!1),r.path?this.setParams(r):this.trigger("destroy")},AnimationItem.prototype.includeLayers=function(t){t.op>this.animationData.op&&(this.animationData.op=t.op,this.totalFrames=Math.floor(t.op-this.animationData.ip));var e,r,n=this.animationData.layers,i=n.length,a=t.layers,o=a.length;for(r=0;r<o;r+=1)for(e=0;e<i;){if(n[e].id===a[r].id){n[e]=a[r];break}e+=1}if((t.chars||t.fonts)&&(this.renderer.globalData.fontManager.addChars(t.chars),this.renderer.globalData.fontManager.addFonts(t.fonts,this.renderer.globalData.defs)),t.assets)for(i=t.assets.length,e=0;e<i;e+=1)this.animationData.assets.push(t.assets[e]);this.animationData.__complete=!1,dataManager.completeAnimation(this.animationData,this.onSegmentComplete)},AnimationItem.prototype.onSegmentComplete=function(t){this.animationData=t;var e=getExpressionsPlugin();e&&e.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var t=this.animationData.segments;if(!t||0===t.length||!this.autoloadSegments)return this.trigger("data_ready"),void(this.timeCompleted=this.totalFrames);var e=t.shift();this.timeCompleted=e.time*this.frameRate;var r=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,dataManager.loadData(r,this.includeLayers.bind(this),function(){this.trigger("data_failed")}.bind(this))},AnimationItem.prototype.loadSegments=function(){this.animationData.segments||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(t){if(this.renderer)try{this.animationData=t,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(t),t.assets||(t.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(t.assets),this.markers=markerParser(t.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(t){this.triggerConfigError(t)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||"canvas"!==this.renderer.rendererType)&&this.imagePreloader.loadedFootages()){this.isLoaded=!0;var t=getExpressionsPlugin();t&&t.initExpressions(this),this.renderer.initItems(),setTimeout(function(){this.trigger("DOMLoaded")}.bind(this),0),this.gotoFrame(),this.autoplay&&this.play()}},AnimationItem.prototype.resize=function(t,e){var r="number"==typeof t?t:void 0,n="number"==typeof e?e:void 0;this.renderer.updateContainerSize(r,n)},AnimationItem.prototype.setSubframe=function(t){this.isSubframeEnabled=!!t},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame(),this.trigger("drawnFrame")},AnimationItem.prototype.renderFrame=function(){if(!1!==this.isLoaded&&this.renderer)try{this.expressionsPlugin&&this.expressionsPlugin.resetFrame(),this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(t){this.triggerRenderFrameError(t)}},AnimationItem.prototype.play=function(t){t&&this.name!==t||!0===this.isPaused&&(this.isPaused=!1,this.trigger("_play"),this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(t){t&&this.name!==t||!1===this.isPaused&&(this.isPaused=!0,this.trigger("_pause"),this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(t){t&&this.name!==t||(!0===this.isPaused?this.play():this.pause())},AnimationItem.prototype.stop=function(t){t&&this.name!==t||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(t){for(var e,r=0;r<this.markers.length;r+=1)if((e=this.markers[r]).payload&&e.payload.name===t)return e;return null},AnimationItem.prototype.goToAndStop=function(t,e,r){if(!r||this.name===r){var n=Number(t);if(isNaN(n)){var i=this.getMarkerData(t);i&&this.goToAndStop(i.time,!0)}else e?this.setCurrentRawFrameValue(t):this.setCurrentRawFrameValue(t*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(t,e,r){if(!r||this.name===r){var n=Number(t);if(isNaN(n)){var i=this.getMarkerData(t);i&&(i.duration?this.playSegments([i.time,i.time+i.duration],!0):this.goToAndStop(i.time,!0))}else this.goToAndStop(n,e,r);this.play()}},AnimationItem.prototype.advanceTime=function(t){if(!0!==this.isPaused&&!1!==this.isLoaded){var e=this.currentRawFrame+t*this.frameModifier,r=!1;e>=this.totalFrames-1&&this.frameModifier>0?this.loop&&this.playCount!==this.loop?e>=this.totalFrames?(this.playCount+=1,this.checkSegments(e%this.totalFrames)||(this.setCurrentRawFrameValue(e%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(e):this.checkSegments(e>this.totalFrames?e%this.totalFrames:0)||(r=!0,e=this.totalFrames-1):e<0?this.checkSegments(e%this.totalFrames)||(!this.loop||this.playCount--<=0&&!0!==this.loop?(r=!0,e=0):(this.setCurrentRawFrameValue(this.totalFrames+e%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0)):this.setCurrentRawFrameValue(e),r&&(this.setCurrentRawFrameValue(e),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(t,e){this.playCount=0,t[1]<t[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=t[0]-t[1],this.timeCompleted=this.totalFrames,this.firstFrame=t[1],this.setCurrentRawFrameValue(this.totalFrames-.001-e)):t[1]>t[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=t[1]-t[0],this.timeCompleted=this.totalFrames,this.firstFrame=t[0],this.setCurrentRawFrameValue(.001+e)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(t,e){var r=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<t?r=t:this.currentRawFrame+this.firstFrame>e&&(r=e-t)),this.firstFrame=t,this.totalFrames=e-t,this.timeCompleted=this.totalFrames,-1!==r&&this.goToAndStop(r,!0)},AnimationItem.prototype.playSegments=function(t,e){if(e&&(this.segments.length=0),"object"===_typeof$4(t[0])){var r,n=t.length;for(r=0;r<n;r+=1)this.segments.push(t[r])}else this.segments.push(t);this.segments.length&&e&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(t){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),t&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(t){return!!this.segments.length&&(this.adjustSegment(this.segments.shift(),t),!0)},AnimationItem.prototype.destroy=function(t){t&&this.name!==t||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.expressionsPlugin=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(t){this.currentRawFrame=t,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(t){this.playSpeed=t,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(t){this.playDirection=t<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setLoop=function(t){this.loop=t},AnimationItem.prototype.setVolume=function(t,e){e&&this.name!==e||this.audioController.setVolume(t)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(t){t&&this.name!==t||this.audioController.mute()},AnimationItem.prototype.unmute=function(t){t&&this.name!==t||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(t){var e="";if(t.e)e=t.p;else if(this.assetsPath){var r=t.p;-1!==r.indexOf("images/")&&(r=r.split("/")[1]),e=this.assetsPath+r}else e=this.path,e+=t.u?t.u:"",e+=t.p;return e},AnimationItem.prototype.getAssetData=function(t){for(var e=0,r=this.assets.length;e<r;){if(t===this.assets[e].id)return this.assets[e];e+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(t){return t?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.updateDocumentData=function(t,e,r){try{this.renderer.getElementByPath(t).updateDocumentData(e,r)}catch(t){}},AnimationItem.prototype.trigger=function(t){if(this._cbs&&this._cbs[t])switch(t){case"enterFrame":this.triggerEvent(t,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameModifier));break;case"drawnFrame":this.drawnFrameEvent.currentTime=this.currentFrame,this.drawnFrameEvent.totalTime=this.totalFrames,this.drawnFrameEvent.direction=this.frameModifier,this.triggerEvent(t,this.drawnFrameEvent);break;case"loopComplete":this.triggerEvent(t,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(t,new BMCompleteEvent(t,this.frameMult));break;case"segmentStart":this.triggerEvent(t,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(t,new BMDestroyEvent(t,this));break;default:this.triggerEvent(t)}"enterFrame"===t&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameMult)),"loopComplete"===t&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult)),"complete"===t&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(t,this.frameMult)),"segmentStart"===t&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames)),"destroy"===t&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(t,this))},AnimationItem.prototype.triggerRenderFrameError=function(t){var e=new BMRenderFrameErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)},AnimationItem.prototype.triggerConfigError=function(t){var e=new BMConfigErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)};var animationManager=function(){var t={},e=[],r=0,n=0,i=0,a=!0,o=!1;function s(t){for(var r=0,i=t.target;r<n;)e[r].animation===i&&(e.splice(r,1),r-=1,n-=1,i.isPaused||h()),r+=1}function l(t,r){if(!t)return null;for(var i=0;i<n;){if(e[i].elem===t&&null!==e[i].elem)return e[i].animation;i+=1}var a=new AnimationItem;return u(a,t),a.setData(t,r),a}function c(){i+=1,d()}function h(){i-=1}function u(t,r){t.addEventListener("destroy",s),t.addEventListener("_active",c),t.addEventListener("_idle",h),e.push({elem:r,animation:t}),n+=1}function f(t){var s,l=t-r;for(s=0;s<n;s+=1)e[s].animation.advanceTime(l);r=t,i&&!o?window.requestAnimationFrame(f):a=!0}function p(t){r=t,window.requestAnimationFrame(f)}function d(){!o&&i&&a&&(window.requestAnimationFrame(p),a=!1)}return t.registerAnimation=l,t.loadAnimation=function(t){var e=new AnimationItem;return u(e,null),e.setParams(t),e},t.setSpeed=function(t,r){var i;for(i=0;i<n;i+=1)e[i].animation.setSpeed(t,r)},t.setDirection=function(t,r){var i;for(i=0;i<n;i+=1)e[i].animation.setDirection(t,r)},t.play=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.play(t)},t.pause=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.pause(t)},t.stop=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.stop(t)},t.togglePause=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.togglePause(t)},t.searchAnimations=function(t,e,r){var n,i=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),a=i.length;for(n=0;n<a;n+=1)r&&i[n].setAttribute("data-bm-type",r),l(i[n],t);if(e&&0===a){r||(r="svg");var o=document.getElementsByTagName("body")[0];o.innerText="";var s=createTag("div");s.style.width="100%",s.style.height="100%",s.setAttribute("data-bm-type",r),o.appendChild(s),l(s,t)}},t.resize=function(){var t;for(t=0;t<n;t+=1)e[t].animation.resize()},t.goToAndStop=function(t,r,i){var a;for(a=0;a<n;a+=1)e[a].animation.goToAndStop(t,r,i)},t.destroy=function(t){var r;for(r=n-1;r>=0;r-=1)e[r].animation.destroy(t)},t.freeze=function(){o=!0},t.unfreeze=function(){o=!1,d()},t.setVolume=function(t,r){var i;for(i=0;i<n;i+=1)e[i].animation.setVolume(t,r)},t.mute=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.mute(t)},t.unmute=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.unmute(t)},t.getRegisteredAnimations=function(){var t,r=e.length,n=[];for(t=0;t<r;t+=1)n.push(e[t].animation);return n},t}(),BezierFactory=function(){var t={getBezierEasing:function(t,r,n,i,a){var o=a||("bez_"+t+"_"+r+"_"+n+"_"+i).replace(/\./g,"p");if(e[o])return e[o];var s=new h([t,r,n,i]);return e[o]=s,s}},e={},r=11,n=1/(r-1),i="function"==typeof Float32Array;function a(t,e){return 1-3*e+3*t}function o(t,e){return 3*e-6*t}function s(t){return 3*t}function l(t,e,r){return((a(e,r)*t+o(e,r))*t+s(e))*t}function c(t,e,r){return 3*a(e,r)*t*t+2*o(e,r)*t+s(e)}function h(t){this._p=t,this._mSampleValues=i?new Float32Array(r):new Array(r),this._precomputed=!1,this.get=this.get.bind(this)}return h.prototype={get:function(t){var e=this._p[0],r=this._p[1],n=this._p[2],i=this._p[3];return this._precomputed||this._precompute(),e===r&&n===i?t:0===t?0:1===t?1:l(this._getTForX(t),r,i)},_precompute:function(){var t=this._p[0],e=this._p[1],r=this._p[2],n=this._p[3];this._precomputed=!0,t===e&&r===n||this._calcSampleValues()},_calcSampleValues:function(){for(var t=this._p[0],e=this._p[2],i=0;i<r;++i)this._mSampleValues[i]=l(i*n,t,e)},_getTForX:function(t){for(var e=this._p[0],i=this._p[2],a=this._mSampleValues,o=0,s=1,h=r-1;s!==h&&a[s]<=t;++s)o+=n;var u=o+(t-a[--s])/(a[s+1]-a[s])*n,f=c(u,e,i);return f>=.001?function(t,e,r,n){for(var i=0;i<4;++i){var a=c(e,r,n);if(0===a)return e;e-=(l(e,r,n)-t)/a}return e}(t,u,e,i):0===f?u:function(t,e,r,n,i){var a,o,s=0;do{(a=l(o=e+(r-e)/2,n,i)-t)>0?r=o:e=o}while(Math.abs(a)>1e-7&&++s<10);return o}(t,o,o+n,e,i)}},t}(),pooling={double:function(t){return t.concat(createSizedArray(t.length))}},poolFactory=function(t,e,r){var n=0,i=t,a=createSizedArray(i);return{newElement:function(){return n?a[n-=1]:e()},release:function(t){n===i&&(a=pooling.double(a),i*=2),r&&r(t),a[n]=t,n+=1}}},bezierLengthPool=poolFactory(8,(function(){return{addedLength:0,percents:createTypedArray("float32",getDefaultCurveSegments()),lengths:createTypedArray("float32",getDefaultCurveSegments())}})),segmentsLengthPool=poolFactory(8,(function(){return{lengths:[],totalLength:0}}),(function(t){var e,r=t.lengths.length;for(e=0;e<r;e+=1)bezierLengthPool.release(t.lengths[e]);t.lengths.length=0}));function bezFunction(){var t=Math;function e(t,e,r,n,i,a){var o=t*n+e*i+r*a-i*n-a*t-r*e;return o>-.001&&o<.001}var r=function(t,e,r,n){var i,a,o,s,l,c,h=getDefaultCurveSegments(),u=0,f=[],p=[],d=bezierLengthPool.newElement();for(o=r.length,i=0;i<h;i+=1){for(l=i/(h-1),c=0,a=0;a<o;a+=1)s=bmPow(1-l,3)*t[a]+3*bmPow(1-l,2)*l*r[a]+3*(1-l)*bmPow(l,2)*n[a]+bmPow(l,3)*e[a],f[a]=s,null!==p[a]&&(c+=bmPow(f[a]-p[a],2)),p[a]=f[a];c&&(u+=c=bmSqrt(c)),d.percents[i]=l,d.lengths[i]=u}return d.addedLength=u,d};function n(t){this.segmentLength=0,this.points=new Array(t)}function i(t,e){this.partialLength=t,this.point=e}var a,o=(a={},function(t,r,o,s){var l=(t[0]+"_"+t[1]+"_"+r[0]+"_"+r[1]+"_"+o[0]+"_"+o[1]+"_"+s[0]+"_"+s[1]).replace(/\./g,"p");if(!a[l]){var c,h,u,f,p,d,m,y=getDefaultCurveSegments(),v=0,g=null;2===t.length&&(t[0]!==r[0]||t[1]!==r[1])&&e(t[0],t[1],r[0],r[1],t[0]+o[0],t[1]+o[1])&&e(t[0],t[1],r[0],r[1],r[0]+s[0],r[1]+s[1])&&(y=2);var b=new n(y);for(u=o.length,c=0;c<y;c+=1){for(m=createSizedArray(u),p=c/(y-1),d=0,h=0;h<u;h+=1)f=bmPow(1-p,3)*t[h]+3*bmPow(1-p,2)*p*(t[h]+o[h])+3*(1-p)*bmPow(p,2)*(r[h]+s[h])+bmPow(p,3)*r[h],m[h]=f,null!==g&&(d+=bmPow(m[h]-g[h],2));v+=d=bmSqrt(d),b.points[c]=new i(d,m),g=m}b.segmentLength=v,a[l]=b}return a[l]});function s(t,e){var r=e.percents,n=e.lengths,i=r.length,a=bmFloor((i-1)*t),o=t*e.addedLength,s=0;if(a===i-1||0===a||o===n[a])return r[a];for(var l=n[a]>o?-1:1,c=!0;c;)if(n[a]<=o&&n[a+1]>o?(s=(o-n[a])/(n[a+1]-n[a]),c=!1):a+=l,a<0||a>=i-1){if(a===i-1)return r[a];c=!1}return r[a]+(r[a+1]-r[a])*s}var l=createTypedArray("float32",8);return{getSegmentsLength:function(t){var e,n=segmentsLengthPool.newElement(),i=t.c,a=t.v,o=t.o,s=t.i,l=t._length,c=n.lengths,h=0;for(e=0;e<l-1;e+=1)c[e]=r(a[e],a[e+1],o[e],s[e+1]),h+=c[e].addedLength;return i&&l&&(c[e]=r(a[e],a[0],o[e],s[0]),h+=c[e].addedLength),n.totalLength=h,n},getNewSegment:function(e,r,n,i,a,o,c){a<0?a=0:a>1&&(a=1);var h,u=s(a,c),f=s(o=o>1?1:o,c),p=e.length,d=1-u,m=1-f,y=d*d*d,v=u*d*d*3,g=u*u*d*3,b=u*u*u,x=d*d*m,w=u*d*m+d*u*m+d*d*f,E=u*u*m+d*u*f+u*d*f,k=u*u*f,S=d*m*m,_=u*m*m+d*f*m+d*m*f,P=u*f*m+d*f*f+u*m*f,C=u*f*f,A=m*m*m,T=f*m*m+m*f*m+m*m*f,M=f*f*m+m*f*f+f*m*f,D=f*f*f;for(h=0;h<p;h+=1)l[4*h]=t.round(1e3*(y*e[h]+v*n[h]+g*i[h]+b*r[h]))/1e3,l[4*h+1]=t.round(1e3*(x*e[h]+w*n[h]+E*i[h]+k*r[h]))/1e3,l[4*h+2]=t.round(1e3*(S*e[h]+_*n[h]+P*i[h]+C*r[h]))/1e3,l[4*h+3]=t.round(1e3*(A*e[h]+T*n[h]+M*i[h]+D*r[h]))/1e3;return l},getPointInSegment:function(e,r,n,i,a,o){var l=s(a,o),c=1-l;return[t.round(1e3*(c*c*c*e[0]+(l*c*c+c*l*c+c*c*l)*n[0]+(l*l*c+c*l*l+l*c*l)*i[0]+l*l*l*r[0]))/1e3,t.round(1e3*(c*c*c*e[1]+(l*c*c+c*l*c+c*c*l)*n[1]+(l*l*c+c*l*l+l*c*l)*i[1]+l*l*l*r[1]))/1e3]},buildBezierData:o,pointOnLine2D:e,pointOnLine3D:function(r,n,i,a,o,s,l,c,h){if(0===i&&0===s&&0===h)return e(r,n,a,o,l,c);var u,f=t.sqrt(t.pow(a-r,2)+t.pow(o-n,2)+t.pow(s-i,2)),p=t.sqrt(t.pow(l-r,2)+t.pow(c-n,2)+t.pow(h-i,2)),d=t.sqrt(t.pow(l-a,2)+t.pow(c-o,2)+t.pow(h-s,2));return(u=f>p?f>d?f-p-d:d-p-f:d>p?d-p-f:p-f-d)>-1e-4&&u<1e-4}}}var bez=bezFunction(),initFrame=initialDefaultFrame,mathAbs=Math.abs;function interpolateValue(t,e){var r,n=this.offsetTime;"multidimensional"===this.propType&&(r=createTypedArray("float32",this.pv.length));for(var i,a,o,s,l,c,h,u,f,p=e.lastIndex,d=p,m=this.keyframes.length-1,y=!0;y;){if(i=this.keyframes[d],a=this.keyframes[d+1],d===m-1&&t>=a.t-n){i.h&&(i=a),p=0;break}if(a.t-n>t){p=d;break}d<m-1?d+=1:(p=0,y=!1)}o=this.keyframesMetadata[d]||{};var v,g=a.t-n,b=i.t-n;if(i.to){o.bezierData||(o.bezierData=bez.buildBezierData(i.s,a.s||i.e,i.to,i.ti));var x=o.bezierData;if(t>=g||t<b){var w=t>=g?x.points.length-1:0;for(l=x.points[w].point.length,s=0;s<l;s+=1)r[s]=x.points[w].point[s]}else{o.__fnct?f=o.__fnct:(f=BezierFactory.getBezierEasing(i.o.x,i.o.y,i.i.x,i.i.y,i.n).get,o.__fnct=f),c=f((t-b)/(g-b));var E,k=x.segmentLength*c,S=e.lastFrame<t&&e._lastKeyframeIndex===d?e._lastAddedLength:0;for(u=e.lastFrame<t&&e._lastKeyframeIndex===d?e._lastPoint:0,y=!0,h=x.points.length;y;){if(S+=x.points[u].partialLength,0===k||0===c||u===x.points.length-1){for(l=x.points[u].point.length,s=0;s<l;s+=1)r[s]=x.points[u].point[s];break}if(k>=S&&k<S+x.points[u+1].partialLength){for(E=(k-S)/x.points[u+1].partialLength,l=x.points[u].point.length,s=0;s<l;s+=1)r[s]=x.points[u].point[s]+(x.points[u+1].point[s]-x.points[u].point[s])*E;break}u<h-1?u+=1:y=!1}e._lastPoint=u,e._lastAddedLength=S-x.points[u].partialLength,e._lastKeyframeIndex=d}}else{var _,P,C,A,T;if(m=i.s.length,v=a.s||i.e,this.sh&&1!==i.h)t>=g?(r[0]=v[0],r[1]=v[1],r[2]=v[2]):t<=b?(r[0]=i.s[0],r[1]=i.s[1],r[2]=i.s[2]):quaternionToEuler(r,slerp(createQuaternion(i.s),createQuaternion(v),(t-b)/(g-b)));else for(d=0;d<m;d+=1)1!==i.h&&(t>=g?c=1:t<b?c=0:(i.o.x.constructor===Array?(o.__fnct||(o.__fnct=[]),o.__fnct[d]?f=o.__fnct[d]:(_=void 0===i.o.x[d]?i.o.x[0]:i.o.x[d],P=void 0===i.o.y[d]?i.o.y[0]:i.o.y[d],C=void 0===i.i.x[d]?i.i.x[0]:i.i.x[d],A=void 0===i.i.y[d]?i.i.y[0]:i.i.y[d],f=BezierFactory.getBezierEasing(_,P,C,A).get,o.__fnct[d]=f)):o.__fnct?f=o.__fnct:(_=i.o.x,P=i.o.y,C=i.i.x,A=i.i.y,f=BezierFactory.getBezierEasing(_,P,C,A).get,i.keyframeMetadata=f),c=f((t-b)/(g-b)))),v=a.s||i.e,T=1===i.h?i.s[d]:i.s[d]+(v[d]-i.s[d])*c,"multidimensional"===this.propType?r[d]=T:r=T}return e.lastIndex=p,r}function slerp(t,e,r){var n,i,a,o,s,l=[],c=t[0],h=t[1],u=t[2],f=t[3],p=e[0],d=e[1],m=e[2],y=e[3];return(i=c*p+h*d+u*m+f*y)<0&&(i=-i,p=-p,d=-d,m=-m,y=-y),1-i>1e-6?(n=Math.acos(i),a=Math.sin(n),o=Math.sin((1-r)*n)/a,s=Math.sin(r*n)/a):(o=1-r,s=r),l[0]=o*c+s*p,l[1]=o*h+s*d,l[2]=o*u+s*m,l[3]=o*f+s*y,l}function quaternionToEuler(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],o=Math.atan2(2*n*a-2*r*i,1-2*n*n-2*i*i),s=Math.asin(2*r*n+2*i*a),l=Math.atan2(2*r*a-2*n*i,1-2*r*r-2*i*i);t[0]=o/degToRads,t[1]=s/degToRads,t[2]=l/degToRads}function createQuaternion(t){var e=t[0]*degToRads,r=t[1]*degToRads,n=t[2]*degToRads,i=Math.cos(e/2),a=Math.cos(r/2),o=Math.cos(n/2),s=Math.sin(e/2),l=Math.sin(r/2),c=Math.sin(n/2);return[s*l*o+i*a*c,s*a*o+i*l*c,i*l*o-s*a*c,i*a*o-s*l*c]}function getValueAtCurrentTime(){var t=this.comp.renderedFrame-this.offsetTime,e=this.keyframes[0].t-this.offsetTime,r=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(t===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=r&&t>=r||this._caching.lastFrame<e&&t<e))){this._caching.lastFrame>=t&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var n=this.interpolateValue(t,this._caching);this.pv=n}return this._caching.lastFrame=t,this.pv}function setVValue(t){var e;if("unidimensional"===this.propType)e=t*this.mult,mathAbs(this.v-e)>1e-5&&(this.v=e,this._mdf=!0);else for(var r=0,n=this.v.length;r<n;)e=t[r]*this.mult,mathAbs(this.v[r]-e)>1e-5&&(this.v[r]=e,this._mdf=!0),r+=1}function processEffectsSequence(){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var t;this.lock=!0,this._mdf=this._isFirstFrame;var e=this.effectsSequence.length,r=this.kf?this.pv:this.data.k;for(t=0;t<e;t+=1)r=this.effectsSequence[t](r);this.setVValue(r),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function addEffect(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function ValueProperty(t,e,r,n){this.propType="unidimensional",this.mult=r||1,this.data=e,this.v=r?e.k*r:e.k,this.pv=e.k,this._mdf=!1,this.elem=t,this.container=n,this.comp=t.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function MultiDimensionalProperty(t,e,r,n){var i;this.propType="multidimensional",this.mult=r||1,this.data=e,this._mdf=!1,this.elem=t,this.container=n,this.comp=t.comp,this.k=!1,this.kf=!1,this.frameId=-1;var a=e.k.length;for(this.v=createTypedArray("float32",a),this.pv=createTypedArray("float32",a),this.vel=createTypedArray("float32",a),i=0;i<a;i+=1)this.v[i]=e.k[i]*this.mult,this.pv[i]=e.k[i];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function KeyframedValueProperty(t,e,r,n){this.propType="unidimensional",this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.frameId=-1,this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=e,this.mult=r||1,this.elem=t,this.container=n,this.comp=t.comp,this.v=initFrame,this.pv=initFrame,this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.addEffect=addEffect}function KeyframedMultidimensionalProperty(t,e,r,n){var i;this.propType="multidimensional";var a,o,s,l,c=e.k.length;for(i=0;i<c-1;i+=1)e.k[i].to&&e.k[i].s&&e.k[i+1]&&e.k[i+1].s&&(a=e.k[i].s,o=e.k[i+1].s,s=e.k[i].to,l=e.k[i].ti,(2===a.length&&(a[0]!==o[0]||a[1]!==o[1])&&bez.pointOnLine2D(a[0],a[1],o[0],o[1],a[0]+s[0],a[1]+s[1])&&bez.pointOnLine2D(a[0],a[1],o[0],o[1],o[0]+l[0],o[1]+l[1])||3===a.length&&(a[0]!==o[0]||a[1]!==o[1]||a[2]!==o[2])&&bez.pointOnLine3D(a[0],a[1],a[2],o[0],o[1],o[2],a[0]+s[0],a[1]+s[1],a[2]+s[2])&&bez.pointOnLine3D(a[0],a[1],a[2],o[0],o[1],o[2],o[0]+l[0],o[1]+l[1],o[2]+l[2]))&&(e.k[i].to=null,e.k[i].ti=null),a[0]===o[0]&&a[1]===o[1]&&0===s[0]&&0===s[1]&&0===l[0]&&0===l[1]&&(2===a.length||a[2]===o[2]&&0===s[2]&&0===l[2])&&(e.k[i].to=null,e.k[i].ti=null));this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.data=e,this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=r||1,this.elem=t,this.container=n,this.comp=t.comp,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.frameId=-1;var h=e.k[0].s.length;for(this.v=createTypedArray("float32",h),this.pv=createTypedArray("float32",h),i=0;i<h;i+=1)this.v[i]=initFrame,this.pv[i]=initFrame;this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray("float32",h)},this.addEffect=addEffect}var PropertyFactory={getProp:function(t,e,r,n,i){var a;if(e.sid&&(e=t.globalData.slotManager.getProp(e)),e.k.length)if("number"==typeof e.k[0])a=new MultiDimensionalProperty(t,e,n,i);else switch(r){case 0:a=new KeyframedValueProperty(t,e,n,i);break;case 1:a=new KeyframedMultidimensionalProperty(t,e,n,i)}else a=new ValueProperty(t,e,n,i);return a.effectsSequence.length&&i.addDynamicProperty(a),a}};function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(t){-1===this.dynamicProperties.indexOf(t)&&(this.dynamicProperties.push(t),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){var t;this._mdf=!1;var e=this.dynamicProperties.length;for(t=0;t<e;t+=1)this.dynamicProperties[t].getValue(),this.dynamicProperties[t]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(t){this.container=t,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var pointPool=poolFactory(8,(function(){return createTypedArray("float32",2)}));function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(t,e){this.c=t,this.setLength(e);for(var r=0;r<e;)this.v[r]=pointPool.newElement(),this.o[r]=pointPool.newElement(),this.i[r]=pointPool.newElement(),r+=1},ShapePath.prototype.setLength=function(t){for(;this._maxLength<t;)this.doubleArrayLength();this._length=t},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(t,e,r,n,i){var a;switch(this._length=Math.max(this._length,n+1),this._length>=this._maxLength&&this.doubleArrayLength(),r){case"v":a=this.v;break;case"i":a=this.i;break;case"o":a=this.o;break;default:a=[]}(!a[n]||a[n]&&!i)&&(a[n]=pointPool.newElement()),a[n][0]=t,a[n][1]=e},ShapePath.prototype.setTripleAt=function(t,e,r,n,i,a,o,s){this.setXYAt(t,e,"v",o,s),this.setXYAt(r,n,"o",o,s),this.setXYAt(i,a,"i",o,s)},ShapePath.prototype.reverse=function(){var t=new ShapePath;t.setPathData(this.c,this._length);var e=this.v,r=this.o,n=this.i,i=0;this.c&&(t.setTripleAt(e[0][0],e[0][1],n[0][0],n[0][1],r[0][0],r[0][1],0,!1),i=1);var a,o=this._length-1,s=this._length;for(a=i;a<s;a+=1)t.setTripleAt(e[o][0],e[o][1],n[o][0],n[o][1],r[o][0],r[o][1],a,!1),o-=1;return t},ShapePath.prototype.length=function(){return this._length};var shapePool=(factory=poolFactory(4,(function(){return new ShapePath}),(function(t){var e,r=t._length;for(e=0;e<r;e+=1)pointPool.release(t.v[e]),pointPool.release(t.i[e]),pointPool.release(t.o[e]),t.v[e]=null,t.i[e]=null,t.o[e]=null;t._length=0,t.c=!1})),factory.clone=function(t){var e,r=factory.newElement(),n=void 0===t._length?t.v.length:t._length;for(r.setLength(n),r.c=t.c,e=0;e<n;e+=1)r.setTripleAt(t.v[e][0],t.v[e][1],t.o[e][0],t.o[e][1],t.i[e][0],t.i[e][1],e);return r},factory),factory;function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}ShapeCollection.prototype.addShape=function(t){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=t,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var t;for(t=0;t<this._length;t+=1)shapePool.release(this.shapes[t]);this._length=0};var shapeCollectionPool=(ob={newShapeCollection:function(){return _length?pool[_length-=1]:new ShapeCollection},release:function(t){var e,r=t._length;for(e=0;e<r;e+=1)shapePool.release(t.shapes[e]);t._length=0,_length===_maxLength&&(pool=pooling.double(pool),_maxLength*=2),pool[_length]=t,_length+=1}},_length=0,_maxLength=4,pool=createSizedArray(_maxLength),ob),ob,_length,_maxLength,pool,ShapePropertyFactory=function(){var t=-999999;function e(t,e,r){var n,i,a,o,s,l,c,h,u,f=r.lastIndex,p=this.keyframes;if(t<p[0].t-this.offsetTime)n=p[0].s[0],a=!0,f=0;else if(t>=p[p.length-1].t-this.offsetTime)n=p[p.length-1].s?p[p.length-1].s[0]:p[p.length-2].e[0],a=!0;else{for(var d,m,y,v=f,g=p.length-1,b=!0;b&&(d=p[v],!((m=p[v+1]).t-this.offsetTime>t));)v<g-1?v+=1:b=!1;if(y=this.keyframesMetadata[v]||{},f=v,!(a=1===d.h)){if(t>=m.t-this.offsetTime)h=1;else if(t<d.t-this.offsetTime)h=0;else{var x;y.__fnct?x=y.__fnct:(x=BezierFactory.getBezierEasing(d.o.x,d.o.y,d.i.x,d.i.y).get,y.__fnct=x),h=x((t-(d.t-this.offsetTime))/(m.t-this.offsetTime-(d.t-this.offsetTime)))}i=m.s?m.s[0]:d.e[0]}n=d.s[0]}for(l=e._length,c=n.i[0].length,r.lastIndex=f,o=0;o<l;o+=1)for(s=0;s<c;s+=1)u=a?n.i[o][s]:n.i[o][s]+(i.i[o][s]-n.i[o][s])*h,e.i[o][s]=u,u=a?n.o[o][s]:n.o[o][s]+(i.o[o][s]-n.o[o][s])*h,e.o[o][s]=u,u=a?n.v[o][s]:n.v[o][s]+(i.v[o][s]-n.v[o][s])*h,e.v[o][s]=u}function r(){var e=this.comp.renderedFrame-this.offsetTime,r=this.keyframes[0].t-this.offsetTime,n=this.keyframes[this.keyframes.length-1].t-this.offsetTime,i=this._caching.lastFrame;return i!==t&&(i<r&&e<r||i>n&&e>n)||(this._caching.lastIndex=i<e?this._caching.lastIndex:0,this.interpolateShape(e,this.pv,this._caching)),this._caching.lastFrame=e,this.pv}function n(){this.paths=this.localShapeCollection}function i(t){(function(t,e){if(t._length!==e._length||t.c!==e.c)return!1;var r,n=t._length;for(r=0;r<n;r+=1)if(t.v[r][0]!==e.v[r][0]||t.v[r][1]!==e.v[r][1]||t.o[r][0]!==e.o[r][0]||t.o[r][1]!==e.o[r][1]||t.i[r][0]!==e.i[r][0]||t.i[r][1]!==e.i[r][1])return!1;return!0})(this.v,t)||(this.v=shapePool.clone(t),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function a(){if(this.elem.globalData.frameId!==this.frameId)if(this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var t,e;this.lock=!0,this._mdf=!1,t=this.kf?this.pv:this.data.ks?this.data.ks.k:this.data.pt.k;var r=this.effectsSequence.length;for(e=0;e<r;e+=1)t=this.effectsSequence[e](t);this.setVValue(t),this.lock=!1,this.frameId=this.elem.globalData.frameId}else this._mdf=!1}function o(t,e,r){this.propType="shape",this.comp=t.comp,this.container=t,this.elem=t,this.data=e,this.k=!1,this.kf=!1,this._mdf=!1;var i=3===r?e.pt.k:e.ks.k;this.v=shapePool.clone(i),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=n,this.effectsSequence=[]}function s(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function l(e,i,a){this.propType="shape",this.comp=e.comp,this.elem=e,this.container=e,this.offsetTime=e.data.st,this.keyframes=3===a?i.pt.k:i.ks.k,this.keyframesMetadata=[],this.k=!0,this.kf=!0;var o=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,o),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=t,this.reset=n,this._caching={lastFrame:t,lastIndex:0},this.effectsSequence=[r.bind(this)]}o.prototype.interpolateShape=e,o.prototype.getValue=a,o.prototype.setVValue=i,o.prototype.addEffect=s,l.prototype.getValue=a,l.prototype.interpolateShape=e,l.prototype.setVValue=i,l.prototype.addEffect=s;var c=function(){var t=roundCorner;function e(t,e){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=e.d,this.elem=t,this.comp=t.comp,this.frameId=-1,this.initDynamicPropertyContainer(t),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.s=PropertyFactory.getProp(t,e.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return e.prototype={reset:n,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var e=this.p.v[0],r=this.p.v[1],n=this.s.v[0]/2,i=this.s.v[1]/2,a=3!==this.d,o=this.v;o.v[0][0]=e,o.v[0][1]=r-i,o.v[1][0]=a?e+n:e-n,o.v[1][1]=r,o.v[2][0]=e,o.v[2][1]=r+i,o.v[3][0]=a?e-n:e+n,o.v[3][1]=r,o.i[0][0]=a?e-n*t:e+n*t,o.i[0][1]=r-i,o.i[1][0]=a?e+n:e-n,o.i[1][1]=r-i*t,o.i[2][0]=a?e+n*t:e-n*t,o.i[2][1]=r+i,o.i[3][0]=a?e-n:e+n,o.i[3][1]=r+i*t,o.o[0][0]=a?e+n*t:e-n*t,o.o[0][1]=r-i,o.o[1][0]=a?e+n:e-n,o.o[1][1]=r+i*t,o.o[2][0]=a?e-n*t:e+n*t,o.o[2][1]=r+i,o.o[3][0]=a?e-n:e+n,o.o[3][1]=r-i*t}},extendPrototype([DynamicPropertyContainer],e),e}(),h=function(){function t(t,e){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=t,this.comp=t.comp,this.data=e,this.frameId=-1,this.d=e.d,this.initDynamicPropertyContainer(t),1===e.sy?(this.ir=PropertyFactory.getProp(t,e.ir,0,0,this),this.is=PropertyFactory.getProp(t,e.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(t,e.pt,0,0,this),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.r=PropertyFactory.getProp(t,e.r,0,degToRads,this),this.or=PropertyFactory.getProp(t,e.or,0,0,this),this.os=PropertyFactory.getProp(t,e.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return t.prototype={reset:n,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var t,e,r,n,i=2*Math.floor(this.pt.v),a=2*Math.PI/i,o=!0,s=this.or.v,l=this.ir.v,c=this.os.v,h=this.is.v,u=2*Math.PI*s/(2*i),f=2*Math.PI*l/(2*i),p=-Math.PI/2;p+=this.r.v;var d=3===this.data.d?-1:1;for(this.v._length=0,t=0;t<i;t+=1){r=o?c:h,n=o?u:f;var m=(e=o?s:l)*Math.cos(p),y=e*Math.sin(p),v=0===m&&0===y?0:y/Math.sqrt(m*m+y*y),g=0===m&&0===y?0:-m/Math.sqrt(m*m+y*y);m+=+this.p.v[0],y+=+this.p.v[1],this.v.setTripleAt(m,y,m-v*n*r*d,y-g*n*r*d,m+v*n*r*d,y+g*n*r*d,t,!0),o=!o,p+=a*d}},convertPolygonToPath:function(){var t,e=Math.floor(this.pt.v),r=2*Math.PI/e,n=this.or.v,i=this.os.v,a=2*Math.PI*n/(4*e),o=.5*-Math.PI,s=3===this.data.d?-1:1;for(o+=this.r.v,this.v._length=0,t=0;t<e;t+=1){var l=n*Math.cos(o),c=n*Math.sin(o),h=0===l&&0===c?0:c/Math.sqrt(l*l+c*c),u=0===l&&0===c?0:-l/Math.sqrt(l*l+c*c);l+=+this.p.v[0],c+=+this.p.v[1],this.v.setTripleAt(l,c,l-h*a*i*s,c-u*a*i*s,l+h*a*i*s,c+u*a*i*s,t,!0),o+=r*s}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],t),t}(),u=function(){function t(t,e){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=t,this.comp=t.comp,this.frameId=-1,this.d=e.d,this.initDynamicPropertyContainer(t),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.s=PropertyFactory.getProp(t,e.s,1,0,this),this.r=PropertyFactory.getProp(t,e.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return t.prototype={convertRectToPath:function(){var t=this.p.v[0],e=this.p.v[1],r=this.s.v[0]/2,n=this.s.v[1]/2,i=bmMin(r,n,this.r.v),a=i*(1-roundCorner);this.v._length=0,2===this.d||1===this.d?(this.v.setTripleAt(t+r,e-n+i,t+r,e-n+i,t+r,e-n+a,0,!0),this.v.setTripleAt(t+r,e+n-i,t+r,e+n-a,t+r,e+n-i,1,!0),0!==i?(this.v.setTripleAt(t+r-i,e+n,t+r-i,e+n,t+r-a,e+n,2,!0),this.v.setTripleAt(t-r+i,e+n,t-r+a,e+n,t-r+i,e+n,3,!0),this.v.setTripleAt(t-r,e+n-i,t-r,e+n-i,t-r,e+n-a,4,!0),this.v.setTripleAt(t-r,e-n+i,t-r,e-n+a,t-r,e-n+i,5,!0),this.v.setTripleAt(t-r+i,e-n,t-r+i,e-n,t-r+a,e-n,6,!0),this.v.setTripleAt(t+r-i,e-n,t+r-a,e-n,t+r-i,e-n,7,!0)):(this.v.setTripleAt(t-r,e+n,t-r+a,e+n,t-r,e+n,2),this.v.setTripleAt(t-r,e-n,t-r,e-n+a,t-r,e-n,3))):(this.v.setTripleAt(t+r,e-n+i,t+r,e-n+a,t+r,e-n+i,0,!0),0!==i?(this.v.setTripleAt(t+r-i,e-n,t+r-i,e-n,t+r-a,e-n,1,!0),this.v.setTripleAt(t-r+i,e-n,t-r+a,e-n,t-r+i,e-n,2,!0),this.v.setTripleAt(t-r,e-n+i,t-r,e-n+i,t-r,e-n+a,3,!0),this.v.setTripleAt(t-r,e+n-i,t-r,e+n-a,t-r,e+n-i,4,!0),this.v.setTripleAt(t-r+i,e+n,t-r+i,e+n,t-r+a,e+n,5,!0),this.v.setTripleAt(t+r-i,e+n,t+r-a,e+n,t+r-i,e+n,6,!0),this.v.setTripleAt(t+r,e+n-i,t+r,e+n-i,t+r,e+n-a,7,!0)):(this.v.setTripleAt(t-r,e-n,t-r+a,e-n,t-r,e-n,1,!0),this.v.setTripleAt(t-r,e+n,t-r,e+n-a,t-r,e+n,2,!0),this.v.setTripleAt(t+r,e+n,t+r-a,e+n,t+r,e+n,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:n},extendPrototype([DynamicPropertyContainer],t),t}();return{getShapeProp:function(t,e,r){var n;return 3===r||4===r?n=(3===r?e.pt:e.ks).k.length?new l(t,e,r):new o(t,e,r):5===r?n=new u(t,e):6===r?n=new c(t,e):7===r&&(n=new h(t,e)),n.k&&t.addDynamicProperty(n),n},getConstructorFunction:function(){return o},getKeyframedConstructorFunction:function(){return l}}}(),Matrix=function(){var t=Math.cos,e=Math.sin,r=Math.tan,n=Math.round;function i(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function a(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(n,-i,0,0,i,n,0,0,0,0,1,0,0,0,0,1)}function o(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(1,0,0,0,0,n,-i,0,0,i,n,0,0,0,0,1)}function s(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(n,0,i,0,0,1,0,0,-i,0,n,0,0,0,0,1)}function l(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(n,-i,0,0,i,n,0,0,0,0,1,0,0,0,0,1)}function c(t,e){return this._t(1,e,t,1,0,0)}function h(t,e){return this.shear(r(t),r(e))}function u(n,i){var a=t(i),o=e(i);return this._t(a,o,0,0,-o,a,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,r(n),1,0,0,0,0,1,0,0,0,0,1)._t(a,-o,0,0,o,a,0,0,0,0,1,0,0,0,0,1)}function f(t,e,r){return r||0===r||(r=1),1===t&&1===e&&1===r?this:this._t(t,0,0,0,0,e,0,0,0,0,r,0,0,0,0,1)}function p(t,e,r,n,i,a,o,s,l,c,h,u,f,p,d,m){return this.props[0]=t,this.props[1]=e,this.props[2]=r,this.props[3]=n,this.props[4]=i,this.props[5]=a,this.props[6]=o,this.props[7]=s,this.props[8]=l,this.props[9]=c,this.props[10]=h,this.props[11]=u,this.props[12]=f,this.props[13]=p,this.props[14]=d,this.props[15]=m,this}function d(t,e,r){return r=r||0,0!==t||0!==e||0!==r?this._t(1,0,0,0,0,1,0,0,0,0,1,0,t,e,r,1):this}function m(t,e,r,n,i,a,o,s,l,c,h,u,f,p,d,m){var y=this.props;if(1===t&&0===e&&0===r&&0===n&&0===i&&1===a&&0===o&&0===s&&0===l&&0===c&&1===h&&0===u)return y[12]=y[12]*t+y[15]*f,y[13]=y[13]*a+y[15]*p,y[14]=y[14]*h+y[15]*d,y[15]*=m,this._identityCalculated=!1,this;var v=y[0],g=y[1],b=y[2],x=y[3],w=y[4],E=y[5],k=y[6],S=y[7],_=y[8],P=y[9],C=y[10],A=y[11],T=y[12],M=y[13],D=y[14],L=y[15];return y[0]=v*t+g*i+b*l+x*f,y[1]=v*e+g*a+b*c+x*p,y[2]=v*r+g*o+b*h+x*d,y[3]=v*n+g*s+b*u+x*m,y[4]=w*t+E*i+k*l+S*f,y[5]=w*e+E*a+k*c+S*p,y[6]=w*r+E*o+k*h+S*d,y[7]=w*n+E*s+k*u+S*m,y[8]=_*t+P*i+C*l+A*f,y[9]=_*e+P*a+C*c+A*p,y[10]=_*r+P*o+C*h+A*d,y[11]=_*n+P*s+C*u+A*m,y[12]=T*t+M*i+D*l+L*f,y[13]=T*e+M*a+D*c+L*p,y[14]=T*r+M*o+D*h+L*d,y[15]=T*n+M*s+D*u+L*m,this._identityCalculated=!1,this}function y(t){var e=t.props;return this.transform(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15])}function v(){return this._identityCalculated||(this._identity=!(1!==this.props[0]||0!==this.props[1]||0!==this.props[2]||0!==this.props[3]||0!==this.props[4]||1!==this.props[5]||0!==this.props[6]||0!==this.props[7]||0!==this.props[8]||0!==this.props[9]||1!==this.props[10]||0!==this.props[11]||0!==this.props[12]||0!==this.props[13]||0!==this.props[14]||1!==this.props[15]),this._identityCalculated=!0),this._identity}function g(t){for(var e=0;e<16;){if(t.props[e]!==this.props[e])return!1;e+=1}return!0}function b(t){var e;for(e=0;e<16;e+=1)t.props[e]=this.props[e];return t}function x(t){var e;for(e=0;e<16;e+=1)this.props[e]=t[e]}function w(t,e,r){return{x:t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12],y:t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13],z:t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]}}function E(t,e,r){return t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12]}function k(t,e,r){return t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13]}function S(t,e,r){return t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]}function _(){var t=this.props[0]*this.props[5]-this.props[1]*this.props[4],e=this.props[5]/t,r=-this.props[1]/t,n=-this.props[4]/t,i=this.props[0]/t,a=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/t,o=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/t,s=new Matrix;return s.props[0]=e,s.props[1]=r,s.props[4]=n,s.props[5]=i,s.props[12]=a,s.props[13]=o,s}function P(t){return this.getInverseMatrix().applyToPointArray(t[0],t[1],t[2]||0)}function C(t){var e,r=t.length,n=[];for(e=0;e<r;e+=1)n[e]=P(t[e]);return n}function A(t,e,r){var n=createTypedArray("float32",6);if(this.isIdentity())n[0]=t[0],n[1]=t[1],n[2]=e[0],n[3]=e[1],n[4]=r[0],n[5]=r[1];else{var i=this.props[0],a=this.props[1],o=this.props[4],s=this.props[5],l=this.props[12],c=this.props[13];n[0]=t[0]*i+t[1]*o+l,n[1]=t[0]*a+t[1]*s+c,n[2]=e[0]*i+e[1]*o+l,n[3]=e[0]*a+e[1]*s+c,n[4]=r[0]*i+r[1]*o+l,n[5]=r[0]*a+r[1]*s+c}return n}function T(t,e,r){return this.isIdentity()?[t,e,r]:[t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12],t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13],t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]]}function M(t,e){if(this.isIdentity())return t+","+e;var r=this.props;return Math.round(100*(t*r[0]+e*r[4]+r[12]))/100+","+Math.round(100*(t*r[1]+e*r[5]+r[13]))/100}function D(){for(var t=0,e=this.props,r="matrix3d(";t<16;)r+=n(1e4*e[t])/1e4,r+=15===t?")":",",t+=1;return r}function L(t){return t<1e-6&&t>0||t>-1e-6&&t<0?n(1e4*t)/1e4:t}function F(){var t=this.props;return"matrix("+L(t[0])+","+L(t[1])+","+L(t[4])+","+L(t[5])+","+L(t[12])+","+L(t[13])+")"}return function(){this.reset=i,this.rotate=a,this.rotateX=o,this.rotateY=s,this.rotateZ=l,this.skew=h,this.skewFromAxis=u,this.shear=c,this.scale=f,this.setTransform=p,this.translate=d,this.transform=m,this.multiply=y,this.applyToPoint=w,this.applyToX=E,this.applyToY=k,this.applyToZ=S,this.applyToPointArray=T,this.applyToTriplePoints=A,this.applyToPointStringified=M,this.toCSS=D,this.to2dCSS=F,this.clone=b,this.cloneFromProps=x,this.equals=g,this.inversePoints=C,this.inversePoint=P,this.getInverseMatrix=_,this._t=this.transform,this.isIdentity=v,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();function _typeof$3(t){return _typeof$3="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$3(t)}var lottie={},standalone="__[STANDALONE]__",animationData="__[ANIMATIONDATA]__",renderer="";function setLocation(t){setLocationHref(t)}function searchAnimations(){!0===standalone?animationManager.searchAnimations(animationData,standalone,renderer):animationManager.searchAnimations()}function setSubframeRendering(t){setSubframeEnabled(t)}function setPrefix(t){setIdPrefix(t)}function loadAnimation(t){return!0===standalone&&(t.animationData=JSON.parse(animationData)),animationManager.loadAnimation(t)}function setQuality(t){if("string"==typeof t)switch(t){case"high":setDefaultCurveSegments(200);break;default:case"medium":setDefaultCurveSegments(50);break;case"low":setDefaultCurveSegments(10)}else!isNaN(t)&&t>1&&setDefaultCurveSegments(t);getDefaultCurveSegments()>=50?roundValues(!1):roundValues(!0)}function inBrowser(){return"undefined"!=typeof navigator}function installPlugin(t,e){"expressions"===t&&setExpressionsPlugin(e)}function getFactory(t){switch(t){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}function checkReady(){"complete"===document.readyState&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(t){for(var e=queryString.split("&"),r=0;r<e.length;r+=1){var n=e[r].split("=");if(decodeURIComponent(n[0])==t)return decodeURIComponent(n[1])}return null}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocation,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.useWebWorker=setWebWorker,lottie.setIDPrefix=setPrefix,lottie.__getFactory=getFactory,lottie.version="5.12.2";var queryString="";if(standalone){var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,""):"",renderer=getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);try{"object"!==_typeof$3(exports)&&__webpack_require__.amdO}catch(t){}var ShapeModifiers=function(){var t={},e={};return t.registerModifier=function(t,r){e[t]||(e[t]=r)},t.getModifier=function(t,r,n){return new e[t](r,n)},t}();function ShapeModifier(){}function TrimModifier(){}function PuckerAndBloatModifier(){}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(t){if(!this.closed){t.sh.container.addDynamicProperty(t.sh);var e={shape:t.sh,data:t,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(e),this.addShapeToModifier(e),this._isAnimated&&t.setAsAnimated()}},ShapeModifier.prototype.init=function(t,e){this.shapes=[],this.elem=t,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier),extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(t,e){this.s=PropertyFactory.getProp(t,e.s,0,.01,this),this.e=PropertyFactory.getProp(t,e.e,0,.01,this),this.o=PropertyFactory.getProp(t,e.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=e.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(t){t.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(t,e,r,n,i){var a=[];e<=1?a.push({s:t,e}):t>=1?a.push({s:t-1,e:e-1}):(a.push({s:t,e:1}),a.push({s:0,e:e-1}));var o,s,l=[],c=a.length;for(o=0;o<c;o+=1){var h,u;(s=a[o]).e*i<n||s.s*i>n+r||(h=s.s*i<=n?0:(s.s*i-n)/r,u=s.e*i>=n+r?1:(s.e*i-n)/r,l.push([h,u]))}return l.length||l.push([0,0]),l},TrimModifier.prototype.releasePathsData=function(t){var e,r=t.length;for(e=0;e<r;e+=1)segmentsLengthPool.release(t[e]);return t.length=0,t},TrimModifier.prototype.processShapes=function(t){var e,r,n,i;if(this._mdf||t){var a=this.o.v%360/360;if(a<0&&(a+=1),(e=this.s.v>1?1+a:this.s.v<0?0+a:this.s.v+a)>(r=this.e.v>1?1+a:this.e.v<0?0+a:this.e.v+a)){var o=e;e=r,r=o}e=1e-4*Math.round(1e4*e),r=1e-4*Math.round(1e4*r),this.sValue=e,this.eValue=r}else e=this.sValue,r=this.eValue;var s,l,c,h,u,f=this.shapes.length,p=0;if(r===e)for(i=0;i<f;i+=1)this.shapes[i].localShapeCollection.releaseShapes(),this.shapes[i].shape._mdf=!0,this.shapes[i].shape.paths=this.shapes[i].localShapeCollection,this._mdf&&(this.shapes[i].pathsData.length=0);else if(1===r&&0===e||0===r&&1===e){if(this._mdf)for(i=0;i<f;i+=1)this.shapes[i].pathsData.length=0,this.shapes[i].shape._mdf=!0}else{var d,m,y=[];for(i=0;i<f;i+=1)if((d=this.shapes[i]).shape._mdf||this._mdf||t||2===this.m){if(l=(n=d.shape.paths)._length,u=0,!d.shape._mdf&&d.pathsData.length)u=d.totalShapeLength;else{for(c=this.releasePathsData(d.pathsData),s=0;s<l;s+=1)h=bez.getSegmentsLength(n.shapes[s]),c.push(h),u+=h.totalLength;d.totalShapeLength=u,d.pathsData=c}p+=u,d.shape._mdf=!0}else d.shape.paths=d.localShapeCollection;var v,g=e,b=r,x=0;for(i=f-1;i>=0;i-=1)if((d=this.shapes[i]).shape._mdf){for((m=d.localShapeCollection).releaseShapes(),2===this.m&&f>1?(v=this.calculateShapeEdges(e,r,d.totalShapeLength,x,p),x+=d.totalShapeLength):v=[[g,b]],l=v.length,s=0;s<l;s+=1){g=v[s][0],b=v[s][1],y.length=0,b<=1?y.push({s:d.totalShapeLength*g,e:d.totalShapeLength*b}):g>=1?y.push({s:d.totalShapeLength*(g-1),e:d.totalShapeLength*(b-1)}):(y.push({s:d.totalShapeLength*g,e:d.totalShapeLength}),y.push({s:0,e:d.totalShapeLength*(b-1)}));var w=this.addShapes(d,y[0]);if(y[0].s!==y[0].e){if(y.length>1)if(d.shape.paths.shapes[d.shape.paths._length-1].c){var E=w.pop();this.addPaths(w,m),w=this.addShapes(d,y[1],E)}else this.addPaths(w,m),w=this.addShapes(d,y[1]);this.addPaths(w,m)}}d.shape.paths=m}}},TrimModifier.prototype.addPaths=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)e.addShape(t[r])},TrimModifier.prototype.addSegment=function(t,e,r,n,i,a,o){i.setXYAt(e[0],e[1],"o",a),i.setXYAt(r[0],r[1],"i",a+1),o&&i.setXYAt(t[0],t[1],"v",a),i.setXYAt(n[0],n[1],"v",a+1)},TrimModifier.prototype.addSegmentFromArray=function(t,e,r,n){e.setXYAt(t[1],t[5],"o",r),e.setXYAt(t[2],t[6],"i",r+1),n&&e.setXYAt(t[0],t[4],"v",r),e.setXYAt(t[3],t[7],"v",r+1)},TrimModifier.prototype.addShapes=function(t,e,r){var n,i,a,o,s,l,c,h,u=t.pathsData,f=t.shape.paths.shapes,p=t.shape.paths._length,d=0,m=[],y=!0;for(r?(s=r._length,h=r._length):(r=shapePool.newElement(),s=0,h=0),m.push(r),n=0;n<p;n+=1){for(l=u[n].lengths,r.c=f[n].c,a=f[n].c?l.length:l.length+1,i=1;i<a;i+=1)if(d+(o=l[i-1]).addedLength<e.s)d+=o.addedLength,r.c=!1;else{if(d>e.e){r.c=!1;break}e.s<=d&&e.e>=d+o.addedLength?(this.addSegment(f[n].v[i-1],f[n].o[i-1],f[n].i[i],f[n].v[i],r,s,y),y=!1):(c=bez.getNewSegment(f[n].v[i-1],f[n].v[i],f[n].o[i-1],f[n].i[i],(e.s-d)/o.addedLength,(e.e-d)/o.addedLength,l[i-1]),this.addSegmentFromArray(c,r,s,y),y=!1,r.c=!1),d+=o.addedLength,s+=1}if(f[n].c&&l.length){if(o=l[i-1],d<=e.e){var v=l[i-1].addedLength;e.s<=d&&e.e>=d+v?(this.addSegment(f[n].v[i-1],f[n].o[i-1],f[n].i[0],f[n].v[0],r,s,y),y=!1):(c=bez.getNewSegment(f[n].v[i-1],f[n].v[0],f[n].o[i-1],f[n].i[0],(e.s-d)/v,(e.e-d)/v,l[i-1]),this.addSegmentFromArray(c,r,s,y),y=!1,r.c=!1)}else r.c=!1;d+=o.addedLength,s+=1}if(r._length&&(r.setXYAt(r.v[h][0],r.v[h][1],"i",h),r.setXYAt(r.v[r._length-1][0],r.v[r._length-1][1],"o",r._length-1)),d>e.e)break;n<p-1&&(r=shapePool.newElement(),y=!0,m.push(r),s=0)}return m},extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(t,e){var r=e/100,n=[0,0],i=t._length,a=0;for(a=0;a<i;a+=1)n[0]+=t.v[a][0],n[1]+=t.v[a][1];n[0]/=i,n[1]/=i;var o,s,l,c,h,u,f=shapePool.newElement();for(f.c=t.c,a=0;a<i;a+=1)o=t.v[a][0]+(n[0]-t.v[a][0])*r,s=t.v[a][1]+(n[1]-t.v[a][1])*r,l=t.o[a][0]+(n[0]-t.o[a][0])*-r,c=t.o[a][1]+(n[1]-t.o[a][1])*-r,h=t.i[a][0]+(n[0]-t.i[a][0])*-r,u=t.i[a][1]+(n[1]-t.i[a][1])*-r,f.setTripleAt(o,s,l,c,h,u,a);return f},PuckerAndBloatModifier.prototype.processShapes=function(t){var e,r,n,i,a,o,s=this.shapes.length,l=this.amount.v;if(0!==l)for(r=0;r<s;r+=1){if(o=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(o.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)o.addShape(this.processPath(e[n],l));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)};var TransformPropertyFactory=function(){var t=[0,0];function e(t,e,r){if(this.elem=t,this.frameId=-1,this.propType="transform",this.data=e,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(r||t),e.p&&e.p.s?(this.px=PropertyFactory.getProp(t,e.p.x,0,0,this),this.py=PropertyFactory.getProp(t,e.p.y,0,0,this),e.p.z&&(this.pz=PropertyFactory.getProp(t,e.p.z,0,0,this))):this.p=PropertyFactory.getProp(t,e.p||{k:[0,0,0]},1,0,this),e.rx){if(this.rx=PropertyFactory.getProp(t,e.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(t,e.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(t,e.rz,0,degToRads,this),e.or.k[0].ti){var n,i=e.or.k.length;for(n=0;n<i;n+=1)e.or.k[n].to=null,e.or.k[n].ti=null}this.or=PropertyFactory.getProp(t,e.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(t,e.r||{k:0},0,degToRads,this);e.sk&&(this.sk=PropertyFactory.getProp(t,e.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(t,e.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(t,e.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(t,e.s||{k:[100,100,100]},1,.01,this),e.o?this.o=PropertyFactory.getProp(t,e.o,0,.01,t):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}return e.prototype={applyToMatrix:function(t){var e=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||e,this.a&&t.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&t.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&t.skewFromAxis(-this.sk.v,this.sa.v),this.r?t.rotate(-this.r.v):t.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?t.translate(this.px.v,this.py.v,-this.pz.v):t.translate(this.px.v,this.py.v,0):t.translate(this.p.v[0],this.p.v[1],-this.p.v[2])},getValue:function(e){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||e){var r;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var n,i;if(r=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(n=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/r,0),i=this.p.getValueAtTime(this.p.keyframes[0].t/r,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(n=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/r,0),i=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/r,0)):(n=this.p.pv,i=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/r,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){n=[],i=[];var a=this.px,o=this.py;a._caching.lastFrame+a.offsetTime<=a.keyframes[0].t?(n[0]=a.getValueAtTime((a.keyframes[0].t+.01)/r,0),n[1]=o.getValueAtTime((o.keyframes[0].t+.01)/r,0),i[0]=a.getValueAtTime(a.keyframes[0].t/r,0),i[1]=o.getValueAtTime(o.keyframes[0].t/r,0)):a._caching.lastFrame+a.offsetTime>=a.keyframes[a.keyframes.length-1].t?(n[0]=a.getValueAtTime(a.keyframes[a.keyframes.length-1].t/r,0),n[1]=o.getValueAtTime(o.keyframes[o.keyframes.length-1].t/r,0),i[0]=a.getValueAtTime((a.keyframes[a.keyframes.length-1].t-.01)/r,0),i[1]=o.getValueAtTime((o.keyframes[o.keyframes.length-1].t-.01)/r,0)):(n=[a.pv,o.pv],i[0]=a.getValueAtTime((a._caching.lastFrame+a.offsetTime-.01)/r,a.offsetTime),i[1]=o.getValueAtTime((o._caching.lastFrame+o.offsetTime-.01)/r,o.offsetTime))}else n=i=t;this.v.rotate(-Math.atan2(n[1]-i[1],n[0]-i[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}},precalculateMatrix:function(){if(this.appliedTransformations=0,this.pre.reset(),!this.a.effectsSequence.length&&(this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1,!this.s.effectsSequence.length)){if(this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2,this.sk){if(this.sk.effectsSequence.length||this.sa.effectsSequence.length)return;this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3}this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):this.rz.effectsSequence.length||this.ry.effectsSequence.length||this.rx.effectsSequence.length||this.or.effectsSequence.length||(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}},autoOrient:function(){}},extendPrototype([DynamicPropertyContainer],e),e.prototype.addDynamicProperty=function(t){this._addDynamicProperty(t),this.elem.addDynamicProperty(t),this._isDirty=!0},e.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty,{getTransformProperty:function(t,r,n){return new e(t,r,n)}}}();function RepeaterModifier(){}function RoundCornersModifier(){}function floatEqual(t,e){return 1e5*Math.abs(t-e)<=Math.min(Math.abs(t),Math.abs(e))}function floatZero(t){return Math.abs(t)<=1e-5}function lerp(t,e,r){return t*(1-r)+e*r}function lerpPoint(t,e,r){return[lerp(t[0],e[0],r),lerp(t[1],e[1],r)]}function quadRoots(t,e,r){if(0===t)return[];var n=e*e-4*t*r;if(n<0)return[];var i=-e/(2*t);if(0===n)return[i];var a=Math.sqrt(n)/(2*t);return[i-a,i+a]}function polynomialCoefficients(t,e,r,n){return[3*e-t-3*r+n,3*t-6*e+3*r,-3*t+3*e,t]}function singlePoint(t){return new PolynomialBezier(t,t,t,t,!1)}function PolynomialBezier(t,e,r,n,i){i&&pointEqual(t,e)&&(e=lerpPoint(t,n,1/3)),i&&pointEqual(r,n)&&(r=lerpPoint(t,n,2/3));var a=polynomialCoefficients(t[0],e[0],r[0],n[0]),o=polynomialCoefficients(t[1],e[1],r[1],n[1]);this.a=[a[0],o[0]],this.b=[a[1],o[1]],this.c=[a[2],o[2]],this.d=[a[3],o[3]],this.points=[t,e,r,n]}function extrema(t,e){var r=t.points[0][e],n=t.points[t.points.length-1][e];if(r>n){var i=n;n=r,r=i}for(var a=quadRoots(3*t.a[e],2*t.b[e],t.c[e]),o=0;o<a.length;o+=1)if(a[o]>0&&a[o]<1){var s=t.point(a[o])[e];s<r?r=s:s>n&&(n=s)}return{min:r,max:n}}function intersectData(t,e,r){var n=t.boundingBox();return{cx:n.cx,cy:n.cy,width:n.width,height:n.height,bez:t,t:(e+r)/2,t1:e,t2:r}}function splitData(t){var e=t.bez.split(.5);return[intersectData(e[0],t.t1,t.t),intersectData(e[1],t.t,t.t2)]}function boxIntersect(t,e){return 2*Math.abs(t.cx-e.cx)<t.width+e.width&&2*Math.abs(t.cy-e.cy)<t.height+e.height}function intersectsImpl(t,e,r,n,i,a){if(boxIntersect(t,e))if(r>=a||t.width<=n&&t.height<=n&&e.width<=n&&e.height<=n)i.push([t.t,e.t]);else{var o=splitData(t),s=splitData(e);intersectsImpl(o[0],s[0],r+1,n,i,a),intersectsImpl(o[0],s[1],r+1,n,i,a),intersectsImpl(o[1],s[0],r+1,n,i,a),intersectsImpl(o[1],s[1],r+1,n,i,a)}}function crossProduct(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function lineIntersection(t,e,r,n){var i=[t[0],t[1],1],a=[e[0],e[1],1],o=[r[0],r[1],1],s=[n[0],n[1],1],l=crossProduct(crossProduct(i,a),crossProduct(o,s));return floatZero(l[2])?null:[l[0]/l[2],l[1]/l[2]]}function polarOffset(t,e,r){return[t[0]+Math.cos(e)*r,t[1]-Math.sin(e)*r]}function pointDistance(t,e){return Math.hypot(t[0]-e[0],t[1]-e[1])}function pointEqual(t,e){return floatEqual(t[0],e[0])&&floatEqual(t[1],e[1])}function ZigZagModifier(){}function setPoint(t,e,r,n,i,a,o){var s=r-Math.PI/2,l=r+Math.PI/2,c=e[0]+Math.cos(r)*n*i,h=e[1]-Math.sin(r)*n*i;t.setTripleAt(c,h,c+Math.cos(s)*a,h-Math.sin(s)*a,c+Math.cos(l)*o,h-Math.sin(l)*o,t.length())}function getPerpendicularVector(t,e){var r=[e[0]-t[0],e[1]-t[1]],n=.5*-Math.PI;return[Math.cos(n)*r[0]-Math.sin(n)*r[1],Math.sin(n)*r[0]+Math.cos(n)*r[1]]}function getProjectingAngle(t,e){var r=0===e?t.length()-1:e-1,n=(e+1)%t.length(),i=getPerpendicularVector(t.v[r],t.v[n]);return Math.atan2(0,1)-Math.atan2(i[1],i[0])}function zigZagCorner(t,e,r,n,i,a,o){var s=getProjectingAngle(e,r),l=e.v[r%e._length],c=e.v[0===r?e._length-1:r-1],h=e.v[(r+1)%e._length],u=2===a?Math.sqrt(Math.pow(l[0]-c[0],2)+Math.pow(l[1]-c[1],2)):0,f=2===a?Math.sqrt(Math.pow(l[0]-h[0],2)+Math.pow(l[1]-h[1],2)):0;setPoint(t,e.v[r%e._length],s,o,n,f/(2*(i+1)),u/(2*(i+1)),a)}function zigZagSegment(t,e,r,n,i,a){for(var o=0;o<n;o+=1){var s=(o+1)/(n+1),l=2===i?Math.sqrt(Math.pow(e.points[3][0]-e.points[0][0],2)+Math.pow(e.points[3][1]-e.points[0][1],2)):0,c=e.normalAngle(s);setPoint(t,e.point(s),c,a,r,l/(2*(n+1)),l/(2*(n+1)),i),a=-a}return a}function linearOffset(t,e,r){var n=Math.atan2(e[0]-t[0],e[1]-t[1]);return[polarOffset(t,n,r),polarOffset(e,n,r)]}function offsetSegment(t,e){var r,n,i,a,o,s,l;r=(l=linearOffset(t.points[0],t.points[1],e))[0],n=l[1],i=(l=linearOffset(t.points[1],t.points[2],e))[0],a=l[1],o=(l=linearOffset(t.points[2],t.points[3],e))[0],s=l[1];var c=lineIntersection(r,n,i,a);null===c&&(c=n);var h=lineIntersection(o,s,i,a);return null===h&&(h=o),new PolynomialBezier(r,c,h,s)}function joinLines(t,e,r,n,i){var a=e.points[3],o=r.points[0];if(3===n)return a;if(pointEqual(a,o))return a;if(2===n){var s=-e.tangentAngle(1),l=-r.tangentAngle(0)+Math.PI,c=lineIntersection(a,polarOffset(a,s+Math.PI/2,100),o,polarOffset(o,s+Math.PI/2,100)),h=c?pointDistance(c,a):pointDistance(a,o)/2,u=polarOffset(a,s,2*h*roundCorner);return t.setXYAt(u[0],u[1],"o",t.length()-1),u=polarOffset(o,l,2*h*roundCorner),t.setTripleAt(o[0],o[1],o[0],o[1],u[0],u[1],t.length()),o}var f=lineIntersection(pointEqual(a,e.points[2])?e.points[0]:e.points[2],a,o,pointEqual(o,r.points[1])?r.points[3]:r.points[1]);return f&&pointDistance(f,a)<i?(t.setTripleAt(f[0],f[1],f[0],f[1],f[0],f[1],t.length()),f):a}function getIntersection(t,e){var r=t.intersections(e);return r.length&&floatEqual(r[0][0],1)&&r.shift(),r.length?r[0]:null}function pruneSegmentIntersection(t,e){var r=t.slice(),n=e.slice(),i=getIntersection(t[t.length-1],e[0]);return i&&(r[t.length-1]=t[t.length-1].split(i[0])[0],n[0]=e[0].split(i[1])[1]),t.length>1&&e.length>1&&(i=getIntersection(t[0],e[e.length-1]))?[[t[0].split(i[0])[0]],[e[e.length-1].split(i[1])[1]]]:[r,n]}function pruneIntersections(t){for(var e,r=1;r<t.length;r+=1)e=pruneSegmentIntersection(t[r-1],t[r]),t[r-1]=e[0],t[r]=e[1];return t.length>1&&(e=pruneSegmentIntersection(t[t.length-1],t[0]),t[t.length-1]=e[0],t[0]=e[1]),t}function offsetSegmentSplit(t,e){var r,n,i,a,o=t.inflectionPoints();if(0===o.length)return[offsetSegment(t,e)];if(1===o.length||floatEqual(o[1],1))return r=(i=t.split(o[0]))[0],n=i[1],[offsetSegment(r,e),offsetSegment(n,e)];r=(i=t.split(o[0]))[0];var s=(o[1]-o[0])/(1-o[0]);return a=(i=i[1].split(s))[0],n=i[1],[offsetSegment(r,e),offsetSegment(a,e),offsetSegment(n,e)]}function OffsetPathModifier(){}function getFontProperties(t){for(var e=t.fStyle?t.fStyle.split(" "):[],r="normal",n="normal",i=e.length,a=0;a<i;a+=1)switch(e[a].toLowerCase()){case"italic":n="italic";break;case"bold":r="700";break;case"black":r="900";break;case"medium":r="500";break;case"regular":case"normal":r="400";break;case"light":case"thin":r="200"}return{style:n,weight:t.fWeight||r}}extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(t,e.c,0,null,this),this.o=PropertyFactory.getProp(t,e.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(t,e.tr,this),this.so=PropertyFactory.getProp(t,e.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(t,e.tr.eo,0,.01,this),this.data=e,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(t,e,r,n,i,a){var o=a?-1:1,s=n.s.v[0]+(1-n.s.v[0])*(1-i),l=n.s.v[1]+(1-n.s.v[1])*(1-i);t.translate(n.p.v[0]*o*i,n.p.v[1]*o*i,n.p.v[2]),e.translate(-n.a.v[0],-n.a.v[1],n.a.v[2]),e.rotate(-n.r.v*o*i),e.translate(n.a.v[0],n.a.v[1],n.a.v[2]),r.translate(-n.a.v[0],-n.a.v[1],n.a.v[2]),r.scale(a?1/s:s,a?1/l:l),r.translate(n.a.v[0],n.a.v[1],n.a.v[2])},RepeaterModifier.prototype.init=function(t,e,r,n){for(this.elem=t,this.arr=e,this.pos=r,this.elemsData=n,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e[r]);r>0;)r-=1,this._elements.unshift(e[r]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e]._processed=!1,"gr"===t[e].ty&&this.resetElements(t[e].it)},RepeaterModifier.prototype.cloneElements=function(t){var e=JSON.parse(JSON.stringify(t));return this.resetElements(e),e},RepeaterModifier.prototype.changeGroupRender=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)t[r]._render=e,"gr"===t[r].ty&&this.changeGroupRender(t[r].it,e)},RepeaterModifier.prototype.processShapes=function(t){var e,r,n,i,a,o=!1;if(this._mdf||t){var s,l=Math.ceil(this.c.v);if(this._groups.length<l){for(;this._groups.length<l;){var c={it:this.cloneElements(this._elements),ty:"gr"};c.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,c),this._groups.splice(0,0,c),this._currentCopies+=1}this.elem.reloadShapes(),o=!0}for(a=0,n=0;n<=this._groups.length-1;n+=1){if(s=a<l,this._groups[n]._render=s,this.changeGroupRender(this._groups[n].it,s),!s){var h=this.elemsData[n].it,u=h[h.length-1];0!==u.transform.op.v?(u.transform.op._mdf=!0,u.transform.op.v=0):u.transform.op._mdf=!1}a+=1}this._currentCopies=l;var f=this.o.v,p=f%1,d=f>0?Math.floor(f):Math.ceil(f),m=this.pMatrix.props,y=this.rMatrix.props,v=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var g,b,x=0;if(f>0){for(;x<d;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),x+=1;p&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,p,!1),x+=p)}else if(f<0){for(;x>d;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),x-=1;p&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-p,!0),x-=p)}for(n=1===this.data.m?0:this._currentCopies-1,i=1===this.data.m?1:-1,a=this._currentCopies;a;){if(b=(r=(e=this.elemsData[n].it)[e.length-1].transform.mProps.v.props).length,e[e.length-1].transform.mProps._mdf=!0,e[e.length-1].transform.op._mdf=!0,e[e.length-1].transform.op.v=1===this._currentCopies?this.so.v:this.so.v+(this.eo.v-this.so.v)*(n/(this._currentCopies-1)),0!==x){for((0!==n&&1===i||n!==this._currentCopies-1&&-1===i)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(y[0],y[1],y[2],y[3],y[4],y[5],y[6],y[7],y[8],y[9],y[10],y[11],y[12],y[13],y[14],y[15]),this.matrix.transform(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],v[9],v[10],v[11],v[12],v[13],v[14],v[15]),this.matrix.transform(m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15]),g=0;g<b;g+=1)r[g]=this.matrix.props[g];this.matrix.reset()}else for(this.matrix.reset(),g=0;g<b;g+=1)r[g]=this.matrix.props[g];x+=1,a-=1,n+=i}}else for(a=this._currentCopies,n=0,i=1;a;)r=(e=this.elemsData[n].it)[e.length-1].transform.mProps.v.props,e[e.length-1].transform.mProps._mdf=!1,e[e.length-1].transform.op._mdf=!1,a-=1,n+=i;return o},RepeaterModifier.prototype.addShape=function(){},extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(t,e.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(t,e){var r,n=shapePool.newElement();n.c=t.c;var i,a,o,s,l,c,h,u,f,p,d,m,y=t._length,v=0;for(r=0;r<y;r+=1)i=t.v[r],o=t.o[r],a=t.i[r],i[0]===o[0]&&i[1]===o[1]&&i[0]===a[0]&&i[1]===a[1]?0!==r&&r!==y-1||t.c?(s=0===r?t.v[y-1]:t.v[r-1],c=(l=Math.sqrt(Math.pow(i[0]-s[0],2)+Math.pow(i[1]-s[1],2)))?Math.min(l/2,e)/l:0,h=d=i[0]+(s[0]-i[0])*c,u=m=i[1]-(i[1]-s[1])*c,f=h-(h-i[0])*roundCorner,p=u-(u-i[1])*roundCorner,n.setTripleAt(h,u,f,p,d,m,v),v+=1,s=r===y-1?t.v[0]:t.v[r+1],c=(l=Math.sqrt(Math.pow(i[0]-s[0],2)+Math.pow(i[1]-s[1],2)))?Math.min(l/2,e)/l:0,h=f=i[0]+(s[0]-i[0])*c,u=p=i[1]+(s[1]-i[1])*c,d=h-(h-i[0])*roundCorner,m=u-(u-i[1])*roundCorner,n.setTripleAt(h,u,f,p,d,m,v),v+=1):(n.setTripleAt(i[0],i[1],o[0],o[1],a[0],a[1],v),v+=1):(n.setTripleAt(t.v[r][0],t.v[r][1],t.o[r][0],t.o[r][1],t.i[r][0],t.i[r][1],v),v+=1);return n},RoundCornersModifier.prototype.processShapes=function(t){var e,r,n,i,a,o,s=this.shapes.length,l=this.rd.v;if(0!==l)for(r=0;r<s;r+=1){if(o=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(o.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)o.addShape(this.processPath(e[n],l));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)},PolynomialBezier.prototype.point=function(t){return[((this.a[0]*t+this.b[0])*t+this.c[0])*t+this.d[0],((this.a[1]*t+this.b[1])*t+this.c[1])*t+this.d[1]]},PolynomialBezier.prototype.derivative=function(t){return[(3*t*this.a[0]+2*this.b[0])*t+this.c[0],(3*t*this.a[1]+2*this.b[1])*t+this.c[1]]},PolynomialBezier.prototype.tangentAngle=function(t){var e=this.derivative(t);return Math.atan2(e[1],e[0])},PolynomialBezier.prototype.normalAngle=function(t){var e=this.derivative(t);return Math.atan2(e[0],e[1])},PolynomialBezier.prototype.inflectionPoints=function(){var t=this.a[1]*this.b[0]-this.a[0]*this.b[1];if(floatZero(t))return[];var e=-.5*(this.a[1]*this.c[0]-this.a[0]*this.c[1])/t,r=e*e-1/3*(this.b[1]*this.c[0]-this.b[0]*this.c[1])/t;if(r<0)return[];var n=Math.sqrt(r);return floatZero(n)?n>0&&n<1?[e]:[]:[e-n,e+n].filter((function(t){return t>0&&t<1}))},PolynomialBezier.prototype.split=function(t){if(t<=0)return[singlePoint(this.points[0]),this];if(t>=1)return[this,singlePoint(this.points[this.points.length-1])];var e=lerpPoint(this.points[0],this.points[1],t),r=lerpPoint(this.points[1],this.points[2],t),n=lerpPoint(this.points[2],this.points[3],t),i=lerpPoint(e,r,t),a=lerpPoint(r,n,t),o=lerpPoint(i,a,t);return[new PolynomialBezier(this.points[0],e,i,o,!0),new PolynomialBezier(o,a,n,this.points[3],!0)]},PolynomialBezier.prototype.bounds=function(){return{x:extrema(this,0),y:extrema(this,1)}},PolynomialBezier.prototype.boundingBox=function(){var t=this.bounds();return{left:t.x.min,right:t.x.max,top:t.y.min,bottom:t.y.max,width:t.x.max-t.x.min,height:t.y.max-t.y.min,cx:(t.x.max+t.x.min)/2,cy:(t.y.max+t.y.min)/2}},PolynomialBezier.prototype.intersections=function(t,e,r){void 0===e&&(e=2),void 0===r&&(r=7);var n=[];return intersectsImpl(intersectData(this,0,1),intersectData(t,0,1),0,e,n,r),n},PolynomialBezier.shapeSegment=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[e],t.o[e],t.i[r],t.v[r],!0)},PolynomialBezier.shapeSegmentInverted=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[r],t.i[r],t.o[e],t.v[e],!0)},extendPrototype([ShapeModifier],ZigZagModifier),ZigZagModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amplitude=PropertyFactory.getProp(t,e.s,0,null,this),this.frequency=PropertyFactory.getProp(t,e.r,0,null,this),this.pointsType=PropertyFactory.getProp(t,e.pt,0,null,this),this._isAnimated=0!==this.amplitude.effectsSequence.length||0!==this.frequency.effectsSequence.length||0!==this.pointsType.effectsSequence.length},ZigZagModifier.prototype.processPath=function(t,e,r,n){var i=t._length,a=shapePool.newElement();if(a.c=t.c,t.c||(i-=1),0===i)return a;var o=-1,s=PolynomialBezier.shapeSegment(t,0);zigZagCorner(a,t,0,e,r,n,o);for(var l=0;l<i;l+=1)o=zigZagSegment(a,s,e,r,n,-o),s=l!==i-1||t.c?PolynomialBezier.shapeSegment(t,(l+1)%i):null,zigZagCorner(a,t,l+1,e,r,n,o);return a},ZigZagModifier.prototype.processShapes=function(t){var e,r,n,i,a,o,s=this.shapes.length,l=this.amplitude.v,c=Math.max(0,Math.round(this.frequency.v)),h=this.pointsType.v;if(0!==l)for(r=0;r<s;r+=1){if(o=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(o.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)o.addShape(this.processPath(e[n],l,c,h));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)},extendPrototype([ShapeModifier],OffsetPathModifier),OffsetPathModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this.miterLimit=PropertyFactory.getProp(t,e.ml,0,null,this),this.lineJoin=e.lj,this._isAnimated=0!==this.amount.effectsSequence.length},OffsetPathModifier.prototype.processPath=function(t,e,r,n){var i=shapePool.newElement();i.c=t.c;var a,o,s,l=t.length();t.c||(l-=1);var c=[];for(a=0;a<l;a+=1)s=PolynomialBezier.shapeSegment(t,a),c.push(offsetSegmentSplit(s,e));if(!t.c)for(a=l-1;a>=0;a-=1)s=PolynomialBezier.shapeSegmentInverted(t,a),c.push(offsetSegmentSplit(s,e));c=pruneIntersections(c);var h=null,u=null;for(a=0;a<c.length;a+=1){var f=c[a];for(u&&(h=joinLines(i,u,f[0],r,n)),u=f[f.length-1],o=0;o<f.length;o+=1)s=f[o],h&&pointEqual(s.points[0],h)?i.setXYAt(s.points[1][0],s.points[1][1],"o",i.length()-1):i.setTripleAt(s.points[0][0],s.points[0][1],s.points[1][0],s.points[1][1],s.points[0][0],s.points[0][1],i.length()),i.setTripleAt(s.points[3][0],s.points[3][1],s.points[3][0],s.points[3][1],s.points[2][0],s.points[2][1],i.length()),h=s.points[3]}return c.length&&joinLines(i,u,c[0][0],r,n),i},OffsetPathModifier.prototype.processShapes=function(t){var e,r,n,i,a,o,s=this.shapes.length,l=this.amount.v,c=this.miterLimit.v,h=this.lineJoin;if(0!==l)for(r=0;r<s;r+=1){if(o=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(o.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)o.addShape(this.processPath(e[n],l,h,c));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)};var FontManager=function(){var t={w:0,size:0,shapes:[],data:{shapes:[]}},e=[];e=e.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var r=127988,n=["d83cdffb","d83cdffc","d83cdffd","d83cdffe","d83cdfff"];function i(t,e){var r=createTag("span");r.setAttribute("aria-hidden",!0),r.style.fontFamily=e;var n=createTag("span");n.innerText="giItT1WQy@!-/#",r.style.position="absolute",r.style.left="-10000px",r.style.top="-10000px",r.style.fontSize="300px",r.style.fontVariant="normal",r.style.fontStyle="normal",r.style.fontWeight="normal",r.style.letterSpacing="0",r.appendChild(n),document.body.appendChild(r);var i=n.offsetWidth;return n.style.fontFamily=function(t){var e,r=t.split(","),n=r.length,i=[];for(e=0;e<n;e+=1)"sans-serif"!==r[e]&&"monospace"!==r[e]&&i.push(r[e]);return i.join(",")}(t)+", "+e,{node:n,w:i,parent:r}}function a(t,e){var r,n=document.body&&e?"svg":"canvas",i=getFontProperties(t);if("svg"===n){var a=createNS("text");a.style.fontSize="100px",a.setAttribute("font-family",t.fFamily),a.setAttribute("font-style",i.style),a.setAttribute("font-weight",i.weight),a.textContent="1",t.fClass?(a.style.fontFamily="inherit",a.setAttribute("class",t.fClass)):a.style.fontFamily=t.fFamily,e.appendChild(a),r=a}else{var o=new OffscreenCanvas(500,500).getContext("2d");o.font=i.style+" "+i.weight+" 100px "+t.fFamily,r=o}return{measureText:function(t){return"svg"===n?(r.textContent=t,r.getComputedTextLength()):r.measureText(t).width}}}function o(t){var e=0,r=t.charCodeAt(0);if(r>=55296&&r<=56319){var n=t.charCodeAt(1);n>=56320&&n<=57343&&(e=1024*(r-55296)+n-56320+65536)}return e}function s(t){var e=o(t);return e>=127462&&e<=127487}var l=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};l.isModifier=function(t,e){var r=t.toString(16)+e.toString(16);return-1!==n.indexOf(r)},l.isZeroWidthJoiner=function(t){return 8205===t},l.isFlagEmoji=function(t){return s(t.substr(0,2))&&s(t.substr(2,2))},l.isRegionalCode=s,l.isCombinedCharacter=function(t){return-1!==e.indexOf(t)},l.isRegionalFlag=function(t,e){var n=o(t.substr(e,2));if(n!==r)return!1;var i=0;for(e+=2;i<5;){if((n=o(t.substr(e,2)))<917601||n>917626)return!1;i+=1,e+=2}return 917631===o(t.substr(e,2))},l.isVariationSelector=function(t){return 65039===t},l.BLACK_FLAG_CODE_POINT=r;var c={addChars:function(t){if(t){var e;this.chars||(this.chars=[]);var r,n,i=t.length,a=this.chars.length;for(e=0;e<i;e+=1){for(r=0,n=!1;r<a;)this.chars[r].style===t[e].style&&this.chars[r].fFamily===t[e].fFamily&&this.chars[r].ch===t[e].ch&&(n=!0),r+=1;n||(this.chars.push(t[e]),a+=1)}}},addFonts:function(t,e){if(t){if(this.chars)return this.isLoaded=!0,void(this.fonts=t.list);if(!document.body)return this.isLoaded=!0,t.list.forEach((function(t){t.helper=a(t),t.cache={}})),void(this.fonts=t.list);var r,n=t.list,o=n.length,s=o;for(r=0;r<o;r+=1){var l,c,h=!0;if(n[r].loaded=!1,n[r].monoCase=i(n[r].fFamily,"monospace"),n[r].sansCase=i(n[r].fFamily,"sans-serif"),n[r].fPath){if("p"===n[r].fOrigin||3===n[r].origin){if((l=document.querySelectorAll('style[f-forigin="p"][f-family="'+n[r].fFamily+'"], style[f-origin="3"][f-family="'+n[r].fFamily+'"]')).length>0&&(h=!1),h){var u=createTag("style");u.setAttribute("f-forigin",n[r].fOrigin),u.setAttribute("f-origin",n[r].origin),u.setAttribute("f-family",n[r].fFamily),u.type="text/css",u.innerText="@font-face {font-family: "+n[r].fFamily+"; font-style: normal; src: url('"+n[r].fPath+"');}",e.appendChild(u)}}else if("g"===n[r].fOrigin||1===n[r].origin){for(l=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),c=0;c<l.length;c+=1)-1!==l[c].href.indexOf(n[r].fPath)&&(h=!1);if(h){var f=createTag("link");f.setAttribute("f-forigin",n[r].fOrigin),f.setAttribute("f-origin",n[r].origin),f.type="text/css",f.rel="stylesheet",f.href=n[r].fPath,document.body.appendChild(f)}}else if("t"===n[r].fOrigin||2===n[r].origin){for(l=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),c=0;c<l.length;c+=1)n[r].fPath===l[c].src&&(h=!1);if(h){var p=createTag("link");p.setAttribute("f-forigin",n[r].fOrigin),p.setAttribute("f-origin",n[r].origin),p.setAttribute("rel","stylesheet"),p.setAttribute("href",n[r].fPath),e.appendChild(p)}}}else n[r].loaded=!0,s-=1;n[r].helper=a(n[r],e),n[r].cache={},this.fonts.push(n[r])}0===s?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}else this.isLoaded=!0},getCharData:function(e,r,n){for(var i=0,a=this.chars.length;i<a;){if(this.chars[i].ch===e&&this.chars[i].style===r&&this.chars[i].fFamily===n)return this.chars[i];i+=1}return("string"==typeof e&&13!==e.charCodeAt(0)||!e)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",e,r,n)),t},getFontByName:function(t){for(var e=0,r=this.fonts.length;e<r;){if(this.fonts[e].fName===t)return this.fonts[e];e+=1}return this.fonts[0]},measureText:function(t,e,r){var n=this.getFontByName(e),i=t;if(!n.cache[i]){var a=n.helper;if(" "===t){var o=a.measureText("|"+t+"|"),s=a.measureText("||");n.cache[i]=(o-s)/100}else n.cache[i]=a.measureText(t)/100}return n.cache[i]*r},checkLoadedFonts:function(){var t,e,r,n=this.fonts.length,i=n;for(t=0;t<n;t+=1)this.fonts[t].loaded?i-=1:"n"===this.fonts[t].fOrigin||0===this.fonts[t].origin?this.fonts[t].loaded=!0:(e=this.fonts[t].monoCase.node,r=this.fonts[t].monoCase.w,e.offsetWidth!==r?(i-=1,this.fonts[t].loaded=!0):(e=this.fonts[t].sansCase.node,r=this.fonts[t].sansCase.w,e.offsetWidth!==r&&(i-=1,this.fonts[t].loaded=!0)),this.fonts[t].loaded&&(this.fonts[t].sansCase.parent.parentNode.removeChild(this.fonts[t].sansCase.parent),this.fonts[t].monoCase.parent.parentNode.removeChild(this.fonts[t].monoCase.parent)));0!==i&&Date.now()-this.initTime<5e3?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)},setIsLoaded:function(){this.isLoaded=!0}};return l.prototype=c,l}();function SlotManager(t){this.animationData=t}function slotFactory(t){return new SlotManager(t)}function RenderableElement(){}SlotManager.prototype.getProp=function(t){return this.animationData.slots&&this.animationData.slots[t.sid]?Object.assign(t,this.animationData.slots[t.sid].p):t},RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(t){-1===this.renderableComponents.indexOf(t)&&this.renderableComponents.push(t)},removeRenderableComponent:function(t){-1!==this.renderableComponents.indexOf(t)&&this.renderableComponents.splice(this.renderableComponents.indexOf(t),1)},prepareRenderableFrame:function(t){this.checkLayerLimits(t)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(t){this.data.ip-this.data.st<=t&&this.data.op-this.data.st>t?!0!==this.isInRange&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):!1!==this.isInRange&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var t,e=this.renderableComponents.length;for(t=0;t<e;t+=1)this.renderableComponents[t].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return 5===this.data.ty?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}};var getBlendMode=(blendModeEnums={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"},function(t){return blendModeEnums[t]||""}),blendModeEnums;function SliderEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function AngleEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function ColorEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function PointEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function LayerIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function MaskIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function CheckboxEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function NoValueEffect(){this.p={}}function EffectsManager(t,e){var r,n=t.ef||[];this.effectElements=[];var i,a=n.length;for(r=0;r<a;r+=1)i=new GroupEffect(n[r],e),this.effectElements.push(i)}function GroupEffect(t,e){this.init(t,e)}function BaseElement(){}function FrameElement(){}function FootageElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.footageData=e.imageLoader.getAsset(this.assetData),this.initBaseData(t,e,r)}function AudioElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.initBaseData(t,e,r),this._isPlaying=!1,this._canPlay=!1;var n=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(n),this._currentTime=0,this.globalData.audioController.addAudio(this),this._volumeMultiplier=1,this._volume=1,this._previousVolume=null,this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0},this.lv=PropertyFactory.getProp(this,t.au&&t.au.lv?t.au.lv:{k:[100]},1,.01,this)}function BaseRenderer(){}extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(t,e){var r;this.data=t,this.effectElements=[],this.initDynamicPropertyContainer(e);var n,i=this.data.ef.length,a=this.data.ef;for(r=0;r<i;r+=1){switch(n=null,a[r].ty){case 0:n=new SliderEffect(a[r],e,this);break;case 1:n=new AngleEffect(a[r],e,this);break;case 2:n=new ColorEffect(a[r],e,this);break;case 3:n=new PointEffect(a[r],e,this);break;case 4:case 7:n=new CheckboxEffect(a[r],e,this);break;case 10:n=new LayerIndexEffect(a[r],e,this);break;case 11:n=new MaskIndexEffect(a[r],e,this);break;case 5:n=new EffectsManager(a[r],e,this);break;default:n=new NoValueEffect(a[r],e,this)}n&&this.effectElements.push(n)}},BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var t=0,e=this.data.masksProperties.length;t<e;){if("n"!==this.data.masksProperties[t].mode&&!1!==this.data.masksProperties[t].cl)return!0;t+=1}return!1},initExpressions:function(){var t=getExpressionInterfaces();if(t){var e=t("layer"),r=t("effects"),n=t("shape"),i=t("text"),a=t("comp");this.layerInterface=e(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var o=r.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(o),0===this.data.ty||this.data.xt?this.compInterface=a(this):4===this.data.ty?(this.layerInterface.shapeInterface=n(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):5===this.data.ty&&(this.layerInterface.textInterface=i(this),this.layerInterface.text=this.layerInterface.textInterface)}},setBlendMode:function(){var t=getBlendMode(this.data.bm);(this.baseElement||this.layerElement).style["mix-blend-mode"]=t},initBaseData:function(t,e,r){this.globalData=e,this.comp=r,this.data=t,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}},FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(t,e){var r,n=this.dynamicProperties.length;for(r=0;r<n;r+=1)(e||this._isParent&&"transform"===this.dynamicProperties[r].propType)&&(this.dynamicProperties[r].getValue(),this.dynamicProperties[r]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(t){-1===this.dynamicProperties.indexOf(t)&&this.dynamicProperties.push(t)}},FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){var t=getExpressionInterfaces();if(t){var e=t("footage");this.layerInterface=e(this)}},FootageElement.prototype.getFootageData=function(){return this.footageData},AudioElement.prototype.prepareFrame=function(t){if(this.prepareRenderableFrame(t,!0),this.prepareProperties(t,!0),this.tm._placeholder)this._currentTime=t/this.data.sr;else{var e=this.tm.v;this._currentTime=e}this._volume=this.lv.v[0];var r=this._volume*this._volumeMultiplier;this._previousVolume!==r&&(this._previousVolume=r,this.audio.volume(r))},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(t){this.audio.rate(t)},AudioElement.prototype.volume=function(t){this._volumeMultiplier=t,this._previousVolume=t*this._volume,this.audio.volume(this._previousVolume)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){},BaseRenderer.prototype.checkLayers=function(t){var e,r,n=this.layers.length;for(this.completeLayers=!0,e=n-1;e>=0;e-=1)this.elements[e]||(r=this.layers[e]).ip-r.st<=t-this.layers[e].st&&r.op-r.st>t-this.layers[e].st&&this.buildItem(e),this.completeLayers=!!this.elements[e]&&this.completeLayers;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(t){switch(t.ty){case 2:return this.createImage(t);case 0:return this.createComp(t);case 1:return this.createSolid(t);case 3:default:return this.createNull(t);case 4:return this.createShape(t);case 5:return this.createText(t);case 6:return this.createAudio(t);case 13:return this.createCamera(t);case 15:return this.createFootage(t)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(t){return new AudioElement(t,this.globalData,this)},BaseRenderer.prototype.createFootage=function(t){return new FootageElement(t,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.buildItem(t);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(t){var e;this.completeLayers=!1;var r,n=t.length,i=this.layers.length;for(e=0;e<n;e+=1)for(r=0;r<i;){if(this.layers[r].id===t[e].id){this.layers[r]=t[e];break}r+=1}},BaseRenderer.prototype.setProjectInterface=function(t){this.globalData.projectInterface=t},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(t,e,r){for(var n=this.elements,i=this.layers,a=0,o=i.length;a<o;)i[a].ind==e&&(n[a]&&!0!==n[a]?(r.push(n[a]),n[a].setAsParent(),void 0!==i[a].parent?this.buildElementParenting(t,i[a].parent,r):t.setHierarchy(r)):(this.buildItem(a),this.addPendingElement(t))),a+=1},BaseRenderer.prototype.addPendingElement=function(t){this.pendingElements.push(t)},BaseRenderer.prototype.searchExtraCompositions=function(t){var e,r=t.length;for(e=0;e<r;e+=1)if(t[e].xt){var n=this.createComp(t[e]);n.initExpressions(),this.globalData.projectInterface.registerComposition(n)}},BaseRenderer.prototype.getElementById=function(t){var e,r=this.elements.length;for(e=0;e<r;e+=1)if(this.elements[e].data.ind===t)return this.elements[e];return null},BaseRenderer.prototype.getElementByPath=function(t){var e,r=t.shift();if("number"==typeof r)e=this.elements[r];else{var n,i=this.elements.length;for(n=0;n<i;n+=1)if(this.elements[n].data.nm===r){e=this.elements[n];break}}return 0===t.length?e:e.getElementByPath(t)},BaseRenderer.prototype.setupGlobalData=function(t,e){this.globalData.fontManager=new FontManager,this.globalData.slotManager=slotFactory(t),this.globalData.fontManager.addChars(t.chars),this.globalData.fontManager.addFonts(t.fonts,e),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=t.fr,this.globalData.nm=t.nm,this.globalData.compSize={w:t.w,h:t.h}};var effectTypes={TRANSFORM_EFFECT:"transformEFfect"};function TransformElement(){}function MaskElement(t,e,r){this.data=t,this.element=e,this.globalData=r,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var n,i,a=this.globalData.defs,o=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(o),this.solidPath="";var s,l,c,h,u,f,p=this.masksProperties,d=0,m=[],y=createElementID(),v="clipPath",g="clip-path";for(n=0;n<o;n+=1)if(("a"!==p[n].mode&&"n"!==p[n].mode||p[n].inv||100!==p[n].o.k||p[n].o.x)&&(v="mask",g="mask"),"s"!==p[n].mode&&"i"!==p[n].mode||0!==d?c=null:((c=createNS("rect")).setAttribute("fill","#ffffff"),c.setAttribute("width",this.element.comp.data.w||0),c.setAttribute("height",this.element.comp.data.h||0),m.push(c)),i=createNS("path"),"n"===p[n].mode)this.viewData[n]={op:PropertyFactory.getProp(this.element,p[n].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,p[n],3),elem:i,lastPath:""},a.appendChild(i);else{var b;if(d+=1,i.setAttribute("fill","s"===p[n].mode?"#000000":"#ffffff"),i.setAttribute("clip-rule","nonzero"),0!==p[n].x.k?(v="mask",g="mask",f=PropertyFactory.getProp(this.element,p[n].x,0,null,this.element),b=createElementID(),(h=createNS("filter")).setAttribute("id",b),(u=createNS("feMorphology")).setAttribute("operator","erode"),u.setAttribute("in","SourceGraphic"),u.setAttribute("radius","0"),h.appendChild(u),a.appendChild(h),i.setAttribute("stroke","s"===p[n].mode?"#000000":"#ffffff")):(u=null,f=null),this.storedData[n]={elem:i,x:f,expan:u,lastPath:"",lastOperator:"",filterId:b,lastRadius:0},"i"===p[n].mode){l=m.length;var x=createNS("g");for(s=0;s<l;s+=1)x.appendChild(m[s]);var w=createNS("mask");w.setAttribute("mask-type","alpha"),w.setAttribute("id",y+"_"+d),w.appendChild(i),a.appendChild(w),x.setAttribute("mask","url("+getLocationHref()+"#"+y+"_"+d+")"),m.length=0,m.push(x)}else m.push(i);p[n].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[n]={elem:i,lastPath:"",op:PropertyFactory.getProp(this.element,p[n].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,p[n],3),invRect:c},this.viewData[n].prop.k||this.drawPath(p[n],this.viewData[n].prop.v,this.viewData[n])}for(this.maskElement=createNS(v),o=m.length,n=0;n<o;n+=1)this.maskElement.appendChild(m[n]);d>0&&(this.maskElement.setAttribute("id",y),this.element.maskedElement.setAttribute(g,"url("+getLocationHref()+"#"+y+")"),a.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}TransformElement.prototype={initTransform:function(){var t=new Matrix;this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_localMatMdf:!1,_opMdf:!1,mat:t,localMat:t,localOpacity:1},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var t,e=this.finalTransform.mat,r=0,n=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;r<n;){if(this.hierarchy[r].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}r+=1}if(this.finalTransform._matMdf)for(t=this.finalTransform.mProp.v.props,e.cloneFromProps(t),r=0;r<n;r+=1)e.multiply(this.hierarchy[r].finalTransform.mProp.v)}this.finalTransform._matMdf&&(this.finalTransform._localMatMdf=this.finalTransform._matMdf),this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v)},renderLocalTransform:function(){if(this.localTransforms){var t=0,e=this.localTransforms.length;if(this.finalTransform._localMatMdf=this.finalTransform._matMdf,!this.finalTransform._localMatMdf||!this.finalTransform._opMdf)for(;t<e;)this.localTransforms[t]._mdf&&(this.finalTransform._localMatMdf=!0),this.localTransforms[t]._opMdf&&!this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v,this.finalTransform._opMdf=!0),t+=1;if(this.finalTransform._localMatMdf){var r=this.finalTransform.localMat;for(this.localTransforms[0].matrix.clone(r),t=1;t<e;t+=1){var n=this.localTransforms[t].matrix;r.multiply(n)}r.multiply(this.finalTransform.mat)}if(this.finalTransform._opMdf){var i=this.finalTransform.localOpacity;for(t=0;t<e;t+=1)i*=.01*this.localTransforms[t].opacity;this.finalTransform.localOpacity=i}}},searchEffectTransforms:function(){if(this.renderableEffectsManager){var t=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);if(t.length){this.localTransforms=[],this.finalTransform.localMat=new Matrix;var e=0,r=t.length;for(e=0;e<r;e+=1)this.localTransforms.push(t[e])}}},globalToLocal:function(t){var e=[];e.push(this.finalTransform);for(var r,n=!0,i=this.comp;n;)i.finalTransform?(i.data.hasMask&&e.splice(0,0,i.finalTransform),i=i.comp):n=!1;var a,o=e.length;for(r=0;r<o;r+=1)a=e[r].mat.applyToPointArray(0,0,0),t=[t[0]-a[0],t[1]-a[1],0];return t},mHelper:new Matrix},MaskElement.prototype.getMaskProperty=function(t){return this.viewData[t].prop},MaskElement.prototype.renderFrame=function(t){var e,r=this.element.finalTransform.mat,n=this.masksProperties.length;for(e=0;e<n;e+=1)if((this.viewData[e].prop._mdf||t)&&this.drawPath(this.masksProperties[e],this.viewData[e].prop.v,this.viewData[e]),(this.viewData[e].op._mdf||t)&&this.viewData[e].elem.setAttribute("fill-opacity",this.viewData[e].op.v),"n"!==this.masksProperties[e].mode&&(this.viewData[e].invRect&&(this.element.finalTransform.mProp._mdf||t)&&this.viewData[e].invRect.setAttribute("transform",r.getInverseMatrix().to2dCSS()),this.storedData[e].x&&(this.storedData[e].x._mdf||t))){var i=this.storedData[e].expan;this.storedData[e].x.v<0?("erode"!==this.storedData[e].lastOperator&&(this.storedData[e].lastOperator="erode",this.storedData[e].elem.setAttribute("filter","url("+getLocationHref()+"#"+this.storedData[e].filterId+")")),i.setAttribute("radius",-this.storedData[e].x.v)):("dilate"!==this.storedData[e].lastOperator&&(this.storedData[e].lastOperator="dilate",this.storedData[e].elem.setAttribute("filter",null)),this.storedData[e].elem.setAttribute("stroke-width",2*this.storedData[e].x.v))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var t="M0,0 ";return t+=" h"+this.globalData.compSize.w,t+=" v"+this.globalData.compSize.h,(t+=" h-"+this.globalData.compSize.w)+" v-"+this.globalData.compSize.h+" "},MaskElement.prototype.drawPath=function(t,e,r){var n,i,a=" M"+e.v[0][0]+","+e.v[0][1];for(i=e._length,n=1;n<i;n+=1)a+=" C"+e.o[n-1][0]+","+e.o[n-1][1]+" "+e.i[n][0]+","+e.i[n][1]+" "+e.v[n][0]+","+e.v[n][1];if(e.c&&i>1&&(a+=" C"+e.o[n-1][0]+","+e.o[n-1][1]+" "+e.i[0][0]+","+e.i[0][1]+" "+e.v[0][0]+","+e.v[0][1]),r.lastPath!==a){var o="";r.elem&&(e.c&&(o=t.inv?this.solidPath+a:a),r.elem.setAttribute("d",o)),r.lastPath=a}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null};var filtersFactory={createFilter:function(t,e){var r=createNS("filter");return r.setAttribute("id",t),!0!==e&&(r.setAttribute("filterUnits","objectBoundingBox"),r.setAttribute("x","0%"),r.setAttribute("y","0%"),r.setAttribute("width","100%"),r.setAttribute("height","100%")),r},createAlphaToLuminanceFilter:function(){var t=createNS("feColorMatrix");return t.setAttribute("type","matrix"),t.setAttribute("color-interpolation-filters","sRGB"),t.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),t}},featureSupport=function(){var t={maskType:!0,svgLumaHidden:!0,offscreenCanvas:"undefined"!=typeof OffscreenCanvas};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(t.maskType=!1),/firefox/i.test(navigator.userAgent)&&(t.svgLumaHidden=!1),t}(),registeredEffects$1={},idPrefix="filter_result_";function SVGEffects(t){var e,r,n="SourceGraphic",i=t.data.ef?t.data.ef.length:0,a=createElementID(),o=filtersFactory.createFilter(a,!0),s=0;for(this.filters=[],e=0;e<i;e+=1){r=null;var l=t.data.ef[e].ty;registeredEffects$1[l]&&(r=new(0,registeredEffects$1[l].effect)(o,t.effectsManager.effectElements[e],t,idPrefix+s,n),n=idPrefix+s,registeredEffects$1[l].countsAsEffect&&(s+=1)),r&&this.filters.push(r)}s&&(t.globalData.defs.appendChild(o),t.layerElement.setAttribute("filter","url("+getLocationHref()+"#"+a+")")),this.filters.length&&t.addRenderableComponent(this)}function registerEffect$1(t,e,r){registeredEffects$1[t]={effect:e,countsAsEffect:r}}function SVGBaseElement(){}function HierarchyElement(){}function RenderableDOMElement(){}function IImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.assetData&&this.assetData.sid&&(this.assetData=e.slotManager.getProp(this.assetData)),this.initElement(t,e,r),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}function ProcessedElement(t,e){this.elem=t,this.pos=e}function IShapeElement(){}SVGEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},SVGEffects.prototype.getEffects=function(t){var e,r=this.filters.length,n=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&n.push(this.filters[e]);return n},SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var t=null;if(this.data.td){this.matteMasks={};var e=createNS("g");e.setAttribute("id",this.layerId),e.appendChild(this.layerElement),t=e,this.globalData.defs.appendChild(e)}else this.data.tt?(this.matteElement.appendChild(this.layerElement),t=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0===this.data.ty&&!this.data.hd){var r=createNS("clipPath"),n=createNS("path");n.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var i=createElementID();if(r.setAttribute("id",i),r.appendChild(n),this.globalData.defs.appendChild(r),this.checkMasks()){var a=createNS("g");a.setAttribute("clip-path","url("+getLocationHref()+"#"+i+")"),a.appendChild(this.layerElement),this.transformedElement=a,t?t.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+i+")")}0!==this.data.bm&&this.setBlendMode()},renderElement:function(){this.finalTransform._localMatMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.localMat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.localOpacity)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this),this.searchEffectTransforms()},getMatte:function(t){if(this.matteMasks||(this.matteMasks={}),!this.matteMasks[t]){var e,r,n,i,a=this.layerId+"_"+t;if(1===t||3===t){var o=createNS("mask");o.setAttribute("id",a),o.setAttribute("mask-type",3===t?"luminance":"alpha"),(n=createNS("use")).setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),o.appendChild(n),this.globalData.defs.appendChild(o),featureSupport.maskType||1!==t||(o.setAttribute("mask-type","luminance"),e=createElementID(),r=filtersFactory.createFilter(e),this.globalData.defs.appendChild(r),r.appendChild(filtersFactory.createAlphaToLuminanceFilter()),(i=createNS("g")).appendChild(n),o.appendChild(i),i.setAttribute("filter","url("+getLocationHref()+"#"+e+")"))}else if(2===t){var s=createNS("mask");s.setAttribute("id",a),s.setAttribute("mask-type","alpha");var l=createNS("g");s.appendChild(l),e=createElementID(),r=filtersFactory.createFilter(e);var c=createNS("feComponentTransfer");c.setAttribute("in","SourceGraphic"),r.appendChild(c);var h=createNS("feFuncA");h.setAttribute("type","table"),h.setAttribute("tableValues","1.0 0.0"),c.appendChild(h),this.globalData.defs.appendChild(r);var u=createNS("rect");u.setAttribute("width",this.comp.data.w),u.setAttribute("height",this.comp.data.h),u.setAttribute("x","0"),u.setAttribute("y","0"),u.setAttribute("fill","#ffffff"),u.setAttribute("opacity","0"),l.setAttribute("filter","url("+getLocationHref()+"#"+e+")"),l.appendChild(u),(n=createNS("use")).setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),l.appendChild(n),featureSupport.maskType||(s.setAttribute("mask-type","luminance"),r.appendChild(filtersFactory.createAlphaToLuminanceFilter()),i=createNS("g"),l.appendChild(u),i.appendChild(this.layerElement),l.appendChild(i)),this.globalData.defs.appendChild(s)}this.matteMasks[t]=a}return this.matteMasks[t]},setMatte:function(t){this.matteElement&&this.matteElement.setAttribute("mask","url("+getLocationHref()+"#"+t+")")}},HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(t){this.hierarchy=t},setAsParent:function(){this._isParent=!0},checkParenting:function(){void 0!==this.data.parent&&this.comp.buildElementParenting(this,this.data.parent,[])}},extendPrototype([RenderableElement,createProxyFunction({initElement:function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){this.hidden||this.isInRange&&!this.isTransparent||((this.baseElement||this.layerElement).style.display="none",this.hidden=!0)},show:function(){this.isInRange&&!this.isTransparent&&(this.data.hd||((this.baseElement||this.layerElement).style.display="block"),this.hidden=!1,this._isFirstFrame=!0)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}})],RenderableDOMElement),extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect},IShapeElement.prototype={addShapeToModifiers:function(t){var e,r=this.shapeModifiers.length;for(e=0;e<r;e+=1)this.shapeModifiers[e].addShape(t)},isShapeInAnimatedModifiers:function(t){for(var e=this.shapeModifiers.length;0<e;)if(this.shapeModifiers[0].isAnimatedWithShape(t))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var t,e=this.shapes.length;for(t=0;t<e;t+=1)this.shapes[t].sh.reset();for(t=(e=this.shapeModifiers.length)-1;t>=0&&!this.shapeModifiers[t].processShapes(this._isFirstFrame);t-=1);}},searchProcessedElement:function(t){for(var e=this.processedElements,r=0,n=e.length;r<n;){if(e[r].elem===t)return e[r].pos;r+=1}return 0},addProcessedElement:function(t,e){for(var r=this.processedElements,n=r.length;n;)if(r[n-=1].elem===t)return void(r[n].pos=e);r.push(new ProcessedElement(t,e))},prepareFrame:function(t){this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)}};var lineCapEnum={1:"butt",2:"round",3:"square"},lineJoinEnum={1:"miter",2:"round",3:"bevel"};function SVGShapeData(t,e,r){this.caches=[],this.styles=[],this.transformers=t,this.lStr="",this.sh=r,this.lvl=e,this._isAnimated=!!r.k;for(var n=0,i=t.length;n<i;){if(t[n].mProps.dynamicProperties.length){this._isAnimated=!0;break}n+=1}}function SVGStyleData(t,e){this.data=t,this.type=t.ty,this.d="",this.lvl=e,this._mdf=!1,this.closed=!0===t.hd,this.pElem=createNS("path"),this.msElem=null}function DashProperty(t,e,r,n){var i;this.elem=t,this.frameId=-1,this.dataProps=createSizedArray(e.length),this.renderer=r,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",e.length?e.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(n);var a,o=e.length||0;for(i=0;i<o;i+=1)a=PropertyFactory.getProp(t,e[i].v,0,0,this),this.k=a.k||this.k,this.dataProps[i]={n:e[i].n,p:a};this.k||this.getValue(!0),this._isAnimated=this.k}function SVGStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r,this._isAnimated=!!this._isAnimated}function SVGFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r}function SVGNoStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.style=r}function GradientProperty(t,e,r){this.data=e,this.c=createTypedArray("uint8c",4*e.p);var n=e.k.k[0].s?e.k.k[0].s.length-4*e.p:e.k.k.length-4*e.p;this.o=createTypedArray("float32",n),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=n,this.initDynamicPropertyContainer(r),this.prop=PropertyFactory.getProp(t,e.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}function SVGGradientFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.initGradientData(t,e,r)}function SVGGradientStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.initGradientData(t,e,r),this._isAnimated=!!this._isAnimated}function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function SVGTransformData(t,e,r){this.transform={mProps:t,op:e,container:r},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0},SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1},DashProperty.prototype.getValue=function(t){if((this.elem.globalData.frameId!==this.frameId||t)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||t,this._mdf)){var e=0,r=this.dataProps.length;for("svg"===this.renderer&&(this.dashStr=""),e=0;e<r;e+=1)"o"!==this.dataProps[e].n?"svg"===this.renderer?this.dashStr+=" "+this.dataProps[e].p.v:this.dashArray[e]=this.dataProps[e].p.v:this.dashoffset[0]=this.dataProps[e].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty),extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData),extendPrototype([DynamicPropertyContainer],SVGFillStyleData),extendPrototype([DynamicPropertyContainer],SVGNoStyleData),GradientProperty.prototype.comparePoints=function(t,e){for(var r=0,n=this.o.length/2;r<n;){if(Math.abs(t[4*r]-t[4*e+2*r])>.01)return!1;r+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!=this.c.length/4)return!1;if(this.data.k.k[0].s)for(var t=0,e=this.data.k.k.length;t<e;){if(!this.comparePoints(this.data.k.k[t].s,this.data.p))return!1;t+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(t){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||t){var e,r,n,i=4*this.data.p;for(e=0;e<i;e+=1)r=e%4==0?100:255,n=Math.round(this.prop.v[e]*r),this.c[e]!==n&&(this.c[e]=n,this._cmdf=!t);if(this.o.length)for(i=this.prop.v.length,e=4*this.data.p;e<i;e+=1)r=e%2==0?100:1,n=e%2==0?Math.round(100*this.prop.v[e]):this.prop.v[e],this.o[e-4*this.data.p]!==n&&(this.o[e-4*this.data.p]=n,this._omdf=!t);this._mdf=!t}},extendPrototype([DynamicPropertyContainer],GradientProperty),SVGGradientFillStyleData.prototype.initGradientData=function(t,e,r){this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.s=PropertyFactory.getProp(t,e.s,1,null,this),this.e=PropertyFactory.getProp(t,e.e,1,null,this),this.h=PropertyFactory.getProp(t,e.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(t,e.a||{k:0},0,degToRads,this),this.g=new GradientProperty(t,e.g,this),this.style=r,this.stops=[],this.setGradientData(r.pElem,e),this.setGradientOpacity(e,r),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(t,e){var r=createElementID(),n=createNS(1===e.t?"linearGradient":"radialGradient");n.setAttribute("id",r),n.setAttribute("spreadMethod","pad"),n.setAttribute("gradientUnits","userSpaceOnUse");var i,a,o,s=[];for(o=4*e.g.p,a=0;a<o;a+=4)i=createNS("stop"),n.appendChild(i),s.push(i);t.setAttribute("gf"===e.ty?"fill":"stroke","url("+getLocationHref()+"#"+r+")"),this.gf=n,this.cst=s},SVGGradientFillStyleData.prototype.setGradientOpacity=function(t,e){if(this.g._hasOpacity&&!this.g._collapsable){var r,n,i,a=createNS("mask"),o=createNS("path");a.appendChild(o);var s=createElementID(),l=createElementID();a.setAttribute("id",l);var c=createNS(1===t.t?"linearGradient":"radialGradient");c.setAttribute("id",s),c.setAttribute("spreadMethod","pad"),c.setAttribute("gradientUnits","userSpaceOnUse"),i=t.g.k.k[0].s?t.g.k.k[0].s.length:t.g.k.k.length;var h=this.stops;for(n=4*t.g.p;n<i;n+=2)(r=createNS("stop")).setAttribute("stop-color","rgb(255,255,255)"),c.appendChild(r),h.push(r);o.setAttribute("gf"===t.ty?"fill":"stroke","url("+getLocationHref()+"#"+s+")"),"gs"===t.ty&&(o.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),o.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),1===t.lj&&o.setAttribute("stroke-miterlimit",t.ml)),this.of=c,this.ms=a,this.ost=h,this.maskId=l,e.msElem=o}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData),extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);var buildShapeString=function(t,e,r,n){if(0===e)return"";var i,a=t.o,o=t.i,s=t.v,l=" M"+n.applyToPointStringified(s[0][0],s[0][1]);for(i=1;i<e;i+=1)l+=" C"+n.applyToPointStringified(a[i-1][0],a[i-1][1])+" "+n.applyToPointStringified(o[i][0],o[i][1])+" "+n.applyToPointStringified(s[i][0],s[i][1]);return r&&e&&(l+=" C"+n.applyToPointStringified(a[i-1][0],a[i-1][1])+" "+n.applyToPointStringified(o[0][0],o[0][1])+" "+n.applyToPointStringified(s[0][0],s[0][1]),l+="z"),l},SVGElementsRenderer=function(){var t=new Matrix,e=new Matrix;function r(t,e,r){(r||e.transform.op._mdf)&&e.transform.container.setAttribute("opacity",e.transform.op.v),(r||e.transform.mProps._mdf)&&e.transform.container.setAttribute("transform",e.transform.mProps.v.to2dCSS())}function n(){}function i(r,n,i){var a,o,s,l,c,h,u,f,p,d,m=n.styles.length,y=n.lvl;for(h=0;h<m;h+=1){if(l=n.sh._mdf||i,n.styles[h].lvl<y){for(f=e.reset(),p=y-n.styles[h].lvl,d=n.transformers.length-1;!l&&p>0;)l=n.transformers[d].mProps._mdf||l,p-=1,d-=1;if(l)for(p=y-n.styles[h].lvl,d=n.transformers.length-1;p>0;)f.multiply(n.transformers[d].mProps.v),p-=1,d-=1}else f=t;if(o=(u=n.sh.paths)._length,l){for(s="",a=0;a<o;a+=1)(c=u.shapes[a])&&c._length&&(s+=buildShapeString(c,c._length,c.c,f));n.caches[h]=s}else s=n.caches[h];n.styles[h].d+=!0===r.hd?"":s,n.styles[h]._mdf=l||n.styles[h]._mdf}}function a(t,e,r){var n=e.style;(e.c._mdf||r)&&n.pElem.setAttribute("fill","rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r)&&n.pElem.setAttribute("fill-opacity",e.o.v)}function o(t,e,r){s(t,e,r),l(0,e,r)}function s(t,e,r){var n,i,a,o,s,l=e.gf,c=e.g._hasOpacity,h=e.s.v,u=e.e.v;if(e.o._mdf||r){var f="gf"===t.ty?"fill-opacity":"stroke-opacity";e.style.pElem.setAttribute(f,e.o.v)}if(e.s._mdf||r){var p=1===t.t?"x1":"cx",d="x1"===p?"y1":"cy";l.setAttribute(p,h[0]),l.setAttribute(d,h[1]),c&&!e.g._collapsable&&(e.of.setAttribute(p,h[0]),e.of.setAttribute(d,h[1]))}if(e.g._cmdf||r){n=e.cst;var m=e.g.c;for(a=n.length,i=0;i<a;i+=1)(o=n[i]).setAttribute("offset",m[4*i]+"%"),o.setAttribute("stop-color","rgb("+m[4*i+1]+","+m[4*i+2]+","+m[4*i+3]+")")}if(c&&(e.g._omdf||r)){var y=e.g.o;for(a=(n=e.g._collapsable?e.cst:e.ost).length,i=0;i<a;i+=1)o=n[i],e.g._collapsable||o.setAttribute("offset",y[2*i]+"%"),o.setAttribute("stop-opacity",y[2*i+1])}if(1===t.t)(e.e._mdf||r)&&(l.setAttribute("x2",u[0]),l.setAttribute("y2",u[1]),c&&!e.g._collapsable&&(e.of.setAttribute("x2",u[0]),e.of.setAttribute("y2",u[1])));else if((e.s._mdf||e.e._mdf||r)&&(s=Math.sqrt(Math.pow(h[0]-u[0],2)+Math.pow(h[1]-u[1],2)),l.setAttribute("r",s),c&&!e.g._collapsable&&e.of.setAttribute("r",s)),e.e._mdf||e.h._mdf||e.a._mdf||r){s||(s=Math.sqrt(Math.pow(h[0]-u[0],2)+Math.pow(h[1]-u[1],2)));var v=Math.atan2(u[1]-h[1],u[0]-h[0]),g=e.h.v;g>=1?g=.99:g<=-1&&(g=-.99);var b=s*g,x=Math.cos(v+e.a.v)*b+h[0],w=Math.sin(v+e.a.v)*b+h[1];l.setAttribute("fx",x),l.setAttribute("fy",w),c&&!e.g._collapsable&&(e.of.setAttribute("fx",x),e.of.setAttribute("fy",w))}}function l(t,e,r){var n=e.style,i=e.d;i&&(i._mdf||r)&&i.dashStr&&(n.pElem.setAttribute("stroke-dasharray",i.dashStr),n.pElem.setAttribute("stroke-dashoffset",i.dashoffset[0])),e.c&&(e.c._mdf||r)&&n.pElem.setAttribute("stroke","rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r)&&n.pElem.setAttribute("stroke-opacity",e.o.v),(e.w._mdf||r)&&(n.pElem.setAttribute("stroke-width",e.w.v),n.msElem&&n.msElem.setAttribute("stroke-width",e.w.v))}return{createRenderFunction:function(t){switch(t.ty){case"fl":return a;case"gf":return s;case"gs":return o;case"st":return l;case"sh":case"el":case"rc":case"sr":return i;case"tr":return r;case"no":return n;default:return null}}}}();function SVGShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(t,e,r),this.prevViewData=[]}function LetterProps(t,e,r,n,i,a){this.o=t,this.sw=e,this.sc=r,this.fc=n,this.m=i,this.p=a,this._mdf={o:!0,sw:!!e,sc:!!r,fc:!!n,m:!0,p:!0}}function TextProperty(t,e){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,e.d&&e.d.sid&&(e.d=t.globalData.slotManager.getProp(e.d)),this.data=e,this.elem=t,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var t,e,r,n,i=this.shapes.length,a=this.stylesList.length,o=[],s=!1;for(r=0;r<a;r+=1){for(n=this.stylesList[r],s=!1,o.length=0,t=0;t<i;t+=1)-1!==(e=this.shapes[t]).styles.indexOf(n)&&(o.push(e),s=e._isAnimated||s);o.length>1&&s&&this.setShapesAsAnimated(o)}},SVGShapeElement.prototype.setShapesAsAnimated=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(t,e){var r,n=new SVGStyleData(t,e),i=n.pElem;return"st"===t.ty?r=new SVGStrokeStyleData(this,t,n):"fl"===t.ty?r=new SVGFillStyleData(this,t,n):"gf"===t.ty||"gs"===t.ty?(r=new("gf"===t.ty?SVGGradientFillStyleData:SVGGradientStrokeStyleData)(this,t,n),this.globalData.defs.appendChild(r.gf),r.maskId&&(this.globalData.defs.appendChild(r.ms),this.globalData.defs.appendChild(r.of),i.setAttribute("mask","url("+getLocationHref()+"#"+r.maskId+")"))):"no"===t.ty&&(r=new SVGNoStyleData(this,t,n)),"st"!==t.ty&&"gs"!==t.ty||(i.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),i.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),i.setAttribute("fill-opacity","0"),1===t.lj&&i.setAttribute("stroke-miterlimit",t.ml)),2===t.r&&i.setAttribute("fill-rule","evenodd"),t.ln&&i.setAttribute("id",t.ln),t.cl&&i.setAttribute("class",t.cl),t.bm&&(i.style["mix-blend-mode"]=getBlendMode(t.bm)),this.stylesList.push(n),this.addToAnimatedContents(t,r),r},SVGShapeElement.prototype.createGroupElement=function(t){var e=new ShapeGroupData;return t.ln&&e.gr.setAttribute("id",t.ln),t.cl&&e.gr.setAttribute("class",t.cl),t.bm&&(e.gr.style["mix-blend-mode"]=getBlendMode(t.bm)),e},SVGShapeElement.prototype.createTransformElement=function(t,e){var r=TransformPropertyFactory.getTransformProperty(this,t,this),n=new SVGTransformData(r,r.o,e);return this.addToAnimatedContents(t,n),n},SVGShapeElement.prototype.createShapeElement=function(t,e,r){var n=4;"rc"===t.ty?n=5:"el"===t.ty?n=6:"sr"===t.ty&&(n=7);var i=new SVGShapeData(e,r,ShapePropertyFactory.getShapeProp(this,t,n,this));return this.shapes.push(i),this.addShapeToModifiers(i),this.addToAnimatedContents(t,i),i},SVGShapeElement.prototype.addToAnimatedContents=function(t,e){for(var r=0,n=this.animatedContents.length;r<n;){if(this.animatedContents[r].element===e)return;r+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(t),element:e,data:t})},SVGShapeElement.prototype.setElementStyles=function(t){var e,r=t.styles,n=this.stylesList.length;for(e=0;e<n;e+=1)this.stylesList[e].closed||r.push(this.stylesList[e])},SVGShapeElement.prototype.reloadShapes=function(){var t;this._isFirstFrame=!0;var e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(t,e,r,n,i,a,o){var s,l,c,h,u,f,p=[].concat(a),d=t.length-1,m=[],y=[];for(s=d;s>=0;s-=1){if((f=this.searchProcessedElement(t[s]))?e[s]=r[f-1]:t[s]._render=o,"fl"===t[s].ty||"st"===t[s].ty||"gf"===t[s].ty||"gs"===t[s].ty||"no"===t[s].ty)f?e[s].style.closed=!1:e[s]=this.createStyleElement(t[s],i),t[s]._render&&e[s].style.pElem.parentNode!==n&&n.appendChild(e[s].style.pElem),m.push(e[s].style);else if("gr"===t[s].ty){if(f)for(c=e[s].it.length,l=0;l<c;l+=1)e[s].prevViewData[l]=e[s].it[l];else e[s]=this.createGroupElement(t[s]);this.searchShapes(t[s].it,e[s].it,e[s].prevViewData,e[s].gr,i+1,p,o),t[s]._render&&e[s].gr.parentNode!==n&&n.appendChild(e[s].gr)}else"tr"===t[s].ty?(f||(e[s]=this.createTransformElement(t[s],n)),h=e[s].transform,p.push(h)):"sh"===t[s].ty||"rc"===t[s].ty||"el"===t[s].ty||"sr"===t[s].ty?(f||(e[s]=this.createShapeElement(t[s],p,i)),this.setElementStyles(e[s])):"tm"===t[s].ty||"rd"===t[s].ty||"ms"===t[s].ty||"pb"===t[s].ty||"zz"===t[s].ty||"op"===t[s].ty?(f?(u=e[s]).closed=!1:((u=ShapeModifiers.getModifier(t[s].ty)).init(this,t[s]),e[s]=u,this.shapeModifiers.push(u)),y.push(u)):"rp"===t[s].ty&&(f?(u=e[s]).closed=!0:(u=ShapeModifiers.getModifier(t[s].ty),e[s]=u,u.init(this,t,s,e),this.shapeModifiers.push(u),o=!1),y.push(u));this.addProcessedElement(t[s],s+1)}for(d=m.length,s=0;s<d;s+=1)m[s].closed=!0;for(d=y.length,s=0;s<d;s+=1)y[s].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){var t;this.renderModifiers();var e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].reset();for(this.renderShape(),t=0;t<e;t+=1)(this.stylesList[t]._mdf||this._isFirstFrame)&&(this.stylesList[t].msElem&&(this.stylesList[t].msElem.setAttribute("d",this.stylesList[t].d),this.stylesList[t].d="M0 0"+this.stylesList[t].d),this.stylesList[t].pElem.setAttribute("d",this.stylesList[t].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var t,e,r=this.animatedContents.length;for(t=0;t<r;t+=1)e=this.animatedContents[t],(this._isFirstFrame||e.element._isAnimated)&&!0!==e.data&&e.fn(e.data,e.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null},LetterProps.prototype.update=function(t,e,r,n,i,a){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var o=!1;return this.o!==t&&(this.o=t,this._mdf.o=!0,o=!0),this.sw!==e&&(this.sw=e,this._mdf.sw=!0,o=!0),this.sc!==r&&(this.sc=r,this._mdf.sc=!0,o=!0),this.fc!==n&&(this.fc=n,this._mdf.fc=!0,o=!0),this.m!==i&&(this.m=i,this._mdf.m=!0,o=!0),!a.length||this.p[0]===a[0]&&this.p[1]===a[1]&&this.p[4]===a[4]&&this.p[5]===a[5]&&this.p[12]===a[12]&&this.p[13]===a[13]||(this.p=a,this._mdf.p=!0,o=!0),o},TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},TextProperty.prototype.setCurrentData=function(t){t.__complete||this.completeTextData(t),this.currentData=t,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(t){this.effectsSequence.push(t),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(t){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length||t){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var e=this.currentData,r=this.keysIndex;if(this.lock)this.setCurrentData(this.currentData);else{var n;this.lock=!0,this._mdf=!1;var i=this.effectsSequence.length,a=t||this.data.d.k[this.keysIndex].s;for(n=0;n<i;n+=1)a=r!==this.keysIndex?this.effectsSequence[n](a,a.t):this.effectsSequence[n](this.currentData,a.t);e!==a&&this.setCurrentData(a),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}}},TextProperty.prototype.getKeyframeValue=function(){for(var t=this.data.d.k,e=this.elem.comp.renderedFrame,r=0,n=t.length;r<=n-1&&!(r===n-1||t[r+1].t>e);)r+=1;return this.keysIndex!==r&&(this.keysIndex=r),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(t){for(var e,r,n=[],i=0,a=t.length,o=!1,s=!1,l="";i<a;)o=s,s=!1,e=t.charCodeAt(i),l=t.charAt(i),FontManager.isCombinedCharacter(e)?o=!0:e>=55296&&e<=56319?FontManager.isRegionalFlag(t,i)?l=t.substr(i,14):(r=t.charCodeAt(i+1))>=56320&&r<=57343&&(FontManager.isModifier(e,r)?(l=t.substr(i,2),o=!0):l=FontManager.isFlagEmoji(t.substr(i,4))?t.substr(i,4):t.substr(i,2)):e>56319?(r=t.charCodeAt(i+1),FontManager.isVariationSelector(e)&&(o=!0)):FontManager.isZeroWidthJoiner(e)&&(o=!0,s=!0),o?(n[n.length-1]+=l,o=!1):n.push(l),i+=l.length;return n},TextProperty.prototype.completeTextData=function(t){t.__complete=!0;var e,r,n,i,a,o,s,l=this.elem.globalData.fontManager,c=this.data,h=[],u=0,f=c.m.g,p=0,d=0,m=0,y=[],v=0,g=0,b=l.getFontByName(t.f),x=0,w=getFontProperties(b);t.fWeight=w.weight,t.fStyle=w.style,t.finalSize=t.s,t.finalText=this.buildFinalText(t.t),r=t.finalText.length,t.finalLineHeight=t.lh;var E,k=t.tr/1e3*t.finalSize;if(t.sz)for(var S,_,P=!0,C=t.sz[0],A=t.sz[1];P;){S=0,v=0,r=(_=this.buildFinalText(t.t)).length,k=t.tr/1e3*t.finalSize;var T=-1;for(e=0;e<r;e+=1)E=_[e].charCodeAt(0),n=!1," "===_[e]?T=e:13!==E&&3!==E||(v=0,n=!0,S+=t.finalLineHeight||1.2*t.finalSize),l.chars?(s=l.getCharData(_[e],b.fStyle,b.fFamily),x=n?0:s.w*t.finalSize/100):x=l.measureText(_[e],t.f,t.finalSize),v+x>C&&" "!==_[e]?(-1===T?r+=1:e=T,S+=t.finalLineHeight||1.2*t.finalSize,_.splice(e,T===e?1:0,"\r"),T=-1,v=0):(v+=x,v+=k);S+=b.ascent*t.finalSize/100,this.canResize&&t.finalSize>this.minimumFontSize&&A<S?(t.finalSize-=1,t.finalLineHeight=t.finalSize*t.lh/t.s):(t.finalText=_,r=t.finalText.length,P=!1)}v=-k,x=0;var M,D=0;for(e=0;e<r;e+=1)if(n=!1,13===(E=(M=t.finalText[e]).charCodeAt(0))||3===E?(D=0,y.push(v),g=v>g?v:g,v=-2*k,i="",n=!0,m+=1):i=M,l.chars?(s=l.getCharData(M,b.fStyle,l.getFontByName(t.f).fFamily),x=n?0:s.w*t.finalSize/100):x=l.measureText(i,t.f,t.finalSize)," "===M?D+=x+k:(v+=x+k+D,D=0),h.push({l:x,an:x,add:p,n,anIndexes:[],val:i,line:m,animatorJustifyOffset:0}),2==f){if(p+=x,""===i||" "===i||e===r-1){for(""!==i&&" "!==i||(p-=x);d<=e;)h[d].an=p,h[d].ind=u,h[d].extra=x,d+=1;u+=1,p=0}}else if(3==f){if(p+=x,""===i||e===r-1){for(""===i&&(p-=x);d<=e;)h[d].an=p,h[d].ind=u,h[d].extra=x,d+=1;p=0,u+=1}}else h[u].ind=u,h[u].extra=0,u+=1;if(t.l=h,g=v>g?v:g,y.push(v),t.sz)t.boxWidth=t.sz[0],t.justifyOffset=0;else switch(t.boxWidth=g,t.j){case 1:t.justifyOffset=-t.boxWidth;break;case 2:t.justifyOffset=-t.boxWidth/2;break;default:t.justifyOffset=0}t.lineWidths=y;var L,F,O,I,j=c.a;o=j.length;var R=[];for(a=0;a<o;a+=1){for((L=j[a]).a.sc&&(t.strokeColorAnim=!0),L.a.sw&&(t.strokeWidthAnim=!0),(L.a.fc||L.a.fh||L.a.fs||L.a.fb)&&(t.fillColorAnim=!0),I=0,O=L.s.b,e=0;e<r;e+=1)(F=h[e]).anIndexes[a]=I,(1==O&&""!==F.val||2==O&&""!==F.val&&" "!==F.val||3==O&&(F.n||" "==F.val||e==r-1)||4==O&&(F.n||e==r-1))&&(1===L.s.rn&&R.push(I),I+=1);c.a[a].s.totalChars=I;var N,B=-1;if(1===L.s.rn)for(e=0;e<r;e+=1)B!=(F=h[e]).anIndexes[a]&&(B=F.anIndexes[a],N=R.splice(Math.floor(Math.random()*R.length),1)[0]),F.anIndexes[a]=N}t.yOffset=t.finalLineHeight||1.2*t.finalSize,t.ls=t.ls||0,t.ascent=b.ascent*t.finalSize/100},TextProperty.prototype.updateDocumentData=function(t,e){e=void 0===e?this.keysIndex:e;var r=this.copyData({},this.data.d.k[e].s);r=this.copyData(r,t),this.data.d.k[e].s=r,this.recalculate(e),this.setCurrentData(r),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(t){var e=this.data.d.k[t].s;e.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(e)},TextProperty.prototype.canResizeFont=function(t){this.canResize=t,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(t){this.minimumFontSize=Math.floor(t)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var t=Math.max,e=Math.min,r=Math.floor;function n(t,e){this._currentTextLength=-1,this.k=!1,this.data=e,this.elem=t,this.comp=t.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(t),this.s=PropertyFactory.getProp(t,e.s||{k:0},0,0,this),this.e="e"in e?PropertyFactory.getProp(t,e.e,0,0,this):{v:100},this.o=PropertyFactory.getProp(t,e.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(t,e.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(t,e.ne||{k:0},0,0,this),this.sm=PropertyFactory.getProp(t,e.sm||{k:100},0,0,this),this.a=PropertyFactory.getProp(t,e.a,0,.01,this),this.dynamicProperties.length||this.getValue()}return n.prototype={getMult:function(n){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var i=0,a=0,o=1,s=1;this.ne.v>0?i=this.ne.v/100:a=-this.ne.v/100,this.xe.v>0?o=1-this.xe.v/100:s=1+this.xe.v/100;var l=BezierFactory.getBezierEasing(i,a,o,s).get,c=0,h=this.finalS,u=this.finalE,f=this.data.sh;if(2===f)c=l(c=u===h?n>=u?1:0:t(0,e(.5/(u-h)+(n-h)/(u-h),1)));else if(3===f)c=l(c=u===h?n>=u?0:1:1-t(0,e(.5/(u-h)+(n-h)/(u-h),1)));else if(4===f)u===h?c=0:(c=t(0,e(.5/(u-h)+(n-h)/(u-h),1)))<.5?c*=2:c=1-2*(c-.5),c=l(c);else if(5===f){if(u===h)c=0;else{var p=u-h,d=-p/2+(n=e(t(0,n+.5-h),u-h)),m=p/2;c=Math.sqrt(1-d*d/(m*m))}c=l(c)}else 6===f?(u===h?c=0:(n=e(t(0,n+.5-h),u-h),c=(1+Math.cos(Math.PI+2*Math.PI*n/(u-h)))/2),c=l(c)):(n>=r(h)&&(c=t(0,e(n-h<0?e(u,1)-(h-n):u-n,1))),c=l(c));if(100!==this.sm.v){var y=.01*this.sm.v;0===y&&(y=1e-8);var v=.5-.5*y;c<v?c=0:(c=(c-v)/y)>1&&(c=1)}return c*this.a.v},getValue:function(t){this.iterateDynamicProperties(),this._mdf=t||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,t&&2===this.data.r&&(this.e.v=this._currentTextLength);var e=2===this.data.r?1:100/this.data.totalChars,r=this.o.v/e,n=this.s.v/e+r,i=this.e.v/e+r;if(n>i){var a=n;n=i,i=a}this.finalS=n,this.finalE=i}},extendPrototype([DynamicPropertyContainer],n),{getTextSelectorProp:function(t,e,r){return new n(t,e,r)}}}();function TextAnimatorDataProperty(t,e,r){var n={propType:!1},i=PropertyFactory.getProp,a=e.a;this.a={r:a.r?i(t,a.r,0,degToRads,r):n,rx:a.rx?i(t,a.rx,0,degToRads,r):n,ry:a.ry?i(t,a.ry,0,degToRads,r):n,sk:a.sk?i(t,a.sk,0,degToRads,r):n,sa:a.sa?i(t,a.sa,0,degToRads,r):n,s:a.s?i(t,a.s,1,.01,r):n,a:a.a?i(t,a.a,1,0,r):n,o:a.o?i(t,a.o,0,.01,r):n,p:a.p?i(t,a.p,1,0,r):n,sw:a.sw?i(t,a.sw,0,0,r):n,sc:a.sc?i(t,a.sc,1,0,r):n,fc:a.fc?i(t,a.fc,1,0,r):n,fh:a.fh?i(t,a.fh,0,0,r):n,fs:a.fs?i(t,a.fs,0,.01,r):n,fb:a.fb?i(t,a.fb,0,.01,r):n,t:a.t?i(t,a.t,0,0,r):n},this.s=TextSelectorProp.getTextSelectorProp(t,e.s,r),this.s.t=e.s.t}function TextAnimatorProperty(t,e,r){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=t,this._renderType=e,this._elem=r,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(r)}function ITextElement(){}TextAnimatorProperty.prototype.searchProperties=function(){var t,e,r=this._textData.a.length,n=PropertyFactory.getProp;for(t=0;t<r;t+=1)e=this._textData.a[t],this._animatorsData[t]=new TextAnimatorDataProperty(this._elem,e,this);this._textData.p&&"m"in this._textData.p?(this._pathData={a:n(this._elem,this._textData.p.a,0,0,this),f:n(this._elem,this._textData.p.f,0,0,this),l:n(this._elem,this._textData.p.l,0,0,this),r:n(this._elem,this._textData.p.r,0,0,this),p:n(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=n(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(t,e){if(this.lettersChangedFlag=e,this._mdf||this._isFirstFrame||e||this._hasMaskedPath&&this._pathData.m._mdf){this._isFirstFrame=!1;var r,n,i,a,o,s,l,c,h,u,f,p,d,m,y,v,g,b,x,w=this._moreOptions.alignment.v,E=this._animatorsData,k=this._textData,S=this.mHelper,_=this._renderType,P=this.renderedLetters.length,C=t.l;if(this._hasMaskedPath){if(x=this._pathData.m,!this._pathData.n||this._pathData._mdf){var A,T=x.v;for(this._pathData.r.v&&(T=T.reverse()),o={tLength:0,segments:[]},a=T._length-1,v=0,i=0;i<a;i+=1)A=bez.buildBezierData(T.v[i],T.v[i+1],[T.o[i][0]-T.v[i][0],T.o[i][1]-T.v[i][1]],[T.i[i+1][0]-T.v[i+1][0],T.i[i+1][1]-T.v[i+1][1]]),o.tLength+=A.segmentLength,o.segments.push(A),v+=A.segmentLength;i=a,x.v.c&&(A=bez.buildBezierData(T.v[i],T.v[0],[T.o[i][0]-T.v[i][0],T.o[i][1]-T.v[i][1]],[T.i[0][0]-T.v[0][0],T.i[0][1]-T.v[0][1]]),o.tLength+=A.segmentLength,o.segments.push(A),v+=A.segmentLength),this._pathData.pi=o}if(o=this._pathData.pi,s=this._pathData.f.v,f=0,u=1,c=0,h=!0,m=o.segments,s<0&&x.v.c)for(o.tLength<Math.abs(s)&&(s=-Math.abs(s)%o.tLength),u=(d=m[f=m.length-1].points).length-1;s<0;)s+=d[u].partialLength,(u-=1)<0&&(u=(d=m[f-=1].points).length-1);p=(d=m[f].points)[u-1],y=(l=d[u]).partialLength}a=C.length,r=0,n=0;var M,D,L,F,O,I=1.2*t.finalSize*.714,j=!0;L=E.length;var R,N,B,V,G,z,H,$,U,q,W,Y,X=-1,K=s,J=f,Z=u,Q=-1,tt="",et=this.defaultPropsArray;if(2===t.j||1===t.j){var rt=0,nt=0,it=2===t.j?-.5:-1,at=0,ot=!0;for(i=0;i<a;i+=1)if(C[i].n){for(rt&&(rt+=nt);at<i;)C[at].animatorJustifyOffset=rt,at+=1;rt=0,ot=!0}else{for(D=0;D<L;D+=1)(M=E[D].a).t.propType&&(ot&&2===t.j&&(nt+=M.t.v*it),(O=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?rt+=M.t.v*O[0]*it:rt+=M.t.v*O*it);ot=!1}for(rt&&(rt+=nt);at<i;)C[at].animatorJustifyOffset=rt,at+=1}for(i=0;i<a;i+=1){if(S.reset(),V=1,C[i].n)r=0,n+=t.yOffset,n+=j?1:0,s=K,j=!1,this._hasMaskedPath&&(u=Z,p=(d=m[f=J].points)[u-1],y=(l=d[u]).partialLength,c=0),tt="",W="",U="",Y="",et=this.defaultPropsArray;else{if(this._hasMaskedPath){if(Q!==C[i].line){switch(t.j){case 1:s+=v-t.lineWidths[C[i].line];break;case 2:s+=(v-t.lineWidths[C[i].line])/2}Q=C[i].line}X!==C[i].ind&&(C[X]&&(s+=C[X].extra),s+=C[i].an/2,X=C[i].ind),s+=w[0]*C[i].an*.005;var st=0;for(D=0;D<L;D+=1)(M=E[D].a).p.propType&&((O=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?st+=M.p.v[0]*O[0]:st+=M.p.v[0]*O),M.a.propType&&((O=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?st+=M.a.v[0]*O[0]:st+=M.a.v[0]*O);for(h=!0,this._pathData.a.v&&(s=.5*C[0].an+(v-this._pathData.f.v-.5*C[0].an-.5*C[C.length-1].an)*X/(a-1),s+=this._pathData.f.v);h;)c+y>=s+st||!d?(g=(s+st-c)/l.partialLength,N=p.point[0]+(l.point[0]-p.point[0])*g,B=p.point[1]+(l.point[1]-p.point[1])*g,S.translate(-w[0]*C[i].an*.005,-w[1]*I*.01),h=!1):d&&(c+=l.partialLength,(u+=1)>=d.length&&(u=0,m[f+=1]?d=m[f].points:x.v.c?(u=0,d=m[f=0].points):(c-=l.partialLength,d=null)),d&&(p=l,y=(l=d[u]).partialLength));R=C[i].an/2-C[i].add,S.translate(-R,0,0)}else R=C[i].an/2-C[i].add,S.translate(-R,0,0),S.translate(-w[0]*C[i].an*.005,-w[1]*I*.01,0);for(D=0;D<L;D+=1)(M=E[D].a).t.propType&&(O=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars),0===r&&0===t.j||(this._hasMaskedPath?O.length?s+=M.t.v*O[0]:s+=M.t.v*O:O.length?r+=M.t.v*O[0]:r+=M.t.v*O));for(t.strokeWidthAnim&&(z=t.sw||0),t.strokeColorAnim&&(G=t.sc?[t.sc[0],t.sc[1],t.sc[2]]:[0,0,0]),t.fillColorAnim&&t.fc&&(H=[t.fc[0],t.fc[1],t.fc[2]]),D=0;D<L;D+=1)(M=E[D].a).a.propType&&((O=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?S.translate(-M.a.v[0]*O[0],-M.a.v[1]*O[1],M.a.v[2]*O[2]):S.translate(-M.a.v[0]*O,-M.a.v[1]*O,M.a.v[2]*O));for(D=0;D<L;D+=1)(M=E[D].a).s.propType&&((O=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?S.scale(1+(M.s.v[0]-1)*O[0],1+(M.s.v[1]-1)*O[1],1):S.scale(1+(M.s.v[0]-1)*O,1+(M.s.v[1]-1)*O,1));for(D=0;D<L;D+=1){if(M=E[D].a,O=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars),M.sk.propType&&(O.length?S.skewFromAxis(-M.sk.v*O[0],M.sa.v*O[1]):S.skewFromAxis(-M.sk.v*O,M.sa.v*O)),M.r.propType&&(O.length?S.rotateZ(-M.r.v*O[2]):S.rotateZ(-M.r.v*O)),M.ry.propType&&(O.length?S.rotateY(M.ry.v*O[1]):S.rotateY(M.ry.v*O)),M.rx.propType&&(O.length?S.rotateX(M.rx.v*O[0]):S.rotateX(M.rx.v*O)),M.o.propType&&(O.length?V+=(M.o.v*O[0]-V)*O[0]:V+=(M.o.v*O-V)*O),t.strokeWidthAnim&&M.sw.propType&&(O.length?z+=M.sw.v*O[0]:z+=M.sw.v*O),t.strokeColorAnim&&M.sc.propType)for($=0;$<3;$+=1)O.length?G[$]+=(M.sc.v[$]-G[$])*O[0]:G[$]+=(M.sc.v[$]-G[$])*O;if(t.fillColorAnim&&t.fc){if(M.fc.propType)for($=0;$<3;$+=1)O.length?H[$]+=(M.fc.v[$]-H[$])*O[0]:H[$]+=(M.fc.v[$]-H[$])*O;M.fh.propType&&(H=O.length?addHueToRGB(H,M.fh.v*O[0]):addHueToRGB(H,M.fh.v*O)),M.fs.propType&&(H=O.length?addSaturationToRGB(H,M.fs.v*O[0]):addSaturationToRGB(H,M.fs.v*O)),M.fb.propType&&(H=O.length?addBrightnessToRGB(H,M.fb.v*O[0]):addBrightnessToRGB(H,M.fb.v*O))}}for(D=0;D<L;D+=1)(M=E[D].a).p.propType&&(O=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars),this._hasMaskedPath?O.length?S.translate(0,M.p.v[1]*O[0],-M.p.v[2]*O[1]):S.translate(0,M.p.v[1]*O,-M.p.v[2]*O):O.length?S.translate(M.p.v[0]*O[0],M.p.v[1]*O[1],-M.p.v[2]*O[2]):S.translate(M.p.v[0]*O,M.p.v[1]*O,-M.p.v[2]*O));if(t.strokeWidthAnim&&(U=z<0?0:z),t.strokeColorAnim&&(q="rgb("+Math.round(255*G[0])+","+Math.round(255*G[1])+","+Math.round(255*G[2])+")"),t.fillColorAnim&&t.fc&&(W="rgb("+Math.round(255*H[0])+","+Math.round(255*H[1])+","+Math.round(255*H[2])+")"),this._hasMaskedPath){if(S.translate(0,-t.ls),S.translate(0,w[1]*I*.01+n,0),this._pathData.p.v){b=(l.point[1]-p.point[1])/(l.point[0]-p.point[0]);var lt=180*Math.atan(b)/Math.PI;l.point[0]<p.point[0]&&(lt+=180),S.rotate(-lt*Math.PI/180)}S.translate(N,B,0),s-=w[0]*C[i].an*.005,C[i+1]&&X!==C[i+1].ind&&(s+=C[i].an/2,s+=.001*t.tr*t.finalSize)}else{switch(S.translate(r,n,0),t.ps&&S.translate(t.ps[0],t.ps[1]+t.ascent,0),t.j){case 1:S.translate(C[i].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[C[i].line]),0,0);break;case 2:S.translate(C[i].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[C[i].line])/2,0,0)}S.translate(0,-t.ls),S.translate(R,0,0),S.translate(w[0]*C[i].an*.005,w[1]*I*.01,0),r+=C[i].l+.001*t.tr*t.finalSize}"html"===_?tt=S.toCSS():"svg"===_?tt=S.to2dCSS():et=[S.props[0],S.props[1],S.props[2],S.props[3],S.props[4],S.props[5],S.props[6],S.props[7],S.props[8],S.props[9],S.props[10],S.props[11],S.props[12],S.props[13],S.props[14],S.props[15]],Y=V}P<=i?(F=new LetterProps(Y,U,q,W,tt,et),this.renderedLetters.push(F),P+=1,this.lettersChangedFlag=!0):(F=this.renderedLetters[i],this.lettersChangedFlag=F.update(Y,U,q,W,tt,et)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty),ITextElement.prototype.initElement=function(t,e,r){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(t,e,r),this.textProperty=new TextProperty(this,t.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(t.t,this.renderType,this),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)},ITextElement.prototype.createPathShape=function(t,e){var r,n,i=e.length,a="";for(r=0;r<i;r+=1)"sh"===e[r].ty&&(n=e[r].ks.k,a+=buildShapeString(n,n.i.length,!0,t));return a},ITextElement.prototype.updateDocumentData=function(t,e){this.textProperty.updateDocumentData(t,e)},ITextElement.prototype.canResizeFont=function(t){this.textProperty.canResizeFont(t)},ITextElement.prototype.setMinimumFontSize=function(t){this.textProperty.setMinimumFontSize(t)},ITextElement.prototype.applyTextPropertiesToMatrix=function(t,e,r,n,i){switch(t.ps&&e.translate(t.ps[0],t.ps[1]+t.ascent,0),e.translate(0,-t.ls,0),t.j){case 1:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r]),0,0);break;case 2:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r])/2,0,0)}e.translate(n,i,0)},ITextElement.prototype.buildColor=function(t){return"rgb("+Math.round(255*t[0])+","+Math.round(255*t[1])+","+Math.round(255*t[2])+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){},ITextElement.prototype.validateText=function(){(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)};var emptyShapeData={shapes:[]};function SVGTextLottieElement(t,e,r){this.textSpans=[],this.renderType="svg",this.initElement(t,e,r)}function ISolidElement(t,e,r){this.initElement(t,e,r)}function NullElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initFrame(),this.initTransform(t,e,r),this.initHierarchy()}function SVGRendererBase(){}function ICompElement(){}function SVGCompElement(t,e,r){this.layers=t.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function SVGRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var r="";if(e&&e.title){var n=createNS("title"),i=createElementID();n.setAttribute("id",i),n.textContent=e.title,this.svgElement.appendChild(n),r+=i}if(e&&e.description){var a=createNS("desc"),o=createElementID();a.setAttribute("id",o),a.textContent=e.description,this.svgElement.appendChild(a),r+=" "+o}r&&this.svgElement.setAttribute("aria-labelledby",r);var s=createNS("defs");this.svgElement.appendChild(s);var l=createNS("g");this.svgElement.appendChild(l),this.layerElement=l,this.renderConfig={preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",progressiveLoad:e&&e.progressiveLoad||!1,hideOnTransparent:!(e&&!1===e.hideOnTransparent),viewBoxOnly:e&&e.viewBoxOnly||!1,viewBoxSize:e&&e.viewBoxSize||!1,className:e&&e.className||"",id:e&&e.id||"",focusable:e&&e.focusable,filterSize:{width:e&&e.filterSize&&e.filterSize.width||"100%",height:e&&e.filterSize&&e.filterSize.height||"100%",x:e&&e.filterSize&&e.filterSize.x||"0%",y:e&&e.filterSize&&e.filterSize.y||"0%"},width:e&&e.width,height:e&&e.height,runExpressions:!e||void 0===e.runExpressions||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,defs:s,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(t){for(var e=0,r=t.length,n=[],i="";e<r;)t[e]===String.fromCharCode(13)||t[e]===String.fromCharCode(3)?(n.push(i),i=""):i+=t[e],e+=1;return n.push(i),n},SVGTextLottieElement.prototype.buildShapeData=function(t,e){if(t.shapes&&t.shapes.length){var r=t.shapes[0];if(r.it){var n=r.it[r.it.length-1];n.s&&(n.s.k[0]=e,n.s.k[1]=e)}}return t},SVGTextLottieElement.prototype.buildNewText=function(){var t,e;this.addDynamicProperty(this);var r=this.textProperty.currentData;this.renderedLetters=createSizedArray(r?r.l.length:0),r.fc?this.layerElement.setAttribute("fill",this.buildColor(r.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),r.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(r.sc)),this.layerElement.setAttribute("stroke-width",r.sw)),this.layerElement.setAttribute("font-size",r.finalSize);var n=this.globalData.fontManager.getFontByName(r.f);if(n.fClass)this.layerElement.setAttribute("class",n.fClass);else{this.layerElement.setAttribute("font-family",n.fFamily);var i=r.fWeight,a=r.fStyle;this.layerElement.setAttribute("font-style",a),this.layerElement.setAttribute("font-weight",i)}this.layerElement.setAttribute("aria-label",r.t);var o,s=r.l||[],l=!!this.globalData.fontManager.chars;e=s.length;var c=this.mHelper,h=this.data.singleShape,u=0,f=0,p=!0,d=.001*r.tr*r.finalSize;if(!h||l||r.sz){var m,y=this.textSpans.length;for(t=0;t<e;t+=1){if(this.textSpans[t]||(this.textSpans[t]={span:null,childSpan:null,glyph:null}),!l||!h||0===t){if(o=y>t?this.textSpans[t].span:createNS(l?"g":"text"),y<=t){if(o.setAttribute("stroke-linecap","butt"),o.setAttribute("stroke-linejoin","round"),o.setAttribute("stroke-miterlimit","4"),this.textSpans[t].span=o,l){var v=createNS("g");o.appendChild(v),this.textSpans[t].childSpan=v}this.textSpans[t].span=o,this.layerElement.appendChild(o)}o.style.display="inherit"}if(c.reset(),h&&(s[t].n&&(u=-d,f+=r.yOffset,f+=p?1:0,p=!1),this.applyTextPropertiesToMatrix(r,c,s[t].line,u,f),u+=s[t].l||0,u+=d),l){var g;if(1===(m=this.globalData.fontManager.getCharData(r.finalText[t],n.fStyle,this.globalData.fontManager.getFontByName(r.f).fFamily)).t)g=new SVGCompElement(m.data,this.globalData,this);else{var b=emptyShapeData;m.data&&m.data.shapes&&(b=this.buildShapeData(m.data,r.finalSize)),g=new SVGShapeElement(b,this.globalData,this)}if(this.textSpans[t].glyph){var x=this.textSpans[t].glyph;this.textSpans[t].childSpan.removeChild(x.layerElement),x.destroy()}this.textSpans[t].glyph=g,g._debug=!0,g.prepareFrame(0),g.renderFrame(),this.textSpans[t].childSpan.appendChild(g.layerElement),1===m.t&&this.textSpans[t].childSpan.setAttribute("transform","scale("+r.finalSize/100+","+r.finalSize/100+")")}else h&&o.setAttribute("transform","translate("+c.props[12]+","+c.props[13]+")"),o.textContent=s[t].val,o.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve")}h&&o&&o.setAttribute("d","")}else{var w=this.textContainer,E="start";switch(r.j){case 1:E="end";break;case 2:E="middle";break;default:E="start"}w.setAttribute("text-anchor",E),w.setAttribute("letter-spacing",d);var k=this.buildTextContents(r.finalText);for(e=k.length,f=r.ps?r.ps[1]+r.ascent:0,t=0;t<e;t+=1)(o=this.textSpans[t].span||createNS("tspan")).textContent=k[t],o.setAttribute("x",0),o.setAttribute("y",f),o.style.display="inherit",w.appendChild(o),this.textSpans[t]||(this.textSpans[t]={span:null,glyph:null}),this.textSpans[t].span=o,f+=r.finalLineHeight;this.layerElement.appendChild(w)}for(;t<this.textSpans.length;)this.textSpans[t].span.style.display="none",t+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var t=this.layerElement.getBBox();this.bbox={top:t.y,left:t.x,width:t.width,height:t.height}}return this.bbox},SVGTextLottieElement.prototype.getValue=function(){var t,e,r=this.textSpans.length;for(this.renderedFrame=this.comp.renderedFrame,t=0;t<r;t+=1)(e=this.textSpans[t].glyph)&&(e.prepareFrame(this.comp.renderedFrame-this.data.st),e._mdf&&(this._mdf=!0))},SVGTextLottieElement.prototype.renderInnerContent=function(){if(this.validateText(),(!this.data.singleShape||this._mdf)&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){var t,e;this._sizeChanged=!0;var r,n,i,a=this.textAnimator.renderedLetters,o=this.textProperty.currentData.l;for(e=o.length,t=0;t<e;t+=1)o[t].n||(r=a[t],n=this.textSpans[t].span,(i=this.textSpans[t].glyph)&&i.renderFrame(),r._mdf.m&&n.setAttribute("transform",r.m),r._mdf.o&&n.setAttribute("opacity",r.o),r._mdf.sw&&n.setAttribute("stroke-width",r.sw),r._mdf.sc&&n.setAttribute("stroke",r.sc),r._mdf.fc&&n.setAttribute("fill",r.fc))}},extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var t=createNS("rect");t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.layerElement.appendChild(t)},NullElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement),extendPrototype([BaseRenderer],SVGRendererBase),SVGRendererBase.prototype.createNull=function(t){return new NullElement(t,this.globalData,this)},SVGRendererBase.prototype.createShape=function(t){return new SVGShapeElement(t,this.globalData,this)},SVGRendererBase.prototype.createText=function(t){return new SVGTextLottieElement(t,this.globalData,this)},SVGRendererBase.prototype.createImage=function(t){return new IImageElement(t,this.globalData,this)},SVGRendererBase.prototype.createSolid=function(t){return new ISolidElement(t,this.globalData,this)},SVGRendererBase.prototype.configAnimation=function(t){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.svgElement.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+t.w+" "+t.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",t.w),this.svgElement.setAttribute("height",t.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)",this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility),this.renderConfig.width&&this.svgElement.setAttribute("width",this.renderConfig.width),this.renderConfig.height&&this.svgElement.setAttribute("height",this.renderConfig.height),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),void 0!==this.renderConfig.focusable&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var e=this.globalData.defs;this.setupGlobalData(t,e),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=t;var r=createNS("clipPath"),n=createNS("rect");n.setAttribute("width",t.w),n.setAttribute("height",t.h),n.setAttribute("x",0),n.setAttribute("y",0);var i=createElementID();r.setAttribute("id",i),r.appendChild(n),this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+i+")"),e.appendChild(r),this.layers=t.layers,this.elements=createSizedArray(t.layers.length)},SVGRendererBase.prototype.destroy=function(){var t;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRendererBase.prototype.updateContainerSize=function(){},SVGRendererBase.prototype.findIndexByInd=function(t){var e=0,r=this.layers.length;for(e=0;e<r;e+=1)if(this.layers[e].ind===t)return e;return-1},SVGRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!e[t]&&99!==this.layers[t].ty){e[t]=!0;var r=this.createItem(this.layers[t]);if(e[t]=r,getExpressionsPlugin()&&(0===this.layers[t].ty&&this.globalData.projectInterface.registerComposition(r),r.initExpressions()),this.appendElementInPos(r,t),this.layers[t].tt){var n="tp"in this.layers[t]?this.findIndexByInd(this.layers[t].tp):t-1;if(-1===n)return;if(this.elements[n]&&!0!==this.elements[n]){var i=e[n].getMatte(this.layers[t].tt);r.setMatte(i)}else this.buildItem(n),this.addPendingElement(r)}}},SVGRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();if(t.checkParenting(),t.data.tt)for(var e=0,r=this.elements.length;e<r;){if(this.elements[e]===t){var n="tp"in t.data?this.findIndexByInd(t.data.tp):e-1,i=this.elements[n].getMatte(this.layers[e].tt);t.setMatte(i);break}e+=1}}},SVGRendererBase.prototype.renderFrame=function(t){if(this.renderedFrame!==t&&!this.destroyed){var e;null===t?t=this.renderedFrame:this.renderedFrame=t,this.globalData.frameNum=t,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=t,this.globalData._mdf=!1;var r=this.layers.length;for(this.completeLayers||this.checkLayers(t),e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].prepareFrame(t-this.layers[e].st);if(this.globalData._mdf)for(e=0;e<r;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()}},SVGRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){for(var n,i=0;i<e;)this.elements[i]&&!0!==this.elements[i]&&this.elements[i].getBaseElement()&&(n=this.elements[i].getBaseElement()),i+=1;n?this.layerElement.insertBefore(r,n):this.layerElement.appendChild(r)}},SVGRendererBase.prototype.hide=function(){this.layerElement.style.display="none"},SVGRendererBase.prototype.show=function(){this.layerElement.style.display="block"},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),!this.data.xt&&e.progressiveLoad||this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(t){if(this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),this.isInRange||this.data.xt){if(this.tm._placeholder)this.renderedFrame=t/this.data.sr;else{var e=this.tm.v;e===this.data.op&&(e=this.data.op-1),this.renderedFrame=e}var r,n=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&(this.elements[r].prepareFrame(this.renderedFrame-this.layers[r].st),this.elements[r]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},ICompElement.prototype.setElements=function(t){this.elements=t},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()},extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement),SVGCompElement.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)},extendPrototype([SVGRendererBase],SVGRenderer),SVGRenderer.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)},ShapeTransformManager.prototype={addTransformSequence:function(t){var e,r=t.length,n="_";for(e=0;e<r;e+=1)n+=t[e].transform.key+"_";var i=this.sequences[n];return i||(i={transforms:[].concat(t),finalTransform:new Matrix,_mdf:!1},this.sequences[n]=i,this.sequenceList.push(i)),i},processSequence:function(t,e){for(var r=0,n=t.transforms.length,i=e;r<n&&!e;){if(t.transforms[r].transform.mProps._mdf){i=!0;break}r+=1}if(i)for(t.finalTransform.reset(),r=n-1;r>=0;r-=1)t.finalTransform.multiply(t.transforms[r].transform.mProps.v);t._mdf=i},processSequences:function(t){var e,r=this.sequenceList.length;for(e=0;e<r;e+=1)this.processSequence(this.sequenceList[e],t)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}};var lumaLoader=function(){var t="__lottie_element_luma_buffer",e=null,r=null,n=null;function i(){var i,a,o;e||(i=createNS("svg"),a=createNS("filter"),o=createNS("feColorMatrix"),a.setAttribute("id",t),o.setAttribute("type","matrix"),o.setAttribute("color-interpolation-filters","sRGB"),o.setAttribute("values","0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0"),a.appendChild(o),i.appendChild(a),i.setAttribute("id",t+"_svg"),featureSupport.svgLumaHidden&&(i.style.display="none"),n=i,document.body.appendChild(n),e=createTag("canvas"),(r=e.getContext("2d")).filter="url(#"+t+")",r.fillStyle="rgba(0,0,0,0)",r.fillRect(0,0,1,1))}return{load:i,get:function(n){return e||i(),e.width=n.width,e.height=n.height,r.filter="url(#"+t+")",e}}};function createCanvas(t,e){if(featureSupport.offscreenCanvas)return new OffscreenCanvas(t,e);var r=createTag("canvas");return r.width=t,r.height=e,r}var assetLoader={loadLumaCanvas:lumaLoader.load,getLumaCanvas:lumaLoader.get,createCanvas},registeredEffects={};function CVEffects(t){var e,r,n=t.data.ef?t.data.ef.length:0;for(this.filters=[],e=0;e<n;e+=1){r=null;var i=t.data.ef[e].ty;registeredEffects[i]&&(r=new(0,registeredEffects[i].effect)(t.effectsManager.effectElements[e],t)),r&&this.filters.push(r)}this.filters.length&&t.addRenderableComponent(this)}function registerEffect(t,e){registeredEffects[t]={effect:e}}function CVMaskElement(t,e){var r;this.data=t,this.element=e,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var n=this.masksProperties.length,i=!1;for(r=0;r<n;r+=1)"n"!==this.masksProperties[r].mode&&(i=!0),this.viewData[r]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[r],3);this.hasMasks=i,i&&this.element.addRenderableComponent(this)}function CVBaseElement(){}CVEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},CVEffects.prototype.getEffects=function(t){var e,r=this.filters.length,n=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&n.push(this.filters[e]);return n},CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var t,e,r,n,i=this.element.finalTransform.mat,a=this.element.canvasContext,o=this.masksProperties.length;for(a.beginPath(),t=0;t<o;t+=1)if("n"!==this.masksProperties[t].mode){var s;this.masksProperties[t].inv&&(a.moveTo(0,0),a.lineTo(this.element.globalData.compSize.w,0),a.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),a.lineTo(0,this.element.globalData.compSize.h),a.lineTo(0,0)),n=this.viewData[t].v,e=i.applyToPointArray(n.v[0][0],n.v[0][1],0),a.moveTo(e[0],e[1]);var l=n._length;for(s=1;s<l;s+=1)r=i.applyToTriplePoints(n.o[s-1],n.i[s],n.v[s]),a.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5]);r=i.applyToTriplePoints(n.o[s-1],n.i[0],n.v[0]),a.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5])}this.element.globalData.renderer.save(!0),a.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null};var operationsMap={1:"source-in",2:"source-out",3:"source-in",4:"source-out"};function CVShapeData(t,e,r,n){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var i,a=4;"rc"===e.ty?a=5:"el"===e.ty?a=6:"sr"===e.ty&&(a=7),this.sh=ShapePropertyFactory.getShapeProp(t,e,a,t);var o,s=r.length;for(i=0;i<s;i+=1)r[i].closed||(o={transforms:n.addTransformSequence(r[i].transforms),trNodes:[]},this.styledShapes.push(o),r[i].elements.push(o))}function CVShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(t,e,r)}function CVTextElement(t,e,r){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(t,e,r)}function CVImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.img=e.imageLoader.getAsset(this.assetData),this.initElement(t,e,r)}function CVSolidElement(t,e,r){this.initElement(t,e,r)}function CanvasRendererBase(){}function CanvasContext(){this.opacity=-1,this.transform=createTypedArray("float32",16),this.fillStyle="",this.strokeStyle="",this.lineWidth="",this.lineCap="",this.lineJoin="",this.miterLimit="",this.id=Math.random()}function CVContextData(){var t;for(this.stack=[],this.cArrPos=0,this.cTr=new Matrix,t=0;t<15;t+=1){var e=new CanvasContext;this.stack[t]=e}this._length=15,this.nativeContext=null,this.transformMat=new Matrix,this.currentOpacity=1,this.currentFillStyle="",this.appliedFillStyle="",this.currentStrokeStyle="",this.appliedStrokeStyle="",this.currentLineWidth="",this.appliedLineWidth="",this.currentLineCap="",this.appliedLineCap="",this.currentLineJoin="",this.appliedLineJoin="",this.appliedMiterLimit="",this.currentMiterLimit=""}function CVCompElement(t,e,r){this.completeLayers=!1,this.layers=t.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function CanvasRenderer(t,e){this.animationItem=t,this.renderConfig={clearCanvas:!e||void 0===e.clearCanvas||e.clearCanvas,context:e&&e.context||null,progressiveLoad:e&&e.progressiveLoad||!1,preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",className:e&&e.className||"",id:e&&e.id||"",runExpressions:!e||void 0===e.runExpressions||e.runExpressions},this.renderConfig.dpr=e&&e.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=e&&e.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas",this.renderConfig.clearCanvas&&(this.ctxTransform=this.contextData.transform.bind(this.contextData),this.ctxOpacity=this.contextData.opacity.bind(this.contextData),this.ctxFillStyle=this.contextData.fillStyle.bind(this.contextData),this.ctxStrokeStyle=this.contextData.strokeStyle.bind(this.contextData),this.ctxLineWidth=this.contextData.lineWidth.bind(this.contextData),this.ctxLineCap=this.contextData.lineCap.bind(this.contextData),this.ctxLineJoin=this.contextData.lineJoin.bind(this.contextData),this.ctxMiterLimit=this.contextData.miterLimit.bind(this.contextData),this.ctxFill=this.contextData.fill.bind(this.contextData),this.ctxFillRect=this.contextData.fillRect.bind(this.contextData),this.ctxStroke=this.contextData.stroke.bind(this.contextData),this.save=this.contextData.save.bind(this.contextData))}function HBaseElement(){}function HSolidElement(t,e,r){this.initElement(t,e,r)}function HShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(t,e,r),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}function HTextElement(t,e,r){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(t,e,r)}function HCameraElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initHierarchy();var n=PropertyFactory.getProp;if(this.pe=n(this,t.pe,0,0,this),t.ks.p.s?(this.px=n(this,t.ks.p.x,1,0,this),this.py=n(this,t.ks.p.y,1,0,this),this.pz=n(this,t.ks.p.z,1,0,this)):this.p=n(this,t.ks.p,1,0,this),t.ks.a&&(this.a=n(this,t.ks.a,1,0,this)),t.ks.or.k.length&&t.ks.or.k[0].to){var i,a=t.ks.or.k.length;for(i=0;i<a;i+=1)t.ks.or.k[i].to=null,t.ks.or.k[i].ti=null}this.or=n(this,t.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=n(this,t.ks.rx,0,degToRads,this),this.ry=n(this,t.ks.ry,0,degToRads,this),this.rz=n(this,t.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}function HImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,r)}function HybridRendererBase(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&!1===e.hideOnTransparent),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}function HCompElement(t,e,r){this.layers=t.layers,this.supports3d=!t.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function HybridRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&!1===e.hideOnTransparent),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"},runExpressions:!e||void 0===e.runExpressions||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){if(this.data.tt>=1){this.buffers=[];var t=this.globalData.canvasContext,e=assetLoader.createCanvas(t.canvas.width,t.canvas.height);this.buffers.push(e);var r=assetLoader.createCanvas(t.canvas.width,t.canvas.height);this.buffers.push(r),this.data.tt>=3&&!document._isProxy&&assetLoader.loadLumaCanvas()}this.canvasContext=this.globalData.canvasContext,this.transformCanvas=this.globalData.transformCanvas,this.renderableEffectsManager=new CVEffects(this),this.searchEffectTransforms()},createContent:function(){},setBlendMode:function(){var t=this.globalData;if(t.blendMode!==this.data.bm){t.blendMode=this.data.bm;var e=getBlendMode(this.data.bm);t.canvasContext.globalCompositeOperation=e}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this),this.transformEffects=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT)},hideElement:function(){this.hidden||this.isInRange&&!this.isTransparent||(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},clearCanvas:function(t){t.clearRect(this.transformCanvas.tx,this.transformCanvas.ty,this.transformCanvas.w*this.transformCanvas.sx,this.transformCanvas.h*this.transformCanvas.sy)},prepareLayer:function(){if(this.data.tt>=1){var t=this.buffers[0].getContext("2d");this.clearCanvas(t),t.drawImage(this.canvasContext.canvas,0,0),this.currentTransform=this.canvasContext.getTransform(),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform)}},exitLayer:function(){if(this.data.tt>=1){var t=this.buffers[1],e=t.getContext("2d");if(this.clearCanvas(e),e.drawImage(this.canvasContext.canvas,0,0),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform),this.comp.getElementById("tp"in this.data?this.data.tp:this.data.ind-1).renderFrame(!0),this.canvasContext.setTransform(1,0,0,1,0,0),this.data.tt>=3&&!document._isProxy){var r=assetLoader.getLumaCanvas(this.canvasContext.canvas);r.getContext("2d").drawImage(this.canvasContext.canvas,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.drawImage(r,0,0)}this.canvasContext.globalCompositeOperation=operationsMap[this.data.tt],this.canvasContext.drawImage(t,0,0),this.canvasContext.globalCompositeOperation="destination-over",this.canvasContext.drawImage(this.buffers[0],0,0),this.canvasContext.setTransform(this.currentTransform),this.canvasContext.globalCompositeOperation="source-over"}},renderFrame:function(t){if(!this.hidden&&!this.data.hd&&(1!==this.data.td||t)){this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.setBlendMode();var e=0===this.data.ty;this.prepareLayer(),this.globalData.renderer.save(e),this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity),this.renderInnerContent(),this.globalData.renderer.restore(e),this.exitLayer(),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement,CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated,extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(t,e){var r={data:t,type:t.ty,preTransforms:this.transformsManager.addTransformSequence(e),transforms:[],elements:[],closed:!0===t.hd},n={};if("fl"===t.ty||"st"===t.ty?(n.c=PropertyFactory.getProp(this,t.c,1,255,this),n.c.k||(r.co="rgb("+bmFloor(n.c.v[0])+","+bmFloor(n.c.v[1])+","+bmFloor(n.c.v[2])+")")):"gf"!==t.ty&&"gs"!==t.ty||(n.s=PropertyFactory.getProp(this,t.s,1,null,this),n.e=PropertyFactory.getProp(this,t.e,1,null,this),n.h=PropertyFactory.getProp(this,t.h||{k:0},0,.01,this),n.a=PropertyFactory.getProp(this,t.a||{k:0},0,degToRads,this),n.g=new GradientProperty(this,t.g,this)),n.o=PropertyFactory.getProp(this,t.o,0,.01,this),"st"===t.ty||"gs"===t.ty){if(r.lc=lineCapEnum[t.lc||2],r.lj=lineJoinEnum[t.lj||2],1==t.lj&&(r.ml=t.ml),n.w=PropertyFactory.getProp(this,t.w,0,null,this),n.w.k||(r.wi=n.w.v),t.d){var i=new DashProperty(this,t.d,"canvas",this);n.d=i,n.d.k||(r.da=n.d.dashArray,r.do=n.d.dashoffset[0])}}else r.r=2===t.r?"evenodd":"nonzero";return this.stylesList.push(r),n.style=r,n},CVShapeElement.prototype.createGroupElement=function(){return{it:[],prevViewData:[]}},CVShapeElement.prototype.createTransformElement=function(t){return{transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,t.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,t,this)}}},CVShapeElement.prototype.createShapeElement=function(t){var e=new CVShapeData(this,t,this.stylesList,this.transformsManager);return this.shapes.push(e),this.addShapeToModifiers(e),e},CVShapeElement.prototype.reloadShapes=function(){var t;this._isFirstFrame=!0;var e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(t){var e,r=this.stylesList.length;for(e=0;e<r;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.push(t)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.pop()},CVShapeElement.prototype.closeStyles=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].closed=!0},CVShapeElement.prototype.searchShapes=function(t,e,r,n,i){var a,o,s,l,c,h,u=t.length-1,f=[],p=[],d=[].concat(i);for(a=u;a>=0;a-=1){if((l=this.searchProcessedElement(t[a]))?e[a]=r[l-1]:t[a]._shouldRender=n,"fl"===t[a].ty||"st"===t[a].ty||"gf"===t[a].ty||"gs"===t[a].ty)l?e[a].style.closed=!1:e[a]=this.createStyleElement(t[a],d),f.push(e[a].style);else if("gr"===t[a].ty){if(l)for(s=e[a].it.length,o=0;o<s;o+=1)e[a].prevViewData[o]=e[a].it[o];else e[a]=this.createGroupElement(t[a]);this.searchShapes(t[a].it,e[a].it,e[a].prevViewData,n,d)}else"tr"===t[a].ty?(l||(h=this.createTransformElement(t[a]),e[a]=h),d.push(e[a]),this.addTransformToStyleList(e[a])):"sh"===t[a].ty||"rc"===t[a].ty||"el"===t[a].ty||"sr"===t[a].ty?l||(e[a]=this.createShapeElement(t[a])):"tm"===t[a].ty||"rd"===t[a].ty||"pb"===t[a].ty||"zz"===t[a].ty||"op"===t[a].ty?(l?(c=e[a]).closed=!1:((c=ShapeModifiers.getModifier(t[a].ty)).init(this,t[a]),e[a]=c,this.shapeModifiers.push(c)),p.push(c)):"rp"===t[a].ty&&(l?(c=e[a]).closed=!0:(c=ShapeModifiers.getModifier(t[a].ty),e[a]=c,c.init(this,t,a,e),this.shapeModifiers.push(c),n=!1),p.push(c));this.addProcessedElement(t[a],a+1)}for(this.removeTransformFromStyleList(),this.closeStyles(f),u=p.length,a=0;a<u;a+=1)p[a].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(t,e){(t._opMdf||e.op._mdf||this._isFirstFrame)&&(e.opacity=t.opacity,e.opacity*=e.op.v,e._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var t,e,r,n,i,a,o,s,l,c=this.stylesList.length,h=this.globalData.renderer,u=this.globalData.canvasContext;for(t=0;t<c;t+=1)if(("st"!==(s=(l=this.stylesList[t]).type)&&"gs"!==s||0!==l.wi)&&l.data._shouldRender&&0!==l.coOp&&0!==this.globalData.currentGlobalAlpha){for(h.save(),a=l.elements,"st"===s||"gs"===s?(h.ctxStrokeStyle("st"===s?l.co:l.grd),h.ctxLineWidth(l.wi),h.ctxLineCap(l.lc),h.ctxLineJoin(l.lj),h.ctxMiterLimit(l.ml||0)):h.ctxFillStyle("fl"===s?l.co:l.grd),h.ctxOpacity(l.coOp),"st"!==s&&"gs"!==s&&u.beginPath(),h.ctxTransform(l.preTransforms.finalTransform.props),r=a.length,e=0;e<r;e+=1){for("st"!==s&&"gs"!==s||(u.beginPath(),l.da&&(u.setLineDash(l.da),u.lineDashOffset=l.do)),i=(o=a[e].trNodes).length,n=0;n<i;n+=1)"m"===o[n].t?u.moveTo(o[n].p[0],o[n].p[1]):"c"===o[n].t?u.bezierCurveTo(o[n].pts[0],o[n].pts[1],o[n].pts[2],o[n].pts[3],o[n].pts[4],o[n].pts[5]):u.closePath();"st"!==s&&"gs"!==s||(h.ctxStroke(),l.da&&u.setLineDash(this.dashResetter))}"st"!==s&&"gs"!==s&&this.globalData.renderer.ctxFill(l.r),h.restore()}},CVShapeElement.prototype.renderShape=function(t,e,r,n){var i,a;for(a=t,i=e.length-1;i>=0;i-=1)"tr"===e[i].ty?(a=r[i].transform,this.renderShapeTransform(t,a)):"sh"===e[i].ty||"el"===e[i].ty||"rc"===e[i].ty||"sr"===e[i].ty?this.renderPath(e[i],r[i]):"fl"===e[i].ty?this.renderFill(e[i],r[i],a):"st"===e[i].ty?this.renderStroke(e[i],r[i],a):"gf"===e[i].ty||"gs"===e[i].ty?this.renderGradientFill(e[i],r[i],a):"gr"===e[i].ty?this.renderShape(a,e[i].it,r[i].it):e[i].ty;n&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(t,e){if(this._isFirstFrame||e._mdf||t.transforms._mdf){var r,n,i,a=t.trNodes,o=e.paths,s=o._length;a.length=0;var l=t.transforms.finalTransform;for(i=0;i<s;i+=1){var c=o.shapes[i];if(c&&c.v){for(n=c._length,r=1;r<n;r+=1)1===r&&a.push({t:"m",p:l.applyToPointArray(c.v[0][0],c.v[0][1],0)}),a.push({t:"c",pts:l.applyToTriplePoints(c.o[r-1],c.i[r],c.v[r])});1===n&&a.push({t:"m",p:l.applyToPointArray(c.v[0][0],c.v[0][1],0)}),c.c&&n&&(a.push({t:"c",pts:l.applyToTriplePoints(c.o[r-1],c.i[0],c.v[0])}),a.push({t:"z"}))}}t.trNodes=a}},CVShapeElement.prototype.renderPath=function(t,e){if(!0!==t.hd&&t._shouldRender){var r,n=e.styledShapes.length;for(r=0;r<n;r+=1)this.renderStyledShape(e.styledShapes[r],e.sh)}},CVShapeElement.prototype.renderFill=function(t,e,r){var n=e.style;(e.c._mdf||this._isFirstFrame)&&(n.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(n.coOp=e.o.v*r.opacity)},CVShapeElement.prototype.renderGradientFill=function(t,e,r){var n,i=e.style;if(!i.grd||e.g._mdf||e.s._mdf||e.e._mdf||1!==t.t&&(e.h._mdf||e.a._mdf)){var a,o=this.globalData.canvasContext,s=e.s.v,l=e.e.v;if(1===t.t)n=o.createLinearGradient(s[0],s[1],l[0],l[1]);else{var c=Math.sqrt(Math.pow(s[0]-l[0],2)+Math.pow(s[1]-l[1],2)),h=Math.atan2(l[1]-s[1],l[0]-s[0]),u=e.h.v;u>=1?u=.99:u<=-1&&(u=-.99);var f=c*u,p=Math.cos(h+e.a.v)*f+s[0],d=Math.sin(h+e.a.v)*f+s[1];n=o.createRadialGradient(p,d,0,s[0],s[1],c)}var m=t.g.p,y=e.g.c,v=1;for(a=0;a<m;a+=1)e.g._hasOpacity&&e.g._collapsable&&(v=e.g.o[2*a+1]),n.addColorStop(y[4*a]/100,"rgba("+y[4*a+1]+","+y[4*a+2]+","+y[4*a+3]+","+v+")");i.grd=n}i.coOp=e.o.v*r.opacity},CVShapeElement.prototype.renderStroke=function(t,e,r){var n=e.style,i=e.d;i&&(i._mdf||this._isFirstFrame)&&(n.da=i.dashArray,n.do=i.dashoffset[0]),(e.c._mdf||this._isFirstFrame)&&(n.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(n.coOp=e.o.v*r.opacity),(e.w._mdf||this._isFirstFrame)&&(n.wi=e.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=!1;t.fc?(e=!0,this.values.fill=this.buildColor(t.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=e;var r=!1;t.sc&&(r=!0,this.values.stroke=this.buildColor(t.sc),this.values.sWidth=t.sw);var n,i,a,o,s,l,c,h,u,f,p,d,m=this.globalData.fontManager.getFontByName(t.f),y=t.l,v=this.mHelper;this.stroke=r,this.values.fValue=t.finalSize+"px "+this.globalData.fontManager.getFontByName(t.f).fFamily,i=t.finalText.length;var g=this.data.singleShape,b=.001*t.tr*t.finalSize,x=0,w=0,E=!0,k=0;for(n=0;n<i;n+=1){o=(a=this.globalData.fontManager.getCharData(t.finalText[n],m.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily))&&a.data||{},v.reset(),g&&y[n].n&&(x=-b,w+=t.yOffset,w+=E?1:0,E=!1),u=(c=o.shapes?o.shapes[0].it:[]).length,v.scale(t.finalSize/100,t.finalSize/100),g&&this.applyTextPropertiesToMatrix(t,v,y[n].line,x,w),p=createSizedArray(u-1);var S=0;for(h=0;h<u;h+=1)if("sh"===c[h].ty){for(l=c[h].ks.k.i.length,f=c[h].ks.k,d=[],s=1;s<l;s+=1)1===s&&d.push(v.applyToX(f.v[0][0],f.v[0][1],0),v.applyToY(f.v[0][0],f.v[0][1],0)),d.push(v.applyToX(f.o[s-1][0],f.o[s-1][1],0),v.applyToY(f.o[s-1][0],f.o[s-1][1],0),v.applyToX(f.i[s][0],f.i[s][1],0),v.applyToY(f.i[s][0],f.i[s][1],0),v.applyToX(f.v[s][0],f.v[s][1],0),v.applyToY(f.v[s][0],f.v[s][1],0));d.push(v.applyToX(f.o[s-1][0],f.o[s-1][1],0),v.applyToY(f.o[s-1][0],f.o[s-1][1],0),v.applyToX(f.i[0][0],f.i[0][1],0),v.applyToY(f.i[0][0],f.i[0][1],0),v.applyToX(f.v[0][0],f.v[0][1],0),v.applyToY(f.v[0][0],f.v[0][1],0)),p[S]=d,S+=1}g&&(x+=y[n].l,x+=b),this.textSpans[k]?this.textSpans[k].elem=p:this.textSpans[k]={elem:p},k+=1}},CVTextElement.prototype.renderInnerContent=function(){var t,e,r,n,i,a;this.validateText(),this.canvasContext.font=this.values.fValue,this.globalData.renderer.ctxLineCap("butt"),this.globalData.renderer.ctxLineJoin("miter"),this.globalData.renderer.ctxMiterLimit(4),this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var o,s=this.textAnimator.renderedLetters,l=this.textProperty.currentData.l;e=l.length;var c,h,u=null,f=null,p=null,d=this.globalData.renderer;for(t=0;t<e;t+=1)if(!l[t].n){if((o=s[t])&&(d.save(),d.ctxTransform(o.p),d.ctxOpacity(o.o)),this.fill){for(o&&o.fc?u!==o.fc&&(d.ctxFillStyle(o.fc),u=o.fc):u!==this.values.fill&&(u=this.values.fill,d.ctxFillStyle(this.values.fill)),n=(c=this.textSpans[t].elem).length,this.globalData.canvasContext.beginPath(),r=0;r<n;r+=1)for(a=(h=c[r]).length,this.globalData.canvasContext.moveTo(h[0],h[1]),i=2;i<a;i+=6)this.globalData.canvasContext.bezierCurveTo(h[i],h[i+1],h[i+2],h[i+3],h[i+4],h[i+5]);this.globalData.canvasContext.closePath(),d.ctxFill()}if(this.stroke){for(o&&o.sw?p!==o.sw&&(p=o.sw,d.ctxLineWidth(o.sw)):p!==this.values.sWidth&&(p=this.values.sWidth,d.ctxLineWidth(this.values.sWidth)),o&&o.sc?f!==o.sc&&(f=o.sc,d.ctxStrokeStyle(o.sc)):f!==this.values.stroke&&(f=this.values.stroke,d.ctxStrokeStyle(this.values.stroke)),n=(c=this.textSpans[t].elem).length,this.globalData.canvasContext.beginPath(),r=0;r<n;r+=1)for(a=(h=c[r]).length,this.globalData.canvasContext.moveTo(h[0],h[1]),i=2;i<a;i+=6)this.globalData.canvasContext.bezierCurveTo(h[i],h[i+1],h[i+2],h[i+3],h[i+4],h[i+5]);this.globalData.canvasContext.closePath(),d.ctxStroke()}o&&this.globalData.renderer.restore()}},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var t=createTag("canvas");t.width=this.assetData.w,t.height=this.assetData.h;var e,r,n=t.getContext("2d"),i=this.img.width,a=this.img.height,o=i/a,s=this.assetData.w/this.assetData.h,l=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;o>s&&"xMidYMid slice"===l||o<s&&"xMidYMid slice"!==l?e=(r=a)*s:r=(e=i)/s,n.drawImage(this.img,(i-e)/2,(a-r)/2,e,r,0,0,this.assetData.w,this.assetData.h),this.img=t}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){this.globalData.renderer.ctxFillStyle(this.data.sc),this.globalData.renderer.ctxFillRect(0,0,this.data.sw,this.data.sh)},extendPrototype([BaseRenderer],CanvasRendererBase),CanvasRendererBase.prototype.createShape=function(t){return new CVShapeElement(t,this.globalData,this)},CanvasRendererBase.prototype.createText=function(t){return new CVTextElement(t,this.globalData,this)},CanvasRendererBase.prototype.createImage=function(t){return new CVImageElement(t,this.globalData,this)},CanvasRendererBase.prototype.createSolid=function(t){return new CVSolidElement(t,this.globalData,this)},CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRendererBase.prototype.ctxTransform=function(t){1===t[0]&&0===t[1]&&0===t[4]&&1===t[5]&&0===t[12]&&0===t[13]||this.canvasContext.transform(t[0],t[1],t[4],t[5],t[12],t[13])},CanvasRendererBase.prototype.ctxOpacity=function(t){this.canvasContext.globalAlpha*=t<0?0:t},CanvasRendererBase.prototype.ctxFillStyle=function(t){this.canvasContext.fillStyle=t},CanvasRendererBase.prototype.ctxStrokeStyle=function(t){this.canvasContext.strokeStyle=t},CanvasRendererBase.prototype.ctxLineWidth=function(t){this.canvasContext.lineWidth=t},CanvasRendererBase.prototype.ctxLineCap=function(t){this.canvasContext.lineCap=t},CanvasRendererBase.prototype.ctxLineJoin=function(t){this.canvasContext.lineJoin=t},CanvasRendererBase.prototype.ctxMiterLimit=function(t){this.canvasContext.miterLimit=t},CanvasRendererBase.prototype.ctxFill=function(t){this.canvasContext.fill(t)},CanvasRendererBase.prototype.ctxFillRect=function(t,e,r,n){this.canvasContext.fillRect(t,e,r,n)},CanvasRendererBase.prototype.ctxStroke=function(){this.canvasContext.stroke()},CanvasRendererBase.prototype.reset=function(){this.renderConfig.clearCanvas?this.contextData.reset():this.canvasContext.restore()},CanvasRendererBase.prototype.save=function(){this.canvasContext.save()},CanvasRendererBase.prototype.restore=function(t){this.renderConfig.clearCanvas?(t&&(this.globalData.blendMode="source-over"),this.contextData.restore(t)):this.canvasContext.restore()},CanvasRendererBase.prototype.configAnimation=function(t){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var e=this.animationItem.container.style;e.width="100%",e.height="100%";var r="0px 0px 0px";e.transformOrigin=r,e.mozTransformOrigin=r,e.webkitTransformOrigin=r,e["-webkit-transform"]=r,e.contentVisibility=this.renderConfig.contentVisibility,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.contextData.setContext(this.canvasContext),this.data=t,this.layers=t.layers,this.transformCanvas={w:t.w,h:t.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(t,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(t.layers.length),this.updateContainerSize()},CanvasRendererBase.prototype.updateContainerSize=function(t,e){var r,n,i,a;if(this.reset(),t?(r=t,n=e,this.canvasContext.canvas.width=r,this.canvasContext.canvas.height=n):(this.animationItem.wrapper&&this.animationItem.container?(r=this.animationItem.wrapper.offsetWidth,n=this.animationItem.wrapper.offsetHeight):(r=this.canvasContext.canvas.width,n=this.canvasContext.canvas.height),this.canvasContext.canvas.width=r*this.renderConfig.dpr,this.canvasContext.canvas.height=n*this.renderConfig.dpr),-1!==this.renderConfig.preserveAspectRatio.indexOf("meet")||-1!==this.renderConfig.preserveAspectRatio.indexOf("slice")){var o=this.renderConfig.preserveAspectRatio.split(" "),s=o[1]||"meet",l=o[0]||"xMidYMid",c=l.substr(0,4),h=l.substr(4);i=r/n,(a=this.transformCanvas.w/this.transformCanvas.h)>i&&"meet"===s||a<i&&"slice"===s?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=r/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=n/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=n/(this.transformCanvas.h/this.renderConfig.dpr)),this.transformCanvas.tx="xMid"===c&&(a<i&&"meet"===s||a>i&&"slice"===s)?(r-this.transformCanvas.w*(n/this.transformCanvas.h))/2*this.renderConfig.dpr:"xMax"===c&&(a<i&&"meet"===s||a>i&&"slice"===s)?(r-this.transformCanvas.w*(n/this.transformCanvas.h))*this.renderConfig.dpr:0,this.transformCanvas.ty="YMid"===h&&(a>i&&"meet"===s||a<i&&"slice"===s)?(n-this.transformCanvas.h*(r/this.transformCanvas.w))/2*this.renderConfig.dpr:"YMax"===h&&(a>i&&"meet"===s||a<i&&"slice"===s)?(n-this.transformCanvas.h*(r/this.transformCanvas.w))*this.renderConfig.dpr:0}else"none"===this.renderConfig.preserveAspectRatio?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=n/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRendererBase.prototype.destroy=function(){var t;for(this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),t=(this.layers?this.layers.length:0)-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRendererBase.prototype.renderFrame=function(t,e){if((this.renderedFrame!==t||!0!==this.renderConfig.clearCanvas||e)&&!this.destroyed&&-1!==t){var r;this.renderedFrame=t,this.globalData.frameNum=t-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||e,this.globalData.projectInterface.currentFrame=t;var n=this.layers.length;for(this.completeLayers||this.checkLayers(t),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].prepareFrame(t-this.layers[r].st);if(this.globalData._mdf){for(!0===this.renderConfig.clearCanvas?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].renderFrame();!0!==this.renderConfig.clearCanvas&&this.restore()}}},CanvasRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!e[t]&&99!==this.layers[t].ty){var r=this.createItem(this.layers[t],this,this.globalData);e[t]=r,r.initExpressions()}},CanvasRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display="block"},CVContextData.prototype.duplicate=function(){var t=2*this._length,e=0;for(e=this._length;e<t;e+=1)this.stack[e]=new CanvasContext;this._length=t},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.stack[this.cArrPos].opacity=1},CVContextData.prototype.restore=function(t){this.cArrPos-=1;var e,r=this.stack[this.cArrPos],n=r.transform,i=this.cTr.props;for(e=0;e<16;e+=1)i[e]=n[e];if(t){this.nativeContext.restore();var a=this.stack[this.cArrPos+1];this.appliedFillStyle=a.fillStyle,this.appliedStrokeStyle=a.strokeStyle,this.appliedLineWidth=a.lineWidth,this.appliedLineCap=a.lineCap,this.appliedLineJoin=a.lineJoin,this.appliedMiterLimit=a.miterLimit}this.nativeContext.setTransform(n[0],n[1],n[4],n[5],n[12],n[13]),(t||-1!==r.opacity&&this.currentOpacity!==r.opacity)&&(this.nativeContext.globalAlpha=r.opacity,this.currentOpacity=r.opacity),this.currentFillStyle=r.fillStyle,this.currentStrokeStyle=r.strokeStyle,this.currentLineWidth=r.lineWidth,this.currentLineCap=r.lineCap,this.currentLineJoin=r.lineJoin,this.currentMiterLimit=r.miterLimit},CVContextData.prototype.save=function(t){t&&this.nativeContext.save();var e=this.cTr.props;this._length<=this.cArrPos&&this.duplicate();var r,n=this.stack[this.cArrPos];for(r=0;r<16;r+=1)n.transform[r]=e[r];this.cArrPos+=1;var i=this.stack[this.cArrPos];i.opacity=n.opacity,i.fillStyle=n.fillStyle,i.strokeStyle=n.strokeStyle,i.lineWidth=n.lineWidth,i.lineCap=n.lineCap,i.lineJoin=n.lineJoin,i.miterLimit=n.miterLimit},CVContextData.prototype.setOpacity=function(t){this.stack[this.cArrPos].opacity=t},CVContextData.prototype.setContext=function(t){this.nativeContext=t},CVContextData.prototype.fillStyle=function(t){this.stack[this.cArrPos].fillStyle!==t&&(this.currentFillStyle=t,this.stack[this.cArrPos].fillStyle=t)},CVContextData.prototype.strokeStyle=function(t){this.stack[this.cArrPos].strokeStyle!==t&&(this.currentStrokeStyle=t,this.stack[this.cArrPos].strokeStyle=t)},CVContextData.prototype.lineWidth=function(t){this.stack[this.cArrPos].lineWidth!==t&&(this.currentLineWidth=t,this.stack[this.cArrPos].lineWidth=t)},CVContextData.prototype.lineCap=function(t){this.stack[this.cArrPos].lineCap!==t&&(this.currentLineCap=t,this.stack[this.cArrPos].lineCap=t)},CVContextData.prototype.lineJoin=function(t){this.stack[this.cArrPos].lineJoin!==t&&(this.currentLineJoin=t,this.stack[this.cArrPos].lineJoin=t)},CVContextData.prototype.miterLimit=function(t){this.stack[this.cArrPos].miterLimit!==t&&(this.currentMiterLimit=t,this.stack[this.cArrPos].miterLimit=t)},CVContextData.prototype.transform=function(t){this.transformMat.cloneFromProps(t);var e=this.cTr;this.transformMat.multiply(e),e.cloneFromProps(this.transformMat.props);var r=e.props;this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13])},CVContextData.prototype.opacity=function(t){var e=this.stack[this.cArrPos].opacity;e*=t<0?0:t,this.stack[this.cArrPos].opacity!==e&&(this.currentOpacity!==t&&(this.nativeContext.globalAlpha=t,this.currentOpacity=t),this.stack[this.cArrPos].opacity=e)},CVContextData.prototype.fill=function(t){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fill(t)},CVContextData.prototype.fillRect=function(t,e,r,n){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fillRect(t,e,r,n)},CVContextData.prototype.stroke=function(){this.appliedStrokeStyle!==this.currentStrokeStyle&&(this.appliedStrokeStyle=this.currentStrokeStyle,this.nativeContext.strokeStyle=this.appliedStrokeStyle),this.appliedLineWidth!==this.currentLineWidth&&(this.appliedLineWidth=this.currentLineWidth,this.nativeContext.lineWidth=this.appliedLineWidth),this.appliedLineCap!==this.currentLineCap&&(this.appliedLineCap=this.currentLineCap,this.nativeContext.lineCap=this.appliedLineCap),this.appliedLineJoin!==this.currentLineJoin&&(this.appliedLineJoin=this.currentLineJoin,this.nativeContext.lineJoin=this.appliedLineJoin),this.appliedMiterLimit!==this.currentMiterLimit&&(this.appliedMiterLimit=this.currentMiterLimit,this.nativeContext.miterLimit=this.appliedMiterLimit),this.nativeContext.stroke()},extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var t,e=this.canvasContext;for(e.beginPath(),e.moveTo(0,0),e.lineTo(this.data.w,0),e.lineTo(this.data.w,this.data.h),e.lineTo(0,this.data.h),e.lineTo(0,0),e.clip(),t=this.layers.length-1;t>=0;t-=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},CVCompElement.prototype.destroy=function(){var t;for(t=this.layers.length-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.layers=null,this.elements=null},CVCompElement.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)},extendPrototype([CanvasRendererBase],CanvasRenderer),CanvasRenderer.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)},HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0!==this.data.bm&&this.setBlendMode()},renderElement:function(){var t=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var e=this.finalTransform.mat.toCSS();t.transform=e,t.webkitTransform=e}this.finalTransform._opMdf&&(t.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting,extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var t;this.data.hasMask?((t=createNS("rect")).setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):((t=createTag("div")).style.width=this.data.sw+"px",t.style.height=this.data.sh+"px",t.style.backgroundColor=this.data.sc),this.layerElement.appendChild(t)},extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var t;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),t=this.svgElement;else{t=createNS("svg");var e=this.comp.data?this.comp.data:this.globalData.compSize;t.setAttribute("width",e.w),t.setAttribute("height",e.h),t.appendChild(this.shapesContainer),this.layerElement.appendChild(t)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=t},HShapeElement.prototype.getTransformedPoint=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)e=t[r].mProps.v.applyToPointArray(e[0],e[1],0);return e},HShapeElement.prototype.calculateShapeBoundingBox=function(t,e){var r,n,i,a,o,s=t.sh.v,l=t.transformers,c=s._length;if(!(c<=1)){for(r=0;r<c-1;r+=1)n=this.getTransformedPoint(l,s.v[r]),i=this.getTransformedPoint(l,s.o[r]),a=this.getTransformedPoint(l,s.i[r+1]),o=this.getTransformedPoint(l,s.v[r+1]),this.checkBounds(n,i,a,o,e);s.c&&(n=this.getTransformedPoint(l,s.v[r]),i=this.getTransformedPoint(l,s.o[r]),a=this.getTransformedPoint(l,s.i[0]),o=this.getTransformedPoint(l,s.v[0]),this.checkBounds(n,i,a,o,e))}},HShapeElement.prototype.checkBounds=function(t,e,r,n,i){this.getBoundsOfCurve(t,e,r,n);var a=this.shapeBoundingBox;i.x=bmMin(a.left,i.x),i.xMax=bmMax(a.right,i.xMax),i.y=bmMin(a.top,i.y),i.yMax=bmMax(a.bottom,i.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(t,e,r,n){for(var i,a,o,s,l,c,h,u=[[t[0],n[0]],[t[1],n[1]]],f=0;f<2;++f)a=6*t[f]-12*e[f]+6*r[f],i=-3*t[f]+9*e[f]-9*r[f]+3*n[f],o=3*e[f]-3*t[f],a|=0,o|=0,0==(i|=0)&&0===a||(0===i?(s=-o/a)>0&&s<1&&u[f].push(this.calculateF(s,t,e,r,n,f)):(l=a*a-4*o*i)>=0&&((c=(-a+bmSqrt(l))/(2*i))>0&&c<1&&u[f].push(this.calculateF(c,t,e,r,n,f)),(h=(-a-bmSqrt(l))/(2*i))>0&&h<1&&u[f].push(this.calculateF(h,t,e,r,n,f))));this.shapeBoundingBox.left=bmMin.apply(null,u[0]),this.shapeBoundingBox.top=bmMin.apply(null,u[1]),this.shapeBoundingBox.right=bmMax.apply(null,u[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,u[1])},HShapeElement.prototype.calculateF=function(t,e,r,n,i,a){return bmPow(1-t,3)*e[a]+3*bmPow(1-t,2)*t*r[a]+3*(1-t)*bmPow(t,2)*n[a]+bmPow(t,3)*i[a]},HShapeElement.prototype.calculateBoundingBox=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)t[r]&&t[r].sh?this.calculateShapeBoundingBox(t[r],e):t[r]&&t[r].it?this.calculateBoundingBox(t[r].it,e):t[r]&&t[r].style&&t[r].w&&this.expandStrokeBoundingBox(t[r].w,e)},HShapeElement.prototype.expandStrokeBoundingBox=function(t,e){var r=0;if(t.keyframes){for(var n=0;n<t.keyframes.length;n+=1){var i=t.keyframes[n].s;i>r&&(r=i)}r*=t.mult}else r=t.v*t.mult;e.x-=r,e.xMax+=r,e.y-=r,e.yMax+=r},HShapeElement.prototype.currentBoxContains=function(t){return this.currentBBox.x<=t.x&&this.currentBBox.y<=t.y&&this.currentBBox.width+this.currentBBox.x>=t.x+t.width&&this.currentBBox.height+this.currentBBox.y>=t.y+t.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var t=this.tempBoundingBox,e=999999;if(t.x=e,t.xMax=-e,t.y=e,t.yMax=-e,this.calculateBoundingBox(this.itemsData,t),t.width=t.xMax<t.x?0:t.xMax-t.x,t.height=t.yMax<t.y?0:t.yMax-t.y,this.currentBoxContains(t))return;var r=!1;if(this.currentBBox.w!==t.width&&(this.currentBBox.w=t.width,this.shapeCont.setAttribute("width",t.width),r=!0),this.currentBBox.h!==t.height&&(this.currentBBox.h=t.height,this.shapeCont.setAttribute("height",t.height),r=!0),r||this.currentBBox.x!==t.x||this.currentBBox.y!==t.y){this.currentBBox.w=t.width,this.currentBBox.h=t.height,this.currentBBox.x=t.x,this.currentBBox.y=t.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var n=this.shapeCont.style,i="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";n.transform=i,n.webkitTransform=i}}},extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var t=createNS("g");this.maskedElement.appendChild(t),this.innerElem=t}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=this.innerElem.style,r=t.fc?this.buildColor(t.fc):"rgba(0,0,0,0)";e.fill=r,e.color=r,t.sc&&(e.stroke=this.buildColor(t.sc),e.strokeWidth=t.sw+"px");var n,i,a=this.globalData.fontManager.getFontByName(t.f);if(!this.globalData.fontManager.chars)if(e.fontSize=t.finalSize+"px",e.lineHeight=t.finalSize+"px",a.fClass)this.innerElem.className=a.fClass;else{e.fontFamily=a.fFamily;var o=t.fWeight,s=t.fStyle;e.fontStyle=s,e.fontWeight=o}var l,c,h,u=t.l;i=u.length;var f,p=this.mHelper,d="",m=0;for(n=0;n<i;n+=1){if(this.globalData.fontManager.chars?(this.textPaths[m]?l=this.textPaths[m]:((l=createNS("path")).setAttribute("stroke-linecap",lineCapEnum[1]),l.setAttribute("stroke-linejoin",lineJoinEnum[2]),l.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[m]?h=(c=this.textSpans[m]).children[0]:((c=createTag("div")).style.lineHeight=0,(h=createNS("svg")).appendChild(l),styleDiv(c)))):this.isMasked?l=this.textPaths[m]?this.textPaths[m]:createNS("text"):this.textSpans[m]?(c=this.textSpans[m],l=this.textPaths[m]):(styleDiv(c=createTag("span")),styleDiv(l=createTag("span")),c.appendChild(l)),this.globalData.fontManager.chars){var y,v=this.globalData.fontManager.getCharData(t.finalText[n],a.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily);if(y=v?v.data:null,p.reset(),y&&y.shapes&&y.shapes.length&&(f=y.shapes[0].it,p.scale(t.finalSize/100,t.finalSize/100),d=this.createPathShape(p,f),l.setAttribute("d",d)),this.isMasked)this.innerElem.appendChild(l);else{if(this.innerElem.appendChild(c),y&&y.shapes){document.body.appendChild(h);var g=h.getBBox();h.setAttribute("width",g.width+2),h.setAttribute("height",g.height+2),h.setAttribute("viewBox",g.x-1+" "+(g.y-1)+" "+(g.width+2)+" "+(g.height+2));var b=h.style,x="translate("+(g.x-1)+"px,"+(g.y-1)+"px)";b.transform=x,b.webkitTransform=x,u[n].yOffset=g.y-1}else h.setAttribute("width",1),h.setAttribute("height",1);c.appendChild(h)}}else if(l.textContent=u[n].val,l.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(l);else{this.innerElem.appendChild(c);var w=l.style,E="translate3d(0,"+-t.finalSize/1.2+"px,0)";w.transform=E,w.webkitTransform=E}this.isMasked?this.textSpans[m]=l:this.textSpans[m]=c,this.textSpans[m].style.display="block",this.textPaths[m]=l,m+=1}for(;m<this.textSpans.length;)this.textSpans[m].style.display="none",m+=1},HTextElement.prototype.renderInnerContent=function(){var t;if(this.validateText(),this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),t=this.svgElement.style;var e="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";t.transform=e,t.webkitTransform=e}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag){var r,n,i,a,o,s=0,l=this.textAnimator.renderedLetters,c=this.textProperty.currentData.l;for(n=c.length,r=0;r<n;r+=1)c[r].n?s+=1:(a=this.textSpans[r],o=this.textPaths[r],i=l[s],s+=1,i._mdf.m&&(this.isMasked?a.setAttribute("transform",i.m):(a.style.webkitTransform=i.m,a.style.transform=i.m)),a.style.opacity=i.o,i.sw&&i._mdf.sw&&o.setAttribute("stroke-width",i.sw),i.sc&&i._mdf.sc&&o.setAttribute("stroke",i.sc),i.fc&&i._mdf.fc&&(o.setAttribute("fill",i.fc),o.style.color=i.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var h=this.innerElem.getBBox();if(this.currentBBox.w!==h.width&&(this.currentBBox.w=h.width,this.svgElement.setAttribute("width",h.width)),this.currentBBox.h!==h.height&&(this.currentBBox.h=h.height,this.svgElement.setAttribute("height",h.height)),this.currentBBox.w!==h.width+2||this.currentBBox.h!==h.height+2||this.currentBBox.x!==h.x-1||this.currentBBox.y!==h.y-1){this.currentBBox.w=h.width+2,this.currentBBox.h=h.height+2,this.currentBBox.x=h.x-1,this.currentBBox.y=h.y-1,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),t=this.svgElement.style;var u="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";t.transform=u,t.webkitTransform=u}}}},extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var t,e,r,n,i=this.comp.threeDElements.length;for(t=0;t<i;t+=1)if("3d"===(e=this.comp.threeDElements[t]).type){r=e.perspectiveElem.style,n=e.container.style;var a=this.pe.v+"px",o="0px 0px 0px",s="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";r.perspective=a,r.webkitPerspective=a,n.transformOrigin=o,n.mozTransformOrigin=o,n.webkitTransformOrigin=o,r.transform=s,r.webkitTransform=s}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var t,e,r=this._isFirstFrame;if(this.hierarchy)for(e=this.hierarchy.length,t=0;t<e;t+=1)r=this.hierarchy[t].finalTransform.mProp._mdf||r;if(r||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(t=e=this.hierarchy.length-1;t>=0;t-=1){var n=this.hierarchy[t].finalTransform.mProp;this.mat.translate(-n.p.v[0],-n.p.v[1],n.p.v[2]),this.mat.rotateX(-n.or.v[0]).rotateY(-n.or.v[1]).rotateZ(n.or.v[2]),this.mat.rotateX(-n.rx.v).rotateY(-n.ry.v).rotateZ(n.rz.v),this.mat.scale(1/n.s.v[0],1/n.s.v[1],1/n.s.v[2]),this.mat.translate(n.a.v[0],n.a.v[1],n.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var i;i=this.p?[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var a=Math.sqrt(Math.pow(i[0],2)+Math.pow(i[1],2)+Math.pow(i[2],2)),o=[i[0]/a,i[1]/a,i[2]/a],s=Math.sqrt(o[2]*o[2]+o[0]*o[0]),l=Math.atan2(o[1],s),c=Math.atan2(o[0],-o[2]);this.mat.rotateY(c).rotateX(-l)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var h=!this._prevMat.equals(this.mat);if((h||this.pe._mdf)&&this.comp.threeDElements){var u,f,p;for(e=this.comp.threeDElements.length,t=0;t<e;t+=1)if("3d"===(u=this.comp.threeDElements[t]).type){if(h){var d=this.mat.toCSS();(p=u.container.style).transform=d,p.webkitTransform=d}this.pe._mdf&&((f=u.perspectiveElem.style).perspective=this.pe.v+"px",f.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null},extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData),e=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(e),e.crossOrigin="anonymous",e.src=t,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)},extendPrototype([BaseRenderer],HybridRendererBase),HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},HybridRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){var n=this.layers[e];if(n.ddd&&this.supports3d)this.addTo3dContainer(r,e);else if(this.threeDElements)this.addTo3dContainer(r,e);else{for(var i,a,o=0;o<e;)this.elements[o]&&!0!==this.elements[o]&&this.elements[o].getBaseElement&&(a=this.elements[o],i=(this.layers[o].ddd?this.getThreeDContainerByPos(o):a.getBaseElement())||i),o+=1;i?n.ddd&&this.supports3d||this.layerElement.insertBefore(r,i):n.ddd&&this.supports3d||this.layerElement.appendChild(r)}}},HybridRendererBase.prototype.createShape=function(t){return this.supports3d?new HShapeElement(t,this.globalData,this):new SVGShapeElement(t,this.globalData,this)},HybridRendererBase.prototype.createText=function(t){return this.supports3d?new HTextElement(t,this.globalData,this):new SVGTextLottieElement(t,this.globalData,this)},HybridRendererBase.prototype.createCamera=function(t){return this.camera=new HCameraElement(t,this.globalData,this),this.camera},HybridRendererBase.prototype.createImage=function(t){return this.supports3d?new HImageElement(t,this.globalData,this):new IImageElement(t,this.globalData,this)},HybridRendererBase.prototype.createSolid=function(t){return this.supports3d?new HSolidElement(t,this.globalData,this):new ISolidElement(t,this.globalData,this)},HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,HybridRendererBase.prototype.getThreeDContainerByPos=function(t){for(var e=0,r=this.threeDElements.length;e<r;){if(this.threeDElements[e].startPos<=t&&this.threeDElements[e].endPos>=t)return this.threeDElements[e].perspectiveElem;e+=1}return null},HybridRendererBase.prototype.createThreeDContainer=function(t,e){var r,n,i=createTag("div");styleDiv(i);var a=createTag("div");if(styleDiv(a),"3d"===e){(r=i.style).width=this.globalData.compSize.w+"px",r.height=this.globalData.compSize.h+"px";var o="50% 50%";r.webkitTransformOrigin=o,r.mozTransformOrigin=o,r.transformOrigin=o;var s="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";(n=a.style).transform=s,n.webkitTransform=s}i.appendChild(a);var l={container:a,perspectiveElem:i,startPos:t,endPos:t,type:e};return this.threeDElements.push(l),l},HybridRendererBase.prototype.build3dContainers=function(){var t,e,r=this.layers.length,n="";for(t=0;t<r;t+=1)this.layers[t].ddd&&3!==this.layers[t].ty?("3d"!==n&&(n="3d",e=this.createThreeDContainer(t,"3d")),e.endPos=Math.max(e.endPos,t)):("2d"!==n&&(n="2d",e=this.createThreeDContainer(t,"2d")),e.endPos=Math.max(e.endPos,t));for(t=(r=this.threeDElements.length)-1;t>=0;t-=1)this.resizerElem.appendChild(this.threeDElements[t].perspectiveElem)},HybridRendererBase.prototype.addTo3dContainer=function(t,e){for(var r=0,n=this.threeDElements.length;r<n;){if(e<=this.threeDElements[r].endPos){for(var i,a=this.threeDElements[r].startPos;a<e;)this.elements[a]&&this.elements[a].getBaseElement&&(i=this.elements[a].getBaseElement()),a+=1;i?this.threeDElements[r].container.insertBefore(t,i):this.threeDElements[r].container.appendChild(t);break}r+=1}},HybridRendererBase.prototype.configAnimation=function(t){var e=createTag("div"),r=this.animationItem.wrapper,n=e.style;n.width=t.w+"px",n.height=t.h+"px",this.resizerElem=e,styleDiv(e),n.transformStyle="flat",n.mozTransformStyle="flat",n.webkitTransformStyle="flat",this.renderConfig.className&&e.setAttribute("class",this.renderConfig.className),r.appendChild(e),n.overflow="hidden";var i=createNS("svg");i.setAttribute("width","1"),i.setAttribute("height","1"),styleDiv(i),this.resizerElem.appendChild(i);var a=createNS("defs");i.appendChild(a),this.data=t,this.setupGlobalData(t,i),this.globalData.defs=a,this.layers=t.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRendererBase.prototype.destroy=function(){var t;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRendererBase.prototype.updateContainerSize=function(){var t,e,r,n,i=this.animationItem.wrapper.offsetWidth,a=this.animationItem.wrapper.offsetHeight,o=i/a;this.globalData.compSize.w/this.globalData.compSize.h>o?(t=i/this.globalData.compSize.w,e=i/this.globalData.compSize.w,r=0,n=(a-this.globalData.compSize.h*(i/this.globalData.compSize.w))/2):(t=a/this.globalData.compSize.h,e=a/this.globalData.compSize.h,r=(i-this.globalData.compSize.w*(a/this.globalData.compSize.h))/2,n=0);var s=this.resizerElem.style;s.webkitTransform="matrix3d("+t+",0,0,0,0,"+e+",0,0,0,0,1,0,"+r+","+n+",0,1)",s.transform=s.webkitTransform},HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRendererBase.prototype.show=function(){this.resizerElem.style.display="block"},HybridRendererBase.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var t,e=this.globalData.compSize.w,r=this.globalData.compSize.h,n=this.threeDElements.length;for(t=0;t<n;t+=1){var i=this.threeDElements[t].perspectiveElem.style;i.webkitPerspective=Math.sqrt(Math.pow(e,2)+Math.pow(r,2))+"px",i.perspective=i.webkitPerspective}}},HybridRendererBase.prototype.searchExtraCompositions=function(t){var e,r=t.length,n=createTag("div");for(e=0;e<r;e+=1)if(t[e].xt){var i=this.createComp(t[e],n,this.globalData.comp,null);i.initExpressions(),this.globalData.projectInterface.registerComposition(i)}},extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(t,e){for(var r,n=0;n<e;)this.elements[n]&&this.elements[n].getBaseElement&&(r=this.elements[n].getBaseElement()),n+=1;r?this.layerElement.insertBefore(t,r):this.layerElement.appendChild(t)},HCompElement.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)},extendPrototype([HybridRendererBase],HybridRenderer),HybridRenderer.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)};var CompExpressionInterface=function(t){function e(e){for(var r=0,n=t.layers.length;r<n;){if(t.layers[r].nm===e||t.layers[r].ind===e)return t.elements[r].layerInterface;r+=1}return null}return Object.defineProperty(e,"_name",{value:t.data.nm}),e.layer=e,e.pixelAspect=1,e.height=t.data.h||t.globalData.compSize.h,e.width=t.data.w||t.globalData.compSize.w,e.pixelAspect=1,e.frameDuration=1/t.globalData.frameRate,e.displayStartTime=0,e.numLayers=t.layers.length,e};function _typeof$2(t){return _typeof$2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$2(t)}function seedRandom(t,e){var r,n=this,i=256,a="random",o=e.pow(i,6),s=e.pow(2,52),l=2*s,c=255;function h(t){var e,r=t.length,n=this,a=0,o=n.i=n.j=0,s=n.S=[];for(r||(t=[r++]);a<i;)s[a]=a++;for(a=0;a<i;a++)s[a]=s[o=c&o+t[a%r]+(e=s[a])],s[o]=e;n.g=function(t){for(var e,r=0,a=n.i,o=n.j,s=n.S;t--;)e=s[a=c&a+1],r=r*i+s[c&(s[a]=s[o=c&o+e])+(s[o]=e)];return n.i=a,n.j=o,r}}function u(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function f(t,e){var r,n=[],i=_typeof$2(t);if(e&&"object"==i)for(r in t)try{n.push(f(t[r],e-1))}catch(t){}return n.length?n:"string"==i?t:t+"\0"}function p(t,e){for(var r,n=t+"",i=0;i<n.length;)e[c&i]=c&(r^=19*e[c&i])+n.charCodeAt(i++);return d(e)}function d(t){return String.fromCharCode.apply(0,t)}e["seed"+a]=function(c,m,y){var v=[],g=p(f((m=!0===m?{entropy:!0}:m||{}).entropy?[c,d(t)]:null===c?function(){try{r;var e=new Uint8Array(i);return(n.crypto||n.msCrypto).getRandomValues(e),d(e)}catch(e){var a=n.navigator,o=a&&a.plugins;return[+new Date,n,o,n.screen,d(t)]}}():c,3),v),b=new h(v),x=function(){for(var t=b.g(6),e=o,r=0;t<s;)t=(t+r)*i,e*=i,r=b.g(1);for(;t>=l;)t/=2,e/=2,r>>>=1;return(t+r)/e};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,p(d(b.S),t),(m.pass||y||function(t,r,n,i){return i&&(i.S&&u(i,b),t.state=function(){return u(b,{})}),n?(e[a]=t,r):t})(x,g,"global"in m?m.global:this==e,m.state)},p(e.random(),t)}function initialize$2(t){seedRandom([],t)}var propTypes={SHAPE:"shape"};function _typeof$1(t){return _typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$1(t)}var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null,XMLHttpRequest=null,fetch=null,frames=null,_lottieGlobal={};function resetFrame(){_lottieGlobal={}}function $bm_isInstanceOfArray(t){return t.constructor===Array||t.constructor===Float32Array}function isNumerable(t,e){return"number"===t||e instanceof Number||"boolean"===t||"string"===t}function $bm_neg(t){var e=_typeof$1(t);if("number"===e||t instanceof Number||"boolean"===e)return-t;if($bm_isInstanceOfArray(t)){var r,n=t.length,i=[];for(r=0;r<n;r+=1)i[r]=-t[r];return i}return t.propType?t.v:-t}initialize$2(BMMath);var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(t,e){var r=_typeof$1(t),n=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(n,e)||"string"===r||"string"===n)return t+e;if($bm_isInstanceOfArray(t)&&isNumerable(n,e))return(t=t.slice(0))[0]+=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return(e=e.slice(0))[0]=t+e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var i=0,a=t.length,o=e.length,s=[];i<a||i<o;)("number"==typeof t[i]||t[i]instanceof Number)&&("number"==typeof e[i]||e[i]instanceof Number)?s[i]=t[i]+e[i]:s[i]=void 0===e[i]?t[i]:t[i]||e[i],i+=1;return s}return 0}var add=sum;function sub(t,e){var r=_typeof$1(t),n=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(n,e))return"string"===r&&(t=parseInt(t,10)),"string"===n&&(e=parseInt(e,10)),t-e;if($bm_isInstanceOfArray(t)&&isNumerable(n,e))return(t=t.slice(0))[0]-=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return(e=e.slice(0))[0]=t-e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var i=0,a=t.length,o=e.length,s=[];i<a||i<o;)("number"==typeof t[i]||t[i]instanceof Number)&&("number"==typeof e[i]||e[i]instanceof Number)?s[i]=t[i]-e[i]:s[i]=void 0===e[i]?t[i]:t[i]||e[i],i+=1;return s}return 0}function mul(t,e){var r,n,i,a=_typeof$1(t),o=_typeof$1(e);if(isNumerable(a,t)&&isNumerable(o,e))return t*e;if($bm_isInstanceOfArray(t)&&isNumerable(o,e)){for(i=t.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t[n]*e;return r}if(isNumerable(a,t)&&$bm_isInstanceOfArray(e)){for(i=e.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t*e[n];return r}return 0}function div(t,e){var r,n,i,a=_typeof$1(t),o=_typeof$1(e);if(isNumerable(a,t)&&isNumerable(o,e))return t/e;if($bm_isInstanceOfArray(t)&&isNumerable(o,e)){for(i=t.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t[n]/e;return r}if(isNumerable(a,t)&&$bm_isInstanceOfArray(e)){for(i=e.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t/e[n];return r}return 0}function mod(t,e){return"string"==typeof t&&(t=parseInt(t,10)),"string"==typeof e&&(e=parseInt(e,10)),t%e}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(t,e,r){if(e>r){var n=r;r=e,e=n}return Math.min(Math.max(t,e),r)}function radiansToDegrees(t){return t/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(t){return t*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(t,e){if("number"==typeof t||t instanceof Number)return e=e||0,Math.abs(t-e);var r;e||(e=helperLengthArray);var n=Math.min(t.length,e.length),i=0;for(r=0;r<n;r+=1)i+=Math.pow(e[r]-t[r],2);return Math.sqrt(i)}function normalize(t){return div(t,length(t))}function rgbToHsl(t){var e,r,n=t[0],i=t[1],a=t[2],o=Math.max(n,i,a),s=Math.min(n,i,a),l=(o+s)/2;if(o===s)e=0,r=0;else{var c=o-s;switch(r=l>.5?c/(2-o-s):c/(o+s),o){case n:e=(i-a)/c+(i<a?6:0);break;case i:e=(a-n)/c+2;break;case a:e=(n-i)/c+4}e/=6}return[e,r,l,t[3]]}function hue2rgb(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+6*(e-t)*r:r<.5?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function hslToRgb(t){var e,r,n,i=t[0],a=t[1],o=t[2];if(0===a)e=o,n=o,r=o;else{var s=o<.5?o*(1+a):o+a-o*a,l=2*o-s;e=hue2rgb(l,s,i+1/3),r=hue2rgb(l,s,i),n=hue2rgb(l,s,i-1/3)}return[e,r,n,t[3]]}function linear(t,e,r,n,i){if(void 0!==n&&void 0!==i||(n=e,i=r,e=0,r=1),r<e){var a=r;r=e,e=a}if(t<=e)return n;if(t>=r)return i;var o,s=r===e?0:(t-e)/(r-e);if(!n.length)return n+(i-n)*s;var l=n.length,c=createTypedArray("float32",l);for(o=0;o<l;o+=1)c[o]=n[o]+(i[o]-n[o])*s;return c}function random(t,e){if(void 0===e&&(void 0===t?(t=0,e=1):(e=t,t=void 0)),e.length){var r,n=e.length;t||(t=createTypedArray("float32",n));var i=createTypedArray("float32",n),a=BMMath.random();for(r=0;r<n;r+=1)i[r]=t[r]+a*(e[r]-t[r]);return i}return void 0===t&&(t=0),t+BMMath.random()*(e-t)}function createPath(t,e,r,n){var i,a=t.length,o=shapePool.newElement();o.setPathData(!!n,a);var s,l,c=[0,0];for(i=0;i<a;i+=1)s=e&&e[i]?e[i]:c,l=r&&r[i]?r[i]:c,o.setTripleAt(t[i][0],t[i][1],l[0]+t[i][0],l[1]+t[i][1],s[0]+t[i][0],s[1]+t[i][1],i,!0);return o}function initiateExpression(elem,data,property){function noOp(t){return t}if(!elem.globalData.renderConfig.runExpressions)return noOp;var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=-1!==val.indexOf("random"),elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||!0!==this.data.hd,wiggle=function(t,e){var r,n,i=this.pv.length?this.pv.length:1,a=createTypedArray("float32",i),o=Math.floor(5*time);for(r=0,n=0;r<o;){for(n=0;n<i;n+=1)a[n]+=-e+2*e*BMMath.random();r+=1}var s=5*time,l=s-Math.floor(s),c=createTypedArray("float32",i);if(i>1){for(n=0;n<i;n+=1)c[n]=this.pv[n]+a[n]+(-e+2*e*BMMath.random())*l;return c}return this.pv+a[0]+(-e+2*e*BMMath.random())*l}.bind(this);function loopInDuration(t,e){return loopIn(t,e,!0)}function loopOutDuration(t,e){return loopOut(t,e,!0)}thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty)),this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface),time,velocity,value,text,textIndex,textTotal,selectorValue;function lookAt(t,e){var r=[e[0]-t[0],e[1]-t[1],e[2]-t[2]],n=Math.atan2(r[0],Math.sqrt(r[1]*r[1]+r[2]*r[2]))/degToRads;return[-Math.atan2(r[1],r[2])/degToRads,n,0]}function easeOut(t,e,r,n,i){return applyEase(easeOutBez,t,e,r,n,i)}function easeIn(t,e,r,n,i){return applyEase(easeInBez,t,e,r,n,i)}function ease(t,e,r,n,i){return applyEase(easeInOutBez,t,e,r,n,i)}function applyEase(t,e,r,n,i,a){void 0===i?(i=r,a=n):e=(e-r)/(n-r),e>1?e=1:e<0&&(e=0);var o=t(e);if($bm_isInstanceOfArray(i)){var s,l=i.length,c=createTypedArray("float32",l);for(s=0;s<l;s+=1)c[s]=(a[s]-i[s])*o+i[s];return c}return(a-i)*o+i}function nearestKey(t){var e,r,n,i=data.k.length;if(data.k.length&&"number"!=typeof data.k[0])if(r=-1,(t*=elem.comp.globalData.frameRate)<data.k[0].t)r=1,n=data.k[0].t;else{for(e=0;e<i-1;e+=1){if(t===data.k[e].t){r=e+1,n=data.k[e].t;break}if(t>data.k[e].t&&t<data.k[e+1].t){t-data.k[e].t>data.k[e+1].t-t?(r=e+2,n=data.k[e+1].t):(r=e+1,n=data.k[e].t);break}}-1===r&&(r=e+1,n=data.k[e].t)}else r=0,n=0;var a={};return a.index=r,a.time=n/elem.comp.globalData.frameRate,a}function key(t){var e,r,n;if(!data.k.length||"number"==typeof data.k[0])throw new Error("The property has no keyframe at index "+t);t-=1,e={time:data.k[t].t/elem.comp.globalData.frameRate,value:[]};var i=Object.prototype.hasOwnProperty.call(data.k[t],"s")?data.k[t].s:data.k[t-1].e;for(n=i.length,r=0;r<n;r+=1)e[r]=i[r],e.value[r]=i[r];return e}function framesToTime(t,e){return e||(e=elem.comp.globalData.frameRate),t/e}function timeToFrames(t,e){return t||0===t||(t=time),e||(e=elem.comp.globalData.frameRate),t*e}function seedRandom(t){BMMath.seedrandom(randSeed+t)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(t,e){return"string"==typeof value?void 0===e?value.substring(t):value.substring(t,e):""}function substr(t,e){return"string"==typeof value?void 0===e?value.substr(t):value.substr(t,e):""}function posterizeTime(t){time=0===t?0:Math.floor(time*t)/t,value=valueAtTime(time)}var index=elem.data.ind,hasParent=!(!elem.hierarchy||!elem.hierarchy.length),parent,randSeed=Math.floor(1e6*Math.random()),globalData=elem.globalData;function executeExpression(t){return value=t,this.frameExpressionId===elem.globalData.frameId&&"textSelector"!==this.propType?value:("textSelector"===this.propType&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),4!==elemType||content||(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),(hasParent=!(!elem.hierarchy||!elem.hierarchy.length))&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,_needsRandom&&seedRandom(randSeed+time),needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt)}return executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData],executeExpression}return ob.initiateExpression=initiateExpression,ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath,_lottieGlobal],ob.resetFrame=resetFrame,ob}(),Expressions=function(){var t={initExpressions:function(t){var e=0,r=[];t.renderer.compInterface=CompExpressionInterface(t.renderer),t.renderer.globalData.projectInterface.registerComposition(t.renderer),t.renderer.globalData.pushExpression=function(){e+=1},t.renderer.globalData.popExpression=function(){0==(e-=1)&&function(){var t,e=r.length;for(t=0;t<e;t+=1)r[t].release();r.length=0}()},t.renderer.globalData.registerExpressionProperty=function(t){-1===r.indexOf(t)&&r.push(t)}}};return t.resetFrame=ExpressionManager.resetFrame,t}(),MaskManagerInterface=function(){function t(t,e){this._mask=t,this._data=e}return Object.defineProperty(t.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(t.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),100*this._mask.op.v}}),function(e){var r,n=createSizedArray(e.viewData.length),i=e.viewData.length;for(r=0;r<i;r+=1)n[r]=new t(e.viewData[r],e.masksProperties[r]);return function(t){for(r=0;r<i;){if(e.masksProperties[r].nm===t)return n[r];r+=1}return null}}}(),ExpressionPropertyInterface=function(){var t={pv:0,v:0,mult:1},e={pv:[0,0,0],v:[0,0,0],mult:1};function r(t,e,r){Object.defineProperty(t,"velocity",{get:function(){return e.getVelocityAtTime(e.comp.currentFrame)}}),t.numKeys=e.keyframes?e.keyframes.length:0,t.key=function(n){if(!t.numKeys)return 0;var i;i="s"in e.keyframes[n-1]?e.keyframes[n-1].s:"e"in e.keyframes[n-2]?e.keyframes[n-2].e:e.keyframes[n-2].s;var a="unidimensional"===r?new Number(i):Object.assign({},i);return a.time=e.keyframes[n-1].t/e.elem.comp.globalData.frameRate,a.value="unidimensional"===r?i[0]:i,a},t.valueAtTime=e.getValueAtTime,t.speedAtTime=e.getSpeedAtTime,t.velocityAtTime=e.getVelocityAtTime,t.propertyGroup=e.propertyGroup}function n(){return t}return function(i){return i?"unidimensional"===i.propType?function(e){e&&"pv"in e||(e=t);var n=1/e.mult,i=e.pv*n,a=new Number(i);return a.value=i,r(a,e,"unidimensional"),function(){return e.k&&e.getValue(),i=e.v*n,a.value!==i&&((a=new Number(i)).value=i,r(a,e,"unidimensional")),a}}(i):function(t){t&&"pv"in t||(t=e);var n=1/t.mult,i=t.data&&t.data.l||t.pv.length,a=createTypedArray("float32",i),o=createTypedArray("float32",i);return a.value=o,r(a,t,"multidimensional"),function(){t.k&&t.getValue();for(var e=0;e<i;e+=1)o[e]=t.v[e]*n,a[e]=o[e];return a}}(i):n}}(),TransformExpressionInterface=function(t){function e(t){switch(t){case"scale":case"Scale":case"ADBE Scale":case 6:return e.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return e.rotation;case"ADBE Rotate X":return e.xRotation;case"ADBE Rotate Y":return e.yRotation;case"position":case"Position":case"ADBE Position":case 2:return e.position;case"ADBE Position_0":return e.xPosition;case"ADBE Position_1":return e.yPosition;case"ADBE Position_2":return e.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return e.anchorPoint;case"opacity":case"Opacity":case 11:return e.opacity;default:return null}}var r,n,i,a;return Object.defineProperty(e,"rotation",{get:ExpressionPropertyInterface(t.r||t.rz)}),Object.defineProperty(e,"zRotation",{get:ExpressionPropertyInterface(t.rz||t.r)}),Object.defineProperty(e,"xRotation",{get:ExpressionPropertyInterface(t.rx)}),Object.defineProperty(e,"yRotation",{get:ExpressionPropertyInterface(t.ry)}),Object.defineProperty(e,"scale",{get:ExpressionPropertyInterface(t.s)}),t.p?a=ExpressionPropertyInterface(t.p):(r=ExpressionPropertyInterface(t.px),n=ExpressionPropertyInterface(t.py),t.pz&&(i=ExpressionPropertyInterface(t.pz))),Object.defineProperty(e,"position",{get:function(){return t.p?a():[r(),n(),i?i():0]}}),Object.defineProperty(e,"xPosition",{get:ExpressionPropertyInterface(t.px)}),Object.defineProperty(e,"yPosition",{get:ExpressionPropertyInterface(t.py)}),Object.defineProperty(e,"zPosition",{get:ExpressionPropertyInterface(t.pz)}),Object.defineProperty(e,"anchorPoint",{get:ExpressionPropertyInterface(t.a)}),Object.defineProperty(e,"opacity",{get:ExpressionPropertyInterface(t.o)}),Object.defineProperty(e,"skew",{get:ExpressionPropertyInterface(t.sk)}),Object.defineProperty(e,"skewAxis",{get:ExpressionPropertyInterface(t.sa)}),Object.defineProperty(e,"orientation",{get:ExpressionPropertyInterface(t.or)}),e},LayerExpressionInterface=function(){function t(t){var e=new Matrix;return void 0!==t?this._elem.finalTransform.mProp.getValueAtTime(t).clone(e):this._elem.finalTransform.mProp.applyToMatrix(e),e}function e(t,e){var r=this.getMatrix(e);return r.props[12]=0,r.props[13]=0,r.props[14]=0,this.applyPoint(r,t)}function r(t,e){var r=this.getMatrix(e);return this.applyPoint(r,t)}function n(t,e){var r=this.getMatrix(e);return r.props[12]=0,r.props[13]=0,r.props[14]=0,this.invertPoint(r,t)}function i(t,e){var r=this.getMatrix(e);return this.invertPoint(r,t)}function a(t,e){if(this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t)}return t.applyToPointArray(e[0],e[1],e[2]||0)}function o(t,e){if(this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t)}return t.inversePoint(e)}function s(t){var e=new Matrix;if(e.reset(),this._elem.finalTransform.mProp.applyToMatrix(e),this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(e);return e.inversePoint(t)}return e.inversePoint(t)}function l(){return[1,1,1,1]}return function(c){var h;function u(t){switch(t){case"ADBE Root Vectors Group":case"Contents":case 2:return u.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return h;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return u.effect;case"ADBE Text Properties":return u.textInterface;default:return null}}u.getMatrix=t,u.invertPoint=o,u.applyPoint=a,u.toWorld=r,u.toWorldVec=e,u.fromWorld=i,u.fromWorldVec=n,u.toComp=r,u.fromComp=s,u.sampleImage=l,u.sourceRectAtTime=c.sourceRectAtTime.bind(c),u._elem=c;var f=getDescriptor(h=TransformExpressionInterface(c.finalTransform.mProp),"anchorPoint");return Object.defineProperties(u,{hasParent:{get:function(){return c.hierarchy.length}},parent:{get:function(){return c.hierarchy[0].layerInterface}},rotation:getDescriptor(h,"rotation"),scale:getDescriptor(h,"scale"),position:getDescriptor(h,"position"),opacity:getDescriptor(h,"opacity"),anchorPoint:f,anchor_point:f,transform:{get:function(){return h}},active:{get:function(){return c.isInRange}}}),u.startTime=c.data.st,u.index=c.data.ind,u.source=c.data.refId,u.height=0===c.data.ty?c.data.h:100,u.width=0===c.data.ty?c.data.w:100,u.inPoint=c.data.ip/c.comp.globalData.frameRate,u.outPoint=c.data.op/c.comp.globalData.frameRate,u._name=c.data.nm,u.registerMaskInterface=function(t){u.mask=new MaskManagerInterface(t,c)},u.registerEffectsInterface=function(t){u.effect=t},u}}(),propertyGroupFactory=function(t,e){return function(r){return(r=void 0===r?1:r)<=0?t:e(r-1)}},PropertyInterface=function(t,e){var r={_name:t};return function(t){return(t=void 0===t?1:t)<=0?r:e(t-1)}},EffectsExpressionInterface=function(){function t(r,n,i,a){function o(t){for(var e=r.ef,n=0,i=e.length;n<i;){if(t===e[n].nm||t===e[n].mn||t===e[n].ix)return 5===e[n].ty?c[n]:c[n]();n+=1}throw new Error}var s,l=propertyGroupFactory(o,i),c=[],h=r.ef.length;for(s=0;s<h;s+=1)5===r.ef[s].ty?c.push(t(r.ef[s],n.effectElements[s],n.effectElements[s].propertyGroup,a)):c.push(e(n.effectElements[s],r.ef[s].ty,a,l));return"ADBE Color Control"===r.mn&&Object.defineProperty(o,"color",{get:function(){return c[0]()}}),Object.defineProperties(o,{numProperties:{get:function(){return r.np}},_name:{value:r.nm},propertyGroup:{value:l}}),o.enabled=0!==r.en,o.active=o.enabled,o}function e(t,e,r,n){var i=ExpressionPropertyInterface(t.p);return t.p.setGroupProperty&&t.p.setGroupProperty(PropertyInterface("",n)),function(){return 10===e?r.comp.compInterface(t.p.v):i()}}return{createEffectsInterface:function(e,r){if(e.effectsManager){var n,i=[],a=e.data.ef,o=e.effectsManager.effectElements.length;for(n=0;n<o;n+=1)i.push(t(a[n],e.effectsManager.effectElements[n],r,e));var s=e.data.ef||[],l=function(t){for(n=0,o=s.length;n<o;){if(t===s[n].nm||t===s[n].mn||t===s[n].ix)return i[n];n+=1}return null};return Object.defineProperty(l,"numProperties",{get:function(){return s.length}}),l}return null}}}(),ShapePathInterface=function(t,e,r){var n=e.sh;function i(t){return"Shape"===t||"shape"===t||"Path"===t||"path"===t||"ADBE Vector Shape"===t||2===t?i.path:null}var a=propertyGroupFactory(i,r);return n.setGroupProperty(PropertyInterface("Path",a)),Object.defineProperties(i,{path:{get:function(){return n.k&&n.getValue(),n}},shape:{get:function(){return n.k&&n.getValue(),n}},_name:{value:t.nm},ix:{value:t.ix},propertyIndex:{value:t.ix},mn:{value:t.mn},propertyGroup:{value:r}}),i},ShapeExpressionInterface=function(){function t(t,o,f){var p,d=[],m=t?t.length:0;for(p=0;p<m;p+=1)"gr"===t[p].ty?d.push(e(t[p],o[p],f)):"fl"===t[p].ty?d.push(r(t[p],o[p],f)):"st"===t[p].ty?d.push(i(t[p],o[p],f)):"tm"===t[p].ty?d.push(a(t[p],o[p],f)):"tr"===t[p].ty||("el"===t[p].ty?d.push(s(t[p],o[p],f)):"sr"===t[p].ty?d.push(l(t[p],o[p],f)):"sh"===t[p].ty?d.push(ShapePathInterface(t[p],o[p],f)):"rc"===t[p].ty?d.push(c(t[p],o[p],f)):"rd"===t[p].ty?d.push(h(t[p],o[p],f)):"rp"===t[p].ty?d.push(u(t[p],o[p],f)):"gf"===t[p].ty?d.push(n(t[p],o[p],f)):d.push((t[p],o[p],function(){return null})));return d}function e(e,r,n){var i=function(t){switch(t){case"ADBE Vectors Group":case"Contents":case 2:return i.content;default:return i.transform}};i.propertyGroup=propertyGroupFactory(i,n);var a=function(e,r,n){var i,a=function(t){for(var e=0,r=i.length;e<r;){if(i[e]._name===t||i[e].mn===t||i[e].propertyIndex===t||i[e].ix===t||i[e].ind===t)return i[e];e+=1}return"number"==typeof t?i[t-1]:null};a.propertyGroup=propertyGroupFactory(a,n),i=t(e.it,r.it,a.propertyGroup),a.numProperties=i.length;var s=o(e.it[e.it.length-1],r.it[r.it.length-1],a.propertyGroup);return a.transform=s,a.propertyIndex=e.cix,a._name=e.nm,a}(e,r,i.propertyGroup),s=o(e.it[e.it.length-1],r.it[r.it.length-1],i.propertyGroup);return i.content=a,i.transform=s,Object.defineProperty(i,"_name",{get:function(){return e.nm}}),i.numProperties=e.np,i.propertyIndex=e.ix,i.nm=e.nm,i.mn=e.mn,i}function r(t,e,r){function n(t){return"Color"===t||"color"===t?n.color:"Opacity"===t||"opacity"===t?n.opacity:null}return Object.defineProperties(n,{color:{get:ExpressionPropertyInterface(e.c)},opacity:{get:ExpressionPropertyInterface(e.o)},_name:{value:t.nm},mn:{value:t.mn}}),e.c.setGroupProperty(PropertyInterface("Color",r)),e.o.setGroupProperty(PropertyInterface("Opacity",r)),n}function n(t,e,r){function n(t){return"Start Point"===t||"start point"===t?n.startPoint:"End Point"===t||"end point"===t?n.endPoint:"Opacity"===t||"opacity"===t?n.opacity:null}return Object.defineProperties(n,{startPoint:{get:ExpressionPropertyInterface(e.s)},endPoint:{get:ExpressionPropertyInterface(e.e)},opacity:{get:ExpressionPropertyInterface(e.o)},type:{get:function(){return"a"}},_name:{value:t.nm},mn:{value:t.mn}}),e.s.setGroupProperty(PropertyInterface("Start Point",r)),e.e.setGroupProperty(PropertyInterface("End Point",r)),e.o.setGroupProperty(PropertyInterface("Opacity",r)),n}function i(t,e,r){var n,i=propertyGroupFactory(c,r),a=propertyGroupFactory(l,i);function o(r){Object.defineProperty(l,t.d[r].nm,{get:ExpressionPropertyInterface(e.d.dataProps[r].p)})}var s=t.d?t.d.length:0,l={};for(n=0;n<s;n+=1)o(n),e.d.dataProps[n].p.setGroupProperty(a);function c(t){return"Color"===t||"color"===t?c.color:"Opacity"===t||"opacity"===t?c.opacity:"Stroke Width"===t||"stroke width"===t?c.strokeWidth:null}return Object.defineProperties(c,{color:{get:ExpressionPropertyInterface(e.c)},opacity:{get:ExpressionPropertyInterface(e.o)},strokeWidth:{get:ExpressionPropertyInterface(e.w)},dash:{get:function(){return l}},_name:{value:t.nm},mn:{value:t.mn}}),e.c.setGroupProperty(PropertyInterface("Color",i)),e.o.setGroupProperty(PropertyInterface("Opacity",i)),e.w.setGroupProperty(PropertyInterface("Stroke Width",i)),c}function a(t,e,r){function n(e){return e===t.e.ix||"End"===e||"end"===e?n.end:e===t.s.ix?n.start:e===t.o.ix?n.offset:null}var i=propertyGroupFactory(n,r);return n.propertyIndex=t.ix,e.s.setGroupProperty(PropertyInterface("Start",i)),e.e.setGroupProperty(PropertyInterface("End",i)),e.o.setGroupProperty(PropertyInterface("Offset",i)),n.propertyIndex=t.ix,n.propertyGroup=r,Object.defineProperties(n,{start:{get:ExpressionPropertyInterface(e.s)},end:{get:ExpressionPropertyInterface(e.e)},offset:{get:ExpressionPropertyInterface(e.o)},_name:{value:t.nm}}),n.mn=t.mn,n}function o(t,e,r){function n(e){return t.a.ix===e||"Anchor Point"===e?n.anchorPoint:t.o.ix===e||"Opacity"===e?n.opacity:t.p.ix===e||"Position"===e?n.position:t.r.ix===e||"Rotation"===e||"ADBE Vector Rotation"===e?n.rotation:t.s.ix===e||"Scale"===e?n.scale:t.sk&&t.sk.ix===e||"Skew"===e?n.skew:t.sa&&t.sa.ix===e||"Skew Axis"===e?n.skewAxis:null}var i=propertyGroupFactory(n,r);return e.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",i)),e.transform.mProps.p.setGroupProperty(PropertyInterface("Position",i)),e.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",i)),e.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",i)),e.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",i)),e.transform.mProps.sk&&(e.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",i)),e.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",i))),e.transform.op.setGroupProperty(PropertyInterface("Opacity",i)),Object.defineProperties(n,{opacity:{get:ExpressionPropertyInterface(e.transform.mProps.o)},position:{get:ExpressionPropertyInterface(e.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(e.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(e.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(e.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(e.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(e.transform.mProps.sa)},_name:{value:t.nm}}),n.ty="tr",n.mn=t.mn,n.propertyGroup=r,n}function s(t,e,r){function n(e){return t.p.ix===e?n.position:t.s.ix===e?n.size:null}var i=propertyGroupFactory(n,r);n.propertyIndex=t.ix;var a="tm"===e.sh.ty?e.sh.prop:e.sh;return a.s.setGroupProperty(PropertyInterface("Size",i)),a.p.setGroupProperty(PropertyInterface("Position",i)),Object.defineProperties(n,{size:{get:ExpressionPropertyInterface(a.s)},position:{get:ExpressionPropertyInterface(a.p)},_name:{value:t.nm}}),n.mn=t.mn,n}function l(t,e,r){function n(e){return t.p.ix===e?n.position:t.r.ix===e?n.rotation:t.pt.ix===e?n.points:t.or.ix===e||"ADBE Vector Star Outer Radius"===e?n.outerRadius:t.os.ix===e?n.outerRoundness:!t.ir||t.ir.ix!==e&&"ADBE Vector Star Inner Radius"!==e?t.is&&t.is.ix===e?n.innerRoundness:null:n.innerRadius}var i=propertyGroupFactory(n,r),a="tm"===e.sh.ty?e.sh.prop:e.sh;return n.propertyIndex=t.ix,a.or.setGroupProperty(PropertyInterface("Outer Radius",i)),a.os.setGroupProperty(PropertyInterface("Outer Roundness",i)),a.pt.setGroupProperty(PropertyInterface("Points",i)),a.p.setGroupProperty(PropertyInterface("Position",i)),a.r.setGroupProperty(PropertyInterface("Rotation",i)),t.ir&&(a.ir.setGroupProperty(PropertyInterface("Inner Radius",i)),a.is.setGroupProperty(PropertyInterface("Inner Roundness",i))),Object.defineProperties(n,{position:{get:ExpressionPropertyInterface(a.p)},rotation:{get:ExpressionPropertyInterface(a.r)},points:{get:ExpressionPropertyInterface(a.pt)},outerRadius:{get:ExpressionPropertyInterface(a.or)},outerRoundness:{get:ExpressionPropertyInterface(a.os)},innerRadius:{get:ExpressionPropertyInterface(a.ir)},innerRoundness:{get:ExpressionPropertyInterface(a.is)},_name:{value:t.nm}}),n.mn=t.mn,n}function c(t,e,r){function n(e){return t.p.ix===e?n.position:t.r.ix===e?n.roundness:t.s.ix===e||"Size"===e||"ADBE Vector Rect Size"===e?n.size:null}var i=propertyGroupFactory(n,r),a="tm"===e.sh.ty?e.sh.prop:e.sh;return n.propertyIndex=t.ix,a.p.setGroupProperty(PropertyInterface("Position",i)),a.s.setGroupProperty(PropertyInterface("Size",i)),a.r.setGroupProperty(PropertyInterface("Rotation",i)),Object.defineProperties(n,{position:{get:ExpressionPropertyInterface(a.p)},roundness:{get:ExpressionPropertyInterface(a.r)},size:{get:ExpressionPropertyInterface(a.s)},_name:{value:t.nm}}),n.mn=t.mn,n}function h(t,e,r){function n(e){return t.r.ix===e||"Round Corners 1"===e?n.radius:null}var i=propertyGroupFactory(n,r),a=e;return n.propertyIndex=t.ix,a.rd.setGroupProperty(PropertyInterface("Radius",i)),Object.defineProperties(n,{radius:{get:ExpressionPropertyInterface(a.rd)},_name:{value:t.nm}}),n.mn=t.mn,n}function u(t,e,r){function n(e){return t.c.ix===e||"Copies"===e?n.copies:t.o.ix===e||"Offset"===e?n.offset:null}var i=propertyGroupFactory(n,r),a=e;return n.propertyIndex=t.ix,a.c.setGroupProperty(PropertyInterface("Copies",i)),a.o.setGroupProperty(PropertyInterface("Offset",i)),Object.defineProperties(n,{copies:{get:ExpressionPropertyInterface(a.c)},offset:{get:ExpressionPropertyInterface(a.o)},_name:{value:t.nm}}),n.mn=t.mn,n}return function(e,r,n){var i;function a(t){if("number"==typeof t)return 0===(t=void 0===t?1:t)?n:i[t-1];for(var e=0,r=i.length;e<r;){if(i[e]._name===t)return i[e];e+=1}return null}return a.propertyGroup=propertyGroupFactory(a,(function(){return n})),i=t(e,r,a.propertyGroup),a.numProperties=i.length,a._name="Contents",a}}(),TextExpressionInterface=function(t){var e;function r(t){return"ADBE Text Document"===t?r.sourceText:null}return Object.defineProperty(r,"sourceText",{get:function(){t.textProperty.getValue();var r=t.textProperty.currentData.t;return e&&r===e.value||((e=new String(r)).value=r||new String(r),Object.defineProperty(e,"style",{get:function(){return{fillColor:t.textProperty.currentData.fc}}})),e}}),r};function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}var FootageInterface=(dataInterfaceFactory=function(t){function e(t){return"Outline"===t?e.outlineInterface():null}return e._name="Outline",e.outlineInterface=function(t){var e="",r=t.getFootageData();function n(t){if(r[t])return e=t,"object"===_typeof(r=r[t])?n:r;var i=t.indexOf(e);if(-1!==i){var a=parseInt(t.substr(i+e.length),10);return"object"===_typeof(r=r[a])?n:r}return""}return function(){return e="",r=t.getFootageData(),n}}(t),e},function(t){function e(t){return"Data"===t?e.dataInterface:null}return e._name="Data",e.dataInterface=dataInterfaceFactory(t),e}),dataInterfaceFactory,interfaces={layer:LayerExpressionInterface,effects:EffectsExpressionInterface,comp:CompExpressionInterface,shape:ShapeExpressionInterface,text:TextExpressionInterface,footage:FootageInterface};function getInterface(t){return interfaces[t]||null}var expressionHelpers={searchExpressions:function(t,e,r){e.x&&(r.k=!0,r.x=!0,r.initiateExpression=ExpressionManager.initiateExpression,r.effectsSequence.push(r.initiateExpression(t,e,r).bind(r)))},getSpeedAtTime:function(t){var e=this.getValueAtTime(t),r=this.getValueAtTime(t+-.01),n=0;if(e.length){var i;for(i=0;i<e.length;i+=1)n+=Math.pow(r[i]-e[i],2);n=100*Math.sqrt(n)}else n=0;return n},getVelocityAtTime:function(t){if(void 0!==this.vel)return this.vel;var e,r,n=-.001,i=this.getValueAtTime(t),a=this.getValueAtTime(t+n);if(i.length)for(e=createTypedArray("float32",i.length),r=0;r<i.length;r+=1)e[r]=(a[r]-i[r])/n;else e=(a-i)/n;return e},getValueAtTime:function(t){return t*=this.elem.globalData.frameRate,(t-=this.offsetTime)!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<t?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(t,this._cachingAtTime),this._cachingAtTime.lastFrame=t),this._cachingAtTime.value},getStaticValueAtTime:function(){return this.pv},setGroupProperty:function(t){this.propertyGroup=t}};function addPropertyDecorator(){function t(t,e,r){if(!this.k||!this.keyframes)return this.pv;t=t?t.toLowerCase():"";var n,i,a,o,s,l=this.comp.renderedFrame,c=this.keyframes,h=c[c.length-1].t;if(l<=h)return this.pv;if(r?i=h-(n=e?Math.abs(h-this.elem.comp.globalData.frameRate*e):Math.max(0,h-this.elem.data.ip)):((!e||e>c.length-1)&&(e=c.length-1),n=h-(i=c[c.length-1-e].t)),"pingpong"===t){if(Math.floor((l-i)/n)%2!=0)return this.getValueAtTime((n-(l-i)%n+i)/this.comp.globalData.frameRate,0)}else{if("offset"===t){var u=this.getValueAtTime(i/this.comp.globalData.frameRate,0),f=this.getValueAtTime(h/this.comp.globalData.frameRate,0),p=this.getValueAtTime(((l-i)%n+i)/this.comp.globalData.frameRate,0),d=Math.floor((l-i)/n);if(this.pv.length){for(o=(s=new Array(u.length)).length,a=0;a<o;a+=1)s[a]=(f[a]-u[a])*d+p[a];return s}return(f-u)*d+p}if("continue"===t){var m=this.getValueAtTime(h/this.comp.globalData.frameRate,0),y=this.getValueAtTime((h-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(o=(s=new Array(m.length)).length,a=0;a<o;a+=1)s[a]=m[a]+(m[a]-y[a])*((l-h)/this.comp.globalData.frameRate)/5e-4;return s}return m+(l-h)/.001*(m-y)}}return this.getValueAtTime(((l-i)%n+i)/this.comp.globalData.frameRate,0)}function e(t,e,r){if(!this.k)return this.pv;t=t?t.toLowerCase():"";var n,i,a,o,s,l=this.comp.renderedFrame,c=this.keyframes,h=c[0].t;if(l>=h)return this.pv;if(r?i=h+(n=e?Math.abs(this.elem.comp.globalData.frameRate*e):Math.max(0,this.elem.data.op-h)):((!e||e>c.length-1)&&(e=c.length-1),n=(i=c[e].t)-h),"pingpong"===t){if(Math.floor((h-l)/n)%2==0)return this.getValueAtTime(((h-l)%n+h)/this.comp.globalData.frameRate,0)}else{if("offset"===t){var u=this.getValueAtTime(h/this.comp.globalData.frameRate,0),f=this.getValueAtTime(i/this.comp.globalData.frameRate,0),p=this.getValueAtTime((n-(h-l)%n+h)/this.comp.globalData.frameRate,0),d=Math.floor((h-l)/n)+1;if(this.pv.length){for(o=(s=new Array(u.length)).length,a=0;a<o;a+=1)s[a]=p[a]-(f[a]-u[a])*d;return s}return p-(f-u)*d}if("continue"===t){var m=this.getValueAtTime(h/this.comp.globalData.frameRate,0),y=this.getValueAtTime((h+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(o=(s=new Array(m.length)).length,a=0;a<o;a+=1)s[a]=m[a]+(m[a]-y[a])*(h-l)/.001;return s}return m+(m-y)*(h-l)/.001}}return this.getValueAtTime((n-((h-l)%n+h))/this.comp.globalData.frameRate,0)}function r(t,e){if(!this.k)return this.pv;if(t=.5*(t||.4),(e=Math.floor(e||5))<=1)return this.pv;var r,n,i=this.comp.renderedFrame/this.comp.globalData.frameRate,a=i-t,o=e>1?(i+t-a)/(e-1):1,s=0,l=0;for(r=this.pv.length?createTypedArray("float32",this.pv.length):0;s<e;){if(n=this.getValueAtTime(a+s*o),this.pv.length)for(l=0;l<this.pv.length;l+=1)r[l]+=n[l];else r+=n;s+=1}if(this.pv.length)for(l=0;l<this.pv.length;l+=1)r[l]/=e;else r/=e;return r}function n(t){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var e=this._transformCachingAtTime.v;if(e.cloneFromProps(this.pre.props),this.appliedTransformations<1){var r=this.a.getValueAtTime(t);e.translate(-r[0]*this.a.mult,-r[1]*this.a.mult,r[2]*this.a.mult)}if(this.appliedTransformations<2){var n=this.s.getValueAtTime(t);e.scale(n[0]*this.s.mult,n[1]*this.s.mult,n[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var i=this.sk.getValueAtTime(t),a=this.sa.getValueAtTime(t);e.skewFromAxis(-i*this.sk.mult,a*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var o=this.r.getValueAtTime(t);e.rotate(-o*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var s=this.rz.getValueAtTime(t),l=this.ry.getValueAtTime(t),c=this.rx.getValueAtTime(t),h=this.or.getValueAtTime(t);e.rotateZ(-s*this.rz.mult).rotateY(l*this.ry.mult).rotateX(c*this.rx.mult).rotateZ(-h[2]*this.or.mult).rotateY(h[1]*this.or.mult).rotateX(h[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var u=this.px.getValueAtTime(t),f=this.py.getValueAtTime(t);if(this.data.p.z){var p=this.pz.getValueAtTime(t);e.translate(u*this.px.mult,f*this.py.mult,-p*this.pz.mult)}else e.translate(u*this.px.mult,f*this.py.mult,0)}else{var d=this.p.getValueAtTime(t);e.translate(d[0]*this.p.mult,d[1]*this.p.mult,-d[2]*this.p.mult)}return e}function i(){return this.v.clone(new Matrix)}var a=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(t,e,r){var o=a(t,e,r);return o.dynamicProperties.length?o.getValueAtTime=n.bind(o):o.getValueAtTime=i.bind(o),o.setGroupProperty=expressionHelpers.setGroupProperty,o};var o=PropertyFactory.getProp;PropertyFactory.getProp=function(n,i,a,s,l){var c=o(n,i,a,s,l);c.kf?c.getValueAtTime=expressionHelpers.getValueAtTime.bind(c):c.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(c),c.setGroupProperty=expressionHelpers.setGroupProperty,c.loopOut=t,c.loopIn=e,c.smooth=r,c.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(c),c.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(c),c.numKeys=1===i.a?i.k.length:0,c.propertyIndex=i.ix;var h=0;return 0!==a&&(h=createTypedArray("float32",1===i.a?i.k[0].s.length:i.k.length)),c._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:h},expressionHelpers.searchExpressions(n,i,c),c.k&&l.addDynamicProperty(c),c};var s=ShapePropertyFactory.getConstructorFunction(),l=ShapePropertyFactory.getKeyframedConstructorFunction();function c(){}c.prototype={vertices:function(t,e){this.k&&this.getValue();var r,n=this.v;void 0!==e&&(n=this.getValueAtTime(e,0));var i=n._length,a=n[t],o=n.v,s=createSizedArray(i);for(r=0;r<i;r+=1)s[r]="i"===t||"o"===t?[a[r][0]-o[r][0],a[r][1]-o[r][1]]:[a[r][0],a[r][1]];return s},points:function(t){return this.vertices("v",t)},inTangents:function(t){return this.vertices("i",t)},outTangents:function(t){return this.vertices("o",t)},isClosed:function(){return this.v.c},pointOnPath:function(t,e){var r=this.v;void 0!==e&&(r=this.getValueAtTime(e,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(r));for(var n,i=this._segmentsLength,a=i.lengths,o=i.totalLength*t,s=0,l=a.length,c=0;s<l;){if(c+a[s].addedLength>o){var h=s,u=r.c&&s===l-1?0:s+1,f=(o-c)/a[s].addedLength;n=bez.getPointInSegment(r.v[h],r.v[u],r.o[h],r.i[u],f,a[s]);break}c+=a[s].addedLength,s+=1}return n||(n=r.c?[r.v[0][0],r.v[0][1]]:[r.v[r._length-1][0],r.v[r._length-1][1]]),n},vectorOnPath:function(t,e,r){1==t?t=this.v.c:0==t&&(t=.999);var n=this.pointOnPath(t,e),i=this.pointOnPath(t+.001,e),a=i[0]-n[0],o=i[1]-n[1],s=Math.sqrt(Math.pow(a,2)+Math.pow(o,2));return 0===s?[0,0]:"tangent"===r?[a/s,o/s]:[-o/s,a/s]},tangentOnPath:function(t,e){return this.vectorOnPath(t,e,"tangent")},normalOnPath:function(t,e){return this.vectorOnPath(t,e,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([c],s),extendPrototype([c],l),l.prototype.getValueAtTime=function(t){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),t*=this.elem.globalData.frameRate,(t-=this.offsetTime)!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<t?this._caching.lastIndex:0,this._cachingAtTime.lastTime=t,this.interpolateShape(t,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue},l.prototype.initiateExpression=ExpressionManager.initiateExpression;var h=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(t,e,r,n,i){var a=h(t,e,r,n,i);return a.propertyIndex=e.ix,a.lock=!1,3===r?expressionHelpers.searchExpressions(t,e.pt,a):4===r&&expressionHelpers.searchExpressions(t,e.ks,a),a.k&&t.addDynamicProperty(a),a}}function initialize$1(){addPropertyDecorator()}function addDecorator(){TextProperty.prototype.getExpressionValue=function(t,e){var r=this.calculateExpression(e);if(t.t!==r){var n={};return this.copyData(n,t),n.t=r.toString(),n.__complete=!1,n}return t},TextProperty.prototype.searchProperty=function(){var t=this.searchKeyframes(),e=this.searchExpressions();return this.kf=t||e,this.kf},TextProperty.prototype.searchExpressions=function(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null}}function initialize(){addDecorator()}function SVGComposableEffect(){}SVGComposableEffect.prototype={createMergeNode:function(t,e){var r,n,i=createNS("feMerge");for(i.setAttribute("result",t),n=0;n<e.length;n+=1)(r=createNS("feMergeNode")).setAttribute("in",e[n]),i.appendChild(r),i.appendChild(r);return i}};var linearFilterValue="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";function SVGTintFilter(t,e,r,n,i){this.filterManager=e;var a=createNS("feColorMatrix");a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","linearRGB"),a.setAttribute("values",linearFilterValue+" 1 0"),this.linearFilter=a,a.setAttribute("result",n+"_tint_1"),t.appendChild(a),(a=createNS("feColorMatrix")).setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),a.setAttribute("result",n+"_tint_2"),t.appendChild(a),this.matrixFilter=a;var o=this.createMergeNode(n,[i,n+"_tint_1",n+"_tint_2"]);t.appendChild(o)}function SVGFillFilter(t,e,r,n){this.filterManager=e;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),i.setAttribute("result",n),t.appendChild(i),this.matrixFilter=i}function SVGStrokeEffect(t,e,r){this.initialized=!1,this.filterManager=e,this.elem=r,this.paths=[]}function SVGTritoneFilter(t,e,r,n){this.filterManager=e;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","linearRGB"),i.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),t.appendChild(i);var a=createNS("feComponentTransfer");a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",n),this.matrixFilter=a;var o=createNS("feFuncR");o.setAttribute("type","table"),a.appendChild(o),this.feFuncR=o;var s=createNS("feFuncG");s.setAttribute("type","table"),a.appendChild(s),this.feFuncG=s;var l=createNS("feFuncB");l.setAttribute("type","table"),a.appendChild(l),this.feFuncB=l,t.appendChild(a)}function SVGProLevelsFilter(t,e,r,n){this.filterManager=e;var i=this.filterManager.effectElements,a=createNS("feComponentTransfer");(i[10].p.k||0!==i[10].p.v||i[11].p.k||1!==i[11].p.v||i[12].p.k||1!==i[12].p.v||i[13].p.k||0!==i[13].p.v||i[14].p.k||1!==i[14].p.v)&&(this.feFuncR=this.createFeFunc("feFuncR",a)),(i[17].p.k||0!==i[17].p.v||i[18].p.k||1!==i[18].p.v||i[19].p.k||1!==i[19].p.v||i[20].p.k||0!==i[20].p.v||i[21].p.k||1!==i[21].p.v)&&(this.feFuncG=this.createFeFunc("feFuncG",a)),(i[24].p.k||0!==i[24].p.v||i[25].p.k||1!==i[25].p.v||i[26].p.k||1!==i[26].p.v||i[27].p.k||0!==i[27].p.v||i[28].p.k||1!==i[28].p.v)&&(this.feFuncB=this.createFeFunc("feFuncB",a)),(i[31].p.k||0!==i[31].p.v||i[32].p.k||1!==i[32].p.v||i[33].p.k||1!==i[33].p.v||i[34].p.k||0!==i[34].p.v||i[35].p.k||1!==i[35].p.v)&&(this.feFuncA=this.createFeFunc("feFuncA",a)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(a.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(a)),(i[3].p.k||0!==i[3].p.v||i[4].p.k||1!==i[4].p.v||i[5].p.k||1!==i[5].p.v||i[6].p.k||0!==i[6].p.v||i[7].p.k||1!==i[7].p.v)&&((a=createNS("feComponentTransfer")).setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",n),t.appendChild(a),this.feFuncRComposed=this.createFeFunc("feFuncR",a),this.feFuncGComposed=this.createFeFunc("feFuncG",a),this.feFuncBComposed=this.createFeFunc("feFuncB",a))}function SVGDropShadowEffect(t,e,r,n,i){var a=e.container.globalData.renderConfig.filterSize,o=e.data.fs||a;t.setAttribute("x",o.x||a.x),t.setAttribute("y",o.y||a.y),t.setAttribute("width",o.width||a.width),t.setAttribute("height",o.height||a.height),this.filterManager=e;var s=createNS("feGaussianBlur");s.setAttribute("in","SourceAlpha"),s.setAttribute("result",n+"_drop_shadow_1"),s.setAttribute("stdDeviation","0"),this.feGaussianBlur=s,t.appendChild(s);var l=createNS("feOffset");l.setAttribute("dx","25"),l.setAttribute("dy","0"),l.setAttribute("in",n+"_drop_shadow_1"),l.setAttribute("result",n+"_drop_shadow_2"),this.feOffset=l,t.appendChild(l);var c=createNS("feFlood");c.setAttribute("flood-color","#00ff00"),c.setAttribute("flood-opacity","1"),c.setAttribute("result",n+"_drop_shadow_3"),this.feFlood=c,t.appendChild(c);var h=createNS("feComposite");h.setAttribute("in",n+"_drop_shadow_3"),h.setAttribute("in2",n+"_drop_shadow_2"),h.setAttribute("operator","in"),h.setAttribute("result",n+"_drop_shadow_4"),t.appendChild(h);var u=this.createMergeNode(n,[n+"_drop_shadow_4",i]);t.appendChild(u)}extendPrototype([SVGComposableEffect],SVGTintFilter),SVGTintFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=this.filterManager.effectElements[2].p.v/100;this.linearFilter.setAttribute("values",linearFilterValue+" "+n+" 0"),this.matrixFilter.setAttribute("values",r[0]-e[0]+" 0 0 0 "+e[0]+" "+(r[1]-e[1])+" 0 0 0 "+e[1]+" "+(r[2]-e[2])+" 0 0 0 "+e[2]+" 0 0 0 1 0")}},SVGFillFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[2].p.v,r=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+e[0]+" 0 0 0 0 "+e[1]+" 0 0 0 0 "+e[2]+" 0 0 0 "+r+" 0")}},SVGStrokeEffect.prototype.initialize=function(){var t,e,r,n,i=this.elem.layerElement.children||this.elem.layerElement.childNodes;for(1===this.filterManager.effectElements[1].p.v?(n=this.elem.maskManager.masksProperties.length,r=0):n=1+(r=this.filterManager.effectElements[0].p.v-1),(e=createNS("g")).setAttribute("fill","none"),e.setAttribute("stroke-linecap","round"),e.setAttribute("stroke-dashoffset",1);r<n;r+=1)t=createNS("path"),e.appendChild(t),this.paths.push({p:t,m:r});if(3===this.filterManager.effectElements[10].p.v){var a=createNS("mask"),o=createElementID();a.setAttribute("id",o),a.setAttribute("mask-type","alpha"),a.appendChild(e),this.elem.globalData.defs.appendChild(a);var s=createNS("g");for(s.setAttribute("mask","url("+getLocationHref()+"#"+o+")");i[0];)s.appendChild(i[0]);this.elem.layerElement.appendChild(s),this.masker=a,e.setAttribute("stroke","#fff")}else if(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v){if(2===this.filterManager.effectElements[10].p.v)for(i=this.elem.layerElement.children||this.elem.layerElement.childNodes;i.length;)this.elem.layerElement.removeChild(i[0]);this.elem.layerElement.appendChild(e),this.elem.layerElement.removeAttribute("mask"),e.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=e},SVGStrokeEffect.prototype.renderFrame=function(t){var e;this.initialized||this.initialize();var r,n,i=this.paths.length;for(e=0;e<i;e+=1)if(-1!==this.paths[e].m&&(r=this.elem.maskManager.viewData[this.paths[e].m],n=this.paths[e].p,(t||this.filterManager._mdf||r.prop._mdf)&&n.setAttribute("d",r.lastPath),t||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||r.prop._mdf)){var a;if(0!==this.filterManager.effectElements[7].p.v||100!==this.filterManager.effectElements[8].p.v){var o=.01*Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),s=.01*Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),l=n.getTotalLength();a="0 0 0 "+l*o+" ";var c,h=l*(s-o),u=1+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01,f=Math.floor(h/u);for(c=0;c<f;c+=1)a+="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01+" ";a+="0 "+10*l+" 0 0"}else a="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01;n.setAttribute("stroke-dasharray",a)}if((t||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",2*this.filterManager.effectElements[4].p.v),(t||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v)&&(t||this.filterManager.effectElements[3].p._mdf)){var p=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(255*p[0])+","+bmFloor(255*p[1])+","+bmFloor(255*p[2])+")")}},SVGTritoneFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=this.filterManager.effectElements[2].p.v,i=n[0]+" "+r[0]+" "+e[0],a=n[1]+" "+r[1]+" "+e[1],o=n[2]+" "+r[2]+" "+e[2];this.feFuncR.setAttribute("tableValues",i),this.feFuncG.setAttribute("tableValues",a),this.feFuncB.setAttribute("tableValues",o)}},SVGProLevelsFilter.prototype.createFeFunc=function(t,e){var r=createNS(t);return r.setAttribute("type","table"),e.appendChild(r),r},SVGProLevelsFilter.prototype.getTableValue=function(t,e,r,n,i){for(var a,o,s=0,l=Math.min(t,e),c=Math.max(t,e),h=Array.call(null,{length:256}),u=0,f=i-n,p=e-t;s<=256;)o=(a=s/256)<=l?p<0?i:n:a>=c?p<0?n:i:n+f*Math.pow((a-t)/p,1/r),h[u]=o,u+=1,s+=256/255;return h.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e,r=this.filterManager.effectElements;this.feFuncRComposed&&(t||r[3].p._mdf||r[4].p._mdf||r[5].p._mdf||r[6].p._mdf||r[7].p._mdf)&&(e=this.getTableValue(r[3].p.v,r[4].p.v,r[5].p.v,r[6].p.v,r[7].p.v),this.feFuncRComposed.setAttribute("tableValues",e),this.feFuncGComposed.setAttribute("tableValues",e),this.feFuncBComposed.setAttribute("tableValues",e)),this.feFuncR&&(t||r[10].p._mdf||r[11].p._mdf||r[12].p._mdf||r[13].p._mdf||r[14].p._mdf)&&(e=this.getTableValue(r[10].p.v,r[11].p.v,r[12].p.v,r[13].p.v,r[14].p.v),this.feFuncR.setAttribute("tableValues",e)),this.feFuncG&&(t||r[17].p._mdf||r[18].p._mdf||r[19].p._mdf||r[20].p._mdf||r[21].p._mdf)&&(e=this.getTableValue(r[17].p.v,r[18].p.v,r[19].p.v,r[20].p.v,r[21].p.v),this.feFuncG.setAttribute("tableValues",e)),this.feFuncB&&(t||r[24].p._mdf||r[25].p._mdf||r[26].p._mdf||r[27].p._mdf||r[28].p._mdf)&&(e=this.getTableValue(r[24].p.v,r[25].p.v,r[26].p.v,r[27].p.v,r[28].p.v),this.feFuncB.setAttribute("tableValues",e)),this.feFuncA&&(t||r[31].p._mdf||r[32].p._mdf||r[33].p._mdf||r[34].p._mdf||r[35].p._mdf)&&(e=this.getTableValue(r[31].p.v,r[32].p.v,r[33].p.v,r[34].p.v,r[35].p.v),this.feFuncA.setAttribute("tableValues",e))}},extendPrototype([SVGComposableEffect],SVGDropShadowEffect),SVGDropShadowEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){if((t||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),t||this.filterManager.effectElements[0].p._mdf){var e=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(255*e[0]),Math.round(255*e[1]),Math.round(255*e[2])))}if((t||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),t||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var r=this.filterManager.effectElements[3].p.v,n=(this.filterManager.effectElements[2].p.v-90)*degToRads,i=r*Math.cos(n),a=r*Math.sin(n);this.feOffset.setAttribute("dx",i),this.feOffset.setAttribute("dy",a)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(t,e,r){this.initialized=!1,this.filterManager=e,this.filterElem=t,this.elem=r,r.matteElement=createNS("g"),r.matteElement.appendChild(r.layerElement),r.matteElement.appendChild(r.transformedElement),r.baseElement=r.matteElement}function SVGGaussianBlurEffect(t,e,r,n){t.setAttribute("x","-100%"),t.setAttribute("y","-100%"),t.setAttribute("width","300%"),t.setAttribute("height","300%"),this.filterManager=e;var i=createNS("feGaussianBlur");i.setAttribute("result",n),t.appendChild(i),this.feGaussianBlur=i}function TransformEffect(){}function SVGTransformEffect(t,e){this.init(e)}function CVTransformEffect(t){this.init(t)}return SVGMatte3Effect.prototype.findSymbol=function(t){for(var e=0,r=_svgMatteSymbols.length;e<r;){if(_svgMatteSymbols[e]===t)return _svgMatteSymbols[e];e+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(t,e){var r=t.layerElement.parentNode;if(r){for(var n,i=r.children,a=0,o=i.length;a<o&&i[a]!==t.layerElement;)a+=1;a<=o-2&&(n=i[a+1]);var s=createNS("use");s.setAttribute("href","#"+e),n?r.insertBefore(s,n):r.appendChild(s)}},SVGMatte3Effect.prototype.setElementAsMask=function(t,e){if(!this.findSymbol(e)){var r=createElementID(),n=createNS("mask");n.setAttribute("id",e.layerId),n.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(e);var i=t.globalData.defs;i.appendChild(n);var a=createNS("symbol");a.setAttribute("id",r),this.replaceInParent(e,r),a.appendChild(e.layerElement),i.appendChild(a);var o=createNS("use");o.setAttribute("href","#"+r),n.appendChild(o),e.data.hd=!1,e.show()}t.setMatte(e.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var t=this.filterManager.effectElements[0].p.v,e=this.elem.comp.elements,r=0,n=e.length;r<n;)e[r]&&e[r].data.ind===t&&this.setElementAsMask(this.elem,e[r]),r+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()},SVGGaussianBlurEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=.3*this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=3==r?0:e,i=2==r?0:e;this.feGaussianBlur.setAttribute("stdDeviation",n+" "+i);var a=1==this.filterManager.effectElements[2].p.v?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",a)}},TransformEffect.prototype.init=function(t){this.effectsManager=t,this.type=effectTypes.TRANSFORM_EFFECT,this.matrix=new Matrix,this.opacity=-1,this._mdf=!1,this._opMdf=!1},TransformEffect.prototype.renderFrame=function(t){if(this._opMdf=!1,this._mdf=!1,t||this.effectsManager._mdf){var e=this.effectsManager.effectElements,r=e[0].p.v,n=e[1].p.v,i=1===e[2].p.v,a=e[3].p.v,o=i?a:e[4].p.v,s=e[5].p.v,l=e[6].p.v,c=e[7].p.v;this.matrix.reset(),this.matrix.translate(-r[0],-r[1],r[2]),this.matrix.scale(.01*o,.01*a,1),this.matrix.rotate(-c*degToRads),this.matrix.skewFromAxis(-s*degToRads,(l+90)*degToRads),this.matrix.translate(n[0],n[1],0),this._mdf=!0,this.opacity!==e[8].p.v&&(this.opacity=e[8].p.v,this._opMdf=!0)}},extendPrototype([TransformEffect],SVGTransformEffect),extendPrototype([TransformEffect],CVTransformEffect),registerRenderer("canvas",CanvasRenderer),registerRenderer("html",HybridRenderer),registerRenderer("svg",SVGRenderer),ShapeModifiers.registerModifier("tm",TrimModifier),ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeModifiers.registerModifier("rd",RoundCornersModifier),ShapeModifiers.registerModifier("zz",ZigZagModifier),ShapeModifiers.registerModifier("op",OffsetPathModifier),setExpressionsPlugin(Expressions),setExpressionInterfaces(getInterface),initialize$1(),initialize(),registerEffect$1(20,SVGTintFilter,!0),registerEffect$1(21,SVGFillFilter,!0),registerEffect$1(22,SVGStrokeEffect,!1),registerEffect$1(23,SVGTritoneFilter,!0),registerEffect$1(24,SVGProLevelsFilter,!0),registerEffect$1(25,SVGDropShadowEffect,!0),registerEffect$1(28,SVGMatte3Effect,!1),registerEffect$1(29,SVGGaussianBlurEffect,!0),registerEffect$1(35,SVGTransformEffect,!1),registerEffect(35,CVTransformEffect),lottie},module.exports=factory())},2694:(t,e,r)=>{var n=r(6925);function i(){}function a(){}a.resetWarningCache=i,t.exports=function(){function t(t,e,r,i,a,o){if(o!==n){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function e(){return t}t.isRequired=t;var r={array:t,bigint:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:a,resetWarningCache:i};return r.PropTypes=r,r}},5556:(t,e,r)=>{t.exports=r(2694)()},6925:t=>{t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},3049:(t,e,r)=>{var n=f(r(5505)),i=f(r(6007)),a=f(r(9506)),o=f(r(7588)),s=f(r(539)),l=f(r(7714)),c=f(r(1609)),h=f(r(5556)),u=f(r(9891));function f(t){return t&&t.__esModule?t:{default:t}}var p=function(t){function e(){var t,r,n,o;(0,a.default)(this,e);for(var l=arguments.length,c=Array(l),h=0;h<l;h++)c[h]=arguments[h];return r=n=(0,s.default)(this,(t=e.__proto__||(0,i.default)(e)).call.apply(t,[this].concat(c))),n.handleClickToPause=function(){n.anim.isPaused?n.anim.play():n.anim.pause()},o=r,(0,s.default)(n,o)}return(0,l.default)(e,t),(0,o.default)(e,[{key:"componentDidMount",value:function(){var t=this.props,e=t.options,r=t.eventListeners,i=e.loop,a=e.autoplay,o=e.animationData,s=e.rendererSettings,l=e.segments;this.options={container:this.el,renderer:"svg",loop:!1!==i,autoplay:!1!==a,segments:!1!==l,animationData:o,rendererSettings:s},this.options=(0,n.default)({},this.options,e),this.anim=u.default.loadAnimation(this.options),this.registerEvents(r)}},{key:"componentWillUpdate",value:function(t){this.options.animationData!==t.options.animationData&&(this.deRegisterEvents(this.props.eventListeners),this.destroy(),this.options=(0,n.default)({},this.options,t.options),this.anim=u.default.loadAnimation(this.options),this.registerEvents(t.eventListeners))}},{key:"componentDidUpdate",value:function(){this.props.isStopped?this.stop():this.props.segments?this.playSegments():this.play(),this.pause(),this.setSpeed(),this.setDirection()}},{key:"componentWillUnmount",value:function(){this.deRegisterEvents(this.props.eventListeners),this.destroy(),this.options.animationData=null,this.anim=null}},{key:"setSpeed",value:function(){this.anim.setSpeed(this.props.speed)}},{key:"setDirection",value:function(){this.anim.setDirection(this.props.direction)}},{key:"play",value:function(){this.anim.play()}},{key:"playSegments",value:function(){this.anim.playSegments(this.props.segments)}},{key:"stop",value:function(){this.anim.stop()}},{key:"pause",value:function(){(this.props.isPaused&&!this.anim.isPaused||!this.props.isPaused&&this.anim.isPaused)&&this.anim.pause()}},{key:"destroy",value:function(){this.anim.destroy()}},{key:"registerEvents",value:function(t){var e=this;t.forEach((function(t){e.anim.addEventListener(t.eventName,t.callback)}))}},{key:"deRegisterEvents",value:function(t){var e=this;t.forEach((function(t){e.anim.removeEventListener(t.eventName,t.callback)}))}},{key:"render",value:function(){var t=this,e=this.props,r=e.width,i=e.height,a=e.ariaRole,o=e.ariaLabel,s=e.isClickToPauseDisabled,l=e.title,h=function(t){return"number"==typeof t?t+"px":t||"100%"},u=(0,n.default)({width:h(r),height:h(i),overflow:"hidden",margin:"0 auto",outline:"none"},this.props.style),f=s?function(){return null}:this.handleClickToPause;return c.default.createElement("div",{ref:function(e){t.el=e},style:u,onClick:f,title:l,role:a,"aria-label":o,tabIndex:"0"})}}]),e}(c.default.Component);e.A=p,p.propTypes={eventListeners:h.default.arrayOf(h.default.object),options:h.default.object.isRequired,height:h.default.oneOfType([h.default.string,h.default.number]),width:h.default.oneOfType([h.default.string,h.default.number]),isStopped:h.default.bool,isPaused:h.default.bool,speed:h.default.number,segments:h.default.arrayOf(h.default.number),direction:h.default.number,ariaRole:h.default.string,ariaLabel:h.default.string,isClickToPauseDisabled:h.default.bool,title:h.default.string,style:h.default.string},p.defaultProps={eventListeners:[],isStopped:!1,isPaused:!1,speed:1,ariaRole:"button",ariaLabel:"animation",isClickToPauseDisabled:!1,title:""}},1609:t=>{t.exports=window.React}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var r=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t].call(r.exports,r,r.exports,__webpack_require__),r.exports}__webpack_require__.amdO={},__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var r in e)__webpack_require__.o(e,r)&&!__webpack_require__.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var __webpack_exports__={};(()=>{__webpack_require__.d(__webpack_exports__,{A:()=>Es});const t=window.ReactDOM;var e=__webpack_require__.n(t),r=__webpack_require__(1609),n=__webpack_require__.n(r);const i=window.Blueprint.Core,a=window.Blueprint.Select;function o(){return o=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},o.apply(this,arguments)}function s(t){var e=Object.create(null);return function(r){return void 0===e[r]&&(e[r]=t(r)),e[r]}}var l=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,c=s((function(t){return l.test(t)||111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)<91})),h=function(){function t(t){var e=this;this._insertTag=function(t){var r;r=0===e.tags.length?e.insertionPoint?e.insertionPoint.nextSibling:e.prepend?e.container.firstChild:e.before:e.tags[e.tags.length-1].nextSibling,e.container.insertBefore(t,r),e.tags.push(t)},this.isSpeedy=void 0===t.speedy||t.speedy,this.tags=[],this.ctr=0,this.nonce=t.nonce,this.key=t.key,this.container=t.container,this.prepend=t.prepend,this.insertionPoint=t.insertionPoint,this.before=null}var e=t.prototype;return e.hydrate=function(t){t.forEach(this._insertTag)},e.insert=function(t){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(t){var e=document.createElement("style");return e.setAttribute("data-emotion",t.key),void 0!==t.nonce&&e.setAttribute("nonce",t.nonce),e.appendChild(document.createTextNode("")),e.setAttribute("data-s",""),e}(this));var e=this.tags[this.tags.length-1];if(this.isSpeedy){var r=function(t){if(t.sheet)return t.sheet;for(var e=0;e<document.styleSheets.length;e++)if(document.styleSheets[e].ownerNode===t)return document.styleSheets[e]}(e);try{r.insertRule(t,r.cssRules.length)}catch(t){}}else e.appendChild(document.createTextNode(t));this.ctr++},e.flush=function(){this.tags.forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),this.tags=[],this.ctr=0},t}(),u=Math.abs,f=String.fromCharCode,p=Object.assign;function d(t){return t.trim()}function m(t,e,r){return t.replace(e,r)}function y(t,e){return t.indexOf(e)}function v(t,e){return 0|t.charCodeAt(e)}function g(t,e,r){return t.slice(e,r)}function b(t){return t.length}function x(t){return t.length}function w(t,e){return e.push(t),t}var E=1,k=1,S=0,_=0,P=0,C="";function A(t,e,r,n,i,a,o){return{value:t,root:e,parent:r,type:n,props:i,children:a,line:E,column:k,length:o,return:""}}function T(t,e){return p(A("",null,null,"",null,null,0),t,{length:-t.length},e)}function M(){return P=_>0?v(C,--_):0,k--,10===P&&(k=1,E--),P}function D(){return P=_<S?v(C,_++):0,k++,10===P&&(k=1,E++),P}function L(){return v(C,_)}function F(){return _}function O(t,e){return g(C,t,e)}function I(t){switch(t){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function j(t){return E=k=1,S=b(C=t),_=0,[]}function R(t){return C="",t}function N(t){return d(O(_-1,G(91===t?t+2:40===t?t+1:t)))}function B(t){for(;(P=L())&&P<33;)D();return I(t)>2||I(P)>3?"":" "}function V(t,e){for(;--e&&D()&&!(P<48||P>102||P>57&&P<65||P>70&&P<97););return O(t,F()+(e<6&&32==L()&&32==D()))}function G(t){for(;D();)switch(P){case t:return _;case 34:case 39:34!==t&&39!==t&&G(P);break;case 40:41===t&&G(t);break;case 92:D()}return _}function z(t,e){for(;D()&&t+P!==57&&(t+P!==84||47!==L()););return"/*"+O(e,_-1)+"*"+f(47===t?t:D())}function H(t){for(;!I(L());)D();return O(t,_)}var $="-ms-",U="-moz-",q="-webkit-",W="comm",Y="rule",X="decl",K="@keyframes";function J(t,e){for(var r="",n=x(t),i=0;i<n;i++)r+=e(t[i],i,t,e)||"";return r}function Z(t,e,r,n){switch(t.type){case"@layer":if(t.children.length)break;case"@import":case X:return t.return=t.return||t.value;case W:return"";case K:return t.return=t.value+"{"+J(t.children,n)+"}";case Y:t.value=t.props.join(",")}return b(r=J(t.children,n))?t.return=t.value+"{"+r+"}":""}function Q(t){return R(tt("",null,null,null,[""],t=j(t),0,[0],t))}function tt(t,e,r,n,i,a,o,s,l){for(var c=0,h=0,u=o,p=0,d=0,g=0,x=1,E=1,k=1,S=0,_="",P=i,C=a,A=n,T=_;E;)switch(g=S,S=D()){case 40:if(108!=g&&58==v(T,u-1)){-1!=y(T+=m(N(S),"&","&\f"),"&\f")&&(k=-1);break}case 34:case 39:case 91:T+=N(S);break;case 9:case 10:case 13:case 32:T+=B(g);break;case 92:T+=V(F()-1,7);continue;case 47:switch(L()){case 42:case 47:w(rt(z(D(),F()),e,r),l);break;default:T+="/"}break;case 123*x:s[c++]=b(T)*k;case 125*x:case 59:case 0:switch(S){case 0:case 125:E=0;case 59+h:-1==k&&(T=m(T,/\f/g,"")),d>0&&b(T)-u&&w(d>32?nt(T+";",n,r,u-1):nt(m(T," ","")+";",n,r,u-2),l);break;case 59:T+=";";default:if(w(A=et(T,e,r,c,h,i,s,_,P=[],C=[],u),a),123===S)if(0===h)tt(T,e,A,A,P,a,u,s,C);else switch(99===p&&110===v(T,3)?100:p){case 100:case 108:case 109:case 115:tt(t,A,A,n&&w(et(t,A,A,0,0,i,s,_,i,P=[],u),C),i,C,u,s,n?P:C);break;default:tt(T,A,A,A,[""],C,0,s,C)}}c=h=d=0,x=k=1,_=T="",u=o;break;case 58:u=1+b(T),d=g;default:if(x<1)if(123==S)--x;else if(125==S&&0==x++&&125==M())continue;switch(T+=f(S),S*x){case 38:k=h>0?1:(T+="\f",-1);break;case 44:s[c++]=(b(T)-1)*k,k=1;break;case 64:45===L()&&(T+=N(D())),p=L(),h=u=b(_=T+=H(F())),S++;break;case 45:45===g&&2==b(T)&&(x=0)}}return a}function et(t,e,r,n,i,a,o,s,l,c,h){for(var f=i-1,p=0===i?a:[""],y=x(p),v=0,b=0,w=0;v<n;++v)for(var E=0,k=g(t,f+1,f=u(b=o[v])),S=t;E<y;++E)(S=d(b>0?p[E]+" "+k:m(k,/&\f/g,p[E])))&&(l[w++]=S);return A(t,e,r,0===i?Y:s,l,c,h)}function rt(t,e,r){return A(t,e,r,W,f(P),g(t,2,-2),0)}function nt(t,e,r,n){return A(t,e,r,X,g(t,0,n),g(t,n+1,-1),n)}var it=function(t,e,r){for(var n=0,i=0;n=i,i=L(),38===n&&12===i&&(e[r]=1),!I(i);)D();return O(t,_)},at=new WeakMap,ot=function(t){if("rule"===t.type&&t.parent&&!(t.length<1)){for(var e=t.value,r=t.parent,n=t.column===r.column&&t.line===r.line;"rule"!==r.type;)if(!(r=r.parent))return;if((1!==t.props.length||58===e.charCodeAt(0)||at.get(r))&&!n){at.set(t,!0);for(var i=[],a=function(t,e){return R(function(t,e){var r=-1,n=44;do{switch(I(n)){case 0:38===n&&12===L()&&(e[r]=1),t[r]+=it(_-1,e,r);break;case 2:t[r]+=N(n);break;case 4:if(44===n){t[++r]=58===L()?"&\f":"",e[r]=t[r].length;break}default:t[r]+=f(n)}}while(n=D());return t}(j(t),e))}(e,i),o=r.props,s=0,l=0;s<a.length;s++)for(var c=0;c<o.length;c++,l++)t.props[l]=i[s]?a[s].replace(/&\f/g,o[c]):o[c]+" "+a[s]}}},st=function(t){if("decl"===t.type){var e=t.value;108===e.charCodeAt(0)&&98===e.charCodeAt(2)&&(t.return="",t.value="")}};function lt(t,e){switch(function(t,e){return 45^v(t,0)?(((e<<2^v(t,0))<<2^v(t,1))<<2^v(t,2))<<2^v(t,3):0}(t,e)){case 5103:return q+"print-"+t+t;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return q+t+t;case 5349:case 4246:case 4810:case 6968:case 2756:return q+t+U+t+$+t+t;case 6828:case 4268:return q+t+$+t+t;case 6165:return q+t+$+"flex-"+t+t;case 5187:return q+t+m(t,/(\w+).+(:[^]+)/,q+"box-$1$2"+$+"flex-$1$2")+t;case 5443:return q+t+$+"flex-item-"+m(t,/flex-|-self/,"")+t;case 4675:return q+t+$+"flex-line-pack"+m(t,/align-content|flex-|-self/,"")+t;case 5548:return q+t+$+m(t,"shrink","negative")+t;case 5292:return q+t+$+m(t,"basis","preferred-size")+t;case 6060:return q+"box-"+m(t,"-grow","")+q+t+$+m(t,"grow","positive")+t;case 4554:return q+m(t,/([^-])(transform)/g,"$1"+q+"$2")+t;case 6187:return m(m(m(t,/(zoom-|grab)/,q+"$1"),/(image-set)/,q+"$1"),t,"")+t;case 5495:case 3959:return m(t,/(image-set\([^]*)/,q+"$1$`$1");case 4968:return m(m(t,/(.+:)(flex-)?(.*)/,q+"box-pack:$3"+$+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+q+t+t;case 4095:case 3583:case 4068:case 2532:return m(t,/(.+)-inline(.+)/,q+"$1$2")+t;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(b(t)-1-e>6)switch(v(t,e+1)){case 109:if(45!==v(t,e+4))break;case 102:return m(t,/(.+:)(.+)-([^]+)/,"$1"+q+"$2-$3$1"+U+(108==v(t,e+3)?"$3":"$2-$3"))+t;case 115:return~y(t,"stretch")?lt(m(t,"stretch","fill-available"),e)+t:t}break;case 4949:if(115!==v(t,e+1))break;case 6444:switch(v(t,b(t)-3-(~y(t,"!important")&&10))){case 107:return m(t,":",":"+q)+t;case 101:return m(t,/(.+:)([^;!]+)(;|!.+)?/,"$1"+q+(45===v(t,14)?"inline-":"")+"box$3$1"+q+"$2$3$1"+$+"$2box$3")+t}break;case 5936:switch(v(t,e+11)){case 114:return q+t+$+m(t,/[svh]\w+-[tblr]{2}/,"tb")+t;case 108:return q+t+$+m(t,/[svh]\w+-[tblr]{2}/,"tb-rl")+t;case 45:return q+t+$+m(t,/[svh]\w+-[tblr]{2}/,"lr")+t}return q+t+$+t+t}return t}var ct=[function(t,e,r,n){if(t.length>-1&&!t.return)switch(t.type){case X:t.return=lt(t.value,t.length);break;case K:return J([T(t,{value:m(t.value,"@","@"+q)})],n);case Y:if(t.length)return function(t,e){return t.map(e).join("")}(t.props,(function(e){switch(function(t,e){return(t=/(::plac\w+|:read-\w+)/.exec(t))?t[0]:t}(e)){case":read-only":case":read-write":return J([T(t,{props:[m(e,/:(read-\w+)/,":-moz-$1")]})],n);case"::placeholder":return J([T(t,{props:[m(e,/:(plac\w+)/,":"+q+"input-$1")]}),T(t,{props:[m(e,/:(plac\w+)/,":-moz-$1")]}),T(t,{props:[m(e,/:(plac\w+)/,$+"input-$1")]})],n)}return""}))}}],ht=function(t){var e=t.key;if("css"===e){var r=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(r,(function(t){-1!==t.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(t),t.setAttribute("data-s",""))}))}var n,i,a=t.stylisPlugins||ct,o={},s=[];n=t.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+e+' "]'),(function(t){for(var e=t.getAttribute("data-emotion").split(" "),r=1;r<e.length;r++)o[e[r]]=!0;s.push(t)}));var l,c,u,f,p=[Z,(f=function(t){l.insert(t)},function(t){t.root||(t=t.return)&&f(t)})],d=(c=[ot,st].concat(a,p),u=x(c),function(t,e,r,n){for(var i="",a=0;a<u;a++)i+=c[a](t,e,r,n)||"";return i});i=function(t,e,r,n){l=r,J(Q(t?t+"{"+e.styles+"}":e.styles),d),n&&(m.inserted[e.name]=!0)};var m={key:e,sheet:new h({key:e,container:n,nonce:t.nonce,speedy:t.speedy,prepend:t.prepend,insertionPoint:t.insertionPoint}),nonce:t.nonce,inserted:o,registered:{},insert:i};return m.sheet.hydrate(s),m},ut={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},ft=/[A-Z]|^ms/g,pt=/_EMO_([^_]+?)_([^]*?)_EMO_/g,dt=function(t){return 45===t.charCodeAt(1)},mt=function(t){return null!=t&&"boolean"!=typeof t},yt=s((function(t){return dt(t)?t:t.replace(ft,"-$&").toLowerCase()})),vt=function(t,e){switch(t){case"animation":case"animationName":if("string"==typeof e)return e.replace(pt,(function(t,e,r){return bt={name:e,styles:r,next:bt},e}))}return 1===ut[t]||dt(t)||"number"!=typeof e||0===e?e:e+"px"};function gt(t,e,r){if(null==r)return"";if(void 0!==r.__emotion_styles)return r;switch(typeof r){case"boolean":return"";case"object":if(1===r.anim)return bt={name:r.name,styles:r.styles,next:bt},r.name;if(void 0!==r.styles){var n=r.next;if(void 0!==n)for(;void 0!==n;)bt={name:n.name,styles:n.styles,next:bt},n=n.next;return r.styles+";"}return function(t,e,r){var n="";if(Array.isArray(r))for(var i=0;i<r.length;i++)n+=gt(t,e,r[i])+";";else for(var a in r){var o=r[a];if("object"!=typeof o)null!=e&&void 0!==e[o]?n+=a+"{"+e[o]+"}":mt(o)&&(n+=yt(a)+":"+vt(a,o)+";");else if(!Array.isArray(o)||"string"!=typeof o[0]||null!=e&&void 0!==e[o[0]]){var s=gt(t,e,o);switch(a){case"animation":case"animationName":n+=yt(a)+":"+s+";";break;default:n+=a+"{"+s+"}"}}else for(var l=0;l<o.length;l++)mt(o[l])&&(n+=yt(a)+":"+vt(a,o[l])+";")}return n}(t,e,r);case"function":if(void 0!==t){var i=bt,a=r(t);return bt=i,gt(t,e,a)}}if(null==e)return r;var o=e[r];return void 0!==o?o:r}var bt,xt=/label:\s*([^\s;\n{]+)\s*(;|$)/g,wt=!!r.useInsertionEffect&&r.useInsertionEffect,Et=wt||function(t){return t()},kt=(wt||r.useLayoutEffect,r.createContext("undefined"!=typeof HTMLElement?ht({key:"css"}):null));kt.Provider;var St=r.createContext({}),_t=function(t,e,r){var n=t.key+"-"+e.name;!1===r&&void 0===t.registered[n]&&(t.registered[n]=e.styles)},Pt=c,Ct=function(t){return"theme"!==t},At=function(t){return"string"==typeof t&&t.charCodeAt(0)>96?Pt:Ct},Tt=function(t,e,r){var n;if(e){var i=e.shouldForwardProp;n=t.__emotion_forwardProp&&i?function(e){return t.__emotion_forwardProp(e)&&i(e)}:i}return"function"!=typeof n&&r&&(n=t.__emotion_forwardProp),n},Mt=function(t){var e=t.cache,r=t.serialized,n=t.isStringTag;return _t(e,r,n),Et((function(){return function(t,e,r){_t(t,e,r);var n=t.key+"-"+e.name;if(void 0===t.inserted[e.name]){var i=e;do{t.insert(e===i?"."+n:"",i,t.sheet,!0),i=i.next}while(void 0!==i)}}(e,r,n)})),null},Dt=function t(e,n){var i,a,s=e.__emotion_real===e,l=s&&e.__emotion_base||e;void 0!==n&&(i=n.label,a=n.target);var c=Tt(e,n,s),h=c||At(l),u=!h("as");return function(){var f=arguments,p=s&&void 0!==e.__emotion_styles?e.__emotion_styles.slice(0):[];if(void 0!==i&&p.push("label:"+i+";"),null==f[0]||void 0===f[0].raw)p.push.apply(p,f);else{p.push(f[0][0]);for(var d=f.length,m=1;m<d;m++)p.push(f[m],f[0][m])}var y,v=(y=function(t,e,n){var i,o,s,f,d=u&&t.as||l,m="",y=[],v=t;if(null==t.theme){for(var g in v={},t)v[g]=t[g];v.theme=r.useContext(St)}"string"==typeof t.className?(i=e.registered,o=y,s=t.className,f="",s.split(" ").forEach((function(t){void 0!==i[t]?o.push(i[t]+";"):f+=t+" "})),m=f):null!=t.className&&(m=t.className+" ");var b=function(t,e,r){if(1===t.length&&"object"==typeof t[0]&&null!==t[0]&&void 0!==t[0].styles)return t[0];var n=!0,i="";bt=void 0;var a=t[0];null==a||void 0===a.raw?(n=!1,i+=gt(r,e,a)):i+=a[0];for(var o=1;o<t.length;o++)i+=gt(r,e,t[o]),n&&(i+=a[o]);xt.lastIndex=0;for(var s,l="";null!==(s=xt.exec(i));)l+="-"+s[1];var c=function(t){for(var e,r=0,n=0,i=t.length;i>=4;++n,i-=4)e=1540483477*(65535&(e=255&t.charCodeAt(n)|(255&t.charCodeAt(++n))<<8|(255&t.charCodeAt(++n))<<16|(255&t.charCodeAt(++n))<<24))+(59797*(e>>>16)<<16),r=1540483477*(65535&(e^=e>>>24))+(59797*(e>>>16)<<16)^1540483477*(65535&r)+(59797*(r>>>16)<<16);switch(i){case 3:r^=(255&t.charCodeAt(n+2))<<16;case 2:r^=(255&t.charCodeAt(n+1))<<8;case 1:r=1540483477*(65535&(r^=255&t.charCodeAt(n)))+(59797*(r>>>16)<<16)}return(((r=1540483477*(65535&(r^=r>>>13))+(59797*(r>>>16)<<16))^r>>>15)>>>0).toString(36)}(i)+l;return{name:c,styles:i,next:bt}}(p.concat(y),e.registered,v);m+=e.key+"-"+b.name,void 0!==a&&(m+=" "+a);var x=u&&void 0===c?At(d):h,w={};for(var E in t)u&&"as"===E||x(E)&&(w[E]=t[E]);return w.className=m,w.ref=n,r.createElement(r.Fragment,null,r.createElement(Mt,{cache:e,serialized:b,isStringTag:"string"==typeof d}),r.createElement(d,w))},(0,r.forwardRef)((function(t,e){var n=(0,r.useContext)(kt);return y(t,n,e)})));return v.displayName=void 0!==i?i:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",v.defaultProps=e.defaultProps,v.__emotion_real=v,v.__emotion_base=l,v.__emotion_styles=p,v.__emotion_forwardProp=c,Object.defineProperty(v,"toString",{value:function(){return"."+a}}),v.withComponent=function(e,r){return t(e,o({},n,r,{shouldForwardProp:Tt(v,r,!0)})).apply(void 0,p)},v}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(t){Dt[t]=Dt(t)}));var Lt=function(t,e,r){return t.substring(t.indexOf(e)+e.length,t.lastIndexOf(r))},Ft=function(t){return window.roamAlphaAPI.util.pageTitleToDate(t.trim())},Ot=function(t){return window.roamAlphaAPI.util.dateToPageTitle(t)},It=function(t){return t.toLocaleDateString("en-US")},jt=__webpack_require__(4353),Rt=__webpack_require__.n(jt),Nt=__webpack_require__(6279),Bt=__webpack_require__.n(Nt),Vt=__webpack_require__(8720),Gt=__webpack_require__.n(Vt);Rt().extend(Bt()),Rt().extend(Gt());var zt=function(t,e){var r=new Date(t);return r.setDate(r.getDate()+e),r},Ht=function(t,e){var r=t,n=e;return Math.floor(Math.abs((r-n)/864e5))},$t=function(t){var e=Ht(new Date,t);return e>-7&&e<7?Rt()(t).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd"}):function(t){return Rt()(t).fromNow()}(t)},Ut=function(t){return t&&"[object Date]"===Object.prototype.toString.call(t)&&!isNaN(t)};function qt(t){return qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},qt(t)}function Wt(){Wt=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==qt(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(qt(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Yt(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Xt(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Yt(a,n,i,o,s,"next",t)}function s(t){Yt(a,n,i,o,s,"throw",t)}o(void 0)}))}}var Kt=function(){var t=Xt(Wt().mark((function t(e){var r,n,i,a,o,s,l,c,h,u;return Wt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,n=e.data,i=e.selectedTag,t.next=3,pe(r);case 3:return t.next=5,xe(r,"cache",-1,{open:!1,heading:3});case 5:return a=t.sent,t.next=8,we(a,"[[".concat(i,"]]"),-1,{open:!1});case 8:o=t.sent,s=0,l=Object.keys(n);case 10:if(!(s<l.length)){t.next=25;break}return c=l[s],t.next=14,me(o,"".concat(c,"::"),{exactMatch:!1});case 14:if(!(h=t.sent)){t.next=18;break}return t.next=18,window.roamAlphaAPI.deleteBlock({block:{uid:h}});case 18:return u=n[c],Ut(u)&&(u=Ot(u)),t.next=22,ge(o,"".concat(c,":: ").concat(u),-1);case 22:s++,t.next=10;break;case 25:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Jt=function(){var t=Xt(Wt().mark((function t(e){var r,n,i,a,o,s;return Wt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,n=e.selectedTag,i=e.toDeleteKeyId,t.next=3,pe(r);case 3:return t.next=5,xe(r,"cache",-1,{open:!1,heading:3});case 5:return a=t.sent,t.next=8,we(a,"[[".concat(n,"]]"),-1,{open:!1});case 8:return o=t.sent,t.next=11,me(o,"".concat(i,"::"),{exactMatch:!1});case 11:if(!(s=t.sent)){t.next=15;break}return t.next=15,window.roamAlphaAPI.deleteBlock({block:{uid:s}});case 15:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Zt=function(t){return t.FixedInterval="FIXED_INTERVAL",t.DefaultSpacedInterval="SPACED_INTERVAL",t}({}),Qt=function(t){return t.Days="Days",t.Weeks="Weeks",t.Months="Months",t.Years="Years",t}({}),te=function(t){return JSON.parse(JSON.stringify(t))},ee=function(t){return t.Finished="finished",t.Partial="partial",t.Unstarted="unstarted",t}({}),re=function(t){return t.Normal="normal",t.AnswerFirst="answerFirst",t}({}),ne={tags:{},combinedToday:{status:ee.Unstarted,due:0,new:0,dueUids:[],newUids:[],completed:0,completedUids:[],completedDue:0,completedDueUids:[],completedNew:0,completedNewUids:[]}};function ie(t){return ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ie(t)}function ae(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function oe(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ae(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=ie(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=ie(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==ie(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ae(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function se(){se=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==ie(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(ie(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function le(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function ce(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){le(a,n,i,o,s,"next",t)}function s(t){le(a,n,i,o,s,"throw",t)}o(void 0)}))}}var he=function(){var t=ce(se().mark((function t(e){var r,n;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.refUid,t.next=3,window.roamAlphaAPI.q("[\n  :find (pull ?parentIds [\n    :node/title\n    :block/string\n    :block/uid])\n  :in $ ?refId\n  :where\n    [?block :block/uid ?refId]\n    [?block :block/parents ?parentIds]\n  ]",r);case 3:return n=t.sent,t.abrupt("return",n.map((function(t){return t[0]})));case 5:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),ue=function(){var t=ce(se().mark((function t(e){var r,n,i,a;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,window.roamAlphaAPI.q("[\n  :find (pull ?block [\n    :block/string\n    :block/children\n    {:block/children [:block/uid :block/string :block/order]}])\n  :in $ ?refId\n  :where\n    [?block :block/uid ?refId]\n  ]",e);case 2:return n=t.sent[0][0],t.next=5,he({refUid:e});case 5:return i=t.sent,a=null===(r=n.children)||void 0===r?void 0:r.sort((function(t,e){return t.order-e.order})),t.abrupt("return",{string:n.string,children:null==a?void 0:a.map((function(t){return t.string})),childrenUids:null==a?void 0:a.map((function(t){return t.uid})),breadcrumbs:i,refUid:e});case 8:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),fe=function(t){var e=window.roamAlphaAPI.q("[\n  :find ?uid :in $ ?title\n  :where\n    [?page :node/title ?title]\n    [?page :block/uid ?uid]\n]",t);if(e.length)return e[0][0]},pe=function(){var t=ce(se().mark((function t(e){var r,n;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(r=fe(e))){t.next=3;break}return t.abrupt("return",r);case 3:return n=window.roamAlphaAPI.util.generateUID(),t.next=6,window.roamAlphaAPI.data.page.create({page:{title:e,uid:n}});case 6:return t.abrupt("return",fe(e));case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),de=function(t,e){var r=window.roamAlphaAPI.q("\n    [:find ?block_uid\n     :in $ ?page_title ?block_string\n     :where\n     [?page :node/title ?page_title]\n     [?page :block/uid ?page_uid]\n     [?block :block/parents ?page]\n     [?block :block/string ?block_string]\n     [?block :block/uid ?block_uid]\n    ]",t,e);if(r.length)return r[0][0]},me=function(t,e){var r=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{exactMatch:!0}).exactMatch?"\n    [:find ?block_uid\n    :in $ ?parent_uid ?block_string\n    :where\n      [?parent :block/uid ?parent_uid]\n      [?block :block/parents ?parent]\n      [?block :block/string ?block_string]\n      [?block :block/uid ?block_uid]\n    ]\n  ":"\n    [:find ?block_uid\n      :in $ ?parent_uid ?block_sub_string\n      :where\n        [?parent :block/uid ?parent_uid]\n        [?block :block/parents ?parent]\n        [?block :block/string ?block_string]\n        [(clojure.string/starts-with? ?block_string ?block_sub_string)]\n        [?block :block/uid ?block_uid]\n    ]\n  ",n=window.roamAlphaAPI.q(r,t,e);if(n.length)return n[0][0]},ye=function(){var t=ce(se().mark((function t(e){var r;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,window.roamAlphaAPI.q("[\n  :find (pull ?tagPage [\n    :block/uid\n    :block/string\n    :block/children\n    {:block/children ...}])\n  :in $ ?tag\n  :where\n    [?tagPage :node/title ?tag]\n    [?tagPage :block/children ?tagPageChildren]\n  ]",e);case 2:if((r=t.sent).length){t.next=5;break}return t.abrupt("return",[]);case 5:return t.abrupt("return",r);case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),ve=function(){var t=ce(se().mark((function t(e){var r,n;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,window.roamAlphaAPI.q("[\n  :find (pull ?child [\n    :block/uid\n    :block/string\n    :block/order])\n  :in $ ?parent_uid\n  :where\n    [?parent :block/uid ?parent_uid]\n    [?parent :block/children ?child]\n  ]",e);case 3:if((r=t.sent).length){t.next=6;break}return t.abrupt("return",[]);case 6:return n=r.map((function(t){return t[0]})).sort((function(t,e){return t.order-e.order})),console.log("üîç [Utils] getChildBlocksByUid(".concat(e,") ËøîÂõû ").concat(n.length," ‰∏™Â≠êblocks")),t.abrupt("return",n);case 11:return t.prev=11,t.t0=t.catch(0),console.error("üîç [Utils] getChildBlocksByUid(".concat(e,") Â§±Ë¥•:"),t.t0),t.abrupt("return",[]);case 15:case"end":return t.stop()}}),t,null,[[0,11]])})));return function(e){return t.apply(this,arguments)}}(),ge=function(){var t=ce(se().mark((function t(e,r,n){var i,a,o=arguments;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=o.length>3&&void 0!==o[3]?o[3]:{},n||(n=0),a=window.roamAlphaAPI.util.generateUID(),t.next=5,window.roamAlphaAPI.createBlock({location:{"parent-uid":e,order:n},block:oe({string:r,uid:a},i)});case 5:return t.abrupt("return",a);case 6:case"end":return t.stop()}}),t)})));return function(e,r,n){return t.apply(this,arguments)}}(),be=function(){var t=ce(se().mark((function t(e,r,n,i){var a;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a=fe(e),t.abrupt("return",ge(a,r,n,i));case 2:case"end":return t.stop()}}),t)})));return function(e,r,n,i){return t.apply(this,arguments)}}(),xe=function(){var t=ce(se().mark((function t(e,r,n,i){var a;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(a=de(e,r))){t.next=3;break}return t.abrupt("return",a);case 3:return t.abrupt("return",be(e,r,n,i));case 4:case"end":return t.stop()}}),t)})));return function(e,r,n,i){return t.apply(this,arguments)}}(),we=function(){var t=ce(se().mark((function t(e,r,n,i){var a;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(a=me(e,r))){t.next=3;break}return t.abrupt("return",a);case 3:return t.abrupt("return",ge(e,r,n,i));case 4:case"end":return t.stop()}}),t)})));return function(e,r,n,i){return t.apply(this,arguments)}}(),Ee=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.reviewMode,r=void 0===e?Zt.DefaultSpacedInterval:e,n=t.dateCreated,i=void 0===n?void 0:n,a=t.isNew,o=void 0===a||a;return r===Zt.DefaultSpacedInterval?{dateCreated:i||new Date,eFactor:2.5,interval:0,repetitions:0,isNew:o,reviewMode:r}:{dateCreated:i||new Date,intervalMultiplier:3,intervalMultiplierType:Qt.Days,isNew:o,reviewMode:r}};function ke(t){return ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ke(t)}function Se(t){return function(t){if(Array.isArray(t))return De(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||Me(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _e(){_e=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==ke(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(ke(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Pe(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ce(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Pe(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=ke(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=ke(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==ke(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Pe(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ae(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Te(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=Me(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function Me(t,e){if(t){if("string"==typeof t)return De(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?De(t,e):void 0}}function De(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Le=function(t){var e,r=t.tagsList,n=t.cachedData,i=te(ne),a=Te(r);try{for(a.s();!(e=a.n()).done;){var o=e.value,s=null==n?void 0:n[o];i.tags[o]={status:ee.Unstarted,completed:0,due:0,new:0,newUids:[],dueUids:[],completedUids:[],completedDue:0,completedNew:0,completedDueUids:[],completedNewUids:[],renderMode:(null==s?void 0:s.renderMode)||re.Normal}}}catch(t){a.e(t)}finally{a.f()}return i},Fe=function(t){var e,r=t.today,n=Te(t.tagsList);try{for(n.s();!(e=n.n()).done;){var i=e.value,a=r.tags[i].completed,o=r.tags[i].new+r.tags[i].due;r.tags[i].status=0===o?ee.Finished:a>0?ee.Partial:ee.Unstarted}}catch(t){n.e(t)}finally{n.f()}var s=r.combinedToday.completed,l=r.combinedToday.new+r.combinedToday.due;r.combinedToday.status=0===l?ee.Finished:s>0?ee.Partial:ee.Unstarted},Oe=function(){var t,e=(t=_e().mark((function t(e){var r,n,i,a,o,s;return _e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=e.today,n=e.tagsList,i=e.sessionData,a=Te(n),t.prev=2,s=_e().mark((function t(){var e,n,a,s,l,c;return _e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e=o.value,n=0,a=[],s=[],l=[],c=i[e],Object.keys(c).forEach((function(t){var e,r,i=c[t],o=i[i.length-1];if(o&&(e=o.dateCreated,r=new Date,Ut(e)&&Ut(r)&&e.toDateString()===r.toDateString())){var h=1===i.length,u=!h,f=h;n++,a.push(t),u&&s.push(t),f&&l.push(t)}})),r.tags[e]=Ce(Ce({},r.tags[e]||{}),{},{completed:n,completedUids:a,completedDueUids:s,completedNewUids:l,completedDue:s.length,completedNew:l.length});case 8:case"end":return t.stop()}}),t)})),a.s();case 5:if((o=a.n()).done){t.next=9;break}return t.delegateYield(s(),"t0",7);case 7:t.next=5;break;case 9:t.next=14;break;case 11:t.prev=11,t.t1=t.catch(2),a.e(t.t1);case 14:return t.prev=14,a.f(),t.finish(14);case 17:return t.abrupt("return",r);case 18:case"end":return t.stop()}}),t,null,[[2,11,14,17]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Ae(a,n,i,o,s,"next",t)}function s(t){Ae(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t){return e.apply(this,arguments)}}(),Ie=function(t){var e=t.today,r=t.tagsList,n=te(ne);e.combinedToday=n.combinedToday;var i,a=Te(r);try{for(a.s();!(i=a.n()).done;){var o=i.value;e.combinedToday.due+=e.tags[o].due,e.combinedToday.new+=e.tags[o].new,e.combinedToday.dueUids=e.combinedToday.dueUids.concat(e.tags[o].dueUids),e.combinedToday.newUids=e.combinedToday.newUids.concat(e.tags[o].newUids),e.combinedToday.completed+=e.tags[o].completed,e.combinedToday.completedUids=e.combinedToday.completedUids.concat(e.tags[o].completedUids),e.combinedToday.completedDue+=e.tags[o].completedDue,e.combinedToday.completedDueUids=e.combinedToday.completedDueUids.concat(e.tags[o].completedDueUids),e.combinedToday.completedNew+=e.tags[o].completedNew,e.combinedToday.completedNewUids=e.combinedToday.completedNewUids.concat(e.tags[o].completedNewUids)}}catch(t){a.e(t)}finally{a.f()}},je=function(t){var e,r=t.today,n=t.tagsList,i=t.cardUids,a=t.pluginPageData,o=t.shuffleCards,s=t.priorityOrder,l=void 0===s?[]:s,c=Te(n);try{var h=function(){var t=e.value,n=i[t],s=[];n.forEach((function(t){a[t]&&a[t].length||(s.push(t),a[t]=[Ee()])})),l.length>0&&!o?s.sort((function(t,e){var r=l.indexOf(t),n=l.indexOf(e);return-1!==r&&-1!==n?r-n:-1!==r?-1:-1!==n?1:0})):o&&s.sort((function(){return Math.random()-.5})),r.tags[t]=Ce(Ce({},r.tags[t]),{},{newUids:s,new:s.length})};for(c.s();!(e=c.n()).done;)h()}catch(t){c.e(t)}finally{c.f()}},Re=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],n=[];if(!Object.keys(t).length)return n;var i=new Date;return Object.keys(t).forEach((function(r){var a=t[r],o=a[a.length-1];if(o){var s=o.nextDueDate;(e||s&&s<=i)&&n.push(r)}})),r.length>0&&n.sort((function(t,e){var n=r.indexOf(t),i=r.indexOf(e);return-1!==n&&-1!==i?n-i:-1!==n?-1:-1!==i?1:0})),n},Ne=function(t){var e,r=t.today,n=t.tagsList,i=t.sessionData,a=t.isCramming,o=t.shuffleCards,s=t.priorityOrder,l=void 0===s?[]:s,c=Te(n);try{for(c.s();!(e=c.n()).done;){var h=e.value,u=i[h],f=Re(u,a,l);o&&f.sort((function(){return Math.random()-.5})),r.tags[h]=Ce(Ce({},r.tags[h]),{},{dueUids:f,due:f.length})}}catch(t){c.e(t)}finally{c.f()}},Be=["refUid","dataPageTitle","dateCreated"];function Ve(t){return function(t){if(Array.isArray(t))return $e(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||He(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ge(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||He(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ze(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=He(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function He(t,e){if(t){if("string"==typeof t)return $e(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?$e(t,e):void 0}}function $e(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Ue(){Ue=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==qe(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(qe(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function qe(t){return qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},qe(t)}function We(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}function Ye(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Xe(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Ye(a,n,i,o,s,"next",t)}function s(t){Ye(a,n,i,o,s,"throw",t)}o(void 0)}))}}var Ke=function(t){switch(t){case 5:default:return"üü¢";case 4:return"üîµ";case 3:case 2:return"üü†";case 0:return"üî¥"}},Je=function(){var t=Xe(Ue().mark((function t(e){var r,n,i,a,o,s,l,c,h,u,f,p,d,m,y;return Ue().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.refUid,n=e.dataPageTitle,i=e.dateCreated,a=We(e,Be),t.next=3,pe(n);case 3:return t.next=5,xe(n,"data",-1,{open:!1,heading:3});case 5:return o=t.sent,t.next=8,we(o,"((".concat(r,"))"),0,{open:!1});case 8:return s=t.sent,l=i||new Date,c=Ot(l),h=Ke(a.grade),t.next=14,ge(s,"[[".concat(c,"]] ").concat(h),0,{open:!1});case 14:u=t.sent,f=a.nextDueDate||zt(l,a.interval),p=0,d=Object.keys(a);case 17:if(!(p<d.length)){t.next=26;break}return m=d[p],y=a[m],"nextDueDate"===m?y="[[".concat(Ot(f),"]]"):"fsrsState"===m&&"object"===qe(y)&&null!==y&&(y=JSON.stringify(y)),t.next=23,ge(u,"".concat(m,":: ").concat(y),-1);case 23:p++,t.next=17;break;case 26:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Ze=function(){var t=Xe(Ue().mark((function t(e){var r,n,i,a,o,s,l,c,h,u,f,p,d,m,y,v,g,b,x,w,E,k,S;return Ue().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.token,n=e.records,i=e.selectedUids,a=e.dataPageTitle,t.next=3,pe(a);case 3:return t.next=5,xe(a,"data",-1,{open:!1,heading:3});case 5:o=t.sent,s=window.roamAlphaAPI.graph.name,l={graphName:s,data:{action:"batch-actions",actions:[]}},c=ze(i),t.prev=9,c.s();case 11:if((h=c.n()).done){t.next=50;break}u=h.value,(f=me(o,"((".concat(u,"))")))&&l.data.actions.push({action:"delete-block",block:{uid:f}}),p=window.roamAlphaAPI.util.generateUID(),l.data.actions.push({action:"create-block",location:{"parent-uid":o,order:0},block:{string:"((".concat(u,"))"),uid:p,open:!1}}),d=n[u],m=ze(d),t.prev=19,m.s();case 21:if((y=m.n()).done){t.next=40;break}v=y.value,g=Ot(v.dateCreated),b=Ke(v.grade),x=window.roamAlphaAPI.util.generateUID(),l.data.actions.push({action:"create-block",location:{"parent-uid":p,order:0},block:{string:"[[".concat(g,"]] ").concat(b),uid:x,open:!1}}),w=0,E=Object.keys(v);case 28:if(!(w<E.length)){t.next=38;break}if(k=E[w],S=v[k],"dateCreated"!==k){t.next=33;break}return t.abrupt("continue",35);case 33:"nextDueDate"===k?S="[[".concat(Ot(S),"]]"):"fsrsState"===k&&"object"===qe(S)&&null!==S&&(S=JSON.stringify(S)),l.data.actions.push({action:"create-block",location:{"parent-uid":x,order:-1},block:{string:"".concat(k,":: ").concat(S),open:!1}});case 35:w++,t.next=28;break;case 38:t.next=21;break;case 40:t.next=45;break;case 42:t.prev=42,t.t0=t.catch(19),m.e(t.t0);case 45:return t.prev=45,m.f(),t.finish(45);case 48:t.next=11;break;case 50:t.next=55;break;case 52:t.prev=52,t.t1=t.catch(9),c.e(t.t1);case 55:return t.prev=55,c.f(),t.finish(55);case 58:return t.prev=59,t.next=62,fetch("".concat("https://roam-memo-server.onrender.com","/save-roam-sr-data"),{method:"POST",body:JSON.stringify(l),headers:{Authorization:"Bearer ".concat(r),"Content-Type":"application/json"}});case 62:t.next=67;break;case 64:t.prev=64,t.t2=t.catch(59),console.error("Error Bulk Saving",t.t2);case 67:case"end":return t.stop()}}),t,null,[[9,52,55,58],[19,42,45,48],[59,64]])})));return function(e){return t.apply(this,arguments)}}(),Qe=function(){var t=Xe(Ue().mark((function t(e){var r,n,i,a,o,s,l;return Ue().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,t.prev=1,t.next=4,pe(r);case 4:return t.next=6,xe(r,"data",-1,{open:!1,heading:3});case 6:if(n=t.sent,(i=me(n,"Priority Rankings"))||(i=me(n,"**Priority Rankings**")),i){t.next=12;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂÆπÂô®block‰∏çÂ≠òÂú®ÔºåËøîÂõûÁ©∫ÂàóË°®"),t.abrupt("return",[]);case 12:return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÊâæÂà∞ÂÆπÂô®block:",i),t.next=15,ve(i);case 15:if((a=t.sent)&&0!==a.length){t.next=19;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂÆπÂô®‰∏∫Á©∫ÔºåËøîÂõûÁ©∫ÂàóË°®"),t.abrupt("return",[]);case 19:if(console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂÆπÂô®‰∏≠ÂåÖÂê´blocks:",a.map((function(t){return t.string}))),o=null==a?void 0:a.find((function(t){return t.string&&t.string.startsWith("priority-ranking::")}))){t.next=24;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - Êú™ÊâæÂà∞priority-rankingÊï∞ÊçÆblock"),t.abrupt("return",[]);case 24:if(s=o.string.replace("priority-ranking::","").trim()){t.next=28;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - priority-rankingÊï∞ÊçÆ‰∏∫Á©∫"),t.abrupt("return",[]);case 28:return l=s.split(",").map((function(t){return t.trim()})).map((function(t){return t.startsWith("((")&&t.endsWith("))")?t.slice(2,-2):t})).filter((function(t){return t})),console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ‰ªéÂÆπÂô®‰∏≠ÊàêÂäüËØªÂèñÊéíÂêçÂàóË°®:",l.length,"‰∏™Âç°Áâá"),t.abrupt("return",l);case 33:return t.prev=33,t.t0=t.catch(1),console.error("ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ËØªÂèñÊéíÂêçÂàóË°®Â§±Ë¥•:",t.t0),t.abrupt("return",[]);case 37:case"end":return t.stop()}}),t,null,[[1,33]])})));return function(e){return t.apply(this,arguments)}}(),tr=function(){var t=Xe(Ue().mark((function t(e){var r,n,i,a,o,s,l,c,h,u,f;return Ue().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.dataPageTitle,n=e.rankings,t.prev=1,window.roamAlphaAPI){t.next=4;break}throw new Error("Roam Alpha API ‰∏çÂèØÁî®");case 4:return t.next=6,pe(r);case 6:return t.next=8,xe(r,"data",-1,{open:!1,heading:3});case 8:if(i=t.sent,console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂáÜÂ§á‰øùÂ≠òÂà∞data block:",i),!(a=me(i,"priority-ranking::",{exactMatch:!1}))){t.next=15;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂèëÁé∞ÊóßÊï∞ÊçÆÔºåÊ≠£Âú®Âà†Èô§:",a),t.next=15,window.roamAlphaAPI.deleteBlock({block:{uid:a}});case 15:if(!(o=me(i,"**Priority Rankings**"))){t.next=20;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂèëÁé∞ÊóßÁ≤ó‰ΩìÂÆπÂô®ÔºåÊ≠£Âú®Âà†Èô§:",o),t.next=20,window.roamAlphaAPI.deleteBlock({block:{uid:o}});case 20:return t.next=22,we(i,"Priority Rankings",0,{open:!1});case 22:return s=t.sent,console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂÆπÂô®block UID:",s),t.next=26,ve(s);case 26:if(l=t.sent,console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂÆπÂô®‰∏≠Áé∞Êúâblocks:",null==l?void 0:l.map((function(t){return t.string}))),c=null==l?void 0:l.find((function(t){return t.string&&t.string.startsWith("priority-ranking::")})),h=n.map((function(t){return"((".concat(t,"))")})).join(","),u="priority-ranking:: ".concat(h),console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂáÜÂ§á‰øùÂ≠òÊï∞ÊçÆÔºåÂç°ÁâáÊï∞Èáè:",n.length),!c){t.next=38;break}return t.next=35,window.roamAlphaAPI.updateBlock({block:{uid:c.uid,string:u}});case 35:console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - Âú®ÂÆπÂô®‰∏≠Êõ¥Êñ∞ÊéíÂêçÂàóË°®:",n.length,"‰∏™Âç°Áâá"),t.next=42;break;case 38:return t.next=40,ge(s,u,-1);case 40:f=t.sent,console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - Âú®ÂÆπÂô®‰∏≠ÂàõÂª∫ÊéíÂêçÂàóË°®:",n.length,"‰∏™Âç°Áâá, UID:",f);case 42:console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ‰øùÂ≠òÊìç‰ΩúÂÆåÊàê"),t.next=49;break;case 45:throw t.prev=45,t.t0=t.catch(1),console.error("ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ‰øùÂ≠òÊéíÂêçÂàóË°®Â§±Ë¥•:",t.t0),t.t0;case 49:case"end":return t.stop()}}),t,null,[[1,45]])})));return function(e){return t.apply(this,arguments)}}(),er=function(){var t=Xe(Ue().mark((function t(e){var r,n,i,a,o,s,l,c,h,u,f,p,d,m,y,v;return Ue().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.rankingChanges,n=e.dataPageTitle,i=e.allCardUids,t.prev=1,r&&0!==Object.keys(r).length){t.next=5;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - Êó†ÂèòÊõ¥ÈúÄË¶Å‰øùÂ≠ò"),t.abrupt("return");case 5:if(null!=n&&n.trim()){t.next=7;break}throw new Error("dataPageTitle‰∏çËÉΩ‰∏∫Á©∫");case 7:if(i&&0!==i.length){t.next=9;break}throw new Error("allCardUids‰∏çËÉΩ‰∏∫Á©∫");case 9:console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂºÄÂßãÊâπÈáè‰øùÂ≠òÊéíÂêçÂèòÊõ¥:",Object.keys(r).length,"‰∏™ÂèòÊõ¥"),a=0,o=Object.entries(r);case 11:if(!(a<o.length)){t.next=19;break}if(s=Ge(o[a],2),l=s[0],c=s[1],i.includes(l)||console.warn("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - Ë≠¶Âëä: Âç°Áâá‰∏çÂú®allCardUids‰∏≠:",l),!(c<1||c>i.length)){t.next=16;break}throw new Error("Âç°Áâá ".concat(l," ÁöÑÁõÆÊ†áÊéíÂêç ").concat(c," Ë∂ÖÂá∫ÊúâÊïàËåÉÂõ¥ 1-").concat(i.length));case 16:a++,t.next=11;break;case 19:return t.next=21,Qe({dataPageTitle:n});case 21:0===(h=t.sent).length&&(console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂàùÂßãÂåñÊéíÂêçÂàóË°®"),h=Ve(i)),u=Ve(h),f=Object.entries(r).sort((function(t,e){return Ge(t,2)[1]-Ge(e,2)[1]})),console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - Â§ÑÁêÜÊéíÂ∫èÂèòÊõ¥:",f),p=ze(f),t.prev=27,m=Ue().mark((function t(){var e,r,n,i;return Ue().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e=Ge(d.value,2),r=e[0],n=e[1],-1===u.indexOf(r)&&(console.warn("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - Âç°Áâá‰∏çÂú®ÂΩìÂâçÊéíÂêç‰∏≠ÔºåÊ∑ªÂä†Âà∞Êú´Â∞æ:",r),u.push(r)),u=u.filter((function(t){return t!==r})),i=Math.max(0,Math.min(n-1,u.length)),u.splice(i,0,r),console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÁßªÂä®Âç°Áâá",r,"Âà∞‰ΩçÁΩÆ",n,"(Á¥¢Âºï",i,")");case 7:case"end":return t.stop()}}),t)})),p.s();case 30:if((d=p.n()).done){t.next=34;break}return t.delegateYield(m(),"t0",32);case 32:t.next=30;break;case 34:t.next=39;break;case 36:t.prev=36,t.t1=t.catch(27),p.e(t.t1);case 39:return t.prev=39,p.f(),t.finish(39);case 42:if(new Set(u).size===u.length){t.next=45;break}throw new Error("ÊéíÂêçÂàóË°®ÂåÖÂê´ÈáçÂ§çÂç°Áâá");case 45:return t.next=47,tr({dataPageTitle:n,rankings:u});case 47:console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÊâπÈáè‰øùÂ≠òÊéíÂêçÂèòÊõ¥ÂÆåÊàêÔºåÊúÄÁªàÊéíÂ∫è:",u.length,"‰∏™Âç°Áâá"),t.next=62;break;case 50:if(t.prev=50,t.t2=t.catch(1),console.error("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÊâπÈáè‰øùÂ≠òÊéíÂêçÂèòÊõ¥Â§±Ë¥•:",t.t2),null===(y=t.t2.message)||void 0===y||!y.includes("API")){t.next=57;break}throw new Error("ÁΩëÁªúËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúÂêéÈáçËØï");case 57:if(null===(v=t.t2.message)||void 0===v||!v.includes("ÊùÉÈôê")){t.next=61;break}throw new Error("Ê≤°Êúâ‰øÆÊîπÊùÉÈôêÔºåËØ∑Ê£ÄÊü•Roam ResearchËÆæÁΩÆ");case 61:throw new Error("‰øùÂ≠òÂ§±Ë¥•: ".concat(t.t2.message||"Êú™Áü•ÈîôËØØ"));case 62:case"end":return t.stop()}}),t,null,[[1,50],[27,36,39,42]])})));return function(e){return t.apply(this,arguments)}}();function rr(t){return rr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},rr(t)}function nr(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||hr(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ir(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function ar(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ir(Object(r),!0).forEach((function(e){or(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ir(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function or(t,e,r){var n;return n=function(t,e){if("object"!=rr(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=rr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e),(e="symbol"==rr(n)?n:String(n))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function sr(t){return function(t){if(Array.isArray(t))return ur(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||hr(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function lr(){lr=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==rr(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(rr(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function cr(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=hr(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function hr(t,e){if(t){if("string"==typeof t)return ur(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ur(t,e):void 0}}function ur(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function fr(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function pr(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){fr(a,n,i,o,s,"next",t)}function s(t){fr(a,n,i,o,s,"throw",t)}o(void 0)}))}}var dr=new Map,mr=function(t){return dr.has(t)||dr.set(t,{isInProgress:!1,lastTime:0,debounceMs:1e3}),dr.get(t)},yr=function(){var t=pr(lr().mark((function t(e){var r,n,i,a,o,s,l,c,h,u,f,p,d,m,y,v,g,b,x,w,E,k,S,_;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.tagsList,n=e.dataPageTitle,i=e.dailyLimit,a=e.isCramming,o=e.shuffleCards,s=e.cachedData,l=e.defaultPriority,c=void 0===l?70:l,t.next=3,_r({dataPageTitle:n,limitToLatest:!1});case 3:h=t.sent,u=Le({tagsList:r,cachedData:s}),f={},p={},d=cr(r),t.prev=8,d.s();case 10:if((m=d.n()).done){t.next=21;break}return y=m.value,t.next=14,Ar({pluginPageData:h,tag:y,dataPageTitle:n});case 14:v=t.sent,g=v.sessionData,b=v.cardUids,f[y]=g,p[y]=b;case 19:t.next=10;break;case 21:t.next=26;break;case 23:t.prev=23,t.t0=t.catch(8),d.e(t.t0);case 26:return t.prev=26,d.f(),t.finish(26);case 29:x=new Set,w=cr(r);try{for(w.s();!(E=w.n()).done;)k=E.value,p[k].forEach((function(t){return x.add(t)}))}catch(t){w.e(t)}finally{w.f()}return S=Math.max(1,x.size),t.next=35,vr(x,n,c);case 35:return t.next=37,Qe({dataPageTitle:n});case 37:return _=t.sent,t.next=40,Oe({today:u,tagsList:r,sessionData:f});case 40:return je({today:u,tagsList:r,cardUids:p,pluginPageData:h,shuffleCards:o,priorityOrder:_}),Ne({today:u,tagsList:r,sessionData:f,isCramming:a,shuffleCards:o,priorityOrder:_}),Ie({today:u,tagsList:r}),Tr({today:u,dailyLimit:i,tagsList:r,isCramming:a}),Ie({today:u,tagsList:r}),Fe({today:u,tagsList:r}),t.abrupt("return",{practiceData:h,todayStats:u,allCardsCount:S,priorityOrder:_,allCardUids:Array.from(x)});case 47:case"end":return t.stop()}}),t,null,[[8,23,26,29]])})));return function(e){return t.apply(this,arguments)}}(),vr=function(){var t=pr(lr().mark((function t(e,r,n){var i,a,o,s,l,c,h,u;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(i=mr(r),a=Date.now(),!(i.isInProgress||a-i.lastTime<i.debounceMs)){t.next=5;break}return t.abrupt("return");case 5:return i.isInProgress=!0,i.lastTime=a,t.prev=7,t.next=10,Qe({dataPageTitle:r});case 10:if(o=t.sent,0!==(s=Array.from(e).filter((function(t){return!o.includes(t)}))).length){t.next=15;break}return t.abrupt("return");case 15:return l=sr(s).reverse(),c=o.length+l.length,h=Math.max(0,Math.ceil(c*(1-n/100))-1),(u=sr(o)).splice.apply(u,[h,0].concat(sr(l))),t.next=24,tr({dataPageTitle:r,rankings:u});case 24:t.next=32;break;case 27:throw t.prev=27,t.t0=t.catch(7),console.error("üéØ [ÊéíÂ∫èÊõ¥Êñ∞] Êõ¥Êñ∞Â§±Ë¥•:",t.t0),i.lastTime=0,t.t0;case 32:return t.prev=32,i.isInProgress=!1,t.finish(32);case 35:case"end":return t.stop()}}),t,null,[[7,27,32,35]])})));return function(e,r,n){return t.apply(this,arguments)}}(),gr=function(t){return'[\n  :find ?page\n  :where\n    [?page :node/title "'.concat(t,'"]\n]')},br=function(){var t=pr(lr().mark((function t(e,r){var n,i,a;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=window.roamAlphaAPI.q(gr(r)),i=n.length?n[0][0]:"",a=window.roamAlphaAPI.q("[\n  :find ?refUid\n  :in $ ?tag ?dataPage\n  :where\n    [?tagPage :node/title ?tag]\n    [?tagRefs :block/refs ?tagPage]\n    [?tagRefs :block/uid ?refUid]\n    [?tagRefs :block/page ?homePage]\n    [(!= ?homePage ?dataPage)]\n  ]",e,i),t.abrupt("return",a.map((function(t){return t[0]})));case 4:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}(),xr=function(){var t=pr(lr().mark((function t(e){var r,n,i;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ye(e);case 2:if((r=t.sent).length){t.next=5;break}return t.abrupt("return",[]);case 5:return n=r[0][0].children,i=n.filter((function(t){return!!t.string})),t.abrupt("return",i.map((function(t){return t.uid})));case 8:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),wr=function(t,e){var r,n,i,a,o=cr((n=e,i=n.children.some((function(t){return t.string.includes("reviewMode")}))?n.children:[].concat(sr(n.children),[{order:n.children.length,string:"reviewMode:: ".concat(Zt.DefaultSpacedInterval)}]),ar(ar({},n),{},{children:i})).children);try{for(o.s();!(r=o.n()).done;){var s=nr(r.value.string.split("::").map((function(t){return t.trim()})),2),l=s[0],c=s[1];"nextDueDate"===l?t[l]=Ft(Lt(c,"[[","]]")):"true"===c||"false"===c?t[l]="true"===c:"string"!=typeof(a=c)||isNaN(a)||isNaN(parseFloat(a))?t[l]=c:t[l]=Number(c)}}catch(t){o.e(t)}finally{o.f()}},Er=function(t){var e;return(null===(e=t.map((function(t){return t[0]}))[0].children)||void 0===e?void 0:e.reduce((function(t,e){var r=Lt(e.string,"((","))");if(t[r]={},!e.children)return t;var n=e.children.find((function(t){return 0===t.order}));return t[r].dateCreated=Ft(Lt(n.string,"[[","]]")),n.children?(wr(t[r],n),t):t}),{}))||{}},kr=function(t){var e;return(null===(e=t.map((function(t){return t[0]}))[0].children)||void 0===e?void 0:e.reduce((function(t,e){var r=Lt(e.string,"((","))");if(t[r]=[],!e.children)return t;var n,i=cr(e.children);try{for(i.s();!(n=i.n()).done;){var a=n.value,o={refUid:r,dateCreated:Ft(Lt(a.string,"[[","]]"))};if(!a.children)return t;wr(o,a),t[r].push(o)}}catch(t){i.e(t)}finally{i.f()}return t}),{}))||{}},Sr=function(){var t=pr(lr().mark((function t(e){var r,n;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,n=e.blockName,t.next=3,window.roamAlphaAPI.q("[\n  :find (pull ?pluginPageChildren [\n    :block/string\n    :block/children\n    :block/order\n    {:block/children ...}])\n    :in $ ?pageTitle ?dataBlockName\n    :where\n    [?page :node/title ?pageTitle]\n    [?page :block/children ?pluginPageChildren]\n    [?pluginPageChildren :block/string ?dataBlockName]\n  ]",r,n);case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),_r=function(){var t=pr(lr().mark((function t(e){var r,n,i,a;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,n=e.limitToLatest,i=void 0===n||n,t.next=3,Sr({dataPageTitle:r,blockName:"data"});case 3:if((a=t.sent).length){t.next=6;break}return t.abrupt("return",{});case 6:return t.abrupt("return",i?Er(a):kr(a));case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Pr=function(t){var e=t.map((function(t){return t[0]}))[0].children;return e&&e.length&&null!=e&&e.length&&e.reduce((function(t,e){var r;return t[Lt(e.string,"[[","]]")]=(null===(r=e.children)||void 0===r?void 0:r.reduce((function(t,e){if(!e.string)return t;var r=nr(e.string.split("::").map((function(t){return t.trim()})),2),n=r[0],i=r[1],a=Ft(i);return t[n]=a||i,t}),{}))||{},t}),{})||{}},Cr=function(){var t=pr(lr().mark((function t(e){var r,n;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,t.next=3,Sr({dataPageTitle:r,blockName:"cache"});case 3:if((n=t.sent).length){t.next=6;break}return t.abrupt("return",{});case 6:return t.abrupt("return",Pr(n));case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Ar=function(){var t=pr(lr().mark((function t(e){var r,n,i,a,o,s,l;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.pluginPageData,n=e.tag,i=e.dataPageTitle,t.next=3,br(n,i);case 3:return a=t.sent,t.next=6,xr(n);case 6:return o=t.sent,s=a.concat(o),l=Object.keys(r).reduce((function(t,e){return s.indexOf(e)>-1&&(t[e]=r[e]),t}),{}),t.abrupt("return",{sessionData:l,cardUids:s});case 10:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Tr=function(t){var e=t.today,r=t.dailyLimit,n=t.tagsList,i=t.isCramming,a=e.combinedToday.due+e.combinedToday.new;if(r&&a&&!i){!function(t){var e,r=t.today,n=Te(t.tagsList);try{for(n.s();!(e=n.n()).done;){var i,a,o=e.value;(i=r.tags[o].newUids).push.apply(i,Se(r.tags[o].completedNewUids)),(a=r.tags[o].dueUids).push.apply(a,Se(r.tags[o].completedDueUids)),r.tags[o].new=r.tags[o].newUids.length,r.tags[o].due=r.tags[o].dueUids.length}}catch(t){n.e(t)}finally{n.f()}}({today:e,tagsList:n});var o=n.reduce((function(t,e){return ar(ar({},t),{},or({},e,{newUids:[],dueUids:[]}))}),{}),s=r,l=1===s?0:Math.max(1,Math.floor(.25*s)),c=s-l,h=0,u=0,f=h+u;t:for(;f<a;){var p,d=cr(n);try{for(d.s();!(p=d.n()).done;){var m=p.value;if((f=h+u)===s)break t;var y=o[m],v=y.newUids.length,g=e.tags[m].newUids[v],b=y.dueUids.length,x=e.tags[m].dueUids[b],w=h<l,E=u<c,k=!!x||u<e.combinedToday.due,S=!!g||h<e.combinedToday.new;!g||!w&&k?!x||!E&&S||(o[m].dueUids.push(e.tags[m].dueUids[b]),u++):(o[m].newUids.push(e.tags[m].newUids[v]),h++)}}catch(t){d.e(t)}finally{d.f()}}var _,P=cr(n);try{for(P.s();!(_=P.n()).done;){var C=_.value,A=e.tags[C],T=A.completedDueUids,M=A.completedNewUids,D=Math.max(o[C].dueUids.length-T.length,0),L=Math.max(o[C].newUids.length-M.length,0);o[C].dueUids=o[C].dueUids.slice(0,D),o[C].newUids=o[C].newUids.slice(0,L)}}catch(t){P.e(t)}finally{P.f()}var F,O=cr(n);try{for(O.s();!(F=O.n()).done;){var I=F.value;e.tags[I]=ar(ar({},e.tags[I]),{},{dueUids:o[I].dueUids,newUids:o[I].newUids,due:o[I].dueUids.length,new:o[I].newUids.length})}}catch(t){O.e(t)}finally{O.f()}}};function Mr(t){return Mr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Mr(t)}function Dr(t){return function(t){if(Array.isArray(t))return Vr(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||Br(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lr(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Fr(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Lr(Object(r),!0).forEach((function(e){Gr(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Lr(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Or(){Or=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==Mr(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Mr(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Ir(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function jr(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Ir(a,n,i,o,s,"next",t)}function s(t){Ir(a,n,i,o,s,"throw",t)}o(void 0)}))}}function Rr(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=Br(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function Nr(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||Br(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Br(t,e){if(t){if("string"==typeof t)return Vr(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Vr(t,e):void 0}}function Vr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Gr(t,e,r){var n;return n=function(t,e){if("object"!=Mr(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=Mr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e),(e="symbol"==Mr(n)?n:String(n))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var zr=Gr(Gr(Gr(Gr({},"r/1",{oldDisplayButtonText:"Again",memoDisplayButtonText:"Forgot",memoGrade:0}),"r/2",{oldDisplayButtonText:"Hard",memoDisplayButtonText:"Hard",memoGrade:3}),"r/3",{oldDisplayButtonText:"Good",memoDisplayButtonText:"Good",memoGrade:4}),"r/4",{oldDisplayButtonText:"Easy",memoDisplayButtonText:"Perfect",memoGrade:5}),Hr=function(t,e){return t.reduce((function(t,r){var n=Nr(r,1)[0],i=n.title;return n.children.filter((function(t){return t.string==="[[".concat(e,"]]")})).filter((function(t){return!!t.children})).forEach((function(e){var r,n=Rr(e.children);try{for(n.s();!(r=n.n()).done;){var a=r.value.string.split(" ");if(2===a.length){var o=Nr(a,2),s=o[0],l=o[1];if(s&&l){var c=Lt(s,"((","))");t[c]||(t[c]=[]),t[c].push({refUid:c,grade:zr[Lt(l,"[[","]]")].memoGrade,dateCreated:Ft(i),isRoamSrOldPracticeRecord:!0})}}}}catch(t){n.e(t)}finally{n.f()}})),t}),{})},$r=function(t){for(var e in t)t[e]=t[e].sort((function(t,e){return t.dateCreated-e.dateCreated}));return t},Ur=function(){var t=jr(Or().mark((function t(){var e,r;return Or().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e="roam/sr/review",t.next=3,window.roamAlphaAPI.q("\n    [:find (pull ?parentPageId [\n      :node/title\n      :block/string\n      :block/children\n      {:block/children ...}])\n     :in $ ?reviewTagPageName\n     :where\n     [?pageId :node/title ?reviewTagPageName]\n     [?refIds :block/refs ?pageId]\n     [?parentPageId :block/children, ?refIds]\n    ]",e);case 3:return r=t.sent,t.abrupt("return",$r(Hr(r,e)));case 5:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),qr=function(t,e){var r=Fr({},t);for(var n in e)n in t&&(e[n].some((function(t){return t.isRoamSrOldPracticeRecord}))?r[n]=Dr(e[n]):r[n]=[].concat(Dr(r[n]),Dr(e[n])),r[n].sort((function(t,e){return t.dateCreated-e.dateCreated})));return r},Wr=function(){var t=jr(Or().mark((function t(e,r,n){var i,a,o,s,l,c,h,u,f,p,d,m,y,v,g,b,x,w,E,k;return Or().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:i=qr(e,r),a={},o=0,s=Object.entries(i);case 3:if(!(o<s.length)){t.next=37;break}(l=Nr(s[o],2))[0],c=l[1],h=Rr(c),t.prev=6,h.s();case 8:if((u=h.n()).done){t.next=26;break}return f=u.value,p=f.refUid,d=f.dateCreated,m=f.grade,y=f.isRoamSrOldPracticeRecord,v={refUid:p,grade:m,dataPageTitle:n,dateCreated:d,eFactor:void 0,repetitions:void 0,interval:void 0},a[p]?(g=a[p][a[p].length-1],b=g.eFactor,x=g.repetitions,w=g.interval,v=Fr(Fr({},v),{},{eFactor:b,repetitions:x,interval:w})):(E=Ee({dateCreated:d}),v=Fr(Fr({},v),E)),t.t0=Fr,t.t1=Fr,t.t2={},t.next=18,practice(v,!0);case 18:t.t3=t.sent,t.t4=(0,t.t1)(t.t2,t.t3),t.t5={},t.t6={grade:m,dateCreated:d,isRoamSrOldPracticeRecord:!!y},k=(0,t.t0)(t.t4,t.t5,t.t6),a[p]?a[p].push(k):a[p]=[k];case 24:t.next=8;break;case 26:t.next=31;break;case 28:t.prev=28,t.t7=t.catch(6),h.e(t.t7);case 31:return t.prev=31,h.f(),t.finish(31);case 34:o++,t.next=3;break;case 37:return t.abrupt("return",a);case 38:case"end":return t.stop()}}),t,null,[[6,28,31,34]])})));return function(e,r,n){return t.apply(this,arguments)}}();function Yr(t){return Yr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Yr(t)}function Xr(){Xr=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==Yr(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Yr(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Kr(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Jr(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Kr(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=Yr(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=Yr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==Yr(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Kr(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Zr(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Qr(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return tn(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?tn(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function tn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var en=new Map;var rn=void 0,nn=function(t){return new Promise((function(e){return setTimeout(e,t)}))},an=__webpack_require__(3049);const on=JSON.parse('{"v":"4.8.0","meta":{"g":"LottieFiles AE 3.1.1","a":"setya.play@gmail.com","k":"Dancing Book","d":"Dancing Book","tc":"Green Lottie"},"fr":30,"ip":0,"op":120,"w":634,"h":619,"nm":"03","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"tl1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[118,222.75,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[204.89,267.485,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[169,105.75,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[204.89,267.485,0],"to":[0,0,0],"ti":[0,0,0]},{"t":120,"s":[118,222.75,0]}],"ix":2},"a":{"a":0,"k":[17.522,17.522,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-9.539],[9.539,0],[0,9.539],[-9.539,0]],"o":[[0,9.539],[-9.539,0],[0,-9.539],[9.539,0]],"v":[[17.272,0],[0,17.272],[-17.272,0],[0,-17.272]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[17.522,17.522],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"A 3","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[187.369,210.494,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[22.5,88]],"o":[[-3,41],[0,0]],"v":[[-201.5,-83],[-295,-83]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[-76.375,87.583]],"o":[[-25.994,66.543],[0,0]],"v":[[-172.884,-14.244],[-217.595,-44.106]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[-10.507,91.391]],"o":[[-26.286,10.88],[0,0]],"v":[[-198.209,-84.649],[-292.592,-162.835]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[-84.871,73.158]],"o":[[-42.763,79.596],[0,0]],"v":[[-171.867,-13.618],[-210.432,-48.87]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[22.5,88]],"o":[[-3,41],[0,0]],"v":[[-201.5,-83],[-295,-83]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":5,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"pipi","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[112.353,123.49,0]}],"ix":2},"a":{"a":0,"k":[78.343,3.81,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-0.983],[7.53,0],[0,0.983],[-7.53,0]],"o":[[0,0.983],[-7.53,0],[0,-0.983],[7.53,0]],"v":[[13.635,0],[0,1.78],[-13.635,0],[0,-1.78]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.210503641764,0.925490196078,0.776534615311,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[142.802,2.03],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-0.983],[7.53,0],[0,0.983],[-7.53,0]],"o":[[0,0.983],[-7.53,0],[0,-0.983],[7.53,0]],"v":[[13.635,0],[0,1.78],[-13.635,0],[0,-1.78]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.210503641764,0.925490196078,0.776534615311,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[13.884,5.591],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":4,"nm":"mlt","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[117.66,146.199,0]}],"ix":2},"a":{"a":0,"k":[34.609,26.648,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"t":480,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"st","c":{"a":0,"k":[0.073356396544,0.623529411765,0.508910055722,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[34.609,26.649],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":4,"nm":"mata","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[109.492,98.752,0]}],"ix":2},"a":{"a":0,"k":[57.588,8.163,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"t":480,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[107.012,8.163],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"t":480,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[8.163,8.163],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":6,"ty":4,"nm":"DEPAN","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":0,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":30,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":60,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":90,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":120,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":150,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":180,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":210,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":240,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":270,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":300,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":330,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":360,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":390,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":420,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":450,"s":[-5]},{"t":480,"s":[0]}],"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":30,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":60,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":90,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":120,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":150,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":180,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":210,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":240,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":270,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":300,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":330,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":360,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":390,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":420,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":450,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[339.061,358.247,0]}],"ix":2},"a":{"a":0,"k":[111.43,259.241,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.113725490196,0.866666666667,0.709803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[111.839,129.928],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":7,"ty":4,"nm":"A 2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[415,309.5,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[76,-63.5]],"o":[[0,0],[0,0]],"v":[[-18,64],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[84,-49]],"o":[[0,0],[0,0]],"v":[[7.5,71.5],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[79,-65]],"o":[[0,0],[0,0]],"v":[[-9,61],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[85.5,-54.5]],"o":[[0,0],[0,0]],"v":[[4.322,65.143],[-37,201.5]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[76,-63.5]],"o":[[0,0],[0,0]],"v":[[-18,64],[-37,201.5]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":8,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":8,"ty":4,"nm":"A","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[317,309.5,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[61,-82]],"o":[[0,0],[0,0]],"v":[[-42,57.5],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[91,-45]],"o":[[0,0],[0,0]],"v":[[-10.5,81.5],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[45,-80]],"o":[[0,0],[0,0]],"v":[[-31,36],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[93,-43.5]],"o":[[0,0],[0,0]],"v":[[-14.678,75.643],[-37,201.5]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[61,-82]],"o":[[0,0],[0,0]],"v":[[-42,57.5],[-37,201.5]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":8,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":9,"ty":4,"nm":"sp2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[375.268,512.462,0],"ix":2},"a":{"a":0,"k":[0.25,7.554,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-4.034],[10.603,0],[0,4.034],[-10.602,0]],"o":[[0,4.034],[-10.602,0],[0,-4.034],[10.603,0]],"v":[[19.198,0],[0,7.304],[-19.198,0],[0,-7.304]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[19.448,7.554],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":10,"ty":4,"nm":"sp1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[276.7,512.087,0],"ix":2},"a":{"a":0,"k":[0.25,7.554,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-4.034],[10.603,0],[0,4.034],[-10.602,0]],"o":[[0,4.034],[-10.602,0],[0,-4.034],[10.603,0]],"v":[[19.198,0],[0,7.304],[-19.198,0],[0,-7.304]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[19.448,7.554],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":11,"ty":4,"nm":"tl2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[515.75,199.25,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[501.145,281.399,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[537.75,145.25,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[501.145,281.399,0],"to":[0,0,0],"ti":[0,0,0]},{"t":120,"s":[515.75,199.25,0]}],"ix":2},"a":{"a":0,"k":[19.865,19.865,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.68,-8.801],[-8.801,3.68],[3.68,8.8],[8.801,-3.679]],"o":[[3.68,8.801],[8.8,-3.679],[-3.68,-8.801],[-8.8,3.68]],"v":[[-15.935,6.662],[6.663,15.935],[15.935,-6.662],[-6.663,-15.935]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[19.865,19.865],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":12,"ty":4,"nm":"buku Outlines","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[87.445,149.649,0],"ix":2},"a":{"a":0,"k":[131.136,149.649,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[34.432,144.16],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"t":480,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[136.215,277.268],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"t":480,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[145.762,270.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"t":480,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[158.049,262.27],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[142.196,269.183],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"t":480,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[144.347,278.508],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":13,"ty":4,"nm":"buku Outlines 2","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[87.445,149.649,0],"ix":2},"a":{"a":0,"k":[131.136,149.649,0],"ix":1},"s":{"a":0,"k":[100,-100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"t":480,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[136.215,277.268],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"t":480,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[145.762,270.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"t":480,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[158.049,262.27],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[142.196,269.183],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"t":480,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[144.347,278.508],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":14,"ty":4,"nm":"Shape Layer 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[342,510,0],"ix":2},"a":{"a":0,"k":[25,200.5,0],"ix":1},"s":{"a":0,"k":[100,30,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[244,244],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[0.490195988674,0,0.180391992307,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":0,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117647059,0.898039215686,0.901960784314,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[25,200.5],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":15,"ty":4,"nm":"A 4","parent":11,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":9,"ix":10},"p":{"a":0,"k":[-84.216,186.894,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[54.728,40.444]],"o":[[9.576,38.861],[0,0]],"v":[[75.275,-181.115],[-10.22,-128.976]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[22.5,88]],"o":[[18.587,75.802],[0,0]],"v":[[76.863,-182.172],[11.005,-160.722]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[75.196,9.865]],"o":[[15.193,45.565],[0,0]],"v":[[77.121,-180.648],[-5.782,-88.168]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[22.5,88]],"o":[[22.937,66.507],[0,0]],"v":[[75.212,-181.404],[12.726,-149.858]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[54.728,40.444]],"o":[[9.576,38.861],[0,0]],"v":[[75.275,-181.115],[-10.22,-128.976]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":5,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0}],"markers":[]}');var sn,ln,cn,hn=["className","wrapperClassName"];function un(){return un=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},un.apply(this,arguments)}const fn=Dt((function(t){var e=t.className,r=t.wrapperClassName,n=function(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}(t,hn);return React.createElement(i.Tooltip,un({className:r,popoverClassName:e},n))}))(sn||(ln=["\n  &.bp3-tooltip .bp3-popover-content {\n    font-size: 12px;\n    padding: 2px 5px;\n  }\n"],cn||(cn=ln.slice(0)),sn=Object.freeze(Object.defineProperties(ln,{raw:{value:Object.freeze(cn)}})))),pn="@media (min-width: 1024px)",dn="@media (min-width: 1280px)";var mn=function(t){!function(t){(arguments.length>1&&void 0!==arguments[1]?arguments[1]:[]).forEach((function(e){return t.dispatchEvent(new MouseEvent(e,{view:window,bubbles:!0,cancelable:!0,buttons:1}))}))}(t,["mouseenter","mouseover","mousedown","click","mouseup"])};function yn(t){return yn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},yn(t)}function vn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function gn(){gn=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==yn(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(yn(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function bn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function xn(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?bn(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=yn(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=yn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==yn(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):bn(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function wn(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function En(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){wn(a,n,i,o,s,"next",t)}function s(t){wn(a,n,i,o,s,"throw",t)}o(void 0)}))}}function kn(t){return Array.from(t.childNodes).filter((function(t){return 3===t.nodeType&&t.textContent.trim().length>1}))}function Sn(t,e){for(var r=kn(t),n=0;n<r.length;){var i=r[n],a=i.textContent,o=e.exec(a);if(o){var s=o[0],l=o.index,c=l+s.length,h=a.slice(0,l),u=a.slice(c),f=document.createElement("span");f.classList.add("roam-memo-cloze"),f.textContent=s;var p=document.createTextNode(h),d=document.createTextNode(u);i.parentNode.insertBefore(p,i),i.parentNode.insertBefore(f,i),i.parentNode.insertBefore(d,i),i.parentNode.removeChild(i),r=kn(t)}else n++}}const _n=function(t){var e,n,i=t.renderedBlockElm,a=t.hasClozeCallback,o=(e=r.useState({default:void 0,custom:void 0}),n=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(e,n)||function(t,e){if(t){if("string"==typeof t)return vn(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?vn(t,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[0],l=o[1];r.useEffect((function(){En(gn().mark((function t(){var e;return gn().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(i){t.next=2;break}return t.abrupt("return");case 2:e=i.querySelectorAll(".rm-highlight"),l((function(){return xn(xn({},s),{},{default:e.length})}));case 4:case"end":return t.stop()}}),t)})))()}),[i]),function(t){var e=t.renderedBlockElm,n=t.setClozeCounts;r.useEffect((function(){En(gn().mark((function t(){var r,i,a,o;return gn().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return");case 2:if(r=e.querySelector(".rm-block-main .dont-unfocus-block span")){t.next=5;break}return t.abrupt("return");case 5:i=new RegExp("".concat("{","(.+?)").concat("}"),"gs"),a=new RegExp(i,"gs"),Sn(r,a),o=e.querySelectorAll(".roam-memo-cloze"),n((function(t){return xn(xn({},t),{},{custom:o.length})}));case 12:case"end":return t.stop()}}),t)})))()}),[e])}({renderedBlockElm:i,setClozeCounts:l}),r.useEffect((function(){if(!Object.values(s).every((function(t){return void 0===t}))){var t=Object.values(s).reduce((function(t,e){return t+e}),0);a(t>0)}}),[s])};function Pn(t){return Pn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Pn(t)}var Cn,An,Tn;function Mn(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function Dn(){Dn=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==Pn(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Pn(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Ln(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Fn(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return On(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?On(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function On(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var In=Dt.div(Cn||(Cn=Mn(["\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1000;\n  background: rgba(255, 255, 255, 0.9);\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #666;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n"]))),jn=Dt.div(An||(An=Mn(["\n  // To align bullet on the left + ref count on the right correctly\n  position: relative;\n  left: -14px;\n  width: calc(100% + 19px);\n  opacity: ",";\n  transition: opacity 0.2s ease-in-out;\n\n  & .rm-block-children {\n    /* üöÄ FLASH FIX V3: ‰ΩøÁî® visibility + opacity ‰ª£Êõø displayÔºåÈÅøÂÖçÈó™ÁÉÅ */\n    visibility: ",";\n    opacity: ",";\n    height: ",";\n    overflow: ",";\n    transition: opacity 0.15s ease-in-out, height 0.15s ease-in-out;\n    display: flex; /* ‰øùÊåÅ flex Â∏ÉÂ±ÄÔºå‰∏çÊîπÂèò display */\n  }\n\n  & .rm-block-separator {\n    min-width: unset; // Keeping roam block from expanding 100\n  }\n\n  & .rm-highlight,\n  .roam-memo-cloze {\n    background-color: ",";\n    color: ",";\n    overflow: hidden;\n    border-radius: 2px;\n    padding: 0;\n    margin: 0;\n    /* üöÄ FLASH FIX V3: Ê∑ªÂä†Âπ≥ÊªëËøáÊ∏°ÊïàÊûú */\n    transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;\n  }\n"])),(function(t){return t.isLoading?.5:1}),(function(t){return t.showAnswers?"visible":"hidden"}),(function(t){return t.showAnswers?1:0}),(function(t){return t.showAnswers?"auto":"0"}),(function(t){return t.showAnswers?"visible":"hidden"}),(function(t){return t.showAnswers?"transparent":"#e1e3e5"}),(function(t){return t.showAnswers?"inherit":"transparent"})),Rn=function(t){var e=t.breadcrumbs,n=e.map((function(t,r){return{current:r===e.length-1,text:t.title||t.string}}));return r.createElement(Nn,{className:"rm-zoom zoom-path-view"},n.map((function(t,e){return r.createElement("div",{key:e,className:"rm-zoom-item"},r.createElement("span",{className:"rm-zoom-item-content"},t.text)," ",e!==n.length-1&&r.createElement(i.Icon,{icon:"chevron-right"}))})))},Nn=Dt.div(Tn||(Tn=Mn(["\n  opacity: 0.7;\n  margin-left: 8px !important;\n  margin-top: -4px !important;\n\n  &.rm-zoom-item {\n    cursor: auto !important;\n  }\n"])));const Bn=function(t){var e=t.refUid,n=t.showAnswers,i=t.setHasCloze,a=t.breadcrumbs,o=t.showBreadcrumbs,s=r.useRef(null),l=Fn(r.useState(null),2),c=l[0],h=l[1],u=Fn(r.useState(!1),2),f=u[0],p=u[1];_n({renderedBlockElm:c,hasClozeCallback:i});var d=Fn(r.useState(0),2),m=d[0],y=d[1],v=r.useRef(e),g=r.useRef(null);r.useEffect((function(){v.current=e}),[e]);var b=r.useRef(null),x=r.useCallback((function(){y((function(t){return t+1}))}),[]);return r.useEffect((function(){var t=function(){var t,e=(t=Dn().mark((function t(){var e,r,n,i;return Dn().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=v.current,s.current){t.next=3;break}return t.abrupt("return");case 3:return p(!0),t.prev=4,t.next=7,window.roamAlphaAPI.ui.components.unmountNode({el:s.current});case 7:return t.next=9,window.roamAlphaAPI.ui.components.renderBlock({uid:e,el:s.current});case 9:if(r=s.current.querySelector(".rm-block"),h(r),!(null==r?void 0:r.classList.contains("rm-block--closed"))){t.next=18;break}return n=s.current.querySelector(".block-expand .rm-caret"),mn(n),t.next=17,nn(50);case 17:mn(n);case 18:g.current&&g.current.disconnect(),i=new MutationObserver((function(t){t.forEach((function(t){"childList"===t.type&&t.addedNodes.length>0&&t.addedNodes.forEach((function(t){if(t instanceof HTMLElement){var e=t.querySelectorAll("textarea");e.length>0&&e.forEach((function(t){t.removeEventListener("blur",x),t.addEventListener("blur",x)}))}}))}))})),i.observe(s.current,{childList:!0,subtree:!0}),g.current=i;case 22:return t.prev=22,p(!1),t.finish(22);case 25:case"end":return t.stop()}}),t,null,[[4,,22,25]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Ln(a,n,i,o,s,"next",t)}function s(t){Ln(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(){return e.apply(this,arguments)}}(),e=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300,r=new Map;return function(n){for(var i=arguments.length,a=new Array(i>1?i-1:0),o=1;o<i;o++)a[o-1]=arguments[o];r.has(n)&&clearTimeout(r.get(n));var s=setTimeout((function(){r.delete(n),t.apply(rn,a)}),e);r.set(n,s)}}(t,50);return b.current=function(){return e(v.current)},function(){b.current=null,g.current&&(g.current.disconnect(),g.current=null)}}),[x]),r.useEffect((function(){b.current&&b.current()}),[e,m]),r.createElement("div",null,a&&o&&r.createElement(Rn,{breadcrumbs:a}),f&&r.createElement(In,null,"Âä†ËΩΩ‰∏≠..."),r.createElement(jn,{ref:s,showAnswers:n,isLoading:f}))};var Vn,Gn=((Vn=Gn||{})[Vn.New=0]="New",Vn[Vn.Learning=1]="Learning",Vn[Vn.Review=2]="Review",Vn[Vn.Relearning=3]="Relearning",Vn),zn=(t=>(t[t.Manual=0]="Manual",t[t.Again=1]="Again",t[t.Hard=2]="Hard",t[t.Good=3]="Good",t[t.Easy=4]="Easy",t))(zn||{});class Hn{static card(t){return{...t,state:Hn.state(t.state),due:Hn.time(t.due),last_review:t.last_review?Hn.time(t.last_review):void 0}}static rating(t){if("string"==typeof t){const e=t.charAt(0).toUpperCase(),r=t.slice(1).toLowerCase(),n=zn[`${e}${r}`];if(void 0===n)throw new Error(`Invalid rating:[${t}]`);return n}if("number"==typeof t)return t;throw new Error(`Invalid rating:[${t}]`)}static state(t){if("string"==typeof t){const e=t.charAt(0).toUpperCase(),r=t.slice(1).toLowerCase(),n=Gn[`${e}${r}`];if(void 0===n)throw new Error(`Invalid state:[${t}]`);return n}if("number"==typeof t)return t;throw new Error(`Invalid state:[${t}]`)}static time(t){if("object"==typeof t&&t instanceof Date)return t;if("string"==typeof t){const e=Date.parse(t);if(isNaN(e))throw new Error(`Invalid date:[${t}]`);return new Date(e)}if("number"==typeof t)return new Date(t);throw new Error(`Invalid date:[${t}]`)}static review_log(t){return{...t,due:Hn.time(t.due),rating:Hn.rating(t.rating),state:Hn.state(t.state),review:Hn.time(t.review)}}}function $n(t,e,r){return new Date(r?Hn.time(t).getTime()+24*e*60*60*1e3:Hn.time(t).getTime()+60*e*1e3)}function Un(t,e,r){if(!t||!e)throw new Error("Invalid date");const n=Hn.time(t).getTime()-Hn.time(e).getTime();let i=0;switch(r){case"days":i=Math.floor(n/864e5);break;case"minutes":i=Math.floor(n/6e4)}return i}function qn(t){return t<10?`0${t}`:`${t}`}Date.prototype.scheduler=function(t,e){return $n(this,t,e)},Date.prototype.diff=function(t,e){return Un(this,t,e)},Date.prototype.format=function(){return function(t){const e=Hn.time(t),r=e.getFullYear(),n=e.getMonth()+1,i=e.getDate(),a=e.getHours(),o=e.getMinutes(),s=e.getSeconds();return`${r}-${qn(n)}-${qn(i)} ${qn(a)}:${qn(o)}:${qn(s)}`}(this)},Date.prototype.dueFormat=function(t,e,r){return function(t,e,r,n=Yn){t=Hn.time(t),e=Hn.time(e),n.length!==Yn.length&&(n=Yn);let i,a=t.getTime()-e.getTime();for(a/=1e3,i=0;i<Wn.length&&!(a<Wn[i]);i++)a/=Wn[i];return`${Math.floor(a)}${r?n[i]:""}`}(this,t,e,r)};const Wn=[60,60,24,31,12],Yn=["second","min","hour","day","month","year"],Xn=Object.freeze([zn.Again,zn.Hard,zn.Good,zn.Easy]),Kn=[{start:2.5,end:7,factor:.15},{start:7,end:20,factor:.1},{start:20,end:1/0,factor:.05}];function Jn(t,e,r){return Math.min(Math.max(t,e),r)}const Zn=Object.freeze(["1m","10m"]),Qn=Object.freeze(["10m"]),ti=.001,ei=100,ri=Object.freeze([.212,1.2931,2.3065,8.2956,6.4133,.8334,3.0194,.001,1.8722,.1666,.796,1.4835,.0614,.2629,1.6483,.6014,1.8729,.5425,.0912,.0658,.1542]),ni=(t,e)=>{let r=2;return Math.max(0,e)>1&&(r=Jn(+(-(Math.log(t[11])+Math.log(Math.pow(2,t[13])-1)+.3*t[14])/e).toFixed(8),.01,2)),(t=>[[ti,ei],[ti,ei],[ti,ei],[ti,ei],[1,10],[.001,4],[.001,4],[.001,.75],[0,4.5],[0,.8],[.001,3.5],[.001,5],[.001,.25],[.001,.9],[0,4],[0,1],[1,6],[0,t],[0,t],[0,.8],[.1,.8]])(r).map((([e,r],n)=>Jn(t[n],e,r)))},ii=t=>{if(void 0===t)return[...ri];switch(t.length){case 21:return[...t];case 19:return console.debug("[FSRS-6]auto fill w from 19 to 21 length"),[...t,0,.5];case 17:{const e=[...t];return e[4]=+(2*e[5]+e[4]).toFixed(8),e[5]=+(Math.log(3*e[5]+1)/3).toFixed(8),e[6]=+(e[6]+.5).toFixed(8),console.debug("[FSRS-6]auto fill w from 17 to 21 length"),e.concat([0,0,0,.5])}default:return console.warn("[FSRS]Invalid parameters length, using default parameters"),[...ri]}},ai=t=>{const e=Array.isArray(t?.learning_steps)?t.learning_steps:Zn,r=Array.isArray(t?.relearning_steps)?t.relearning_steps:Qn,n=ni(ii(t?.w),r.length);return{request_retention:t?.request_retention||.9,maximum_interval:t?.maximum_interval||36500,w:n,enable_fuzz:t?.enable_fuzz??!1,enable_short_term:t?.enable_short_term??!0,learning_steps:e,relearning_steps:r}};function oi(t,e){const r={due:t?Hn.time(t):new Date,stability:0,difficulty:0,elapsed_days:0,scheduled_days:0,reps:0,lapses:0,learning_steps:0,state:Gn.New,last_review:void 0};return e&&"function"==typeof e?e(r):r}class si{c;s0;s1;s2;constructor(t){const e=function(){let t=4022871197;return function(e){e=String(e);for(let r=0;r<e.length;r++){t+=e.charCodeAt(r);let n=.02519603282416938*t;t=n>>>0,n-=t,n*=t,t=n>>>0,n-=t,t+=4294967296*n}return 2.3283064365386963e-10*(t>>>0)}}();this.c=1,this.s0=e(" "),this.s1=e(" "),this.s2=e(" "),null==t&&(t=+new Date),this.s0-=e(t),this.s0<0&&(this.s0+=1),this.s1-=e(t),this.s1<0&&(this.s1+=1),this.s2-=e(t),this.s2<0&&(this.s2+=1)}next(){const t=2091639*this.s0+2.3283064365386963e-10*this.c;return this.s0=this.s1,this.s1=this.s2,this.s2=t-(this.c=0|t),this.s2}set state(t){this.c=t.c,this.s0=t.s0,this.s1=t.s1,this.s2=t.s2}get state(){return{c:this.c,s0:this.s0,s1:this.s1,s2:this.s2}}}const li=t=>{const e="number"==typeof t?-t:-t[20];return{decay:e,factor:+(Math.exp(Math.pow(e,-1)*Math.log(.9))-1).toFixed(8)}};function ci(t,e,r){const{decay:n,factor:i}=li(t);return+Math.pow(1+i*e/r,n).toFixed(8)}class hi{param;intervalModifier;_seed;constructor(t){this.param=new Proxy(ai(t),this.params_handler_proxy()),this.intervalModifier=this.calculate_interval_modifier(this.param.request_retention),this.forgetting_curve=ci.bind(this,this.param.w)}get interval_modifier(){return this.intervalModifier}set seed(t){this._seed=t}calculate_interval_modifier(t){if(t<=0||t>1)throw new Error("Requested retention rate should be in the range (0,1]");const{decay:e,factor:r}=li(this.param.w);return+((Math.pow(t,1/e)-1)/r).toFixed(8)}get parameters(){return this.param}set parameters(t){this.update_parameters(t)}params_handler_proxy(){const t=this;return{set:function(e,r,n){return"request_retention"===r&&Number.isFinite(n)?t.intervalModifier=t.calculate_interval_modifier(Number(n)):"w"===r&&(n=ni(ii(n),e.relearning_steps.length),t.forgetting_curve=ci.bind(this,n),t.intervalModifier=t.calculate_interval_modifier(Number(e.request_retention))),Reflect.set(e,r,n),!0}}}update_parameters(t){const e=ai(t);for(const t in e)if(t in this.param){const r=t;this.param[r]=e[r]}}init_stability(t){return Math.max(this.param.w[t-1],.1)}init_difficulty(t){return+(this.param.w[4]-Math.exp((t-1)*this.param.w[5])+1).toFixed(8)}apply_fuzz(t,e){if(!this.param.enable_fuzz||t<2.5)return Math.round(t);const r=function(t){const e=new si(t),r=()=>e.next();return r.int32=()=>4294967296*e.next()|0,r.double=()=>r()+11102230246251565e-32*(2097152*r()|0),r.state=()=>e.state,r.importState=t=>(e.state=t,r),r}(this._seed)(),{min_ivl:n,max_ivl:i}=function(t,e,r){let n=1;for(const e of Kn)n+=e.factor*Math.max(Math.min(t,e.end)-e.start,0);t=Math.min(t,r);let i=Math.max(2,Math.round(t-n));const a=Math.min(Math.round(t+n),r);return t>e&&(i=Math.max(i,e+1)),i=Math.min(i,a),{min_ivl:i,max_ivl:a}}(t,e,this.param.maximum_interval);return Math.floor(r*(i-n+1)+n)}next_interval(t,e){const r=Math.min(Math.max(1,Math.round(t*this.intervalModifier)),this.param.maximum_interval);return this.apply_fuzz(r,e)}linear_damping(t,e){return+(t*(10-e)/9).toFixed(8)}next_difficulty(t,e){const r=-this.param.w[6]*(e-3),n=t+this.linear_damping(r,t);return Jn(this.mean_reversion(this.init_difficulty(zn.Easy),n),1,10)}mean_reversion(t,e){return+(this.param.w[7]*t+(1-this.param.w[7])*e).toFixed(8)}next_recall_stability(t,e,r,n){const i=zn.Hard===n?this.param.w[15]:1,a=zn.Easy===n?this.param.w[16]:1;return+Jn(e*(1+Math.exp(this.param.w[8])*(11-t)*Math.pow(e,-this.param.w[9])*(Math.exp((1-r)*this.param.w[10])-1)*i*a),ti,36500).toFixed(8)}next_forget_stability(t,e,r){return+Jn(this.param.w[11]*Math.pow(t,-this.param.w[12])*(Math.pow(e+1,this.param.w[13])-1)*Math.exp((1-r)*this.param.w[14]),ti,36500).toFixed(8)}next_short_term_stability(t,e){const r=Math.pow(t,-this.param.w[19])*Math.exp(this.param.w[17]*(e-3+this.param.w[18]));return+Jn(t*(e>=3?Math.max(r,1):r),ti,36500).toFixed(8)}forgetting_curve;next_state(t,e,r){const{difficulty:n,stability:i}=t??{difficulty:0,stability:0};if(e<0)throw new Error(`Invalid delta_t "${e}"`);if(r<0||r>4)throw new Error(`Invalid grade "${r}"`);if(0===n&&0===i)return{difficulty:Jn(this.init_difficulty(r),1,10),stability:this.init_stability(r)};if(0===r)return{difficulty:n,stability:i};if(n<1||i<ti)throw new Error(`Invalid memory state { difficulty: ${n}, stability: ${i} }`);const a=this.forgetting_curve(e,i),o=this.next_recall_stability(n,i,a,r),s=this.next_forget_stability(n,i,a),l=this.next_short_term_stability(i,r);let c=o;if(1===r){let[t,e]=[0,0];this.param.enable_short_term&&(t=this.param.w[17],e=this.param.w[18]),c=Jn(+(i/Math.exp(t*e)).toFixed(8),ti,s)}return 0===e&&this.param.enable_short_term&&(c=l),{difficulty:this.next_difficulty(n,r),stability:c}}}function ui(){return`${this.review_time.getTime()}_${this.current.reps}_${this.current.difficulty*this.current.stability}`}const fi=t=>{const e=t.slice(-1),r=parseInt(t.slice(0,-1),10);if(isNaN(r)||!Number.isFinite(r)||r<0)throw new Error(`Invalid step value: ${t}`);switch(e){case"m":return r;case"h":return 60*r;case"d":return 1440*r;default:throw new Error(`Invalid step unit: ${t}, expected m/h/d`)}},pi=(t,e,r)=>{const n=e===Gn.Relearning||e===Gn.Review?t.relearning_steps:t.learning_steps,i=n.length;if(0===i||r>=i)return{};const a=n[0],o=fi,s=()=>{if(1===i)return Math.round(1.5*o(a));const t=n[1];return Math.round((o(a)+o(t))/2)},l=t=>t<0||t>=i?null:n[t],c={},h=l(Math.max(0,r));if(e===Gn.Review)return c[zn.Again]={scheduled_minutes:o(h),next_step:0},c;{c[zn.Again]={scheduled_minutes:o(a),next_step:0},c[zn.Hard]={scheduled_minutes:s(),next_step:r};const t=l(r+1);if(t){const e=(t=>o(t))(t);e&&(c[zn.Good]={scheduled_minutes:Math.round(e),next_step:r+1})}}return c};var di=(t=>(t.SCHEDULER="Scheduler",t.LEARNING_STEPS="LearningSteps",t.SEED="Seed",t))(di||{});class mi{last;current;review_time;next=new Map;algorithm;strategies;elapsed_days=0;constructor(t,e,r,n){this.algorithm=r,this.last=Hn.card(t),this.current=Hn.card(t),this.review_time=Hn.time(e),this.strategies=n,this.init()}checkGrade(t){if(!Number.isFinite(t)||t<0||t>4)throw new Error(`Invalid grade "${t}",expected 1-4`)}init(){const{state:t,last_review:e}=this.current;let r=0;t!==Gn.New&&e&&(r=function(t,e){const r=Date.UTC(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n=Date.UTC(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate());return Math.floor((n-r)/864e5)}(e,this.review_time)),this.current.last_review=this.review_time,this.elapsed_days=r,this.current.elapsed_days=r,this.current.reps+=1;let n=ui;if(this.strategies){const t=this.strategies.get(di.SEED);t&&(n=t)}this.algorithm.seed=n.call(this)}preview(){return{[zn.Again]:this.review(zn.Again),[zn.Hard]:this.review(zn.Hard),[zn.Good]:this.review(zn.Good),[zn.Easy]:this.review(zn.Easy),[Symbol.iterator]:this.previewIterator.bind(this)}}*previewIterator(){for(const t of Xn)yield this.review(t)}review(t){const{state:e}=this.last;let r;switch(this.checkGrade(t),e){case Gn.New:r=this.newState(t);break;case Gn.Learning:case Gn.Relearning:r=this.learningState(t);break;case Gn.Review:r=this.reviewState(t)}return r}buildLog(t){const{last_review:e,due:r,elapsed_days:n}=this.last;return{rating:t,state:this.current.state,due:e||r,stability:this.current.stability,difficulty:this.current.difficulty,elapsed_days:this.elapsed_days,last_elapsed_days:n,scheduled_days:this.current.scheduled_days,learning_steps:this.current.learning_steps,review:this.review_time}}}class yi extends mi{learningStepsStrategy;constructor(t,e,r,n){super(t,e,r,n);let i=pi;if(this.strategies){const t=this.strategies.get(di.LEARNING_STEPS);t&&(i=t)}this.learningStepsStrategy=i}getLearningInfo(t,e){const r=this.algorithm.parameters;t.learning_steps=t.learning_steps||0;const n=this.learningStepsStrategy(r,t.state,this.current.state===Gn.Learning?t.learning_steps+1:t.learning_steps);return{scheduled_minutes:Math.max(0,n[e]?.scheduled_minutes??0),next_steps:Math.max(0,n[e]?.next_step??0)}}applyLearningSteps(t,e,r){const{scheduled_minutes:n,next_steps:i}=this.getLearningInfo(this.current,e);if(n>0&&n<1440)t.learning_steps=i,t.scheduled_days=0,t.state=r,t.due=$n(this.review_time,Math.round(n),!1);else if(t.state=Gn.Review,n>=1440)t.learning_steps=i,t.due=$n(this.review_time,Math.round(n),!1),t.scheduled_days=Math.floor(n/1440);else{t.learning_steps=0;const e=this.algorithm.next_interval(t.stability,this.elapsed_days);t.scheduled_days=e,t.due=$n(this.review_time,e,!0)}}newState(t){const e=this.next.get(t);if(e)return e;const r=Hn.card(this.current);r.difficulty=Jn(this.algorithm.init_difficulty(t),1,10),r.stability=this.algorithm.init_stability(t),this.applyLearningSteps(r,t,Gn.Learning);const n={card:r,log:this.buildLog(t)};return this.next.set(t,n),n}learningState(t){const e=this.next.get(t);if(e)return e;const{state:r,difficulty:n,stability:i}=this.last,a=Hn.card(this.current);a.difficulty=this.algorithm.next_difficulty(n,t),a.stability=this.algorithm.next_short_term_stability(i,t),this.applyLearningSteps(a,t,r);const o={card:a,log:this.buildLog(t)};return this.next.set(t,o),o}reviewState(t){const e=this.next.get(t);if(e)return e;const r=this.elapsed_days,{difficulty:n,stability:i}=this.last,a=this.algorithm.forgetting_curve(r,i),o=Hn.card(this.current),s=Hn.card(this.current),l=Hn.card(this.current),c=Hn.card(this.current);this.next_ds(o,s,l,c,n,i,a),this.next_interval(s,l,c,r),this.next_state(s,l,c),this.applyLearningSteps(o,zn.Again,Gn.Relearning),o.lapses+=1;const h={card:o,log:this.buildLog(zn.Again)},u={card:s,log:super.buildLog(zn.Hard)},f={card:l,log:super.buildLog(zn.Good)},p={card:c,log:super.buildLog(zn.Easy)};return this.next.set(zn.Again,h),this.next.set(zn.Hard,u),this.next.set(zn.Good,f),this.next.set(zn.Easy,p),this.next.get(t)}next_ds(t,e,r,n,i,a,o){t.difficulty=this.algorithm.next_difficulty(i,zn.Again);const s=a/Math.exp(this.algorithm.parameters.w[17]*this.algorithm.parameters.w[18]),l=this.algorithm.next_forget_stability(i,a,o);t.stability=Jn(+s.toFixed(8),ti,l),e.difficulty=this.algorithm.next_difficulty(i,zn.Hard),e.stability=this.algorithm.next_recall_stability(i,a,o,zn.Hard),r.difficulty=this.algorithm.next_difficulty(i,zn.Good),r.stability=this.algorithm.next_recall_stability(i,a,o,zn.Good),n.difficulty=this.algorithm.next_difficulty(i,zn.Easy),n.stability=this.algorithm.next_recall_stability(i,a,o,zn.Easy)}next_interval(t,e,r,n){let i,a;i=this.algorithm.next_interval(t.stability,n),a=this.algorithm.next_interval(e.stability,n),i=Math.min(i,a),a=Math.max(a,i+1);const o=Math.max(this.algorithm.next_interval(r.stability,n),a+1);t.scheduled_days=i,t.due=$n(this.review_time,i,!0),e.scheduled_days=a,e.due=$n(this.review_time,a,!0),r.scheduled_days=o,r.due=$n(this.review_time,o,!0)}next_state(t,e,r){t.state=Gn.Review,t.learning_steps=0,e.state=Gn.Review,e.learning_steps=0,r.state=Gn.Review,r.learning_steps=0}}class vi extends mi{newState(t){const e=this.next.get(t);if(e)return e;this.current.scheduled_days=0,this.current.elapsed_days=0;const r=Hn.card(this.current),n=Hn.card(this.current),i=Hn.card(this.current),a=Hn.card(this.current);return this.init_ds(r,n,i,a),this.next_interval(r,n,i,a,0),this.next_state(r,n,i,a),this.update_next(r,n,i,a),this.next.get(t)}init_ds(t,e,r,n){t.difficulty=Jn(this.algorithm.init_difficulty(zn.Again),1,10),t.stability=this.algorithm.init_stability(zn.Again),e.difficulty=Jn(this.algorithm.init_difficulty(zn.Hard),1,10),e.stability=this.algorithm.init_stability(zn.Hard),r.difficulty=Jn(this.algorithm.init_difficulty(zn.Good),1,10),r.stability=this.algorithm.init_stability(zn.Good),n.difficulty=Jn(this.algorithm.init_difficulty(zn.Easy),1,10),n.stability=this.algorithm.init_stability(zn.Easy)}learningState(t){return this.reviewState(t)}reviewState(t){const e=this.next.get(t);if(e)return e;const r=this.elapsed_days,{difficulty:n,stability:i}=this.last,a=this.algorithm.forgetting_curve(r,i),o=Hn.card(this.current),s=Hn.card(this.current),l=Hn.card(this.current),c=Hn.card(this.current);return this.next_ds(o,s,l,c,n,i,a),this.next_interval(o,s,l,c,r),this.next_state(o,s,l,c),o.lapses+=1,this.update_next(o,s,l,c),this.next.get(t)}next_ds(t,e,r,n,i,a,o){t.difficulty=this.algorithm.next_difficulty(i,zn.Again);const s=this.algorithm.next_forget_stability(i,a,o);t.stability=Jn(a,ti,s),e.difficulty=this.algorithm.next_difficulty(i,zn.Hard),e.stability=this.algorithm.next_recall_stability(i,a,o,zn.Hard),r.difficulty=this.algorithm.next_difficulty(i,zn.Good),r.stability=this.algorithm.next_recall_stability(i,a,o,zn.Good),n.difficulty=this.algorithm.next_difficulty(i,zn.Easy),n.stability=this.algorithm.next_recall_stability(i,a,o,zn.Easy)}next_interval(t,e,r,n,i){let a,o,s,l;a=this.algorithm.next_interval(t.stability,i),o=this.algorithm.next_interval(e.stability,i),s=this.algorithm.next_interval(r.stability,i),l=this.algorithm.next_interval(n.stability,i),a=Math.min(a,o),o=Math.max(o,a+1),s=Math.max(s,o+1),l=Math.max(l,s+1),t.scheduled_days=a,t.due=$n(this.review_time,a,!0),e.scheduled_days=o,e.due=$n(this.review_time,o,!0),r.scheduled_days=s,r.due=$n(this.review_time,s,!0),n.scheduled_days=l,n.due=$n(this.review_time,l,!0)}next_state(t,e,r,n){t.state=Gn.Review,t.learning_steps=0,e.state=Gn.Review,e.learning_steps=0,r.state=Gn.Review,r.learning_steps=0,n.state=Gn.Review,n.learning_steps=0}update_next(t,e,r,n){const i={card:t,log:this.buildLog(zn.Again)},a={card:e,log:super.buildLog(zn.Hard)},o={card:r,log:super.buildLog(zn.Good)},s={card:n,log:super.buildLog(zn.Easy)};this.next.set(zn.Again,i),this.next.set(zn.Hard,a),this.next.set(zn.Good,o),this.next.set(zn.Easy,s)}}class gi{fsrs;constructor(t){this.fsrs=t}replay(t,e,r){return this.fsrs.next(t,e,r)}handleManualRating(t,e,r,n,i,a,o){if(typeof e>"u")throw new Error("reschedule: state is required for manual rating");let s,l;if(e===Gn.New)s={rating:zn.Manual,state:e,due:o??r,stability:t.stability,difficulty:t.difficulty,elapsed_days:n,last_elapsed_days:t.elapsed_days,scheduled_days:t.scheduled_days,learning_steps:t.learning_steps,review:r},l=oi(r),l.last_review=r;else{if(typeof o>"u")throw new Error("reschedule: due is required for manual rating");const c=Un(o,r,"days");s={rating:zn.Manual,state:t.state,due:t.last_review||t.due,stability:t.stability,difficulty:t.difficulty,elapsed_days:n,last_elapsed_days:t.elapsed_days,scheduled_days:t.scheduled_days,learning_steps:t.learning_steps,review:r},l={...t,state:e,due:o,last_review:r,stability:i||t.stability,difficulty:a||t.difficulty,elapsed_days:n,scheduled_days:c,reps:t.reps+1}}return{card:l,log:s}}reschedule(t,e){const r=[];let n=oi(t.due);for(const t of e){let e;if(t.review=Hn.time(t.review),t.rating===zn.Manual){let r=0;n.state!==Gn.New&&n.last_review&&(r=Un(t.review,n.last_review,"days")),e=this.handleManualRating(n,t.state,t.review,r,t.stability,t.difficulty,t.due?Hn.time(t.due):void 0)}else e=this.replay(n,t.review,t.rating);r.push(e),n=e.card}return r}calculateManualRecord(t,e,r,n){if(!r)return null;const{card:i,log:a}=r,o=Hn.card(t);return o.due.getTime()===i.due.getTime()?null:(o.scheduled_days=Un(i.due,o.due,"days"),this.handleManualRating(o,i.state,Hn.time(e),a.elapsed_days,n?i.stability:void 0,n?i.difficulty:void 0,i.due))}}class bi extends hi{strategyHandler=new Map;Scheduler;constructor(t){super(t);const{enable_short_term:e}=this.parameters;this.Scheduler=e?yi:vi}params_handler_proxy(){const t=this;return{set:function(e,r,n){return"request_retention"===r&&Number.isFinite(n)?t.intervalModifier=t.calculate_interval_modifier(Number(n)):"enable_short_term"===r?t.Scheduler=!0===n?yi:vi:"w"===r&&(n=ni(ii(n),e.relearning_steps.length),t.forgetting_curve=ci.bind(this,n),t.intervalModifier=t.calculate_interval_modifier(Number(e.request_retention))),Reflect.set(e,r,n),!0}}}useStrategy(t,e){return this.strategyHandler.set(t,e),this}clearStrategy(t){return t?this.strategyHandler.delete(t):this.strategyHandler.clear(),this}getScheduler(t,e){return new(this.strategyHandler.get(di.SCHEDULER)||this.Scheduler)(t,e,this,this.strategyHandler)}repeat(t,e,r){const n=this.getScheduler(t,e).preview();return r&&"function"==typeof r?r(n):n}next(t,e,r,n){const i=this.getScheduler(t,e),a=Hn.rating(r);if(a===zn.Manual)throw new Error("Cannot review a manual rating");const o=i.review(a);return n&&"function"==typeof n?n(o):o}get_retrievability(t,e,r=!0){const n=Hn.card(t);e=e?Hn.time(e):new Date;const i=n.state!==Gn.New?Math.max(Un(e,n.last_review,"days"),0):0,a=n.state!==Gn.New?this.forgetting_curve(i,+n.stability.toFixed(8)):0;return r?`${(100*a).toFixed(2)}%`:a}rollback(t,e,r){const n=Hn.card(t),i=Hn.review_log(e);if(i.rating===zn.Manual)throw new Error("Cannot rollback a manual rating");let a,o,s;switch(i.state){case Gn.New:a=i.due,o=void 0,s=0;break;case Gn.Learning:case Gn.Relearning:case Gn.Review:a=i.review,o=i.due,s=n.lapses-(i.rating===zn.Again&&i.state===Gn.Review?1:0)}const l={...n,due:a,stability:i.stability,difficulty:i.difficulty,elapsed_days:i.last_elapsed_days,scheduled_days:i.scheduled_days,reps:Math.max(0,n.reps-1),lapses:Math.max(0,s),learning_steps:i.learning_steps,state:i.state,last_review:o};return r&&"function"==typeof r?r(l):l}forget(t,e,r=!1,n){const i=Hn.card(t);e=Hn.time(e);const a=i.state===Gn.New?0:Un(e,i.due,"days"),o={rating:zn.Manual,state:i.state,due:i.due,stability:i.stability,difficulty:i.difficulty,elapsed_days:0,last_elapsed_days:i.elapsed_days,scheduled_days:a,learning_steps:i.learning_steps,review:e},s={card:{...i,due:e,stability:0,difficulty:0,elapsed_days:0,scheduled_days:0,reps:r?0:i.reps,lapses:r?0:i.lapses,learning_steps:0,state:Gn.New,last_review:i.last_review},log:o};return n&&"function"==typeof n?n(s):s}reschedule(t,e=[],r={}){const{recordLogHandler:n,reviewsOrderBy:i,skipManual:a=!0,now:o=new Date,update_memory_state:s=!1}=r;i&&"function"==typeof i&&e.sort(i),a&&(e=e.filter((t=>t.rating!==zn.Manual)));const l=new gi(this),c=l.reschedule(r.first_card||oi(),e),h=c.length,u=Hn.card(t),f=l.calculateManualRecord(u,o,h?c[h-1]:void 0,s);return n&&"function"==typeof n?{collections:c.map(n),reschedule_item:f?n(f):null}:{collections:c,reschedule_item:f}}}var xi=(t=>new bi(t||{}))(ai());function wi(t){return wi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},wi(t)}var Ei=["dateCreated","reviewMode","schedulingAlgorithm"],ki=["nextDueDateFromNow"];function Si(){Si=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==wi(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(wi(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function _i(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Pi(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ci(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Pi(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=wi(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=wi(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==wi(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Pi(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ai(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}var Ti=function(t){var e=t.dateCreated,r=t.reviewMode,n=t.schedulingAlgorithm,i=void 0===n?"SM2":n,a=Ai(t,Ei),o={reviewMode:r};if(r===Zt.FixedInterval){var s=a.intervalMultiplier,l=a.intervalMultiplierType,c=new Date,h=null;return l===Qt.Days?h=zt(c,s):l===Qt.Weeks?h=zt(c,7*s):l===Qt.Months?h=zt(c,30*s):l===Qt.Years&&(h=zt(c,365*s)),Ci(Ci({},o),{},{reviewMode:Zt.FixedInterval,intervalMultiplier:s,intervalMultiplierType:l,nextDueDate:h,nextDueDateFromNow:$t(h)})}var u,f=a.grade,p=a.interval,d=a.repetitions,m=a.eFactor,y=a.fsrsState;"FSRS"===i?(console.log("üß† ‰ΩøÁî®FSRSÁÆóÊ≥ïË∞ÉÂ∫¶"),u=function(t,e){try{var r;if(t.fsrsState)if("string"==typeof t.fsrsState)try{r=JSON.parse(t.fsrsState)}catch(t){console.warn("FSRSÁä∂ÊÄÅËß£ÊûêÂ§±Ë¥•ÔºåÂàõÂª∫Êñ∞Âç°Áâá:",t),r=oi()}else r=t.fsrsState;else r=oi();var n=function(t){switch(t){case 0:case 1:return 1;case 2:return 2;case 3:case 4:default:return 3;case 5:return 4}}(e),i=new Date,a=xi.repeat(r,i)[n];if(!a||!a.card||!a.card.due)throw new Error("FSRSË∞ÉÂ∫¶Â§±Ë¥•: Êó†Ê≥ïËé∑ÂèñÊúâÊïàÁöÑnextCard.card");var o=a.card,s=o.due.getTime()-i.getTime(),l=Math.max(0,Math.round(s/864e5));return console.log("‚úÖ FSRSÁÆóÊ≥ïÊàêÂäü:",{intervalDays:l,nextDue:o.due.toISOString()}),{interval:l,repetition:o.reps,efactor:o.stability,fsrsState:o}}catch(r){return console.error("FSRSÁÆóÊ≥ïÊâßË°åÈîôËØØ:",r),{interval:e>=3?Math.max(1,2*(t.interval||1)):1,repetition:(t.repetition||0)+1,efactor:t.efactor||2.5}}}({interval:p,repetition:d,efactor:m,fsrsState:y},f)):(console.log("üß† ‰ΩøÁî®SM2ÁÆóÊ≥ïË∞ÉÂ∫¶"),u=function(t,e){var r,n,i;return 0===e?(r=0,n=0,i=t.efactor):e<3?(r=1,n=0,i=t.efactor):(0===t.repetition?(r=1,n=1):1===t.repetition?(r=6,n=2):(r=Math.round(t.interval*t.efactor),n=t.repetition+1),(i=t.efactor+(.1-(5-e)*(.08+.02*(5-e))))<1.3&&(i=1.3)),{interval:r,repetition:n,efactor:i}}({interval:p,repetition:d,efactor:m},f));var v=zt(e,u.interval);return Ci(Ci(Ci({},o),{},{reviewMode:Zt.DefaultSpacedInterval,grade:f,repetitions:u.repetition,interval:u.interval,eFactor:u.efactor},"FSRS"===i&&u.fsrsState&&{fsrsState:u.fsrsState}),{},{dateCreated:e,nextDueDate:v,nextDueDateFromNow:$t(v)})};const Mi=function(){var t,e=(t=Si().mark((function t(e){var r,n,i,a,o,s,l,c,h,u,f,p,d,m,y,v,g;return Si().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(console.log("üèÉ‚Äç‚ôÇÔ∏è Practice called with:",e),r=e.refUid,n=e.dataPageTitle,i=e.dateCreated,a=e.isCramming,o=e.isDryRun,s=e.grade,l=e.reviewMode,c=e.eFactor,h=e.interval,u=e.repetitions,f=e.intervalMultiplier,p=e.intervalMultiplierType,d=e.fsrsEnabled,m=void 0!==d&&d,y=e.fsrsState,console.log("üèÉ‚Äç‚ôÇÔ∏è Practice mode - grade:",s,"isCramming:",a),(v=Ti({dateCreated:i,reviewMode:l,grade:s,eFactor:c,interval:h,repetitions:u,intervalMultiplier:f,intervalMultiplierType:p,schedulingAlgorithm:m?"FSRS":"SM2",fsrsState:y})).nextDueDateFromNow,g=Ai(v,ki),o||a){t.next=10;break}return console.log("üèÉ‚Äç‚ôÇÔ∏è Normal mode - saving full practice data..."),t.next=8,Je(Ci({refUid:r,dataPageTitle:n,dateCreated:i},g));case 8:t.next=11;break;case 10:a?console.log("üèÉ‚Äç‚ôÇÔ∏è Cramming mode - Á∫ØÁªÉ‰π†Ê®°ÂºèÔºå‰∏ç‰øùÂ≠ò‰ªª‰ΩïÊï∞ÊçÆ"):o&&console.log("üèÉ‚Äç‚ôÇÔ∏è Dry run mode - ÊµãËØïÊ®°ÂºèÔºå‰∏ç‰øùÂ≠òÊï∞ÊçÆ");case 11:return t.abrupt("return",g);case 12:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){_i(a,n,i,o,s,"next",t)}function s(t){_i(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t){return e.apply(this,arguments)}}();var Di,Li=Dt.span(Di||(Di=function(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}(["\n  background-color: ",";\n  color: #abbbc9;\n  text-transform: uppercase;\n  font-size: 9px;\n  padding: 1px 2px;\n  border-radius: 2px;\n  position: relative;\n  top: -0.5px;\n"])),(function(t){return"light"===t.kind?"rgba(138, 155, 168, 0.2)":"rgba(138, 155, 168, 0.1)"}));const Fi=Li;function Oi(t){return Oi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Oi(t)}var Ii,ji,Ri,Ni,Bi=["tooltipText","wrapperClassName"];function Vi(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function Gi(){Gi=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==Oi(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Oi(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function zi(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Hi(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return $i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?$i(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Ui=function(t){var e=t.activateButtonFn,n=t.showAnswerFn,i=t.activeButtonKey;return r.createElement(r.Fragment,null,r.createElement("div",{className:"flex-shrink-0"}),r.createElement("div",{className:"flex-1 flex justify-center"},r.createElement(ra,{className:"text-base font-medium py-1",intent:"none",onClick:function(){e("space-button",n)},active:"space-button"===i,outlined:!0},"Show Answer"," ",r.createElement("span",{className:"ml-2"},r.createElement(Fi,null,"SPACE")))),r.createElement("div",{className:"flex-shrink-0"}))},qi=function(t){var e=t.onStartCrammingClick,n=t.onCloseCallback;return r.createElement(r.Fragment,null,r.createElement("div",{className:"flex-shrink-0"}),r.createElement("div",{className:"flex-1 flex justify-center gap-4"},r.createElement(fn,{content:"Review all cards without waiting for scheduling",placement:"top"},r.createElement(i.Button,{className:"text-base font-medium py-1",intent:"none",onClick:e,outlined:!0},"Continue Cramming")),r.createElement(i.Button,{className:"text-base font-medium py-1",intent:"primary",onClick:n,outlined:!0},"Close")),r.createElement("div",{className:"flex-shrink-0"}))},Wi=function(t){t.activateButtonFn;var e=t.activeButtonKey,n=t.skipFn,a=t.gradeFn,o=t.intervalEstimates,s=t.intervalPractice,l=t.isIntervalEditorOpen,c=t.toggleIntervalEditorOpen,h=r.useContext(La),u=h.reviewMode,f=h.setReviewModeOverride,p=u===Zt.FixedInterval;return r.createElement(r.Fragment,null,r.createElement("div",{className:"flex-shrink-0"},r.createElement(ra,{key:"skip-button",className:"text-base font-medium py-1",tooltipText:"Skip for now",onClick:function(){return n()},active:"skip-button"===e,outlined:!0},"Skip"," ",r.createElement("span",{className:"ml-2"},r.createElement(Fi,null,"S")))),r.createElement("div",{className:"flex-1 flex justify-center gap-2 flex-wrap"},p?r.createElement(Ki,{activeButtonKey:e,intervalPractice:s,isIntervalEditorOpen:l,toggleIntervalEditorOpen:c,intervalEstimates:o}):r.createElement(Ji,{activeButtonKey:e,gradeFn:a,intervalEstimates:o})),r.createElement("div",{className:"flex-shrink-0"},r.createElement(ta,{className:"flex items-center justify-center gap-1 bg-gray-50 px-2 py-1 rounded-md border border-gray-200",style:{minWidth:"100px"}},r.createElement("span",{className:"text-xs ".concat(p?"text-gray-400":"text-blue-600 font-medium")},"AUTO"),r.createElement(i.Switch,{className:"mb-0",style:{transform:"scale(0.9)"},checked:p,onChange:function(){void 0!==f&&f((function(t){if(void 0===t)return u===Zt.DefaultSpacedInterval?Zt.FixedInterval:Zt.DefaultSpacedInterval}))},"data-testid":"review-mode-switch"}),r.createElement("span",{className:"text-xs ".concat(p?"text-blue-600 font-medium":"text-gray-400")},"FIX"))))},Yi=function(){var t=r.useContext(La),e=t.intervalMultiplier,n=t.intervalMultiplierType,a=t.setIntervalMultiplier,o=t.setIntervalMultiplierType,s=[{value:Qt.Days,label:"Days"},{value:Qt.Weeks,label:"Weeks"},{value:Qt.Months,label:"Months"},{value:Qt.Years,label:"Years"}];return r.createElement("div",{className:"flex p-2 items-center w-80 justify-evenly"},r.createElement("div",{className:""},"Every"),r.createElement("div",{className:"w-24"},r.createElement(i.NumericInput,{min:1,max:365,stepSize:1,majorStepSize:30,minorStepSize:1,value:e,onValueChange:function(t){isNaN(t)||a(t)},fill:!0})),r.createElement("div",{className:"bp3-html-select"},r.createElement("select",{value:n,onChange:function(t){return o(t.currentTarget.value)}},s.map((function(t){return r.createElement("option",{key:t.value,value:t.value,selected:t.value===n},t.label)}))),r.createElement("span",{className:"bp3-icon bp3-icon-double-caret-vertical"})))},Xi=function(t){var e=t.intervalMultiplier,n=t.intervalMultiplierType,i="";if(1===e)switch(n){case Qt.Weeks:i+="Weekly";break;case Qt.Months:i+="Monthly";break;case Qt.Years:i+="Yearly";break;default:i+="Daily"}return r.createElement(r.Fragment,null,"Review"," ",r.createElement("span",{className:"font-medium mr-3"},i||r.createElement(r.Fragment,null,"Every ",e," ",n)))},Ki=function(t){var e=t.activeButtonKey,n=t.intervalPractice,a=t.isIntervalEditorOpen,o=t.toggleIntervalEditorOpen,s=t.intervalEstimates,l=r.useContext(La),c=l.intervalMultiplier,h=l.intervalMultiplierType;return s?r.createElement(r.Fragment,null,r.createElement(i.Popover,{isOpen:a,onInteraction:function(t){!t&&a&&o()}},r.createElement(ra,{icon:"time",className:"text-base font-normal py-1",intent:"default",onClick:o,tooltipText:"Change Interval",active:"change-interval-button"===e,outlined:!0},r.createElement("span",{className:"ml-2"},r.createElement(Xi,{intervalMultiplier:c,intervalMultiplierType:h}),r.createElement(Fi,null,"E"))),r.createElement(Yi,null)),r.createElement(ra,{icon:"tick",className:"text-base font-medium py-1",intent:"success",onClick:function(){return n()},tooltipText:"Review ".concat(s[0].nextDueDateFromNow),active:"next-button"===e,outlined:!0},"Next"," ",r.createElement("span",{className:"ml-2"},r.createElement(Fi,null,"SPACE")))):(console.error("Interval estimates not set"),null)},Ji=function(t){var e,n,i,a,o=t.activeButtonKey,s=t.gradeFn,l=t.intervalEstimates;return l?r.createElement(r.Fragment,null,r.createElement(ra,{key:"forget-button",className:"text-base font-medium py-1",intent:"danger",tooltipText:"Review ".concat(null===(e=l[0])||void 0===e?void 0:e.nextDueDateFromNow),onClick:function(){return s(0)},active:"forgot-button"===o,outlined:!0},"Forgot"," ",r.createElement("span",{className:"ml-2"},r.createElement(Fi,null,"X"))),r.createElement(ra,{className:"text-base font-medium py-1",intent:"warning",onClick:function(){return s(2)},tooltipText:"Review ".concat(null===(n=l[2])||void 0===n?void 0:n.nextDueDateFromNow),active:"hard-button"===o,outlined:!0},"Hard"," ",r.createElement("span",{className:"ml-2"},r.createElement(Fi,null,"H"))),r.createElement(ra,{className:"text-base font-medium py-1",intent:"primary",onClick:function(){return s(4)},tooltipText:"Review ".concat(null===(i=l[4])||void 0===i?void 0:i.nextDueDateFromNow),active:"good-button"===o,outlined:!0},"Good"," ",r.createElement("span",{className:"ml-2"},r.createElement(Fi,null,"G"))),r.createElement(ra,{className:"text-base font-medium py-1",intent:"success",onClick:function(){return s(5)},tooltipText:"Review ".concat(null===(a=l[5])||void 0===a?void 0:a.nextDueDateFromNow),active:"perfect-button"===o,outlined:!0},"Perfect"," ",r.createElement("span",{className:"ml-2"},r.createElement(Fi,null,"SPACE")))):(console.error("Interval estimates not set"),null)},Zi=Dt.div(Ii||(Ii=Vi(["\n  background-color: #f6f9fd;\n  min-height: 50px;\n  border-top: 1px solid rgba(16, 22, 26, 0.1);\n\n  & .bp3-button-text {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n"]))),Qi=Dt.div(ji||(ji=Vi(["\n  &.bp3-dialog-footer-actions .bp3-button {\n    margin-left: 0;\n  }\n"]))),ta=Dt.div(Ri||(Ri=Vi([""]))),ea=Dt(i.Button)(Ni||(Ni=Vi([""]))),ra=function(t){var e=t.tooltipText,n=t.wrapperClassName,i=void 0===n?"":n,a=function(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}(t,Bi);return r.createElement(fn,{content:e,placement:"top",wrapperClassName:i},r.createElement(ea,a))};const na=function(t){var e=t.setShowAnswers,n=t.showAnswers,a=t.refUid,o=t.onPracticeClick,s=t.onSkipClick,l=t.onPrevClick,c=t.isDone,h=t.hasCards,u=t.onCloseCallback,f=t.currentCardData,p=t.onStartCrammingClick,d=t.fsrsEnabled,m=void 0!==d&&d,y=r.useContext(La),v=y.reviewMode,g=y.intervalMultiplier,b=y.intervalMultiplierType,x=Hi(r.useState(!1),2),w=x[0],E=x[1],k=function(){return E((function(t){return!t}))},S=Hi(r.useState(null),2),_=S[0],P=S[1],C=function(){var t,e=(t=Gi().mark((function t(e,r){var n;return Gi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return P(e),n="skip-button"===e?50:100,t.next=4,nn(n);case 4:r(),P(null);case 6:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){zi(a,n,i,o,s,"next",t)}function s(t){zi(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t,r){return e.apply(this,arguments)}}(),A=r.useMemo((function(){return function(){e(!0)}}),[e]),T=r.useMemo((function(){return function(t){var e;switch(t){case 0:e="forgot-button";break;case 2:e="hard-button";break;case 4:e="good-button";break;case 5:e="perfect-button"}C(e,(function(){return o({grade:t,refUid:a})}))}}),[o,a]),M=r.useMemo((function(){return function(){C("next-button",(function(){return o({refUid:a})}))}}),[o,a]),D=r.useMemo((function(){return function(){C("skip-button",(function(){return s()}))}}),[s]),L=r.useMemo((function(){return[{combo:"space",global:!0,label:"Primary Action Trigger",onKeyDown:function(){n?v===Zt.FixedInterval?M():T(5):C("space-button",A)}},{combo:"S",global:!0,label:"Skip",onKeyDown:D},{combo:"right",global:!0,label:"Skip",onKeyDown:D},{combo:"left",global:!0,label:"Previous",onKeyDown:l},{combo:"X",global:!0,label:"Forgot (Grade 0)",onKeyDown:function(){return T(0)},disabled:v===Zt.FixedInterval},{combo:"H",global:!0,label:"Grade 2",onKeyDown:function(){return T(2)},disabled:v===Zt.FixedInterval},{combo:"G",global:!0,label:"Grade 4",onKeyDown:function(){return T(4)},disabled:v!==Zt.DefaultSpacedInterval},{combo:"E",global:!0,label:"Edit Interval",onKeyDown:k,disabled:v!==Zt.FixedInterval}]}),[D,l,v,n,A,M,T]),F=i.useHotkeys(L),O=F.handleKeyDown,I=F.handleKeyUp,j=r.useMemo((function(){if(f){if(v){for(var t=[0,1,2,3,4,5],e=f.interval,r=f.repetitions,n=f.eFactor,i=f.fsrsState,a={},o=v===Zt.FixedInterval?1:t.length,s=0;s<o;s++){var l=t[s],c=Ti({grade:l,interval:e,repetitions:r,eFactor:n,fsrsState:i,dateCreated:new Date,reviewMode:v,intervalMultiplier:g,intervalMultiplierType:b,schedulingAlgorithm:m?"FSRS":"SM2"});a[l]=c}return a}console.error("Review mode not set")}}),[f,g,b,v,m]);return r.createElement(Zi,{className:"bp3-multistep-dialog-footer flex items-center justify-center rounded-b-md p-0",onKeyDown:O,onKeyUp:I},r.createElement(Qi,{className:"bp3-dialog-footer-actions flex items-center justify-between w-full mx-5 my-3","data-testid":"footer-actions-wrapper"},c||!h?r.createElement(qi,{onStartCrammingClick:p,onCloseCallback:u}):n?r.createElement(Wi,{activateButtonFn:C,activeButtonKey:_,skipFn:D,gradeFn:T,intervalEstimates:j,intervalPractice:M,isIntervalEditorOpen:w,toggleIntervalEditorOpen:k}):r.createElement(Ui,{activateButtonFn:C,showAnswerFn:A,activeButtonKey:_})))};var ia,aa,oa;function sa(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}var la=Dt.div(ia||(ia=sa(["\n  width: 100%;\n  padding: 12px 20px;\n  background-color: #f6f9fd;\n  border-top: 1px solid #e1e8ed;\n  border-bottom: 1px solid #e1e8ed;\n  position: relative;\n  z-index: 1;\n"]))),ca=Dt.div(aa||(aa=sa(["\n  position: relative;\n  width: 100%;\n"]))),ha=Dt.input(oa||(oa=sa(["\n  -webkit-appearance: none;\n  width: 100%;\n  height: 8px;\n  border-radius: 4px;\n  background: linear-gradient(to right, #e74c3c 0%, #f39c12 50%, #27ae60 100%);\n  outline: none;\n  opacity: 0.8;\n  transition: opacity 0.2s;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 1;\n  }\n\n  &::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: #3498db;\n    cursor: grab;\n    border: 2px solid #fff;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n    transition: all 0.15s ease;\n  }\n\n  &::-webkit-slider-thumb:hover {\n    background: #2980b9;\n    transform: scale(1.1);\n  }\n\n  &::-webkit-slider-thumb:active {\n    cursor: grabbing;\n    transform: scale(1.2);\n  }\n\n  &::-moz-range-thumb {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: #3498db;\n    cursor: grab;\n    border: 2px solid #fff;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n    transition: all 0.15s ease;\n  }\n\n  &::-moz-range-thumb:hover {\n    background: #2980b9;\n    transform: scale(1.1);\n  }\n\n  &::-moz-range-thumb:active {\n    cursor: grabbing;\n    transform: scale(1.2);\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n\n  &:disabled::-webkit-slider-thumb {\n    cursor: not-allowed;\n    background: #95a5a6;\n  }\n\n  &:disabled::-moz-range-thumb {\n    cursor: not-allowed;\n    background: #95a5a6;\n  }\n"])));const ua=function(t){var e=t.priority,n=t.onPriorityChange,i=t.disabled,a=t.allCardsCount,o=r.useCallback((function(t,e){return e<=1?1:Math.max(1,Math.min(e,e-t+1))}),[]),s=r.useCallback((function(t,e){return e<=1?1:Math.max(1,Math.min(e,e-t+1))}),[]),l=r.useMemo((function(){return s(e,a)}),[e,a,s]),c=r.useCallback((function(t){if(!i){var e=parseInt(t.target.value);if(!isNaN(e)){var r=o(e,a);n(r)}}}),[a,o,n,i]),h=Math.max(1,a);return r.createElement(la,null,r.createElement("div",{style:{display:"flex",alignItems:"center",marginBottom:"8px"}},r.createElement("span",{style:{fontSize:"14px",fontWeight:"bold",color:"#2c3e50"}},"‰ºòÂÖàÁ∫ßÊéíÂêç"),r.createElement("span",{style:{fontSize:"12px",color:"#7f8c8d",marginLeft:"8px",fontStyle:"italic"}},"(ÊãñÂä®Ë∞ÉÊï¥ÊéíÂêçÔºåÂÖ≥Èó≠Á™óÂè£Êó∂Ëá™Âä®‰øùÂ≠ò)")),r.createElement(ca,null,r.createElement(ha,{type:"range",min:"1",max:h,value:l,onChange:c,disabled:i})),r.createElement("div",{style:{display:"flex",justifyContent:"space-between",marginTop:"8px",fontSize:"12px",color:"#7f8c8d"}},r.createElement("span",null,"‰Ωé‰ºòÂÖàÁ∫ßÔºàÁ¨¨",a,"ÂêçÔºâ"),r.createElement("div",{style:{display:"flex",flexDirection:"column",alignItems:"center"}},r.createElement("span",{style:{fontWeight:"bold",color:"#2c3e50"}},"ÂΩìÂâçÊÄªÊéíÂêçÔºöÁ¨¨",e,"Âêç",a>0&&" / ÂÖ±".concat(a,"Âº†Âç°Áâá"))),r.createElement("span",null,"È´ò‰ºòÂÖàÁ∫ßÔºàÁ¨¨1ÂêçÔºâ")))};function fa(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return pa(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?pa(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pa(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var da,ma,ya,va,ga,ba;function xa(t){return xa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},xa(t)}function wa(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function Ea(){Ea=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==xa(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(xa(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function ka(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Sa(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){ka(a,n,i,o,s,"next",t)}function s(t){ka(a,n,i,o,s,"throw",t)}o(void 0)}))}}function _a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Pa(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?_a(Object(r),!0).forEach((function(e){Ca(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):_a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ca(t,e,r){var n;return n=function(t,e){if("object"!=xa(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=xa(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e),(e="symbol"==xa(n)?n:String(n))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Aa(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||Ma(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ta(t){return function(t){if(Array.isArray(t))return Da(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||Ma(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ma(t,e){if(t){if("string"==typeof t)return Da(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Da(t,e):void 0}}function Da(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var La=r.createContext({}),Fa=Dt(i.Dialog)(da||(da=wa(["\n  display: grid;\n  grid-template-rows: 50px 1fr auto;\n  max-height: 80vh;\n  width: 90vw;\n\n  "," {\n    width: 80vw;\n  }\n\n  "," {\n    width: 70vw;\n  }\n"])),pn,dn),Oa=Dt.div(ma||(ma=wa(["\n  overflow-x: hidden; // because of tweaks we do in ContentWrapper container overflows\n  min-height: 200px;\n"]))),Ia=Dt.div(ya||(ya=wa(["\n  justify-content: space-between;\n  color: #5c7080;\n  background-color: #f6f9fd;\n  box-shadow: 0 1px 0 rgb(16 22 26 / 10%);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n  line-height: inherit;\n  margin: 0;\n  min-height: 50px;\n\n  /* Shortcut way to tag selector color */\n  & .bp3-button {\n    color: #5c7080;\n  }\n"]))),ja=function(t){var e=t.tagsList,n=t.selectedTag,o=t.onTagChange;return r.createElement(a.Select,{items:e,activeItem:n,filterable:!1,itemRenderer:function(t,n){var i=n.handleClick,a=n.modifiers;return r.createElement(Ba,{text:t,tagsList:e,active:a.active,key:t,onClick:i})},onItemSelect:function(t){o(t)},popoverProps:{minimal:!0}},r.createElement(i.Button,{text:n,rightIcon:"caret-down",minimal:!0,"data-testid":"tag-selector-cta"}))},Ra=Dt.div(va||(va=wa(["\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 6px;\n  background-color: ",";\n  user-select: none;\n\n  &:hover {\n    cursor: pointer;\n    background-color: ",";\n  }\n"])),(function(t){return t.active?"rgba(0, 0, 0, 0.05)":"transparent"}),(function(t){return t.active?"rgba(0, 0, 0, 0.05)":"rgba(0, 0, 0, 0.03)"})),Na=Dt(i.Tag)(ga||(ga=wa(["\n  &.bp3-tag {\n    font-size: 11px;\n    padding: 1px 3px;\n    min-height: auto;\n    min-width: auto;\n  }\n"]))),Ba=function(t){var e=t.text,n=t.onClick,a=t.active,o=t.tagsList,s=r.useContext(La),l=s.today,c=s.setRenderMode,h=l.tags[e].due,u=l.tags[e].new,f=l.tags[e].renderMode||re.Normal,p=Aa(r.useState(!1),2),d=p[0],m=p[1],y=o.indexOf(e)===o.length-1?"bottom":"top",v=r.createElement("div",{onClick:function(t){return t.stopPropagation()}},r.createElement(i.Menu,{className:"bg-transparent min-w-full text-sm"},r.createElement(i.MenuItem,{text:r.createElement("div",{className:"flex items-center justify-between"},r.createElement("span",{className:"text-xs"},"Swap Q/A"),r.createElement(i.Switch,{alignIndicator:i.Alignment.RIGHT,checked:f===re.AnswerFirst,onChange:function(){var t=f===re.Normal?re.AnswerFirst:re.Normal;c(e,t)},className:"mb-0"})),className:"hover:bg-transparent hover:no-underline"}),r.createElement(i.MenuDivider,null)));return r.createElement(Ra,{onClick:n,active:a,key:e,tabIndex:-1,"data-testid":"tag-selector-item",className:"flex-col"},r.createElement("div",{className:"flex"},r.createElement("div",{className:"flex items-center"},e),r.createElement("div",{className:"ml-2"},h>0&&r.createElement(fn,{content:"Due",placement:y},r.createElement(Na,{active:!0,minimal:!0,intent:"primary",className:"text-center","data-testid":"tag-selector-due"},h)),u>0&&r.createElement(fn,{content:"New",placement:y},r.createElement(Na,{active:!0,minimal:!0,intent:"success",className:"text-center ml-2","data-testid":"tag-selector-new"},u))),r.createElement("div",{onClick:function(t){return t.stopPropagation()},className:""},r.createElement(i.Button,{icon:r.createElement(i.Icon,{icon:d?"chevron-up":"cog",size:11}),className:"ml-1 bp3-small","data-testid":"tag-settings-button",minimal:!0,onClick:function(){m(!d)}}))),r.createElement(i.Collapse,{isOpen:d},v))},Va=function(t){var e=t.status,n=t.nextDueDate;if(t.isCramming)return r.createElement(fn,{content:"Reviews don't affect scheduling",placement:"left"},r.createElement(i.Tag,{intent:"none"},"Cramming"));switch(e){case"new":return r.createElement(i.Tag,{intent:"success",minimal:!0},"New");case"dueToday":return r.createElement(i.Tag,{intent:"primary",minimal:!0},"Due Today");case"pastDue":var a=$t(n);return r.createElement(i.Tag,{intent:"warning",title:"Due ".concat(a),minimal:!0},"Past Due");default:return null}},Ga=Dt(i.Icon)(ba||(ba=wa(["\n  margin-right: 5px !important;\n"]))),za=function(t){var e=t.showBreadcrumbs;return r.createElement("div",{className:"flex align-center"},"".concat(e?"Hide":"Show"," Breadcrumbs"),r.createElement("span",null,r.createElement(Fi,{kind:"light",className:"mx-2"},"B")))},Ha=function(t){var e=t.tagsList,n=t.onCloseCallback,a=t.onTagChange,o=t.className,s=t.status,l=t.isDone,c=t.nextDueDate,h=t.showBreadcrumbs,u=t.setShowBreadcrumbs,f=t.isCramming,p=t.practiceCardUids,d=function(t){var e=(0,r.useContext)(t);if(void 0===e)throw new Error("Context Provider not found");return e}(La),m=d.selectedTag,y=d.today,v=d.currentIndex,g=y.tags[m].completed,b=p?p.length:0,x=f?b:g+b,w=f?v+1:g+v+1;return r.createElement(Ia,{className:o,tabIndex:0},r.createElement("div",{className:"flex items-center"},r.createElement(Ga,{icon:"box",size:14}),r.createElement("div",{tabIndex:-1},r.createElement(ja,{tagsList:e,selectedTag:m,onTagChange:a}))),r.createElement("div",{className:"flex items-center justify-end"},!l&&r.createElement("div",{onClick:function(){return u(!h)},className:"px-1 cursor-pointer"},r.createElement(fn,{content:r.createElement(za,{showBreadcrumbs:h}),placement:"left"},r.createElement(i.Icon,{icon:h?"eye-open":"eye-off",className:h?"opacity-100":"opacity-60"}))),r.createElement("span",{"data-testid":"status-badge"},r.createElement(Va,{status:s,nextDueDate:c,isCramming:f,"data-testid":"status-badge"})),r.createElement("span",{className:"text-sm mx-2 font-medium"},r.createElement("span",{"data-testid":"display-count-current"},l?0:w),r.createElement("span",{className:"opacity-50 mx-1"},"/"),r.createElement("span",{className:"opacity-50","data-testid":"display-count-total"},l?0:x)),r.createElement("button",{"aria-label":"Close",className:"bp3-dialog-close-button bp3-button bp3-minimal bp3-icon-cross",onClick:n})))};const $a=function(t){var e,n=t.isOpen,a=t.tagsList,o=t.selectedTag,s=t.onCloseCallback,l=t.practiceData,c=t.today,h=t.handlePracticeClick,u=t.handleMemoTagChange,f=(t.handleReviewMoreClick,t.isCramming),p=t.setIsCramming,d=t.rtlEnabled,m=t.setRenderMode,y=t.dataPageTitle,v=t.onDataRefresh,g=t.allCardsCount,b=t.priorityOrder,x=t.allCardUids,w=t.defaultPriority,E=t.fsrsEnabled,k=c.tags[o],S=k.newUids,_=k.dueUids,P=r.useMemo((function(){var t=[].concat(Ta(_),Ta(S));return 0===b.length?t:t.sort((function(t,e){var r=b.indexOf(t),n=b.indexOf(e);return-1!==r&&-1!==n?r-n:-1!==r?-1:-1!==n?1:0}))}),[_,S,b]),C=k.renderMode,A=Aa(r.useState(0),2),T=A[0],M=A[1],D=0===T,L=(k.completed,P[T]),F=r.useMemo((function(){return L&&l[L]||[]}),[L,l]),O=function(t){var e=t.currentCardRefUid,n=t.sessions,i=n[n.length-1],a=fa(r.useState(i),2),o=a[0],s=a[1],l=fa(r.useState(null==i?void 0:i.reviewMode),2),c=l[0],h=l[1],u=fa(r.useState(),2),f=u[0],p=u[1];return r.useEffect((function(){if(e){if(f&&f!==(null==i?void 0:i.reviewMode)){var t=function(t){for(var e,r=t.sessions,n=t.reviewMode,i=r.length-1;i>=0;i--){var a=r[i];if(a.reviewMode===n){e=a;break}}return e||Ee({reviewMode:n})}({sessions:n,reviewMode:f});return s(t),void h(t.reviewMode)}s(i),h(null==i?void 0:i.reviewMode)}else s(void 0)}),[c,n,e,i,f]),r.useEffect((function(){p(void 0),h(null==i?void 0:i.reviewMode)}),[e,i]),{currentCardData:o,reviewMode:c,setReviewModeOverride:p}}({currentCardRefUid:L,sessions:F}),I=O.currentCardData,j=O.reviewMode,R=O.setReviewModeOverride,N=k.new+k.due>0,B=k.status===ee.Finished||!I,V=r.useMemo((function(){return Ee({reviewMode:Zt.FixedInterval})}),[]),G=Aa(r.useState((null==I?void 0:I.intervalMultiplier)||V.intervalMultiplier),2),z=G[0],H=G[1],$=Aa(r.useState((null==I?void 0:I.intervalMultiplierType)||V.intervalMultiplierType),2),U=$[0],q=$[1],W=Aa(r.useState({}),2),Y=W[0],X=W[1],K=Aa(r.useState(!1),2),J=(K[0],K[1]),Z=r.useRef(!0);r.useEffect((function(){return function(){Z.current=!1}}),[]);var Q=r.useMemo((function(){if(!L)return Math.max(1,Math.ceil(g*(1-w/100)));if(void 0!==Y[L])return Y[L];var t=b.indexOf(L);return-1===t?1:t+1}),[L,b,g,Y,w]),tt=r.useCallback((function(t){L&&(X((function(e){return Pa(Pa({},e),{},Ca({},L,t))})),J(!0))}),[L]);r.useEffect((function(){I&&((null==I?void 0:I.reviewMode)===Zt.FixedInterval?(H(I.intervalMultiplier),q(I.intervalMultiplierType)):(H(V.intervalMultiplier),q(V.intervalMultiplierType)))}),[I,V]);var et=I&&"nextDueDate"in I,rt=I&&"isNew"in I&&I.isNew,nt=et?I.nextDueDate:void 0,it=0===Ht(nt,new Date),at=rt?"new":it?"dueToday":et?"pastDue":null,ot=function(t){var e=t.refUid,n=Qr(r.useState({}),2),i=n[0],a=n[1],o=Qr(r.useState(!1),2),s=o[0],l=o[1],c=Qr(r.useState(0),2),h=c[0],u=c[1],f=r.useCallback((function(){e&&(function(t){en.delete(t)}(e),u((function(t){return t+1})))}),[e]);return r.useEffect((function(){if(e){var t=function(){var t,r=(t=Xr().mark((function t(){var r,n,i,o;return Xr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return l(!0),t.prev=1,console.log("üîç [BlockInfo] Ëé∑ÂèñÊúÄÊñ∞block‰ø°ÊÅØ for:",e),t.next=5,ue(e);case 5:o=t.sent,console.log("üîç [BlockInfo] Ëé∑ÂèñÁªìÊûú:",{refUid:e,hasChildren:!(null===(r=o.children)||void 0===r||!r.length),hasChildrenUids:!(null===(n=o.childrenUids)||void 0===n||!n.length),childrenCount:(null===(i=o.children)||void 0===i?void 0:i.length)||0}),en.set(e,o),a(Jr(Jr({},o),{},{refUid:e})),t.next=14;break;case 11:t.prev=11,t.t0=t.catch(1),console.error("üîç [BlockInfo] Ëé∑Âèñblock‰ø°ÊÅØÂ§±Ë¥•:",t.t0);case 14:return t.prev=14,l(!1),t.finish(14);case 17:case"end":return t.stop()}}),t,null,[[1,11,14,17]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Zr(a,n,i,o,s,"next",t)}function s(t){Zr(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(){return r.apply(this,arguments)}}();t()}}),[e,h]),{blockInfo:i,isLoading:s,refreshBlockInfo:f}}({refUid:L}),st=ot.blockInfo,lt=ot.isLoading,ct=(ot.refreshBlockInfo,!!st.children&&!!st.children.length),ht=!!st.childrenUids&&!!st.childrenUids.length,ut=Aa(r.useState(!1),2),ft=ut[0],pt=ut[1],dt=Aa(r.useState(!0),2),mt=dt[0],yt=dt[1],vt=C===re.AnswerFirst&&ht&&!ft;r.useEffect((function(){pt(!1)}),[L]),r.useEffect((function(){if(L&&!lt&&!ct&&!ht&&!mt&&!ft){var t=setTimeout((function(){return pt(!0)}),100);return function(){return clearTimeout(t)}}}),[L,ct,ht,mt,lt,ft]);var gt=function(){var t=Sa(Ea().mark((function t(e){var r;return Ea().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return M(0),u(e),p(!1),t.next=5,nn(100);case 5:document.activeElement instanceof HTMLElement&&(null===(r=document)||void 0===r||r.activeElement.blur());case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),bt=r.useRef(P.length);r.useEffect((function(){P.length!==bt.current&&(M(0),bt.current=P.length)}),[P.length]);var xt=r.useCallback((function(t){if(!B){var e=Pa(Pa(Pa({},I),t),{},{intervalMultiplier:z,intervalMultiplierType:U}),r=function(){var t=Sa(Ea().mark((function t(){return Ea().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,h(e);case 3:t.next=8;break;case 5:t.prev=5,t.t0=t.catch(0),console.error("ÁªÉ‰π†Êï∞ÊçÆ‰øùÂ≠òÂ§±Ë¥•:",t.t0);case 8:case"end":return t.stop()}}),t,null,[[0,5]])})));return function(){return t.apply(this,arguments)}}();r(),M(T+1)}}),[h,B,T,I,z,U]),wt=r.useCallback((function(){B||M(T+1)}),[T,B]),Et=r.useCallback((function(){D||M(T-1)}),[T,D]),kt={loop:!0,autoplay:!0,animationData:on,rendererSettings:{preserveAspectRatio:"xMidYMid slice"}},St=Aa(r.useState(!0),2),_t=St[0],Pt=St[1],Ct=r.useMemo((function(){return[{combo:"B",global:!0,label:"Show BreadCrumbs",onKeyDown:function(){return Pt(!_t)}}]}),[_t]);i.useHotkeys(Ct),function(t){(0,r.useEffect)((function(){var e="roam-memo-zindex-fix";if(t){if(document.getElementById(e))return;var r=document.createElement("style");r.id=e,r.type="text/css",r.textContent="\n        /*\n         * Roam Research ÂõæÁâáÊÇ¨ÊµÆÁ™óÂè£ÁöÑÂ±ÇÁ∫ßÊèêÂçá\n         * Ëß£ÂÜ≥Ë¢´ Memo Êèí‰ª∂ÈÅÆÊå°ÁöÑÈóÆÈ¢ò\n         */\n        \n        /* ÊèêÂçá Roam ÂõæÁâáÊµÆÂ±ÇÁöÑ Z-index */\n        #rm-modal-portal {\n          z-index: 1002 !important; /* Roam ÂõæÁâáÊµÆÂ±ÇÊï¥‰ΩìÁöÑ z-indexÔºåÊúÄÈ´ò */\n        }\n        \n        #rm-modal-portal > div > div > div.bp3-dialog-container.bp3-overlay-content > div {\n          z-index: 1001 !important; /* Á°Æ‰øùÂõæÁâáÂÆûÈôÖÂÜÖÂÆπ‰πüÈ´ò */\n        }\n        \n        /* ÊèêÂçá Roam ÂèåÈìæÂºπÂá∫ËèúÂçïÁöÑ Z-index */\n        .rm-autocomplete__results {\n          z-index: 1000 !important; /* ‰ΩøÁî®‰∏Ä‰∏™ÈùûÂ∏∏È´òÁöÑÂÄºÔºåÁ°Æ‰øùÊòæÁ§∫Âú®ÊâÄÊúâÂÖ∂‰ªñÂÖÉÁ¥†‰πã‰∏ä */\n          width: auto !important; /* Ë∞ÉÊï¥‰∏∫Ëá™ÈÄÇÂ∫îÂÆΩÂ∫¶ */\n          max-width: unset !important; /* ÂèñÊ∂àÊúÄÂ§ßÂÆΩÂ∫¶ÈôêÂà∂ */\n          min-width: 150px !important; /* ËÆæÁΩÆÊúÄÂ∞èÂÆΩÂ∫¶ÔºåÈò≤Ê≠¢ËøáÁ™Ñ */\n        }\n        \n        /* ÊèêÂçáÂÖ∂‰ªñÂèØËÉΩË¢´ÈÅÆÊå°ÁöÑ Roam UI ÂÖÉÁ¥† */\n        .bp3-popover {\n          z-index: 999 !important;\n        }\n        \n        .bp3-tooltip {\n          z-index: 998 !important;\n        }\n      ",document.head.appendChild(r),console.log("üîß Roam Memo: Z-index fix Â∑≤ÊøÄÊ¥ª")}else{var n=document.getElementById(e);n&&(document.head.removeChild(n),console.log("üîß Roam Memo: Z-index fix Â∑≤ÁßªÈô§"))}return function(){var t=document.getElementById(e);t&&document.head.removeChild(t)}}),[t])}(n),function(t){(0,r.useEffect)((function(){console.log("üéØ Roam Memo: useFocusFix Ëß¶ÂèëÔºåÁ™óÂè£Áä∂ÊÄÅ:",t);var e=null;return t&&(console.log("üéØ Roam Memo: ÊøÄÊ¥ªÁÑ¶ÁÇπ‰øùÊä§Êú∫Âà∂"),e=function(t){var e=t.target;e&&e.matches&&e.matches("textarea.dont-unfocus-block")&&(Math.random()<.1&&console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§Ê≠£Âú®Â∑•‰Ωú (Â∑≤Êã¶Êà™Â§öÊ¨°ÁÑ¶ÁÇπ‰∏¢Â§±)"),t.preventDefault(),t.stopPropagation())},document.addEventListener("blur",e,!0),console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§‰∫ã‰ª∂ÁõëÂê¨Âô®Â∑≤Ê∑ªÂä†")),function(){e&&(document.removeEventListener("blur",e,!0),console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§‰∫ã‰ª∂ÁõëÂê¨Âô®Â∑≤ÁßªÈô§"))}}),[t])}(n);var At=!B&&N,Tt=r.useRef(At);return r.useEffect((function(){if(Tt.current&&!At&&Object.keys(Y).length>0){var t=(null==y?void 0:y.trim())||"roam/memo";if(!x||0===x.length)return console.warn("üéØ ‰ºòÂÖàÁ∫ß‰øùÂ≠òË∑≥Ëøá: allCardUids‰∏∫Á©∫"),X({}),void J(!1);er({rankingChanges:Y,dataPageTitle:t,allCardUids:x}).then((function(){Z.current?(console.log("üéØ ‰ºòÂÖàÁ∫ß‰øùÂ≠òÊàêÂäü"),X({}),J(!1)):console.log("üéØ ÁªÑ‰ª∂Â∑≤Âç∏ËΩΩÔºåË∑≥ËøáÁä∂ÊÄÅÊõ¥Êñ∞")})).catch((function(t){var e;Z.current?(console.error("üéØ ‰ºòÂÖàÁ∫ß‰øùÂ≠òÂ§±Ë¥•:",t),null!==(e=window.roamAlphaAPI)&&void 0!==e&&null!==(e=e.ui)&&void 0!==e&&e.showToast&&window.roamAlphaAPI.ui.showToast({message:"‰ºòÂÖàÁ∫ß‰øùÂ≠òÂ§±Ë¥•ÔºåÊï∞ÊçÆÊöÇÂ≠òÊú¨Âú∞„ÄÇËØ∑ÈáçÊñ∞ÊâìÂºÄÁªÉ‰π†Á™óÂè£ÈáçËØï„ÄÇ",intent:"warning",timeout:5e3})):console.log("üéØ ÁªÑ‰ª∂Â∑≤Âç∏ËΩΩÔºåË∑≥ËøáÈîôËØØÂ§ÑÁêÜ")}))}Tt.current=At}),[At,Y,y,x]),r.createElement(La.Provider,{value:{reviewMode:j,setReviewModeOverride:R,intervalMultiplier:z,setIntervalMultiplier:H,intervalMultiplierType:U,setIntervalMultiplierType:q,onPracticeClick:xt,today:c,selectedTag:o,currentIndex:T,renderMode:C,setRenderMode:m}},r.createElement(Fa,{isOpen:n,onClose:s,className:"pb-0 bg-white",canEscapeKeyClose:!1},r.createElement(Ha,{className:"bp3-dialog-header outline-none focus:outline-none focus-visible:outline-none",tagsList:a,onCloseCallback:s,onTagChange:gt,status:at,isDone:B,nextDueDate:nt,showBreadcrumbs:_t,setShowBreadcrumbs:Pt,isCramming:f,practiceCardUids:P}),r.createElement(Oa,{className:"bp3-dialog-body overflow-y-scroll m-0 pt-6 pb-8 px-4",dir:d?"rtl":void 0},L?r.createElement(r.Fragment,null,vt?null===(e=st.childrenUids)||void 0===e?void 0:e.map((function(t){return r.createElement(Bn,{key:t,refUid:t,showAnswers:ft,setHasCloze:yt,breadcrumbs:st.breadcrumbs,showBreadcrumbs:!1})})):r.createElement(Bn,{refUid:L,showAnswers:ft,setHasCloze:yt,breadcrumbs:st.breadcrumbs,showBreadcrumbs:_t})):r.createElement("div",{"data-testid":"practice-overlay-done-state",className:"flex items-center flex-col"},r.createElement(an.A,{options:kt,style:{height:200,width:"auto"}}),r.createElement("div",null,"You're all caught up! üåü"," ",k.completed>0?"Reviewed ".concat(k.completed," ").concat(("card","cards",1===k.completed?"card":"cards")," today."):""))),r.createElement(na,{refUid:L,onPracticeClick:xt,onSkipClick:wt,onPrevClick:Et,setShowAnswers:pt,showAnswers:ft,isDone:B,hasCards:N,onCloseCallback:s,currentCardData:I,onStartCrammingClick:function(){v(),p(!0),M(0)},fsrsEnabled:E}),At&&r.createElement(ua,{priority:Q,onPriorityChange:tt,disabled:!1,allCardsCount:g})))};var Ua,qa;function Wa(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}var Ya=Dt.span(Ua||(Ua=Wa(["\n  display: flex;\n"]))),Xa=Dt(i.Tag)(qa||(qa=Wa(["\n  &.bp3-tag {\n    padding: 1px 3px;\n    min-height: auto;\n    min-width: auto;\n  }\n"])));const Ka=function(t){var e=t.onClickCallback,r=t.today,n=r.combinedToday.status===ee.Finished,i=r.combinedToday,a=n?"bp3-icon-confirm":"bp3-icon-box";return React.createElement(Ya,{"data-testid":"side-panel-wrapper",className:"w-full justify-between",onClick:e},React.createElement("div",null,React.createElement("div",{className:"flex"},React.createElement("span",{className:"bp3-icon ".concat(a," icon bp3-icon-small flex items-center")}),React.createElement("div",null,"Review"))),React.createElement("div",{className:"ml-2"},i.due>0&&React.createElement(fn,{content:"Due",placement:"top"},React.createElement(Xa,{active:!0,minimal:!0,intent:"primary",className:"text-center","data-testid":"due-tag"},i.due)),i.new>0&&React.createElement(fn,{content:"New",placement:"top"},React.createElement(Xa,{active:!0,minimal:!0,intent:"success",className:"text-center ml-2","data-testid":"new-tag"},i.new))))};function Ja(t){return Ja="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ja(t)}function Za(){Za=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==Ja(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Ja(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Qa(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function to(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return eo(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?eo(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function ro(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return no(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?no(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function no(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var io=function(t){for(var e=[],r="",n=!1,i=0;i<t.length;i++){var a=t[i];'"'===a?n=!n:","!==a||n?r+=a:(e.push(r.trim()),r="")}return e.push(r.trim()),e};function ao(t){return ao="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ao(t)}var oo,so,lo,co,ho;function uo(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function fo(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?uo(Object(r),!0).forEach((function(e){po(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):uo(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function po(t,e,r){var n;return n=function(t,e){if("object"!=ao(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=ao(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e),(e="symbol"==ao(n)?n:String(n))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function mo(){mo=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==ao(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(ao(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function yo(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function vo(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){yo(a,n,i,o,s,"next",t)}function s(t){yo(a,n,i,o,s,"throw",t)}o(void 0)}))}}function go(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||bo(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bo(t,e){if(t){if("string"==typeof t)return xo(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?xo(t,e):void 0}}function xo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function wo(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}var Eo="#e5e7eb",ko=function(t){var e=t.sessions,n=e.some((function(t){return!t.isRoamSrOldPracticeRecord}));return r.createElement("div",{className:"overflow-scroll"},r.createElement("table",{className:"bp3-html-table bp3-small bp3-html-table-striped w-full"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Grade"),r.createElement("th",null,"Date"),r.createElement("th",null,"eFactor"),r.createElement("th",null,"Interval"),r.createElement("th",null,"Streak"),r.createElement("th",null,"Due"),n&&r.createElement("th",null,"New"))),r.createElement("tbody",null,e.map((function(t,e){return r.createElement("tr",{key:e},r.createElement("td",null,t.grade),r.createElement("td",null,It(t.dateCreated)),r.createElement("td",null,t.eFactor.toFixed(2)),r.createElement("td",null,t.interval),r.createElement("td",null,t.repetitions),r.createElement("td",null,It(t.nextDueDate)),n&&r.createElement("td",null,t.isRoamSrOldPracticeRecord?"":"‚ùáÔ∏è"))})))))},So=Dt.div(oo||(oo=wo(["\n  width: 100%;\n  border-bottom: 1px solid ",";\n"])),Eo),_o=function(t){var e=t.uuid,n=t.sessions,a=t.isLast,o=t.isFirst,s=t.selectedUids,l=t.setSelectedUids,c=t.blockInfo,h=go(r.useState(!1),2),u=h[0],f=h[1],p=go(r.useState(!!o),2),d=p[0],m=p[1];r.useEffect((function(){s.includes(e)?f(!0):f(!1)}),[s]);var y=n.filter((function(t){return!t.isRoamSrOldPracticeRecord}));return r.createElement(r.Fragment,null,r.createElement("div",{className:"flex flex-col px-4 py-4"},r.createElement("div",{className:"flex items-center"},r.createElement(i.Checkbox,{checked:u,onChange:function(t){l((function(r){return t.target.checked?[].concat(function(t){if(Array.isArray(t))return xo(t)}(n=r)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(n)||bo(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]):r.filter((function(t){return t!==e}));var n}))},className:"cursor-not-allowed"}),r.createElement("div",{className:"truncate w-full cursor-pointer",onClick:function(){return m((function(t){return!t}))}},r.createElement("div",{className:"truncate w-full cursor-pointer text-gray-600"},null==c?void 0:c.string),r.createElement("div",{className:"bp3-text-small bp3-text-muted"},"Found ",n.length-y.length," Practice Sessions"," ",r.createElement("span",{className:"text-green-600"},y.length>0&&"(merged with ".concat(y.length," new sessions)")))),r.createElement("div",{className:"px-5 cursor-pointer",onClick:function(){return m((function(t){return!t}))}},r.createElement(i.Icon,{icon:"chevron-down",className:"".concat(d?"transform rotate-180":"")}))),d&&r.createElement(ko,{sessions:n})),!a&&r.createElement(So,null))},Po=Dt.div(so||(so=wo(["\n  max-height: 500px;\n  overflow: scroll;\n"]))),Co=Dt(i.Dialog)(lo||(lo=wo(["\n  width: 90%;\n  max-width: 700px;\n"]))),Ao=Dt.div(co||(co=wo(["\n  border-bottom: 1px solid ",";\n"])),Eo),To=function(t){var e=t.totalCardsFound,n=t.totalRecords,a=t.executeImport,o=t.isImporting,s=t.selectedUids,l=t.setLaunchPanel,c=t.importedUids,h=t.onSelectAllClick,u=t.onDeselectAllClick;return r.createElement(Ao,{className:"flex px-4 py-4 justify-between"},r.createElement("div",null,r.createElement("h4",{className:"bp3-heading mb-1"},"Import Roam Sr. Data"),r.createElement("div",{className:"bp3-text-small bp3-text-muted"},r.createElement(r.Fragment,null,"Found ",r.createElement("strong",null,e)," cards with a total of"," ",r.createElement("strong",null,n)," sessions.")),c.length>0&&r.createElement("div",{className:"bp3-text-small bp3-text-muted"},r.createElement(r.Fragment,null,r.createElement("strong",null,c.length)," cards have already been imported."))),r.createElement("div",null,r.createElement("div",{className:"flex justify-end items-center"},r.createElement(i.Button,{onClick:a,disabled:o||!s.length,intent:"primary"},"Import ",s.length===e?"All":"(".concat(s.length,")")),r.createElement(i.Button,{icon:"cross",onClick:function(){return l(!1)},className:"ml-2"})),r.createElement("div",{className:"bp3-text-small bp3-text-muted pt-2"},r.createElement(i.Button,{onClick:h,className:"ml-2",small:!0,minimal:!0},r.createElement("span",{className:"bp3-text-small bp3-text-muted"},"Select All"))," ","/"," ",r.createElement(i.Button,{onClick:u,small:!0,minimal:!0},r.createElement("span",{className:"bp3-text-small bp3-text-muted"},"Deselect All")))))},Mo=Dt.div(ho||(ho=wo(["\n  margin-top: 0 !important;\n  margin-bottom: 5px;\n"]))),Do=function(t){var e=t.token,n=t.setToken,a=t.setShowImportPage,o=t.dataPageTitle,s=go(r.useState(!1),2),l=s[0],c=s[1],h=go(r.useState(""),2),u=h[0],f=h[1],p=function(){var t=vo(mo().mark((function t(){var r,n,i,s;return mo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return c(!0),t.next=3,pe(o);case 3:return r=t.sent,n=window.roamAlphaAPI.util.generateUID(),i=window.roamAlphaAPI.graph.name,s={graphName:i,data:{action:"batch-actions",actions:[{action:"create-block",location:{"parent-uid":r,order:"last"},block:{uid:n,string:"test"}},{action:"delete-block",block:{uid:n}}]}},t.prev=8,t.next=11,fetch("".concat("https://roam-memo-server.onrender.com","/save-roam-sr-data"),{method:"POST",body:JSON.stringify(s),headers:{Authorization:"Bearer ".concat(e),"Content-Type":"application/json"}});case 11:if(200===t.sent.status){t.next=14;break}throw new Error("API validation failed. Please check your token and make sure you have edit access to this graph");case 14:a(!0),t.next=20;break;case 17:t.prev=17,t.t0=t.catch(8),f(t.t0.message);case 20:c(!1);case 21:case"end":return t.stop()}}),t,null,[[8,17]])})));return function(){return t.apply(this,arguments)}}();return r.createElement("div",{className:"flex px-4 py-4 justify-between"},r.createElement("div",{className:"flex items-center"},r.createElement(i.FormGroup,{label:"Roam Graph API Token",labelFor:"text-input",labelInfo:"(required)"},r.createElement(Mo,{className:"bp3-form-helper-text",style:{marginBottom:10}},"In order to import your practice data, you need to generate a Roam Graph API Token."," ",r.createElement("a",{href:"https://roamresearch.com/#/app/developer-documentation/page/bmYYKQ4vf",target:"_blank",rel:"noreferrer"},"Click here")," ","to learn how to generate one."),r.createElement(i.InputGroup,{autoFocus:!0,id:"text-input",placeholder:"roam-graph-token-XXXXX-XXXXXXXXXXXX",value:e,onChange:function(t){n(t.target.value)},onKeyUp:function(t){"Enter"===t.key&&p()},className:"mb-3"}),r.createElement("div",{className:"flex justify-center flex-col"},r.createElement("div",{className:"text-center"},r.createElement(i.Button,{icon:"geosearch",intent:"primary",loading:l,disabled:!e||l,onClick:p},"Fetch Preview Data")),u&&r.createElement("div",{className:"mt-3 text-center text-sm text-red-400"},u)))))},Lo=function(t){var e=t.isImporting,n=t.setLaunchPanel,a=t.hasImported,o=t.selectedUids,s=t.importedUids,l=o.length,c=go(r.useState(l),1)[0],h=go(r.useState(s.length),1)[0],u=s.length-h,f=u===c;return e||a?r.createElement("div",{className:"absolute inset-0 flex flex-col bg-white z-10"},r.createElement("div",{className:"py-5 px-5 flex h-full flex-col justify-center items-center"},a?r.createElement("h4",{className:"bp3-heading mb-3"},"Import Complete"):r.createElement("h4",{className:"bp3-heading mb-3"},"Importing Sessions ",u,"/",c),r.createElement(i.ProgressBar,{intent:f?"success":"primary",animate:!f,stripes:!f,value:u/c,className:"mb-3"}),f?r.createElement(i.Button,{onClick:function(){n(!1)}},"Close"):r.createElement(Mo,{className:"bp3-form-helper-text mb-5"},"This may take a while to sync especially if you have a lot of practice data. Go grab coffee."))):null},Fo=function(t){var e=t.dataPageTitle,n=t.token,a=t.setLaunchPanel,o=go(r.useState(!0),2),s=o[0],l=o[1],c=go(r.useState(0),2),h=c[0],u=c[1],f=go(r.useState(!1),2),p=f[0],d=f[1],m=go(r.useState(!1),2),y=m[0],v=m[1],g=go(r.useState({}),2),b=g[0],x=g[1],w=Object.keys(b).length>0,E=go(r.useState([]),2),k=E[0],S=E[1],_=go(r.useState([]),2),P=_[0],C=_[1],A=go(r.useState({}),2),T=A[0],M=A[1],D=Object.keys(b).length,L=Object.values(b).reduce((function(t,e){return t+e.length}),0);r.useEffect((function(){vo(mo().mark((function t(){var r,n,i,a,o,s,c,h,u,f;return mo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return l(!0),t.next=3,nn(300);case 3:return t.next=5,_r({dataPageTitle:e,limitToLatest:!1});case 5:return r=t.sent,t.next=8,Ur();case 8:return n=t.sent,t.next=11,Wr(n,r,e);case 11:i=t.sent,a=[],o=0,s=Object.keys(r);case 14:if(!(o<s.length)){t.next=24;break}if((c=s[o])in n){t.next=18;break}return t.abrupt("continue",21);case 18:r[c].some((function(t){return t.isRoamSrOldPracticeRecord}))&&a.push(c);case 21:o++,t.next=14;break;case 24:h=mo().mark((function t(){var e,r;return mo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!((e=f[u])in T)){t.next=3;break}return t.abrupt("return",1);case 3:return t.next=5,ue(e);case 5:r=t.sent,M((function(t){return fo(fo({},t),{},po({},e,r))}));case 7:case"end":return t.stop()}}),t)})),u=0,f=Object.keys(i);case 26:if(!(u<f.length)){t.next=33;break}return t.delegateYield(h(),"t0",28);case 28:if(!t.t0){t.next=30;break}return t.abrupt("continue",30);case 30:u++,t.next=26;break;case 33:C(a),x(i),S(Object.keys(i).filter((function(t){return!a.includes(t)}))),l(!1);case 37:case"end":return t.stop()}}),t)})))()}),[h]),r.useEffect((function(){if(y||p){var t=setInterval(vo(mo().mark((function t(){return mo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:u((function(t){return t+1}));case 1:case"end":return t.stop()}}),t)}))),3e3);return function(){return clearInterval(t)}}}),[y]);var F=function(){var t=vo(mo().mark((function t(){return mo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return v(!0),t.next=3,Ze({token:n,records:b,selectedUids:k,dataPageTitle:e});case 3:d(!0),v(!1),u((function(t){return t+1}));case 6:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();return!s||y||p?r.createElement("div",{className:"flex flex-col relative"},r.createElement(Lo,{isImporting:y,hasImported:p,setLaunchPanel:a,selectedUids:k,importedUids:P}),r.createElement(To,{totalCardsFound:D,totalRecords:L,executeImport:F,isImporting:y,selectedUids:k,setLaunchPanel:a,importedUids:P,onSelectAllClick:function(){return S(Object.keys(b))},onDeselectAllClick:function(){return S([])}}),r.createElement(Po,null,w?Object.keys(b).sort((function(t){return P.includes(t)?1:-1})).map((function(t,e,n){return r.createElement(_o,{key:t,uuid:t,sessions:b[t],isLast:e===n.length-1,isFirst:0===e,selectedUids:k,setSelectedUids:S,blockInfo:T[t]})})):r.createElement("div",{className:"flex justify-center items-center my-10"},r.createElement("div",null,"No records found.")))):r.createElement("div",{className:"flex justify-center items-center my-10"},r.createElement(i.Spinner,{className:"mr-3"}),r.createElement("div",null,"Loading..."))},Oo=function(t){var e=t.dataPageTitle,n=t.setLaunchPanel,i=t.token,a=t.setToken,o=go(r.useState(!1),2),s=o[0],l=o[1];return r.createElement(Co,{className:"bp3-ui-text pb-0 bg-white select-none",canEscapeKeyClose:!1,isOpen:!0},i&&s?r.createElement(Fo,{dataPageTitle:e,token:i,setLaunchPanel:n}):r.createElement(Do,{token:i,setToken:a,setShowImportPage:l,dataPageTitle:e}))};const Io=function(t){var e=t.dataPageTitle,n=go(r.useState(!1),2),a=n[0],o=n[1],s=go(r.useState(null),2),l=s[0],c=s[1];return r.createElement("div",null,r.createElement(i.Button,{onClick:function(){return o(!0)}},"Launch"),a&&r.createElement(Oo,{dataPageTitle:e,setLaunchPanel:o,token:l,setToken:c}))};function jo(t){return jo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},jo(t)}function Ro(){Ro=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==jo(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(jo(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function No(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Bo(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?No(Object(r),!0).forEach((function(e){Vo(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):No(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Vo(t,e,r){var n;return n=function(t,e){if("object"!=jo(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=jo(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e),(e="symbol"==jo(n)?n:String(n))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Go(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function zo(t){return zo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},zo(t)}function Ho(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function $o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ho(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=zo(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=zo(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==zo(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ho(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Uo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var qo={tagsListString:"memo",dataPageTitle:"roam/memo",dailyLimit:0,rtlEnabled:!1,shuffleCards:!1,defaultPriority:70,fsrsEnabled:!0};const Wo=function(){var t,e,r=(t=n().useState(qo),e=2,function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Uo(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Uo(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[0],a=r[1];return n().useEffect((function(){i.tagsListString.trim()||a((function(t){return $o($o({},t),{},{tagsListString:qo.tagsListString})}))}),[i]),n().useEffect((function(){window.roamMemo.extensionAPI.settings.panel.create(function(t){var e=t.settings,r=t.setSettings,n=function(){var t,e=(t=Ro().mark((function t(e){var n,i;return Ro().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.key,i=e.value,window.roamMemo.extensionAPI.settings.set(n,i),r((function(t){return Bo(Bo({},t),{},Vo({},n,i))}));case 3:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Go(a,n,i,o,s,"next",t)}function s(t){Go(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t){return e.apply(this,arguments)}}(),i=function(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300;return function(){for(var n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];clearTimeout(e),e=setTimeout((function(){t.apply(rn,i)}),r)}}((function(t){return n(t)}));return{tabTitle:"Memo Enhanced",settings:[{id:"tagsListString",name:"Tag Pages (aka Decks)",description:'Separate multiple decks with commas. Example: "memo, sr, üêò, french exam, fun facts"',action:{type:"input",placeholder:qo.tagsListString,onChange:function(t){var e=t.target.value.trim();i({key:"tagsListString",value:e})}}},{id:"fsrsEnabled",name:"Enable FSRS Algorithm/ÂêØÁî®FSRSÁÆóÊ≥ï",description:"Enable the modern FSRS algorithm instead of SM2. FSRS provides better long-term retention prediction. \n‰Ω†ÂèØ‰ª•ÂºÄÂêØFSRSÊèê‰æõÊú∫Âô®Â≠¶‰π†ËÆ≠ÁªÉÁöÑÈ´òÁ∫ßÁÆóÊ≥ï„ÄÇÈªòËÆ§SM2 ÁªèÂÖ∏ÁÆóÊ≥ïÔºåËÆ©Â≠¶‰π†ÂéãÂäõÊõ¥Â∞è„ÄÇ",action:{type:"switch",checked:e.fsrsEnabled,onChange:function(t){i({key:"fsrsEnabled",value:t.target.checked})}}},{id:"migrate-roam-sr-data",name:"Migrate Roam/Sr Data",description:"A tool to import your Roam/Sr data into Memo Enhanced.",action:{type:"reactComponent",component:function(){return React.createElement(Io,{dataPageTitle:e.dataPageTitle})}}},{id:"dataPageTitle",name:"Data Page Title",description:"Name of page where we'll store all your data",action:{type:"input",placeholder:qo.dataPageTitle,onChange:function(t){var e=t.target.value.trim();i({key:"dataPageTitle",value:e})}}},{id:"dailyLimit",name:"Daily Review Limit",description:"Number of cards to review each day. 0 means no limit.",action:{type:"input",placeholder:qo.dailyLimit,onChange:function(t){var e=t.target.value.trim(),r=!isNaN(Number(e));i({key:"dailyLimit",value:r?Number(e):0})}}},{id:"rtlEnabled",name:"Right-to-Left (RTL) Enabled",description:"Enable RTL for languages like Arabic, Hebrew, etc.",action:{type:"switch",checked:e.rtlEnabled,onChange:function(t){i({key:"rtlEnabled",value:t.target.checked})}}},{id:"shuffleCards",name:"Shuffle Cards",description:"Randomly shuffle the order of new and due cards during review.",action:{type:"switch",checked:e.shuffleCards,onChange:function(t){i({key:"shuffleCards",value:t.target.checked})}}},{id:"defaultPriority",name:"Default Priority for New Cards",description:"Set the default priority (0-100) for new cards. Higher numbers = higher priority. New cards will be added to the ranking list with this priority.",action:{type:"input",placeholder:qo.defaultPriority.toString(),onChange:function(t){var e=t.target.value.trim(),r=Number(e);!isNaN(r)&&r>=0&&r<=100?i({key:"defaultPriority",value:r}):""===e&&i({key:"defaultPriority",value:qo.defaultPriority})}}}]}}({settings:i,setSettings:a}))}),[a,i.dataPageTitle]),n().useEffect((function(){var t=window.roamMemo.extensionAPI.settings.getAll()||{};if("shuffleCards"in t||window.roamMemo.extensionAPI.settings.set("shuffleCards",qo.shuffleCards),"schedulingAlgorithm"in t&&!("fsrsEnabled"in t)){var e="FSRS"===t.schedulingAlgorithm;window.roamMemo.extensionAPI.settings.set("fsrsEnabled",e)}"fsrsEnabled"in t||window.roamMemo.extensionAPI.settings.set("fsrsEnabled",qo.fsrsEnabled);var r=["dailyLimit","defaultPriority"],n=Object.keys(t).reduce((function(e,n){var i=t[n];return e[n]=r.includes(n)?Number(i):i,e}),{});a((function(t){return $o($o({},t),n)}))}),[a]),i};function Yo(t){return Yo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Yo(t)}function Xo(){Xo=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==Yo(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Yo(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Ko(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=Jo(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function Jo(t,e){if(t){if("string"==typeof t)return Zo(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Zo(t,e):void 0}}function Zo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Qo(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function ts(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Qo(a,n,i,o,s,"next",t)}function s(t){Qo(a,n,i,o,s,"throw",t)}o(void 0)}))}}const es=function(t){var e,n,i=t.dataPageTitle,a=r.useMemo((function(){var t=function(){var t=ts(Xo().mark((function t(){var e,r,n,a,o;return Xo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,nn(100);case 2:e=(s=Array.from(document.querySelectorAll(".rm-ref-page-view .rm-ref-page-view-title")),function(t){if(Array.isArray(t))return Zo(t)}(s)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(s)||Jo(s)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).filter((function(t){return t.textContent===i})),r=Ko(e);try{for(r.s();!(n=r.n()).done;)a=n.value,(o=null==a?void 0:a.parentNode.querySelector(".rm-caret-open"))&&mn(o)}catch(t){r.e(t)}finally{r.f()}case 5:case"end":return t.stop()}var s}),t)})));return function(){return t.apply(this,arguments)}}();return t}),[i]),o=(e=r.useState(""),n=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(e,n)||Jo(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[0],l=o[1];r.useEffect((function(){a();var t=function(){l(location.href),a()};return window.addEventListener("popstate",t),function(){window.removeEventListener("popstate",t)}}),[i,a]),r.useEffect((function(){var t=new MutationObserver((function(){a()}));return ts(Xo().mark((function e(){var r;return Xo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,nn(100);case 2:if(r=document.querySelector(".roam-log-container")){e.next=5;break}return e.abrupt("return");case 5:t.observe(r,{childList:!0});case 6:case"end":return e.stop()}}),e)})))(),function(){t.disconnect()}}),[a,s])};var rs=__webpack_require__(5207);__webpack_require__.n(rs)();function ns(t){return ns="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ns(t)}function is(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function as(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?is(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=ns(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=ns(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==ns(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):is(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function os(){os=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==ns(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(ns(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function ss(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function ls(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){ss(a,n,i,o,s,"next",t)}function s(t){ss(a,n,i,o,s,"throw",t)}o(void 0)}))}}function cs(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return hs(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?hs(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hs(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function us(t){return us="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},us(t)}var fs=["refUid"];function ps(){ps=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=u(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==us(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=u(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=u(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(us(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(h(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function ds(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function ms(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ds(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=us(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=us(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==us(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ds(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function ys(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}function vs(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function gs(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return bs(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?bs(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bs(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}const xs=function(){var t,e=gs(r.useState(!1),2),a=e[0],o=e[1],s=gs(r.useState(!1),2),l=s[0],c=s[1],h=Wo(),u=h.tagsListString,f=h.dataPageTitle,p=h.dailyLimit,d=h.rtlEnabled,m=h.shuffleCards,y=h.defaultPriority,v=h.fsrsEnabled,g=function(t){var e=t.tagsListString,n=ro(r.useState(io(e)),2),i=n[0],a=n[1],o=ro(r.useState(i[0]),2),s=o[0],l=o[1];return r.useEffect((function(){var t=io(e);a(t),l(t[0])}),[e,a]),{selectedTag:s,setSelectedTag:l,tagsList:i}}({tagsListString:u}),b=g.selectedTag,x=g.setSelectedTag,w=g.tagsList,E=function(t){var e=t.dataPageTitle,r=t.selectedTag,i=cs(n().useState({}),2),a=i[0],o=i[1],s=cs(n().useState(0),2),l=s[0],c=s[1],h=function(){var t=ls(os().mark((function t(n){return os().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Jt({dataPageTitle:e,selectedTag:r,toDeleteKeyId:n});case 2:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}();n().useEffect((function(){var t=function(){var t=ls(os().mark((function t(){var r;return os().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Cr({dataPageTitle:e});case 2:r=t.sent,o(r);case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();t()}),[l,e,r]);var u,f=n().useCallback((function(){return c((function(t){return t+1}))}),[c]);return{saveCacheData:(u=ls(os().mark((function t(n,i){return os().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Kt(as({dataPageTitle:e,data:n,selectedTag:r},i));case 2:c((function(t){return t+1}));case 3:case"end":return t.stop()}}),t)}))),function(t,e){return u.apply(this,arguments)}),deleteCacheDataKey:h,fetchCacheData:f,data:r?a[r]||{}:a}}({dataPageTitle:f}),k=E.fetchCacheData,S=E.saveCacheData,_=E.data,P=function(t){var e=t.tagsList,n=t.selectedTag,i=t.dataPageTitle,a=t.cachedData,o=t.isCramming,s=t.dailyLimit,l=t.shuffleCards,c=t.defaultPriority,h=to(r.useState({}),2),u=h[0],f=h[1],p=to(r.useState(!1),2),d=p[0],m=p[1],y=to(r.useState(ne),2),v=y[0],g=y[1],b=to(r.useState(0),2),x=b[0],w=b[1],E=to(r.useState([]),2),k=E[0],S=E[1],_=to(r.useState([]),2),P=_[0],C=_[1],A=r.useMemo((function(){return"number"==typeof c?c:70}),[c]),T=r.useRef(!1);return r.useEffect((function(){var t;T.current||(t=Za().mark((function t(){var r,c,h,u,p,d;return Za().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n){t.next=2;break}return t.abrupt("return");case 2:return T.current=!0,t.prev=4,t.next=7,yr({tagsList:e,dataPageTitle:i,dailyLimit:s,isCramming:o,shuffleCards:l,cachedData:a,defaultPriority:A});case 7:r=t.sent,c=r.practiceData,h=r.todayStats,u=r.allCardsCount,p=r.priorityOrder,d=r.allCardUids,g(h),f(c),w(u),S(p),C(d),t.next=24;break;case 21:t.prev=21,t.t0=t.catch(4),console.error("üìä [usePracticeData] Êï∞ÊçÆËé∑ÂèñÂ§±Ë¥•:",t.t0);case 24:return t.prev=24,T.current=!1,t.finish(24);case 27:case"end":return t.stop()}}),t,null,[[4,21,24,27]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Qa(a,n,i,o,s,"next",t)}function s(t){Qa(a,n,i,o,s,"throw",t)}o(void 0)}))})()}),[n,i,d,o,s,e,l,a,A]),{practiceData:u,fetchPracticeData:function(){return m((function(t){return!t}))},today:v,allCardsCount:x,priorityOrder:k,allCardUids:P}}({tagsList:w,selectedTag:b,dataPageTitle:f,cachedData:_,isCramming:l,dailyLimit:p,shuffleCards:m,defaultPriority:y}),C=P.practiceData,A=P.today,T=P.fetchPracticeData,M=P.allCardsCount,D=P.priorityOrder,L=P.allCardUids,F=function(){var t,e=(t=ps().mark((function t(e){var r,n,i;return ps().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.refUid,n=ys(e,fs),r){t.next=4;break}return console.error("HandlePracticeFn Error: No refUid provided"),t.abrupt("return");case 4:return t.prev=4,i=ms(ms({},n),{},{dataPageTitle:f,dateCreated:new Date,refUid:r,isCramming:l,fsrsEnabled:v}),t.next=8,Mi(i);case 8:t.next=13;break;case 10:t.prev=10,t.t0=t.catch(4),console.error("Error Saving Practice Data",t.t0);case 13:case"end":return t.stop()}}),t,null,[[4,10]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){vs(a,n,i,o,s,"next",t)}function s(t){vs(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t){return e.apply(this,arguments)}}(),O=function(){k(),T()};t=function(){a||O()},r.useEffect((function(){var e=function(){"visible"===document.visibilityState&&t()};return document.addEventListener("visibilitychange",e),function(){document.removeEventListener("visibilitychange",e)}}),[t]);var I=function(){O(),o(!0),c(!1)};es({dataPageTitle:f});var j,R,N,B=gs(r.useState([]),2),V=B[0],G=B[1];return R=(j={onEnterCallback:function(t){var e=w.filter((function(e){return t.value.includes(e)}));G(e)},onLeaveCallback:function(t){if(!a){var e=w.filter((function(e){return t.value.includes(e)}));V.length!==e.length&&T()}}}).onEnterCallback,N=j.onLeaveCallback,n().useEffect((function(){return document.leave("textarea.rm-block-input",N),document.arrive("textarea.rm-block-input",R),function(){document.unbindLeave("textarea.rm-block-input",N),document.unbindArrive("textarea.rm-block-input",R)}}),[R,N]),function(t){var e=t.onShowPracticeOverlay;n().useEffect((function(){var t="Memo: Start Review Session";return window.roamAlphaAPI.ui.commandPalette.addCommand({label:t,callback:function(){return e()}}),function(){window.roamAlphaAPI.ui.commandPalette.removeCommand({label:t})}}),[e])}({onShowPracticeOverlay:I}),r.createElement(i.HotkeysProvider,null,r.createElement(r.Fragment,null,r.createElement(Ka,{onClickCallback:I,today:A}),a&&r.createElement($a,{isOpen:a,onCloseCallback:function(){o(!1),c(!1),O()},practiceData:C,today:A,handlePracticeClick:F,tagsList:w,selectedTag:b,handleMemoTagChange:x,handleReviewMoreClick:function(){},isCramming:l,setIsCramming:c,rtlEnabled:d,setRenderMode:function(t,e){S({renderMode:e},{selectedTag:t}),k()},dataPageTitle:f,onDataRefresh:O,allCardsCount:M,priorityOrder:D,allCardUids:L,defaultPriority:y,fsrsEnabled:v})))};console.log("Memo: Initializing...");var ws="roam-memo-wrapper";const Es={onload:function(t){var r=t.extensionAPI;window.roamMemo={extensionAPI:r},i.FocusStyleManager.onlyShowFocusOnTabs();var n,a,o=(n=document.querySelector(".rm-left-sidebar__daily-notes"),(a=document.createElement("div")).id=ws,a.classList.add("log-button"),n&&n.parentNode?n.parentNode.insertBefore(a,n.nextSibling):document.body.appendChild(a),a);e().render(React.createElement(xs,null),o),console.log("Memo: Initialized")},onunload:function(){var t=document.getElementById(ws);try{__webpack_require__(8667).roamFocusManager.forceCleanup()}catch(t){console.error("üéØ Memo Enhanced: Ê∏ÖÁêÜÁÑ¶ÁÇπÁÆ°ÁêÜÂô®Â§±Ë¥•:",t)}try{__webpack_require__(1419).roamZIndexManager.removeZIndexFix()}catch(t){console.error("üîß Memo Enhanced: Ê∏ÖÁêÜÂ±ÇÁ∫ßÁÆ°ÁêÜÂô®Â§±Ë¥•:",t)}t&&(e().unmountComponentAtNode(t),t.remove()),console.log("Memo: Unloaded - ÊâÄÊúâ‰øÆÂ§çËÑöÊú¨Â∑≤Ê∏ÖÁêÜ")}}})();var __webpack_exports__default=__webpack_exports__.A;export{__webpack_exports__default as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,