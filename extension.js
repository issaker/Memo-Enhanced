/*! For license information please see extension.js.LICENSE.txt */
var __webpack_modules__={5207:()=>{!function(t,e,r){if(t.MutationObserver&&"undefined"!=typeof HTMLElement){var n,i=0,a=(n=HTMLElement.prototype.matches||HTMLElement.prototype.webkitMatchesSelector||HTMLElement.prototype.mozMatchesSelector||HTMLElement.prototype.msMatchesSelector,{matchesSelector:function(t,e){return t instanceof HTMLElement&&n.call(t,e)},addMethod:function(t,e,r){var n=t[e];t[e]=function(){return r.length==arguments.length?r.apply(this,arguments):"function"==typeof n?n.apply(this,arguments):void 0}},callCallbacks:function(t,e){e&&e.options.onceOnly&&1==e.firedElems.length&&(t=[t[0]]);for(var r,n=0;r=t[n];n++)r&&r.callback&&r.callback.call(r.elem,r.elem);e&&e.options.onceOnly&&1==e.firedElems.length&&e.me.unbindEventWithSelectorAndCallback.call(e.target,e.selector,e.callback)},checkChildNodesRecursively:function(t,e,r,n){for(var i,o=0;i=t[o];o++)r(i,e,n)&&n.push({callback:e.callback,elem:i}),i.childNodes.length>0&&a.checkChildNodesRecursively(i.childNodes,e,r,n)},mergeArrays:function(t,e){var r,n={};for(r in t)t.hasOwnProperty(r)&&(n[r]=t[r]);for(r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);return n},toElementsArray:function(e){return void 0===e||"number"==typeof e.length&&e!==t||(e=[e]),e}}),o=function(){var t=function(){this._eventsBucket=[],this._beforeAdding=null,this._beforeRemoving=null};return t.prototype.addEvent=function(t,e,r,n){var i={target:t,selector:e,options:r,callback:n,firedElems:[]};return this._beforeAdding&&this._beforeAdding(i),this._eventsBucket.push(i),i},t.prototype.removeEvent=function(t){for(var e,r=this._eventsBucket.length-1;e=this._eventsBucket[r];r--)if(t(e)){this._beforeRemoving&&this._beforeRemoving(e);var n=this._eventsBucket.splice(r,1);n&&n.length&&(n[0].callback=null)}},t.prototype.beforeAdding=function(t){this._beforeAdding=t},t.prototype.beforeRemoving=function(t){this._beforeRemoving=t},t}(),s=function(e,n){var i=new o,s=this,l={fireOnAttributesModification:!1};return i.beforeAdding((function(r){var i,a=r.target;a!==t.document&&a!==t||(a=document.getElementsByTagName("html")[0]),i=new MutationObserver((function(t){n.call(this,t,r)}));var o=e(r.options);i.observe(a,o),r.observer=i,r.me=s})),i.beforeRemoving((function(t){t.observer.disconnect()})),this.bindEvent=function(t,e,r){e=a.mergeArrays(l,e);for(var n=a.toElementsArray(this),o=0;o<n.length;o++)i.addEvent(n[o],t,e,r)},this.unbindEvent=function(){var t=a.toElementsArray(this);i.removeEvent((function(e){for(var n=0;n<t.length;n++)if(this===r||e.target===t[n])return!0;return!1}))},this.unbindEventWithSelectorOrCallback=function(t){var e,n=a.toElementsArray(this),o=t;e="function"==typeof t?function(t){for(var e=0;e<n.length;e++)if((this===r||t.target===n[e])&&t.callback===o)return!0;return!1}:function(e){for(var i=0;i<n.length;i++)if((this===r||e.target===n[i])&&e.selector===t)return!0;return!1},i.removeEvent(e)},this.unbindEventWithSelectorAndCallback=function(t,e){var n=a.toElementsArray(this);i.removeEvent((function(i){for(var a=0;a<n.length;a++)if((this===r||i.target===n[a])&&i.selector===t&&i.callback===e)return!0;return!1}))},this},l=new function(){var t={fireOnAttributesModification:!1,onceOnly:!1,existing:!1};function e(t,e,n){return!(!a.matchesSelector(t,e.selector)||(t._id===r&&(t._id=i++),-1!=e.firedElems.indexOf(t._id))||(e.firedElems.push(t._id),0))}var n=(l=new s((function(t){var e={attributes:!1,childList:!0,subtree:!0};return t.fireOnAttributesModification&&(e.attributes=!0),e}),(function(t,r){t.forEach((function(t){var n=t.addedNodes,i=t.target,o=[];null!==n&&n.length>0?a.checkChildNodesRecursively(n,r,e,o):"attributes"===t.type&&e(i,r)&&o.push({callback:r.callback,elem:i}),a.callCallbacks(o,r)}))}))).bindEvent;return l.bindEvent=function(e,r,i){void 0===i?(i=r,r=t):r=a.mergeArrays(t,r);var o=a.toElementsArray(this);if(r.existing){for(var s=[],l=0;l<o.length;l++)for(var c=o[l].querySelectorAll(e),u=0;u<c.length;u++)s.push({callback:i,elem:c[u]});if(r.onceOnly&&s.length)return i.call(s[0].elem,s[0].elem);setTimeout(a.callCallbacks,1,s)}n.call(this,e,r,i)},l},c=new function(){var t={};function e(t,e){return a.matchesSelector(t,e.selector)}var r=(c=new s((function(){return{childList:!0,subtree:!0}}),(function(t,r){t.forEach((function(t){var n=t.removedNodes,i=[];null!==n&&n.length>0&&a.checkChildNodesRecursively(n,r,e,i),a.callCallbacks(i,r)}))}))).bindEvent;return c.bindEvent=function(e,n,i){void 0===i?(i=n,n=t):n=a.mergeArrays(t,n),r.call(this,e,n,i)},c};e&&f(e.fn),f(HTMLElement.prototype),f(NodeList.prototype),f(HTMLCollection.prototype),f(HTMLDocument.prototype),f(Window.prototype);var u={};return h(l,u,"unbindAllArrive"),h(c,u,"unbindAllLeave"),u}function h(t,e,r){a.addMethod(e,r,t.unbindEvent),a.addMethod(e,r,t.unbindEventWithSelectorOrCallback),a.addMethod(e,r,t.unbindEventWithSelectorAndCallback)}function f(t){t.arrive=l.bindEvent,h(l,t,"unbindArrive"),t.leave=c.bindEvent,h(c,t,"unbindLeave")}}(window,"undefined"==typeof jQuery?null:jQuery,void 0)},8667:(t,e,r)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,o(n.key),n)}}function a(t,e,r){return(e=o(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t){var e=function(t,e){if("object"!=n(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var i=r.call(t,"string");if("object"!=n(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==n(e)?e:String(e)}r.r(e),r.d(e,{default:()=>c,roamFocusManager:()=>l});var s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,"blurEventHandler",null),a(this,"isActive",!1),a(this,"initCheckInterval",null),a(this,"ROAM_EDITABLE_SELECTOR",'input, textarea, [contenteditable="true"], .rm-block__input.roam-block')}var e,r,n;return e=t,n=[{key:"getInstance",value:function(){return t.instance||(t.instance=new t),t.instance}}],(r=[{key:"activateFocusProtection",value:function(){var t=this;this.isActive?console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§Â∑≤ÊøÄÊ¥ªÔºåÊó†ÈúÄÈáçÂ§çÊøÄÊ¥ª"):(this.blurEventHandler=function(e){var r=e.target;r&&r.matches&&r.matches(t.ROAM_EDITABLE_SELECTOR)&&(console.log("üéØ Roam Memo: Êã¶Êà™Âà∞ Roam ÂùóÁöÑÁÑ¶ÁÇπ‰∏¢Â§±‰∫ã‰ª∂ÔºåÈòªÊ≠¢ÈªòËÆ§Ë°å‰∏∫"),console.log("üéØ Â§±ÁÑ¶ÂÖÉÁ¥†:",{tagName:r.tagName,className:r.className,id:r.id}),e.preventDefault(),e.stopPropagation())},document.addEventListener("blur",this.blurEventHandler,!0),this.isActive=!0,this.waitForRoamInitialization(),console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§Êú∫Âà∂Â∑≤ÊøÄÊ¥ª"))}},{key:"deactivateFocusProtection",value:function(){this.isActive?(this.blurEventHandler&&(document.removeEventListener("blur",this.blurEventHandler,!0),this.blurEventHandler=null),this.initCheckInterval&&(clearInterval(this.initCheckInterval),this.initCheckInterval=null),this.isActive=!1,console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§Êú∫Âà∂Â∑≤ÂÅúÁî®")):console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§Êú™ÊøÄÊ¥ªÔºåÊó†ÈúÄÂÅúÁî®")}},{key:"isFocusProtectionActive",value:function(){return this.isActive}},{key:"toggleFocusProtection",value:function(){this.isActive?this.deactivateFocusProtection():this.activateFocusProtection()}},{key:"waitForRoamInitialization",value:function(){var t=this;this.initCheckInterval=window.setInterval((function(){var e=document.querySelector(".roam-app"),r=document.querySelector(".roam-main");e&&r&&(console.log("üéØ Roam Memo: Roam Â∫îÁî®ÂàùÂßãÂåñÂÆåÊàêÔºåÁÑ¶ÁÇπ‰øùÊä§ËÑöÊú¨ÂáÜÂ§áÂ∞±Áª™"),t.initCheckInterval&&(clearInterval(t.initCheckInterval),t.initCheckInterval=null))}),500)}},{key:"forceCleanup",value:function(){console.log("üéØ Roam Memo: ÊâßË°åÁÑ¶ÁÇπÁÆ°ÁêÜÂô®Âº∫Âà∂Ê∏ÖÁêÜ"),this.deactivateFocusProtection(),this.blurEventHandler&&(document.removeEventListener("blur",this.blurEventHandler,!0),document.removeEventListener("blur",this.blurEventHandler,!1),this.blurEventHandler=null),console.log("üéØ Roam Memo: ÁÑ¶ÁÇπÁÆ°ÁêÜÂô®Ê∏ÖÁêÜÂÆåÊàê")}}])&&i(e.prototype,r),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),l=s.getInstance();const c=s},1419:(t,e,r)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,o(n.key),n)}}function a(t,e,r){return(e=o(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t){var e=function(t,e){if("object"!=n(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var i=r.call(t,"string");if("object"!=n(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==n(e)?e:String(e)}r.r(e),r.d(e,{default:()=>c,roamZIndexManager:()=>l});var s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,"styleElement",null),a(this,"STYLE_ID","roam-memo-zindex-fix")}var e,r,n;return e=t,n=[{key:"getInstance",value:function(){return t.instance||(t.instance=new t),t.instance}}],(r=[{key:"injectZIndexFix",value:function(){this.styleElement||(this.styleElement=document.createElement("style"),this.styleElement.id=this.STYLE_ID,this.styleElement.type="text/css",this.styleElement.textContent="\n      /*\n       * Roam Research ÂõæÁâáÊÇ¨ÊµÆÁ™óÂè£ÁöÑÂ±ÇÁ∫ßÊèêÂçá\n       * Ëß£ÂÜ≥Ë¢´ Memo Êèí‰ª∂ÈÅÆÊå°ÁöÑÈóÆÈ¢ò\n       */\n      \n      /* ÊèêÂçá Roam ÂõæÁâáÊµÆÂ±ÇÁöÑ Z-index */\n      #rm-modal-portal {\n        z-index: 1002 !important; /* Roam ÂõæÁâáÊµÆÂ±ÇÊï¥‰ΩìÁöÑ z-indexÔºåÊúÄÈ´ò */\n      }\n      \n      #rm-modal-portal > div > div > div.bp3-dialog-container.bp3-overlay-content > div {\n        z-index: 1001 !important; /* Á°Æ‰øùÂõæÁâáÂÆûÈôÖÂÜÖÂÆπ‰πüÈ´ò */\n      }\n      \n      /* ÊèêÂçá Roam ÂèåÈìæÂºπÂá∫ËèúÂçïÁöÑ Z-index */\n      .rm-autocomplete__results {\n        z-index: 1000 !important; /* ‰ΩøÁî®‰∏Ä‰∏™ÈùûÂ∏∏È´òÁöÑÂÄºÔºåÁ°Æ‰øùÊòæÁ§∫Âú®ÊâÄÊúâÂÖ∂‰ªñÂÖÉÁ¥†‰πã‰∏ä */\n        width: auto !important; /* Ë∞ÉÊï¥‰∏∫Ëá™ÈÄÇÂ∫îÂÆΩÂ∫¶ */\n        max-width: unset !important; /* ÂèñÊ∂àÊúÄÂ§ßÂÆΩÂ∫¶ÈôêÂà∂ */\n        min-width: 150px !important; /* ËÆæÁΩÆÊúÄÂ∞èÂÆΩÂ∫¶ÔºåÈò≤Ê≠¢ËøáÁ™Ñ */\n      }\n      \n             /* ÊèêÂçáÂÖ∂‰ªñÂèØËÉΩË¢´ÈÅÆÊå°ÁöÑ Roam UI ÂÖÉÁ¥† */\n       .bp3-popover {\n         z-index: 999 !important;\n       }\n       \n       .bp3-tooltip {\n         z-index: 998 !important;\n       }\n    ",document.head.appendChild(this.styleElement),console.log("üîß Roam Memo: Z-index fix Â∑≤ÊøÄÊ¥ª"))}},{key:"removeZIndexFix",value:function(){this.styleElement&&(document.head.removeChild(this.styleElement),this.styleElement=null,console.log("üîß Roam Memo: Z-index fix Â∑≤ÁßªÈô§"))}},{key:"isFixActive",value:function(){return null!==this.styleElement}},{key:"toggleZIndexFix",value:function(){this.isFixActive()?this.removeZIndexFix():this.injectZIndexFix()}}])&&i(e.prototype,r),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),l=s.getInstance();const c=s},3193:(t,e,r)=>{t.exports={default:r(4734),__esModule:!0}},1156:(t,e,r)=>{t.exports={default:r(8271),__esModule:!0}},9829:(t,e,r)=>{t.exports={default:r(2696),__esModule:!0}},6007:(t,e,r)=>{t.exports={default:r(2160),__esModule:!0}},5971:(t,e,r)=>{t.exports={default:r(1724),__esModule:!0}},5522:(t,e,r)=>{t.exports={default:r(6560),__esModule:!0}},6327:(t,e,r)=>{t.exports={default:r(4220),__esModule:!0}},9506:(t,e)=>{e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},7588:(t,e,r)=>{e.__esModule=!0;var n,i=(n=r(9829))&&n.__esModule?n:{default:n};e.default=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,i.default)(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}()},5505:(t,e,r)=>{e.__esModule=!0;var n,i=(n=r(3193))&&n.__esModule?n:{default:n};e.default=i.default||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}},7714:(t,e,r)=>{e.__esModule=!0;var n=o(r(5971)),i=o(r(1156)),a=o(r(7479));function o(t){return t&&t.__esModule?t:{default:t}}e.default=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+(void 0===e?"undefined":(0,a.default)(e)));t.prototype=(0,i.default)(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(n.default?(0,n.default)(t,e):t.__proto__=e)}},539:(t,e,r)=>{e.__esModule=!0;var n,i=(n=r(7479))&&n.__esModule?n:{default:n};e.default=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!==(void 0===e?"undefined":(0,i.default)(e))&&"function"!=typeof e?t:e}},7479:(t,e,r)=>{e.__esModule=!0;var n=o(r(6327)),i=o(r(5522)),a="function"==typeof i.default&&"symbol"==typeof n.default?function(t){return typeof t}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":typeof t};function o(t){return t&&t.__esModule?t:{default:t}}e.default="function"==typeof i.default&&"symbol"===a(n.default)?function(t){return void 0===t?"undefined":a(t)}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":void 0===t?"undefined":a(t)}},4734:(t,e,r)=>{r(3758),t.exports=r(6438).Object.assign},8271:(t,e,r)=>{r(1951);var n=r(6438).Object;t.exports=function(t,e){return n.create(t,e)}},2696:(t,e,r)=>{r(4712);var n=r(6438).Object;t.exports=function(t,e,r){return n.defineProperty(t,e,r)}},2160:(t,e,r)=>{r(8128),t.exports=r(6438).Object.getPrototypeOf},1724:(t,e,r)=>{r(4284),t.exports=r(6438).Object.setPrototypeOf},6560:(t,e,r)=>{r(9626),r(8978),r(2860),r(716),t.exports=r(6438).Symbol},4220:(t,e,r)=>{r(7863),r(7914),t.exports=r(4336).f("iterator")},5219:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},2560:t=>{t.exports=function(){}},812:(t,e,r)=>{var n=r(4401);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},4448:(t,e,r)=>{var n=r(5133),i=r(181),a=r(2917);t.exports=function(t){return function(e,r,o){var s,l=n(e),c=i(l.length),u=a(o,c);if(t&&r!=r){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((t||u in l)&&l[u]===r)return t||u||0;return!t&&-1}}},3417:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},6438:t=>{var e=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=e)},8852:(t,e,r)=>{var n=r(5219);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},7608:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},8219:(t,e,r)=>{t.exports=!r(1984)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},3802:(t,e,r)=>{var n=r(4401),i=r(6670).document,a=n(i)&&n(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},7956:t=>{t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},6473:(t,e,r)=>{var n=r(4311),i=r(9820),a=r(6569);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var o,s=r(t),l=a.f,c=0;s.length>c;)l.call(t,o=s[c++])&&e.push(o);return e}},8535:(t,e,r)=>{var n=r(6670),i=r(6438),a=r(8852),o=r(2677),s=r(5509),l="prototype",c=function(t,e,r){var u,h,f,p=t&c.F,d=t&c.G,m=t&c.S,y=t&c.P,v=t&c.B,g=t&c.W,b=d?i:i[e]||(i[e]={}),x=b[l],w=d?n:m?n[e]:(n[e]||{})[l];for(u in d&&(r=e),r)(h=!p&&w&&void 0!==w[u])&&s(b,u)||(f=h?w[u]:r[u],b[u]=d&&"function"!=typeof w[u]?r[u]:v&&h?a(f,n):g&&w[u]==f?function(t){var e=function(e,r,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,r)}return new t(e,r,n)}return t.apply(this,arguments)};return e[l]=t[l],e}(f):y&&"function"==typeof f?a(Function.call,f):f,y&&((b.virtual||(b.virtual={}))[u]=f,t&c.R&&x&&!x[u]&&o(x,u,f)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},1984:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},6670:t=>{var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},5509:t=>{var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},2677:(t,e,r)=>{var n=r(8423),i=r(6260);t.exports=r(8219)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},3879:(t,e,r)=>{var n=r(6670).document;t.exports=n&&n.documentElement},2484:(t,e,r)=>{t.exports=!r(8219)&&!r(1984)((function(){return 7!=Object.defineProperty(r(3802)("div"),"a",{get:function(){return 7}}).a}))},7001:(t,e,r)=>{var n=r(3417);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},5461:(t,e,r)=>{var n=r(3417);t.exports=Array.isArray||function(t){return"Array"==n(t)}},4401:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},8248:(t,e,r)=>{var n=r(2087),i=r(6260),a=r(1356),o={};r(2677)(o,r(254)("iterator"),(function(){return this})),t.exports=function(t,e,r){t.prototype=n(o,{next:i(1,r)}),a(t,e+" Iterator")}},8839:(t,e,r)=>{var n=r(4742),i=r(8535),a=r(1331),o=r(2677),s=r(210),l=r(8248),c=r(1356),u=r(6123),h=r(254)("iterator"),f=!([].keys&&"next"in[].keys()),p="keys",d="values",m=function(){return this};t.exports=function(t,e,r,y,v,g,b){l(r,e,y);var x,w,E,k=function(t){if(!f&&t in C)return C[t];switch(t){case p:case d:return function(){return new r(this,t)}}return function(){return new r(this,t)}},S=e+" Iterator",P=v==d,_=!1,C=t.prototype,A=C[h]||C["@@iterator"]||v&&C[v],T=A||k(v),M=v?P?k("entries"):T:void 0,D="Array"==e&&C.entries||A;if(D&&(E=u(D.call(new t)))!==Object.prototype&&E.next&&(c(E,S,!0),n||"function"==typeof E[h]||o(E,h,m)),P&&A&&A.name!==d&&(_=!0,T=function(){return A.call(this)}),n&&!b||!f&&!_&&C[h]||o(C,h,T),s[e]=T,s[S]=m,v)if(x={values:P?T:k(d),keys:g?T:k(p),entries:M},b)for(w in x)w in C||a(C,w,x[w]);else i(i.P+i.F*(f||_),e,x);return x}},322:t=>{t.exports=function(t,e){return{value:e,done:!!t}}},210:t=>{t.exports={}},4742:t=>{t.exports=!0},5172:(t,e,r)=>{var n=r(9191)("meta"),i=r(4401),a=r(5509),o=r(8423).f,s=0,l=Object.isExtensible||function(){return!0},c=!r(1984)((function(){return l(Object.preventExtensions({}))})),u=function(t){o(t,n,{value:{i:"O"+ ++s,w:{}}})},h=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!a(t,n)){if(!l(t))return"F";if(!e)return"E";u(t)}return t[n].i},getWeak:function(t,e){if(!a(t,n)){if(!l(t))return!0;if(!e)return!1;u(t)}return t[n].w},onFreeze:function(t){return c&&h.NEED&&l(t)&&!a(t,n)&&u(t),t}}},6854:(t,e,r)=>{var n=r(8219),i=r(4311),a=r(9820),o=r(6569),s=r(6310),l=r(7001),c=Object.assign;t.exports=!c||r(1984)((function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach((function(t){e[t]=t})),7!=c({},t)[r]||Object.keys(c({},e)).join("")!=n}))?function(t,e){for(var r=s(t),c=arguments.length,u=1,h=a.f,f=o.f;c>u;)for(var p,d=l(arguments[u++]),m=h?i(d).concat(h(d)):i(d),y=m.length,v=0;y>v;)p=m[v++],n&&!f.call(d,p)||(r[p]=d[p]);return r}:c},2087:(t,e,r)=>{var n=r(812),i=r(82),a=r(7956),o=r(4566)("IE_PROTO"),s=function(){},l="prototype",c=function(){var t,e=r(3802)("iframe"),n=a.length;for(e.style.display="none",r(3879).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;n--;)delete c[l][a[n]];return c()};t.exports=Object.create||function(t,e){var r;return null!==t?(s[l]=n(t),r=new s,s[l]=null,r[o]=t):r=c(),void 0===e?r:i(r,e)}},8423:(t,e,r)=>{var n=r(812),i=r(2484),a=r(752),o=Object.defineProperty;e.f=r(8219)?Object.defineProperty:function(t,e,r){if(n(t),e=a(e,!0),n(r),i)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},82:(t,e,r)=>{var n=r(8423),i=r(812),a=r(4311);t.exports=r(8219)?Object.defineProperties:function(t,e){i(t);for(var r,o=a(e),s=o.length,l=0;s>l;)n.f(t,r=o[l++],e[r]);return t}},1033:(t,e,r)=>{var n=r(6569),i=r(6260),a=r(5133),o=r(752),s=r(5509),l=r(2484),c=Object.getOwnPropertyDescriptor;e.f=r(8219)?c:function(t,e){if(t=a(t),e=o(e,!0),l)try{return c(t,e)}catch(t){}if(s(t,e))return i(!n.f.call(t,e),t[e])}},6309:(t,e,r)=>{var n=r(5133),i=r(1743).f,a={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==a.call(t)?function(t){try{return i(t)}catch(t){return o.slice()}}(t):i(n(t))}},1743:(t,e,r)=>{var n=r(5081),i=r(7956).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},9820:(t,e)=>{e.f=Object.getOwnPropertySymbols},6123:(t,e,r)=>{var n=r(5509),i=r(6310),a=r(4566)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},5081:(t,e,r)=>{var n=r(5509),i=r(5133),a=r(4448)(!1),o=r(4566)("IE_PROTO");t.exports=function(t,e){var r,s=i(t),l=0,c=[];for(r in s)r!=o&&n(s,r)&&c.push(r);for(;e.length>l;)n(s,r=e[l++])&&(~a(c,r)||c.push(r));return c}},4311:(t,e,r)=>{var n=r(5081),i=r(7956);t.exports=Object.keys||function(t){return n(t,i)}},6569:(t,e)=>{e.f={}.propertyIsEnumerable},7331:(t,e,r)=>{var n=r(8535),i=r(6438),a=r(1984);t.exports=function(t,e){var r=(i.Object||{})[t]||Object[t],o={};o[t]=e(r),n(n.S+n.F*a((function(){r(1)})),"Object",o)}},6260:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},1331:(t,e,r)=>{t.exports=r(2677)},2074:(t,e,r)=>{var n=r(4401),i=r(812),a=function(t,e){if(i(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(8852)(Function.call,r(1033).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return a(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:a}},1356:(t,e,r)=>{var n=r(8423).f,i=r(5509),a=r(254)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,a)&&n(t,a,{configurable:!0,value:e})}},4566:(t,e,r)=>{var n=r(6308)("keys"),i=r(9191);t.exports=function(t){return n[t]||(n[t]=i(t))}},6308:(t,e,r)=>{var n=r(6438),i=r(6670),a="__core-js_shared__",o=i[a]||(i[a]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(4742)?"pure":"global",copyright:"¬© 2020 Denis Pushkarev (zloirock.ru)"})},3172:(t,e,r)=>{var n=r(9383),i=r(7608);t.exports=function(t){return function(e,r){var a,o,s=String(i(e)),l=n(r),c=s.length;return l<0||l>=c?t?"":void 0:(a=s.charCodeAt(l))<55296||a>56319||l+1===c||(o=s.charCodeAt(l+1))<56320||o>57343?t?s.charAt(l):a:t?s.slice(l,l+2):o-56320+(a-55296<<10)+65536}}},2917:(t,e,r)=>{var n=r(9383),i=Math.max,a=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):a(t,e)}},9383:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},5133:(t,e,r)=>{var n=r(7001),i=r(7608);t.exports=function(t){return n(i(t))}},181:(t,e,r)=>{var n=r(9383),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},6310:(t,e,r)=>{var n=r(7608);t.exports=function(t){return Object(n(t))}},752:(t,e,r)=>{var n=r(4401);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},9191:t=>{var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},7816:(t,e,r)=>{var n=r(6670),i=r(6438),a=r(4742),o=r(4336),s=r(8423).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=a?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:o.f(t)})}},4336:(t,e,r)=>{e.f=r(254)},254:(t,e,r)=>{var n=r(6308)("wks"),i=r(9191),a=r(6670).Symbol,o="function"==typeof a;(t.exports=function(t){return n[t]||(n[t]=o&&a[t]||(o?a:i)("Symbol."+t))}).store=n},2293:(t,e,r)=>{var n=r(2560),i=r(322),a=r(210),o=r(5133);t.exports=r(8839)(Array,"Array",(function(t,e){this._t=o(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])}),"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},3758:(t,e,r)=>{var n=r(8535);n(n.S+n.F,"Object",{assign:r(6854)})},1951:(t,e,r)=>{var n=r(8535);n(n.S,"Object",{create:r(2087)})},4712:(t,e,r)=>{var n=r(8535);n(n.S+n.F*!r(8219),"Object",{defineProperty:r(8423).f})},8128:(t,e,r)=>{var n=r(6310),i=r(6123);r(7331)("getPrototypeOf",(function(){return function(t){return i(n(t))}}))},4284:(t,e,r)=>{var n=r(8535);n(n.S,"Object",{setPrototypeOf:r(2074).set})},8978:()=>{},7863:(t,e,r)=>{var n=r(3172)(!0);r(8839)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})}))},9626:(t,e,r)=>{var n=r(6670),i=r(5509),a=r(8219),o=r(8535),s=r(1331),l=r(5172).KEY,c=r(1984),u=r(6308),h=r(1356),f=r(9191),p=r(254),d=r(4336),m=r(7816),y=r(6473),v=r(5461),g=r(812),b=r(4401),x=r(6310),w=r(5133),E=r(752),k=r(6260),S=r(2087),P=r(6309),_=r(1033),C=r(9820),A=r(8423),T=r(4311),M=_.f,D=A.f,L=P.f,O=n.Symbol,F=n.JSON,I=F&&F.stringify,j="prototype",N=p("_hidden"),R=p("toPrimitive"),B={}.propertyIsEnumerable,G=u("symbol-registry"),V=u("symbols"),z=u("op-symbols"),H=Object[j],$="function"==typeof O&&!!C.f,U=n.QObject,q=!U||!U[j]||!U[j].findChild,W=a&&c((function(){return 7!=S(D({},"a",{get:function(){return D(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=M(H,e);n&&delete H[e],D(t,e,r),n&&t!==H&&D(H,e,n)}:D,Y=function(t){var e=V[t]=S(O[j]);return e._k=t,e},X=$&&"symbol"==typeof O.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof O},J=function(t,e,r){return t===H&&J(z,e,r),g(t),e=E(e,!0),g(r),i(V,e)?(r.enumerable?(i(t,N)&&t[N][e]&&(t[N][e]=!1),r=S(r,{enumerable:k(0,!1)})):(i(t,N)||D(t,N,k(1,{})),t[N][e]=!0),W(t,e,r)):D(t,e,r)},K=function(t,e){g(t);for(var r,n=y(e=w(e)),i=0,a=n.length;a>i;)J(t,r=n[i++],e[r]);return t},Z=function(t){var e=B.call(this,t=E(t,!0));return!(this===H&&i(V,t)&&!i(z,t))&&(!(e||!i(this,t)||!i(V,t)||i(this,N)&&this[N][t])||e)},Q=function(t,e){if(t=w(t),e=E(e,!0),t!==H||!i(V,e)||i(z,e)){var r=M(t,e);return!r||!i(V,e)||i(t,N)&&t[N][e]||(r.enumerable=!0),r}},tt=function(t){for(var e,r=L(w(t)),n=[],a=0;r.length>a;)i(V,e=r[a++])||e==N||e==l||n.push(e);return n},et=function(t){for(var e,r=t===H,n=L(r?z:w(t)),a=[],o=0;n.length>o;)!i(V,e=n[o++])||r&&!i(H,e)||a.push(V[e]);return a};$||(s((O=function(){if(this instanceof O)throw TypeError("Symbol is not a constructor!");var t=f(arguments.length>0?arguments[0]:void 0),e=function(r){this===H&&e.call(z,r),i(this,N)&&i(this[N],t)&&(this[N][t]=!1),W(this,t,k(1,r))};return a&&q&&W(H,t,{configurable:!0,set:e}),Y(t)})[j],"toString",(function(){return this._k})),_.f=Q,A.f=J,r(1743).f=P.f=tt,r(6569).f=Z,C.f=et,a&&!r(4742)&&s(H,"propertyIsEnumerable",Z,!0),d.f=function(t){return Y(p(t))}),o(o.G+o.W+o.F*!$,{Symbol:O});for(var rt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;rt.length>nt;)p(rt[nt++]);for(var it=T(p.store),at=0;it.length>at;)m(it[at++]);o(o.S+o.F*!$,"Symbol",{for:function(t){return i(G,t+="")?G[t]:G[t]=O(t)},keyFor:function(t){if(!X(t))throw TypeError(t+" is not a symbol!");for(var e in G)if(G[e]===t)return e},useSetter:function(){q=!0},useSimple:function(){q=!1}}),o(o.S+o.F*!$,"Object",{create:function(t,e){return void 0===e?S(t):K(S(t),e)},defineProperty:J,defineProperties:K,getOwnPropertyDescriptor:Q,getOwnPropertyNames:tt,getOwnPropertySymbols:et});var ot=c((function(){C.f(1)}));o(o.S+o.F*ot,"Object",{getOwnPropertySymbols:function(t){return C.f(x(t))}}),F&&o(o.S+o.F*(!$||c((function(){var t=O();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))}))),"JSON",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(b(e)||void 0!==t)&&!X(t))return v(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!X(e))return e}),n[1]=e,I.apply(F,n)}}),O[j][R]||r(2677)(O[j],R,O[j].valueOf),h(O,"Symbol"),h(Math,"Math",!0),h(n.JSON,"JSON",!0)},2860:(t,e,r)=>{r(7816)("asyncIterator")},716:(t,e,r)=>{r(7816)("observable")},7914:(t,e,r)=>{r(2293);for(var n=r(6670),i=r(2677),a=r(210),o=r(254)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),l=0;l<s.length;l++){var c=s[l],u=n[c],h=u&&u.prototype;h&&!h[o]&&i(h,o,c),a[c]=a.Array}},4353:function(t){t.exports=function(){var t=6e4,e=36e5,r="millisecond",n="second",i="minute",a="hour",o="day",s="week",l="month",c="quarter",u="year",h="date",f="Invalid Date",p=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,d=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,m={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(t){var e=["th","st","nd","rd"],r=t%100;return"["+t+(e[(r-20)%10]||e[r]||e[0])+"]"}},y=function(t,e,r){var n=String(t);return!n||n.length>=e?t:""+Array(e+1-n.length).join(r)+t},v={s:y,z:function(t){var e=-t.utcOffset(),r=Math.abs(e),n=Math.floor(r/60),i=r%60;return(e<=0?"+":"-")+y(n,2,"0")+":"+y(i,2,"0")},m:function t(e,r){if(e.date()<r.date())return-t(r,e);var n=12*(r.year()-e.year())+(r.month()-e.month()),i=e.clone().add(n,l),a=r-i<0,o=e.clone().add(n+(a?-1:1),l);return+(-(n+(r-i)/(a?i-o:o-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:l,y:u,w:s,d:o,D:h,h:a,m:i,s:n,ms:r,Q:c}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},g="en",b={};b[g]=m;var x="$isDayjsObject",w=function(t){return t instanceof P||!(!t||!t[x])},E=function t(e,r,n){var i;if(!e)return g;if("string"==typeof e){var a=e.toLowerCase();b[a]&&(i=a),r&&(b[a]=r,i=a);var o=e.split("-");if(!i&&o.length>1)return t(o[0])}else{var s=e.name;b[s]=e,i=s}return!n&&i&&(g=i),i||!n&&g},k=function(t,e){if(w(t))return t.clone();var r="object"==typeof e?e:{};return r.date=t,r.args=arguments,new P(r)},S=v;S.l=E,S.i=w,S.w=function(t,e){return k(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var P=function(){function m(t){this.$L=E(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[x]=!0}var y=m.prototype;return y.parse=function(t){this.$d=function(t){var e=t.date,r=t.utc;if(null===e)return new Date(NaN);if(S.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var n=e.match(p);if(n){var i=n[2]-1||0,a=(n[7]||"0").substring(0,3);return r?new Date(Date.UTC(n[1],i,n[3]||1,n[4]||0,n[5]||0,n[6]||0,a)):new Date(n[1],i,n[3]||1,n[4]||0,n[5]||0,n[6]||0,a)}}return new Date(e)}(t),this.init()},y.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},y.$utils=function(){return S},y.isValid=function(){return!(this.$d.toString()===f)},y.isSame=function(t,e){var r=k(t);return this.startOf(e)<=r&&r<=this.endOf(e)},y.isAfter=function(t,e){return k(t)<this.startOf(e)},y.isBefore=function(t,e){return this.endOf(e)<k(t)},y.$g=function(t,e,r){return S.u(t)?this[e]:this.set(r,t)},y.unix=function(){return Math.floor(this.valueOf()/1e3)},y.valueOf=function(){return this.$d.getTime()},y.startOf=function(t,e){var r=this,c=!!S.u(e)||e,f=S.p(t),p=function(t,e){var n=S.w(r.$u?Date.UTC(r.$y,e,t):new Date(r.$y,e,t),r);return c?n:n.endOf(o)},d=function(t,e){return S.w(r.toDate()[t].apply(r.toDate("s"),(c?[0,0,0,0]:[23,59,59,999]).slice(e)),r)},m=this.$W,y=this.$M,v=this.$D,g="set"+(this.$u?"UTC":"");switch(f){case u:return c?p(1,0):p(31,11);case l:return c?p(1,y):p(0,y+1);case s:var b=this.$locale().weekStart||0,x=(m<b?m+7:m)-b;return p(c?v-x:v+(6-x),y);case o:case h:return d(g+"Hours",0);case a:return d(g+"Minutes",1);case i:return d(g+"Seconds",2);case n:return d(g+"Milliseconds",3);default:return this.clone()}},y.endOf=function(t){return this.startOf(t,!1)},y.$set=function(t,e){var s,c=S.p(t),f="set"+(this.$u?"UTC":""),p=(s={},s[o]=f+"Date",s[h]=f+"Date",s[l]=f+"Month",s[u]=f+"FullYear",s[a]=f+"Hours",s[i]=f+"Minutes",s[n]=f+"Seconds",s[r]=f+"Milliseconds",s)[c],d=c===o?this.$D+(e-this.$W):e;if(c===l||c===u){var m=this.clone().set(h,1);m.$d[p](d),m.init(),this.$d=m.set(h,Math.min(this.$D,m.daysInMonth())).$d}else p&&this.$d[p](d);return this.init(),this},y.set=function(t,e){return this.clone().$set(t,e)},y.get=function(t){return this[S.p(t)]()},y.add=function(r,c){var h,f=this;r=Number(r);var p=S.p(c),d=function(t){var e=k(f);return S.w(e.date(e.date()+Math.round(t*r)),f)};if(p===l)return this.set(l,this.$M+r);if(p===u)return this.set(u,this.$y+r);if(p===o)return d(1);if(p===s)return d(7);var m=(h={},h[i]=t,h[a]=e,h[n]=1e3,h)[p]||1,y=this.$d.getTime()+r*m;return S.w(y,this)},y.subtract=function(t,e){return this.add(-1*t,e)},y.format=function(t){var e=this,r=this.$locale();if(!this.isValid())return r.invalidDate||f;var n=t||"YYYY-MM-DDTHH:mm:ssZ",i=S.z(this),a=this.$H,o=this.$m,s=this.$M,l=r.weekdays,c=r.months,u=r.meridiem,h=function(t,r,i,a){return t&&(t[r]||t(e,n))||i[r].slice(0,a)},p=function(t){return S.s(a%12||12,t,"0")},m=u||function(t,e,r){var n=t<12?"AM":"PM";return r?n.toLowerCase():n};return n.replace(d,(function(t,n){return n||function(t){switch(t){case"YY":return String(e.$y).slice(-2);case"YYYY":return S.s(e.$y,4,"0");case"M":return s+1;case"MM":return S.s(s+1,2,"0");case"MMM":return h(r.monthsShort,s,c,3);case"MMMM":return h(c,s);case"D":return e.$D;case"DD":return S.s(e.$D,2,"0");case"d":return String(e.$W);case"dd":return h(r.weekdaysMin,e.$W,l,2);case"ddd":return h(r.weekdaysShort,e.$W,l,3);case"dddd":return l[e.$W];case"H":return String(a);case"HH":return S.s(a,2,"0");case"h":return p(1);case"hh":return p(2);case"a":return m(a,o,!0);case"A":return m(a,o,!1);case"m":return String(o);case"mm":return S.s(o,2,"0");case"s":return String(e.$s);case"ss":return S.s(e.$s,2,"0");case"SSS":return S.s(e.$ms,3,"0");case"Z":return i}return null}(t)||i.replace(":","")}))},y.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},y.diff=function(r,h,f){var p,d=this,m=S.p(h),y=k(r),v=(y.utcOffset()-this.utcOffset())*t,g=this-y,b=function(){return S.m(d,y)};switch(m){case u:p=b()/12;break;case l:p=b();break;case c:p=b()/3;break;case s:p=(g-v)/6048e5;break;case o:p=(g-v)/864e5;break;case a:p=g/e;break;case i:p=g/t;break;case n:p=g/1e3;break;default:p=g}return f?p:S.a(p)},y.daysInMonth=function(){return this.endOf(l).$D},y.$locale=function(){return b[this.$L]},y.locale=function(t,e){if(!t)return this.$L;var r=this.clone(),n=E(t,e,!0);return n&&(r.$L=n),r},y.clone=function(){return S.w(this.$d,this)},y.toDate=function(){return new Date(this.valueOf())},y.toJSON=function(){return this.isValid()?this.toISOString():null},y.toISOString=function(){return this.$d.toISOString()},y.toString=function(){return this.$d.toUTCString()},m}(),_=P.prototype;return k.prototype=_,[["$ms",r],["$s",n],["$m",i],["$H",a],["$W",o],["$M",l],["$y",u],["$D",h]].forEach((function(t){_[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),k.extend=function(t,e){return t.$i||(t(e,P,k),t.$i=!0),k},k.locale=E,k.isDayjs=w,k.unix=function(t){return k(1e3*t)},k.en=b[g],k.Ls=b,k.p={},k}()},8720:function(t){t.exports=function(t,e,r){var n="h:mm A",i={lastDay:"[Yesterday at] "+n,sameDay:"[Today at] "+n,nextDay:"[Tomorrow at] "+n,nextWeek:"dddd [at] "+n,lastWeek:"[Last] dddd [at] "+n,sameElse:"MM/DD/YYYY"};e.prototype.calendar=function(t,e){var n=e||this.$locale().calendar||i,a=r(t||void 0).startOf("d"),o=this.diff(a,"d",!0),s="sameElse",l=o<-6?s:o<-1?"lastWeek":o<0?"lastDay":o<1?"sameDay":o<2?"nextDay":o<7?"nextWeek":s,c=n[l]||i[l];return"function"==typeof c?c.call(this,r()):this.format(c)}}},6279:function(t){t.exports=function(t,e,r){t=t||{};var n=e.prototype,i={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function a(t,e,r,i){return n.fromToBase(t,e,r,i)}r.en.relativeTime=i,n.fromToBase=function(e,n,a,o,s){for(var l,c,u,h=a.$locale().relativeTime||i,f=t.thresholds||[{l:"s",r:44,d:"second"},{l:"m",r:89},{l:"mm",r:44,d:"minute"},{l:"h",r:89},{l:"hh",r:21,d:"hour"},{l:"d",r:35},{l:"dd",r:25,d:"day"},{l:"M",r:45},{l:"MM",r:10,d:"month"},{l:"y",r:17},{l:"yy",d:"year"}],p=f.length,d=0;d<p;d+=1){var m=f[d];m.d&&(l=o?r(e).diff(a,m.d,!0):a.diff(e,m.d,!0));var y=(t.rounding||Math.round)(Math.abs(l));if(u=l>0,y<=m.r||!m.r){y<=1&&d>0&&(m=f[d-1]);var v=h[m.l];s&&(y=s(""+y)),c="string"==typeof v?v.replace("%d",y):v(y,n,m.l,u);break}}if(n)return c;var g=u?h.future:h.past;return"function"==typeof g?g(c):g.replace("%s",c)},n.to=function(t,e){return a(t,e,this,!0)},n.from=function(t,e){return a(t,e,this)};var o=function(t){return t.$u?r.utc():r()};n.toNow=function(t){return this.to(o(this),t)},n.fromNow=function(t){return this.from(o(this),t)}}},9891:function(module,exports,__webpack_require__){var factory;"undefined"!=typeof navigator&&(factory=function(){var svgNS="http://www.w3.org/2000/svg",locationHref="",_useWebWorker=!1,initialDefaultFrame=-999999,setWebWorker=function(t){_useWebWorker=!!t},getWebWorker=function(){return _useWebWorker},setLocationHref=function(t){locationHref=t},getLocationHref=function(){return locationHref};function createTag(t){return document.createElement(t)}function extendPrototype(t,e){var r,n,i=t.length;for(r=0;r<i;r+=1)for(var a in n=t[r].prototype)Object.prototype.hasOwnProperty.call(n,a)&&(e.prototype[a]=n[a])}function getDescriptor(t,e){return Object.getOwnPropertyDescriptor(t,e)}function createProxyFunction(t){function e(){}return e.prototype=t,e}var audioControllerFactory=function(){function t(t){this.audios=[],this.audioFactory=t,this._volume=1,this._isMuted=!1}return t.prototype={addAudio:function(t){this.audios.push(t)},pause:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].pause()},resume:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].resume()},setRate:function(t){var e,r=this.audios.length;for(e=0;e<r;e+=1)this.audios[e].setRate(t)},createAudio:function(t){return this.audioFactory?this.audioFactory(t):window.Howl?new window.Howl({src:[t]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(t){this.audioFactory=t},setVolume:function(t){this._volume=t,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].volume(this._volume*(this._isMuted?0:1))}},function(){return new t}}(),createTypedArray=function(){function t(t,e){var r,n=0,i=[];switch(t){case"int16":case"uint8c":r=1;break;default:r=1.1}for(n=0;n<e;n+=1)i.push(r);return i}return"function"==typeof Uint8ClampedArray&&"function"==typeof Float32Array?function(e,r){return"float32"===e?new Float32Array(r):"int16"===e?new Int16Array(r):"uint8c"===e?new Uint8ClampedArray(r):t(e,r)}:t}();function createSizedArray(t){return Array.apply(null,{length:t})}function _typeof$6(t){return _typeof$6="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$6(t)}var subframeEnabled=!0,expressionsPlugin=null,expressionsInterfaces=null,idPrefix$1="",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),_shouldRoundValues=!1,bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};function ProjectInterface$1(){return{}}!function(){var t,e=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],r=e.length;for(t=0;t<r;t+=1)BMMath[e[t]]=Math[e[t]]}(),BMMath.random=Math.random,BMMath.abs=function(t){if("object"===_typeof$6(t)&&t.length){var e,r=createSizedArray(t.length),n=t.length;for(e=0;e<n;e+=1)r[e]=Math.abs(t[e]);return r}return Math.abs(t)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function roundValues(t){_shouldRoundValues=!!t}function bmRnd(t){return _shouldRoundValues?Math.round(t):t}function styleDiv(t){t.style.position="absolute",t.style.top=0,t.style.left=0,t.style.display="block",t.style.transformOrigin="0 0",t.style.webkitTransformOrigin="0 0",t.style.backfaceVisibility="visible",t.style.webkitBackfaceVisibility="visible",t.style.transformStyle="preserve-3d",t.style.webkitTransformStyle="preserve-3d",t.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(t,e,r,n){this.type=t,this.currentTime=e,this.totalTime=r,this.direction=n<0?-1:1}function BMCompleteEvent(t,e){this.type=t,this.direction=e<0?-1:1}function BMCompleteLoopEvent(t,e,r,n){this.type=t,this.currentLoop=r,this.totalLoops=e,this.direction=n<0?-1:1}function BMSegmentStartEvent(t,e,r){this.type=t,this.firstFrame=e,this.totalFrames=r}function BMDestroyEvent(t,e){this.type=t,this.target=e}function BMRenderFrameErrorEvent(t,e){this.type="renderFrameError",this.nativeError=t,this.currentTime=e}function BMConfigErrorEvent(t){this.type="configError",this.nativeError=t}function BMAnimationConfigErrorEvent(t,e){this.type=t,this.nativeError=e}var createElementID=(_count=0,function(){return idPrefix$1+"__lottie_element_"+(_count+=1)}),_count;function HSVtoRGB(t,e,r){var n,i,a,o,s,l,c,u;switch(l=r*(1-e),c=r*(1-(s=6*t-(o=Math.floor(6*t)))*e),u=r*(1-(1-s)*e),o%6){case 0:n=r,i=u,a=l;break;case 1:n=c,i=r,a=l;break;case 2:n=l,i=r,a=u;break;case 3:n=l,i=c,a=r;break;case 4:n=u,i=l,a=r;break;case 5:n=r,i=l,a=c}return[n,i,a]}function RGBtoHSV(t,e,r){var n,i=Math.max(t,e,r),a=Math.min(t,e,r),o=i-a,s=0===i?0:o/i,l=i/255;switch(i){case a:n=0;break;case t:n=e-r+o*(e<r?6:0),n/=6*o;break;case e:n=r-t+2*o,n/=6*o;break;case r:n=t-e+4*o,n/=6*o}return[n,s,l]}function addSaturationToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[1]+=e,r[1]>1?r[1]=1:r[1]<=0&&(r[1]=0),HSVtoRGB(r[0],r[1],r[2])}function addBrightnessToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[2]+=e,r[2]>1?r[2]=1:r[2]<0&&(r[2]=0),HSVtoRGB(r[0],r[1],r[2])}function addHueToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[0]+=e/360,r[0]>1?r[0]-=1:r[0]<0&&(r[0]+=1),HSVtoRGB(r[0],r[1],r[2])}var rgbToHex=function(){var t,e,r=[];for(t=0;t<256;t+=1)e=t.toString(16),r[t]=1===e.length?"0"+e:e;return function(t,e,n){return t<0&&(t=0),e<0&&(e=0),n<0&&(n=0),"#"+r[t]+r[e]+r[n]}}(),setSubframeEnabled=function(t){subframeEnabled=!!t},getSubframeEnabled=function(){return subframeEnabled},setExpressionsPlugin=function(t){expressionsPlugin=t},getExpressionsPlugin=function(){return expressionsPlugin},setExpressionInterfaces=function(t){expressionsInterfaces=t},getExpressionInterfaces=function(){return expressionsInterfaces},setDefaultCurveSegments=function(t){defaultCurveSegments=t},getDefaultCurveSegments=function(){return defaultCurveSegments},setIdPrefix=function(t){idPrefix$1=t},getIdPrefix=function(){return idPrefix$1};function createNS(t){return document.createElementNS(svgNS,t)}function _typeof$5(t){return _typeof$5="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$5(t)}var dataManager=function(){var t,e,r=1,n=[],i={onmessage:function(){},postMessage:function(e){t({data:e})}},a={postMessage:function(t){i.onmessage({data:t})}};function o(){e||(e=function(e){if(window.Worker&&window.Blob&&getWebWorker()){var r=new Blob(["var _workerSelf = self; self.onmessage = ",e.toString()],{type:"text/javascript"}),n=URL.createObjectURL(r);return new Worker(n)}return t=e,i}((function(t){if(a.dataManager||(a.dataManager=function(){function t(i,a){var o,s,l,c,u,h,f,p=i.length;for(s=0;s<p;s+=1)if("ks"in(o=i[s])&&!o.completed){if(o.completed=!0,o.hasMask){var d=o.masksProperties;for(c=d.length,l=0;l<c;l+=1)if(d[l].pt.k.i)n(d[l].pt.k);else for(h=d[l].pt.k.length,u=0;u<h;u+=1)d[l].pt.k[u].s&&n(d[l].pt.k[u].s[0]),d[l].pt.k[u].e&&n(d[l].pt.k[u].e[0])}0===o.ty?(o.layers=e(o.refId,a),t(o.layers,a)):4===o.ty?r(o.shapes):5===o.ty&&(0===(f=o).t.a.length&&f.t.p)}}function e(t,e){var r=function(t,e){for(var r=0,n=e.length;r<n;){if(e[r].id===t)return e[r];r+=1}return null}(t,e);return r?r.layers.__used?JSON.parse(JSON.stringify(r.layers)):(r.layers.__used=!0,r.layers):null}function r(t){var e,i,a;for(e=t.length-1;e>=0;e-=1)if("sh"===t[e].ty)if(t[e].ks.k.i)n(t[e].ks.k);else for(a=t[e].ks.k.length,i=0;i<a;i+=1)t[e].ks.k[i].s&&n(t[e].ks.k[i].s[0]),t[e].ks.k[i].e&&n(t[e].ks.k[i].e[0]);else"gr"===t[e].ty&&r(t[e].it)}function n(t){var e,r=t.i.length;for(e=0;e<r;e+=1)t.i[e][0]+=t.v[e][0],t.i[e][1]+=t.v[e][1],t.o[e][0]+=t.v[e][0],t.o[e][1]+=t.v[e][1]}function i(t,e){var r=e?e.split("."):[100,100,100];return t[0]>r[0]||!(r[0]>t[0])&&(t[1]>r[1]||!(r[1]>t[1])&&(t[2]>r[2]||!(r[2]>t[2])&&null))}var a,o=function(){var t=[4,4,14];function e(t){var e,r,n,i=t.length;for(e=0;e<i;e+=1)5===t[e].ty&&(void 0,n=(r=t[e]).t.d,r.t.d={k:[{s:n,t:0}]})}return function(r){if(i(t,r.v)&&(e(r.layers),r.assets)){var n,a=r.assets.length;for(n=0;n<a;n+=1)r.assets[n].layers&&e(r.assets[n].layers)}}}(),s=(a=[4,7,99],function(t){if(t.chars&&!i(a,t.v)){var e,n=t.chars.length;for(e=0;e<n;e+=1){var o=t.chars[e];o.data&&o.data.shapes&&(r(o.data.shapes),o.data.ip=0,o.data.op=99999,o.data.st=0,o.data.sr=1,o.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}},t.chars[e].t||(o.data.shapes.push({ty:"no"}),o.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:"tr"})))}}}),l=function(){var t=[5,7,15];function e(t){var e,r,n=t.length;for(e=0;e<n;e+=1)5===t[e].ty&&(r=void 0,"number"==typeof(r=t[e].t.p).a&&(r.a={a:0,k:r.a}),"number"==typeof r.p&&(r.p={a:0,k:r.p}),"number"==typeof r.r&&(r.r={a:0,k:r.r}))}return function(r){if(i(t,r.v)&&(e(r.layers),r.assets)){var n,a=r.assets.length;for(n=0;n<a;n+=1)r.assets[n].layers&&e(r.assets[n].layers)}}}(),c=function(){var t=[4,1,9];function e(t){var r,n,i,a=t.length;for(r=0;r<a;r+=1)if("gr"===t[r].ty)e(t[r].it);else if("fl"===t[r].ty||"st"===t[r].ty)if(t[r].c.k&&t[r].c.k[0].i)for(i=t[r].c.k.length,n=0;n<i;n+=1)t[r].c.k[n].s&&(t[r].c.k[n].s[0]/=255,t[r].c.k[n].s[1]/=255,t[r].c.k[n].s[2]/=255,t[r].c.k[n].s[3]/=255),t[r].c.k[n].e&&(t[r].c.k[n].e[0]/=255,t[r].c.k[n].e[1]/=255,t[r].c.k[n].e[2]/=255,t[r].c.k[n].e[3]/=255);else t[r].c.k[0]/=255,t[r].c.k[1]/=255,t[r].c.k[2]/=255,t[r].c.k[3]/=255}function r(t){var r,n=t.length;for(r=0;r<n;r+=1)4===t[r].ty&&e(t[r].shapes)}return function(e){if(i(t,e.v)&&(r(e.layers),e.assets)){var n,a=e.assets.length;for(n=0;n<a;n+=1)e.assets[n].layers&&r(e.assets[n].layers)}}}(),u=function(){var t=[4,4,18];function e(t){var r,n,i;for(r=t.length-1;r>=0;r-=1)if("sh"===t[r].ty)if(t[r].ks.k.i)t[r].ks.k.c=t[r].closed;else for(i=t[r].ks.k.length,n=0;n<i;n+=1)t[r].ks.k[n].s&&(t[r].ks.k[n].s[0].c=t[r].closed),t[r].ks.k[n].e&&(t[r].ks.k[n].e[0].c=t[r].closed);else"gr"===t[r].ty&&e(t[r].it)}function r(t){var r,n,i,a,o,s,l=t.length;for(n=0;n<l;n+=1){if((r=t[n]).hasMask){var c=r.masksProperties;for(a=c.length,i=0;i<a;i+=1)if(c[i].pt.k.i)c[i].pt.k.c=c[i].cl;else for(s=c[i].pt.k.length,o=0;o<s;o+=1)c[i].pt.k[o].s&&(c[i].pt.k[o].s[0].c=c[i].cl),c[i].pt.k[o].e&&(c[i].pt.k[o].e[0].c=c[i].cl)}4===r.ty&&e(r.shapes)}}return function(e){if(i(t,e.v)&&(r(e.layers),e.assets)){var n,a=e.assets.length;for(n=0;n<a;n+=1)e.assets[n].layers&&r(e.assets[n].layers)}}}();var h={completeData:function(r){r.__complete||(c(r),o(r),s(r),l(r),u(r),t(r.layers,r.assets),function(r,n){if(r){var i=0,a=r.length;for(i=0;i<a;i+=1)1===r[i].t&&(r[i].data.layers=e(r[i].data.refId,n),t(r[i].data.layers,n))}}(r.chars,r.assets),r.__complete=!0)}};return h.checkColors=c,h.checkChars=s,h.checkPathProperties=l,h.checkShapes=u,h.completeLayers=t,h}()),a.assetLoader||(a.assetLoader=function(){function t(t){var e=t.getResponseHeader("content-type");return e&&"json"===t.responseType&&-1!==e.indexOf("json")||t.response&&"object"===_typeof$5(t.response)?t.response:t.response&&"string"==typeof t.response?JSON.parse(t.response):t.responseText?JSON.parse(t.responseText):null}return{load:function(e,r,n,i){var a,o=new XMLHttpRequest;try{o.responseType="json"}catch(t){}o.onreadystatechange=function(){if(4===o.readyState)if(200===o.status)a=t(o),n(a);else try{a=t(o),n(a)}catch(t){i&&i(t)}};try{o.open(["G","E","T"].join(""),e,!0)}catch(t){o.open(["G","E","T"].join(""),r+"/"+e,!0)}o.send()}}}()),"loadAnimation"===t.data.type)a.assetLoader.load(t.data.path,t.data.fullPath,(function(e){a.dataManager.completeData(e),a.postMessage({id:t.data.id,payload:e,status:"success"})}),(function(){a.postMessage({id:t.data.id,status:"error"})}));else if("complete"===t.data.type){var e=t.data.animation;a.dataManager.completeData(e),a.postMessage({id:t.data.id,payload:e,status:"success"})}else"loadData"===t.data.type&&a.assetLoader.load(t.data.path,t.data.fullPath,(function(e){a.postMessage({id:t.data.id,payload:e,status:"success"})}),(function(){a.postMessage({id:t.data.id,status:"error"})}))})),e.onmessage=function(t){var e=t.data,r=e.id,i=n[r];n[r]=null,"success"===e.status?i.onComplete(e.payload):i.onError&&i.onError()})}function s(t,e){var i="processId_"+(r+=1);return n[i]={onComplete:t,onError:e},i}return{loadAnimation:function(t,r,n){o();var i=s(r,n);e.postMessage({type:"loadAnimation",path:t,fullPath:window.location.origin+window.location.pathname,id:i})},loadData:function(t,r,n){o();var i=s(r,n);e.postMessage({type:"loadData",path:t,fullPath:window.location.origin+window.location.pathname,id:i})},completeAnimation:function(t,r,n){o();var i=s(r,n);e.postMessage({type:"complete",animation:t,id:i})}}}(),ImagePreloader=function(){var t=function(){var t=createTag("canvas");t.width=1,t.height=1;var e=t.getContext("2d");return e.fillStyle="rgba(0,0,0,0)",e.fillRect(0,0,1,1),t}();function e(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function r(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function n(t,e,r){var n="";if(t.e)n=t.p;else if(e){var i=t.p;-1!==i.indexOf("images/")&&(i=i.split("/")[1]),n=e+i}else n=r,n+=t.u?t.u:"",n+=t.p;return n}function i(t){var e=0,r=setInterval(function(){(t.getBBox().width||e>500)&&(this._imageLoaded(),clearInterval(r)),e+=1}.bind(this),50)}function a(t){var e={assetData:t},r=n(t,this.assetsPath,this.path);return dataManager.loadData(r,function(t){e.img=t,this._footageLoaded()}.bind(this),function(){e.img={},this._footageLoaded()}.bind(this)),e}function o(){this._imageLoaded=e.bind(this),this._footageLoaded=r.bind(this),this.testImageLoaded=i.bind(this),this.createFootageData=a.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return o.prototype={loadAssets:function(t,e){var r;this.imagesLoadedCb=e;var n=t.length;for(r=0;r<n;r+=1)t[r].layers||(t[r].t&&"seq"!==t[r].t?3===t[r].t&&(this.totalFootages+=1,this.images.push(this.createFootageData(t[r]))):(this.totalImages+=1,this.images.push(this._createImageData(t[r]))))},setAssetsPath:function(t){this.assetsPath=t||""},setPath:function(t){this.path=t||""},loadedImages:function(){return this.totalImages===this.loadedAssets},loadedFootages:function(){return this.totalFootages===this.loadedFootagesCount},destroy:function(){this.imagesLoadedCb=null,this.images.length=0},getAsset:function(t){for(var e=0,r=this.images.length;e<r;){if(this.images[e].assetData===t)return this.images[e].img;e+=1}return null},createImgData:function(e){var r=n(e,this.assetsPath,this.path),i=createTag("img");i.crossOrigin="anonymous",i.addEventListener("load",this._imageLoaded,!1),i.addEventListener("error",function(){a.img=t,this._imageLoaded()}.bind(this),!1),i.src=r;var a={img:i,assetData:e};return a},createImageData:function(e){var r=n(e,this.assetsPath,this.path),i=createNS("image");isSafari?this.testImageLoaded(i):i.addEventListener("load",this._imageLoaded,!1),i.addEventListener("error",function(){a.img=t,this._imageLoaded()}.bind(this),!1),i.setAttributeNS("http://www.w3.org/1999/xlink","href",r),this._elementHelper.append?this._elementHelper.append(i):this._elementHelper.appendChild(i);var a={img:i,assetData:e};return a},imageLoaded:e,footageLoaded:r,setCacheType:function(t,e){"svg"===t?(this._elementHelper=e,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}},o}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(t,e){if(this._cbs[t])for(var r=this._cbs[t],n=0;n<r.length;n+=1)r[n](e)},addEventListener:function(t,e){return this._cbs[t]||(this._cbs[t]=[]),this._cbs[t].push(e),function(){this.removeEventListener(t,e)}.bind(this)},removeEventListener:function(t,e){if(e){if(this._cbs[t]){for(var r=0,n=this._cbs[t].length;r<n;)this._cbs[t][r]===e&&(this._cbs[t].splice(r,1),r-=1,n-=1),r+=1;this._cbs[t].length||(this._cbs[t]=null)}}else this._cbs[t]=null}};var markerParser=function(){function t(t){for(var e,r=t.split("\r\n"),n={},i=0,a=0;a<r.length;a+=1)2===(e=r[a].split(":")).length&&(n[e[0]]=e[1].trim(),i+=1);if(0===i)throw new Error;return n}return function(e){for(var r=[],n=0;n<e.length;n+=1){var i=e[n],a={time:i.tm,duration:i.dr};try{a.payload=JSON.parse(e[n].cm)}catch(r){try{a.payload=t(e[n].cm)}catch(t){a.payload={name:e[n].cm}}}r.push(a)}return r}}(),ProjectInterface=function(){function t(t){this.compositions.push(t)}return function(){function e(t){for(var e=0,r=this.compositions.length;e<r;){if(this.compositions[e].data&&this.compositions[e].data.nm===t)return this.compositions[e].prepareFrame&&this.compositions[e].data.xt&&this.compositions[e].prepareFrame(this.currentFrame),this.compositions[e].compInterface;e+=1}return null}return e.compositions=[],e.currentFrame=0,e.registerComposition=t,e}}(),renderers={},registerRenderer=function(t,e){renderers[t]=e};function getRenderer(t){return renderers[t]}function getRegisteredRenderer(){if(renderers.canvas)return"canvas";for(var t in renderers)if(renderers[t])return t;return""}function _typeof$4(t){return _typeof$4="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$4(t)}var AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=getSubframeEnabled(),this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[],this.configAnimation=this.configAnimation.bind(this),this.onSetupError=this.onSetupError.bind(this),this.onSegmentComplete=this.onSegmentComplete.bind(this),this.drawnFrameEvent=new BMEnterFrameEvent("drawnFrame",0,0,0),this.expressionsPlugin=getExpressionsPlugin()};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(t){(t.wrapper||t.container)&&(this.wrapper=t.wrapper||t.container);var e="svg";t.animType?e=t.animType:t.renderer&&(e=t.renderer);var r=getRenderer(e);this.renderer=new r(this,t.rendererSettings),this.imagePreloader.setCacheType(e,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=e,""===t.loop||null===t.loop||void 0===t.loop||!0===t.loop?this.loop=!0:!1===t.loop?this.loop=!1:this.loop=parseInt(t.loop,10),this.autoplay=!("autoplay"in t)||t.autoplay,this.name=t.name?t.name:"",this.autoloadSegments=!Object.prototype.hasOwnProperty.call(t,"autoloadSegments")||t.autoloadSegments,this.assetsPath=t.assetsPath,this.initialSegment=t.initialSegment,t.audioFactory&&this.audioController.setAudioFactory(t.audioFactory),t.animationData?this.setupAnimation(t.animationData):t.path&&(-1!==t.path.lastIndexOf("\\")?this.path=t.path.substr(0,t.path.lastIndexOf("\\")+1):this.path=t.path.substr(0,t.path.lastIndexOf("/")+1),this.fileName=t.path.substr(t.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),dataManager.loadAnimation(t.path,this.configAnimation,this.onSetupError))},AnimationItem.prototype.onSetupError=function(){this.trigger("data_failed")},AnimationItem.prototype.setupAnimation=function(t){dataManager.completeAnimation(t,this.configAnimation)},AnimationItem.prototype.setData=function(t,e){e&&"object"!==_typeof$4(e)&&(e=JSON.parse(e));var r={wrapper:t,animationData:e},n=t.attributes;r.path=n.getNamedItem("data-animation-path")?n.getNamedItem("data-animation-path").value:n.getNamedItem("data-bm-path")?n.getNamedItem("data-bm-path").value:n.getNamedItem("bm-path")?n.getNamedItem("bm-path").value:"",r.animType=n.getNamedItem("data-anim-type")?n.getNamedItem("data-anim-type").value:n.getNamedItem("data-bm-type")?n.getNamedItem("data-bm-type").value:n.getNamedItem("bm-type")?n.getNamedItem("bm-type").value:n.getNamedItem("data-bm-renderer")?n.getNamedItem("data-bm-renderer").value:n.getNamedItem("bm-renderer")?n.getNamedItem("bm-renderer").value:getRegisteredRenderer()||"canvas";var i=n.getNamedItem("data-anim-loop")?n.getNamedItem("data-anim-loop").value:n.getNamedItem("data-bm-loop")?n.getNamedItem("data-bm-loop").value:n.getNamedItem("bm-loop")?n.getNamedItem("bm-loop").value:"";"false"===i?r.loop=!1:"true"===i?r.loop=!0:""!==i&&(r.loop=parseInt(i,10));var a=n.getNamedItem("data-anim-autoplay")?n.getNamedItem("data-anim-autoplay").value:n.getNamedItem("data-bm-autoplay")?n.getNamedItem("data-bm-autoplay").value:!n.getNamedItem("bm-autoplay")||n.getNamedItem("bm-autoplay").value;r.autoplay="false"!==a,r.name=n.getNamedItem("data-name")?n.getNamedItem("data-name").value:n.getNamedItem("data-bm-name")?n.getNamedItem("data-bm-name").value:n.getNamedItem("bm-name")?n.getNamedItem("bm-name").value:"","false"===(n.getNamedItem("data-anim-prerender")?n.getNamedItem("data-anim-prerender").value:n.getNamedItem("data-bm-prerender")?n.getNamedItem("data-bm-prerender").value:n.getNamedItem("bm-prerender")?n.getNamedItem("bm-prerender").value:"")&&(r.prerender=!1),r.path?this.setParams(r):this.trigger("destroy")},AnimationItem.prototype.includeLayers=function(t){t.op>this.animationData.op&&(this.animationData.op=t.op,this.totalFrames=Math.floor(t.op-this.animationData.ip));var e,r,n=this.animationData.layers,i=n.length,a=t.layers,o=a.length;for(r=0;r<o;r+=1)for(e=0;e<i;){if(n[e].id===a[r].id){n[e]=a[r];break}e+=1}if((t.chars||t.fonts)&&(this.renderer.globalData.fontManager.addChars(t.chars),this.renderer.globalData.fontManager.addFonts(t.fonts,this.renderer.globalData.defs)),t.assets)for(i=t.assets.length,e=0;e<i;e+=1)this.animationData.assets.push(t.assets[e]);this.animationData.__complete=!1,dataManager.completeAnimation(this.animationData,this.onSegmentComplete)},AnimationItem.prototype.onSegmentComplete=function(t){this.animationData=t;var e=getExpressionsPlugin();e&&e.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var t=this.animationData.segments;if(!t||0===t.length||!this.autoloadSegments)return this.trigger("data_ready"),void(this.timeCompleted=this.totalFrames);var e=t.shift();this.timeCompleted=e.time*this.frameRate;var r=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,dataManager.loadData(r,this.includeLayers.bind(this),function(){this.trigger("data_failed")}.bind(this))},AnimationItem.prototype.loadSegments=function(){this.animationData.segments||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(t){if(this.renderer)try{this.animationData=t,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(t),t.assets||(t.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(t.assets),this.markers=markerParser(t.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(t){this.triggerConfigError(t)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||"canvas"!==this.renderer.rendererType)&&this.imagePreloader.loadedFootages()){this.isLoaded=!0;var t=getExpressionsPlugin();t&&t.initExpressions(this),this.renderer.initItems(),setTimeout(function(){this.trigger("DOMLoaded")}.bind(this),0),this.gotoFrame(),this.autoplay&&this.play()}},AnimationItem.prototype.resize=function(t,e){var r="number"==typeof t?t:void 0,n="number"==typeof e?e:void 0;this.renderer.updateContainerSize(r,n)},AnimationItem.prototype.setSubframe=function(t){this.isSubframeEnabled=!!t},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame(),this.trigger("drawnFrame")},AnimationItem.prototype.renderFrame=function(){if(!1!==this.isLoaded&&this.renderer)try{this.expressionsPlugin&&this.expressionsPlugin.resetFrame(),this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(t){this.triggerRenderFrameError(t)}},AnimationItem.prototype.play=function(t){t&&this.name!==t||!0===this.isPaused&&(this.isPaused=!1,this.trigger("_play"),this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(t){t&&this.name!==t||!1===this.isPaused&&(this.isPaused=!0,this.trigger("_pause"),this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(t){t&&this.name!==t||(!0===this.isPaused?this.play():this.pause())},AnimationItem.prototype.stop=function(t){t&&this.name!==t||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(t){for(var e,r=0;r<this.markers.length;r+=1)if((e=this.markers[r]).payload&&e.payload.name===t)return e;return null},AnimationItem.prototype.goToAndStop=function(t,e,r){if(!r||this.name===r){var n=Number(t);if(isNaN(n)){var i=this.getMarkerData(t);i&&this.goToAndStop(i.time,!0)}else e?this.setCurrentRawFrameValue(t):this.setCurrentRawFrameValue(t*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(t,e,r){if(!r||this.name===r){var n=Number(t);if(isNaN(n)){var i=this.getMarkerData(t);i&&(i.duration?this.playSegments([i.time,i.time+i.duration],!0):this.goToAndStop(i.time,!0))}else this.goToAndStop(n,e,r);this.play()}},AnimationItem.prototype.advanceTime=function(t){if(!0!==this.isPaused&&!1!==this.isLoaded){var e=this.currentRawFrame+t*this.frameModifier,r=!1;e>=this.totalFrames-1&&this.frameModifier>0?this.loop&&this.playCount!==this.loop?e>=this.totalFrames?(this.playCount+=1,this.checkSegments(e%this.totalFrames)||(this.setCurrentRawFrameValue(e%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(e):this.checkSegments(e>this.totalFrames?e%this.totalFrames:0)||(r=!0,e=this.totalFrames-1):e<0?this.checkSegments(e%this.totalFrames)||(!this.loop||this.playCount--<=0&&!0!==this.loop?(r=!0,e=0):(this.setCurrentRawFrameValue(this.totalFrames+e%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0)):this.setCurrentRawFrameValue(e),r&&(this.setCurrentRawFrameValue(e),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(t,e){this.playCount=0,t[1]<t[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=t[0]-t[1],this.timeCompleted=this.totalFrames,this.firstFrame=t[1],this.setCurrentRawFrameValue(this.totalFrames-.001-e)):t[1]>t[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=t[1]-t[0],this.timeCompleted=this.totalFrames,this.firstFrame=t[0],this.setCurrentRawFrameValue(.001+e)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(t,e){var r=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<t?r=t:this.currentRawFrame+this.firstFrame>e&&(r=e-t)),this.firstFrame=t,this.totalFrames=e-t,this.timeCompleted=this.totalFrames,-1!==r&&this.goToAndStop(r,!0)},AnimationItem.prototype.playSegments=function(t,e){if(e&&(this.segments.length=0),"object"===_typeof$4(t[0])){var r,n=t.length;for(r=0;r<n;r+=1)this.segments.push(t[r])}else this.segments.push(t);this.segments.length&&e&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(t){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),t&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(t){return!!this.segments.length&&(this.adjustSegment(this.segments.shift(),t),!0)},AnimationItem.prototype.destroy=function(t){t&&this.name!==t||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.expressionsPlugin=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(t){this.currentRawFrame=t,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(t){this.playSpeed=t,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(t){this.playDirection=t<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setLoop=function(t){this.loop=t},AnimationItem.prototype.setVolume=function(t,e){e&&this.name!==e||this.audioController.setVolume(t)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(t){t&&this.name!==t||this.audioController.mute()},AnimationItem.prototype.unmute=function(t){t&&this.name!==t||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(t){var e="";if(t.e)e=t.p;else if(this.assetsPath){var r=t.p;-1!==r.indexOf("images/")&&(r=r.split("/")[1]),e=this.assetsPath+r}else e=this.path,e+=t.u?t.u:"",e+=t.p;return e},AnimationItem.prototype.getAssetData=function(t){for(var e=0,r=this.assets.length;e<r;){if(t===this.assets[e].id)return this.assets[e];e+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(t){return t?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.updateDocumentData=function(t,e,r){try{this.renderer.getElementByPath(t).updateDocumentData(e,r)}catch(t){}},AnimationItem.prototype.trigger=function(t){if(this._cbs&&this._cbs[t])switch(t){case"enterFrame":this.triggerEvent(t,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameModifier));break;case"drawnFrame":this.drawnFrameEvent.currentTime=this.currentFrame,this.drawnFrameEvent.totalTime=this.totalFrames,this.drawnFrameEvent.direction=this.frameModifier,this.triggerEvent(t,this.drawnFrameEvent);break;case"loopComplete":this.triggerEvent(t,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(t,new BMCompleteEvent(t,this.frameMult));break;case"segmentStart":this.triggerEvent(t,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(t,new BMDestroyEvent(t,this));break;default:this.triggerEvent(t)}"enterFrame"===t&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameMult)),"loopComplete"===t&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult)),"complete"===t&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(t,this.frameMult)),"segmentStart"===t&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames)),"destroy"===t&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(t,this))},AnimationItem.prototype.triggerRenderFrameError=function(t){var e=new BMRenderFrameErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)},AnimationItem.prototype.triggerConfigError=function(t){var e=new BMConfigErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)};var animationManager=function(){var t={},e=[],r=0,n=0,i=0,a=!0,o=!1;function s(t){for(var r=0,i=t.target;r<n;)e[r].animation===i&&(e.splice(r,1),r-=1,n-=1,i.isPaused||u()),r+=1}function l(t,r){if(!t)return null;for(var i=0;i<n;){if(e[i].elem===t&&null!==e[i].elem)return e[i].animation;i+=1}var a=new AnimationItem;return h(a,t),a.setData(t,r),a}function c(){i+=1,d()}function u(){i-=1}function h(t,r){t.addEventListener("destroy",s),t.addEventListener("_active",c),t.addEventListener("_idle",u),e.push({elem:r,animation:t}),n+=1}function f(t){var s,l=t-r;for(s=0;s<n;s+=1)e[s].animation.advanceTime(l);r=t,i&&!o?window.requestAnimationFrame(f):a=!0}function p(t){r=t,window.requestAnimationFrame(f)}function d(){!o&&i&&a&&(window.requestAnimationFrame(p),a=!1)}return t.registerAnimation=l,t.loadAnimation=function(t){var e=new AnimationItem;return h(e,null),e.setParams(t),e},t.setSpeed=function(t,r){var i;for(i=0;i<n;i+=1)e[i].animation.setSpeed(t,r)},t.setDirection=function(t,r){var i;for(i=0;i<n;i+=1)e[i].animation.setDirection(t,r)},t.play=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.play(t)},t.pause=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.pause(t)},t.stop=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.stop(t)},t.togglePause=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.togglePause(t)},t.searchAnimations=function(t,e,r){var n,i=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),a=i.length;for(n=0;n<a;n+=1)r&&i[n].setAttribute("data-bm-type",r),l(i[n],t);if(e&&0===a){r||(r="svg");var o=document.getElementsByTagName("body")[0];o.innerText="";var s=createTag("div");s.style.width="100%",s.style.height="100%",s.setAttribute("data-bm-type",r),o.appendChild(s),l(s,t)}},t.resize=function(){var t;for(t=0;t<n;t+=1)e[t].animation.resize()},t.goToAndStop=function(t,r,i){var a;for(a=0;a<n;a+=1)e[a].animation.goToAndStop(t,r,i)},t.destroy=function(t){var r;for(r=n-1;r>=0;r-=1)e[r].animation.destroy(t)},t.freeze=function(){o=!0},t.unfreeze=function(){o=!1,d()},t.setVolume=function(t,r){var i;for(i=0;i<n;i+=1)e[i].animation.setVolume(t,r)},t.mute=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.mute(t)},t.unmute=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.unmute(t)},t.getRegisteredAnimations=function(){var t,r=e.length,n=[];for(t=0;t<r;t+=1)n.push(e[t].animation);return n},t}(),BezierFactory=function(){var t={getBezierEasing:function(t,r,n,i,a){var o=a||("bez_"+t+"_"+r+"_"+n+"_"+i).replace(/\./g,"p");if(e[o])return e[o];var s=new u([t,r,n,i]);return e[o]=s,s}},e={},r=11,n=1/(r-1),i="function"==typeof Float32Array;function a(t,e){return 1-3*e+3*t}function o(t,e){return 3*e-6*t}function s(t){return 3*t}function l(t,e,r){return((a(e,r)*t+o(e,r))*t+s(e))*t}function c(t,e,r){return 3*a(e,r)*t*t+2*o(e,r)*t+s(e)}function u(t){this._p=t,this._mSampleValues=i?new Float32Array(r):new Array(r),this._precomputed=!1,this.get=this.get.bind(this)}return u.prototype={get:function(t){var e=this._p[0],r=this._p[1],n=this._p[2],i=this._p[3];return this._precomputed||this._precompute(),e===r&&n===i?t:0===t?0:1===t?1:l(this._getTForX(t),r,i)},_precompute:function(){var t=this._p[0],e=this._p[1],r=this._p[2],n=this._p[3];this._precomputed=!0,t===e&&r===n||this._calcSampleValues()},_calcSampleValues:function(){for(var t=this._p[0],e=this._p[2],i=0;i<r;++i)this._mSampleValues[i]=l(i*n,t,e)},_getTForX:function(t){for(var e=this._p[0],i=this._p[2],a=this._mSampleValues,o=0,s=1,u=r-1;s!==u&&a[s]<=t;++s)o+=n;var h=o+(t-a[--s])/(a[s+1]-a[s])*n,f=c(h,e,i);return f>=.001?function(t,e,r,n){for(var i=0;i<4;++i){var a=c(e,r,n);if(0===a)return e;e-=(l(e,r,n)-t)/a}return e}(t,h,e,i):0===f?h:function(t,e,r,n,i){var a,o,s=0;do{(a=l(o=e+(r-e)/2,n,i)-t)>0?r=o:e=o}while(Math.abs(a)>1e-7&&++s<10);return o}(t,o,o+n,e,i)}},t}(),pooling={double:function(t){return t.concat(createSizedArray(t.length))}},poolFactory=function(t,e,r){var n=0,i=t,a=createSizedArray(i);return{newElement:function(){return n?a[n-=1]:e()},release:function(t){n===i&&(a=pooling.double(a),i*=2),r&&r(t),a[n]=t,n+=1}}},bezierLengthPool=poolFactory(8,(function(){return{addedLength:0,percents:createTypedArray("float32",getDefaultCurveSegments()),lengths:createTypedArray("float32",getDefaultCurveSegments())}})),segmentsLengthPool=poolFactory(8,(function(){return{lengths:[],totalLength:0}}),(function(t){var e,r=t.lengths.length;for(e=0;e<r;e+=1)bezierLengthPool.release(t.lengths[e]);t.lengths.length=0}));function bezFunction(){var t=Math;function e(t,e,r,n,i,a){var o=t*n+e*i+r*a-i*n-a*t-r*e;return o>-.001&&o<.001}var r=function(t,e,r,n){var i,a,o,s,l,c,u=getDefaultCurveSegments(),h=0,f=[],p=[],d=bezierLengthPool.newElement();for(o=r.length,i=0;i<u;i+=1){for(l=i/(u-1),c=0,a=0;a<o;a+=1)s=bmPow(1-l,3)*t[a]+3*bmPow(1-l,2)*l*r[a]+3*(1-l)*bmPow(l,2)*n[a]+bmPow(l,3)*e[a],f[a]=s,null!==p[a]&&(c+=bmPow(f[a]-p[a],2)),p[a]=f[a];c&&(h+=c=bmSqrt(c)),d.percents[i]=l,d.lengths[i]=h}return d.addedLength=h,d};function n(t){this.segmentLength=0,this.points=new Array(t)}function i(t,e){this.partialLength=t,this.point=e}var a,o=(a={},function(t,r,o,s){var l=(t[0]+"_"+t[1]+"_"+r[0]+"_"+r[1]+"_"+o[0]+"_"+o[1]+"_"+s[0]+"_"+s[1]).replace(/\./g,"p");if(!a[l]){var c,u,h,f,p,d,m,y=getDefaultCurveSegments(),v=0,g=null;2===t.length&&(t[0]!==r[0]||t[1]!==r[1])&&e(t[0],t[1],r[0],r[1],t[0]+o[0],t[1]+o[1])&&e(t[0],t[1],r[0],r[1],r[0]+s[0],r[1]+s[1])&&(y=2);var b=new n(y);for(h=o.length,c=0;c<y;c+=1){for(m=createSizedArray(h),p=c/(y-1),d=0,u=0;u<h;u+=1)f=bmPow(1-p,3)*t[u]+3*bmPow(1-p,2)*p*(t[u]+o[u])+3*(1-p)*bmPow(p,2)*(r[u]+s[u])+bmPow(p,3)*r[u],m[u]=f,null!==g&&(d+=bmPow(m[u]-g[u],2));v+=d=bmSqrt(d),b.points[c]=new i(d,m),g=m}b.segmentLength=v,a[l]=b}return a[l]});function s(t,e){var r=e.percents,n=e.lengths,i=r.length,a=bmFloor((i-1)*t),o=t*e.addedLength,s=0;if(a===i-1||0===a||o===n[a])return r[a];for(var l=n[a]>o?-1:1,c=!0;c;)if(n[a]<=o&&n[a+1]>o?(s=(o-n[a])/(n[a+1]-n[a]),c=!1):a+=l,a<0||a>=i-1){if(a===i-1)return r[a];c=!1}return r[a]+(r[a+1]-r[a])*s}var l=createTypedArray("float32",8);return{getSegmentsLength:function(t){var e,n=segmentsLengthPool.newElement(),i=t.c,a=t.v,o=t.o,s=t.i,l=t._length,c=n.lengths,u=0;for(e=0;e<l-1;e+=1)c[e]=r(a[e],a[e+1],o[e],s[e+1]),u+=c[e].addedLength;return i&&l&&(c[e]=r(a[e],a[0],o[e],s[0]),u+=c[e].addedLength),n.totalLength=u,n},getNewSegment:function(e,r,n,i,a,o,c){a<0?a=0:a>1&&(a=1);var u,h=s(a,c),f=s(o=o>1?1:o,c),p=e.length,d=1-h,m=1-f,y=d*d*d,v=h*d*d*3,g=h*h*d*3,b=h*h*h,x=d*d*m,w=h*d*m+d*h*m+d*d*f,E=h*h*m+d*h*f+h*d*f,k=h*h*f,S=d*m*m,P=h*m*m+d*f*m+d*m*f,_=h*f*m+d*f*f+h*m*f,C=h*f*f,A=m*m*m,T=f*m*m+m*f*m+m*m*f,M=f*f*m+m*f*f+f*m*f,D=f*f*f;for(u=0;u<p;u+=1)l[4*u]=t.round(1e3*(y*e[u]+v*n[u]+g*i[u]+b*r[u]))/1e3,l[4*u+1]=t.round(1e3*(x*e[u]+w*n[u]+E*i[u]+k*r[u]))/1e3,l[4*u+2]=t.round(1e3*(S*e[u]+P*n[u]+_*i[u]+C*r[u]))/1e3,l[4*u+3]=t.round(1e3*(A*e[u]+T*n[u]+M*i[u]+D*r[u]))/1e3;return l},getPointInSegment:function(e,r,n,i,a,o){var l=s(a,o),c=1-l;return[t.round(1e3*(c*c*c*e[0]+(l*c*c+c*l*c+c*c*l)*n[0]+(l*l*c+c*l*l+l*c*l)*i[0]+l*l*l*r[0]))/1e3,t.round(1e3*(c*c*c*e[1]+(l*c*c+c*l*c+c*c*l)*n[1]+(l*l*c+c*l*l+l*c*l)*i[1]+l*l*l*r[1]))/1e3]},buildBezierData:o,pointOnLine2D:e,pointOnLine3D:function(r,n,i,a,o,s,l,c,u){if(0===i&&0===s&&0===u)return e(r,n,a,o,l,c);var h,f=t.sqrt(t.pow(a-r,2)+t.pow(o-n,2)+t.pow(s-i,2)),p=t.sqrt(t.pow(l-r,2)+t.pow(c-n,2)+t.pow(u-i,2)),d=t.sqrt(t.pow(l-a,2)+t.pow(c-o,2)+t.pow(u-s,2));return(h=f>p?f>d?f-p-d:d-p-f:d>p?d-p-f:p-f-d)>-1e-4&&h<1e-4}}}var bez=bezFunction(),initFrame=initialDefaultFrame,mathAbs=Math.abs;function interpolateValue(t,e){var r,n=this.offsetTime;"multidimensional"===this.propType&&(r=createTypedArray("float32",this.pv.length));for(var i,a,o,s,l,c,u,h,f,p=e.lastIndex,d=p,m=this.keyframes.length-1,y=!0;y;){if(i=this.keyframes[d],a=this.keyframes[d+1],d===m-1&&t>=a.t-n){i.h&&(i=a),p=0;break}if(a.t-n>t){p=d;break}d<m-1?d+=1:(p=0,y=!1)}o=this.keyframesMetadata[d]||{};var v,g=a.t-n,b=i.t-n;if(i.to){o.bezierData||(o.bezierData=bez.buildBezierData(i.s,a.s||i.e,i.to,i.ti));var x=o.bezierData;if(t>=g||t<b){var w=t>=g?x.points.length-1:0;for(l=x.points[w].point.length,s=0;s<l;s+=1)r[s]=x.points[w].point[s]}else{o.__fnct?f=o.__fnct:(f=BezierFactory.getBezierEasing(i.o.x,i.o.y,i.i.x,i.i.y,i.n).get,o.__fnct=f),c=f((t-b)/(g-b));var E,k=x.segmentLength*c,S=e.lastFrame<t&&e._lastKeyframeIndex===d?e._lastAddedLength:0;for(h=e.lastFrame<t&&e._lastKeyframeIndex===d?e._lastPoint:0,y=!0,u=x.points.length;y;){if(S+=x.points[h].partialLength,0===k||0===c||h===x.points.length-1){for(l=x.points[h].point.length,s=0;s<l;s+=1)r[s]=x.points[h].point[s];break}if(k>=S&&k<S+x.points[h+1].partialLength){for(E=(k-S)/x.points[h+1].partialLength,l=x.points[h].point.length,s=0;s<l;s+=1)r[s]=x.points[h].point[s]+(x.points[h+1].point[s]-x.points[h].point[s])*E;break}h<u-1?h+=1:y=!1}e._lastPoint=h,e._lastAddedLength=S-x.points[h].partialLength,e._lastKeyframeIndex=d}}else{var P,_,C,A,T;if(m=i.s.length,v=a.s||i.e,this.sh&&1!==i.h)t>=g?(r[0]=v[0],r[1]=v[1],r[2]=v[2]):t<=b?(r[0]=i.s[0],r[1]=i.s[1],r[2]=i.s[2]):quaternionToEuler(r,slerp(createQuaternion(i.s),createQuaternion(v),(t-b)/(g-b)));else for(d=0;d<m;d+=1)1!==i.h&&(t>=g?c=1:t<b?c=0:(i.o.x.constructor===Array?(o.__fnct||(o.__fnct=[]),o.__fnct[d]?f=o.__fnct[d]:(P=void 0===i.o.x[d]?i.o.x[0]:i.o.x[d],_=void 0===i.o.y[d]?i.o.y[0]:i.o.y[d],C=void 0===i.i.x[d]?i.i.x[0]:i.i.x[d],A=void 0===i.i.y[d]?i.i.y[0]:i.i.y[d],f=BezierFactory.getBezierEasing(P,_,C,A).get,o.__fnct[d]=f)):o.__fnct?f=o.__fnct:(P=i.o.x,_=i.o.y,C=i.i.x,A=i.i.y,f=BezierFactory.getBezierEasing(P,_,C,A).get,i.keyframeMetadata=f),c=f((t-b)/(g-b)))),v=a.s||i.e,T=1===i.h?i.s[d]:i.s[d]+(v[d]-i.s[d])*c,"multidimensional"===this.propType?r[d]=T:r=T}return e.lastIndex=p,r}function slerp(t,e,r){var n,i,a,o,s,l=[],c=t[0],u=t[1],h=t[2],f=t[3],p=e[0],d=e[1],m=e[2],y=e[3];return(i=c*p+u*d+h*m+f*y)<0&&(i=-i,p=-p,d=-d,m=-m,y=-y),1-i>1e-6?(n=Math.acos(i),a=Math.sin(n),o=Math.sin((1-r)*n)/a,s=Math.sin(r*n)/a):(o=1-r,s=r),l[0]=o*c+s*p,l[1]=o*u+s*d,l[2]=o*h+s*m,l[3]=o*f+s*y,l}function quaternionToEuler(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],o=Math.atan2(2*n*a-2*r*i,1-2*n*n-2*i*i),s=Math.asin(2*r*n+2*i*a),l=Math.atan2(2*r*a-2*n*i,1-2*r*r-2*i*i);t[0]=o/degToRads,t[1]=s/degToRads,t[2]=l/degToRads}function createQuaternion(t){var e=t[0]*degToRads,r=t[1]*degToRads,n=t[2]*degToRads,i=Math.cos(e/2),a=Math.cos(r/2),o=Math.cos(n/2),s=Math.sin(e/2),l=Math.sin(r/2),c=Math.sin(n/2);return[s*l*o+i*a*c,s*a*o+i*l*c,i*l*o-s*a*c,i*a*o-s*l*c]}function getValueAtCurrentTime(){var t=this.comp.renderedFrame-this.offsetTime,e=this.keyframes[0].t-this.offsetTime,r=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(t===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=r&&t>=r||this._caching.lastFrame<e&&t<e))){this._caching.lastFrame>=t&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var n=this.interpolateValue(t,this._caching);this.pv=n}return this._caching.lastFrame=t,this.pv}function setVValue(t){var e;if("unidimensional"===this.propType)e=t*this.mult,mathAbs(this.v-e)>1e-5&&(this.v=e,this._mdf=!0);else for(var r=0,n=this.v.length;r<n;)e=t[r]*this.mult,mathAbs(this.v[r]-e)>1e-5&&(this.v[r]=e,this._mdf=!0),r+=1}function processEffectsSequence(){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var t;this.lock=!0,this._mdf=this._isFirstFrame;var e=this.effectsSequence.length,r=this.kf?this.pv:this.data.k;for(t=0;t<e;t+=1)r=this.effectsSequence[t](r);this.setVValue(r),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function addEffect(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function ValueProperty(t,e,r,n){this.propType="unidimensional",this.mult=r||1,this.data=e,this.v=r?e.k*r:e.k,this.pv=e.k,this._mdf=!1,this.elem=t,this.container=n,this.comp=t.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function MultiDimensionalProperty(t,e,r,n){var i;this.propType="multidimensional",this.mult=r||1,this.data=e,this._mdf=!1,this.elem=t,this.container=n,this.comp=t.comp,this.k=!1,this.kf=!1,this.frameId=-1;var a=e.k.length;for(this.v=createTypedArray("float32",a),this.pv=createTypedArray("float32",a),this.vel=createTypedArray("float32",a),i=0;i<a;i+=1)this.v[i]=e.k[i]*this.mult,this.pv[i]=e.k[i];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function KeyframedValueProperty(t,e,r,n){this.propType="unidimensional",this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.frameId=-1,this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=e,this.mult=r||1,this.elem=t,this.container=n,this.comp=t.comp,this.v=initFrame,this.pv=initFrame,this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.addEffect=addEffect}function KeyframedMultidimensionalProperty(t,e,r,n){var i;this.propType="multidimensional";var a,o,s,l,c=e.k.length;for(i=0;i<c-1;i+=1)e.k[i].to&&e.k[i].s&&e.k[i+1]&&e.k[i+1].s&&(a=e.k[i].s,o=e.k[i+1].s,s=e.k[i].to,l=e.k[i].ti,(2===a.length&&(a[0]!==o[0]||a[1]!==o[1])&&bez.pointOnLine2D(a[0],a[1],o[0],o[1],a[0]+s[0],a[1]+s[1])&&bez.pointOnLine2D(a[0],a[1],o[0],o[1],o[0]+l[0],o[1]+l[1])||3===a.length&&(a[0]!==o[0]||a[1]!==o[1]||a[2]!==o[2])&&bez.pointOnLine3D(a[0],a[1],a[2],o[0],o[1],o[2],a[0]+s[0],a[1]+s[1],a[2]+s[2])&&bez.pointOnLine3D(a[0],a[1],a[2],o[0],o[1],o[2],o[0]+l[0],o[1]+l[1],o[2]+l[2]))&&(e.k[i].to=null,e.k[i].ti=null),a[0]===o[0]&&a[1]===o[1]&&0===s[0]&&0===s[1]&&0===l[0]&&0===l[1]&&(2===a.length||a[2]===o[2]&&0===s[2]&&0===l[2])&&(e.k[i].to=null,e.k[i].ti=null));this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.data=e,this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=r||1,this.elem=t,this.container=n,this.comp=t.comp,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.frameId=-1;var u=e.k[0].s.length;for(this.v=createTypedArray("float32",u),this.pv=createTypedArray("float32",u),i=0;i<u;i+=1)this.v[i]=initFrame,this.pv[i]=initFrame;this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray("float32",u)},this.addEffect=addEffect}var PropertyFactory={getProp:function(t,e,r,n,i){var a;if(e.sid&&(e=t.globalData.slotManager.getProp(e)),e.k.length)if("number"==typeof e.k[0])a=new MultiDimensionalProperty(t,e,n,i);else switch(r){case 0:a=new KeyframedValueProperty(t,e,n,i);break;case 1:a=new KeyframedMultidimensionalProperty(t,e,n,i)}else a=new ValueProperty(t,e,n,i);return a.effectsSequence.length&&i.addDynamicProperty(a),a}};function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(t){-1===this.dynamicProperties.indexOf(t)&&(this.dynamicProperties.push(t),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){var t;this._mdf=!1;var e=this.dynamicProperties.length;for(t=0;t<e;t+=1)this.dynamicProperties[t].getValue(),this.dynamicProperties[t]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(t){this.container=t,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var pointPool=poolFactory(8,(function(){return createTypedArray("float32",2)}));function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(t,e){this.c=t,this.setLength(e);for(var r=0;r<e;)this.v[r]=pointPool.newElement(),this.o[r]=pointPool.newElement(),this.i[r]=pointPool.newElement(),r+=1},ShapePath.prototype.setLength=function(t){for(;this._maxLength<t;)this.doubleArrayLength();this._length=t},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(t,e,r,n,i){var a;switch(this._length=Math.max(this._length,n+1),this._length>=this._maxLength&&this.doubleArrayLength(),r){case"v":a=this.v;break;case"i":a=this.i;break;case"o":a=this.o;break;default:a=[]}(!a[n]||a[n]&&!i)&&(a[n]=pointPool.newElement()),a[n][0]=t,a[n][1]=e},ShapePath.prototype.setTripleAt=function(t,e,r,n,i,a,o,s){this.setXYAt(t,e,"v",o,s),this.setXYAt(r,n,"o",o,s),this.setXYAt(i,a,"i",o,s)},ShapePath.prototype.reverse=function(){var t=new ShapePath;t.setPathData(this.c,this._length);var e=this.v,r=this.o,n=this.i,i=0;this.c&&(t.setTripleAt(e[0][0],e[0][1],n[0][0],n[0][1],r[0][0],r[0][1],0,!1),i=1);var a,o=this._length-1,s=this._length;for(a=i;a<s;a+=1)t.setTripleAt(e[o][0],e[o][1],n[o][0],n[o][1],r[o][0],r[o][1],a,!1),o-=1;return t},ShapePath.prototype.length=function(){return this._length};var shapePool=(factory=poolFactory(4,(function(){return new ShapePath}),(function(t){var e,r=t._length;for(e=0;e<r;e+=1)pointPool.release(t.v[e]),pointPool.release(t.i[e]),pointPool.release(t.o[e]),t.v[e]=null,t.i[e]=null,t.o[e]=null;t._length=0,t.c=!1})),factory.clone=function(t){var e,r=factory.newElement(),n=void 0===t._length?t.v.length:t._length;for(r.setLength(n),r.c=t.c,e=0;e<n;e+=1)r.setTripleAt(t.v[e][0],t.v[e][1],t.o[e][0],t.o[e][1],t.i[e][0],t.i[e][1],e);return r},factory),factory;function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}ShapeCollection.prototype.addShape=function(t){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=t,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var t;for(t=0;t<this._length;t+=1)shapePool.release(this.shapes[t]);this._length=0};var shapeCollectionPool=(ob={newShapeCollection:function(){return _length?pool[_length-=1]:new ShapeCollection},release:function(t){var e,r=t._length;for(e=0;e<r;e+=1)shapePool.release(t.shapes[e]);t._length=0,_length===_maxLength&&(pool=pooling.double(pool),_maxLength*=2),pool[_length]=t,_length+=1}},_length=0,_maxLength=4,pool=createSizedArray(_maxLength),ob),ob,_length,_maxLength,pool,ShapePropertyFactory=function(){var t=-999999;function e(t,e,r){var n,i,a,o,s,l,c,u,h,f=r.lastIndex,p=this.keyframes;if(t<p[0].t-this.offsetTime)n=p[0].s[0],a=!0,f=0;else if(t>=p[p.length-1].t-this.offsetTime)n=p[p.length-1].s?p[p.length-1].s[0]:p[p.length-2].e[0],a=!0;else{for(var d,m,y,v=f,g=p.length-1,b=!0;b&&(d=p[v],!((m=p[v+1]).t-this.offsetTime>t));)v<g-1?v+=1:b=!1;if(y=this.keyframesMetadata[v]||{},f=v,!(a=1===d.h)){if(t>=m.t-this.offsetTime)u=1;else if(t<d.t-this.offsetTime)u=0;else{var x;y.__fnct?x=y.__fnct:(x=BezierFactory.getBezierEasing(d.o.x,d.o.y,d.i.x,d.i.y).get,y.__fnct=x),u=x((t-(d.t-this.offsetTime))/(m.t-this.offsetTime-(d.t-this.offsetTime)))}i=m.s?m.s[0]:d.e[0]}n=d.s[0]}for(l=e._length,c=n.i[0].length,r.lastIndex=f,o=0;o<l;o+=1)for(s=0;s<c;s+=1)h=a?n.i[o][s]:n.i[o][s]+(i.i[o][s]-n.i[o][s])*u,e.i[o][s]=h,h=a?n.o[o][s]:n.o[o][s]+(i.o[o][s]-n.o[o][s])*u,e.o[o][s]=h,h=a?n.v[o][s]:n.v[o][s]+(i.v[o][s]-n.v[o][s])*u,e.v[o][s]=h}function r(){var e=this.comp.renderedFrame-this.offsetTime,r=this.keyframes[0].t-this.offsetTime,n=this.keyframes[this.keyframes.length-1].t-this.offsetTime,i=this._caching.lastFrame;return i!==t&&(i<r&&e<r||i>n&&e>n)||(this._caching.lastIndex=i<e?this._caching.lastIndex:0,this.interpolateShape(e,this.pv,this._caching)),this._caching.lastFrame=e,this.pv}function n(){this.paths=this.localShapeCollection}function i(t){(function(t,e){if(t._length!==e._length||t.c!==e.c)return!1;var r,n=t._length;for(r=0;r<n;r+=1)if(t.v[r][0]!==e.v[r][0]||t.v[r][1]!==e.v[r][1]||t.o[r][0]!==e.o[r][0]||t.o[r][1]!==e.o[r][1]||t.i[r][0]!==e.i[r][0]||t.i[r][1]!==e.i[r][1])return!1;return!0})(this.v,t)||(this.v=shapePool.clone(t),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function a(){if(this.elem.globalData.frameId!==this.frameId)if(this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var t,e;this.lock=!0,this._mdf=!1,t=this.kf?this.pv:this.data.ks?this.data.ks.k:this.data.pt.k;var r=this.effectsSequence.length;for(e=0;e<r;e+=1)t=this.effectsSequence[e](t);this.setVValue(t),this.lock=!1,this.frameId=this.elem.globalData.frameId}else this._mdf=!1}function o(t,e,r){this.propType="shape",this.comp=t.comp,this.container=t,this.elem=t,this.data=e,this.k=!1,this.kf=!1,this._mdf=!1;var i=3===r?e.pt.k:e.ks.k;this.v=shapePool.clone(i),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=n,this.effectsSequence=[]}function s(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function l(e,i,a){this.propType="shape",this.comp=e.comp,this.elem=e,this.container=e,this.offsetTime=e.data.st,this.keyframes=3===a?i.pt.k:i.ks.k,this.keyframesMetadata=[],this.k=!0,this.kf=!0;var o=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,o),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=t,this.reset=n,this._caching={lastFrame:t,lastIndex:0},this.effectsSequence=[r.bind(this)]}o.prototype.interpolateShape=e,o.prototype.getValue=a,o.prototype.setVValue=i,o.prototype.addEffect=s,l.prototype.getValue=a,l.prototype.interpolateShape=e,l.prototype.setVValue=i,l.prototype.addEffect=s;var c=function(){var t=roundCorner;function e(t,e){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=e.d,this.elem=t,this.comp=t.comp,this.frameId=-1,this.initDynamicPropertyContainer(t),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.s=PropertyFactory.getProp(t,e.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return e.prototype={reset:n,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var e=this.p.v[0],r=this.p.v[1],n=this.s.v[0]/2,i=this.s.v[1]/2,a=3!==this.d,o=this.v;o.v[0][0]=e,o.v[0][1]=r-i,o.v[1][0]=a?e+n:e-n,o.v[1][1]=r,o.v[2][0]=e,o.v[2][1]=r+i,o.v[3][0]=a?e-n:e+n,o.v[3][1]=r,o.i[0][0]=a?e-n*t:e+n*t,o.i[0][1]=r-i,o.i[1][0]=a?e+n:e-n,o.i[1][1]=r-i*t,o.i[2][0]=a?e+n*t:e-n*t,o.i[2][1]=r+i,o.i[3][0]=a?e-n:e+n,o.i[3][1]=r+i*t,o.o[0][0]=a?e+n*t:e-n*t,o.o[0][1]=r-i,o.o[1][0]=a?e+n:e-n,o.o[1][1]=r+i*t,o.o[2][0]=a?e-n*t:e+n*t,o.o[2][1]=r+i,o.o[3][0]=a?e-n:e+n,o.o[3][1]=r-i*t}},extendPrototype([DynamicPropertyContainer],e),e}(),u=function(){function t(t,e){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=t,this.comp=t.comp,this.data=e,this.frameId=-1,this.d=e.d,this.initDynamicPropertyContainer(t),1===e.sy?(this.ir=PropertyFactory.getProp(t,e.ir,0,0,this),this.is=PropertyFactory.getProp(t,e.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(t,e.pt,0,0,this),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.r=PropertyFactory.getProp(t,e.r,0,degToRads,this),this.or=PropertyFactory.getProp(t,e.or,0,0,this),this.os=PropertyFactory.getProp(t,e.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return t.prototype={reset:n,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var t,e,r,n,i=2*Math.floor(this.pt.v),a=2*Math.PI/i,o=!0,s=this.or.v,l=this.ir.v,c=this.os.v,u=this.is.v,h=2*Math.PI*s/(2*i),f=2*Math.PI*l/(2*i),p=-Math.PI/2;p+=this.r.v;var d=3===this.data.d?-1:1;for(this.v._length=0,t=0;t<i;t+=1){r=o?c:u,n=o?h:f;var m=(e=o?s:l)*Math.cos(p),y=e*Math.sin(p),v=0===m&&0===y?0:y/Math.sqrt(m*m+y*y),g=0===m&&0===y?0:-m/Math.sqrt(m*m+y*y);m+=+this.p.v[0],y+=+this.p.v[1],this.v.setTripleAt(m,y,m-v*n*r*d,y-g*n*r*d,m+v*n*r*d,y+g*n*r*d,t,!0),o=!o,p+=a*d}},convertPolygonToPath:function(){var t,e=Math.floor(this.pt.v),r=2*Math.PI/e,n=this.or.v,i=this.os.v,a=2*Math.PI*n/(4*e),o=.5*-Math.PI,s=3===this.data.d?-1:1;for(o+=this.r.v,this.v._length=0,t=0;t<e;t+=1){var l=n*Math.cos(o),c=n*Math.sin(o),u=0===l&&0===c?0:c/Math.sqrt(l*l+c*c),h=0===l&&0===c?0:-l/Math.sqrt(l*l+c*c);l+=+this.p.v[0],c+=+this.p.v[1],this.v.setTripleAt(l,c,l-u*a*i*s,c-h*a*i*s,l+u*a*i*s,c+h*a*i*s,t,!0),o+=r*s}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],t),t}(),h=function(){function t(t,e){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=t,this.comp=t.comp,this.frameId=-1,this.d=e.d,this.initDynamicPropertyContainer(t),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.s=PropertyFactory.getProp(t,e.s,1,0,this),this.r=PropertyFactory.getProp(t,e.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return t.prototype={convertRectToPath:function(){var t=this.p.v[0],e=this.p.v[1],r=this.s.v[0]/2,n=this.s.v[1]/2,i=bmMin(r,n,this.r.v),a=i*(1-roundCorner);this.v._length=0,2===this.d||1===this.d?(this.v.setTripleAt(t+r,e-n+i,t+r,e-n+i,t+r,e-n+a,0,!0),this.v.setTripleAt(t+r,e+n-i,t+r,e+n-a,t+r,e+n-i,1,!0),0!==i?(this.v.setTripleAt(t+r-i,e+n,t+r-i,e+n,t+r-a,e+n,2,!0),this.v.setTripleAt(t-r+i,e+n,t-r+a,e+n,t-r+i,e+n,3,!0),this.v.setTripleAt(t-r,e+n-i,t-r,e+n-i,t-r,e+n-a,4,!0),this.v.setTripleAt(t-r,e-n+i,t-r,e-n+a,t-r,e-n+i,5,!0),this.v.setTripleAt(t-r+i,e-n,t-r+i,e-n,t-r+a,e-n,6,!0),this.v.setTripleAt(t+r-i,e-n,t+r-a,e-n,t+r-i,e-n,7,!0)):(this.v.setTripleAt(t-r,e+n,t-r+a,e+n,t-r,e+n,2),this.v.setTripleAt(t-r,e-n,t-r,e-n+a,t-r,e-n,3))):(this.v.setTripleAt(t+r,e-n+i,t+r,e-n+a,t+r,e-n+i,0,!0),0!==i?(this.v.setTripleAt(t+r-i,e-n,t+r-i,e-n,t+r-a,e-n,1,!0),this.v.setTripleAt(t-r+i,e-n,t-r+a,e-n,t-r+i,e-n,2,!0),this.v.setTripleAt(t-r,e-n+i,t-r,e-n+i,t-r,e-n+a,3,!0),this.v.setTripleAt(t-r,e+n-i,t-r,e+n-a,t-r,e+n-i,4,!0),this.v.setTripleAt(t-r+i,e+n,t-r+i,e+n,t-r+a,e+n,5,!0),this.v.setTripleAt(t+r-i,e+n,t+r-a,e+n,t+r-i,e+n,6,!0),this.v.setTripleAt(t+r,e+n-i,t+r,e+n-i,t+r,e+n-a,7,!0)):(this.v.setTripleAt(t-r,e-n,t-r+a,e-n,t-r,e-n,1,!0),this.v.setTripleAt(t-r,e+n,t-r,e+n-a,t-r,e+n,2,!0),this.v.setTripleAt(t+r,e+n,t+r-a,e+n,t+r,e+n,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:n},extendPrototype([DynamicPropertyContainer],t),t}();return{getShapeProp:function(t,e,r){var n;return 3===r||4===r?n=(3===r?e.pt:e.ks).k.length?new l(t,e,r):new o(t,e,r):5===r?n=new h(t,e):6===r?n=new c(t,e):7===r&&(n=new u(t,e)),n.k&&t.addDynamicProperty(n),n},getConstructorFunction:function(){return o},getKeyframedConstructorFunction:function(){return l}}}(),Matrix=function(){var t=Math.cos,e=Math.sin,r=Math.tan,n=Math.round;function i(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function a(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(n,-i,0,0,i,n,0,0,0,0,1,0,0,0,0,1)}function o(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(1,0,0,0,0,n,-i,0,0,i,n,0,0,0,0,1)}function s(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(n,0,i,0,0,1,0,0,-i,0,n,0,0,0,0,1)}function l(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(n,-i,0,0,i,n,0,0,0,0,1,0,0,0,0,1)}function c(t,e){return this._t(1,e,t,1,0,0)}function u(t,e){return this.shear(r(t),r(e))}function h(n,i){var a=t(i),o=e(i);return this._t(a,o,0,0,-o,a,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,r(n),1,0,0,0,0,1,0,0,0,0,1)._t(a,-o,0,0,o,a,0,0,0,0,1,0,0,0,0,1)}function f(t,e,r){return r||0===r||(r=1),1===t&&1===e&&1===r?this:this._t(t,0,0,0,0,e,0,0,0,0,r,0,0,0,0,1)}function p(t,e,r,n,i,a,o,s,l,c,u,h,f,p,d,m){return this.props[0]=t,this.props[1]=e,this.props[2]=r,this.props[3]=n,this.props[4]=i,this.props[5]=a,this.props[6]=o,this.props[7]=s,this.props[8]=l,this.props[9]=c,this.props[10]=u,this.props[11]=h,this.props[12]=f,this.props[13]=p,this.props[14]=d,this.props[15]=m,this}function d(t,e,r){return r=r||0,0!==t||0!==e||0!==r?this._t(1,0,0,0,0,1,0,0,0,0,1,0,t,e,r,1):this}function m(t,e,r,n,i,a,o,s,l,c,u,h,f,p,d,m){var y=this.props;if(1===t&&0===e&&0===r&&0===n&&0===i&&1===a&&0===o&&0===s&&0===l&&0===c&&1===u&&0===h)return y[12]=y[12]*t+y[15]*f,y[13]=y[13]*a+y[15]*p,y[14]=y[14]*u+y[15]*d,y[15]*=m,this._identityCalculated=!1,this;var v=y[0],g=y[1],b=y[2],x=y[3],w=y[4],E=y[5],k=y[6],S=y[7],P=y[8],_=y[9],C=y[10],A=y[11],T=y[12],M=y[13],D=y[14],L=y[15];return y[0]=v*t+g*i+b*l+x*f,y[1]=v*e+g*a+b*c+x*p,y[2]=v*r+g*o+b*u+x*d,y[3]=v*n+g*s+b*h+x*m,y[4]=w*t+E*i+k*l+S*f,y[5]=w*e+E*a+k*c+S*p,y[6]=w*r+E*o+k*u+S*d,y[7]=w*n+E*s+k*h+S*m,y[8]=P*t+_*i+C*l+A*f,y[9]=P*e+_*a+C*c+A*p,y[10]=P*r+_*o+C*u+A*d,y[11]=P*n+_*s+C*h+A*m,y[12]=T*t+M*i+D*l+L*f,y[13]=T*e+M*a+D*c+L*p,y[14]=T*r+M*o+D*u+L*d,y[15]=T*n+M*s+D*h+L*m,this._identityCalculated=!1,this}function y(t){var e=t.props;return this.transform(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15])}function v(){return this._identityCalculated||(this._identity=!(1!==this.props[0]||0!==this.props[1]||0!==this.props[2]||0!==this.props[3]||0!==this.props[4]||1!==this.props[5]||0!==this.props[6]||0!==this.props[7]||0!==this.props[8]||0!==this.props[9]||1!==this.props[10]||0!==this.props[11]||0!==this.props[12]||0!==this.props[13]||0!==this.props[14]||1!==this.props[15]),this._identityCalculated=!0),this._identity}function g(t){for(var e=0;e<16;){if(t.props[e]!==this.props[e])return!1;e+=1}return!0}function b(t){var e;for(e=0;e<16;e+=1)t.props[e]=this.props[e];return t}function x(t){var e;for(e=0;e<16;e+=1)this.props[e]=t[e]}function w(t,e,r){return{x:t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12],y:t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13],z:t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]}}function E(t,e,r){return t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12]}function k(t,e,r){return t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13]}function S(t,e,r){return t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]}function P(){var t=this.props[0]*this.props[5]-this.props[1]*this.props[4],e=this.props[5]/t,r=-this.props[1]/t,n=-this.props[4]/t,i=this.props[0]/t,a=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/t,o=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/t,s=new Matrix;return s.props[0]=e,s.props[1]=r,s.props[4]=n,s.props[5]=i,s.props[12]=a,s.props[13]=o,s}function _(t){return this.getInverseMatrix().applyToPointArray(t[0],t[1],t[2]||0)}function C(t){var e,r=t.length,n=[];for(e=0;e<r;e+=1)n[e]=_(t[e]);return n}function A(t,e,r){var n=createTypedArray("float32",6);if(this.isIdentity())n[0]=t[0],n[1]=t[1],n[2]=e[0],n[3]=e[1],n[4]=r[0],n[5]=r[1];else{var i=this.props[0],a=this.props[1],o=this.props[4],s=this.props[5],l=this.props[12],c=this.props[13];n[0]=t[0]*i+t[1]*o+l,n[1]=t[0]*a+t[1]*s+c,n[2]=e[0]*i+e[1]*o+l,n[3]=e[0]*a+e[1]*s+c,n[4]=r[0]*i+r[1]*o+l,n[5]=r[0]*a+r[1]*s+c}return n}function T(t,e,r){return this.isIdentity()?[t,e,r]:[t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12],t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13],t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]]}function M(t,e){if(this.isIdentity())return t+","+e;var r=this.props;return Math.round(100*(t*r[0]+e*r[4]+r[12]))/100+","+Math.round(100*(t*r[1]+e*r[5]+r[13]))/100}function D(){for(var t=0,e=this.props,r="matrix3d(";t<16;)r+=n(1e4*e[t])/1e4,r+=15===t?")":",",t+=1;return r}function L(t){return t<1e-6&&t>0||t>-1e-6&&t<0?n(1e4*t)/1e4:t}function O(){var t=this.props;return"matrix("+L(t[0])+","+L(t[1])+","+L(t[4])+","+L(t[5])+","+L(t[12])+","+L(t[13])+")"}return function(){this.reset=i,this.rotate=a,this.rotateX=o,this.rotateY=s,this.rotateZ=l,this.skew=u,this.skewFromAxis=h,this.shear=c,this.scale=f,this.setTransform=p,this.translate=d,this.transform=m,this.multiply=y,this.applyToPoint=w,this.applyToX=E,this.applyToY=k,this.applyToZ=S,this.applyToPointArray=T,this.applyToTriplePoints=A,this.applyToPointStringified=M,this.toCSS=D,this.to2dCSS=O,this.clone=b,this.cloneFromProps=x,this.equals=g,this.inversePoints=C,this.inversePoint=_,this.getInverseMatrix=P,this._t=this.transform,this.isIdentity=v,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();function _typeof$3(t){return _typeof$3="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$3(t)}var lottie={},standalone="__[STANDALONE]__",animationData="__[ANIMATIONDATA]__",renderer="";function setLocation(t){setLocationHref(t)}function searchAnimations(){!0===standalone?animationManager.searchAnimations(animationData,standalone,renderer):animationManager.searchAnimations()}function setSubframeRendering(t){setSubframeEnabled(t)}function setPrefix(t){setIdPrefix(t)}function loadAnimation(t){return!0===standalone&&(t.animationData=JSON.parse(animationData)),animationManager.loadAnimation(t)}function setQuality(t){if("string"==typeof t)switch(t){case"high":setDefaultCurveSegments(200);break;default:case"medium":setDefaultCurveSegments(50);break;case"low":setDefaultCurveSegments(10)}else!isNaN(t)&&t>1&&setDefaultCurveSegments(t);getDefaultCurveSegments()>=50?roundValues(!1):roundValues(!0)}function inBrowser(){return"undefined"!=typeof navigator}function installPlugin(t,e){"expressions"===t&&setExpressionsPlugin(e)}function getFactory(t){switch(t){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}function checkReady(){"complete"===document.readyState&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(t){for(var e=queryString.split("&"),r=0;r<e.length;r+=1){var n=e[r].split("=");if(decodeURIComponent(n[0])==t)return decodeURIComponent(n[1])}return null}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocation,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.useWebWorker=setWebWorker,lottie.setIDPrefix=setPrefix,lottie.__getFactory=getFactory,lottie.version="5.12.2";var queryString="";if(standalone){var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,""):"",renderer=getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);try{"object"!==_typeof$3(exports)&&__webpack_require__.amdO}catch(t){}var ShapeModifiers=function(){var t={},e={};return t.registerModifier=function(t,r){e[t]||(e[t]=r)},t.getModifier=function(t,r,n){return new e[t](r,n)},t}();function ShapeModifier(){}function TrimModifier(){}function PuckerAndBloatModifier(){}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(t){if(!this.closed){t.sh.container.addDynamicProperty(t.sh);var e={shape:t.sh,data:t,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(e),this.addShapeToModifier(e),this._isAnimated&&t.setAsAnimated()}},ShapeModifier.prototype.init=function(t,e){this.shapes=[],this.elem=t,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier),extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(t,e){this.s=PropertyFactory.getProp(t,e.s,0,.01,this),this.e=PropertyFactory.getProp(t,e.e,0,.01,this),this.o=PropertyFactory.getProp(t,e.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=e.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(t){t.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(t,e,r,n,i){var a=[];e<=1?a.push({s:t,e}):t>=1?a.push({s:t-1,e:e-1}):(a.push({s:t,e:1}),a.push({s:0,e:e-1}));var o,s,l=[],c=a.length;for(o=0;o<c;o+=1){var u,h;(s=a[o]).e*i<n||s.s*i>n+r||(u=s.s*i<=n?0:(s.s*i-n)/r,h=s.e*i>=n+r?1:(s.e*i-n)/r,l.push([u,h]))}return l.length||l.push([0,0]),l},TrimModifier.prototype.releasePathsData=function(t){var e,r=t.length;for(e=0;e<r;e+=1)segmentsLengthPool.release(t[e]);return t.length=0,t},TrimModifier.prototype.processShapes=function(t){var e,r,n,i;if(this._mdf||t){var a=this.o.v%360/360;if(a<0&&(a+=1),(e=this.s.v>1?1+a:this.s.v<0?0+a:this.s.v+a)>(r=this.e.v>1?1+a:this.e.v<0?0+a:this.e.v+a)){var o=e;e=r,r=o}e=1e-4*Math.round(1e4*e),r=1e-4*Math.round(1e4*r),this.sValue=e,this.eValue=r}else e=this.sValue,r=this.eValue;var s,l,c,u,h,f=this.shapes.length,p=0;if(r===e)for(i=0;i<f;i+=1)this.shapes[i].localShapeCollection.releaseShapes(),this.shapes[i].shape._mdf=!0,this.shapes[i].shape.paths=this.shapes[i].localShapeCollection,this._mdf&&(this.shapes[i].pathsData.length=0);else if(1===r&&0===e||0===r&&1===e){if(this._mdf)for(i=0;i<f;i+=1)this.shapes[i].pathsData.length=0,this.shapes[i].shape._mdf=!0}else{var d,m,y=[];for(i=0;i<f;i+=1)if((d=this.shapes[i]).shape._mdf||this._mdf||t||2===this.m){if(l=(n=d.shape.paths)._length,h=0,!d.shape._mdf&&d.pathsData.length)h=d.totalShapeLength;else{for(c=this.releasePathsData(d.pathsData),s=0;s<l;s+=1)u=bez.getSegmentsLength(n.shapes[s]),c.push(u),h+=u.totalLength;d.totalShapeLength=h,d.pathsData=c}p+=h,d.shape._mdf=!0}else d.shape.paths=d.localShapeCollection;var v,g=e,b=r,x=0;for(i=f-1;i>=0;i-=1)if((d=this.shapes[i]).shape._mdf){for((m=d.localShapeCollection).releaseShapes(),2===this.m&&f>1?(v=this.calculateShapeEdges(e,r,d.totalShapeLength,x,p),x+=d.totalShapeLength):v=[[g,b]],l=v.length,s=0;s<l;s+=1){g=v[s][0],b=v[s][1],y.length=0,b<=1?y.push({s:d.totalShapeLength*g,e:d.totalShapeLength*b}):g>=1?y.push({s:d.totalShapeLength*(g-1),e:d.totalShapeLength*(b-1)}):(y.push({s:d.totalShapeLength*g,e:d.totalShapeLength}),y.push({s:0,e:d.totalShapeLength*(b-1)}));var w=this.addShapes(d,y[0]);if(y[0].s!==y[0].e){if(y.length>1)if(d.shape.paths.shapes[d.shape.paths._length-1].c){var E=w.pop();this.addPaths(w,m),w=this.addShapes(d,y[1],E)}else this.addPaths(w,m),w=this.addShapes(d,y[1]);this.addPaths(w,m)}}d.shape.paths=m}}},TrimModifier.prototype.addPaths=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)e.addShape(t[r])},TrimModifier.prototype.addSegment=function(t,e,r,n,i,a,o){i.setXYAt(e[0],e[1],"o",a),i.setXYAt(r[0],r[1],"i",a+1),o&&i.setXYAt(t[0],t[1],"v",a),i.setXYAt(n[0],n[1],"v",a+1)},TrimModifier.prototype.addSegmentFromArray=function(t,e,r,n){e.setXYAt(t[1],t[5],"o",r),e.setXYAt(t[2],t[6],"i",r+1),n&&e.setXYAt(t[0],t[4],"v",r),e.setXYAt(t[3],t[7],"v",r+1)},TrimModifier.prototype.addShapes=function(t,e,r){var n,i,a,o,s,l,c,u,h=t.pathsData,f=t.shape.paths.shapes,p=t.shape.paths._length,d=0,m=[],y=!0;for(r?(s=r._length,u=r._length):(r=shapePool.newElement(),s=0,u=0),m.push(r),n=0;n<p;n+=1){for(l=h[n].lengths,r.c=f[n].c,a=f[n].c?l.length:l.length+1,i=1;i<a;i+=1)if(d+(o=l[i-1]).addedLength<e.s)d+=o.addedLength,r.c=!1;else{if(d>e.e){r.c=!1;break}e.s<=d&&e.e>=d+o.addedLength?(this.addSegment(f[n].v[i-1],f[n].o[i-1],f[n].i[i],f[n].v[i],r,s,y),y=!1):(c=bez.getNewSegment(f[n].v[i-1],f[n].v[i],f[n].o[i-1],f[n].i[i],(e.s-d)/o.addedLength,(e.e-d)/o.addedLength,l[i-1]),this.addSegmentFromArray(c,r,s,y),y=!1,r.c=!1),d+=o.addedLength,s+=1}if(f[n].c&&l.length){if(o=l[i-1],d<=e.e){var v=l[i-1].addedLength;e.s<=d&&e.e>=d+v?(this.addSegment(f[n].v[i-1],f[n].o[i-1],f[n].i[0],f[n].v[0],r,s,y),y=!1):(c=bez.getNewSegment(f[n].v[i-1],f[n].v[0],f[n].o[i-1],f[n].i[0],(e.s-d)/v,(e.e-d)/v,l[i-1]),this.addSegmentFromArray(c,r,s,y),y=!1,r.c=!1)}else r.c=!1;d+=o.addedLength,s+=1}if(r._length&&(r.setXYAt(r.v[u][0],r.v[u][1],"i",u),r.setXYAt(r.v[r._length-1][0],r.v[r._length-1][1],"o",r._length-1)),d>e.e)break;n<p-1&&(r=shapePool.newElement(),y=!0,m.push(r),s=0)}return m},extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(t,e){var r=e/100,n=[0,0],i=t._length,a=0;for(a=0;a<i;a+=1)n[0]+=t.v[a][0],n[1]+=t.v[a][1];n[0]/=i,n[1]/=i;var o,s,l,c,u,h,f=shapePool.newElement();for(f.c=t.c,a=0;a<i;a+=1)o=t.v[a][0]+(n[0]-t.v[a][0])*r,s=t.v[a][1]+(n[1]-t.v[a][1])*r,l=t.o[a][0]+(n[0]-t.o[a][0])*-r,c=t.o[a][1]+(n[1]-t.o[a][1])*-r,u=t.i[a][0]+(n[0]-t.i[a][0])*-r,h=t.i[a][1]+(n[1]-t.i[a][1])*-r,f.setTripleAt(o,s,l,c,u,h,a);return f},PuckerAndBloatModifier.prototype.processShapes=function(t){var e,r,n,i,a,o,s=this.shapes.length,l=this.amount.v;if(0!==l)for(r=0;r<s;r+=1){if(o=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(o.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)o.addShape(this.processPath(e[n],l));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)};var TransformPropertyFactory=function(){var t=[0,0];function e(t,e,r){if(this.elem=t,this.frameId=-1,this.propType="transform",this.data=e,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(r||t),e.p&&e.p.s?(this.px=PropertyFactory.getProp(t,e.p.x,0,0,this),this.py=PropertyFactory.getProp(t,e.p.y,0,0,this),e.p.z&&(this.pz=PropertyFactory.getProp(t,e.p.z,0,0,this))):this.p=PropertyFactory.getProp(t,e.p||{k:[0,0,0]},1,0,this),e.rx){if(this.rx=PropertyFactory.getProp(t,e.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(t,e.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(t,e.rz,0,degToRads,this),e.or.k[0].ti){var n,i=e.or.k.length;for(n=0;n<i;n+=1)e.or.k[n].to=null,e.or.k[n].ti=null}this.or=PropertyFactory.getProp(t,e.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(t,e.r||{k:0},0,degToRads,this);e.sk&&(this.sk=PropertyFactory.getProp(t,e.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(t,e.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(t,e.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(t,e.s||{k:[100,100,100]},1,.01,this),e.o?this.o=PropertyFactory.getProp(t,e.o,0,.01,t):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}return e.prototype={applyToMatrix:function(t){var e=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||e,this.a&&t.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&t.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&t.skewFromAxis(-this.sk.v,this.sa.v),this.r?t.rotate(-this.r.v):t.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?t.translate(this.px.v,this.py.v,-this.pz.v):t.translate(this.px.v,this.py.v,0):t.translate(this.p.v[0],this.p.v[1],-this.p.v[2])},getValue:function(e){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||e){var r;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var n,i;if(r=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(n=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/r,0),i=this.p.getValueAtTime(this.p.keyframes[0].t/r,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(n=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/r,0),i=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/r,0)):(n=this.p.pv,i=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/r,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){n=[],i=[];var a=this.px,o=this.py;a._caching.lastFrame+a.offsetTime<=a.keyframes[0].t?(n[0]=a.getValueAtTime((a.keyframes[0].t+.01)/r,0),n[1]=o.getValueAtTime((o.keyframes[0].t+.01)/r,0),i[0]=a.getValueAtTime(a.keyframes[0].t/r,0),i[1]=o.getValueAtTime(o.keyframes[0].t/r,0)):a._caching.lastFrame+a.offsetTime>=a.keyframes[a.keyframes.length-1].t?(n[0]=a.getValueAtTime(a.keyframes[a.keyframes.length-1].t/r,0),n[1]=o.getValueAtTime(o.keyframes[o.keyframes.length-1].t/r,0),i[0]=a.getValueAtTime((a.keyframes[a.keyframes.length-1].t-.01)/r,0),i[1]=o.getValueAtTime((o.keyframes[o.keyframes.length-1].t-.01)/r,0)):(n=[a.pv,o.pv],i[0]=a.getValueAtTime((a._caching.lastFrame+a.offsetTime-.01)/r,a.offsetTime),i[1]=o.getValueAtTime((o._caching.lastFrame+o.offsetTime-.01)/r,o.offsetTime))}else n=i=t;this.v.rotate(-Math.atan2(n[1]-i[1],n[0]-i[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}},precalculateMatrix:function(){if(this.appliedTransformations=0,this.pre.reset(),!this.a.effectsSequence.length&&(this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1,!this.s.effectsSequence.length)){if(this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2,this.sk){if(this.sk.effectsSequence.length||this.sa.effectsSequence.length)return;this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3}this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):this.rz.effectsSequence.length||this.ry.effectsSequence.length||this.rx.effectsSequence.length||this.or.effectsSequence.length||(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}},autoOrient:function(){}},extendPrototype([DynamicPropertyContainer],e),e.prototype.addDynamicProperty=function(t){this._addDynamicProperty(t),this.elem.addDynamicProperty(t),this._isDirty=!0},e.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty,{getTransformProperty:function(t,r,n){return new e(t,r,n)}}}();function RepeaterModifier(){}function RoundCornersModifier(){}function floatEqual(t,e){return 1e5*Math.abs(t-e)<=Math.min(Math.abs(t),Math.abs(e))}function floatZero(t){return Math.abs(t)<=1e-5}function lerp(t,e,r){return t*(1-r)+e*r}function lerpPoint(t,e,r){return[lerp(t[0],e[0],r),lerp(t[1],e[1],r)]}function quadRoots(t,e,r){if(0===t)return[];var n=e*e-4*t*r;if(n<0)return[];var i=-e/(2*t);if(0===n)return[i];var a=Math.sqrt(n)/(2*t);return[i-a,i+a]}function polynomialCoefficients(t,e,r,n){return[3*e-t-3*r+n,3*t-6*e+3*r,-3*t+3*e,t]}function singlePoint(t){return new PolynomialBezier(t,t,t,t,!1)}function PolynomialBezier(t,e,r,n,i){i&&pointEqual(t,e)&&(e=lerpPoint(t,n,1/3)),i&&pointEqual(r,n)&&(r=lerpPoint(t,n,2/3));var a=polynomialCoefficients(t[0],e[0],r[0],n[0]),o=polynomialCoefficients(t[1],e[1],r[1],n[1]);this.a=[a[0],o[0]],this.b=[a[1],o[1]],this.c=[a[2],o[2]],this.d=[a[3],o[3]],this.points=[t,e,r,n]}function extrema(t,e){var r=t.points[0][e],n=t.points[t.points.length-1][e];if(r>n){var i=n;n=r,r=i}for(var a=quadRoots(3*t.a[e],2*t.b[e],t.c[e]),o=0;o<a.length;o+=1)if(a[o]>0&&a[o]<1){var s=t.point(a[o])[e];s<r?r=s:s>n&&(n=s)}return{min:r,max:n}}function intersectData(t,e,r){var n=t.boundingBox();return{cx:n.cx,cy:n.cy,width:n.width,height:n.height,bez:t,t:(e+r)/2,t1:e,t2:r}}function splitData(t){var e=t.bez.split(.5);return[intersectData(e[0],t.t1,t.t),intersectData(e[1],t.t,t.t2)]}function boxIntersect(t,e){return 2*Math.abs(t.cx-e.cx)<t.width+e.width&&2*Math.abs(t.cy-e.cy)<t.height+e.height}function intersectsImpl(t,e,r,n,i,a){if(boxIntersect(t,e))if(r>=a||t.width<=n&&t.height<=n&&e.width<=n&&e.height<=n)i.push([t.t,e.t]);else{var o=splitData(t),s=splitData(e);intersectsImpl(o[0],s[0],r+1,n,i,a),intersectsImpl(o[0],s[1],r+1,n,i,a),intersectsImpl(o[1],s[0],r+1,n,i,a),intersectsImpl(o[1],s[1],r+1,n,i,a)}}function crossProduct(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function lineIntersection(t,e,r,n){var i=[t[0],t[1],1],a=[e[0],e[1],1],o=[r[0],r[1],1],s=[n[0],n[1],1],l=crossProduct(crossProduct(i,a),crossProduct(o,s));return floatZero(l[2])?null:[l[0]/l[2],l[1]/l[2]]}function polarOffset(t,e,r){return[t[0]+Math.cos(e)*r,t[1]-Math.sin(e)*r]}function pointDistance(t,e){return Math.hypot(t[0]-e[0],t[1]-e[1])}function pointEqual(t,e){return floatEqual(t[0],e[0])&&floatEqual(t[1],e[1])}function ZigZagModifier(){}function setPoint(t,e,r,n,i,a,o){var s=r-Math.PI/2,l=r+Math.PI/2,c=e[0]+Math.cos(r)*n*i,u=e[1]-Math.sin(r)*n*i;t.setTripleAt(c,u,c+Math.cos(s)*a,u-Math.sin(s)*a,c+Math.cos(l)*o,u-Math.sin(l)*o,t.length())}function getPerpendicularVector(t,e){var r=[e[0]-t[0],e[1]-t[1]],n=.5*-Math.PI;return[Math.cos(n)*r[0]-Math.sin(n)*r[1],Math.sin(n)*r[0]+Math.cos(n)*r[1]]}function getProjectingAngle(t,e){var r=0===e?t.length()-1:e-1,n=(e+1)%t.length(),i=getPerpendicularVector(t.v[r],t.v[n]);return Math.atan2(0,1)-Math.atan2(i[1],i[0])}function zigZagCorner(t,e,r,n,i,a,o){var s=getProjectingAngle(e,r),l=e.v[r%e._length],c=e.v[0===r?e._length-1:r-1],u=e.v[(r+1)%e._length],h=2===a?Math.sqrt(Math.pow(l[0]-c[0],2)+Math.pow(l[1]-c[1],2)):0,f=2===a?Math.sqrt(Math.pow(l[0]-u[0],2)+Math.pow(l[1]-u[1],2)):0;setPoint(t,e.v[r%e._length],s,o,n,f/(2*(i+1)),h/(2*(i+1)),a)}function zigZagSegment(t,e,r,n,i,a){for(var o=0;o<n;o+=1){var s=(o+1)/(n+1),l=2===i?Math.sqrt(Math.pow(e.points[3][0]-e.points[0][0],2)+Math.pow(e.points[3][1]-e.points[0][1],2)):0,c=e.normalAngle(s);setPoint(t,e.point(s),c,a,r,l/(2*(n+1)),l/(2*(n+1)),i),a=-a}return a}function linearOffset(t,e,r){var n=Math.atan2(e[0]-t[0],e[1]-t[1]);return[polarOffset(t,n,r),polarOffset(e,n,r)]}function offsetSegment(t,e){var r,n,i,a,o,s,l;r=(l=linearOffset(t.points[0],t.points[1],e))[0],n=l[1],i=(l=linearOffset(t.points[1],t.points[2],e))[0],a=l[1],o=(l=linearOffset(t.points[2],t.points[3],e))[0],s=l[1];var c=lineIntersection(r,n,i,a);null===c&&(c=n);var u=lineIntersection(o,s,i,a);return null===u&&(u=o),new PolynomialBezier(r,c,u,s)}function joinLines(t,e,r,n,i){var a=e.points[3],o=r.points[0];if(3===n)return a;if(pointEqual(a,o))return a;if(2===n){var s=-e.tangentAngle(1),l=-r.tangentAngle(0)+Math.PI,c=lineIntersection(a,polarOffset(a,s+Math.PI/2,100),o,polarOffset(o,s+Math.PI/2,100)),u=c?pointDistance(c,a):pointDistance(a,o)/2,h=polarOffset(a,s,2*u*roundCorner);return t.setXYAt(h[0],h[1],"o",t.length()-1),h=polarOffset(o,l,2*u*roundCorner),t.setTripleAt(o[0],o[1],o[0],o[1],h[0],h[1],t.length()),o}var f=lineIntersection(pointEqual(a,e.points[2])?e.points[0]:e.points[2],a,o,pointEqual(o,r.points[1])?r.points[3]:r.points[1]);return f&&pointDistance(f,a)<i?(t.setTripleAt(f[0],f[1],f[0],f[1],f[0],f[1],t.length()),f):a}function getIntersection(t,e){var r=t.intersections(e);return r.length&&floatEqual(r[0][0],1)&&r.shift(),r.length?r[0]:null}function pruneSegmentIntersection(t,e){var r=t.slice(),n=e.slice(),i=getIntersection(t[t.length-1],e[0]);return i&&(r[t.length-1]=t[t.length-1].split(i[0])[0],n[0]=e[0].split(i[1])[1]),t.length>1&&e.length>1&&(i=getIntersection(t[0],e[e.length-1]))?[[t[0].split(i[0])[0]],[e[e.length-1].split(i[1])[1]]]:[r,n]}function pruneIntersections(t){for(var e,r=1;r<t.length;r+=1)e=pruneSegmentIntersection(t[r-1],t[r]),t[r-1]=e[0],t[r]=e[1];return t.length>1&&(e=pruneSegmentIntersection(t[t.length-1],t[0]),t[t.length-1]=e[0],t[0]=e[1]),t}function offsetSegmentSplit(t,e){var r,n,i,a,o=t.inflectionPoints();if(0===o.length)return[offsetSegment(t,e)];if(1===o.length||floatEqual(o[1],1))return r=(i=t.split(o[0]))[0],n=i[1],[offsetSegment(r,e),offsetSegment(n,e)];r=(i=t.split(o[0]))[0];var s=(o[1]-o[0])/(1-o[0]);return a=(i=i[1].split(s))[0],n=i[1],[offsetSegment(r,e),offsetSegment(a,e),offsetSegment(n,e)]}function OffsetPathModifier(){}function getFontProperties(t){for(var e=t.fStyle?t.fStyle.split(" "):[],r="normal",n="normal",i=e.length,a=0;a<i;a+=1)switch(e[a].toLowerCase()){case"italic":n="italic";break;case"bold":r="700";break;case"black":r="900";break;case"medium":r="500";break;case"regular":case"normal":r="400";break;case"light":case"thin":r="200"}return{style:n,weight:t.fWeight||r}}extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(t,e.c,0,null,this),this.o=PropertyFactory.getProp(t,e.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(t,e.tr,this),this.so=PropertyFactory.getProp(t,e.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(t,e.tr.eo,0,.01,this),this.data=e,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(t,e,r,n,i,a){var o=a?-1:1,s=n.s.v[0]+(1-n.s.v[0])*(1-i),l=n.s.v[1]+(1-n.s.v[1])*(1-i);t.translate(n.p.v[0]*o*i,n.p.v[1]*o*i,n.p.v[2]),e.translate(-n.a.v[0],-n.a.v[1],n.a.v[2]),e.rotate(-n.r.v*o*i),e.translate(n.a.v[0],n.a.v[1],n.a.v[2]),r.translate(-n.a.v[0],-n.a.v[1],n.a.v[2]),r.scale(a?1/s:s,a?1/l:l),r.translate(n.a.v[0],n.a.v[1],n.a.v[2])},RepeaterModifier.prototype.init=function(t,e,r,n){for(this.elem=t,this.arr=e,this.pos=r,this.elemsData=n,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e[r]);r>0;)r-=1,this._elements.unshift(e[r]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e]._processed=!1,"gr"===t[e].ty&&this.resetElements(t[e].it)},RepeaterModifier.prototype.cloneElements=function(t){var e=JSON.parse(JSON.stringify(t));return this.resetElements(e),e},RepeaterModifier.prototype.changeGroupRender=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)t[r]._render=e,"gr"===t[r].ty&&this.changeGroupRender(t[r].it,e)},RepeaterModifier.prototype.processShapes=function(t){var e,r,n,i,a,o=!1;if(this._mdf||t){var s,l=Math.ceil(this.c.v);if(this._groups.length<l){for(;this._groups.length<l;){var c={it:this.cloneElements(this._elements),ty:"gr"};c.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,c),this._groups.splice(0,0,c),this._currentCopies+=1}this.elem.reloadShapes(),o=!0}for(a=0,n=0;n<=this._groups.length-1;n+=1){if(s=a<l,this._groups[n]._render=s,this.changeGroupRender(this._groups[n].it,s),!s){var u=this.elemsData[n].it,h=u[u.length-1];0!==h.transform.op.v?(h.transform.op._mdf=!0,h.transform.op.v=0):h.transform.op._mdf=!1}a+=1}this._currentCopies=l;var f=this.o.v,p=f%1,d=f>0?Math.floor(f):Math.ceil(f),m=this.pMatrix.props,y=this.rMatrix.props,v=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var g,b,x=0;if(f>0){for(;x<d;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),x+=1;p&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,p,!1),x+=p)}else if(f<0){for(;x>d;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),x-=1;p&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-p,!0),x-=p)}for(n=1===this.data.m?0:this._currentCopies-1,i=1===this.data.m?1:-1,a=this._currentCopies;a;){if(b=(r=(e=this.elemsData[n].it)[e.length-1].transform.mProps.v.props).length,e[e.length-1].transform.mProps._mdf=!0,e[e.length-1].transform.op._mdf=!0,e[e.length-1].transform.op.v=1===this._currentCopies?this.so.v:this.so.v+(this.eo.v-this.so.v)*(n/(this._currentCopies-1)),0!==x){for((0!==n&&1===i||n!==this._currentCopies-1&&-1===i)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(y[0],y[1],y[2],y[3],y[4],y[5],y[6],y[7],y[8],y[9],y[10],y[11],y[12],y[13],y[14],y[15]),this.matrix.transform(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],v[9],v[10],v[11],v[12],v[13],v[14],v[15]),this.matrix.transform(m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15]),g=0;g<b;g+=1)r[g]=this.matrix.props[g];this.matrix.reset()}else for(this.matrix.reset(),g=0;g<b;g+=1)r[g]=this.matrix.props[g];x+=1,a-=1,n+=i}}else for(a=this._currentCopies,n=0,i=1;a;)r=(e=this.elemsData[n].it)[e.length-1].transform.mProps.v.props,e[e.length-1].transform.mProps._mdf=!1,e[e.length-1].transform.op._mdf=!1,a-=1,n+=i;return o},RepeaterModifier.prototype.addShape=function(){},extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(t,e.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(t,e){var r,n=shapePool.newElement();n.c=t.c;var i,a,o,s,l,c,u,h,f,p,d,m,y=t._length,v=0;for(r=0;r<y;r+=1)i=t.v[r],o=t.o[r],a=t.i[r],i[0]===o[0]&&i[1]===o[1]&&i[0]===a[0]&&i[1]===a[1]?0!==r&&r!==y-1||t.c?(s=0===r?t.v[y-1]:t.v[r-1],c=(l=Math.sqrt(Math.pow(i[0]-s[0],2)+Math.pow(i[1]-s[1],2)))?Math.min(l/2,e)/l:0,u=d=i[0]+(s[0]-i[0])*c,h=m=i[1]-(i[1]-s[1])*c,f=u-(u-i[0])*roundCorner,p=h-(h-i[1])*roundCorner,n.setTripleAt(u,h,f,p,d,m,v),v+=1,s=r===y-1?t.v[0]:t.v[r+1],c=(l=Math.sqrt(Math.pow(i[0]-s[0],2)+Math.pow(i[1]-s[1],2)))?Math.min(l/2,e)/l:0,u=f=i[0]+(s[0]-i[0])*c,h=p=i[1]+(s[1]-i[1])*c,d=u-(u-i[0])*roundCorner,m=h-(h-i[1])*roundCorner,n.setTripleAt(u,h,f,p,d,m,v),v+=1):(n.setTripleAt(i[0],i[1],o[0],o[1],a[0],a[1],v),v+=1):(n.setTripleAt(t.v[r][0],t.v[r][1],t.o[r][0],t.o[r][1],t.i[r][0],t.i[r][1],v),v+=1);return n},RoundCornersModifier.prototype.processShapes=function(t){var e,r,n,i,a,o,s=this.shapes.length,l=this.rd.v;if(0!==l)for(r=0;r<s;r+=1){if(o=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(o.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)o.addShape(this.processPath(e[n],l));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)},PolynomialBezier.prototype.point=function(t){return[((this.a[0]*t+this.b[0])*t+this.c[0])*t+this.d[0],((this.a[1]*t+this.b[1])*t+this.c[1])*t+this.d[1]]},PolynomialBezier.prototype.derivative=function(t){return[(3*t*this.a[0]+2*this.b[0])*t+this.c[0],(3*t*this.a[1]+2*this.b[1])*t+this.c[1]]},PolynomialBezier.prototype.tangentAngle=function(t){var e=this.derivative(t);return Math.atan2(e[1],e[0])},PolynomialBezier.prototype.normalAngle=function(t){var e=this.derivative(t);return Math.atan2(e[0],e[1])},PolynomialBezier.prototype.inflectionPoints=function(){var t=this.a[1]*this.b[0]-this.a[0]*this.b[1];if(floatZero(t))return[];var e=-.5*(this.a[1]*this.c[0]-this.a[0]*this.c[1])/t,r=e*e-1/3*(this.b[1]*this.c[0]-this.b[0]*this.c[1])/t;if(r<0)return[];var n=Math.sqrt(r);return floatZero(n)?n>0&&n<1?[e]:[]:[e-n,e+n].filter((function(t){return t>0&&t<1}))},PolynomialBezier.prototype.split=function(t){if(t<=0)return[singlePoint(this.points[0]),this];if(t>=1)return[this,singlePoint(this.points[this.points.length-1])];var e=lerpPoint(this.points[0],this.points[1],t),r=lerpPoint(this.points[1],this.points[2],t),n=lerpPoint(this.points[2],this.points[3],t),i=lerpPoint(e,r,t),a=lerpPoint(r,n,t),o=lerpPoint(i,a,t);return[new PolynomialBezier(this.points[0],e,i,o,!0),new PolynomialBezier(o,a,n,this.points[3],!0)]},PolynomialBezier.prototype.bounds=function(){return{x:extrema(this,0),y:extrema(this,1)}},PolynomialBezier.prototype.boundingBox=function(){var t=this.bounds();return{left:t.x.min,right:t.x.max,top:t.y.min,bottom:t.y.max,width:t.x.max-t.x.min,height:t.y.max-t.y.min,cx:(t.x.max+t.x.min)/2,cy:(t.y.max+t.y.min)/2}},PolynomialBezier.prototype.intersections=function(t,e,r){void 0===e&&(e=2),void 0===r&&(r=7);var n=[];return intersectsImpl(intersectData(this,0,1),intersectData(t,0,1),0,e,n,r),n},PolynomialBezier.shapeSegment=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[e],t.o[e],t.i[r],t.v[r],!0)},PolynomialBezier.shapeSegmentInverted=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[r],t.i[r],t.o[e],t.v[e],!0)},extendPrototype([ShapeModifier],ZigZagModifier),ZigZagModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amplitude=PropertyFactory.getProp(t,e.s,0,null,this),this.frequency=PropertyFactory.getProp(t,e.r,0,null,this),this.pointsType=PropertyFactory.getProp(t,e.pt,0,null,this),this._isAnimated=0!==this.amplitude.effectsSequence.length||0!==this.frequency.effectsSequence.length||0!==this.pointsType.effectsSequence.length},ZigZagModifier.prototype.processPath=function(t,e,r,n){var i=t._length,a=shapePool.newElement();if(a.c=t.c,t.c||(i-=1),0===i)return a;var o=-1,s=PolynomialBezier.shapeSegment(t,0);zigZagCorner(a,t,0,e,r,n,o);for(var l=0;l<i;l+=1)o=zigZagSegment(a,s,e,r,n,-o),s=l!==i-1||t.c?PolynomialBezier.shapeSegment(t,(l+1)%i):null,zigZagCorner(a,t,l+1,e,r,n,o);return a},ZigZagModifier.prototype.processShapes=function(t){var e,r,n,i,a,o,s=this.shapes.length,l=this.amplitude.v,c=Math.max(0,Math.round(this.frequency.v)),u=this.pointsType.v;if(0!==l)for(r=0;r<s;r+=1){if(o=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(o.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)o.addShape(this.processPath(e[n],l,c,u));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)},extendPrototype([ShapeModifier],OffsetPathModifier),OffsetPathModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this.miterLimit=PropertyFactory.getProp(t,e.ml,0,null,this),this.lineJoin=e.lj,this._isAnimated=0!==this.amount.effectsSequence.length},OffsetPathModifier.prototype.processPath=function(t,e,r,n){var i=shapePool.newElement();i.c=t.c;var a,o,s,l=t.length();t.c||(l-=1);var c=[];for(a=0;a<l;a+=1)s=PolynomialBezier.shapeSegment(t,a),c.push(offsetSegmentSplit(s,e));if(!t.c)for(a=l-1;a>=0;a-=1)s=PolynomialBezier.shapeSegmentInverted(t,a),c.push(offsetSegmentSplit(s,e));c=pruneIntersections(c);var u=null,h=null;for(a=0;a<c.length;a+=1){var f=c[a];for(h&&(u=joinLines(i,h,f[0],r,n)),h=f[f.length-1],o=0;o<f.length;o+=1)s=f[o],u&&pointEqual(s.points[0],u)?i.setXYAt(s.points[1][0],s.points[1][1],"o",i.length()-1):i.setTripleAt(s.points[0][0],s.points[0][1],s.points[1][0],s.points[1][1],s.points[0][0],s.points[0][1],i.length()),i.setTripleAt(s.points[3][0],s.points[3][1],s.points[3][0],s.points[3][1],s.points[2][0],s.points[2][1],i.length()),u=s.points[3]}return c.length&&joinLines(i,h,c[0][0],r,n),i},OffsetPathModifier.prototype.processShapes=function(t){var e,r,n,i,a,o,s=this.shapes.length,l=this.amount.v,c=this.miterLimit.v,u=this.lineJoin;if(0!==l)for(r=0;r<s;r+=1){if(o=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(o.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)o.addShape(this.processPath(e[n],l,u,c));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)};var FontManager=function(){var t={w:0,size:0,shapes:[],data:{shapes:[]}},e=[];e=e.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var r=127988,n=["d83cdffb","d83cdffc","d83cdffd","d83cdffe","d83cdfff"];function i(t,e){var r=createTag("span");r.setAttribute("aria-hidden",!0),r.style.fontFamily=e;var n=createTag("span");n.innerText="giItT1WQy@!-/#",r.style.position="absolute",r.style.left="-10000px",r.style.top="-10000px",r.style.fontSize="300px",r.style.fontVariant="normal",r.style.fontStyle="normal",r.style.fontWeight="normal",r.style.letterSpacing="0",r.appendChild(n),document.body.appendChild(r);var i=n.offsetWidth;return n.style.fontFamily=function(t){var e,r=t.split(","),n=r.length,i=[];for(e=0;e<n;e+=1)"sans-serif"!==r[e]&&"monospace"!==r[e]&&i.push(r[e]);return i.join(",")}(t)+", "+e,{node:n,w:i,parent:r}}function a(t,e){var r,n=document.body&&e?"svg":"canvas",i=getFontProperties(t);if("svg"===n){var a=createNS("text");a.style.fontSize="100px",a.setAttribute("font-family",t.fFamily),a.setAttribute("font-style",i.style),a.setAttribute("font-weight",i.weight),a.textContent="1",t.fClass?(a.style.fontFamily="inherit",a.setAttribute("class",t.fClass)):a.style.fontFamily=t.fFamily,e.appendChild(a),r=a}else{var o=new OffscreenCanvas(500,500).getContext("2d");o.font=i.style+" "+i.weight+" 100px "+t.fFamily,r=o}return{measureText:function(t){return"svg"===n?(r.textContent=t,r.getComputedTextLength()):r.measureText(t).width}}}function o(t){var e=0,r=t.charCodeAt(0);if(r>=55296&&r<=56319){var n=t.charCodeAt(1);n>=56320&&n<=57343&&(e=1024*(r-55296)+n-56320+65536)}return e}function s(t){var e=o(t);return e>=127462&&e<=127487}var l=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};l.isModifier=function(t,e){var r=t.toString(16)+e.toString(16);return-1!==n.indexOf(r)},l.isZeroWidthJoiner=function(t){return 8205===t},l.isFlagEmoji=function(t){return s(t.substr(0,2))&&s(t.substr(2,2))},l.isRegionalCode=s,l.isCombinedCharacter=function(t){return-1!==e.indexOf(t)},l.isRegionalFlag=function(t,e){var n=o(t.substr(e,2));if(n!==r)return!1;var i=0;for(e+=2;i<5;){if((n=o(t.substr(e,2)))<917601||n>917626)return!1;i+=1,e+=2}return 917631===o(t.substr(e,2))},l.isVariationSelector=function(t){return 65039===t},l.BLACK_FLAG_CODE_POINT=r;var c={addChars:function(t){if(t){var e;this.chars||(this.chars=[]);var r,n,i=t.length,a=this.chars.length;for(e=0;e<i;e+=1){for(r=0,n=!1;r<a;)this.chars[r].style===t[e].style&&this.chars[r].fFamily===t[e].fFamily&&this.chars[r].ch===t[e].ch&&(n=!0),r+=1;n||(this.chars.push(t[e]),a+=1)}}},addFonts:function(t,e){if(t){if(this.chars)return this.isLoaded=!0,void(this.fonts=t.list);if(!document.body)return this.isLoaded=!0,t.list.forEach((function(t){t.helper=a(t),t.cache={}})),void(this.fonts=t.list);var r,n=t.list,o=n.length,s=o;for(r=0;r<o;r+=1){var l,c,u=!0;if(n[r].loaded=!1,n[r].monoCase=i(n[r].fFamily,"monospace"),n[r].sansCase=i(n[r].fFamily,"sans-serif"),n[r].fPath){if("p"===n[r].fOrigin||3===n[r].origin){if((l=document.querySelectorAll('style[f-forigin="p"][f-family="'+n[r].fFamily+'"], style[f-origin="3"][f-family="'+n[r].fFamily+'"]')).length>0&&(u=!1),u){var h=createTag("style");h.setAttribute("f-forigin",n[r].fOrigin),h.setAttribute("f-origin",n[r].origin),h.setAttribute("f-family",n[r].fFamily),h.type="text/css",h.innerText="@font-face {font-family: "+n[r].fFamily+"; font-style: normal; src: url('"+n[r].fPath+"');}",e.appendChild(h)}}else if("g"===n[r].fOrigin||1===n[r].origin){for(l=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),c=0;c<l.length;c+=1)-1!==l[c].href.indexOf(n[r].fPath)&&(u=!1);if(u){var f=createTag("link");f.setAttribute("f-forigin",n[r].fOrigin),f.setAttribute("f-origin",n[r].origin),f.type="text/css",f.rel="stylesheet",f.href=n[r].fPath,document.body.appendChild(f)}}else if("t"===n[r].fOrigin||2===n[r].origin){for(l=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),c=0;c<l.length;c+=1)n[r].fPath===l[c].src&&(u=!1);if(u){var p=createTag("link");p.setAttribute("f-forigin",n[r].fOrigin),p.setAttribute("f-origin",n[r].origin),p.setAttribute("rel","stylesheet"),p.setAttribute("href",n[r].fPath),e.appendChild(p)}}}else n[r].loaded=!0,s-=1;n[r].helper=a(n[r],e),n[r].cache={},this.fonts.push(n[r])}0===s?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}else this.isLoaded=!0},getCharData:function(e,r,n){for(var i=0,a=this.chars.length;i<a;){if(this.chars[i].ch===e&&this.chars[i].style===r&&this.chars[i].fFamily===n)return this.chars[i];i+=1}return("string"==typeof e&&13!==e.charCodeAt(0)||!e)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",e,r,n)),t},getFontByName:function(t){for(var e=0,r=this.fonts.length;e<r;){if(this.fonts[e].fName===t)return this.fonts[e];e+=1}return this.fonts[0]},measureText:function(t,e,r){var n=this.getFontByName(e),i=t;if(!n.cache[i]){var a=n.helper;if(" "===t){var o=a.measureText("|"+t+"|"),s=a.measureText("||");n.cache[i]=(o-s)/100}else n.cache[i]=a.measureText(t)/100}return n.cache[i]*r},checkLoadedFonts:function(){var t,e,r,n=this.fonts.length,i=n;for(t=0;t<n;t+=1)this.fonts[t].loaded?i-=1:"n"===this.fonts[t].fOrigin||0===this.fonts[t].origin?this.fonts[t].loaded=!0:(e=this.fonts[t].monoCase.node,r=this.fonts[t].monoCase.w,e.offsetWidth!==r?(i-=1,this.fonts[t].loaded=!0):(e=this.fonts[t].sansCase.node,r=this.fonts[t].sansCase.w,e.offsetWidth!==r&&(i-=1,this.fonts[t].loaded=!0)),this.fonts[t].loaded&&(this.fonts[t].sansCase.parent.parentNode.removeChild(this.fonts[t].sansCase.parent),this.fonts[t].monoCase.parent.parentNode.removeChild(this.fonts[t].monoCase.parent)));0!==i&&Date.now()-this.initTime<5e3?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)},setIsLoaded:function(){this.isLoaded=!0}};return l.prototype=c,l}();function SlotManager(t){this.animationData=t}function slotFactory(t){return new SlotManager(t)}function RenderableElement(){}SlotManager.prototype.getProp=function(t){return this.animationData.slots&&this.animationData.slots[t.sid]?Object.assign(t,this.animationData.slots[t.sid].p):t},RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(t){-1===this.renderableComponents.indexOf(t)&&this.renderableComponents.push(t)},removeRenderableComponent:function(t){-1!==this.renderableComponents.indexOf(t)&&this.renderableComponents.splice(this.renderableComponents.indexOf(t),1)},prepareRenderableFrame:function(t){this.checkLayerLimits(t)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(t){this.data.ip-this.data.st<=t&&this.data.op-this.data.st>t?!0!==this.isInRange&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):!1!==this.isInRange&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var t,e=this.renderableComponents.length;for(t=0;t<e;t+=1)this.renderableComponents[t].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return 5===this.data.ty?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}};var getBlendMode=(blendModeEnums={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"},function(t){return blendModeEnums[t]||""}),blendModeEnums;function SliderEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function AngleEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function ColorEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function PointEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function LayerIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function MaskIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function CheckboxEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function NoValueEffect(){this.p={}}function EffectsManager(t,e){var r,n=t.ef||[];this.effectElements=[];var i,a=n.length;for(r=0;r<a;r+=1)i=new GroupEffect(n[r],e),this.effectElements.push(i)}function GroupEffect(t,e){this.init(t,e)}function BaseElement(){}function FrameElement(){}function FootageElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.footageData=e.imageLoader.getAsset(this.assetData),this.initBaseData(t,e,r)}function AudioElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.initBaseData(t,e,r),this._isPlaying=!1,this._canPlay=!1;var n=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(n),this._currentTime=0,this.globalData.audioController.addAudio(this),this._volumeMultiplier=1,this._volume=1,this._previousVolume=null,this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0},this.lv=PropertyFactory.getProp(this,t.au&&t.au.lv?t.au.lv:{k:[100]},1,.01,this)}function BaseRenderer(){}extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(t,e){var r;this.data=t,this.effectElements=[],this.initDynamicPropertyContainer(e);var n,i=this.data.ef.length,a=this.data.ef;for(r=0;r<i;r+=1){switch(n=null,a[r].ty){case 0:n=new SliderEffect(a[r],e,this);break;case 1:n=new AngleEffect(a[r],e,this);break;case 2:n=new ColorEffect(a[r],e,this);break;case 3:n=new PointEffect(a[r],e,this);break;case 4:case 7:n=new CheckboxEffect(a[r],e,this);break;case 10:n=new LayerIndexEffect(a[r],e,this);break;case 11:n=new MaskIndexEffect(a[r],e,this);break;case 5:n=new EffectsManager(a[r],e,this);break;default:n=new NoValueEffect(a[r],e,this)}n&&this.effectElements.push(n)}},BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var t=0,e=this.data.masksProperties.length;t<e;){if("n"!==this.data.masksProperties[t].mode&&!1!==this.data.masksProperties[t].cl)return!0;t+=1}return!1},initExpressions:function(){var t=getExpressionInterfaces();if(t){var e=t("layer"),r=t("effects"),n=t("shape"),i=t("text"),a=t("comp");this.layerInterface=e(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var o=r.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(o),0===this.data.ty||this.data.xt?this.compInterface=a(this):4===this.data.ty?(this.layerInterface.shapeInterface=n(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):5===this.data.ty&&(this.layerInterface.textInterface=i(this),this.layerInterface.text=this.layerInterface.textInterface)}},setBlendMode:function(){var t=getBlendMode(this.data.bm);(this.baseElement||this.layerElement).style["mix-blend-mode"]=t},initBaseData:function(t,e,r){this.globalData=e,this.comp=r,this.data=t,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}},FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(t,e){var r,n=this.dynamicProperties.length;for(r=0;r<n;r+=1)(e||this._isParent&&"transform"===this.dynamicProperties[r].propType)&&(this.dynamicProperties[r].getValue(),this.dynamicProperties[r]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(t){-1===this.dynamicProperties.indexOf(t)&&this.dynamicProperties.push(t)}},FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){var t=getExpressionInterfaces();if(t){var e=t("footage");this.layerInterface=e(this)}},FootageElement.prototype.getFootageData=function(){return this.footageData},AudioElement.prototype.prepareFrame=function(t){if(this.prepareRenderableFrame(t,!0),this.prepareProperties(t,!0),this.tm._placeholder)this._currentTime=t/this.data.sr;else{var e=this.tm.v;this._currentTime=e}this._volume=this.lv.v[0];var r=this._volume*this._volumeMultiplier;this._previousVolume!==r&&(this._previousVolume=r,this.audio.volume(r))},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(t){this.audio.rate(t)},AudioElement.prototype.volume=function(t){this._volumeMultiplier=t,this._previousVolume=t*this._volume,this.audio.volume(this._previousVolume)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){},BaseRenderer.prototype.checkLayers=function(t){var e,r,n=this.layers.length;for(this.completeLayers=!0,e=n-1;e>=0;e-=1)this.elements[e]||(r=this.layers[e]).ip-r.st<=t-this.layers[e].st&&r.op-r.st>t-this.layers[e].st&&this.buildItem(e),this.completeLayers=!!this.elements[e]&&this.completeLayers;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(t){switch(t.ty){case 2:return this.createImage(t);case 0:return this.createComp(t);case 1:return this.createSolid(t);case 3:default:return this.createNull(t);case 4:return this.createShape(t);case 5:return this.createText(t);case 6:return this.createAudio(t);case 13:return this.createCamera(t);case 15:return this.createFootage(t)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(t){return new AudioElement(t,this.globalData,this)},BaseRenderer.prototype.createFootage=function(t){return new FootageElement(t,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.buildItem(t);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(t){var e;this.completeLayers=!1;var r,n=t.length,i=this.layers.length;for(e=0;e<n;e+=1)for(r=0;r<i;){if(this.layers[r].id===t[e].id){this.layers[r]=t[e];break}r+=1}},BaseRenderer.prototype.setProjectInterface=function(t){this.globalData.projectInterface=t},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(t,e,r){for(var n=this.elements,i=this.layers,a=0,o=i.length;a<o;)i[a].ind==e&&(n[a]&&!0!==n[a]?(r.push(n[a]),n[a].setAsParent(),void 0!==i[a].parent?this.buildElementParenting(t,i[a].parent,r):t.setHierarchy(r)):(this.buildItem(a),this.addPendingElement(t))),a+=1},BaseRenderer.prototype.addPendingElement=function(t){this.pendingElements.push(t)},BaseRenderer.prototype.searchExtraCompositions=function(t){var e,r=t.length;for(e=0;e<r;e+=1)if(t[e].xt){var n=this.createComp(t[e]);n.initExpressions(),this.globalData.projectInterface.registerComposition(n)}},BaseRenderer.prototype.getElementById=function(t){var e,r=this.elements.length;for(e=0;e<r;e+=1)if(this.elements[e].data.ind===t)return this.elements[e];return null},BaseRenderer.prototype.getElementByPath=function(t){var e,r=t.shift();if("number"==typeof r)e=this.elements[r];else{var n,i=this.elements.length;for(n=0;n<i;n+=1)if(this.elements[n].data.nm===r){e=this.elements[n];break}}return 0===t.length?e:e.getElementByPath(t)},BaseRenderer.prototype.setupGlobalData=function(t,e){this.globalData.fontManager=new FontManager,this.globalData.slotManager=slotFactory(t),this.globalData.fontManager.addChars(t.chars),this.globalData.fontManager.addFonts(t.fonts,e),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=t.fr,this.globalData.nm=t.nm,this.globalData.compSize={w:t.w,h:t.h}};var effectTypes={TRANSFORM_EFFECT:"transformEFfect"};function TransformElement(){}function MaskElement(t,e,r){this.data=t,this.element=e,this.globalData=r,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var n,i,a=this.globalData.defs,o=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(o),this.solidPath="";var s,l,c,u,h,f,p=this.masksProperties,d=0,m=[],y=createElementID(),v="clipPath",g="clip-path";for(n=0;n<o;n+=1)if(("a"!==p[n].mode&&"n"!==p[n].mode||p[n].inv||100!==p[n].o.k||p[n].o.x)&&(v="mask",g="mask"),"s"!==p[n].mode&&"i"!==p[n].mode||0!==d?c=null:((c=createNS("rect")).setAttribute("fill","#ffffff"),c.setAttribute("width",this.element.comp.data.w||0),c.setAttribute("height",this.element.comp.data.h||0),m.push(c)),i=createNS("path"),"n"===p[n].mode)this.viewData[n]={op:PropertyFactory.getProp(this.element,p[n].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,p[n],3),elem:i,lastPath:""},a.appendChild(i);else{var b;if(d+=1,i.setAttribute("fill","s"===p[n].mode?"#000000":"#ffffff"),i.setAttribute("clip-rule","nonzero"),0!==p[n].x.k?(v="mask",g="mask",f=PropertyFactory.getProp(this.element,p[n].x,0,null,this.element),b=createElementID(),(u=createNS("filter")).setAttribute("id",b),(h=createNS("feMorphology")).setAttribute("operator","erode"),h.setAttribute("in","SourceGraphic"),h.setAttribute("radius","0"),u.appendChild(h),a.appendChild(u),i.setAttribute("stroke","s"===p[n].mode?"#000000":"#ffffff")):(h=null,f=null),this.storedData[n]={elem:i,x:f,expan:h,lastPath:"",lastOperator:"",filterId:b,lastRadius:0},"i"===p[n].mode){l=m.length;var x=createNS("g");for(s=0;s<l;s+=1)x.appendChild(m[s]);var w=createNS("mask");w.setAttribute("mask-type","alpha"),w.setAttribute("id",y+"_"+d),w.appendChild(i),a.appendChild(w),x.setAttribute("mask","url("+getLocationHref()+"#"+y+"_"+d+")"),m.length=0,m.push(x)}else m.push(i);p[n].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[n]={elem:i,lastPath:"",op:PropertyFactory.getProp(this.element,p[n].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,p[n],3),invRect:c},this.viewData[n].prop.k||this.drawPath(p[n],this.viewData[n].prop.v,this.viewData[n])}for(this.maskElement=createNS(v),o=m.length,n=0;n<o;n+=1)this.maskElement.appendChild(m[n]);d>0&&(this.maskElement.setAttribute("id",y),this.element.maskedElement.setAttribute(g,"url("+getLocationHref()+"#"+y+")"),a.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}TransformElement.prototype={initTransform:function(){var t=new Matrix;this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_localMatMdf:!1,_opMdf:!1,mat:t,localMat:t,localOpacity:1},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var t,e=this.finalTransform.mat,r=0,n=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;r<n;){if(this.hierarchy[r].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}r+=1}if(this.finalTransform._matMdf)for(t=this.finalTransform.mProp.v.props,e.cloneFromProps(t),r=0;r<n;r+=1)e.multiply(this.hierarchy[r].finalTransform.mProp.v)}this.finalTransform._matMdf&&(this.finalTransform._localMatMdf=this.finalTransform._matMdf),this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v)},renderLocalTransform:function(){if(this.localTransforms){var t=0,e=this.localTransforms.length;if(this.finalTransform._localMatMdf=this.finalTransform._matMdf,!this.finalTransform._localMatMdf||!this.finalTransform._opMdf)for(;t<e;)this.localTransforms[t]._mdf&&(this.finalTransform._localMatMdf=!0),this.localTransforms[t]._opMdf&&!this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v,this.finalTransform._opMdf=!0),t+=1;if(this.finalTransform._localMatMdf){var r=this.finalTransform.localMat;for(this.localTransforms[0].matrix.clone(r),t=1;t<e;t+=1){var n=this.localTransforms[t].matrix;r.multiply(n)}r.multiply(this.finalTransform.mat)}if(this.finalTransform._opMdf){var i=this.finalTransform.localOpacity;for(t=0;t<e;t+=1)i*=.01*this.localTransforms[t].opacity;this.finalTransform.localOpacity=i}}},searchEffectTransforms:function(){if(this.renderableEffectsManager){var t=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);if(t.length){this.localTransforms=[],this.finalTransform.localMat=new Matrix;var e=0,r=t.length;for(e=0;e<r;e+=1)this.localTransforms.push(t[e])}}},globalToLocal:function(t){var e=[];e.push(this.finalTransform);for(var r,n=!0,i=this.comp;n;)i.finalTransform?(i.data.hasMask&&e.splice(0,0,i.finalTransform),i=i.comp):n=!1;var a,o=e.length;for(r=0;r<o;r+=1)a=e[r].mat.applyToPointArray(0,0,0),t=[t[0]-a[0],t[1]-a[1],0];return t},mHelper:new Matrix},MaskElement.prototype.getMaskProperty=function(t){return this.viewData[t].prop},MaskElement.prototype.renderFrame=function(t){var e,r=this.element.finalTransform.mat,n=this.masksProperties.length;for(e=0;e<n;e+=1)if((this.viewData[e].prop._mdf||t)&&this.drawPath(this.masksProperties[e],this.viewData[e].prop.v,this.viewData[e]),(this.viewData[e].op._mdf||t)&&this.viewData[e].elem.setAttribute("fill-opacity",this.viewData[e].op.v),"n"!==this.masksProperties[e].mode&&(this.viewData[e].invRect&&(this.element.finalTransform.mProp._mdf||t)&&this.viewData[e].invRect.setAttribute("transform",r.getInverseMatrix().to2dCSS()),this.storedData[e].x&&(this.storedData[e].x._mdf||t))){var i=this.storedData[e].expan;this.storedData[e].x.v<0?("erode"!==this.storedData[e].lastOperator&&(this.storedData[e].lastOperator="erode",this.storedData[e].elem.setAttribute("filter","url("+getLocationHref()+"#"+this.storedData[e].filterId+")")),i.setAttribute("radius",-this.storedData[e].x.v)):("dilate"!==this.storedData[e].lastOperator&&(this.storedData[e].lastOperator="dilate",this.storedData[e].elem.setAttribute("filter",null)),this.storedData[e].elem.setAttribute("stroke-width",2*this.storedData[e].x.v))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var t="M0,0 ";return t+=" h"+this.globalData.compSize.w,t+=" v"+this.globalData.compSize.h,(t+=" h-"+this.globalData.compSize.w)+" v-"+this.globalData.compSize.h+" "},MaskElement.prototype.drawPath=function(t,e,r){var n,i,a=" M"+e.v[0][0]+","+e.v[0][1];for(i=e._length,n=1;n<i;n+=1)a+=" C"+e.o[n-1][0]+","+e.o[n-1][1]+" "+e.i[n][0]+","+e.i[n][1]+" "+e.v[n][0]+","+e.v[n][1];if(e.c&&i>1&&(a+=" C"+e.o[n-1][0]+","+e.o[n-1][1]+" "+e.i[0][0]+","+e.i[0][1]+" "+e.v[0][0]+","+e.v[0][1]),r.lastPath!==a){var o="";r.elem&&(e.c&&(o=t.inv?this.solidPath+a:a),r.elem.setAttribute("d",o)),r.lastPath=a}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null};var filtersFactory={createFilter:function(t,e){var r=createNS("filter");return r.setAttribute("id",t),!0!==e&&(r.setAttribute("filterUnits","objectBoundingBox"),r.setAttribute("x","0%"),r.setAttribute("y","0%"),r.setAttribute("width","100%"),r.setAttribute("height","100%")),r},createAlphaToLuminanceFilter:function(){var t=createNS("feColorMatrix");return t.setAttribute("type","matrix"),t.setAttribute("color-interpolation-filters","sRGB"),t.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),t}},featureSupport=function(){var t={maskType:!0,svgLumaHidden:!0,offscreenCanvas:"undefined"!=typeof OffscreenCanvas};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(t.maskType=!1),/firefox/i.test(navigator.userAgent)&&(t.svgLumaHidden=!1),t}(),registeredEffects$1={},idPrefix="filter_result_";function SVGEffects(t){var e,r,n="SourceGraphic",i=t.data.ef?t.data.ef.length:0,a=createElementID(),o=filtersFactory.createFilter(a,!0),s=0;for(this.filters=[],e=0;e<i;e+=1){r=null;var l=t.data.ef[e].ty;registeredEffects$1[l]&&(r=new(0,registeredEffects$1[l].effect)(o,t.effectsManager.effectElements[e],t,idPrefix+s,n),n=idPrefix+s,registeredEffects$1[l].countsAsEffect&&(s+=1)),r&&this.filters.push(r)}s&&(t.globalData.defs.appendChild(o),t.layerElement.setAttribute("filter","url("+getLocationHref()+"#"+a+")")),this.filters.length&&t.addRenderableComponent(this)}function registerEffect$1(t,e,r){registeredEffects$1[t]={effect:e,countsAsEffect:r}}function SVGBaseElement(){}function HierarchyElement(){}function RenderableDOMElement(){}function IImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.assetData&&this.assetData.sid&&(this.assetData=e.slotManager.getProp(this.assetData)),this.initElement(t,e,r),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}function ProcessedElement(t,e){this.elem=t,this.pos=e}function IShapeElement(){}SVGEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},SVGEffects.prototype.getEffects=function(t){var e,r=this.filters.length,n=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&n.push(this.filters[e]);return n},SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var t=null;if(this.data.td){this.matteMasks={};var e=createNS("g");e.setAttribute("id",this.layerId),e.appendChild(this.layerElement),t=e,this.globalData.defs.appendChild(e)}else this.data.tt?(this.matteElement.appendChild(this.layerElement),t=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0===this.data.ty&&!this.data.hd){var r=createNS("clipPath"),n=createNS("path");n.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var i=createElementID();if(r.setAttribute("id",i),r.appendChild(n),this.globalData.defs.appendChild(r),this.checkMasks()){var a=createNS("g");a.setAttribute("clip-path","url("+getLocationHref()+"#"+i+")"),a.appendChild(this.layerElement),this.transformedElement=a,t?t.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+i+")")}0!==this.data.bm&&this.setBlendMode()},renderElement:function(){this.finalTransform._localMatMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.localMat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.localOpacity)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this),this.searchEffectTransforms()},getMatte:function(t){if(this.matteMasks||(this.matteMasks={}),!this.matteMasks[t]){var e,r,n,i,a=this.layerId+"_"+t;if(1===t||3===t){var o=createNS("mask");o.setAttribute("id",a),o.setAttribute("mask-type",3===t?"luminance":"alpha"),(n=createNS("use")).setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),o.appendChild(n),this.globalData.defs.appendChild(o),featureSupport.maskType||1!==t||(o.setAttribute("mask-type","luminance"),e=createElementID(),r=filtersFactory.createFilter(e),this.globalData.defs.appendChild(r),r.appendChild(filtersFactory.createAlphaToLuminanceFilter()),(i=createNS("g")).appendChild(n),o.appendChild(i),i.setAttribute("filter","url("+getLocationHref()+"#"+e+")"))}else if(2===t){var s=createNS("mask");s.setAttribute("id",a),s.setAttribute("mask-type","alpha");var l=createNS("g");s.appendChild(l),e=createElementID(),r=filtersFactory.createFilter(e);var c=createNS("feComponentTransfer");c.setAttribute("in","SourceGraphic"),r.appendChild(c);var u=createNS("feFuncA");u.setAttribute("type","table"),u.setAttribute("tableValues","1.0 0.0"),c.appendChild(u),this.globalData.defs.appendChild(r);var h=createNS("rect");h.setAttribute("width",this.comp.data.w),h.setAttribute("height",this.comp.data.h),h.setAttribute("x","0"),h.setAttribute("y","0"),h.setAttribute("fill","#ffffff"),h.setAttribute("opacity","0"),l.setAttribute("filter","url("+getLocationHref()+"#"+e+")"),l.appendChild(h),(n=createNS("use")).setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),l.appendChild(n),featureSupport.maskType||(s.setAttribute("mask-type","luminance"),r.appendChild(filtersFactory.createAlphaToLuminanceFilter()),i=createNS("g"),l.appendChild(h),i.appendChild(this.layerElement),l.appendChild(i)),this.globalData.defs.appendChild(s)}this.matteMasks[t]=a}return this.matteMasks[t]},setMatte:function(t){this.matteElement&&this.matteElement.setAttribute("mask","url("+getLocationHref()+"#"+t+")")}},HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(t){this.hierarchy=t},setAsParent:function(){this._isParent=!0},checkParenting:function(){void 0!==this.data.parent&&this.comp.buildElementParenting(this,this.data.parent,[])}},extendPrototype([RenderableElement,createProxyFunction({initElement:function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){this.hidden||this.isInRange&&!this.isTransparent||((this.baseElement||this.layerElement).style.display="none",this.hidden=!0)},show:function(){this.isInRange&&!this.isTransparent&&(this.data.hd||((this.baseElement||this.layerElement).style.display="block"),this.hidden=!1,this._isFirstFrame=!0)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}})],RenderableDOMElement),extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect},IShapeElement.prototype={addShapeToModifiers:function(t){var e,r=this.shapeModifiers.length;for(e=0;e<r;e+=1)this.shapeModifiers[e].addShape(t)},isShapeInAnimatedModifiers:function(t){for(var e=this.shapeModifiers.length;0<e;)if(this.shapeModifiers[0].isAnimatedWithShape(t))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var t,e=this.shapes.length;for(t=0;t<e;t+=1)this.shapes[t].sh.reset();for(t=(e=this.shapeModifiers.length)-1;t>=0&&!this.shapeModifiers[t].processShapes(this._isFirstFrame);t-=1);}},searchProcessedElement:function(t){for(var e=this.processedElements,r=0,n=e.length;r<n;){if(e[r].elem===t)return e[r].pos;r+=1}return 0},addProcessedElement:function(t,e){for(var r=this.processedElements,n=r.length;n;)if(r[n-=1].elem===t)return void(r[n].pos=e);r.push(new ProcessedElement(t,e))},prepareFrame:function(t){this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)}};var lineCapEnum={1:"butt",2:"round",3:"square"},lineJoinEnum={1:"miter",2:"round",3:"bevel"};function SVGShapeData(t,e,r){this.caches=[],this.styles=[],this.transformers=t,this.lStr="",this.sh=r,this.lvl=e,this._isAnimated=!!r.k;for(var n=0,i=t.length;n<i;){if(t[n].mProps.dynamicProperties.length){this._isAnimated=!0;break}n+=1}}function SVGStyleData(t,e){this.data=t,this.type=t.ty,this.d="",this.lvl=e,this._mdf=!1,this.closed=!0===t.hd,this.pElem=createNS("path"),this.msElem=null}function DashProperty(t,e,r,n){var i;this.elem=t,this.frameId=-1,this.dataProps=createSizedArray(e.length),this.renderer=r,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",e.length?e.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(n);var a,o=e.length||0;for(i=0;i<o;i+=1)a=PropertyFactory.getProp(t,e[i].v,0,0,this),this.k=a.k||this.k,this.dataProps[i]={n:e[i].n,p:a};this.k||this.getValue(!0),this._isAnimated=this.k}function SVGStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r,this._isAnimated=!!this._isAnimated}function SVGFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r}function SVGNoStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.style=r}function GradientProperty(t,e,r){this.data=e,this.c=createTypedArray("uint8c",4*e.p);var n=e.k.k[0].s?e.k.k[0].s.length-4*e.p:e.k.k.length-4*e.p;this.o=createTypedArray("float32",n),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=n,this.initDynamicPropertyContainer(r),this.prop=PropertyFactory.getProp(t,e.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}function SVGGradientFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.initGradientData(t,e,r)}function SVGGradientStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.initGradientData(t,e,r),this._isAnimated=!!this._isAnimated}function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function SVGTransformData(t,e,r){this.transform={mProps:t,op:e,container:r},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0},SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1},DashProperty.prototype.getValue=function(t){if((this.elem.globalData.frameId!==this.frameId||t)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||t,this._mdf)){var e=0,r=this.dataProps.length;for("svg"===this.renderer&&(this.dashStr=""),e=0;e<r;e+=1)"o"!==this.dataProps[e].n?"svg"===this.renderer?this.dashStr+=" "+this.dataProps[e].p.v:this.dashArray[e]=this.dataProps[e].p.v:this.dashoffset[0]=this.dataProps[e].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty),extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData),extendPrototype([DynamicPropertyContainer],SVGFillStyleData),extendPrototype([DynamicPropertyContainer],SVGNoStyleData),GradientProperty.prototype.comparePoints=function(t,e){for(var r=0,n=this.o.length/2;r<n;){if(Math.abs(t[4*r]-t[4*e+2*r])>.01)return!1;r+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!=this.c.length/4)return!1;if(this.data.k.k[0].s)for(var t=0,e=this.data.k.k.length;t<e;){if(!this.comparePoints(this.data.k.k[t].s,this.data.p))return!1;t+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(t){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||t){var e,r,n,i=4*this.data.p;for(e=0;e<i;e+=1)r=e%4==0?100:255,n=Math.round(this.prop.v[e]*r),this.c[e]!==n&&(this.c[e]=n,this._cmdf=!t);if(this.o.length)for(i=this.prop.v.length,e=4*this.data.p;e<i;e+=1)r=e%2==0?100:1,n=e%2==0?Math.round(100*this.prop.v[e]):this.prop.v[e],this.o[e-4*this.data.p]!==n&&(this.o[e-4*this.data.p]=n,this._omdf=!t);this._mdf=!t}},extendPrototype([DynamicPropertyContainer],GradientProperty),SVGGradientFillStyleData.prototype.initGradientData=function(t,e,r){this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.s=PropertyFactory.getProp(t,e.s,1,null,this),this.e=PropertyFactory.getProp(t,e.e,1,null,this),this.h=PropertyFactory.getProp(t,e.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(t,e.a||{k:0},0,degToRads,this),this.g=new GradientProperty(t,e.g,this),this.style=r,this.stops=[],this.setGradientData(r.pElem,e),this.setGradientOpacity(e,r),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(t,e){var r=createElementID(),n=createNS(1===e.t?"linearGradient":"radialGradient");n.setAttribute("id",r),n.setAttribute("spreadMethod","pad"),n.setAttribute("gradientUnits","userSpaceOnUse");var i,a,o,s=[];for(o=4*e.g.p,a=0;a<o;a+=4)i=createNS("stop"),n.appendChild(i),s.push(i);t.setAttribute("gf"===e.ty?"fill":"stroke","url("+getLocationHref()+"#"+r+")"),this.gf=n,this.cst=s},SVGGradientFillStyleData.prototype.setGradientOpacity=function(t,e){if(this.g._hasOpacity&&!this.g._collapsable){var r,n,i,a=createNS("mask"),o=createNS("path");a.appendChild(o);var s=createElementID(),l=createElementID();a.setAttribute("id",l);var c=createNS(1===t.t?"linearGradient":"radialGradient");c.setAttribute("id",s),c.setAttribute("spreadMethod","pad"),c.setAttribute("gradientUnits","userSpaceOnUse"),i=t.g.k.k[0].s?t.g.k.k[0].s.length:t.g.k.k.length;var u=this.stops;for(n=4*t.g.p;n<i;n+=2)(r=createNS("stop")).setAttribute("stop-color","rgb(255,255,255)"),c.appendChild(r),u.push(r);o.setAttribute("gf"===t.ty?"fill":"stroke","url("+getLocationHref()+"#"+s+")"),"gs"===t.ty&&(o.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),o.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),1===t.lj&&o.setAttribute("stroke-miterlimit",t.ml)),this.of=c,this.ms=a,this.ost=u,this.maskId=l,e.msElem=o}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData),extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);var buildShapeString=function(t,e,r,n){if(0===e)return"";var i,a=t.o,o=t.i,s=t.v,l=" M"+n.applyToPointStringified(s[0][0],s[0][1]);for(i=1;i<e;i+=1)l+=" C"+n.applyToPointStringified(a[i-1][0],a[i-1][1])+" "+n.applyToPointStringified(o[i][0],o[i][1])+" "+n.applyToPointStringified(s[i][0],s[i][1]);return r&&e&&(l+=" C"+n.applyToPointStringified(a[i-1][0],a[i-1][1])+" "+n.applyToPointStringified(o[0][0],o[0][1])+" "+n.applyToPointStringified(s[0][0],s[0][1]),l+="z"),l},SVGElementsRenderer=function(){var t=new Matrix,e=new Matrix;function r(t,e,r){(r||e.transform.op._mdf)&&e.transform.container.setAttribute("opacity",e.transform.op.v),(r||e.transform.mProps._mdf)&&e.transform.container.setAttribute("transform",e.transform.mProps.v.to2dCSS())}function n(){}function i(r,n,i){var a,o,s,l,c,u,h,f,p,d,m=n.styles.length,y=n.lvl;for(u=0;u<m;u+=1){if(l=n.sh._mdf||i,n.styles[u].lvl<y){for(f=e.reset(),p=y-n.styles[u].lvl,d=n.transformers.length-1;!l&&p>0;)l=n.transformers[d].mProps._mdf||l,p-=1,d-=1;if(l)for(p=y-n.styles[u].lvl,d=n.transformers.length-1;p>0;)f.multiply(n.transformers[d].mProps.v),p-=1,d-=1}else f=t;if(o=(h=n.sh.paths)._length,l){for(s="",a=0;a<o;a+=1)(c=h.shapes[a])&&c._length&&(s+=buildShapeString(c,c._length,c.c,f));n.caches[u]=s}else s=n.caches[u];n.styles[u].d+=!0===r.hd?"":s,n.styles[u]._mdf=l||n.styles[u]._mdf}}function a(t,e,r){var n=e.style;(e.c._mdf||r)&&n.pElem.setAttribute("fill","rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r)&&n.pElem.setAttribute("fill-opacity",e.o.v)}function o(t,e,r){s(t,e,r),l(0,e,r)}function s(t,e,r){var n,i,a,o,s,l=e.gf,c=e.g._hasOpacity,u=e.s.v,h=e.e.v;if(e.o._mdf||r){var f="gf"===t.ty?"fill-opacity":"stroke-opacity";e.style.pElem.setAttribute(f,e.o.v)}if(e.s._mdf||r){var p=1===t.t?"x1":"cx",d="x1"===p?"y1":"cy";l.setAttribute(p,u[0]),l.setAttribute(d,u[1]),c&&!e.g._collapsable&&(e.of.setAttribute(p,u[0]),e.of.setAttribute(d,u[1]))}if(e.g._cmdf||r){n=e.cst;var m=e.g.c;for(a=n.length,i=0;i<a;i+=1)(o=n[i]).setAttribute("offset",m[4*i]+"%"),o.setAttribute("stop-color","rgb("+m[4*i+1]+","+m[4*i+2]+","+m[4*i+3]+")")}if(c&&(e.g._omdf||r)){var y=e.g.o;for(a=(n=e.g._collapsable?e.cst:e.ost).length,i=0;i<a;i+=1)o=n[i],e.g._collapsable||o.setAttribute("offset",y[2*i]+"%"),o.setAttribute("stop-opacity",y[2*i+1])}if(1===t.t)(e.e._mdf||r)&&(l.setAttribute("x2",h[0]),l.setAttribute("y2",h[1]),c&&!e.g._collapsable&&(e.of.setAttribute("x2",h[0]),e.of.setAttribute("y2",h[1])));else if((e.s._mdf||e.e._mdf||r)&&(s=Math.sqrt(Math.pow(u[0]-h[0],2)+Math.pow(u[1]-h[1],2)),l.setAttribute("r",s),c&&!e.g._collapsable&&e.of.setAttribute("r",s)),e.e._mdf||e.h._mdf||e.a._mdf||r){s||(s=Math.sqrt(Math.pow(u[0]-h[0],2)+Math.pow(u[1]-h[1],2)));var v=Math.atan2(h[1]-u[1],h[0]-u[0]),g=e.h.v;g>=1?g=.99:g<=-1&&(g=-.99);var b=s*g,x=Math.cos(v+e.a.v)*b+u[0],w=Math.sin(v+e.a.v)*b+u[1];l.setAttribute("fx",x),l.setAttribute("fy",w),c&&!e.g._collapsable&&(e.of.setAttribute("fx",x),e.of.setAttribute("fy",w))}}function l(t,e,r){var n=e.style,i=e.d;i&&(i._mdf||r)&&i.dashStr&&(n.pElem.setAttribute("stroke-dasharray",i.dashStr),n.pElem.setAttribute("stroke-dashoffset",i.dashoffset[0])),e.c&&(e.c._mdf||r)&&n.pElem.setAttribute("stroke","rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r)&&n.pElem.setAttribute("stroke-opacity",e.o.v),(e.w._mdf||r)&&(n.pElem.setAttribute("stroke-width",e.w.v),n.msElem&&n.msElem.setAttribute("stroke-width",e.w.v))}return{createRenderFunction:function(t){switch(t.ty){case"fl":return a;case"gf":return s;case"gs":return o;case"st":return l;case"sh":case"el":case"rc":case"sr":return i;case"tr":return r;case"no":return n;default:return null}}}}();function SVGShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(t,e,r),this.prevViewData=[]}function LetterProps(t,e,r,n,i,a){this.o=t,this.sw=e,this.sc=r,this.fc=n,this.m=i,this.p=a,this._mdf={o:!0,sw:!!e,sc:!!r,fc:!!n,m:!0,p:!0}}function TextProperty(t,e){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,e.d&&e.d.sid&&(e.d=t.globalData.slotManager.getProp(e.d)),this.data=e,this.elem=t,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var t,e,r,n,i=this.shapes.length,a=this.stylesList.length,o=[],s=!1;for(r=0;r<a;r+=1){for(n=this.stylesList[r],s=!1,o.length=0,t=0;t<i;t+=1)-1!==(e=this.shapes[t]).styles.indexOf(n)&&(o.push(e),s=e._isAnimated||s);o.length>1&&s&&this.setShapesAsAnimated(o)}},SVGShapeElement.prototype.setShapesAsAnimated=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(t,e){var r,n=new SVGStyleData(t,e),i=n.pElem;return"st"===t.ty?r=new SVGStrokeStyleData(this,t,n):"fl"===t.ty?r=new SVGFillStyleData(this,t,n):"gf"===t.ty||"gs"===t.ty?(r=new("gf"===t.ty?SVGGradientFillStyleData:SVGGradientStrokeStyleData)(this,t,n),this.globalData.defs.appendChild(r.gf),r.maskId&&(this.globalData.defs.appendChild(r.ms),this.globalData.defs.appendChild(r.of),i.setAttribute("mask","url("+getLocationHref()+"#"+r.maskId+")"))):"no"===t.ty&&(r=new SVGNoStyleData(this,t,n)),"st"!==t.ty&&"gs"!==t.ty||(i.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),i.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),i.setAttribute("fill-opacity","0"),1===t.lj&&i.setAttribute("stroke-miterlimit",t.ml)),2===t.r&&i.setAttribute("fill-rule","evenodd"),t.ln&&i.setAttribute("id",t.ln),t.cl&&i.setAttribute("class",t.cl),t.bm&&(i.style["mix-blend-mode"]=getBlendMode(t.bm)),this.stylesList.push(n),this.addToAnimatedContents(t,r),r},SVGShapeElement.prototype.createGroupElement=function(t){var e=new ShapeGroupData;return t.ln&&e.gr.setAttribute("id",t.ln),t.cl&&e.gr.setAttribute("class",t.cl),t.bm&&(e.gr.style["mix-blend-mode"]=getBlendMode(t.bm)),e},SVGShapeElement.prototype.createTransformElement=function(t,e){var r=TransformPropertyFactory.getTransformProperty(this,t,this),n=new SVGTransformData(r,r.o,e);return this.addToAnimatedContents(t,n),n},SVGShapeElement.prototype.createShapeElement=function(t,e,r){var n=4;"rc"===t.ty?n=5:"el"===t.ty?n=6:"sr"===t.ty&&(n=7);var i=new SVGShapeData(e,r,ShapePropertyFactory.getShapeProp(this,t,n,this));return this.shapes.push(i),this.addShapeToModifiers(i),this.addToAnimatedContents(t,i),i},SVGShapeElement.prototype.addToAnimatedContents=function(t,e){for(var r=0,n=this.animatedContents.length;r<n;){if(this.animatedContents[r].element===e)return;r+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(t),element:e,data:t})},SVGShapeElement.prototype.setElementStyles=function(t){var e,r=t.styles,n=this.stylesList.length;for(e=0;e<n;e+=1)this.stylesList[e].closed||r.push(this.stylesList[e])},SVGShapeElement.prototype.reloadShapes=function(){var t;this._isFirstFrame=!0;var e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(t,e,r,n,i,a,o){var s,l,c,u,h,f,p=[].concat(a),d=t.length-1,m=[],y=[];for(s=d;s>=0;s-=1){if((f=this.searchProcessedElement(t[s]))?e[s]=r[f-1]:t[s]._render=o,"fl"===t[s].ty||"st"===t[s].ty||"gf"===t[s].ty||"gs"===t[s].ty||"no"===t[s].ty)f?e[s].style.closed=!1:e[s]=this.createStyleElement(t[s],i),t[s]._render&&e[s].style.pElem.parentNode!==n&&n.appendChild(e[s].style.pElem),m.push(e[s].style);else if("gr"===t[s].ty){if(f)for(c=e[s].it.length,l=0;l<c;l+=1)e[s].prevViewData[l]=e[s].it[l];else e[s]=this.createGroupElement(t[s]);this.searchShapes(t[s].it,e[s].it,e[s].prevViewData,e[s].gr,i+1,p,o),t[s]._render&&e[s].gr.parentNode!==n&&n.appendChild(e[s].gr)}else"tr"===t[s].ty?(f||(e[s]=this.createTransformElement(t[s],n)),u=e[s].transform,p.push(u)):"sh"===t[s].ty||"rc"===t[s].ty||"el"===t[s].ty||"sr"===t[s].ty?(f||(e[s]=this.createShapeElement(t[s],p,i)),this.setElementStyles(e[s])):"tm"===t[s].ty||"rd"===t[s].ty||"ms"===t[s].ty||"pb"===t[s].ty||"zz"===t[s].ty||"op"===t[s].ty?(f?(h=e[s]).closed=!1:((h=ShapeModifiers.getModifier(t[s].ty)).init(this,t[s]),e[s]=h,this.shapeModifiers.push(h)),y.push(h)):"rp"===t[s].ty&&(f?(h=e[s]).closed=!0:(h=ShapeModifiers.getModifier(t[s].ty),e[s]=h,h.init(this,t,s,e),this.shapeModifiers.push(h),o=!1),y.push(h));this.addProcessedElement(t[s],s+1)}for(d=m.length,s=0;s<d;s+=1)m[s].closed=!0;for(d=y.length,s=0;s<d;s+=1)y[s].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){var t;this.renderModifiers();var e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].reset();for(this.renderShape(),t=0;t<e;t+=1)(this.stylesList[t]._mdf||this._isFirstFrame)&&(this.stylesList[t].msElem&&(this.stylesList[t].msElem.setAttribute("d",this.stylesList[t].d),this.stylesList[t].d="M0 0"+this.stylesList[t].d),this.stylesList[t].pElem.setAttribute("d",this.stylesList[t].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var t,e,r=this.animatedContents.length;for(t=0;t<r;t+=1)e=this.animatedContents[t],(this._isFirstFrame||e.element._isAnimated)&&!0!==e.data&&e.fn(e.data,e.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null},LetterProps.prototype.update=function(t,e,r,n,i,a){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var o=!1;return this.o!==t&&(this.o=t,this._mdf.o=!0,o=!0),this.sw!==e&&(this.sw=e,this._mdf.sw=!0,o=!0),this.sc!==r&&(this.sc=r,this._mdf.sc=!0,o=!0),this.fc!==n&&(this.fc=n,this._mdf.fc=!0,o=!0),this.m!==i&&(this.m=i,this._mdf.m=!0,o=!0),!a.length||this.p[0]===a[0]&&this.p[1]===a[1]&&this.p[4]===a[4]&&this.p[5]===a[5]&&this.p[12]===a[12]&&this.p[13]===a[13]||(this.p=a,this._mdf.p=!0,o=!0),o},TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},TextProperty.prototype.setCurrentData=function(t){t.__complete||this.completeTextData(t),this.currentData=t,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(t){this.effectsSequence.push(t),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(t){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length||t){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var e=this.currentData,r=this.keysIndex;if(this.lock)this.setCurrentData(this.currentData);else{var n;this.lock=!0,this._mdf=!1;var i=this.effectsSequence.length,a=t||this.data.d.k[this.keysIndex].s;for(n=0;n<i;n+=1)a=r!==this.keysIndex?this.effectsSequence[n](a,a.t):this.effectsSequence[n](this.currentData,a.t);e!==a&&this.setCurrentData(a),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}}},TextProperty.prototype.getKeyframeValue=function(){for(var t=this.data.d.k,e=this.elem.comp.renderedFrame,r=0,n=t.length;r<=n-1&&!(r===n-1||t[r+1].t>e);)r+=1;return this.keysIndex!==r&&(this.keysIndex=r),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(t){for(var e,r,n=[],i=0,a=t.length,o=!1,s=!1,l="";i<a;)o=s,s=!1,e=t.charCodeAt(i),l=t.charAt(i),FontManager.isCombinedCharacter(e)?o=!0:e>=55296&&e<=56319?FontManager.isRegionalFlag(t,i)?l=t.substr(i,14):(r=t.charCodeAt(i+1))>=56320&&r<=57343&&(FontManager.isModifier(e,r)?(l=t.substr(i,2),o=!0):l=FontManager.isFlagEmoji(t.substr(i,4))?t.substr(i,4):t.substr(i,2)):e>56319?(r=t.charCodeAt(i+1),FontManager.isVariationSelector(e)&&(o=!0)):FontManager.isZeroWidthJoiner(e)&&(o=!0,s=!0),o?(n[n.length-1]+=l,o=!1):n.push(l),i+=l.length;return n},TextProperty.prototype.completeTextData=function(t){t.__complete=!0;var e,r,n,i,a,o,s,l=this.elem.globalData.fontManager,c=this.data,u=[],h=0,f=c.m.g,p=0,d=0,m=0,y=[],v=0,g=0,b=l.getFontByName(t.f),x=0,w=getFontProperties(b);t.fWeight=w.weight,t.fStyle=w.style,t.finalSize=t.s,t.finalText=this.buildFinalText(t.t),r=t.finalText.length,t.finalLineHeight=t.lh;var E,k=t.tr/1e3*t.finalSize;if(t.sz)for(var S,P,_=!0,C=t.sz[0],A=t.sz[1];_;){S=0,v=0,r=(P=this.buildFinalText(t.t)).length,k=t.tr/1e3*t.finalSize;var T=-1;for(e=0;e<r;e+=1)E=P[e].charCodeAt(0),n=!1," "===P[e]?T=e:13!==E&&3!==E||(v=0,n=!0,S+=t.finalLineHeight||1.2*t.finalSize),l.chars?(s=l.getCharData(P[e],b.fStyle,b.fFamily),x=n?0:s.w*t.finalSize/100):x=l.measureText(P[e],t.f,t.finalSize),v+x>C&&" "!==P[e]?(-1===T?r+=1:e=T,S+=t.finalLineHeight||1.2*t.finalSize,P.splice(e,T===e?1:0,"\r"),T=-1,v=0):(v+=x,v+=k);S+=b.ascent*t.finalSize/100,this.canResize&&t.finalSize>this.minimumFontSize&&A<S?(t.finalSize-=1,t.finalLineHeight=t.finalSize*t.lh/t.s):(t.finalText=P,r=t.finalText.length,_=!1)}v=-k,x=0;var M,D=0;for(e=0;e<r;e+=1)if(n=!1,13===(E=(M=t.finalText[e]).charCodeAt(0))||3===E?(D=0,y.push(v),g=v>g?v:g,v=-2*k,i="",n=!0,m+=1):i=M,l.chars?(s=l.getCharData(M,b.fStyle,l.getFontByName(t.f).fFamily),x=n?0:s.w*t.finalSize/100):x=l.measureText(i,t.f,t.finalSize)," "===M?D+=x+k:(v+=x+k+D,D=0),u.push({l:x,an:x,add:p,n,anIndexes:[],val:i,line:m,animatorJustifyOffset:0}),2==f){if(p+=x,""===i||" "===i||e===r-1){for(""!==i&&" "!==i||(p-=x);d<=e;)u[d].an=p,u[d].ind=h,u[d].extra=x,d+=1;h+=1,p=0}}else if(3==f){if(p+=x,""===i||e===r-1){for(""===i&&(p-=x);d<=e;)u[d].an=p,u[d].ind=h,u[d].extra=x,d+=1;p=0,h+=1}}else u[h].ind=h,u[h].extra=0,h+=1;if(t.l=u,g=v>g?v:g,y.push(v),t.sz)t.boxWidth=t.sz[0],t.justifyOffset=0;else switch(t.boxWidth=g,t.j){case 1:t.justifyOffset=-t.boxWidth;break;case 2:t.justifyOffset=-t.boxWidth/2;break;default:t.justifyOffset=0}t.lineWidths=y;var L,O,F,I,j=c.a;o=j.length;var N=[];for(a=0;a<o;a+=1){for((L=j[a]).a.sc&&(t.strokeColorAnim=!0),L.a.sw&&(t.strokeWidthAnim=!0),(L.a.fc||L.a.fh||L.a.fs||L.a.fb)&&(t.fillColorAnim=!0),I=0,F=L.s.b,e=0;e<r;e+=1)(O=u[e]).anIndexes[a]=I,(1==F&&""!==O.val||2==F&&""!==O.val&&" "!==O.val||3==F&&(O.n||" "==O.val||e==r-1)||4==F&&(O.n||e==r-1))&&(1===L.s.rn&&N.push(I),I+=1);c.a[a].s.totalChars=I;var R,B=-1;if(1===L.s.rn)for(e=0;e<r;e+=1)B!=(O=u[e]).anIndexes[a]&&(B=O.anIndexes[a],R=N.splice(Math.floor(Math.random()*N.length),1)[0]),O.anIndexes[a]=R}t.yOffset=t.finalLineHeight||1.2*t.finalSize,t.ls=t.ls||0,t.ascent=b.ascent*t.finalSize/100},TextProperty.prototype.updateDocumentData=function(t,e){e=void 0===e?this.keysIndex:e;var r=this.copyData({},this.data.d.k[e].s);r=this.copyData(r,t),this.data.d.k[e].s=r,this.recalculate(e),this.setCurrentData(r),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(t){var e=this.data.d.k[t].s;e.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(e)},TextProperty.prototype.canResizeFont=function(t){this.canResize=t,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(t){this.minimumFontSize=Math.floor(t)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var t=Math.max,e=Math.min,r=Math.floor;function n(t,e){this._currentTextLength=-1,this.k=!1,this.data=e,this.elem=t,this.comp=t.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(t),this.s=PropertyFactory.getProp(t,e.s||{k:0},0,0,this),this.e="e"in e?PropertyFactory.getProp(t,e.e,0,0,this):{v:100},this.o=PropertyFactory.getProp(t,e.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(t,e.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(t,e.ne||{k:0},0,0,this),this.sm=PropertyFactory.getProp(t,e.sm||{k:100},0,0,this),this.a=PropertyFactory.getProp(t,e.a,0,.01,this),this.dynamicProperties.length||this.getValue()}return n.prototype={getMult:function(n){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var i=0,a=0,o=1,s=1;this.ne.v>0?i=this.ne.v/100:a=-this.ne.v/100,this.xe.v>0?o=1-this.xe.v/100:s=1+this.xe.v/100;var l=BezierFactory.getBezierEasing(i,a,o,s).get,c=0,u=this.finalS,h=this.finalE,f=this.data.sh;if(2===f)c=l(c=h===u?n>=h?1:0:t(0,e(.5/(h-u)+(n-u)/(h-u),1)));else if(3===f)c=l(c=h===u?n>=h?0:1:1-t(0,e(.5/(h-u)+(n-u)/(h-u),1)));else if(4===f)h===u?c=0:(c=t(0,e(.5/(h-u)+(n-u)/(h-u),1)))<.5?c*=2:c=1-2*(c-.5),c=l(c);else if(5===f){if(h===u)c=0;else{var p=h-u,d=-p/2+(n=e(t(0,n+.5-u),h-u)),m=p/2;c=Math.sqrt(1-d*d/(m*m))}c=l(c)}else 6===f?(h===u?c=0:(n=e(t(0,n+.5-u),h-u),c=(1+Math.cos(Math.PI+2*Math.PI*n/(h-u)))/2),c=l(c)):(n>=r(u)&&(c=t(0,e(n-u<0?e(h,1)-(u-n):h-n,1))),c=l(c));if(100!==this.sm.v){var y=.01*this.sm.v;0===y&&(y=1e-8);var v=.5-.5*y;c<v?c=0:(c=(c-v)/y)>1&&(c=1)}return c*this.a.v},getValue:function(t){this.iterateDynamicProperties(),this._mdf=t||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,t&&2===this.data.r&&(this.e.v=this._currentTextLength);var e=2===this.data.r?1:100/this.data.totalChars,r=this.o.v/e,n=this.s.v/e+r,i=this.e.v/e+r;if(n>i){var a=n;n=i,i=a}this.finalS=n,this.finalE=i}},extendPrototype([DynamicPropertyContainer],n),{getTextSelectorProp:function(t,e,r){return new n(t,e,r)}}}();function TextAnimatorDataProperty(t,e,r){var n={propType:!1},i=PropertyFactory.getProp,a=e.a;this.a={r:a.r?i(t,a.r,0,degToRads,r):n,rx:a.rx?i(t,a.rx,0,degToRads,r):n,ry:a.ry?i(t,a.ry,0,degToRads,r):n,sk:a.sk?i(t,a.sk,0,degToRads,r):n,sa:a.sa?i(t,a.sa,0,degToRads,r):n,s:a.s?i(t,a.s,1,.01,r):n,a:a.a?i(t,a.a,1,0,r):n,o:a.o?i(t,a.o,0,.01,r):n,p:a.p?i(t,a.p,1,0,r):n,sw:a.sw?i(t,a.sw,0,0,r):n,sc:a.sc?i(t,a.sc,1,0,r):n,fc:a.fc?i(t,a.fc,1,0,r):n,fh:a.fh?i(t,a.fh,0,0,r):n,fs:a.fs?i(t,a.fs,0,.01,r):n,fb:a.fb?i(t,a.fb,0,.01,r):n,t:a.t?i(t,a.t,0,0,r):n},this.s=TextSelectorProp.getTextSelectorProp(t,e.s,r),this.s.t=e.s.t}function TextAnimatorProperty(t,e,r){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=t,this._renderType=e,this._elem=r,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(r)}function ITextElement(){}TextAnimatorProperty.prototype.searchProperties=function(){var t,e,r=this._textData.a.length,n=PropertyFactory.getProp;for(t=0;t<r;t+=1)e=this._textData.a[t],this._animatorsData[t]=new TextAnimatorDataProperty(this._elem,e,this);this._textData.p&&"m"in this._textData.p?(this._pathData={a:n(this._elem,this._textData.p.a,0,0,this),f:n(this._elem,this._textData.p.f,0,0,this),l:n(this._elem,this._textData.p.l,0,0,this),r:n(this._elem,this._textData.p.r,0,0,this),p:n(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=n(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(t,e){if(this.lettersChangedFlag=e,this._mdf||this._isFirstFrame||e||this._hasMaskedPath&&this._pathData.m._mdf){this._isFirstFrame=!1;var r,n,i,a,o,s,l,c,u,h,f,p,d,m,y,v,g,b,x,w=this._moreOptions.alignment.v,E=this._animatorsData,k=this._textData,S=this.mHelper,P=this._renderType,_=this.renderedLetters.length,C=t.l;if(this._hasMaskedPath){if(x=this._pathData.m,!this._pathData.n||this._pathData._mdf){var A,T=x.v;for(this._pathData.r.v&&(T=T.reverse()),o={tLength:0,segments:[]},a=T._length-1,v=0,i=0;i<a;i+=1)A=bez.buildBezierData(T.v[i],T.v[i+1],[T.o[i][0]-T.v[i][0],T.o[i][1]-T.v[i][1]],[T.i[i+1][0]-T.v[i+1][0],T.i[i+1][1]-T.v[i+1][1]]),o.tLength+=A.segmentLength,o.segments.push(A),v+=A.segmentLength;i=a,x.v.c&&(A=bez.buildBezierData(T.v[i],T.v[0],[T.o[i][0]-T.v[i][0],T.o[i][1]-T.v[i][1]],[T.i[0][0]-T.v[0][0],T.i[0][1]-T.v[0][1]]),o.tLength+=A.segmentLength,o.segments.push(A),v+=A.segmentLength),this._pathData.pi=o}if(o=this._pathData.pi,s=this._pathData.f.v,f=0,h=1,c=0,u=!0,m=o.segments,s<0&&x.v.c)for(o.tLength<Math.abs(s)&&(s=-Math.abs(s)%o.tLength),h=(d=m[f=m.length-1].points).length-1;s<0;)s+=d[h].partialLength,(h-=1)<0&&(h=(d=m[f-=1].points).length-1);p=(d=m[f].points)[h-1],y=(l=d[h]).partialLength}a=C.length,r=0,n=0;var M,D,L,O,F,I=1.2*t.finalSize*.714,j=!0;L=E.length;var N,R,B,G,V,z,H,$,U,q,W,Y,X=-1,J=s,K=f,Z=h,Q=-1,tt="",et=this.defaultPropsArray;if(2===t.j||1===t.j){var rt=0,nt=0,it=2===t.j?-.5:-1,at=0,ot=!0;for(i=0;i<a;i+=1)if(C[i].n){for(rt&&(rt+=nt);at<i;)C[at].animatorJustifyOffset=rt,at+=1;rt=0,ot=!0}else{for(D=0;D<L;D+=1)(M=E[D].a).t.propType&&(ot&&2===t.j&&(nt+=M.t.v*it),(F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?rt+=M.t.v*F[0]*it:rt+=M.t.v*F*it);ot=!1}for(rt&&(rt+=nt);at<i;)C[at].animatorJustifyOffset=rt,at+=1}for(i=0;i<a;i+=1){if(S.reset(),G=1,C[i].n)r=0,n+=t.yOffset,n+=j?1:0,s=J,j=!1,this._hasMaskedPath&&(h=Z,p=(d=m[f=K].points)[h-1],y=(l=d[h]).partialLength,c=0),tt="",W="",U="",Y="",et=this.defaultPropsArray;else{if(this._hasMaskedPath){if(Q!==C[i].line){switch(t.j){case 1:s+=v-t.lineWidths[C[i].line];break;case 2:s+=(v-t.lineWidths[C[i].line])/2}Q=C[i].line}X!==C[i].ind&&(C[X]&&(s+=C[X].extra),s+=C[i].an/2,X=C[i].ind),s+=w[0]*C[i].an*.005;var st=0;for(D=0;D<L;D+=1)(M=E[D].a).p.propType&&((F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?st+=M.p.v[0]*F[0]:st+=M.p.v[0]*F),M.a.propType&&((F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?st+=M.a.v[0]*F[0]:st+=M.a.v[0]*F);for(u=!0,this._pathData.a.v&&(s=.5*C[0].an+(v-this._pathData.f.v-.5*C[0].an-.5*C[C.length-1].an)*X/(a-1),s+=this._pathData.f.v);u;)c+y>=s+st||!d?(g=(s+st-c)/l.partialLength,R=p.point[0]+(l.point[0]-p.point[0])*g,B=p.point[1]+(l.point[1]-p.point[1])*g,S.translate(-w[0]*C[i].an*.005,-w[1]*I*.01),u=!1):d&&(c+=l.partialLength,(h+=1)>=d.length&&(h=0,m[f+=1]?d=m[f].points:x.v.c?(h=0,d=m[f=0].points):(c-=l.partialLength,d=null)),d&&(p=l,y=(l=d[h]).partialLength));N=C[i].an/2-C[i].add,S.translate(-N,0,0)}else N=C[i].an/2-C[i].add,S.translate(-N,0,0),S.translate(-w[0]*C[i].an*.005,-w[1]*I*.01,0);for(D=0;D<L;D+=1)(M=E[D].a).t.propType&&(F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars),0===r&&0===t.j||(this._hasMaskedPath?F.length?s+=M.t.v*F[0]:s+=M.t.v*F:F.length?r+=M.t.v*F[0]:r+=M.t.v*F));for(t.strokeWidthAnim&&(z=t.sw||0),t.strokeColorAnim&&(V=t.sc?[t.sc[0],t.sc[1],t.sc[2]]:[0,0,0]),t.fillColorAnim&&t.fc&&(H=[t.fc[0],t.fc[1],t.fc[2]]),D=0;D<L;D+=1)(M=E[D].a).a.propType&&((F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?S.translate(-M.a.v[0]*F[0],-M.a.v[1]*F[1],M.a.v[2]*F[2]):S.translate(-M.a.v[0]*F,-M.a.v[1]*F,M.a.v[2]*F));for(D=0;D<L;D+=1)(M=E[D].a).s.propType&&((F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?S.scale(1+(M.s.v[0]-1)*F[0],1+(M.s.v[1]-1)*F[1],1):S.scale(1+(M.s.v[0]-1)*F,1+(M.s.v[1]-1)*F,1));for(D=0;D<L;D+=1){if(M=E[D].a,F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars),M.sk.propType&&(F.length?S.skewFromAxis(-M.sk.v*F[0],M.sa.v*F[1]):S.skewFromAxis(-M.sk.v*F,M.sa.v*F)),M.r.propType&&(F.length?S.rotateZ(-M.r.v*F[2]):S.rotateZ(-M.r.v*F)),M.ry.propType&&(F.length?S.rotateY(M.ry.v*F[1]):S.rotateY(M.ry.v*F)),M.rx.propType&&(F.length?S.rotateX(M.rx.v*F[0]):S.rotateX(M.rx.v*F)),M.o.propType&&(F.length?G+=(M.o.v*F[0]-G)*F[0]:G+=(M.o.v*F-G)*F),t.strokeWidthAnim&&M.sw.propType&&(F.length?z+=M.sw.v*F[0]:z+=M.sw.v*F),t.strokeColorAnim&&M.sc.propType)for($=0;$<3;$+=1)F.length?V[$]+=(M.sc.v[$]-V[$])*F[0]:V[$]+=(M.sc.v[$]-V[$])*F;if(t.fillColorAnim&&t.fc){if(M.fc.propType)for($=0;$<3;$+=1)F.length?H[$]+=(M.fc.v[$]-H[$])*F[0]:H[$]+=(M.fc.v[$]-H[$])*F;M.fh.propType&&(H=F.length?addHueToRGB(H,M.fh.v*F[0]):addHueToRGB(H,M.fh.v*F)),M.fs.propType&&(H=F.length?addSaturationToRGB(H,M.fs.v*F[0]):addSaturationToRGB(H,M.fs.v*F)),M.fb.propType&&(H=F.length?addBrightnessToRGB(H,M.fb.v*F[0]):addBrightnessToRGB(H,M.fb.v*F))}}for(D=0;D<L;D+=1)(M=E[D].a).p.propType&&(F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars),this._hasMaskedPath?F.length?S.translate(0,M.p.v[1]*F[0],-M.p.v[2]*F[1]):S.translate(0,M.p.v[1]*F,-M.p.v[2]*F):F.length?S.translate(M.p.v[0]*F[0],M.p.v[1]*F[1],-M.p.v[2]*F[2]):S.translate(M.p.v[0]*F,M.p.v[1]*F,-M.p.v[2]*F));if(t.strokeWidthAnim&&(U=z<0?0:z),t.strokeColorAnim&&(q="rgb("+Math.round(255*V[0])+","+Math.round(255*V[1])+","+Math.round(255*V[2])+")"),t.fillColorAnim&&t.fc&&(W="rgb("+Math.round(255*H[0])+","+Math.round(255*H[1])+","+Math.round(255*H[2])+")"),this._hasMaskedPath){if(S.translate(0,-t.ls),S.translate(0,w[1]*I*.01+n,0),this._pathData.p.v){b=(l.point[1]-p.point[1])/(l.point[0]-p.point[0]);var lt=180*Math.atan(b)/Math.PI;l.point[0]<p.point[0]&&(lt+=180),S.rotate(-lt*Math.PI/180)}S.translate(R,B,0),s-=w[0]*C[i].an*.005,C[i+1]&&X!==C[i+1].ind&&(s+=C[i].an/2,s+=.001*t.tr*t.finalSize)}else{switch(S.translate(r,n,0),t.ps&&S.translate(t.ps[0],t.ps[1]+t.ascent,0),t.j){case 1:S.translate(C[i].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[C[i].line]),0,0);break;case 2:S.translate(C[i].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[C[i].line])/2,0,0)}S.translate(0,-t.ls),S.translate(N,0,0),S.translate(w[0]*C[i].an*.005,w[1]*I*.01,0),r+=C[i].l+.001*t.tr*t.finalSize}"html"===P?tt=S.toCSS():"svg"===P?tt=S.to2dCSS():et=[S.props[0],S.props[1],S.props[2],S.props[3],S.props[4],S.props[5],S.props[6],S.props[7],S.props[8],S.props[9],S.props[10],S.props[11],S.props[12],S.props[13],S.props[14],S.props[15]],Y=G}_<=i?(O=new LetterProps(Y,U,q,W,tt,et),this.renderedLetters.push(O),_+=1,this.lettersChangedFlag=!0):(O=this.renderedLetters[i],this.lettersChangedFlag=O.update(Y,U,q,W,tt,et)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty),ITextElement.prototype.initElement=function(t,e,r){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(t,e,r),this.textProperty=new TextProperty(this,t.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(t.t,this.renderType,this),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)},ITextElement.prototype.createPathShape=function(t,e){var r,n,i=e.length,a="";for(r=0;r<i;r+=1)"sh"===e[r].ty&&(n=e[r].ks.k,a+=buildShapeString(n,n.i.length,!0,t));return a},ITextElement.prototype.updateDocumentData=function(t,e){this.textProperty.updateDocumentData(t,e)},ITextElement.prototype.canResizeFont=function(t){this.textProperty.canResizeFont(t)},ITextElement.prototype.setMinimumFontSize=function(t){this.textProperty.setMinimumFontSize(t)},ITextElement.prototype.applyTextPropertiesToMatrix=function(t,e,r,n,i){switch(t.ps&&e.translate(t.ps[0],t.ps[1]+t.ascent,0),e.translate(0,-t.ls,0),t.j){case 1:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r]),0,0);break;case 2:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r])/2,0,0)}e.translate(n,i,0)},ITextElement.prototype.buildColor=function(t){return"rgb("+Math.round(255*t[0])+","+Math.round(255*t[1])+","+Math.round(255*t[2])+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){},ITextElement.prototype.validateText=function(){(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)};var emptyShapeData={shapes:[]};function SVGTextLottieElement(t,e,r){this.textSpans=[],this.renderType="svg",this.initElement(t,e,r)}function ISolidElement(t,e,r){this.initElement(t,e,r)}function NullElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initFrame(),this.initTransform(t,e,r),this.initHierarchy()}function SVGRendererBase(){}function ICompElement(){}function SVGCompElement(t,e,r){this.layers=t.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function SVGRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var r="";if(e&&e.title){var n=createNS("title"),i=createElementID();n.setAttribute("id",i),n.textContent=e.title,this.svgElement.appendChild(n),r+=i}if(e&&e.description){var a=createNS("desc"),o=createElementID();a.setAttribute("id",o),a.textContent=e.description,this.svgElement.appendChild(a),r+=" "+o}r&&this.svgElement.setAttribute("aria-labelledby",r);var s=createNS("defs");this.svgElement.appendChild(s);var l=createNS("g");this.svgElement.appendChild(l),this.layerElement=l,this.renderConfig={preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",progressiveLoad:e&&e.progressiveLoad||!1,hideOnTransparent:!(e&&!1===e.hideOnTransparent),viewBoxOnly:e&&e.viewBoxOnly||!1,viewBoxSize:e&&e.viewBoxSize||!1,className:e&&e.className||"",id:e&&e.id||"",focusable:e&&e.focusable,filterSize:{width:e&&e.filterSize&&e.filterSize.width||"100%",height:e&&e.filterSize&&e.filterSize.height||"100%",x:e&&e.filterSize&&e.filterSize.x||"0%",y:e&&e.filterSize&&e.filterSize.y||"0%"},width:e&&e.width,height:e&&e.height,runExpressions:!e||void 0===e.runExpressions||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,defs:s,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(t){for(var e=0,r=t.length,n=[],i="";e<r;)t[e]===String.fromCharCode(13)||t[e]===String.fromCharCode(3)?(n.push(i),i=""):i+=t[e],e+=1;return n.push(i),n},SVGTextLottieElement.prototype.buildShapeData=function(t,e){if(t.shapes&&t.shapes.length){var r=t.shapes[0];if(r.it){var n=r.it[r.it.length-1];n.s&&(n.s.k[0]=e,n.s.k[1]=e)}}return t},SVGTextLottieElement.prototype.buildNewText=function(){var t,e;this.addDynamicProperty(this);var r=this.textProperty.currentData;this.renderedLetters=createSizedArray(r?r.l.length:0),r.fc?this.layerElement.setAttribute("fill",this.buildColor(r.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),r.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(r.sc)),this.layerElement.setAttribute("stroke-width",r.sw)),this.layerElement.setAttribute("font-size",r.finalSize);var n=this.globalData.fontManager.getFontByName(r.f);if(n.fClass)this.layerElement.setAttribute("class",n.fClass);else{this.layerElement.setAttribute("font-family",n.fFamily);var i=r.fWeight,a=r.fStyle;this.layerElement.setAttribute("font-style",a),this.layerElement.setAttribute("font-weight",i)}this.layerElement.setAttribute("aria-label",r.t);var o,s=r.l||[],l=!!this.globalData.fontManager.chars;e=s.length;var c=this.mHelper,u=this.data.singleShape,h=0,f=0,p=!0,d=.001*r.tr*r.finalSize;if(!u||l||r.sz){var m,y=this.textSpans.length;for(t=0;t<e;t+=1){if(this.textSpans[t]||(this.textSpans[t]={span:null,childSpan:null,glyph:null}),!l||!u||0===t){if(o=y>t?this.textSpans[t].span:createNS(l?"g":"text"),y<=t){if(o.setAttribute("stroke-linecap","butt"),o.setAttribute("stroke-linejoin","round"),o.setAttribute("stroke-miterlimit","4"),this.textSpans[t].span=o,l){var v=createNS("g");o.appendChild(v),this.textSpans[t].childSpan=v}this.textSpans[t].span=o,this.layerElement.appendChild(o)}o.style.display="inherit"}if(c.reset(),u&&(s[t].n&&(h=-d,f+=r.yOffset,f+=p?1:0,p=!1),this.applyTextPropertiesToMatrix(r,c,s[t].line,h,f),h+=s[t].l||0,h+=d),l){var g;if(1===(m=this.globalData.fontManager.getCharData(r.finalText[t],n.fStyle,this.globalData.fontManager.getFontByName(r.f).fFamily)).t)g=new SVGCompElement(m.data,this.globalData,this);else{var b=emptyShapeData;m.data&&m.data.shapes&&(b=this.buildShapeData(m.data,r.finalSize)),g=new SVGShapeElement(b,this.globalData,this)}if(this.textSpans[t].glyph){var x=this.textSpans[t].glyph;this.textSpans[t].childSpan.removeChild(x.layerElement),x.destroy()}this.textSpans[t].glyph=g,g._debug=!0,g.prepareFrame(0),g.renderFrame(),this.textSpans[t].childSpan.appendChild(g.layerElement),1===m.t&&this.textSpans[t].childSpan.setAttribute("transform","scale("+r.finalSize/100+","+r.finalSize/100+")")}else u&&o.setAttribute("transform","translate("+c.props[12]+","+c.props[13]+")"),o.textContent=s[t].val,o.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve")}u&&o&&o.setAttribute("d","")}else{var w=this.textContainer,E="start";switch(r.j){case 1:E="end";break;case 2:E="middle";break;default:E="start"}w.setAttribute("text-anchor",E),w.setAttribute("letter-spacing",d);var k=this.buildTextContents(r.finalText);for(e=k.length,f=r.ps?r.ps[1]+r.ascent:0,t=0;t<e;t+=1)(o=this.textSpans[t].span||createNS("tspan")).textContent=k[t],o.setAttribute("x",0),o.setAttribute("y",f),o.style.display="inherit",w.appendChild(o),this.textSpans[t]||(this.textSpans[t]={span:null,glyph:null}),this.textSpans[t].span=o,f+=r.finalLineHeight;this.layerElement.appendChild(w)}for(;t<this.textSpans.length;)this.textSpans[t].span.style.display="none",t+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var t=this.layerElement.getBBox();this.bbox={top:t.y,left:t.x,width:t.width,height:t.height}}return this.bbox},SVGTextLottieElement.prototype.getValue=function(){var t,e,r=this.textSpans.length;for(this.renderedFrame=this.comp.renderedFrame,t=0;t<r;t+=1)(e=this.textSpans[t].glyph)&&(e.prepareFrame(this.comp.renderedFrame-this.data.st),e._mdf&&(this._mdf=!0))},SVGTextLottieElement.prototype.renderInnerContent=function(){if(this.validateText(),(!this.data.singleShape||this._mdf)&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){var t,e;this._sizeChanged=!0;var r,n,i,a=this.textAnimator.renderedLetters,o=this.textProperty.currentData.l;for(e=o.length,t=0;t<e;t+=1)o[t].n||(r=a[t],n=this.textSpans[t].span,(i=this.textSpans[t].glyph)&&i.renderFrame(),r._mdf.m&&n.setAttribute("transform",r.m),r._mdf.o&&n.setAttribute("opacity",r.o),r._mdf.sw&&n.setAttribute("stroke-width",r.sw),r._mdf.sc&&n.setAttribute("stroke",r.sc),r._mdf.fc&&n.setAttribute("fill",r.fc))}},extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var t=createNS("rect");t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.layerElement.appendChild(t)},NullElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement),extendPrototype([BaseRenderer],SVGRendererBase),SVGRendererBase.prototype.createNull=function(t){return new NullElement(t,this.globalData,this)},SVGRendererBase.prototype.createShape=function(t){return new SVGShapeElement(t,this.globalData,this)},SVGRendererBase.prototype.createText=function(t){return new SVGTextLottieElement(t,this.globalData,this)},SVGRendererBase.prototype.createImage=function(t){return new IImageElement(t,this.globalData,this)},SVGRendererBase.prototype.createSolid=function(t){return new ISolidElement(t,this.globalData,this)},SVGRendererBase.prototype.configAnimation=function(t){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.svgElement.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+t.w+" "+t.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",t.w),this.svgElement.setAttribute("height",t.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)",this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility),this.renderConfig.width&&this.svgElement.setAttribute("width",this.renderConfig.width),this.renderConfig.height&&this.svgElement.setAttribute("height",this.renderConfig.height),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),void 0!==this.renderConfig.focusable&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var e=this.globalData.defs;this.setupGlobalData(t,e),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=t;var r=createNS("clipPath"),n=createNS("rect");n.setAttribute("width",t.w),n.setAttribute("height",t.h),n.setAttribute("x",0),n.setAttribute("y",0);var i=createElementID();r.setAttribute("id",i),r.appendChild(n),this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+i+")"),e.appendChild(r),this.layers=t.layers,this.elements=createSizedArray(t.layers.length)},SVGRendererBase.prototype.destroy=function(){var t;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRendererBase.prototype.updateContainerSize=function(){},SVGRendererBase.prototype.findIndexByInd=function(t){var e=0,r=this.layers.length;for(e=0;e<r;e+=1)if(this.layers[e].ind===t)return e;return-1},SVGRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!e[t]&&99!==this.layers[t].ty){e[t]=!0;var r=this.createItem(this.layers[t]);if(e[t]=r,getExpressionsPlugin()&&(0===this.layers[t].ty&&this.globalData.projectInterface.registerComposition(r),r.initExpressions()),this.appendElementInPos(r,t),this.layers[t].tt){var n="tp"in this.layers[t]?this.findIndexByInd(this.layers[t].tp):t-1;if(-1===n)return;if(this.elements[n]&&!0!==this.elements[n]){var i=e[n].getMatte(this.layers[t].tt);r.setMatte(i)}else this.buildItem(n),this.addPendingElement(r)}}},SVGRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();if(t.checkParenting(),t.data.tt)for(var e=0,r=this.elements.length;e<r;){if(this.elements[e]===t){var n="tp"in t.data?this.findIndexByInd(t.data.tp):e-1,i=this.elements[n].getMatte(this.layers[e].tt);t.setMatte(i);break}e+=1}}},SVGRendererBase.prototype.renderFrame=function(t){if(this.renderedFrame!==t&&!this.destroyed){var e;null===t?t=this.renderedFrame:this.renderedFrame=t,this.globalData.frameNum=t,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=t,this.globalData._mdf=!1;var r=this.layers.length;for(this.completeLayers||this.checkLayers(t),e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].prepareFrame(t-this.layers[e].st);if(this.globalData._mdf)for(e=0;e<r;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()}},SVGRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){for(var n,i=0;i<e;)this.elements[i]&&!0!==this.elements[i]&&this.elements[i].getBaseElement()&&(n=this.elements[i].getBaseElement()),i+=1;n?this.layerElement.insertBefore(r,n):this.layerElement.appendChild(r)}},SVGRendererBase.prototype.hide=function(){this.layerElement.style.display="none"},SVGRendererBase.prototype.show=function(){this.layerElement.style.display="block"},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),!this.data.xt&&e.progressiveLoad||this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(t){if(this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),this.isInRange||this.data.xt){if(this.tm._placeholder)this.renderedFrame=t/this.data.sr;else{var e=this.tm.v;e===this.data.op&&(e=this.data.op-1),this.renderedFrame=e}var r,n=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&(this.elements[r].prepareFrame(this.renderedFrame-this.layers[r].st),this.elements[r]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},ICompElement.prototype.setElements=function(t){this.elements=t},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()},extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement),SVGCompElement.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)},extendPrototype([SVGRendererBase],SVGRenderer),SVGRenderer.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)},ShapeTransformManager.prototype={addTransformSequence:function(t){var e,r=t.length,n="_";for(e=0;e<r;e+=1)n+=t[e].transform.key+"_";var i=this.sequences[n];return i||(i={transforms:[].concat(t),finalTransform:new Matrix,_mdf:!1},this.sequences[n]=i,this.sequenceList.push(i)),i},processSequence:function(t,e){for(var r=0,n=t.transforms.length,i=e;r<n&&!e;){if(t.transforms[r].transform.mProps._mdf){i=!0;break}r+=1}if(i)for(t.finalTransform.reset(),r=n-1;r>=0;r-=1)t.finalTransform.multiply(t.transforms[r].transform.mProps.v);t._mdf=i},processSequences:function(t){var e,r=this.sequenceList.length;for(e=0;e<r;e+=1)this.processSequence(this.sequenceList[e],t)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}};var lumaLoader=function(){var t="__lottie_element_luma_buffer",e=null,r=null,n=null;function i(){var i,a,o;e||(i=createNS("svg"),a=createNS("filter"),o=createNS("feColorMatrix"),a.setAttribute("id",t),o.setAttribute("type","matrix"),o.setAttribute("color-interpolation-filters","sRGB"),o.setAttribute("values","0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0"),a.appendChild(o),i.appendChild(a),i.setAttribute("id",t+"_svg"),featureSupport.svgLumaHidden&&(i.style.display="none"),n=i,document.body.appendChild(n),e=createTag("canvas"),(r=e.getContext("2d")).filter="url(#"+t+")",r.fillStyle="rgba(0,0,0,0)",r.fillRect(0,0,1,1))}return{load:i,get:function(n){return e||i(),e.width=n.width,e.height=n.height,r.filter="url(#"+t+")",e}}};function createCanvas(t,e){if(featureSupport.offscreenCanvas)return new OffscreenCanvas(t,e);var r=createTag("canvas");return r.width=t,r.height=e,r}var assetLoader={loadLumaCanvas:lumaLoader.load,getLumaCanvas:lumaLoader.get,createCanvas},registeredEffects={};function CVEffects(t){var e,r,n=t.data.ef?t.data.ef.length:0;for(this.filters=[],e=0;e<n;e+=1){r=null;var i=t.data.ef[e].ty;registeredEffects[i]&&(r=new(0,registeredEffects[i].effect)(t.effectsManager.effectElements[e],t)),r&&this.filters.push(r)}this.filters.length&&t.addRenderableComponent(this)}function registerEffect(t,e){registeredEffects[t]={effect:e}}function CVMaskElement(t,e){var r;this.data=t,this.element=e,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var n=this.masksProperties.length,i=!1;for(r=0;r<n;r+=1)"n"!==this.masksProperties[r].mode&&(i=!0),this.viewData[r]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[r],3);this.hasMasks=i,i&&this.element.addRenderableComponent(this)}function CVBaseElement(){}CVEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},CVEffects.prototype.getEffects=function(t){var e,r=this.filters.length,n=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&n.push(this.filters[e]);return n},CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var t,e,r,n,i=this.element.finalTransform.mat,a=this.element.canvasContext,o=this.masksProperties.length;for(a.beginPath(),t=0;t<o;t+=1)if("n"!==this.masksProperties[t].mode){var s;this.masksProperties[t].inv&&(a.moveTo(0,0),a.lineTo(this.element.globalData.compSize.w,0),a.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),a.lineTo(0,this.element.globalData.compSize.h),a.lineTo(0,0)),n=this.viewData[t].v,e=i.applyToPointArray(n.v[0][0],n.v[0][1],0),a.moveTo(e[0],e[1]);var l=n._length;for(s=1;s<l;s+=1)r=i.applyToTriplePoints(n.o[s-1],n.i[s],n.v[s]),a.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5]);r=i.applyToTriplePoints(n.o[s-1],n.i[0],n.v[0]),a.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5])}this.element.globalData.renderer.save(!0),a.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null};var operationsMap={1:"source-in",2:"source-out",3:"source-in",4:"source-out"};function CVShapeData(t,e,r,n){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var i,a=4;"rc"===e.ty?a=5:"el"===e.ty?a=6:"sr"===e.ty&&(a=7),this.sh=ShapePropertyFactory.getShapeProp(t,e,a,t);var o,s=r.length;for(i=0;i<s;i+=1)r[i].closed||(o={transforms:n.addTransformSequence(r[i].transforms),trNodes:[]},this.styledShapes.push(o),r[i].elements.push(o))}function CVShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(t,e,r)}function CVTextElement(t,e,r){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(t,e,r)}function CVImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.img=e.imageLoader.getAsset(this.assetData),this.initElement(t,e,r)}function CVSolidElement(t,e,r){this.initElement(t,e,r)}function CanvasRendererBase(){}function CanvasContext(){this.opacity=-1,this.transform=createTypedArray("float32",16),this.fillStyle="",this.strokeStyle="",this.lineWidth="",this.lineCap="",this.lineJoin="",this.miterLimit="",this.id=Math.random()}function CVContextData(){var t;for(this.stack=[],this.cArrPos=0,this.cTr=new Matrix,t=0;t<15;t+=1){var e=new CanvasContext;this.stack[t]=e}this._length=15,this.nativeContext=null,this.transformMat=new Matrix,this.currentOpacity=1,this.currentFillStyle="",this.appliedFillStyle="",this.currentStrokeStyle="",this.appliedStrokeStyle="",this.currentLineWidth="",this.appliedLineWidth="",this.currentLineCap="",this.appliedLineCap="",this.currentLineJoin="",this.appliedLineJoin="",this.appliedMiterLimit="",this.currentMiterLimit=""}function CVCompElement(t,e,r){this.completeLayers=!1,this.layers=t.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function CanvasRenderer(t,e){this.animationItem=t,this.renderConfig={clearCanvas:!e||void 0===e.clearCanvas||e.clearCanvas,context:e&&e.context||null,progressiveLoad:e&&e.progressiveLoad||!1,preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",className:e&&e.className||"",id:e&&e.id||"",runExpressions:!e||void 0===e.runExpressions||e.runExpressions},this.renderConfig.dpr=e&&e.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=e&&e.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas",this.renderConfig.clearCanvas&&(this.ctxTransform=this.contextData.transform.bind(this.contextData),this.ctxOpacity=this.contextData.opacity.bind(this.contextData),this.ctxFillStyle=this.contextData.fillStyle.bind(this.contextData),this.ctxStrokeStyle=this.contextData.strokeStyle.bind(this.contextData),this.ctxLineWidth=this.contextData.lineWidth.bind(this.contextData),this.ctxLineCap=this.contextData.lineCap.bind(this.contextData),this.ctxLineJoin=this.contextData.lineJoin.bind(this.contextData),this.ctxMiterLimit=this.contextData.miterLimit.bind(this.contextData),this.ctxFill=this.contextData.fill.bind(this.contextData),this.ctxFillRect=this.contextData.fillRect.bind(this.contextData),this.ctxStroke=this.contextData.stroke.bind(this.contextData),this.save=this.contextData.save.bind(this.contextData))}function HBaseElement(){}function HSolidElement(t,e,r){this.initElement(t,e,r)}function HShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(t,e,r),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}function HTextElement(t,e,r){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(t,e,r)}function HCameraElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initHierarchy();var n=PropertyFactory.getProp;if(this.pe=n(this,t.pe,0,0,this),t.ks.p.s?(this.px=n(this,t.ks.p.x,1,0,this),this.py=n(this,t.ks.p.y,1,0,this),this.pz=n(this,t.ks.p.z,1,0,this)):this.p=n(this,t.ks.p,1,0,this),t.ks.a&&(this.a=n(this,t.ks.a,1,0,this)),t.ks.or.k.length&&t.ks.or.k[0].to){var i,a=t.ks.or.k.length;for(i=0;i<a;i+=1)t.ks.or.k[i].to=null,t.ks.or.k[i].ti=null}this.or=n(this,t.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=n(this,t.ks.rx,0,degToRads,this),this.ry=n(this,t.ks.ry,0,degToRads,this),this.rz=n(this,t.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}function HImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,r)}function HybridRendererBase(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&!1===e.hideOnTransparent),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}function HCompElement(t,e,r){this.layers=t.layers,this.supports3d=!t.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function HybridRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&!1===e.hideOnTransparent),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"},runExpressions:!e||void 0===e.runExpressions||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){if(this.data.tt>=1){this.buffers=[];var t=this.globalData.canvasContext,e=assetLoader.createCanvas(t.canvas.width,t.canvas.height);this.buffers.push(e);var r=assetLoader.createCanvas(t.canvas.width,t.canvas.height);this.buffers.push(r),this.data.tt>=3&&!document._isProxy&&assetLoader.loadLumaCanvas()}this.canvasContext=this.globalData.canvasContext,this.transformCanvas=this.globalData.transformCanvas,this.renderableEffectsManager=new CVEffects(this),this.searchEffectTransforms()},createContent:function(){},setBlendMode:function(){var t=this.globalData;if(t.blendMode!==this.data.bm){t.blendMode=this.data.bm;var e=getBlendMode(this.data.bm);t.canvasContext.globalCompositeOperation=e}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this),this.transformEffects=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT)},hideElement:function(){this.hidden||this.isInRange&&!this.isTransparent||(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},clearCanvas:function(t){t.clearRect(this.transformCanvas.tx,this.transformCanvas.ty,this.transformCanvas.w*this.transformCanvas.sx,this.transformCanvas.h*this.transformCanvas.sy)},prepareLayer:function(){if(this.data.tt>=1){var t=this.buffers[0].getContext("2d");this.clearCanvas(t),t.drawImage(this.canvasContext.canvas,0,0),this.currentTransform=this.canvasContext.getTransform(),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform)}},exitLayer:function(){if(this.data.tt>=1){var t=this.buffers[1],e=t.getContext("2d");if(this.clearCanvas(e),e.drawImage(this.canvasContext.canvas,0,0),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform),this.comp.getElementById("tp"in this.data?this.data.tp:this.data.ind-1).renderFrame(!0),this.canvasContext.setTransform(1,0,0,1,0,0),this.data.tt>=3&&!document._isProxy){var r=assetLoader.getLumaCanvas(this.canvasContext.canvas);r.getContext("2d").drawImage(this.canvasContext.canvas,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.drawImage(r,0,0)}this.canvasContext.globalCompositeOperation=operationsMap[this.data.tt],this.canvasContext.drawImage(t,0,0),this.canvasContext.globalCompositeOperation="destination-over",this.canvasContext.drawImage(this.buffers[0],0,0),this.canvasContext.setTransform(this.currentTransform),this.canvasContext.globalCompositeOperation="source-over"}},renderFrame:function(t){if(!this.hidden&&!this.data.hd&&(1!==this.data.td||t)){this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.setBlendMode();var e=0===this.data.ty;this.prepareLayer(),this.globalData.renderer.save(e),this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity),this.renderInnerContent(),this.globalData.renderer.restore(e),this.exitLayer(),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement,CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated,extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(t,e){var r={data:t,type:t.ty,preTransforms:this.transformsManager.addTransformSequence(e),transforms:[],elements:[],closed:!0===t.hd},n={};if("fl"===t.ty||"st"===t.ty?(n.c=PropertyFactory.getProp(this,t.c,1,255,this),n.c.k||(r.co="rgb("+bmFloor(n.c.v[0])+","+bmFloor(n.c.v[1])+","+bmFloor(n.c.v[2])+")")):"gf"!==t.ty&&"gs"!==t.ty||(n.s=PropertyFactory.getProp(this,t.s,1,null,this),n.e=PropertyFactory.getProp(this,t.e,1,null,this),n.h=PropertyFactory.getProp(this,t.h||{k:0},0,.01,this),n.a=PropertyFactory.getProp(this,t.a||{k:0},0,degToRads,this),n.g=new GradientProperty(this,t.g,this)),n.o=PropertyFactory.getProp(this,t.o,0,.01,this),"st"===t.ty||"gs"===t.ty){if(r.lc=lineCapEnum[t.lc||2],r.lj=lineJoinEnum[t.lj||2],1==t.lj&&(r.ml=t.ml),n.w=PropertyFactory.getProp(this,t.w,0,null,this),n.w.k||(r.wi=n.w.v),t.d){var i=new DashProperty(this,t.d,"canvas",this);n.d=i,n.d.k||(r.da=n.d.dashArray,r.do=n.d.dashoffset[0])}}else r.r=2===t.r?"evenodd":"nonzero";return this.stylesList.push(r),n.style=r,n},CVShapeElement.prototype.createGroupElement=function(){return{it:[],prevViewData:[]}},CVShapeElement.prototype.createTransformElement=function(t){return{transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,t.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,t,this)}}},CVShapeElement.prototype.createShapeElement=function(t){var e=new CVShapeData(this,t,this.stylesList,this.transformsManager);return this.shapes.push(e),this.addShapeToModifiers(e),e},CVShapeElement.prototype.reloadShapes=function(){var t;this._isFirstFrame=!0;var e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(t){var e,r=this.stylesList.length;for(e=0;e<r;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.push(t)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.pop()},CVShapeElement.prototype.closeStyles=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].closed=!0},CVShapeElement.prototype.searchShapes=function(t,e,r,n,i){var a,o,s,l,c,u,h=t.length-1,f=[],p=[],d=[].concat(i);for(a=h;a>=0;a-=1){if((l=this.searchProcessedElement(t[a]))?e[a]=r[l-1]:t[a]._shouldRender=n,"fl"===t[a].ty||"st"===t[a].ty||"gf"===t[a].ty||"gs"===t[a].ty)l?e[a].style.closed=!1:e[a]=this.createStyleElement(t[a],d),f.push(e[a].style);else if("gr"===t[a].ty){if(l)for(s=e[a].it.length,o=0;o<s;o+=1)e[a].prevViewData[o]=e[a].it[o];else e[a]=this.createGroupElement(t[a]);this.searchShapes(t[a].it,e[a].it,e[a].prevViewData,n,d)}else"tr"===t[a].ty?(l||(u=this.createTransformElement(t[a]),e[a]=u),d.push(e[a]),this.addTransformToStyleList(e[a])):"sh"===t[a].ty||"rc"===t[a].ty||"el"===t[a].ty||"sr"===t[a].ty?l||(e[a]=this.createShapeElement(t[a])):"tm"===t[a].ty||"rd"===t[a].ty||"pb"===t[a].ty||"zz"===t[a].ty||"op"===t[a].ty?(l?(c=e[a]).closed=!1:((c=ShapeModifiers.getModifier(t[a].ty)).init(this,t[a]),e[a]=c,this.shapeModifiers.push(c)),p.push(c)):"rp"===t[a].ty&&(l?(c=e[a]).closed=!0:(c=ShapeModifiers.getModifier(t[a].ty),e[a]=c,c.init(this,t,a,e),this.shapeModifiers.push(c),n=!1),p.push(c));this.addProcessedElement(t[a],a+1)}for(this.removeTransformFromStyleList(),this.closeStyles(f),h=p.length,a=0;a<h;a+=1)p[a].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(t,e){(t._opMdf||e.op._mdf||this._isFirstFrame)&&(e.opacity=t.opacity,e.opacity*=e.op.v,e._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var t,e,r,n,i,a,o,s,l,c=this.stylesList.length,u=this.globalData.renderer,h=this.globalData.canvasContext;for(t=0;t<c;t+=1)if(("st"!==(s=(l=this.stylesList[t]).type)&&"gs"!==s||0!==l.wi)&&l.data._shouldRender&&0!==l.coOp&&0!==this.globalData.currentGlobalAlpha){for(u.save(),a=l.elements,"st"===s||"gs"===s?(u.ctxStrokeStyle("st"===s?l.co:l.grd),u.ctxLineWidth(l.wi),u.ctxLineCap(l.lc),u.ctxLineJoin(l.lj),u.ctxMiterLimit(l.ml||0)):u.ctxFillStyle("fl"===s?l.co:l.grd),u.ctxOpacity(l.coOp),"st"!==s&&"gs"!==s&&h.beginPath(),u.ctxTransform(l.preTransforms.finalTransform.props),r=a.length,e=0;e<r;e+=1){for("st"!==s&&"gs"!==s||(h.beginPath(),l.da&&(h.setLineDash(l.da),h.lineDashOffset=l.do)),i=(o=a[e].trNodes).length,n=0;n<i;n+=1)"m"===o[n].t?h.moveTo(o[n].p[0],o[n].p[1]):"c"===o[n].t?h.bezierCurveTo(o[n].pts[0],o[n].pts[1],o[n].pts[2],o[n].pts[3],o[n].pts[4],o[n].pts[5]):h.closePath();"st"!==s&&"gs"!==s||(u.ctxStroke(),l.da&&h.setLineDash(this.dashResetter))}"st"!==s&&"gs"!==s&&this.globalData.renderer.ctxFill(l.r),u.restore()}},CVShapeElement.prototype.renderShape=function(t,e,r,n){var i,a;for(a=t,i=e.length-1;i>=0;i-=1)"tr"===e[i].ty?(a=r[i].transform,this.renderShapeTransform(t,a)):"sh"===e[i].ty||"el"===e[i].ty||"rc"===e[i].ty||"sr"===e[i].ty?this.renderPath(e[i],r[i]):"fl"===e[i].ty?this.renderFill(e[i],r[i],a):"st"===e[i].ty?this.renderStroke(e[i],r[i],a):"gf"===e[i].ty||"gs"===e[i].ty?this.renderGradientFill(e[i],r[i],a):"gr"===e[i].ty?this.renderShape(a,e[i].it,r[i].it):e[i].ty;n&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(t,e){if(this._isFirstFrame||e._mdf||t.transforms._mdf){var r,n,i,a=t.trNodes,o=e.paths,s=o._length;a.length=0;var l=t.transforms.finalTransform;for(i=0;i<s;i+=1){var c=o.shapes[i];if(c&&c.v){for(n=c._length,r=1;r<n;r+=1)1===r&&a.push({t:"m",p:l.applyToPointArray(c.v[0][0],c.v[0][1],0)}),a.push({t:"c",pts:l.applyToTriplePoints(c.o[r-1],c.i[r],c.v[r])});1===n&&a.push({t:"m",p:l.applyToPointArray(c.v[0][0],c.v[0][1],0)}),c.c&&n&&(a.push({t:"c",pts:l.applyToTriplePoints(c.o[r-1],c.i[0],c.v[0])}),a.push({t:"z"}))}}t.trNodes=a}},CVShapeElement.prototype.renderPath=function(t,e){if(!0!==t.hd&&t._shouldRender){var r,n=e.styledShapes.length;for(r=0;r<n;r+=1)this.renderStyledShape(e.styledShapes[r],e.sh)}},CVShapeElement.prototype.renderFill=function(t,e,r){var n=e.style;(e.c._mdf||this._isFirstFrame)&&(n.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(n.coOp=e.o.v*r.opacity)},CVShapeElement.prototype.renderGradientFill=function(t,e,r){var n,i=e.style;if(!i.grd||e.g._mdf||e.s._mdf||e.e._mdf||1!==t.t&&(e.h._mdf||e.a._mdf)){var a,o=this.globalData.canvasContext,s=e.s.v,l=e.e.v;if(1===t.t)n=o.createLinearGradient(s[0],s[1],l[0],l[1]);else{var c=Math.sqrt(Math.pow(s[0]-l[0],2)+Math.pow(s[1]-l[1],2)),u=Math.atan2(l[1]-s[1],l[0]-s[0]),h=e.h.v;h>=1?h=.99:h<=-1&&(h=-.99);var f=c*h,p=Math.cos(u+e.a.v)*f+s[0],d=Math.sin(u+e.a.v)*f+s[1];n=o.createRadialGradient(p,d,0,s[0],s[1],c)}var m=t.g.p,y=e.g.c,v=1;for(a=0;a<m;a+=1)e.g._hasOpacity&&e.g._collapsable&&(v=e.g.o[2*a+1]),n.addColorStop(y[4*a]/100,"rgba("+y[4*a+1]+","+y[4*a+2]+","+y[4*a+3]+","+v+")");i.grd=n}i.coOp=e.o.v*r.opacity},CVShapeElement.prototype.renderStroke=function(t,e,r){var n=e.style,i=e.d;i&&(i._mdf||this._isFirstFrame)&&(n.da=i.dashArray,n.do=i.dashoffset[0]),(e.c._mdf||this._isFirstFrame)&&(n.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(n.coOp=e.o.v*r.opacity),(e.w._mdf||this._isFirstFrame)&&(n.wi=e.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=!1;t.fc?(e=!0,this.values.fill=this.buildColor(t.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=e;var r=!1;t.sc&&(r=!0,this.values.stroke=this.buildColor(t.sc),this.values.sWidth=t.sw);var n,i,a,o,s,l,c,u,h,f,p,d,m=this.globalData.fontManager.getFontByName(t.f),y=t.l,v=this.mHelper;this.stroke=r,this.values.fValue=t.finalSize+"px "+this.globalData.fontManager.getFontByName(t.f).fFamily,i=t.finalText.length;var g=this.data.singleShape,b=.001*t.tr*t.finalSize,x=0,w=0,E=!0,k=0;for(n=0;n<i;n+=1){o=(a=this.globalData.fontManager.getCharData(t.finalText[n],m.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily))&&a.data||{},v.reset(),g&&y[n].n&&(x=-b,w+=t.yOffset,w+=E?1:0,E=!1),h=(c=o.shapes?o.shapes[0].it:[]).length,v.scale(t.finalSize/100,t.finalSize/100),g&&this.applyTextPropertiesToMatrix(t,v,y[n].line,x,w),p=createSizedArray(h-1);var S=0;for(u=0;u<h;u+=1)if("sh"===c[u].ty){for(l=c[u].ks.k.i.length,f=c[u].ks.k,d=[],s=1;s<l;s+=1)1===s&&d.push(v.applyToX(f.v[0][0],f.v[0][1],0),v.applyToY(f.v[0][0],f.v[0][1],0)),d.push(v.applyToX(f.o[s-1][0],f.o[s-1][1],0),v.applyToY(f.o[s-1][0],f.o[s-1][1],0),v.applyToX(f.i[s][0],f.i[s][1],0),v.applyToY(f.i[s][0],f.i[s][1],0),v.applyToX(f.v[s][0],f.v[s][1],0),v.applyToY(f.v[s][0],f.v[s][1],0));d.push(v.applyToX(f.o[s-1][0],f.o[s-1][1],0),v.applyToY(f.o[s-1][0],f.o[s-1][1],0),v.applyToX(f.i[0][0],f.i[0][1],0),v.applyToY(f.i[0][0],f.i[0][1],0),v.applyToX(f.v[0][0],f.v[0][1],0),v.applyToY(f.v[0][0],f.v[0][1],0)),p[S]=d,S+=1}g&&(x+=y[n].l,x+=b),this.textSpans[k]?this.textSpans[k].elem=p:this.textSpans[k]={elem:p},k+=1}},CVTextElement.prototype.renderInnerContent=function(){var t,e,r,n,i,a;this.validateText(),this.canvasContext.font=this.values.fValue,this.globalData.renderer.ctxLineCap("butt"),this.globalData.renderer.ctxLineJoin("miter"),this.globalData.renderer.ctxMiterLimit(4),this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var o,s=this.textAnimator.renderedLetters,l=this.textProperty.currentData.l;e=l.length;var c,u,h=null,f=null,p=null,d=this.globalData.renderer;for(t=0;t<e;t+=1)if(!l[t].n){if((o=s[t])&&(d.save(),d.ctxTransform(o.p),d.ctxOpacity(o.o)),this.fill){for(o&&o.fc?h!==o.fc&&(d.ctxFillStyle(o.fc),h=o.fc):h!==this.values.fill&&(h=this.values.fill,d.ctxFillStyle(this.values.fill)),n=(c=this.textSpans[t].elem).length,this.globalData.canvasContext.beginPath(),r=0;r<n;r+=1)for(a=(u=c[r]).length,this.globalData.canvasContext.moveTo(u[0],u[1]),i=2;i<a;i+=6)this.globalData.canvasContext.bezierCurveTo(u[i],u[i+1],u[i+2],u[i+3],u[i+4],u[i+5]);this.globalData.canvasContext.closePath(),d.ctxFill()}if(this.stroke){for(o&&o.sw?p!==o.sw&&(p=o.sw,d.ctxLineWidth(o.sw)):p!==this.values.sWidth&&(p=this.values.sWidth,d.ctxLineWidth(this.values.sWidth)),o&&o.sc?f!==o.sc&&(f=o.sc,d.ctxStrokeStyle(o.sc)):f!==this.values.stroke&&(f=this.values.stroke,d.ctxStrokeStyle(this.values.stroke)),n=(c=this.textSpans[t].elem).length,this.globalData.canvasContext.beginPath(),r=0;r<n;r+=1)for(a=(u=c[r]).length,this.globalData.canvasContext.moveTo(u[0],u[1]),i=2;i<a;i+=6)this.globalData.canvasContext.bezierCurveTo(u[i],u[i+1],u[i+2],u[i+3],u[i+4],u[i+5]);this.globalData.canvasContext.closePath(),d.ctxStroke()}o&&this.globalData.renderer.restore()}},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var t=createTag("canvas");t.width=this.assetData.w,t.height=this.assetData.h;var e,r,n=t.getContext("2d"),i=this.img.width,a=this.img.height,o=i/a,s=this.assetData.w/this.assetData.h,l=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;o>s&&"xMidYMid slice"===l||o<s&&"xMidYMid slice"!==l?e=(r=a)*s:r=(e=i)/s,n.drawImage(this.img,(i-e)/2,(a-r)/2,e,r,0,0,this.assetData.w,this.assetData.h),this.img=t}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){this.globalData.renderer.ctxFillStyle(this.data.sc),this.globalData.renderer.ctxFillRect(0,0,this.data.sw,this.data.sh)},extendPrototype([BaseRenderer],CanvasRendererBase),CanvasRendererBase.prototype.createShape=function(t){return new CVShapeElement(t,this.globalData,this)},CanvasRendererBase.prototype.createText=function(t){return new CVTextElement(t,this.globalData,this)},CanvasRendererBase.prototype.createImage=function(t){return new CVImageElement(t,this.globalData,this)},CanvasRendererBase.prototype.createSolid=function(t){return new CVSolidElement(t,this.globalData,this)},CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRendererBase.prototype.ctxTransform=function(t){1===t[0]&&0===t[1]&&0===t[4]&&1===t[5]&&0===t[12]&&0===t[13]||this.canvasContext.transform(t[0],t[1],t[4],t[5],t[12],t[13])},CanvasRendererBase.prototype.ctxOpacity=function(t){this.canvasContext.globalAlpha*=t<0?0:t},CanvasRendererBase.prototype.ctxFillStyle=function(t){this.canvasContext.fillStyle=t},CanvasRendererBase.prototype.ctxStrokeStyle=function(t){this.canvasContext.strokeStyle=t},CanvasRendererBase.prototype.ctxLineWidth=function(t){this.canvasContext.lineWidth=t},CanvasRendererBase.prototype.ctxLineCap=function(t){this.canvasContext.lineCap=t},CanvasRendererBase.prototype.ctxLineJoin=function(t){this.canvasContext.lineJoin=t},CanvasRendererBase.prototype.ctxMiterLimit=function(t){this.canvasContext.miterLimit=t},CanvasRendererBase.prototype.ctxFill=function(t){this.canvasContext.fill(t)},CanvasRendererBase.prototype.ctxFillRect=function(t,e,r,n){this.canvasContext.fillRect(t,e,r,n)},CanvasRendererBase.prototype.ctxStroke=function(){this.canvasContext.stroke()},CanvasRendererBase.prototype.reset=function(){this.renderConfig.clearCanvas?this.contextData.reset():this.canvasContext.restore()},CanvasRendererBase.prototype.save=function(){this.canvasContext.save()},CanvasRendererBase.prototype.restore=function(t){this.renderConfig.clearCanvas?(t&&(this.globalData.blendMode="source-over"),this.contextData.restore(t)):this.canvasContext.restore()},CanvasRendererBase.prototype.configAnimation=function(t){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var e=this.animationItem.container.style;e.width="100%",e.height="100%";var r="0px 0px 0px";e.transformOrigin=r,e.mozTransformOrigin=r,e.webkitTransformOrigin=r,e["-webkit-transform"]=r,e.contentVisibility=this.renderConfig.contentVisibility,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.contextData.setContext(this.canvasContext),this.data=t,this.layers=t.layers,this.transformCanvas={w:t.w,h:t.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(t,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(t.layers.length),this.updateContainerSize()},CanvasRendererBase.prototype.updateContainerSize=function(t,e){var r,n,i,a;if(this.reset(),t?(r=t,n=e,this.canvasContext.canvas.width=r,this.canvasContext.canvas.height=n):(this.animationItem.wrapper&&this.animationItem.container?(r=this.animationItem.wrapper.offsetWidth,n=this.animationItem.wrapper.offsetHeight):(r=this.canvasContext.canvas.width,n=this.canvasContext.canvas.height),this.canvasContext.canvas.width=r*this.renderConfig.dpr,this.canvasContext.canvas.height=n*this.renderConfig.dpr),-1!==this.renderConfig.preserveAspectRatio.indexOf("meet")||-1!==this.renderConfig.preserveAspectRatio.indexOf("slice")){var o=this.renderConfig.preserveAspectRatio.split(" "),s=o[1]||"meet",l=o[0]||"xMidYMid",c=l.substr(0,4),u=l.substr(4);i=r/n,(a=this.transformCanvas.w/this.transformCanvas.h)>i&&"meet"===s||a<i&&"slice"===s?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=r/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=n/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=n/(this.transformCanvas.h/this.renderConfig.dpr)),this.transformCanvas.tx="xMid"===c&&(a<i&&"meet"===s||a>i&&"slice"===s)?(r-this.transformCanvas.w*(n/this.transformCanvas.h))/2*this.renderConfig.dpr:"xMax"===c&&(a<i&&"meet"===s||a>i&&"slice"===s)?(r-this.transformCanvas.w*(n/this.transformCanvas.h))*this.renderConfig.dpr:0,this.transformCanvas.ty="YMid"===u&&(a>i&&"meet"===s||a<i&&"slice"===s)?(n-this.transformCanvas.h*(r/this.transformCanvas.w))/2*this.renderConfig.dpr:"YMax"===u&&(a>i&&"meet"===s||a<i&&"slice"===s)?(n-this.transformCanvas.h*(r/this.transformCanvas.w))*this.renderConfig.dpr:0}else"none"===this.renderConfig.preserveAspectRatio?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=n/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRendererBase.prototype.destroy=function(){var t;for(this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),t=(this.layers?this.layers.length:0)-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRendererBase.prototype.renderFrame=function(t,e){if((this.renderedFrame!==t||!0!==this.renderConfig.clearCanvas||e)&&!this.destroyed&&-1!==t){var r;this.renderedFrame=t,this.globalData.frameNum=t-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||e,this.globalData.projectInterface.currentFrame=t;var n=this.layers.length;for(this.completeLayers||this.checkLayers(t),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].prepareFrame(t-this.layers[r].st);if(this.globalData._mdf){for(!0===this.renderConfig.clearCanvas?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].renderFrame();!0!==this.renderConfig.clearCanvas&&this.restore()}}},CanvasRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!e[t]&&99!==this.layers[t].ty){var r=this.createItem(this.layers[t],this,this.globalData);e[t]=r,r.initExpressions()}},CanvasRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display="block"},CVContextData.prototype.duplicate=function(){var t=2*this._length,e=0;for(e=this._length;e<t;e+=1)this.stack[e]=new CanvasContext;this._length=t},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.stack[this.cArrPos].opacity=1},CVContextData.prototype.restore=function(t){this.cArrPos-=1;var e,r=this.stack[this.cArrPos],n=r.transform,i=this.cTr.props;for(e=0;e<16;e+=1)i[e]=n[e];if(t){this.nativeContext.restore();var a=this.stack[this.cArrPos+1];this.appliedFillStyle=a.fillStyle,this.appliedStrokeStyle=a.strokeStyle,this.appliedLineWidth=a.lineWidth,this.appliedLineCap=a.lineCap,this.appliedLineJoin=a.lineJoin,this.appliedMiterLimit=a.miterLimit}this.nativeContext.setTransform(n[0],n[1],n[4],n[5],n[12],n[13]),(t||-1!==r.opacity&&this.currentOpacity!==r.opacity)&&(this.nativeContext.globalAlpha=r.opacity,this.currentOpacity=r.opacity),this.currentFillStyle=r.fillStyle,this.currentStrokeStyle=r.strokeStyle,this.currentLineWidth=r.lineWidth,this.currentLineCap=r.lineCap,this.currentLineJoin=r.lineJoin,this.currentMiterLimit=r.miterLimit},CVContextData.prototype.save=function(t){t&&this.nativeContext.save();var e=this.cTr.props;this._length<=this.cArrPos&&this.duplicate();var r,n=this.stack[this.cArrPos];for(r=0;r<16;r+=1)n.transform[r]=e[r];this.cArrPos+=1;var i=this.stack[this.cArrPos];i.opacity=n.opacity,i.fillStyle=n.fillStyle,i.strokeStyle=n.strokeStyle,i.lineWidth=n.lineWidth,i.lineCap=n.lineCap,i.lineJoin=n.lineJoin,i.miterLimit=n.miterLimit},CVContextData.prototype.setOpacity=function(t){this.stack[this.cArrPos].opacity=t},CVContextData.prototype.setContext=function(t){this.nativeContext=t},CVContextData.prototype.fillStyle=function(t){this.stack[this.cArrPos].fillStyle!==t&&(this.currentFillStyle=t,this.stack[this.cArrPos].fillStyle=t)},CVContextData.prototype.strokeStyle=function(t){this.stack[this.cArrPos].strokeStyle!==t&&(this.currentStrokeStyle=t,this.stack[this.cArrPos].strokeStyle=t)},CVContextData.prototype.lineWidth=function(t){this.stack[this.cArrPos].lineWidth!==t&&(this.currentLineWidth=t,this.stack[this.cArrPos].lineWidth=t)},CVContextData.prototype.lineCap=function(t){this.stack[this.cArrPos].lineCap!==t&&(this.currentLineCap=t,this.stack[this.cArrPos].lineCap=t)},CVContextData.prototype.lineJoin=function(t){this.stack[this.cArrPos].lineJoin!==t&&(this.currentLineJoin=t,this.stack[this.cArrPos].lineJoin=t)},CVContextData.prototype.miterLimit=function(t){this.stack[this.cArrPos].miterLimit!==t&&(this.currentMiterLimit=t,this.stack[this.cArrPos].miterLimit=t)},CVContextData.prototype.transform=function(t){this.transformMat.cloneFromProps(t);var e=this.cTr;this.transformMat.multiply(e),e.cloneFromProps(this.transformMat.props);var r=e.props;this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13])},CVContextData.prototype.opacity=function(t){var e=this.stack[this.cArrPos].opacity;e*=t<0?0:t,this.stack[this.cArrPos].opacity!==e&&(this.currentOpacity!==t&&(this.nativeContext.globalAlpha=t,this.currentOpacity=t),this.stack[this.cArrPos].opacity=e)},CVContextData.prototype.fill=function(t){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fill(t)},CVContextData.prototype.fillRect=function(t,e,r,n){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fillRect(t,e,r,n)},CVContextData.prototype.stroke=function(){this.appliedStrokeStyle!==this.currentStrokeStyle&&(this.appliedStrokeStyle=this.currentStrokeStyle,this.nativeContext.strokeStyle=this.appliedStrokeStyle),this.appliedLineWidth!==this.currentLineWidth&&(this.appliedLineWidth=this.currentLineWidth,this.nativeContext.lineWidth=this.appliedLineWidth),this.appliedLineCap!==this.currentLineCap&&(this.appliedLineCap=this.currentLineCap,this.nativeContext.lineCap=this.appliedLineCap),this.appliedLineJoin!==this.currentLineJoin&&(this.appliedLineJoin=this.currentLineJoin,this.nativeContext.lineJoin=this.appliedLineJoin),this.appliedMiterLimit!==this.currentMiterLimit&&(this.appliedMiterLimit=this.currentMiterLimit,this.nativeContext.miterLimit=this.appliedMiterLimit),this.nativeContext.stroke()},extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var t,e=this.canvasContext;for(e.beginPath(),e.moveTo(0,0),e.lineTo(this.data.w,0),e.lineTo(this.data.w,this.data.h),e.lineTo(0,this.data.h),e.lineTo(0,0),e.clip(),t=this.layers.length-1;t>=0;t-=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},CVCompElement.prototype.destroy=function(){var t;for(t=this.layers.length-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.layers=null,this.elements=null},CVCompElement.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)},extendPrototype([CanvasRendererBase],CanvasRenderer),CanvasRenderer.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)},HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0!==this.data.bm&&this.setBlendMode()},renderElement:function(){var t=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var e=this.finalTransform.mat.toCSS();t.transform=e,t.webkitTransform=e}this.finalTransform._opMdf&&(t.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting,extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var t;this.data.hasMask?((t=createNS("rect")).setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):((t=createTag("div")).style.width=this.data.sw+"px",t.style.height=this.data.sh+"px",t.style.backgroundColor=this.data.sc),this.layerElement.appendChild(t)},extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var t;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),t=this.svgElement;else{t=createNS("svg");var e=this.comp.data?this.comp.data:this.globalData.compSize;t.setAttribute("width",e.w),t.setAttribute("height",e.h),t.appendChild(this.shapesContainer),this.layerElement.appendChild(t)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=t},HShapeElement.prototype.getTransformedPoint=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)e=t[r].mProps.v.applyToPointArray(e[0],e[1],0);return e},HShapeElement.prototype.calculateShapeBoundingBox=function(t,e){var r,n,i,a,o,s=t.sh.v,l=t.transformers,c=s._length;if(!(c<=1)){for(r=0;r<c-1;r+=1)n=this.getTransformedPoint(l,s.v[r]),i=this.getTransformedPoint(l,s.o[r]),a=this.getTransformedPoint(l,s.i[r+1]),o=this.getTransformedPoint(l,s.v[r+1]),this.checkBounds(n,i,a,o,e);s.c&&(n=this.getTransformedPoint(l,s.v[r]),i=this.getTransformedPoint(l,s.o[r]),a=this.getTransformedPoint(l,s.i[0]),o=this.getTransformedPoint(l,s.v[0]),this.checkBounds(n,i,a,o,e))}},HShapeElement.prototype.checkBounds=function(t,e,r,n,i){this.getBoundsOfCurve(t,e,r,n);var a=this.shapeBoundingBox;i.x=bmMin(a.left,i.x),i.xMax=bmMax(a.right,i.xMax),i.y=bmMin(a.top,i.y),i.yMax=bmMax(a.bottom,i.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(t,e,r,n){for(var i,a,o,s,l,c,u,h=[[t[0],n[0]],[t[1],n[1]]],f=0;f<2;++f)a=6*t[f]-12*e[f]+6*r[f],i=-3*t[f]+9*e[f]-9*r[f]+3*n[f],o=3*e[f]-3*t[f],a|=0,o|=0,0==(i|=0)&&0===a||(0===i?(s=-o/a)>0&&s<1&&h[f].push(this.calculateF(s,t,e,r,n,f)):(l=a*a-4*o*i)>=0&&((c=(-a+bmSqrt(l))/(2*i))>0&&c<1&&h[f].push(this.calculateF(c,t,e,r,n,f)),(u=(-a-bmSqrt(l))/(2*i))>0&&u<1&&h[f].push(this.calculateF(u,t,e,r,n,f))));this.shapeBoundingBox.left=bmMin.apply(null,h[0]),this.shapeBoundingBox.top=bmMin.apply(null,h[1]),this.shapeBoundingBox.right=bmMax.apply(null,h[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,h[1])},HShapeElement.prototype.calculateF=function(t,e,r,n,i,a){return bmPow(1-t,3)*e[a]+3*bmPow(1-t,2)*t*r[a]+3*(1-t)*bmPow(t,2)*n[a]+bmPow(t,3)*i[a]},HShapeElement.prototype.calculateBoundingBox=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)t[r]&&t[r].sh?this.calculateShapeBoundingBox(t[r],e):t[r]&&t[r].it?this.calculateBoundingBox(t[r].it,e):t[r]&&t[r].style&&t[r].w&&this.expandStrokeBoundingBox(t[r].w,e)},HShapeElement.prototype.expandStrokeBoundingBox=function(t,e){var r=0;if(t.keyframes){for(var n=0;n<t.keyframes.length;n+=1){var i=t.keyframes[n].s;i>r&&(r=i)}r*=t.mult}else r=t.v*t.mult;e.x-=r,e.xMax+=r,e.y-=r,e.yMax+=r},HShapeElement.prototype.currentBoxContains=function(t){return this.currentBBox.x<=t.x&&this.currentBBox.y<=t.y&&this.currentBBox.width+this.currentBBox.x>=t.x+t.width&&this.currentBBox.height+this.currentBBox.y>=t.y+t.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var t=this.tempBoundingBox,e=999999;if(t.x=e,t.xMax=-e,t.y=e,t.yMax=-e,this.calculateBoundingBox(this.itemsData,t),t.width=t.xMax<t.x?0:t.xMax-t.x,t.height=t.yMax<t.y?0:t.yMax-t.y,this.currentBoxContains(t))return;var r=!1;if(this.currentBBox.w!==t.width&&(this.currentBBox.w=t.width,this.shapeCont.setAttribute("width",t.width),r=!0),this.currentBBox.h!==t.height&&(this.currentBBox.h=t.height,this.shapeCont.setAttribute("height",t.height),r=!0),r||this.currentBBox.x!==t.x||this.currentBBox.y!==t.y){this.currentBBox.w=t.width,this.currentBBox.h=t.height,this.currentBBox.x=t.x,this.currentBBox.y=t.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var n=this.shapeCont.style,i="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";n.transform=i,n.webkitTransform=i}}},extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var t=createNS("g");this.maskedElement.appendChild(t),this.innerElem=t}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=this.innerElem.style,r=t.fc?this.buildColor(t.fc):"rgba(0,0,0,0)";e.fill=r,e.color=r,t.sc&&(e.stroke=this.buildColor(t.sc),e.strokeWidth=t.sw+"px");var n,i,a=this.globalData.fontManager.getFontByName(t.f);if(!this.globalData.fontManager.chars)if(e.fontSize=t.finalSize+"px",e.lineHeight=t.finalSize+"px",a.fClass)this.innerElem.className=a.fClass;else{e.fontFamily=a.fFamily;var o=t.fWeight,s=t.fStyle;e.fontStyle=s,e.fontWeight=o}var l,c,u,h=t.l;i=h.length;var f,p=this.mHelper,d="",m=0;for(n=0;n<i;n+=1){if(this.globalData.fontManager.chars?(this.textPaths[m]?l=this.textPaths[m]:((l=createNS("path")).setAttribute("stroke-linecap",lineCapEnum[1]),l.setAttribute("stroke-linejoin",lineJoinEnum[2]),l.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[m]?u=(c=this.textSpans[m]).children[0]:((c=createTag("div")).style.lineHeight=0,(u=createNS("svg")).appendChild(l),styleDiv(c)))):this.isMasked?l=this.textPaths[m]?this.textPaths[m]:createNS("text"):this.textSpans[m]?(c=this.textSpans[m],l=this.textPaths[m]):(styleDiv(c=createTag("span")),styleDiv(l=createTag("span")),c.appendChild(l)),this.globalData.fontManager.chars){var y,v=this.globalData.fontManager.getCharData(t.finalText[n],a.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily);if(y=v?v.data:null,p.reset(),y&&y.shapes&&y.shapes.length&&(f=y.shapes[0].it,p.scale(t.finalSize/100,t.finalSize/100),d=this.createPathShape(p,f),l.setAttribute("d",d)),this.isMasked)this.innerElem.appendChild(l);else{if(this.innerElem.appendChild(c),y&&y.shapes){document.body.appendChild(u);var g=u.getBBox();u.setAttribute("width",g.width+2),u.setAttribute("height",g.height+2),u.setAttribute("viewBox",g.x-1+" "+(g.y-1)+" "+(g.width+2)+" "+(g.height+2));var b=u.style,x="translate("+(g.x-1)+"px,"+(g.y-1)+"px)";b.transform=x,b.webkitTransform=x,h[n].yOffset=g.y-1}else u.setAttribute("width",1),u.setAttribute("height",1);c.appendChild(u)}}else if(l.textContent=h[n].val,l.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(l);else{this.innerElem.appendChild(c);var w=l.style,E="translate3d(0,"+-t.finalSize/1.2+"px,0)";w.transform=E,w.webkitTransform=E}this.isMasked?this.textSpans[m]=l:this.textSpans[m]=c,this.textSpans[m].style.display="block",this.textPaths[m]=l,m+=1}for(;m<this.textSpans.length;)this.textSpans[m].style.display="none",m+=1},HTextElement.prototype.renderInnerContent=function(){var t;if(this.validateText(),this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),t=this.svgElement.style;var e="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";t.transform=e,t.webkitTransform=e}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag){var r,n,i,a,o,s=0,l=this.textAnimator.renderedLetters,c=this.textProperty.currentData.l;for(n=c.length,r=0;r<n;r+=1)c[r].n?s+=1:(a=this.textSpans[r],o=this.textPaths[r],i=l[s],s+=1,i._mdf.m&&(this.isMasked?a.setAttribute("transform",i.m):(a.style.webkitTransform=i.m,a.style.transform=i.m)),a.style.opacity=i.o,i.sw&&i._mdf.sw&&o.setAttribute("stroke-width",i.sw),i.sc&&i._mdf.sc&&o.setAttribute("stroke",i.sc),i.fc&&i._mdf.fc&&(o.setAttribute("fill",i.fc),o.style.color=i.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var u=this.innerElem.getBBox();if(this.currentBBox.w!==u.width&&(this.currentBBox.w=u.width,this.svgElement.setAttribute("width",u.width)),this.currentBBox.h!==u.height&&(this.currentBBox.h=u.height,this.svgElement.setAttribute("height",u.height)),this.currentBBox.w!==u.width+2||this.currentBBox.h!==u.height+2||this.currentBBox.x!==u.x-1||this.currentBBox.y!==u.y-1){this.currentBBox.w=u.width+2,this.currentBBox.h=u.height+2,this.currentBBox.x=u.x-1,this.currentBBox.y=u.y-1,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),t=this.svgElement.style;var h="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";t.transform=h,t.webkitTransform=h}}}},extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var t,e,r,n,i=this.comp.threeDElements.length;for(t=0;t<i;t+=1)if("3d"===(e=this.comp.threeDElements[t]).type){r=e.perspectiveElem.style,n=e.container.style;var a=this.pe.v+"px",o="0px 0px 0px",s="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";r.perspective=a,r.webkitPerspective=a,n.transformOrigin=o,n.mozTransformOrigin=o,n.webkitTransformOrigin=o,r.transform=s,r.webkitTransform=s}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var t,e,r=this._isFirstFrame;if(this.hierarchy)for(e=this.hierarchy.length,t=0;t<e;t+=1)r=this.hierarchy[t].finalTransform.mProp._mdf||r;if(r||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(t=e=this.hierarchy.length-1;t>=0;t-=1){var n=this.hierarchy[t].finalTransform.mProp;this.mat.translate(-n.p.v[0],-n.p.v[1],n.p.v[2]),this.mat.rotateX(-n.or.v[0]).rotateY(-n.or.v[1]).rotateZ(n.or.v[2]),this.mat.rotateX(-n.rx.v).rotateY(-n.ry.v).rotateZ(n.rz.v),this.mat.scale(1/n.s.v[0],1/n.s.v[1],1/n.s.v[2]),this.mat.translate(n.a.v[0],n.a.v[1],n.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var i;i=this.p?[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var a=Math.sqrt(Math.pow(i[0],2)+Math.pow(i[1],2)+Math.pow(i[2],2)),o=[i[0]/a,i[1]/a,i[2]/a],s=Math.sqrt(o[2]*o[2]+o[0]*o[0]),l=Math.atan2(o[1],s),c=Math.atan2(o[0],-o[2]);this.mat.rotateY(c).rotateX(-l)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var u=!this._prevMat.equals(this.mat);if((u||this.pe._mdf)&&this.comp.threeDElements){var h,f,p;for(e=this.comp.threeDElements.length,t=0;t<e;t+=1)if("3d"===(h=this.comp.threeDElements[t]).type){if(u){var d=this.mat.toCSS();(p=h.container.style).transform=d,p.webkitTransform=d}this.pe._mdf&&((f=h.perspectiveElem.style).perspective=this.pe.v+"px",f.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null},extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData),e=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(e),e.crossOrigin="anonymous",e.src=t,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)},extendPrototype([BaseRenderer],HybridRendererBase),HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},HybridRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){var n=this.layers[e];if(n.ddd&&this.supports3d)this.addTo3dContainer(r,e);else if(this.threeDElements)this.addTo3dContainer(r,e);else{for(var i,a,o=0;o<e;)this.elements[o]&&!0!==this.elements[o]&&this.elements[o].getBaseElement&&(a=this.elements[o],i=(this.layers[o].ddd?this.getThreeDContainerByPos(o):a.getBaseElement())||i),o+=1;i?n.ddd&&this.supports3d||this.layerElement.insertBefore(r,i):n.ddd&&this.supports3d||this.layerElement.appendChild(r)}}},HybridRendererBase.prototype.createShape=function(t){return this.supports3d?new HShapeElement(t,this.globalData,this):new SVGShapeElement(t,this.globalData,this)},HybridRendererBase.prototype.createText=function(t){return this.supports3d?new HTextElement(t,this.globalData,this):new SVGTextLottieElement(t,this.globalData,this)},HybridRendererBase.prototype.createCamera=function(t){return this.camera=new HCameraElement(t,this.globalData,this),this.camera},HybridRendererBase.prototype.createImage=function(t){return this.supports3d?new HImageElement(t,this.globalData,this):new IImageElement(t,this.globalData,this)},HybridRendererBase.prototype.createSolid=function(t){return this.supports3d?new HSolidElement(t,this.globalData,this):new ISolidElement(t,this.globalData,this)},HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,HybridRendererBase.prototype.getThreeDContainerByPos=function(t){for(var e=0,r=this.threeDElements.length;e<r;){if(this.threeDElements[e].startPos<=t&&this.threeDElements[e].endPos>=t)return this.threeDElements[e].perspectiveElem;e+=1}return null},HybridRendererBase.prototype.createThreeDContainer=function(t,e){var r,n,i=createTag("div");styleDiv(i);var a=createTag("div");if(styleDiv(a),"3d"===e){(r=i.style).width=this.globalData.compSize.w+"px",r.height=this.globalData.compSize.h+"px";var o="50% 50%";r.webkitTransformOrigin=o,r.mozTransformOrigin=o,r.transformOrigin=o;var s="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";(n=a.style).transform=s,n.webkitTransform=s}i.appendChild(a);var l={container:a,perspectiveElem:i,startPos:t,endPos:t,type:e};return this.threeDElements.push(l),l},HybridRendererBase.prototype.build3dContainers=function(){var t,e,r=this.layers.length,n="";for(t=0;t<r;t+=1)this.layers[t].ddd&&3!==this.layers[t].ty?("3d"!==n&&(n="3d",e=this.createThreeDContainer(t,"3d")),e.endPos=Math.max(e.endPos,t)):("2d"!==n&&(n="2d",e=this.createThreeDContainer(t,"2d")),e.endPos=Math.max(e.endPos,t));for(t=(r=this.threeDElements.length)-1;t>=0;t-=1)this.resizerElem.appendChild(this.threeDElements[t].perspectiveElem)},HybridRendererBase.prototype.addTo3dContainer=function(t,e){for(var r=0,n=this.threeDElements.length;r<n;){if(e<=this.threeDElements[r].endPos){for(var i,a=this.threeDElements[r].startPos;a<e;)this.elements[a]&&this.elements[a].getBaseElement&&(i=this.elements[a].getBaseElement()),a+=1;i?this.threeDElements[r].container.insertBefore(t,i):this.threeDElements[r].container.appendChild(t);break}r+=1}},HybridRendererBase.prototype.configAnimation=function(t){var e=createTag("div"),r=this.animationItem.wrapper,n=e.style;n.width=t.w+"px",n.height=t.h+"px",this.resizerElem=e,styleDiv(e),n.transformStyle="flat",n.mozTransformStyle="flat",n.webkitTransformStyle="flat",this.renderConfig.className&&e.setAttribute("class",this.renderConfig.className),r.appendChild(e),n.overflow="hidden";var i=createNS("svg");i.setAttribute("width","1"),i.setAttribute("height","1"),styleDiv(i),this.resizerElem.appendChild(i);var a=createNS("defs");i.appendChild(a),this.data=t,this.setupGlobalData(t,i),this.globalData.defs=a,this.layers=t.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRendererBase.prototype.destroy=function(){var t;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRendererBase.prototype.updateContainerSize=function(){var t,e,r,n,i=this.animationItem.wrapper.offsetWidth,a=this.animationItem.wrapper.offsetHeight,o=i/a;this.globalData.compSize.w/this.globalData.compSize.h>o?(t=i/this.globalData.compSize.w,e=i/this.globalData.compSize.w,r=0,n=(a-this.globalData.compSize.h*(i/this.globalData.compSize.w))/2):(t=a/this.globalData.compSize.h,e=a/this.globalData.compSize.h,r=(i-this.globalData.compSize.w*(a/this.globalData.compSize.h))/2,n=0);var s=this.resizerElem.style;s.webkitTransform="matrix3d("+t+",0,0,0,0,"+e+",0,0,0,0,1,0,"+r+","+n+",0,1)",s.transform=s.webkitTransform},HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRendererBase.prototype.show=function(){this.resizerElem.style.display="block"},HybridRendererBase.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var t,e=this.globalData.compSize.w,r=this.globalData.compSize.h,n=this.threeDElements.length;for(t=0;t<n;t+=1){var i=this.threeDElements[t].perspectiveElem.style;i.webkitPerspective=Math.sqrt(Math.pow(e,2)+Math.pow(r,2))+"px",i.perspective=i.webkitPerspective}}},HybridRendererBase.prototype.searchExtraCompositions=function(t){var e,r=t.length,n=createTag("div");for(e=0;e<r;e+=1)if(t[e].xt){var i=this.createComp(t[e],n,this.globalData.comp,null);i.initExpressions(),this.globalData.projectInterface.registerComposition(i)}},extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(t,e){for(var r,n=0;n<e;)this.elements[n]&&this.elements[n].getBaseElement&&(r=this.elements[n].getBaseElement()),n+=1;r?this.layerElement.insertBefore(t,r):this.layerElement.appendChild(t)},HCompElement.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)},extendPrototype([HybridRendererBase],HybridRenderer),HybridRenderer.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)};var CompExpressionInterface=function(t){function e(e){for(var r=0,n=t.layers.length;r<n;){if(t.layers[r].nm===e||t.layers[r].ind===e)return t.elements[r].layerInterface;r+=1}return null}return Object.defineProperty(e,"_name",{value:t.data.nm}),e.layer=e,e.pixelAspect=1,e.height=t.data.h||t.globalData.compSize.h,e.width=t.data.w||t.globalData.compSize.w,e.pixelAspect=1,e.frameDuration=1/t.globalData.frameRate,e.displayStartTime=0,e.numLayers=t.layers.length,e};function _typeof$2(t){return _typeof$2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$2(t)}function seedRandom(t,e){var r,n=this,i=256,a="random",o=e.pow(i,6),s=e.pow(2,52),l=2*s,c=255;function u(t){var e,r=t.length,n=this,a=0,o=n.i=n.j=0,s=n.S=[];for(r||(t=[r++]);a<i;)s[a]=a++;for(a=0;a<i;a++)s[a]=s[o=c&o+t[a%r]+(e=s[a])],s[o]=e;n.g=function(t){for(var e,r=0,a=n.i,o=n.j,s=n.S;t--;)e=s[a=c&a+1],r=r*i+s[c&(s[a]=s[o=c&o+e])+(s[o]=e)];return n.i=a,n.j=o,r}}function h(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function f(t,e){var r,n=[],i=_typeof$2(t);if(e&&"object"==i)for(r in t)try{n.push(f(t[r],e-1))}catch(t){}return n.length?n:"string"==i?t:t+"\0"}function p(t,e){for(var r,n=t+"",i=0;i<n.length;)e[c&i]=c&(r^=19*e[c&i])+n.charCodeAt(i++);return d(e)}function d(t){return String.fromCharCode.apply(0,t)}e["seed"+a]=function(c,m,y){var v=[],g=p(f((m=!0===m?{entropy:!0}:m||{}).entropy?[c,d(t)]:null===c?function(){try{r;var e=new Uint8Array(i);return(n.crypto||n.msCrypto).getRandomValues(e),d(e)}catch(e){var a=n.navigator,o=a&&a.plugins;return[+new Date,n,o,n.screen,d(t)]}}():c,3),v),b=new u(v),x=function(){for(var t=b.g(6),e=o,r=0;t<s;)t=(t+r)*i,e*=i,r=b.g(1);for(;t>=l;)t/=2,e/=2,r>>>=1;return(t+r)/e};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,p(d(b.S),t),(m.pass||y||function(t,r,n,i){return i&&(i.S&&h(i,b),t.state=function(){return h(b,{})}),n?(e[a]=t,r):t})(x,g,"global"in m?m.global:this==e,m.state)},p(e.random(),t)}function initialize$2(t){seedRandom([],t)}var propTypes={SHAPE:"shape"};function _typeof$1(t){return _typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$1(t)}var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null,XMLHttpRequest=null,fetch=null,frames=null,_lottieGlobal={};function resetFrame(){_lottieGlobal={}}function $bm_isInstanceOfArray(t){return t.constructor===Array||t.constructor===Float32Array}function isNumerable(t,e){return"number"===t||e instanceof Number||"boolean"===t||"string"===t}function $bm_neg(t){var e=_typeof$1(t);if("number"===e||t instanceof Number||"boolean"===e)return-t;if($bm_isInstanceOfArray(t)){var r,n=t.length,i=[];for(r=0;r<n;r+=1)i[r]=-t[r];return i}return t.propType?t.v:-t}initialize$2(BMMath);var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(t,e){var r=_typeof$1(t),n=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(n,e)||"string"===r||"string"===n)return t+e;if($bm_isInstanceOfArray(t)&&isNumerable(n,e))return(t=t.slice(0))[0]+=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return(e=e.slice(0))[0]=t+e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var i=0,a=t.length,o=e.length,s=[];i<a||i<o;)("number"==typeof t[i]||t[i]instanceof Number)&&("number"==typeof e[i]||e[i]instanceof Number)?s[i]=t[i]+e[i]:s[i]=void 0===e[i]?t[i]:t[i]||e[i],i+=1;return s}return 0}var add=sum;function sub(t,e){var r=_typeof$1(t),n=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(n,e))return"string"===r&&(t=parseInt(t,10)),"string"===n&&(e=parseInt(e,10)),t-e;if($bm_isInstanceOfArray(t)&&isNumerable(n,e))return(t=t.slice(0))[0]-=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return(e=e.slice(0))[0]=t-e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var i=0,a=t.length,o=e.length,s=[];i<a||i<o;)("number"==typeof t[i]||t[i]instanceof Number)&&("number"==typeof e[i]||e[i]instanceof Number)?s[i]=t[i]-e[i]:s[i]=void 0===e[i]?t[i]:t[i]||e[i],i+=1;return s}return 0}function mul(t,e){var r,n,i,a=_typeof$1(t),o=_typeof$1(e);if(isNumerable(a,t)&&isNumerable(o,e))return t*e;if($bm_isInstanceOfArray(t)&&isNumerable(o,e)){for(i=t.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t[n]*e;return r}if(isNumerable(a,t)&&$bm_isInstanceOfArray(e)){for(i=e.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t*e[n];return r}return 0}function div(t,e){var r,n,i,a=_typeof$1(t),o=_typeof$1(e);if(isNumerable(a,t)&&isNumerable(o,e))return t/e;if($bm_isInstanceOfArray(t)&&isNumerable(o,e)){for(i=t.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t[n]/e;return r}if(isNumerable(a,t)&&$bm_isInstanceOfArray(e)){for(i=e.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t/e[n];return r}return 0}function mod(t,e){return"string"==typeof t&&(t=parseInt(t,10)),"string"==typeof e&&(e=parseInt(e,10)),t%e}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(t,e,r){if(e>r){var n=r;r=e,e=n}return Math.min(Math.max(t,e),r)}function radiansToDegrees(t){return t/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(t){return t*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(t,e){if("number"==typeof t||t instanceof Number)return e=e||0,Math.abs(t-e);var r;e||(e=helperLengthArray);var n=Math.min(t.length,e.length),i=0;for(r=0;r<n;r+=1)i+=Math.pow(e[r]-t[r],2);return Math.sqrt(i)}function normalize(t){return div(t,length(t))}function rgbToHsl(t){var e,r,n=t[0],i=t[1],a=t[2],o=Math.max(n,i,a),s=Math.min(n,i,a),l=(o+s)/2;if(o===s)e=0,r=0;else{var c=o-s;switch(r=l>.5?c/(2-o-s):c/(o+s),o){case n:e=(i-a)/c+(i<a?6:0);break;case i:e=(a-n)/c+2;break;case a:e=(n-i)/c+4}e/=6}return[e,r,l,t[3]]}function hue2rgb(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+6*(e-t)*r:r<.5?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function hslToRgb(t){var e,r,n,i=t[0],a=t[1],o=t[2];if(0===a)e=o,n=o,r=o;else{var s=o<.5?o*(1+a):o+a-o*a,l=2*o-s;e=hue2rgb(l,s,i+1/3),r=hue2rgb(l,s,i),n=hue2rgb(l,s,i-1/3)}return[e,r,n,t[3]]}function linear(t,e,r,n,i){if(void 0!==n&&void 0!==i||(n=e,i=r,e=0,r=1),r<e){var a=r;r=e,e=a}if(t<=e)return n;if(t>=r)return i;var o,s=r===e?0:(t-e)/(r-e);if(!n.length)return n+(i-n)*s;var l=n.length,c=createTypedArray("float32",l);for(o=0;o<l;o+=1)c[o]=n[o]+(i[o]-n[o])*s;return c}function random(t,e){if(void 0===e&&(void 0===t?(t=0,e=1):(e=t,t=void 0)),e.length){var r,n=e.length;t||(t=createTypedArray("float32",n));var i=createTypedArray("float32",n),a=BMMath.random();for(r=0;r<n;r+=1)i[r]=t[r]+a*(e[r]-t[r]);return i}return void 0===t&&(t=0),t+BMMath.random()*(e-t)}function createPath(t,e,r,n){var i,a=t.length,o=shapePool.newElement();o.setPathData(!!n,a);var s,l,c=[0,0];for(i=0;i<a;i+=1)s=e&&e[i]?e[i]:c,l=r&&r[i]?r[i]:c,o.setTripleAt(t[i][0],t[i][1],l[0]+t[i][0],l[1]+t[i][1],s[0]+t[i][0],s[1]+t[i][1],i,!0);return o}function initiateExpression(elem,data,property){function noOp(t){return t}if(!elem.globalData.renderConfig.runExpressions)return noOp;var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=-1!==val.indexOf("random"),elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||!0!==this.data.hd,wiggle=function(t,e){var r,n,i=this.pv.length?this.pv.length:1,a=createTypedArray("float32",i),o=Math.floor(5*time);for(r=0,n=0;r<o;){for(n=0;n<i;n+=1)a[n]+=-e+2*e*BMMath.random();r+=1}var s=5*time,l=s-Math.floor(s),c=createTypedArray("float32",i);if(i>1){for(n=0;n<i;n+=1)c[n]=this.pv[n]+a[n]+(-e+2*e*BMMath.random())*l;return c}return this.pv+a[0]+(-e+2*e*BMMath.random())*l}.bind(this);function loopInDuration(t,e){return loopIn(t,e,!0)}function loopOutDuration(t,e){return loopOut(t,e,!0)}thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty)),this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface),time,velocity,value,text,textIndex,textTotal,selectorValue;function lookAt(t,e){var r=[e[0]-t[0],e[1]-t[1],e[2]-t[2]],n=Math.atan2(r[0],Math.sqrt(r[1]*r[1]+r[2]*r[2]))/degToRads;return[-Math.atan2(r[1],r[2])/degToRads,n,0]}function easeOut(t,e,r,n,i){return applyEase(easeOutBez,t,e,r,n,i)}function easeIn(t,e,r,n,i){return applyEase(easeInBez,t,e,r,n,i)}function ease(t,e,r,n,i){return applyEase(easeInOutBez,t,e,r,n,i)}function applyEase(t,e,r,n,i,a){void 0===i?(i=r,a=n):e=(e-r)/(n-r),e>1?e=1:e<0&&(e=0);var o=t(e);if($bm_isInstanceOfArray(i)){var s,l=i.length,c=createTypedArray("float32",l);for(s=0;s<l;s+=1)c[s]=(a[s]-i[s])*o+i[s];return c}return(a-i)*o+i}function nearestKey(t){var e,r,n,i=data.k.length;if(data.k.length&&"number"!=typeof data.k[0])if(r=-1,(t*=elem.comp.globalData.frameRate)<data.k[0].t)r=1,n=data.k[0].t;else{for(e=0;e<i-1;e+=1){if(t===data.k[e].t){r=e+1,n=data.k[e].t;break}if(t>data.k[e].t&&t<data.k[e+1].t){t-data.k[e].t>data.k[e+1].t-t?(r=e+2,n=data.k[e+1].t):(r=e+1,n=data.k[e].t);break}}-1===r&&(r=e+1,n=data.k[e].t)}else r=0,n=0;var a={};return a.index=r,a.time=n/elem.comp.globalData.frameRate,a}function key(t){var e,r,n;if(!data.k.length||"number"==typeof data.k[0])throw new Error("The property has no keyframe at index "+t);t-=1,e={time:data.k[t].t/elem.comp.globalData.frameRate,value:[]};var i=Object.prototype.hasOwnProperty.call(data.k[t],"s")?data.k[t].s:data.k[t-1].e;for(n=i.length,r=0;r<n;r+=1)e[r]=i[r],e.value[r]=i[r];return e}function framesToTime(t,e){return e||(e=elem.comp.globalData.frameRate),t/e}function timeToFrames(t,e){return t||0===t||(t=time),e||(e=elem.comp.globalData.frameRate),t*e}function seedRandom(t){BMMath.seedrandom(randSeed+t)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(t,e){return"string"==typeof value?void 0===e?value.substring(t):value.substring(t,e):""}function substr(t,e){return"string"==typeof value?void 0===e?value.substr(t):value.substr(t,e):""}function posterizeTime(t){time=0===t?0:Math.floor(time*t)/t,value=valueAtTime(time)}var index=elem.data.ind,hasParent=!(!elem.hierarchy||!elem.hierarchy.length),parent,randSeed=Math.floor(1e6*Math.random()),globalData=elem.globalData;function executeExpression(t){return value=t,this.frameExpressionId===elem.globalData.frameId&&"textSelector"!==this.propType?value:("textSelector"===this.propType&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),4!==elemType||content||(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),(hasParent=!(!elem.hierarchy||!elem.hierarchy.length))&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,_needsRandom&&seedRandom(randSeed+time),needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt)}return executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData],executeExpression}return ob.initiateExpression=initiateExpression,ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath,_lottieGlobal],ob.resetFrame=resetFrame,ob}(),Expressions=function(){var t={initExpressions:function(t){var e=0,r=[];t.renderer.compInterface=CompExpressionInterface(t.renderer),t.renderer.globalData.projectInterface.registerComposition(t.renderer),t.renderer.globalData.pushExpression=function(){e+=1},t.renderer.globalData.popExpression=function(){0==(e-=1)&&function(){var t,e=r.length;for(t=0;t<e;t+=1)r[t].release();r.length=0}()},t.renderer.globalData.registerExpressionProperty=function(t){-1===r.indexOf(t)&&r.push(t)}}};return t.resetFrame=ExpressionManager.resetFrame,t}(),MaskManagerInterface=function(){function t(t,e){this._mask=t,this._data=e}return Object.defineProperty(t.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(t.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),100*this._mask.op.v}}),function(e){var r,n=createSizedArray(e.viewData.length),i=e.viewData.length;for(r=0;r<i;r+=1)n[r]=new t(e.viewData[r],e.masksProperties[r]);return function(t){for(r=0;r<i;){if(e.masksProperties[r].nm===t)return n[r];r+=1}return null}}}(),ExpressionPropertyInterface=function(){var t={pv:0,v:0,mult:1},e={pv:[0,0,0],v:[0,0,0],mult:1};function r(t,e,r){Object.defineProperty(t,"velocity",{get:function(){return e.getVelocityAtTime(e.comp.currentFrame)}}),t.numKeys=e.keyframes?e.keyframes.length:0,t.key=function(n){if(!t.numKeys)return 0;var i;i="s"in e.keyframes[n-1]?e.keyframes[n-1].s:"e"in e.keyframes[n-2]?e.keyframes[n-2].e:e.keyframes[n-2].s;var a="unidimensional"===r?new Number(i):Object.assign({},i);return a.time=e.keyframes[n-1].t/e.elem.comp.globalData.frameRate,a.value="unidimensional"===r?i[0]:i,a},t.valueAtTime=e.getValueAtTime,t.speedAtTime=e.getSpeedAtTime,t.velocityAtTime=e.getVelocityAtTime,t.propertyGroup=e.propertyGroup}function n(){return t}return function(i){return i?"unidimensional"===i.propType?function(e){e&&"pv"in e||(e=t);var n=1/e.mult,i=e.pv*n,a=new Number(i);return a.value=i,r(a,e,"unidimensional"),function(){return e.k&&e.getValue(),i=e.v*n,a.value!==i&&((a=new Number(i)).value=i,r(a,e,"unidimensional")),a}}(i):function(t){t&&"pv"in t||(t=e);var n=1/t.mult,i=t.data&&t.data.l||t.pv.length,a=createTypedArray("float32",i),o=createTypedArray("float32",i);return a.value=o,r(a,t,"multidimensional"),function(){t.k&&t.getValue();for(var e=0;e<i;e+=1)o[e]=t.v[e]*n,a[e]=o[e];return a}}(i):n}}(),TransformExpressionInterface=function(t){function e(t){switch(t){case"scale":case"Scale":case"ADBE Scale":case 6:return e.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return e.rotation;case"ADBE Rotate X":return e.xRotation;case"ADBE Rotate Y":return e.yRotation;case"position":case"Position":case"ADBE Position":case 2:return e.position;case"ADBE Position_0":return e.xPosition;case"ADBE Position_1":return e.yPosition;case"ADBE Position_2":return e.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return e.anchorPoint;case"opacity":case"Opacity":case 11:return e.opacity;default:return null}}var r,n,i,a;return Object.defineProperty(e,"rotation",{get:ExpressionPropertyInterface(t.r||t.rz)}),Object.defineProperty(e,"zRotation",{get:ExpressionPropertyInterface(t.rz||t.r)}),Object.defineProperty(e,"xRotation",{get:ExpressionPropertyInterface(t.rx)}),Object.defineProperty(e,"yRotation",{get:ExpressionPropertyInterface(t.ry)}),Object.defineProperty(e,"scale",{get:ExpressionPropertyInterface(t.s)}),t.p?a=ExpressionPropertyInterface(t.p):(r=ExpressionPropertyInterface(t.px),n=ExpressionPropertyInterface(t.py),t.pz&&(i=ExpressionPropertyInterface(t.pz))),Object.defineProperty(e,"position",{get:function(){return t.p?a():[r(),n(),i?i():0]}}),Object.defineProperty(e,"xPosition",{get:ExpressionPropertyInterface(t.px)}),Object.defineProperty(e,"yPosition",{get:ExpressionPropertyInterface(t.py)}),Object.defineProperty(e,"zPosition",{get:ExpressionPropertyInterface(t.pz)}),Object.defineProperty(e,"anchorPoint",{get:ExpressionPropertyInterface(t.a)}),Object.defineProperty(e,"opacity",{get:ExpressionPropertyInterface(t.o)}),Object.defineProperty(e,"skew",{get:ExpressionPropertyInterface(t.sk)}),Object.defineProperty(e,"skewAxis",{get:ExpressionPropertyInterface(t.sa)}),Object.defineProperty(e,"orientation",{get:ExpressionPropertyInterface(t.or)}),e},LayerExpressionInterface=function(){function t(t){var e=new Matrix;return void 0!==t?this._elem.finalTransform.mProp.getValueAtTime(t).clone(e):this._elem.finalTransform.mProp.applyToMatrix(e),e}function e(t,e){var r=this.getMatrix(e);return r.props[12]=0,r.props[13]=0,r.props[14]=0,this.applyPoint(r,t)}function r(t,e){var r=this.getMatrix(e);return this.applyPoint(r,t)}function n(t,e){var r=this.getMatrix(e);return r.props[12]=0,r.props[13]=0,r.props[14]=0,this.invertPoint(r,t)}function i(t,e){var r=this.getMatrix(e);return this.invertPoint(r,t)}function a(t,e){if(this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t)}return t.applyToPointArray(e[0],e[1],e[2]||0)}function o(t,e){if(this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t)}return t.inversePoint(e)}function s(t){var e=new Matrix;if(e.reset(),this._elem.finalTransform.mProp.applyToMatrix(e),this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(e);return e.inversePoint(t)}return e.inversePoint(t)}function l(){return[1,1,1,1]}return function(c){var u;function h(t){switch(t){case"ADBE Root Vectors Group":case"Contents":case 2:return h.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return u;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return h.effect;case"ADBE Text Properties":return h.textInterface;default:return null}}h.getMatrix=t,h.invertPoint=o,h.applyPoint=a,h.toWorld=r,h.toWorldVec=e,h.fromWorld=i,h.fromWorldVec=n,h.toComp=r,h.fromComp=s,h.sampleImage=l,h.sourceRectAtTime=c.sourceRectAtTime.bind(c),h._elem=c;var f=getDescriptor(u=TransformExpressionInterface(c.finalTransform.mProp),"anchorPoint");return Object.defineProperties(h,{hasParent:{get:function(){return c.hierarchy.length}},parent:{get:function(){return c.hierarchy[0].layerInterface}},rotation:getDescriptor(u,"rotation"),scale:getDescriptor(u,"scale"),position:getDescriptor(u,"position"),opacity:getDescriptor(u,"opacity"),anchorPoint:f,anchor_point:f,transform:{get:function(){return u}},active:{get:function(){return c.isInRange}}}),h.startTime=c.data.st,h.index=c.data.ind,h.source=c.data.refId,h.height=0===c.data.ty?c.data.h:100,h.width=0===c.data.ty?c.data.w:100,h.inPoint=c.data.ip/c.comp.globalData.frameRate,h.outPoint=c.data.op/c.comp.globalData.frameRate,h._name=c.data.nm,h.registerMaskInterface=function(t){h.mask=new MaskManagerInterface(t,c)},h.registerEffectsInterface=function(t){h.effect=t},h}}(),propertyGroupFactory=function(t,e){return function(r){return(r=void 0===r?1:r)<=0?t:e(r-1)}},PropertyInterface=function(t,e){var r={_name:t};return function(t){return(t=void 0===t?1:t)<=0?r:e(t-1)}},EffectsExpressionInterface=function(){function t(r,n,i,a){function o(t){for(var e=r.ef,n=0,i=e.length;n<i;){if(t===e[n].nm||t===e[n].mn||t===e[n].ix)return 5===e[n].ty?c[n]:c[n]();n+=1}throw new Error}var s,l=propertyGroupFactory(o,i),c=[],u=r.ef.length;for(s=0;s<u;s+=1)5===r.ef[s].ty?c.push(t(r.ef[s],n.effectElements[s],n.effectElements[s].propertyGroup,a)):c.push(e(n.effectElements[s],r.ef[s].ty,a,l));return"ADBE Color Control"===r.mn&&Object.defineProperty(o,"color",{get:function(){return c[0]()}}),Object.defineProperties(o,{numProperties:{get:function(){return r.np}},_name:{value:r.nm},propertyGroup:{value:l}}),o.enabled=0!==r.en,o.active=o.enabled,o}function e(t,e,r,n){var i=ExpressionPropertyInterface(t.p);return t.p.setGroupProperty&&t.p.setGroupProperty(PropertyInterface("",n)),function(){return 10===e?r.comp.compInterface(t.p.v):i()}}return{createEffectsInterface:function(e,r){if(e.effectsManager){var n,i=[],a=e.data.ef,o=e.effectsManager.effectElements.length;for(n=0;n<o;n+=1)i.push(t(a[n],e.effectsManager.effectElements[n],r,e));var s=e.data.ef||[],l=function(t){for(n=0,o=s.length;n<o;){if(t===s[n].nm||t===s[n].mn||t===s[n].ix)return i[n];n+=1}return null};return Object.defineProperty(l,"numProperties",{get:function(){return s.length}}),l}return null}}}(),ShapePathInterface=function(t,e,r){var n=e.sh;function i(t){return"Shape"===t||"shape"===t||"Path"===t||"path"===t||"ADBE Vector Shape"===t||2===t?i.path:null}var a=propertyGroupFactory(i,r);return n.setGroupProperty(PropertyInterface("Path",a)),Object.defineProperties(i,{path:{get:function(){return n.k&&n.getValue(),n}},shape:{get:function(){return n.k&&n.getValue(),n}},_name:{value:t.nm},ix:{value:t.ix},propertyIndex:{value:t.ix},mn:{value:t.mn},propertyGroup:{value:r}}),i},ShapeExpressionInterface=function(){function t(t,o,f){var p,d=[],m=t?t.length:0;for(p=0;p<m;p+=1)"gr"===t[p].ty?d.push(e(t[p],o[p],f)):"fl"===t[p].ty?d.push(r(t[p],o[p],f)):"st"===t[p].ty?d.push(i(t[p],o[p],f)):"tm"===t[p].ty?d.push(a(t[p],o[p],f)):"tr"===t[p].ty||("el"===t[p].ty?d.push(s(t[p],o[p],f)):"sr"===t[p].ty?d.push(l(t[p],o[p],f)):"sh"===t[p].ty?d.push(ShapePathInterface(t[p],o[p],f)):"rc"===t[p].ty?d.push(c(t[p],o[p],f)):"rd"===t[p].ty?d.push(u(t[p],o[p],f)):"rp"===t[p].ty?d.push(h(t[p],o[p],f)):"gf"===t[p].ty?d.push(n(t[p],o[p],f)):d.push((t[p],o[p],function(){return null})));return d}function e(e,r,n){var i=function(t){switch(t){case"ADBE Vectors Group":case"Contents":case 2:return i.content;default:return i.transform}};i.propertyGroup=propertyGroupFactory(i,n);var a=function(e,r,n){var i,a=function(t){for(var e=0,r=i.length;e<r;){if(i[e]._name===t||i[e].mn===t||i[e].propertyIndex===t||i[e].ix===t||i[e].ind===t)return i[e];e+=1}return"number"==typeof t?i[t-1]:null};a.propertyGroup=propertyGroupFactory(a,n),i=t(e.it,r.it,a.propertyGroup),a.numProperties=i.length;var s=o(e.it[e.it.length-1],r.it[r.it.length-1],a.propertyGroup);return a.transform=s,a.propertyIndex=e.cix,a._name=e.nm,a}(e,r,i.propertyGroup),s=o(e.it[e.it.length-1],r.it[r.it.length-1],i.propertyGroup);return i.content=a,i.transform=s,Object.defineProperty(i,"_name",{get:function(){return e.nm}}),i.numProperties=e.np,i.propertyIndex=e.ix,i.nm=e.nm,i.mn=e.mn,i}function r(t,e,r){function n(t){return"Color"===t||"color"===t?n.color:"Opacity"===t||"opacity"===t?n.opacity:null}return Object.defineProperties(n,{color:{get:ExpressionPropertyInterface(e.c)},opacity:{get:ExpressionPropertyInterface(e.o)},_name:{value:t.nm},mn:{value:t.mn}}),e.c.setGroupProperty(PropertyInterface("Color",r)),e.o.setGroupProperty(PropertyInterface("Opacity",r)),n}function n(t,e,r){function n(t){return"Start Point"===t||"start point"===t?n.startPoint:"End Point"===t||"end point"===t?n.endPoint:"Opacity"===t||"opacity"===t?n.opacity:null}return Object.defineProperties(n,{startPoint:{get:ExpressionPropertyInterface(e.s)},endPoint:{get:ExpressionPropertyInterface(e.e)},opacity:{get:ExpressionPropertyInterface(e.o)},type:{get:function(){return"a"}},_name:{value:t.nm},mn:{value:t.mn}}),e.s.setGroupProperty(PropertyInterface("Start Point",r)),e.e.setGroupProperty(PropertyInterface("End Point",r)),e.o.setGroupProperty(PropertyInterface("Opacity",r)),n}function i(t,e,r){var n,i=propertyGroupFactory(c,r),a=propertyGroupFactory(l,i);function o(r){Object.defineProperty(l,t.d[r].nm,{get:ExpressionPropertyInterface(e.d.dataProps[r].p)})}var s=t.d?t.d.length:0,l={};for(n=0;n<s;n+=1)o(n),e.d.dataProps[n].p.setGroupProperty(a);function c(t){return"Color"===t||"color"===t?c.color:"Opacity"===t||"opacity"===t?c.opacity:"Stroke Width"===t||"stroke width"===t?c.strokeWidth:null}return Object.defineProperties(c,{color:{get:ExpressionPropertyInterface(e.c)},opacity:{get:ExpressionPropertyInterface(e.o)},strokeWidth:{get:ExpressionPropertyInterface(e.w)},dash:{get:function(){return l}},_name:{value:t.nm},mn:{value:t.mn}}),e.c.setGroupProperty(PropertyInterface("Color",i)),e.o.setGroupProperty(PropertyInterface("Opacity",i)),e.w.setGroupProperty(PropertyInterface("Stroke Width",i)),c}function a(t,e,r){function n(e){return e===t.e.ix||"End"===e||"end"===e?n.end:e===t.s.ix?n.start:e===t.o.ix?n.offset:null}var i=propertyGroupFactory(n,r);return n.propertyIndex=t.ix,e.s.setGroupProperty(PropertyInterface("Start",i)),e.e.setGroupProperty(PropertyInterface("End",i)),e.o.setGroupProperty(PropertyInterface("Offset",i)),n.propertyIndex=t.ix,n.propertyGroup=r,Object.defineProperties(n,{start:{get:ExpressionPropertyInterface(e.s)},end:{get:ExpressionPropertyInterface(e.e)},offset:{get:ExpressionPropertyInterface(e.o)},_name:{value:t.nm}}),n.mn=t.mn,n}function o(t,e,r){function n(e){return t.a.ix===e||"Anchor Point"===e?n.anchorPoint:t.o.ix===e||"Opacity"===e?n.opacity:t.p.ix===e||"Position"===e?n.position:t.r.ix===e||"Rotation"===e||"ADBE Vector Rotation"===e?n.rotation:t.s.ix===e||"Scale"===e?n.scale:t.sk&&t.sk.ix===e||"Skew"===e?n.skew:t.sa&&t.sa.ix===e||"Skew Axis"===e?n.skewAxis:null}var i=propertyGroupFactory(n,r);return e.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",i)),e.transform.mProps.p.setGroupProperty(PropertyInterface("Position",i)),e.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",i)),e.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",i)),e.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",i)),e.transform.mProps.sk&&(e.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",i)),e.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",i))),e.transform.op.setGroupProperty(PropertyInterface("Opacity",i)),Object.defineProperties(n,{opacity:{get:ExpressionPropertyInterface(e.transform.mProps.o)},position:{get:ExpressionPropertyInterface(e.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(e.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(e.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(e.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(e.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(e.transform.mProps.sa)},_name:{value:t.nm}}),n.ty="tr",n.mn=t.mn,n.propertyGroup=r,n}function s(t,e,r){function n(e){return t.p.ix===e?n.position:t.s.ix===e?n.size:null}var i=propertyGroupFactory(n,r);n.propertyIndex=t.ix;var a="tm"===e.sh.ty?e.sh.prop:e.sh;return a.s.setGroupProperty(PropertyInterface("Size",i)),a.p.setGroupProperty(PropertyInterface("Position",i)),Object.defineProperties(n,{size:{get:ExpressionPropertyInterface(a.s)},position:{get:ExpressionPropertyInterface(a.p)},_name:{value:t.nm}}),n.mn=t.mn,n}function l(t,e,r){function n(e){return t.p.ix===e?n.position:t.r.ix===e?n.rotation:t.pt.ix===e?n.points:t.or.ix===e||"ADBE Vector Star Outer Radius"===e?n.outerRadius:t.os.ix===e?n.outerRoundness:!t.ir||t.ir.ix!==e&&"ADBE Vector Star Inner Radius"!==e?t.is&&t.is.ix===e?n.innerRoundness:null:n.innerRadius}var i=propertyGroupFactory(n,r),a="tm"===e.sh.ty?e.sh.prop:e.sh;return n.propertyIndex=t.ix,a.or.setGroupProperty(PropertyInterface("Outer Radius",i)),a.os.setGroupProperty(PropertyInterface("Outer Roundness",i)),a.pt.setGroupProperty(PropertyInterface("Points",i)),a.p.setGroupProperty(PropertyInterface("Position",i)),a.r.setGroupProperty(PropertyInterface("Rotation",i)),t.ir&&(a.ir.setGroupProperty(PropertyInterface("Inner Radius",i)),a.is.setGroupProperty(PropertyInterface("Inner Roundness",i))),Object.defineProperties(n,{position:{get:ExpressionPropertyInterface(a.p)},rotation:{get:ExpressionPropertyInterface(a.r)},points:{get:ExpressionPropertyInterface(a.pt)},outerRadius:{get:ExpressionPropertyInterface(a.or)},outerRoundness:{get:ExpressionPropertyInterface(a.os)},innerRadius:{get:ExpressionPropertyInterface(a.ir)},innerRoundness:{get:ExpressionPropertyInterface(a.is)},_name:{value:t.nm}}),n.mn=t.mn,n}function c(t,e,r){function n(e){return t.p.ix===e?n.position:t.r.ix===e?n.roundness:t.s.ix===e||"Size"===e||"ADBE Vector Rect Size"===e?n.size:null}var i=propertyGroupFactory(n,r),a="tm"===e.sh.ty?e.sh.prop:e.sh;return n.propertyIndex=t.ix,a.p.setGroupProperty(PropertyInterface("Position",i)),a.s.setGroupProperty(PropertyInterface("Size",i)),a.r.setGroupProperty(PropertyInterface("Rotation",i)),Object.defineProperties(n,{position:{get:ExpressionPropertyInterface(a.p)},roundness:{get:ExpressionPropertyInterface(a.r)},size:{get:ExpressionPropertyInterface(a.s)},_name:{value:t.nm}}),n.mn=t.mn,n}function u(t,e,r){function n(e){return t.r.ix===e||"Round Corners 1"===e?n.radius:null}var i=propertyGroupFactory(n,r),a=e;return n.propertyIndex=t.ix,a.rd.setGroupProperty(PropertyInterface("Radius",i)),Object.defineProperties(n,{radius:{get:ExpressionPropertyInterface(a.rd)},_name:{value:t.nm}}),n.mn=t.mn,n}function h(t,e,r){function n(e){return t.c.ix===e||"Copies"===e?n.copies:t.o.ix===e||"Offset"===e?n.offset:null}var i=propertyGroupFactory(n,r),a=e;return n.propertyIndex=t.ix,a.c.setGroupProperty(PropertyInterface("Copies",i)),a.o.setGroupProperty(PropertyInterface("Offset",i)),Object.defineProperties(n,{copies:{get:ExpressionPropertyInterface(a.c)},offset:{get:ExpressionPropertyInterface(a.o)},_name:{value:t.nm}}),n.mn=t.mn,n}return function(e,r,n){var i;function a(t){if("number"==typeof t)return 0===(t=void 0===t?1:t)?n:i[t-1];for(var e=0,r=i.length;e<r;){if(i[e]._name===t)return i[e];e+=1}return null}return a.propertyGroup=propertyGroupFactory(a,(function(){return n})),i=t(e,r,a.propertyGroup),a.numProperties=i.length,a._name="Contents",a}}(),TextExpressionInterface=function(t){var e;function r(t){return"ADBE Text Document"===t?r.sourceText:null}return Object.defineProperty(r,"sourceText",{get:function(){t.textProperty.getValue();var r=t.textProperty.currentData.t;return e&&r===e.value||((e=new String(r)).value=r||new String(r),Object.defineProperty(e,"style",{get:function(){return{fillColor:t.textProperty.currentData.fc}}})),e}}),r};function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}var FootageInterface=(dataInterfaceFactory=function(t){function e(t){return"Outline"===t?e.outlineInterface():null}return e._name="Outline",e.outlineInterface=function(t){var e="",r=t.getFootageData();function n(t){if(r[t])return e=t,"object"===_typeof(r=r[t])?n:r;var i=t.indexOf(e);if(-1!==i){var a=parseInt(t.substr(i+e.length),10);return"object"===_typeof(r=r[a])?n:r}return""}return function(){return e="",r=t.getFootageData(),n}}(t),e},function(t){function e(t){return"Data"===t?e.dataInterface:null}return e._name="Data",e.dataInterface=dataInterfaceFactory(t),e}),dataInterfaceFactory,interfaces={layer:LayerExpressionInterface,effects:EffectsExpressionInterface,comp:CompExpressionInterface,shape:ShapeExpressionInterface,text:TextExpressionInterface,footage:FootageInterface};function getInterface(t){return interfaces[t]||null}var expressionHelpers={searchExpressions:function(t,e,r){e.x&&(r.k=!0,r.x=!0,r.initiateExpression=ExpressionManager.initiateExpression,r.effectsSequence.push(r.initiateExpression(t,e,r).bind(r)))},getSpeedAtTime:function(t){var e=this.getValueAtTime(t),r=this.getValueAtTime(t+-.01),n=0;if(e.length){var i;for(i=0;i<e.length;i+=1)n+=Math.pow(r[i]-e[i],2);n=100*Math.sqrt(n)}else n=0;return n},getVelocityAtTime:function(t){if(void 0!==this.vel)return this.vel;var e,r,n=-.001,i=this.getValueAtTime(t),a=this.getValueAtTime(t+n);if(i.length)for(e=createTypedArray("float32",i.length),r=0;r<i.length;r+=1)e[r]=(a[r]-i[r])/n;else e=(a-i)/n;return e},getValueAtTime:function(t){return t*=this.elem.globalData.frameRate,(t-=this.offsetTime)!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<t?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(t,this._cachingAtTime),this._cachingAtTime.lastFrame=t),this._cachingAtTime.value},getStaticValueAtTime:function(){return this.pv},setGroupProperty:function(t){this.propertyGroup=t}};function addPropertyDecorator(){function t(t,e,r){if(!this.k||!this.keyframes)return this.pv;t=t?t.toLowerCase():"";var n,i,a,o,s,l=this.comp.renderedFrame,c=this.keyframes,u=c[c.length-1].t;if(l<=u)return this.pv;if(r?i=u-(n=e?Math.abs(u-this.elem.comp.globalData.frameRate*e):Math.max(0,u-this.elem.data.ip)):((!e||e>c.length-1)&&(e=c.length-1),n=u-(i=c[c.length-1-e].t)),"pingpong"===t){if(Math.floor((l-i)/n)%2!=0)return this.getValueAtTime((n-(l-i)%n+i)/this.comp.globalData.frameRate,0)}else{if("offset"===t){var h=this.getValueAtTime(i/this.comp.globalData.frameRate,0),f=this.getValueAtTime(u/this.comp.globalData.frameRate,0),p=this.getValueAtTime(((l-i)%n+i)/this.comp.globalData.frameRate,0),d=Math.floor((l-i)/n);if(this.pv.length){for(o=(s=new Array(h.length)).length,a=0;a<o;a+=1)s[a]=(f[a]-h[a])*d+p[a];return s}return(f-h)*d+p}if("continue"===t){var m=this.getValueAtTime(u/this.comp.globalData.frameRate,0),y=this.getValueAtTime((u-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(o=(s=new Array(m.length)).length,a=0;a<o;a+=1)s[a]=m[a]+(m[a]-y[a])*((l-u)/this.comp.globalData.frameRate)/5e-4;return s}return m+(l-u)/.001*(m-y)}}return this.getValueAtTime(((l-i)%n+i)/this.comp.globalData.frameRate,0)}function e(t,e,r){if(!this.k)return this.pv;t=t?t.toLowerCase():"";var n,i,a,o,s,l=this.comp.renderedFrame,c=this.keyframes,u=c[0].t;if(l>=u)return this.pv;if(r?i=u+(n=e?Math.abs(this.elem.comp.globalData.frameRate*e):Math.max(0,this.elem.data.op-u)):((!e||e>c.length-1)&&(e=c.length-1),n=(i=c[e].t)-u),"pingpong"===t){if(Math.floor((u-l)/n)%2==0)return this.getValueAtTime(((u-l)%n+u)/this.comp.globalData.frameRate,0)}else{if("offset"===t){var h=this.getValueAtTime(u/this.comp.globalData.frameRate,0),f=this.getValueAtTime(i/this.comp.globalData.frameRate,0),p=this.getValueAtTime((n-(u-l)%n+u)/this.comp.globalData.frameRate,0),d=Math.floor((u-l)/n)+1;if(this.pv.length){for(o=(s=new Array(h.length)).length,a=0;a<o;a+=1)s[a]=p[a]-(f[a]-h[a])*d;return s}return p-(f-h)*d}if("continue"===t){var m=this.getValueAtTime(u/this.comp.globalData.frameRate,0),y=this.getValueAtTime((u+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(o=(s=new Array(m.length)).length,a=0;a<o;a+=1)s[a]=m[a]+(m[a]-y[a])*(u-l)/.001;return s}return m+(m-y)*(u-l)/.001}}return this.getValueAtTime((n-((u-l)%n+u))/this.comp.globalData.frameRate,0)}function r(t,e){if(!this.k)return this.pv;if(t=.5*(t||.4),(e=Math.floor(e||5))<=1)return this.pv;var r,n,i=this.comp.renderedFrame/this.comp.globalData.frameRate,a=i-t,o=e>1?(i+t-a)/(e-1):1,s=0,l=0;for(r=this.pv.length?createTypedArray("float32",this.pv.length):0;s<e;){if(n=this.getValueAtTime(a+s*o),this.pv.length)for(l=0;l<this.pv.length;l+=1)r[l]+=n[l];else r+=n;s+=1}if(this.pv.length)for(l=0;l<this.pv.length;l+=1)r[l]/=e;else r/=e;return r}function n(t){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var e=this._transformCachingAtTime.v;if(e.cloneFromProps(this.pre.props),this.appliedTransformations<1){var r=this.a.getValueAtTime(t);e.translate(-r[0]*this.a.mult,-r[1]*this.a.mult,r[2]*this.a.mult)}if(this.appliedTransformations<2){var n=this.s.getValueAtTime(t);e.scale(n[0]*this.s.mult,n[1]*this.s.mult,n[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var i=this.sk.getValueAtTime(t),a=this.sa.getValueAtTime(t);e.skewFromAxis(-i*this.sk.mult,a*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var o=this.r.getValueAtTime(t);e.rotate(-o*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var s=this.rz.getValueAtTime(t),l=this.ry.getValueAtTime(t),c=this.rx.getValueAtTime(t),u=this.or.getValueAtTime(t);e.rotateZ(-s*this.rz.mult).rotateY(l*this.ry.mult).rotateX(c*this.rx.mult).rotateZ(-u[2]*this.or.mult).rotateY(u[1]*this.or.mult).rotateX(u[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var h=this.px.getValueAtTime(t),f=this.py.getValueAtTime(t);if(this.data.p.z){var p=this.pz.getValueAtTime(t);e.translate(h*this.px.mult,f*this.py.mult,-p*this.pz.mult)}else e.translate(h*this.px.mult,f*this.py.mult,0)}else{var d=this.p.getValueAtTime(t);e.translate(d[0]*this.p.mult,d[1]*this.p.mult,-d[2]*this.p.mult)}return e}function i(){return this.v.clone(new Matrix)}var a=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(t,e,r){var o=a(t,e,r);return o.dynamicProperties.length?o.getValueAtTime=n.bind(o):o.getValueAtTime=i.bind(o),o.setGroupProperty=expressionHelpers.setGroupProperty,o};var o=PropertyFactory.getProp;PropertyFactory.getProp=function(n,i,a,s,l){var c=o(n,i,a,s,l);c.kf?c.getValueAtTime=expressionHelpers.getValueAtTime.bind(c):c.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(c),c.setGroupProperty=expressionHelpers.setGroupProperty,c.loopOut=t,c.loopIn=e,c.smooth=r,c.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(c),c.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(c),c.numKeys=1===i.a?i.k.length:0,c.propertyIndex=i.ix;var u=0;return 0!==a&&(u=createTypedArray("float32",1===i.a?i.k[0].s.length:i.k.length)),c._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:u},expressionHelpers.searchExpressions(n,i,c),c.k&&l.addDynamicProperty(c),c};var s=ShapePropertyFactory.getConstructorFunction(),l=ShapePropertyFactory.getKeyframedConstructorFunction();function c(){}c.prototype={vertices:function(t,e){this.k&&this.getValue();var r,n=this.v;void 0!==e&&(n=this.getValueAtTime(e,0));var i=n._length,a=n[t],o=n.v,s=createSizedArray(i);for(r=0;r<i;r+=1)s[r]="i"===t||"o"===t?[a[r][0]-o[r][0],a[r][1]-o[r][1]]:[a[r][0],a[r][1]];return s},points:function(t){return this.vertices("v",t)},inTangents:function(t){return this.vertices("i",t)},outTangents:function(t){return this.vertices("o",t)},isClosed:function(){return this.v.c},pointOnPath:function(t,e){var r=this.v;void 0!==e&&(r=this.getValueAtTime(e,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(r));for(var n,i=this._segmentsLength,a=i.lengths,o=i.totalLength*t,s=0,l=a.length,c=0;s<l;){if(c+a[s].addedLength>o){var u=s,h=r.c&&s===l-1?0:s+1,f=(o-c)/a[s].addedLength;n=bez.getPointInSegment(r.v[u],r.v[h],r.o[u],r.i[h],f,a[s]);break}c+=a[s].addedLength,s+=1}return n||(n=r.c?[r.v[0][0],r.v[0][1]]:[r.v[r._length-1][0],r.v[r._length-1][1]]),n},vectorOnPath:function(t,e,r){1==t?t=this.v.c:0==t&&(t=.999);var n=this.pointOnPath(t,e),i=this.pointOnPath(t+.001,e),a=i[0]-n[0],o=i[1]-n[1],s=Math.sqrt(Math.pow(a,2)+Math.pow(o,2));return 0===s?[0,0]:"tangent"===r?[a/s,o/s]:[-o/s,a/s]},tangentOnPath:function(t,e){return this.vectorOnPath(t,e,"tangent")},normalOnPath:function(t,e){return this.vectorOnPath(t,e,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([c],s),extendPrototype([c],l),l.prototype.getValueAtTime=function(t){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),t*=this.elem.globalData.frameRate,(t-=this.offsetTime)!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<t?this._caching.lastIndex:0,this._cachingAtTime.lastTime=t,this.interpolateShape(t,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue},l.prototype.initiateExpression=ExpressionManager.initiateExpression;var u=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(t,e,r,n,i){var a=u(t,e,r,n,i);return a.propertyIndex=e.ix,a.lock=!1,3===r?expressionHelpers.searchExpressions(t,e.pt,a):4===r&&expressionHelpers.searchExpressions(t,e.ks,a),a.k&&t.addDynamicProperty(a),a}}function initialize$1(){addPropertyDecorator()}function addDecorator(){TextProperty.prototype.getExpressionValue=function(t,e){var r=this.calculateExpression(e);if(t.t!==r){var n={};return this.copyData(n,t),n.t=r.toString(),n.__complete=!1,n}return t},TextProperty.prototype.searchProperty=function(){var t=this.searchKeyframes(),e=this.searchExpressions();return this.kf=t||e,this.kf},TextProperty.prototype.searchExpressions=function(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null}}function initialize(){addDecorator()}function SVGComposableEffect(){}SVGComposableEffect.prototype={createMergeNode:function(t,e){var r,n,i=createNS("feMerge");for(i.setAttribute("result",t),n=0;n<e.length;n+=1)(r=createNS("feMergeNode")).setAttribute("in",e[n]),i.appendChild(r),i.appendChild(r);return i}};var linearFilterValue="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";function SVGTintFilter(t,e,r,n,i){this.filterManager=e;var a=createNS("feColorMatrix");a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","linearRGB"),a.setAttribute("values",linearFilterValue+" 1 0"),this.linearFilter=a,a.setAttribute("result",n+"_tint_1"),t.appendChild(a),(a=createNS("feColorMatrix")).setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),a.setAttribute("result",n+"_tint_2"),t.appendChild(a),this.matrixFilter=a;var o=this.createMergeNode(n,[i,n+"_tint_1",n+"_tint_2"]);t.appendChild(o)}function SVGFillFilter(t,e,r,n){this.filterManager=e;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),i.setAttribute("result",n),t.appendChild(i),this.matrixFilter=i}function SVGStrokeEffect(t,e,r){this.initialized=!1,this.filterManager=e,this.elem=r,this.paths=[]}function SVGTritoneFilter(t,e,r,n){this.filterManager=e;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","linearRGB"),i.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),t.appendChild(i);var a=createNS("feComponentTransfer");a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",n),this.matrixFilter=a;var o=createNS("feFuncR");o.setAttribute("type","table"),a.appendChild(o),this.feFuncR=o;var s=createNS("feFuncG");s.setAttribute("type","table"),a.appendChild(s),this.feFuncG=s;var l=createNS("feFuncB");l.setAttribute("type","table"),a.appendChild(l),this.feFuncB=l,t.appendChild(a)}function SVGProLevelsFilter(t,e,r,n){this.filterManager=e;var i=this.filterManager.effectElements,a=createNS("feComponentTransfer");(i[10].p.k||0!==i[10].p.v||i[11].p.k||1!==i[11].p.v||i[12].p.k||1!==i[12].p.v||i[13].p.k||0!==i[13].p.v||i[14].p.k||1!==i[14].p.v)&&(this.feFuncR=this.createFeFunc("feFuncR",a)),(i[17].p.k||0!==i[17].p.v||i[18].p.k||1!==i[18].p.v||i[19].p.k||1!==i[19].p.v||i[20].p.k||0!==i[20].p.v||i[21].p.k||1!==i[21].p.v)&&(this.feFuncG=this.createFeFunc("feFuncG",a)),(i[24].p.k||0!==i[24].p.v||i[25].p.k||1!==i[25].p.v||i[26].p.k||1!==i[26].p.v||i[27].p.k||0!==i[27].p.v||i[28].p.k||1!==i[28].p.v)&&(this.feFuncB=this.createFeFunc("feFuncB",a)),(i[31].p.k||0!==i[31].p.v||i[32].p.k||1!==i[32].p.v||i[33].p.k||1!==i[33].p.v||i[34].p.k||0!==i[34].p.v||i[35].p.k||1!==i[35].p.v)&&(this.feFuncA=this.createFeFunc("feFuncA",a)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(a.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(a)),(i[3].p.k||0!==i[3].p.v||i[4].p.k||1!==i[4].p.v||i[5].p.k||1!==i[5].p.v||i[6].p.k||0!==i[6].p.v||i[7].p.k||1!==i[7].p.v)&&((a=createNS("feComponentTransfer")).setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",n),t.appendChild(a),this.feFuncRComposed=this.createFeFunc("feFuncR",a),this.feFuncGComposed=this.createFeFunc("feFuncG",a),this.feFuncBComposed=this.createFeFunc("feFuncB",a))}function SVGDropShadowEffect(t,e,r,n,i){var a=e.container.globalData.renderConfig.filterSize,o=e.data.fs||a;t.setAttribute("x",o.x||a.x),t.setAttribute("y",o.y||a.y),t.setAttribute("width",o.width||a.width),t.setAttribute("height",o.height||a.height),this.filterManager=e;var s=createNS("feGaussianBlur");s.setAttribute("in","SourceAlpha"),s.setAttribute("result",n+"_drop_shadow_1"),s.setAttribute("stdDeviation","0"),this.feGaussianBlur=s,t.appendChild(s);var l=createNS("feOffset");l.setAttribute("dx","25"),l.setAttribute("dy","0"),l.setAttribute("in",n+"_drop_shadow_1"),l.setAttribute("result",n+"_drop_shadow_2"),this.feOffset=l,t.appendChild(l);var c=createNS("feFlood");c.setAttribute("flood-color","#00ff00"),c.setAttribute("flood-opacity","1"),c.setAttribute("result",n+"_drop_shadow_3"),this.feFlood=c,t.appendChild(c);var u=createNS("feComposite");u.setAttribute("in",n+"_drop_shadow_3"),u.setAttribute("in2",n+"_drop_shadow_2"),u.setAttribute("operator","in"),u.setAttribute("result",n+"_drop_shadow_4"),t.appendChild(u);var h=this.createMergeNode(n,[n+"_drop_shadow_4",i]);t.appendChild(h)}extendPrototype([SVGComposableEffect],SVGTintFilter),SVGTintFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=this.filterManager.effectElements[2].p.v/100;this.linearFilter.setAttribute("values",linearFilterValue+" "+n+" 0"),this.matrixFilter.setAttribute("values",r[0]-e[0]+" 0 0 0 "+e[0]+" "+(r[1]-e[1])+" 0 0 0 "+e[1]+" "+(r[2]-e[2])+" 0 0 0 "+e[2]+" 0 0 0 1 0")}},SVGFillFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[2].p.v,r=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+e[0]+" 0 0 0 0 "+e[1]+" 0 0 0 0 "+e[2]+" 0 0 0 "+r+" 0")}},SVGStrokeEffect.prototype.initialize=function(){var t,e,r,n,i=this.elem.layerElement.children||this.elem.layerElement.childNodes;for(1===this.filterManager.effectElements[1].p.v?(n=this.elem.maskManager.masksProperties.length,r=0):n=1+(r=this.filterManager.effectElements[0].p.v-1),(e=createNS("g")).setAttribute("fill","none"),e.setAttribute("stroke-linecap","round"),e.setAttribute("stroke-dashoffset",1);r<n;r+=1)t=createNS("path"),e.appendChild(t),this.paths.push({p:t,m:r});if(3===this.filterManager.effectElements[10].p.v){var a=createNS("mask"),o=createElementID();a.setAttribute("id",o),a.setAttribute("mask-type","alpha"),a.appendChild(e),this.elem.globalData.defs.appendChild(a);var s=createNS("g");for(s.setAttribute("mask","url("+getLocationHref()+"#"+o+")");i[0];)s.appendChild(i[0]);this.elem.layerElement.appendChild(s),this.masker=a,e.setAttribute("stroke","#fff")}else if(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v){if(2===this.filterManager.effectElements[10].p.v)for(i=this.elem.layerElement.children||this.elem.layerElement.childNodes;i.length;)this.elem.layerElement.removeChild(i[0]);this.elem.layerElement.appendChild(e),this.elem.layerElement.removeAttribute("mask"),e.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=e},SVGStrokeEffect.prototype.renderFrame=function(t){var e;this.initialized||this.initialize();var r,n,i=this.paths.length;for(e=0;e<i;e+=1)if(-1!==this.paths[e].m&&(r=this.elem.maskManager.viewData[this.paths[e].m],n=this.paths[e].p,(t||this.filterManager._mdf||r.prop._mdf)&&n.setAttribute("d",r.lastPath),t||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||r.prop._mdf)){var a;if(0!==this.filterManager.effectElements[7].p.v||100!==this.filterManager.effectElements[8].p.v){var o=.01*Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),s=.01*Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),l=n.getTotalLength();a="0 0 0 "+l*o+" ";var c,u=l*(s-o),h=1+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01,f=Math.floor(u/h);for(c=0;c<f;c+=1)a+="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01+" ";a+="0 "+10*l+" 0 0"}else a="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01;n.setAttribute("stroke-dasharray",a)}if((t||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",2*this.filterManager.effectElements[4].p.v),(t||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v)&&(t||this.filterManager.effectElements[3].p._mdf)){var p=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(255*p[0])+","+bmFloor(255*p[1])+","+bmFloor(255*p[2])+")")}},SVGTritoneFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=this.filterManager.effectElements[2].p.v,i=n[0]+" "+r[0]+" "+e[0],a=n[1]+" "+r[1]+" "+e[1],o=n[2]+" "+r[2]+" "+e[2];this.feFuncR.setAttribute("tableValues",i),this.feFuncG.setAttribute("tableValues",a),this.feFuncB.setAttribute("tableValues",o)}},SVGProLevelsFilter.prototype.createFeFunc=function(t,e){var r=createNS(t);return r.setAttribute("type","table"),e.appendChild(r),r},SVGProLevelsFilter.prototype.getTableValue=function(t,e,r,n,i){for(var a,o,s=0,l=Math.min(t,e),c=Math.max(t,e),u=Array.call(null,{length:256}),h=0,f=i-n,p=e-t;s<=256;)o=(a=s/256)<=l?p<0?i:n:a>=c?p<0?n:i:n+f*Math.pow((a-t)/p,1/r),u[h]=o,h+=1,s+=256/255;return u.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e,r=this.filterManager.effectElements;this.feFuncRComposed&&(t||r[3].p._mdf||r[4].p._mdf||r[5].p._mdf||r[6].p._mdf||r[7].p._mdf)&&(e=this.getTableValue(r[3].p.v,r[4].p.v,r[5].p.v,r[6].p.v,r[7].p.v),this.feFuncRComposed.setAttribute("tableValues",e),this.feFuncGComposed.setAttribute("tableValues",e),this.feFuncBComposed.setAttribute("tableValues",e)),this.feFuncR&&(t||r[10].p._mdf||r[11].p._mdf||r[12].p._mdf||r[13].p._mdf||r[14].p._mdf)&&(e=this.getTableValue(r[10].p.v,r[11].p.v,r[12].p.v,r[13].p.v,r[14].p.v),this.feFuncR.setAttribute("tableValues",e)),this.feFuncG&&(t||r[17].p._mdf||r[18].p._mdf||r[19].p._mdf||r[20].p._mdf||r[21].p._mdf)&&(e=this.getTableValue(r[17].p.v,r[18].p.v,r[19].p.v,r[20].p.v,r[21].p.v),this.feFuncG.setAttribute("tableValues",e)),this.feFuncB&&(t||r[24].p._mdf||r[25].p._mdf||r[26].p._mdf||r[27].p._mdf||r[28].p._mdf)&&(e=this.getTableValue(r[24].p.v,r[25].p.v,r[26].p.v,r[27].p.v,r[28].p.v),this.feFuncB.setAttribute("tableValues",e)),this.feFuncA&&(t||r[31].p._mdf||r[32].p._mdf||r[33].p._mdf||r[34].p._mdf||r[35].p._mdf)&&(e=this.getTableValue(r[31].p.v,r[32].p.v,r[33].p.v,r[34].p.v,r[35].p.v),this.feFuncA.setAttribute("tableValues",e))}},extendPrototype([SVGComposableEffect],SVGDropShadowEffect),SVGDropShadowEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){if((t||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),t||this.filterManager.effectElements[0].p._mdf){var e=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(255*e[0]),Math.round(255*e[1]),Math.round(255*e[2])))}if((t||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),t||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var r=this.filterManager.effectElements[3].p.v,n=(this.filterManager.effectElements[2].p.v-90)*degToRads,i=r*Math.cos(n),a=r*Math.sin(n);this.feOffset.setAttribute("dx",i),this.feOffset.setAttribute("dy",a)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(t,e,r){this.initialized=!1,this.filterManager=e,this.filterElem=t,this.elem=r,r.matteElement=createNS("g"),r.matteElement.appendChild(r.layerElement),r.matteElement.appendChild(r.transformedElement),r.baseElement=r.matteElement}function SVGGaussianBlurEffect(t,e,r,n){t.setAttribute("x","-100%"),t.setAttribute("y","-100%"),t.setAttribute("width","300%"),t.setAttribute("height","300%"),this.filterManager=e;var i=createNS("feGaussianBlur");i.setAttribute("result",n),t.appendChild(i),this.feGaussianBlur=i}function TransformEffect(){}function SVGTransformEffect(t,e){this.init(e)}function CVTransformEffect(t){this.init(t)}return SVGMatte3Effect.prototype.findSymbol=function(t){for(var e=0,r=_svgMatteSymbols.length;e<r;){if(_svgMatteSymbols[e]===t)return _svgMatteSymbols[e];e+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(t,e){var r=t.layerElement.parentNode;if(r){for(var n,i=r.children,a=0,o=i.length;a<o&&i[a]!==t.layerElement;)a+=1;a<=o-2&&(n=i[a+1]);var s=createNS("use");s.setAttribute("href","#"+e),n?r.insertBefore(s,n):r.appendChild(s)}},SVGMatte3Effect.prototype.setElementAsMask=function(t,e){if(!this.findSymbol(e)){var r=createElementID(),n=createNS("mask");n.setAttribute("id",e.layerId),n.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(e);var i=t.globalData.defs;i.appendChild(n);var a=createNS("symbol");a.setAttribute("id",r),this.replaceInParent(e,r),a.appendChild(e.layerElement),i.appendChild(a);var o=createNS("use");o.setAttribute("href","#"+r),n.appendChild(o),e.data.hd=!1,e.show()}t.setMatte(e.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var t=this.filterManager.effectElements[0].p.v,e=this.elem.comp.elements,r=0,n=e.length;r<n;)e[r]&&e[r].data.ind===t&&this.setElementAsMask(this.elem,e[r]),r+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()},SVGGaussianBlurEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=.3*this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=3==r?0:e,i=2==r?0:e;this.feGaussianBlur.setAttribute("stdDeviation",n+" "+i);var a=1==this.filterManager.effectElements[2].p.v?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",a)}},TransformEffect.prototype.init=function(t){this.effectsManager=t,this.type=effectTypes.TRANSFORM_EFFECT,this.matrix=new Matrix,this.opacity=-1,this._mdf=!1,this._opMdf=!1},TransformEffect.prototype.renderFrame=function(t){if(this._opMdf=!1,this._mdf=!1,t||this.effectsManager._mdf){var e=this.effectsManager.effectElements,r=e[0].p.v,n=e[1].p.v,i=1===e[2].p.v,a=e[3].p.v,o=i?a:e[4].p.v,s=e[5].p.v,l=e[6].p.v,c=e[7].p.v;this.matrix.reset(),this.matrix.translate(-r[0],-r[1],r[2]),this.matrix.scale(.01*o,.01*a,1),this.matrix.rotate(-c*degToRads),this.matrix.skewFromAxis(-s*degToRads,(l+90)*degToRads),this.matrix.translate(n[0],n[1],0),this._mdf=!0,this.opacity!==e[8].p.v&&(this.opacity=e[8].p.v,this._opMdf=!0)}},extendPrototype([TransformEffect],SVGTransformEffect),extendPrototype([TransformEffect],CVTransformEffect),registerRenderer("canvas",CanvasRenderer),registerRenderer("html",HybridRenderer),registerRenderer("svg",SVGRenderer),ShapeModifiers.registerModifier("tm",TrimModifier),ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeModifiers.registerModifier("rd",RoundCornersModifier),ShapeModifiers.registerModifier("zz",ZigZagModifier),ShapeModifiers.registerModifier("op",OffsetPathModifier),setExpressionsPlugin(Expressions),setExpressionInterfaces(getInterface),initialize$1(),initialize(),registerEffect$1(20,SVGTintFilter,!0),registerEffect$1(21,SVGFillFilter,!0),registerEffect$1(22,SVGStrokeEffect,!1),registerEffect$1(23,SVGTritoneFilter,!0),registerEffect$1(24,SVGProLevelsFilter,!0),registerEffect$1(25,SVGDropShadowEffect,!0),registerEffect$1(28,SVGMatte3Effect,!1),registerEffect$1(29,SVGGaussianBlurEffect,!0),registerEffect$1(35,SVGTransformEffect,!1),registerEffect(35,CVTransformEffect),lottie},module.exports=factory())},2694:(t,e,r)=>{var n=r(6925);function i(){}function a(){}a.resetWarningCache=i,t.exports=function(){function t(t,e,r,i,a,o){if(o!==n){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function e(){return t}t.isRequired=t;var r={array:t,bigint:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:a,resetWarningCache:i};return r.PropTypes=r,r}},5556:(t,e,r)=>{t.exports=r(2694)()},6925:t=>{t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},3049:(t,e,r)=>{var n=f(r(5505)),i=f(r(6007)),a=f(r(9506)),o=f(r(7588)),s=f(r(539)),l=f(r(7714)),c=f(r(1609)),u=f(r(5556)),h=f(r(9891));function f(t){return t&&t.__esModule?t:{default:t}}var p=function(t){function e(){var t,r,n,o;(0,a.default)(this,e);for(var l=arguments.length,c=Array(l),u=0;u<l;u++)c[u]=arguments[u];return r=n=(0,s.default)(this,(t=e.__proto__||(0,i.default)(e)).call.apply(t,[this].concat(c))),n.handleClickToPause=function(){n.anim.isPaused?n.anim.play():n.anim.pause()},o=r,(0,s.default)(n,o)}return(0,l.default)(e,t),(0,o.default)(e,[{key:"componentDidMount",value:function(){var t=this.props,e=t.options,r=t.eventListeners,i=e.loop,a=e.autoplay,o=e.animationData,s=e.rendererSettings,l=e.segments;this.options={container:this.el,renderer:"svg",loop:!1!==i,autoplay:!1!==a,segments:!1!==l,animationData:o,rendererSettings:s},this.options=(0,n.default)({},this.options,e),this.anim=h.default.loadAnimation(this.options),this.registerEvents(r)}},{key:"componentWillUpdate",value:function(t){this.options.animationData!==t.options.animationData&&(this.deRegisterEvents(this.props.eventListeners),this.destroy(),this.options=(0,n.default)({},this.options,t.options),this.anim=h.default.loadAnimation(this.options),this.registerEvents(t.eventListeners))}},{key:"componentDidUpdate",value:function(){this.props.isStopped?this.stop():this.props.segments?this.playSegments():this.play(),this.pause(),this.setSpeed(),this.setDirection()}},{key:"componentWillUnmount",value:function(){this.deRegisterEvents(this.props.eventListeners),this.destroy(),this.options.animationData=null,this.anim=null}},{key:"setSpeed",value:function(){this.anim.setSpeed(this.props.speed)}},{key:"setDirection",value:function(){this.anim.setDirection(this.props.direction)}},{key:"play",value:function(){this.anim.play()}},{key:"playSegments",value:function(){this.anim.playSegments(this.props.segments)}},{key:"stop",value:function(){this.anim.stop()}},{key:"pause",value:function(){(this.props.isPaused&&!this.anim.isPaused||!this.props.isPaused&&this.anim.isPaused)&&this.anim.pause()}},{key:"destroy",value:function(){this.anim.destroy()}},{key:"registerEvents",value:function(t){var e=this;t.forEach((function(t){e.anim.addEventListener(t.eventName,t.callback)}))}},{key:"deRegisterEvents",value:function(t){var e=this;t.forEach((function(t){e.anim.removeEventListener(t.eventName,t.callback)}))}},{key:"render",value:function(){var t=this,e=this.props,r=e.width,i=e.height,a=e.ariaRole,o=e.ariaLabel,s=e.isClickToPauseDisabled,l=e.title,u=function(t){return"number"==typeof t?t+"px":t||"100%"},h=(0,n.default)({width:u(r),height:u(i),overflow:"hidden",margin:"0 auto",outline:"none"},this.props.style),f=s?function(){return null}:this.handleClickToPause;return c.default.createElement("div",{ref:function(e){t.el=e},style:h,onClick:f,title:l,role:a,"aria-label":o,tabIndex:"0"})}}]),e}(c.default.Component);e.A=p,p.propTypes={eventListeners:u.default.arrayOf(u.default.object),options:u.default.object.isRequired,height:u.default.oneOfType([u.default.string,u.default.number]),width:u.default.oneOfType([u.default.string,u.default.number]),isStopped:u.default.bool,isPaused:u.default.bool,speed:u.default.number,segments:u.default.arrayOf(u.default.number),direction:u.default.number,ariaRole:u.default.string,ariaLabel:u.default.string,isClickToPauseDisabled:u.default.bool,title:u.default.string,style:u.default.string},p.defaultProps={eventListeners:[],isStopped:!1,isPaused:!1,speed:1,ariaRole:"button",ariaLabel:"animation",isClickToPauseDisabled:!1,title:""}},1609:t=>{t.exports=window.React}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var r=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t].call(r.exports,r,r.exports,__webpack_require__),r.exports}__webpack_require__.amdO={},__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var r in e)__webpack_require__.o(e,r)&&!__webpack_require__.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var __webpack_exports__={};(()=>{__webpack_require__.d(__webpack_exports__,{A:()=>bl});const t=window.ReactDOM;var e=__webpack_require__.n(t),r=__webpack_require__(1609),n=__webpack_require__.n(r);const i=window.Blueprint.Core,a=window.Blueprint.Select;function o(){return o=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},o.apply(this,arguments)}function s(t){var e=Object.create(null);return function(r){return void 0===e[r]&&(e[r]=t(r)),e[r]}}var l=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,c=s((function(t){return l.test(t)||111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)<91})),u=function(){function t(t){var e=this;this._insertTag=function(t){var r;r=0===e.tags.length?e.insertionPoint?e.insertionPoint.nextSibling:e.prepend?e.container.firstChild:e.before:e.tags[e.tags.length-1].nextSibling,e.container.insertBefore(t,r),e.tags.push(t)},this.isSpeedy=void 0===t.speedy||t.speedy,this.tags=[],this.ctr=0,this.nonce=t.nonce,this.key=t.key,this.container=t.container,this.prepend=t.prepend,this.insertionPoint=t.insertionPoint,this.before=null}var e=t.prototype;return e.hydrate=function(t){t.forEach(this._insertTag)},e.insert=function(t){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(t){var e=document.createElement("style");return e.setAttribute("data-emotion",t.key),void 0!==t.nonce&&e.setAttribute("nonce",t.nonce),e.appendChild(document.createTextNode("")),e.setAttribute("data-s",""),e}(this));var e=this.tags[this.tags.length-1];if(this.isSpeedy){var r=function(t){if(t.sheet)return t.sheet;for(var e=0;e<document.styleSheets.length;e++)if(document.styleSheets[e].ownerNode===t)return document.styleSheets[e]}(e);try{r.insertRule(t,r.cssRules.length)}catch(t){}}else e.appendChild(document.createTextNode(t));this.ctr++},e.flush=function(){this.tags.forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),this.tags=[],this.ctr=0},t}(),h=Math.abs,f=String.fromCharCode,p=Object.assign;function d(t){return t.trim()}function m(t,e,r){return t.replace(e,r)}function y(t,e){return t.indexOf(e)}function v(t,e){return 0|t.charCodeAt(e)}function g(t,e,r){return t.slice(e,r)}function b(t){return t.length}function x(t){return t.length}function w(t,e){return e.push(t),t}var E=1,k=1,S=0,P=0,_=0,C="";function A(t,e,r,n,i,a,o){return{value:t,root:e,parent:r,type:n,props:i,children:a,line:E,column:k,length:o,return:""}}function T(t,e){return p(A("",null,null,"",null,null,0),t,{length:-t.length},e)}function M(){return _=P>0?v(C,--P):0,k--,10===_&&(k=1,E--),_}function D(){return _=P<S?v(C,P++):0,k++,10===_&&(k=1,E++),_}function L(){return v(C,P)}function O(){return P}function F(t,e){return g(C,t,e)}function I(t){switch(t){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function j(t){return E=k=1,S=b(C=t),P=0,[]}function N(t){return C="",t}function R(t){return d(F(P-1,V(91===t?t+2:40===t?t+1:t)))}function B(t){for(;(_=L())&&_<33;)D();return I(t)>2||I(_)>3?"":" "}function G(t,e){for(;--e&&D()&&!(_<48||_>102||_>57&&_<65||_>70&&_<97););return F(t,O()+(e<6&&32==L()&&32==D()))}function V(t){for(;D();)switch(_){case t:return P;case 34:case 39:34!==t&&39!==t&&V(_);break;case 40:41===t&&V(t);break;case 92:D()}return P}function z(t,e){for(;D()&&t+_!==57&&(t+_!==84||47!==L()););return"/*"+F(e,P-1)+"*"+f(47===t?t:D())}function H(t){for(;!I(L());)D();return F(t,P)}var $="-ms-",U="-moz-",q="-webkit-",W="comm",Y="rule",X="decl",J="@keyframes";function K(t,e){for(var r="",n=x(t),i=0;i<n;i++)r+=e(t[i],i,t,e)||"";return r}function Z(t,e,r,n){switch(t.type){case"@layer":if(t.children.length)break;case"@import":case X:return t.return=t.return||t.value;case W:return"";case J:return t.return=t.value+"{"+K(t.children,n)+"}";case Y:t.value=t.props.join(",")}return b(r=K(t.children,n))?t.return=t.value+"{"+r+"}":""}function Q(t){return N(tt("",null,null,null,[""],t=j(t),0,[0],t))}function tt(t,e,r,n,i,a,o,s,l){for(var c=0,u=0,h=o,p=0,d=0,g=0,x=1,E=1,k=1,S=0,P="",_=i,C=a,A=n,T=P;E;)switch(g=S,S=D()){case 40:if(108!=g&&58==v(T,h-1)){-1!=y(T+=m(R(S),"&","&\f"),"&\f")&&(k=-1);break}case 34:case 39:case 91:T+=R(S);break;case 9:case 10:case 13:case 32:T+=B(g);break;case 92:T+=G(O()-1,7);continue;case 47:switch(L()){case 42:case 47:w(rt(z(D(),O()),e,r),l);break;default:T+="/"}break;case 123*x:s[c++]=b(T)*k;case 125*x:case 59:case 0:switch(S){case 0:case 125:E=0;case 59+u:-1==k&&(T=m(T,/\f/g,"")),d>0&&b(T)-h&&w(d>32?nt(T+";",n,r,h-1):nt(m(T," ","")+";",n,r,h-2),l);break;case 59:T+=";";default:if(w(A=et(T,e,r,c,u,i,s,P,_=[],C=[],h),a),123===S)if(0===u)tt(T,e,A,A,_,a,h,s,C);else switch(99===p&&110===v(T,3)?100:p){case 100:case 108:case 109:case 115:tt(t,A,A,n&&w(et(t,A,A,0,0,i,s,P,i,_=[],h),C),i,C,h,s,n?_:C);break;default:tt(T,A,A,A,[""],C,0,s,C)}}c=u=d=0,x=k=1,P=T="",h=o;break;case 58:h=1+b(T),d=g;default:if(x<1)if(123==S)--x;else if(125==S&&0==x++&&125==M())continue;switch(T+=f(S),S*x){case 38:k=u>0?1:(T+="\f",-1);break;case 44:s[c++]=(b(T)-1)*k,k=1;break;case 64:45===L()&&(T+=R(D())),p=L(),u=h=b(P=T+=H(O())),S++;break;case 45:45===g&&2==b(T)&&(x=0)}}return a}function et(t,e,r,n,i,a,o,s,l,c,u){for(var f=i-1,p=0===i?a:[""],y=x(p),v=0,b=0,w=0;v<n;++v)for(var E=0,k=g(t,f+1,f=h(b=o[v])),S=t;E<y;++E)(S=d(b>0?p[E]+" "+k:m(k,/&\f/g,p[E])))&&(l[w++]=S);return A(t,e,r,0===i?Y:s,l,c,u)}function rt(t,e,r){return A(t,e,r,W,f(_),g(t,2,-2),0)}function nt(t,e,r,n){return A(t,e,r,X,g(t,0,n),g(t,n+1,-1),n)}var it=function(t,e,r){for(var n=0,i=0;n=i,i=L(),38===n&&12===i&&(e[r]=1),!I(i);)D();return F(t,P)},at=new WeakMap,ot=function(t){if("rule"===t.type&&t.parent&&!(t.length<1)){for(var e=t.value,r=t.parent,n=t.column===r.column&&t.line===r.line;"rule"!==r.type;)if(!(r=r.parent))return;if((1!==t.props.length||58===e.charCodeAt(0)||at.get(r))&&!n){at.set(t,!0);for(var i=[],a=function(t,e){return N(function(t,e){var r=-1,n=44;do{switch(I(n)){case 0:38===n&&12===L()&&(e[r]=1),t[r]+=it(P-1,e,r);break;case 2:t[r]+=R(n);break;case 4:if(44===n){t[++r]=58===L()?"&\f":"",e[r]=t[r].length;break}default:t[r]+=f(n)}}while(n=D());return t}(j(t),e))}(e,i),o=r.props,s=0,l=0;s<a.length;s++)for(var c=0;c<o.length;c++,l++)t.props[l]=i[s]?a[s].replace(/&\f/g,o[c]):o[c]+" "+a[s]}}},st=function(t){if("decl"===t.type){var e=t.value;108===e.charCodeAt(0)&&98===e.charCodeAt(2)&&(t.return="",t.value="")}};function lt(t,e){switch(function(t,e){return 45^v(t,0)?(((e<<2^v(t,0))<<2^v(t,1))<<2^v(t,2))<<2^v(t,3):0}(t,e)){case 5103:return q+"print-"+t+t;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return q+t+t;case 5349:case 4246:case 4810:case 6968:case 2756:return q+t+U+t+$+t+t;case 6828:case 4268:return q+t+$+t+t;case 6165:return q+t+$+"flex-"+t+t;case 5187:return q+t+m(t,/(\w+).+(:[^]+)/,q+"box-$1$2"+$+"flex-$1$2")+t;case 5443:return q+t+$+"flex-item-"+m(t,/flex-|-self/,"")+t;case 4675:return q+t+$+"flex-line-pack"+m(t,/align-content|flex-|-self/,"")+t;case 5548:return q+t+$+m(t,"shrink","negative")+t;case 5292:return q+t+$+m(t,"basis","preferred-size")+t;case 6060:return q+"box-"+m(t,"-grow","")+q+t+$+m(t,"grow","positive")+t;case 4554:return q+m(t,/([^-])(transform)/g,"$1"+q+"$2")+t;case 6187:return m(m(m(t,/(zoom-|grab)/,q+"$1"),/(image-set)/,q+"$1"),t,"")+t;case 5495:case 3959:return m(t,/(image-set\([^]*)/,q+"$1$`$1");case 4968:return m(m(t,/(.+:)(flex-)?(.*)/,q+"box-pack:$3"+$+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+q+t+t;case 4095:case 3583:case 4068:case 2532:return m(t,/(.+)-inline(.+)/,q+"$1$2")+t;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(b(t)-1-e>6)switch(v(t,e+1)){case 109:if(45!==v(t,e+4))break;case 102:return m(t,/(.+:)(.+)-([^]+)/,"$1"+q+"$2-$3$1"+U+(108==v(t,e+3)?"$3":"$2-$3"))+t;case 115:return~y(t,"stretch")?lt(m(t,"stretch","fill-available"),e)+t:t}break;case 4949:if(115!==v(t,e+1))break;case 6444:switch(v(t,b(t)-3-(~y(t,"!important")&&10))){case 107:return m(t,":",":"+q)+t;case 101:return m(t,/(.+:)([^;!]+)(;|!.+)?/,"$1"+q+(45===v(t,14)?"inline-":"")+"box$3$1"+q+"$2$3$1"+$+"$2box$3")+t}break;case 5936:switch(v(t,e+11)){case 114:return q+t+$+m(t,/[svh]\w+-[tblr]{2}/,"tb")+t;case 108:return q+t+$+m(t,/[svh]\w+-[tblr]{2}/,"tb-rl")+t;case 45:return q+t+$+m(t,/[svh]\w+-[tblr]{2}/,"lr")+t}return q+t+$+t+t}return t}var ct=[function(t,e,r,n){if(t.length>-1&&!t.return)switch(t.type){case X:t.return=lt(t.value,t.length);break;case J:return K([T(t,{value:m(t.value,"@","@"+q)})],n);case Y:if(t.length)return function(t,e){return t.map(e).join("")}(t.props,(function(e){switch(function(t,e){return(t=/(::plac\w+|:read-\w+)/.exec(t))?t[0]:t}(e)){case":read-only":case":read-write":return K([T(t,{props:[m(e,/:(read-\w+)/,":-moz-$1")]})],n);case"::placeholder":return K([T(t,{props:[m(e,/:(plac\w+)/,":"+q+"input-$1")]}),T(t,{props:[m(e,/:(plac\w+)/,":-moz-$1")]}),T(t,{props:[m(e,/:(plac\w+)/,$+"input-$1")]})],n)}return""}))}}],ut=function(t){var e=t.key;if("css"===e){var r=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(r,(function(t){-1!==t.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(t),t.setAttribute("data-s",""))}))}var n,i,a=t.stylisPlugins||ct,o={},s=[];n=t.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+e+' "]'),(function(t){for(var e=t.getAttribute("data-emotion").split(" "),r=1;r<e.length;r++)o[e[r]]=!0;s.push(t)}));var l,c,h,f,p=[Z,(f=function(t){l.insert(t)},function(t){t.root||(t=t.return)&&f(t)})],d=(c=[ot,st].concat(a,p),h=x(c),function(t,e,r,n){for(var i="",a=0;a<h;a++)i+=c[a](t,e,r,n)||"";return i});i=function(t,e,r,n){l=r,K(Q(t?t+"{"+e.styles+"}":e.styles),d),n&&(m.inserted[e.name]=!0)};var m={key:e,sheet:new u({key:e,container:n,nonce:t.nonce,speedy:t.speedy,prepend:t.prepend,insertionPoint:t.insertionPoint}),nonce:t.nonce,inserted:o,registered:{},insert:i};return m.sheet.hydrate(s),m},ht={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},ft=/[A-Z]|^ms/g,pt=/_EMO_([^_]+?)_([^]*?)_EMO_/g,dt=function(t){return 45===t.charCodeAt(1)},mt=function(t){return null!=t&&"boolean"!=typeof t},yt=s((function(t){return dt(t)?t:t.replace(ft,"-$&").toLowerCase()})),vt=function(t,e){switch(t){case"animation":case"animationName":if("string"==typeof e)return e.replace(pt,(function(t,e,r){return bt={name:e,styles:r,next:bt},e}))}return 1===ht[t]||dt(t)||"number"!=typeof e||0===e?e:e+"px"};function gt(t,e,r){if(null==r)return"";if(void 0!==r.__emotion_styles)return r;switch(typeof r){case"boolean":return"";case"object":if(1===r.anim)return bt={name:r.name,styles:r.styles,next:bt},r.name;if(void 0!==r.styles){var n=r.next;if(void 0!==n)for(;void 0!==n;)bt={name:n.name,styles:n.styles,next:bt},n=n.next;return r.styles+";"}return function(t,e,r){var n="";if(Array.isArray(r))for(var i=0;i<r.length;i++)n+=gt(t,e,r[i])+";";else for(var a in r){var o=r[a];if("object"!=typeof o)null!=e&&void 0!==e[o]?n+=a+"{"+e[o]+"}":mt(o)&&(n+=yt(a)+":"+vt(a,o)+";");else if(!Array.isArray(o)||"string"!=typeof o[0]||null!=e&&void 0!==e[o[0]]){var s=gt(t,e,o);switch(a){case"animation":case"animationName":n+=yt(a)+":"+s+";";break;default:n+=a+"{"+s+"}"}}else for(var l=0;l<o.length;l++)mt(o[l])&&(n+=yt(a)+":"+vt(a,o[l])+";")}return n}(t,e,r);case"function":if(void 0!==t){var i=bt,a=r(t);return bt=i,gt(t,e,a)}}if(null==e)return r;var o=e[r];return void 0!==o?o:r}var bt,xt=/label:\s*([^\s;\n{]+)\s*(;|$)/g,wt=!!r.useInsertionEffect&&r.useInsertionEffect,Et=wt||function(t){return t()},kt=(wt||r.useLayoutEffect,r.createContext("undefined"!=typeof HTMLElement?ut({key:"css"}):null));kt.Provider;var St=r.createContext({}),Pt=function(t,e,r){var n=t.key+"-"+e.name;!1===r&&void 0===t.registered[n]&&(t.registered[n]=e.styles)},_t=c,Ct=function(t){return"theme"!==t},At=function(t){return"string"==typeof t&&t.charCodeAt(0)>96?_t:Ct},Tt=function(t,e,r){var n;if(e){var i=e.shouldForwardProp;n=t.__emotion_forwardProp&&i?function(e){return t.__emotion_forwardProp(e)&&i(e)}:i}return"function"!=typeof n&&r&&(n=t.__emotion_forwardProp),n},Mt=function(t){var e=t.cache,r=t.serialized,n=t.isStringTag;return Pt(e,r,n),Et((function(){return function(t,e,r){Pt(t,e,r);var n=t.key+"-"+e.name;if(void 0===t.inserted[e.name]){var i=e;do{t.insert(e===i?"."+n:"",i,t.sheet,!0),i=i.next}while(void 0!==i)}}(e,r,n)})),null},Dt=function t(e,n){var i,a,s=e.__emotion_real===e,l=s&&e.__emotion_base||e;void 0!==n&&(i=n.label,a=n.target);var c=Tt(e,n,s),u=c||At(l),h=!u("as");return function(){var f=arguments,p=s&&void 0!==e.__emotion_styles?e.__emotion_styles.slice(0):[];if(void 0!==i&&p.push("label:"+i+";"),null==f[0]||void 0===f[0].raw)p.push.apply(p,f);else{p.push(f[0][0]);for(var d=f.length,m=1;m<d;m++)p.push(f[m],f[0][m])}var y,v=(y=function(t,e,n){var i,o,s,f,d=h&&t.as||l,m="",y=[],v=t;if(null==t.theme){for(var g in v={},t)v[g]=t[g];v.theme=r.useContext(St)}"string"==typeof t.className?(i=e.registered,o=y,s=t.className,f="",s.split(" ").forEach((function(t){void 0!==i[t]?o.push(i[t]+";"):f+=t+" "})),m=f):null!=t.className&&(m=t.className+" ");var b=function(t,e,r){if(1===t.length&&"object"==typeof t[0]&&null!==t[0]&&void 0!==t[0].styles)return t[0];var n=!0,i="";bt=void 0;var a=t[0];null==a||void 0===a.raw?(n=!1,i+=gt(r,e,a)):i+=a[0];for(var o=1;o<t.length;o++)i+=gt(r,e,t[o]),n&&(i+=a[o]);xt.lastIndex=0;for(var s,l="";null!==(s=xt.exec(i));)l+="-"+s[1];var c=function(t){for(var e,r=0,n=0,i=t.length;i>=4;++n,i-=4)e=1540483477*(65535&(e=255&t.charCodeAt(n)|(255&t.charCodeAt(++n))<<8|(255&t.charCodeAt(++n))<<16|(255&t.charCodeAt(++n))<<24))+(59797*(e>>>16)<<16),r=1540483477*(65535&(e^=e>>>24))+(59797*(e>>>16)<<16)^1540483477*(65535&r)+(59797*(r>>>16)<<16);switch(i){case 3:r^=(255&t.charCodeAt(n+2))<<16;case 2:r^=(255&t.charCodeAt(n+1))<<8;case 1:r=1540483477*(65535&(r^=255&t.charCodeAt(n)))+(59797*(r>>>16)<<16)}return(((r=1540483477*(65535&(r^=r>>>13))+(59797*(r>>>16)<<16))^r>>>15)>>>0).toString(36)}(i)+l;return{name:c,styles:i,next:bt}}(p.concat(y),e.registered,v);m+=e.key+"-"+b.name,void 0!==a&&(m+=" "+a);var x=h&&void 0===c?At(d):u,w={};for(var E in t)h&&"as"===E||x(E)&&(w[E]=t[E]);return w.className=m,w.ref=n,r.createElement(r.Fragment,null,r.createElement(Mt,{cache:e,serialized:b,isStringTag:"string"==typeof d}),r.createElement(d,w))},(0,r.forwardRef)((function(t,e){var n=(0,r.useContext)(kt);return y(t,n,e)})));return v.displayName=void 0!==i?i:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",v.defaultProps=e.defaultProps,v.__emotion_real=v,v.__emotion_base=l,v.__emotion_styles=p,v.__emotion_forwardProp=c,Object.defineProperty(v,"toString",{value:function(){return"."+a}}),v.withComponent=function(e,r){return t(e,o({},n,r,{shouldForwardProp:Tt(v,r,!0)})).apply(void 0,p)},v}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(t){Dt[t]=Dt(t)}));var Lt=function(t,e,r){return t.substring(t.indexOf(e)+e.length,t.lastIndexOf(r))},Ot=function(t){return window.roamAlphaAPI.util.pageTitleToDate(t.trim())},Ft=function(t){return window.roamAlphaAPI.util.dateToPageTitle(t)},It=function(t){return t.toLocaleDateString("en-US")},jt=__webpack_require__(4353),Nt=__webpack_require__.n(jt),Rt=__webpack_require__(6279),Bt=__webpack_require__.n(Rt),Gt=__webpack_require__(8720),Vt=__webpack_require__.n(Gt);Nt().extend(Bt()),Nt().extend(Vt());var zt=function(t,e){var r=new Date(t);return r.setDate(r.getDate()+e),r},Ht=function(t,e){var r=t,n=e;return Math.floor(Math.abs((r-n)/864e5))},$t=function(t){var e=Ht(new Date,t);return e>-7&&e<7?Nt()(t).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd"}):function(t){return Nt()(t).fromNow()}(t)},Ut=function(t){return t&&"[object Date]"===Object.prototype.toString.call(t)&&!isNaN(t)};function qt(t){return qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},qt(t)}function Wt(){Wt=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==qt(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(qt(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Yt(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Xt(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Yt(a,n,i,o,s,"next",t)}function s(t){Yt(a,n,i,o,s,"throw",t)}o(void 0)}))}}var Jt=function(){var t=Xt(Wt().mark((function t(e){var r,n,i,a,o,s,l,c,u,h;return Wt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,n=e.data,i=e.selectedTag,t.next=3,pe(r);case 3:return t.next=5,xe(r,"cache",-1,{open:!1,heading:3});case 5:return a=t.sent,t.next=8,we(a,"[[".concat(i,"]]"),-1,{open:!1});case 8:o=t.sent,s=0,l=Object.keys(n);case 10:if(!(s<l.length)){t.next=25;break}return c=l[s],t.next=14,me(o,"".concat(c,"::"),{exactMatch:!1});case 14:if(!(u=t.sent)){t.next=18;break}return t.next=18,window.roamAlphaAPI.deleteBlock({block:{uid:u}});case 18:return h=n[c],Ut(h)&&(h=Ft(h)),t.next=22,ge(o,"".concat(c,":: ").concat(h),-1);case 22:s++,t.next=10;break;case 25:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Kt=function(){var t=Xt(Wt().mark((function t(e){var r,n,i,a,o,s;return Wt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,n=e.selectedTag,i=e.toDeleteKeyId,t.next=3,pe(r);case 3:return t.next=5,xe(r,"cache",-1,{open:!1,heading:3});case 5:return a=t.sent,t.next=8,we(a,"[[".concat(n,"]]"),-1,{open:!1});case 8:return o=t.sent,t.next=11,me(o,"".concat(i,"::"),{exactMatch:!1});case 11:if(!(s=t.sent)){t.next=15;break}return t.next=15,window.roamAlphaAPI.deleteBlock({block:{uid:s}});case 15:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Zt=function(t){return t.FixedInterval="FIXED_INTERVAL",t.DefaultSpacedInterval="SPACED_INTERVAL",t}({}),Qt=function(t){return t.Days="Days",t.Weeks="Weeks",t.Months="Months",t.Years="Years",t}({}),te=function(t){return JSON.parse(JSON.stringify(t))},ee=function(t){return t.Finished="finished",t.Partial="partial",t.Unstarted="unstarted",t}({}),re=function(t){return t.Normal="normal",t.AnswerFirst="answerFirst",t}({}),ne={tags:{},combinedToday:{status:ee.Unstarted,due:0,new:0,dueUids:[],newUids:[],completed:0,completedUids:[],completedDue:0,completedDueUids:[],completedNew:0,completedNewUids:[]}};function ie(t){return ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ie(t)}function ae(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function oe(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ae(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=ie(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=ie(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==ie(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ae(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function se(){se=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==ie(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(ie(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function le(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function ce(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){le(a,n,i,o,s,"next",t)}function s(t){le(a,n,i,o,s,"throw",t)}o(void 0)}))}}var ue=function(){var t=ce(se().mark((function t(e){var r,n;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.refUid,t.next=3,window.roamAlphaAPI.q("[\n  :find (pull ?parentIds [\n    :node/title\n    :block/string\n    :block/uid])\n  :in $ ?refId\n  :where\n    [?block :block/uid ?refId]\n    [?block :block/parents ?parentIds]\n  ]",r);case 3:return n=t.sent,t.abrupt("return",n.map((function(t){return t[0]})));case 5:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),he=function(){var t=ce(se().mark((function t(e){var r,n,i,a;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,window.roamAlphaAPI.q("[\n  :find (pull ?block [\n    :block/string\n    :block/children\n    {:block/children [:block/uid :block/string :block/order]}])\n  :in $ ?refId\n  :where\n    [?block :block/uid ?refId]\n  ]",e);case 2:return n=t.sent[0][0],t.next=5,ue({refUid:e});case 5:return i=t.sent,a=null===(r=n.children)||void 0===r?void 0:r.sort((function(t,e){return t.order-e.order})),t.abrupt("return",{string:n.string,children:null==a?void 0:a.map((function(t){return t.string})),childrenUids:null==a?void 0:a.map((function(t){return t.uid})),breadcrumbs:i,refUid:e});case 8:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),fe=function(t){var e=window.roamAlphaAPI.q("[\n  :find ?uid :in $ ?title\n  :where\n    [?page :node/title ?title]\n    [?page :block/uid ?uid]\n]",t);if(e.length)return e[0][0]},pe=function(){var t=ce(se().mark((function t(e){var r,n;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(r=fe(e))){t.next=3;break}return t.abrupt("return",r);case 3:return n=window.roamAlphaAPI.util.generateUID(),t.next=6,window.roamAlphaAPI.data.page.create({page:{title:e,uid:n}});case 6:return t.abrupt("return",fe(e));case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),de=function(t,e){var r=window.roamAlphaAPI.q("\n    [:find ?block_uid\n     :in $ ?page_title ?block_string\n     :where\n     [?page :node/title ?page_title]\n     [?page :block/uid ?page_uid]\n     [?block :block/parents ?page]\n     [?block :block/string ?block_string]\n     [?block :block/uid ?block_uid]\n    ]",t,e);if(r.length)return r[0][0]},me=function(t,e){var r=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{exactMatch:!0}).exactMatch?"\n    [:find ?block_uid\n    :in $ ?parent_uid ?block_string\n    :where\n      [?parent :block/uid ?parent_uid]\n      [?block :block/parents ?parent]\n      [?block :block/string ?block_string]\n      [?block :block/uid ?block_uid]\n    ]\n  ":"\n    [:find ?block_uid\n      :in $ ?parent_uid ?block_sub_string\n      :where\n        [?parent :block/uid ?parent_uid]\n        [?block :block/parents ?parent]\n        [?block :block/string ?block_string]\n        [(clojure.string/starts-with? ?block_string ?block_sub_string)]\n        [?block :block/uid ?block_uid]\n    ]\n  ",n=window.roamAlphaAPI.q(r,t,e);if(n.length)return n[0][0]},ye=function(){var t=ce(se().mark((function t(e){var r;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,window.roamAlphaAPI.q("[\n  :find (pull ?tagPage [\n    :block/uid\n    :block/string\n    :block/children\n    {:block/children ...}])\n  :in $ ?tag\n  :where\n    [?tagPage :node/title ?tag]\n    [?tagPage :block/children ?tagPageChildren]\n  ]",e);case 2:if((r=t.sent).length){t.next=5;break}return t.abrupt("return",[]);case 5:return t.abrupt("return",r);case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),ve=function(){var t=ce(se().mark((function t(e){var r,n;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,window.roamAlphaAPI.q("[\n  :find (pull ?child [\n    :block/uid\n    :block/string\n    :block/order])\n  :in $ ?parent_uid\n  :where\n    [?parent :block/uid ?parent_uid]\n    [?parent :block/children ?child]\n  ]",e);case 3:if((r=t.sent).length){t.next=6;break}return t.abrupt("return",[]);case 6:return n=r.map((function(t){return t[0]})).sort((function(t,e){return t.order-e.order})),console.log("üîç [Utils] getChildBlocksByUid(".concat(e,") ËøîÂõû ").concat(n.length," ‰∏™Â≠êblocks")),t.abrupt("return",n);case 11:return t.prev=11,t.t0=t.catch(0),console.error("üîç [Utils] getChildBlocksByUid(".concat(e,") Â§±Ë¥•:"),t.t0),t.abrupt("return",[]);case 15:case"end":return t.stop()}}),t,null,[[0,11]])})));return function(e){return t.apply(this,arguments)}}(),ge=function(){var t=ce(se().mark((function t(e,r,n){var i,a,o=arguments;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=o.length>3&&void 0!==o[3]?o[3]:{},n||(n=0),a=window.roamAlphaAPI.util.generateUID(),t.next=5,window.roamAlphaAPI.createBlock({location:{"parent-uid":e,order:n},block:oe({string:r,uid:a},i)});case 5:return t.abrupt("return",a);case 6:case"end":return t.stop()}}),t)})));return function(e,r,n){return t.apply(this,arguments)}}(),be=function(){var t=ce(se().mark((function t(e,r,n,i){var a;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a=fe(e),t.abrupt("return",ge(a,r,n,i));case 2:case"end":return t.stop()}}),t)})));return function(e,r,n,i){return t.apply(this,arguments)}}(),xe=function(){var t=ce(se().mark((function t(e,r,n,i){var a;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(a=de(e,r))){t.next=3;break}return t.abrupt("return",a);case 3:return t.abrupt("return",be(e,r,n,i));case 4:case"end":return t.stop()}}),t)})));return function(e,r,n,i){return t.apply(this,arguments)}}(),we=function(){var t=ce(se().mark((function t(e,r,n,i){var a;return se().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(a=me(e,r))){t.next=3;break}return t.abrupt("return",a);case 3:return t.abrupt("return",ge(e,r,n,i));case 4:case"end":return t.stop()}}),t)})));return function(e,r,n,i){return t.apply(this,arguments)}}(),Ee=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.reviewMode,r=void 0===e?Zt.FixedInterval:e,n=t.dateCreated,i=void 0===n?void 0:n,a=t.isNew,o=void 0===a||a;return r===Zt.DefaultSpacedInterval?{dateCreated:i||new Date,eFactor:2.5,interval:0,repetitions:0,isNew:o,reviewMode:r}:{dateCreated:i||new Date,intervalMultiplier:3,intervalMultiplierType:Qt.Days,isNew:o,reviewMode:r}};function ke(t){return ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ke(t)}function Se(t){return function(t){if(Array.isArray(t))return De(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||Me(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Pe(){Pe=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==ke(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(ke(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function _e(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ce(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?_e(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=ke(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=ke(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==ke(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):_e(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ae(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Te(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=Me(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function Me(t,e){if(t){if("string"==typeof t)return De(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?De(t,e):void 0}}function De(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Le=function(t){var e,r=t.tagsList,n=t.cachedData,i=te(ne),a=Te(r);try{for(a.s();!(e=a.n()).done;){var o=e.value,s=null==n?void 0:n[o];i.tags[o]={status:ee.Unstarted,completed:0,due:0,new:0,newUids:[],dueUids:[],completedUids:[],completedDue:0,completedNew:0,completedDueUids:[],completedNewUids:[],renderMode:(null==s?void 0:s.renderMode)||re.Normal}}}catch(t){a.e(t)}finally{a.f()}return i},Oe=function(t){var e,r=t.today,n=Te(t.tagsList);try{for(n.s();!(e=n.n()).done;){var i=e.value,a=r.tags[i].completed,o=r.tags[i].new+r.tags[i].due;r.tags[i].status=0===o?ee.Finished:a>0?ee.Partial:ee.Unstarted}}catch(t){n.e(t)}finally{n.f()}var s=r.combinedToday.completed,l=r.combinedToday.new+r.combinedToday.due;r.combinedToday.status=0===l?ee.Finished:s>0?ee.Partial:ee.Unstarted},Fe=function(){var t,e=(t=Pe().mark((function t(e){var r,n,i,a,o,s;return Pe().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=e.today,n=e.tagsList,i=e.sessionData,a=Te(n),t.prev=2,s=Pe().mark((function t(){var e,n,a,s,l,c;return Pe().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e=o.value,n=0,a=[],s=[],l=[],c=i[e],Object.keys(c).forEach((function(t){var e,r,i=c[t],o=i[i.length-1];if(o&&(e=o.dateCreated,r=new Date,Ut(e)&&Ut(r)&&e.toDateString()===r.toDateString())){var u=1===i.length,h=!u,f=u;n++,a.push(t),h&&s.push(t),f&&l.push(t)}})),r.tags[e]=Ce(Ce({},r.tags[e]||{}),{},{completed:n,completedUids:a,completedDueUids:s,completedNewUids:l,completedDue:s.length,completedNew:l.length});case 8:case"end":return t.stop()}}),t)})),a.s();case 5:if((o=a.n()).done){t.next=9;break}return t.delegateYield(s(),"t0",7);case 7:t.next=5;break;case 9:t.next=14;break;case 11:t.prev=11,t.t1=t.catch(2),a.e(t.t1);case 14:return t.prev=14,a.f(),t.finish(14);case 17:return t.abrupt("return",r);case 18:case"end":return t.stop()}}),t,null,[[2,11,14,17]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Ae(a,n,i,o,s,"next",t)}function s(t){Ae(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t){return e.apply(this,arguments)}}(),Ie=function(t){var e=t.today,r=t.tagsList,n=te(ne);e.combinedToday=n.combinedToday;var i,a=Te(r);try{for(a.s();!(i=a.n()).done;){var o=i.value;e.combinedToday.due+=e.tags[o].due,e.combinedToday.new+=e.tags[o].new,e.combinedToday.dueUids=e.combinedToday.dueUids.concat(e.tags[o].dueUids),e.combinedToday.newUids=e.combinedToday.newUids.concat(e.tags[o].newUids),e.combinedToday.completed+=e.tags[o].completed,e.combinedToday.completedUids=e.combinedToday.completedUids.concat(e.tags[o].completedUids),e.combinedToday.completedDue+=e.tags[o].completedDue,e.combinedToday.completedDueUids=e.combinedToday.completedDueUids.concat(e.tags[o].completedDueUids),e.combinedToday.completedNew+=e.tags[o].completedNew,e.combinedToday.completedNewUids=e.combinedToday.completedNewUids.concat(e.tags[o].completedNewUids)}}catch(t){a.e(t)}finally{a.f()}e.combinedToday.dueUids=Se(new Set(e.combinedToday.dueUids)),e.combinedToday.newUids=Se(new Set(e.combinedToday.newUids)),e.combinedToday.completedUids=Se(new Set(e.combinedToday.completedUids)),e.combinedToday.completedDueUids=Se(new Set(e.combinedToday.completedDueUids)),e.combinedToday.completedNewUids=Se(new Set(e.combinedToday.completedNewUids)),e.combinedToday.due=e.combinedToday.dueUids.length,e.combinedToday.new=e.combinedToday.newUids.length,e.combinedToday.completed=e.combinedToday.completedUids.length,e.combinedToday.completedDue=e.combinedToday.completedDueUids.length,e.combinedToday.completedNew=e.combinedToday.completedNewUids.length},je=function(t){var e,r=t.today,n=t.tagsList,i=t.cardUids,a=t.pluginPageData,o=t.shuffleCards,s=t.priorityOrder,l=Ne(void 0===s?[]:s),c=Te(n);try{var u=function(){var t=e.value,n=i[t],s=[];if(n.forEach((function(t){a[t]&&a[t].length||(s.push(t),a[t]=[Ee()])})),l&&!o){var c=function(t){var e;return null!==(e=l.get(t))&&void 0!==e?e:Number.MAX_SAFE_INTEGER};s.sort((function(t,e){return c(t)-c(e)}))}else o&&s.sort((function(){return Math.random()-.5}));r.tags[t]=Ce(Ce({},r.tags[t]),{},{newUids:s,new:s.length})};for(c.s();!(e=c.n()).done;)u()}catch(t){c.e(t)}finally{c.f()}},Ne=function(t){if(!t||0===t.length)return null;var e=new Map;return t.forEach((function(t,r){return e.set(t,r)})),e},Re=function(t){var e,r=t.today,n=t.tagsList,i=t.sessionData,a=t.isCramming,o=t.shuffleCards,s=t.priorityOrder,l=void 0===s?[]:s,c=Ne(l),u=Te(n);try{var h=function(){var t=e.value,n=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],n=[];if(!Object.keys(t).length)return n;var i=Ne(r),a=new Date;if(Object.keys(t).forEach((function(r){var i=t[r],o=i[i.length-1];if(o){var s=o.nextDueDate;(e||s&&s<=a)&&n.push(r)}})),i){var o=function(t){var e;return null!==(e=i.get(t))&&void 0!==e?e:Number.MAX_SAFE_INTEGER};n.sort((function(t,e){return o(t)-o(e)}))}return n}(i[t],a,l);if(o)n.sort((function(){return Math.random()-.5}));else if(c){var s=function(t){var e;return null!==(e=c.get(t))&&void 0!==e?e:Number.MAX_SAFE_INTEGER};n.sort((function(t,e){return s(t)-s(e)}))}r.tags[t]=Ce(Ce({},r.tags[t]),{},{dueUids:n,due:n.length})};for(u.s();!(e=u.n()).done;)h()}catch(t){u.e(t)}finally{u.f()}},Be=["refUid","dataPageTitle","dateCreated"];function Ge(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||ze(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ve(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=ze(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function ze(t,e){if(t){if("string"==typeof t)return He(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?He(t,e):void 0}}function He(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function $e(){$e=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Ue(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Ue(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Ue(t){return Ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ue(t)}function qe(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}function We(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Ye(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){We(a,n,i,o,s,"next",t)}function s(t){We(a,n,i,o,s,"throw",t)}o(void 0)}))}}var Xe=function(t){switch(t){case 5:default:return"üü¢";case 4:return"üîµ";case 3:case 2:return"üü†";case 0:return"üî¥"}},Je=function(){var t=Ye($e().mark((function t(e){var r,n,i,a,o,s,l,c,u,h,f,p,d,m,y;return $e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.refUid,n=e.dataPageTitle,i=e.dateCreated,a=qe(e,Be),t.next=3,pe(n);case 3:return t.next=5,xe(n,"data",-1,{open:!1,heading:3});case 5:return o=t.sent,t.next=8,we(o,"((".concat(r,"))"),0,{open:!1});case 8:return s=t.sent,l=i||new Date,c=Ft(l),u=Xe(a.grade),t.next=14,ge(s,"[[".concat(c,"]] ").concat(u),0,{open:!1});case 14:h=t.sent,f=a.nextDueDate||zt(l,a.interval),p=0,d=Object.keys(a);case 17:if(!(p<d.length)){t.next=26;break}return m=d[p],y=a[m],"nextDueDate"===m?y="[[".concat(Ft(f),"]]"):"fsrsState"===m&&"object"===Ue(y)&&null!==y&&(y=JSON.stringify(y)),t.next=23,ge(h,"".concat(m,":: ").concat(y),-1);case 23:p++,t.next=17;break;case 26:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Ke=function(){var t=Ye($e().mark((function t(e){var r,n,i,a,o,s,l,c,u,h,f,p,d,m,y,v,g,b,x,w,E,k,S;return $e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.token,n=e.records,i=e.selectedUids,a=e.dataPageTitle,t.next=3,pe(a);case 3:return t.next=5,xe(a,"data",-1,{open:!1,heading:3});case 5:o=t.sent,s=window.roamAlphaAPI.graph.name,l={graphName:s,data:{action:"batch-actions",actions:[]}},c=Ve(i),t.prev=9,c.s();case 11:if((u=c.n()).done){t.next=50;break}h=u.value,(f=me(o,"((".concat(h,"))")))&&l.data.actions.push({action:"delete-block",block:{uid:f}}),p=window.roamAlphaAPI.util.generateUID(),l.data.actions.push({action:"create-block",location:{"parent-uid":o,order:0},block:{string:"((".concat(h,"))"),uid:p,open:!1}}),d=n[h],m=Ve(d),t.prev=19,m.s();case 21:if((y=m.n()).done){t.next=40;break}v=y.value,g=Ft(v.dateCreated),b=Xe(v.grade),x=window.roamAlphaAPI.util.generateUID(),l.data.actions.push({action:"create-block",location:{"parent-uid":p,order:0},block:{string:"[[".concat(g,"]] ").concat(b),uid:x,open:!1}}),w=0,E=Object.keys(v);case 28:if(!(w<E.length)){t.next=38;break}if(k=E[w],S=v[k],"dateCreated"!==k){t.next=33;break}return t.abrupt("continue",35);case 33:"nextDueDate"===k?S="[[".concat(Ft(S),"]]"):"fsrsState"===k&&"object"===Ue(S)&&null!==S&&(S=JSON.stringify(S)),l.data.actions.push({action:"create-block",location:{"parent-uid":x,order:-1},block:{string:"".concat(k,":: ").concat(S),open:!1}});case 35:w++,t.next=28;break;case 38:t.next=21;break;case 40:t.next=45;break;case 42:t.prev=42,t.t0=t.catch(19),m.e(t.t0);case 45:return t.prev=45,m.f(),t.finish(45);case 48:t.next=11;break;case 50:t.next=55;break;case 52:t.prev=52,t.t1=t.catch(9),c.e(t.t1);case 55:return t.prev=55,c.f(),t.finish(55);case 58:return t.prev=59,t.next=62,fetch("".concat("https://roam-memo-server.onrender.com","/save-roam-sr-data"),{method:"POST",body:JSON.stringify(l),headers:{Authorization:"Bearer ".concat(r),"Content-Type":"application/json"}});case 62:t.next=67;break;case 64:t.prev=64,t.t2=t.catch(59),console.error("Error Bulk Saving",t.t2);case 67:case"end":return t.stop()}}),t,null,[[9,52,55,58],[19,42,45,48],[59,64]])})));return function(e){return t.apply(this,arguments)}}(),Ze=function(){var t=Ye($e().mark((function t(e){var r,n,i,a,o,s,l;return $e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,t.prev=1,t.next=4,pe(r);case 4:return t.next=6,xe(r,"data",-1,{open:!1,heading:3});case 6:if(n=t.sent,(i=me(n,"Priority Rankings"))||(i=me(n,"**Priority Rankings**")),i){t.next=12;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂÆπÂô®block‰∏çÂ≠òÂú®ÔºåËøîÂõûÁ©∫ÂàóË°®"),t.abrupt("return",[]);case 12:return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÊâæÂà∞ÂÆπÂô®block:",i),t.next=15,ve(i);case 15:if((a=t.sent)&&0!==a.length){t.next=19;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂÆπÂô®‰∏∫Á©∫ÔºåËøîÂõûÁ©∫ÂàóË°®"),t.abrupt("return",[]);case 19:if(console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂÆπÂô®‰∏≠ÂåÖÂê´blocks:",a.map((function(t){return t.string}))),o=null==a?void 0:a.find((function(t){return t.string&&t.string.startsWith("priority-ranking::")}))){t.next=24;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - Êú™ÊâæÂà∞priority-rankingÊï∞ÊçÆblock"),t.abrupt("return",[]);case 24:if(s=o.string.replace("priority-ranking::","").trim()){t.next=28;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - priority-rankingÊï∞ÊçÆ‰∏∫Á©∫"),t.abrupt("return",[]);case 28:return l=s.split(",").map((function(t){return t.trim()})).map((function(t){return t.startsWith("((")&&t.endsWith("))")?t.slice(2,-2):t})).filter((function(t){return t})),console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ‰ªéÂÆπÂô®‰∏≠ÊàêÂäüËØªÂèñÊéíÂêçÂàóË°®:",l.length,"‰∏™Âç°Áâá"),t.abrupt("return",l);case 33:return t.prev=33,t.t0=t.catch(1),console.error("ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ËØªÂèñÊéíÂêçÂàóË°®Â§±Ë¥•:",t.t0),t.abrupt("return",[]);case 37:case"end":return t.stop()}}),t,null,[[1,33]])})));return function(e){return t.apply(this,arguments)}}(),Qe=function(){var t=Ye($e().mark((function t(e){var r,n,i,a,o,s,l,c,u,h,f;return $e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.dataPageTitle,n=e.rankings,t.prev=1,window.roamAlphaAPI){t.next=4;break}throw new Error("Roam Alpha API ‰∏çÂèØÁî®");case 4:return t.next=6,pe(r);case 6:return t.next=8,xe(r,"data",-1,{open:!1,heading:3});case 8:if(i=t.sent,console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂáÜÂ§á‰øùÂ≠òÂà∞data block:",i),!(a=me(i,"priority-ranking::",{exactMatch:!1}))){t.next=15;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂèëÁé∞ÊóßÊï∞ÊçÆÔºåÊ≠£Âú®Âà†Èô§:",a),t.next=15,window.roamAlphaAPI.deleteBlock({block:{uid:a}});case 15:if(!(o=me(i,"**Priority Rankings**"))){t.next=20;break}return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂèëÁé∞ÊóßÁ≤ó‰ΩìÂÆπÂô®ÔºåÊ≠£Âú®Âà†Èô§:",o),t.next=20,window.roamAlphaAPI.deleteBlock({block:{uid:o}});case 20:return t.next=22,we(i,"Priority Rankings",0,{open:!1});case 22:return s=t.sent,console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂÆπÂô®block UID:",s),t.next=26,ve(s);case 26:if(l=t.sent,console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂÆπÂô®‰∏≠Áé∞Êúâblocks:",null==l?void 0:l.map((function(t){return t.string}))),c=null==l?void 0:l.find((function(t){return t.string&&t.string.startsWith("priority-ranking::")})),u=n.map((function(t){return"((".concat(t,"))")})).join(","),h="priority-ranking:: ".concat(u),console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂáÜÂ§á‰øùÂ≠òÊï∞ÊçÆÔºåÂç°ÁâáÊï∞Èáè:",n.length),!c){t.next=38;break}return t.next=35,window.roamAlphaAPI.updateBlock({block:{uid:c.uid,string:h}});case 35:console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - Âú®ÂÆπÂô®‰∏≠Êõ¥Êñ∞ÊéíÂêçÂàóË°®:",n.length,"‰∏™Âç°Áâá"),t.next=42;break;case 38:return t.next=40,ge(s,h,-1);case 40:f=t.sent,console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - Âú®ÂÆπÂô®‰∏≠ÂàõÂª∫ÊéíÂêçÂàóË°®:",n.length,"‰∏™Âç°Áâá, UID:",f);case 42:console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ‰øùÂ≠òÊìç‰ΩúÂÆåÊàê"),t.next=49;break;case 45:throw t.prev=45,t.t0=t.catch(1),console.error("ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ‰øùÂ≠òÊéíÂêçÂàóË°®Â§±Ë¥•:",t.t0),t.t0;case 49:case"end":return t.stop()}}),t,null,[[1,45]])})));return function(e){return t.apply(this,arguments)}}(),tr=function(t){var e=t.refUid,r=t.priorityOrder,n=t.allCardsCount,i=t.defaultPriority;if(!r||0===r.length)return Math.max(1,Math.ceil(n*(1-i/100)));var a=r.indexOf(e);return-1===a?Math.max(1,Math.ceil(n*(1-i/100))):a+1},er=function(){var t=Ye($e().mark((function t(e){var r,n,i,a,o,s,l,c,u,h,f,p,d,m,y,v,g;return $e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.rankingChanges,n=e.dataPageTitle,i=e.allCardUids,t.prev=1,r&&0!==Object.keys(r).length){t.next=4;break}return t.abrupt("return");case 4:if(null!=n&&n.trim()&&null!=i&&i.length){t.next=6;break}throw new Error("dataPageTitle Êàñ allCardUids ‰∏çËÉΩ‰∏∫Á©∫");case 6:return console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÂºÄÂßãÊâπÈáè‰øùÂ≠òÊéíÂêçÂèòÊõ¥: ".concat(Object.keys(r).length," ‰∏™ÂèòÊõ¥")),t.next=9,Ze({dataPageTitle:n});case 9:0===(a=t.sent).length&&(a=function(t){if(Array.isArray(t))return He(t)}(b=i)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(b)||ze(b)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=new Set,a=a.filter((function(t){return!o.has(t)&&(o.add(t),!0)})),s=new Set(Object.keys(r)),l=a.filter((function(t){return!s.has(t)})),c=Object.entries(r).sort((function(t,e){return Ge(t,2)[1]-Ge(e,2)[1]})),u=l,h=Ve(c);try{for(h.s();!(f=h.n()).done;)p=Ge(f.value,2),d=p[0],m=p[1],y=Math.max(0,Math.min(m-1,u.length)),u.splice(y,0,d)}catch(t){h.e(t)}finally{h.f()}if(new Set(u).size===u.length){t.next=22;break}throw console.error("ÊéíÂêçÂàóË°®ÂåÖÂê´ÈáçÂ§çÂç°ÁâáÔºå‰øùÂ≠òÊìç‰ΩúÂ∑≤‰∏≠Ê≠¢„ÄÇ"),new Error("ÊéíÂêçÂàóË°®ÂåÖÂê´ÈáçÂ§çÂç°Áâá");case 22:return t.next=24,Qe({dataPageTitle:n,rankings:u});case 24:console.log("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÊâπÈáè‰øùÂ≠òÊéíÂêçÂèòÊõ¥ÂÆåÊàê: ".concat(u.length," ‰∏™Âç°Áâá")),t.next=39;break;case 27:if(t.prev=27,t.t0=t.catch(1),console.error("üéØ ÂçèÂêåÊéíÂêçÁ≥ªÁªü - ÊâπÈáè‰øùÂ≠òÊéíÂêçÂèòÊõ¥Â§±Ë¥•:",t.t0),null===(v=t.t0.message)||void 0===v||!v.includes("API")){t.next=34;break}throw new Error("ÁΩëÁªúËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúÂêéÈáçËØï");case 34:if(null===(g=t.t0.message)||void 0===g||!g.includes("ÊùÉÈôê")){t.next=38;break}throw new Error("Ê≤°Êúâ‰øÆÊîπÊùÉÈôêÔºåËØ∑Ê£ÄÊü•Roam ResearchËÆæÁΩÆ");case 38:throw new Error("‰øùÂ≠òÂ§±Ë¥•: ".concat(t.t0.message||"Êú™Áü•ÈîôËØØ"));case 39:case"end":return t.stop()}var b}),t,null,[[1,27]])})));return function(e){return t.apply(this,arguments)}}();function rr(t){return rr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},rr(t)}function nr(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||ur(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ir(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function ar(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ir(Object(r),!0).forEach((function(e){or(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ir(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function or(t,e,r){var n;return n=function(t,e){if("object"!=rr(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=rr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e),(e="symbol"==rr(n)?n:String(n))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function sr(t){return function(t){if(Array.isArray(t))return hr(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||ur(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function lr(){lr=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==rr(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(rr(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function cr(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=ur(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function ur(t,e){if(t){if("string"==typeof t)return hr(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?hr(t,e):void 0}}function hr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function fr(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function pr(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){fr(a,n,i,o,s,"next",t)}function s(t){fr(a,n,i,o,s,"throw",t)}o(void 0)}))}}var dr=new Map,mr=function(t){return dr.has(t)||dr.set(t,{isInProgress:!1,lastTime:0,debounceMs:1e3}),dr.get(t)},yr=function(){var t=pr(lr().mark((function t(e){var r,n,i,a,o,s,l,c,u,h,f,p,d,m,y,v,g,b,x,w,E,k,S,P;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.tagsList,n=e.dataPageTitle,i=e.dailyLimit,a=e.isCramming,o=e.shuffleCards,s=e.cachedData,l=e.defaultPriority,c=void 0===l?70:l,t.next=3,Pr({dataPageTitle:n,limitToLatest:!1});case 3:u=t.sent,h=Le({tagsList:r,cachedData:s}),f={},p={},d=cr(r),t.prev=8,d.s();case 10:if((m=d.n()).done){t.next=21;break}return y=m.value,t.next=14,Ar({pluginPageData:u,tag:y,dataPageTitle:n});case 14:v=t.sent,g=v.sessionData,b=v.cardUids,f[y]=g,p[y]=b;case 19:t.next=10;break;case 21:t.next=26;break;case 23:t.prev=23,t.t0=t.catch(8),d.e(t.t0);case 26:return t.prev=26,d.f(),t.finish(26);case 29:x=new Set,w=cr(r);try{for(w.s();!(E=w.n()).done;)k=E.value,p[k].forEach((function(t){return x.add(t)}))}catch(t){w.e(t)}finally{w.f()}return S=Math.max(1,x.size),t.next=35,vr(x,n,c);case 35:return t.next=37,Ze({dataPageTitle:n});case 37:return P=t.sent,t.next=40,Fe({today:h,tagsList:r,sessionData:f});case 40:return je({today:h,tagsList:r,cardUids:p,pluginPageData:u,shuffleCards:o,priorityOrder:P}),Re({today:h,tagsList:r,sessionData:f,isCramming:a,shuffleCards:o,priorityOrder:P}),Ie({today:h,tagsList:r}),Tr({today:h,dailyLimit:i,tagsList:r,isCramming:a}),Ie({today:h,tagsList:r}),Oe({today:h,tagsList:r}),t.abrupt("return",{practiceData:u,todayStats:h,allCardsCount:S,priorityOrder:P,allCardUids:Array.from(x),cardUids:p});case 47:case"end":return t.stop()}}),t,null,[[8,23,26,29]])})));return function(e){return t.apply(this,arguments)}}(),vr=function(){var t=pr(lr().mark((function t(e,r,n){var i,a,o,s,l,c,u,h;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(i=mr(r),a=Date.now(),!(i.isInProgress||a-i.lastTime<i.debounceMs)){t.next=4;break}return t.abrupt("return");case 4:return i.isInProgress=!0,i.lastTime=a,t.prev=6,t.next=9,Ze({dataPageTitle:r});case 9:if(o=t.sent,0!==(s=Array.from(e).filter((function(t){return!o.includes(t)}))).length){t.next=13;break}return t.abrupt("return");case 13:return l=sr(s).reverse(),c=o.length+l.length,u=Math.max(0,Math.ceil(c*(1-n/100))-1),(h=sr(o)).splice.apply(h,[u,0].concat(sr(l))),t.next=20,Qe({dataPageTitle:r,rankings:h});case 20:t.next=27;break;case 22:throw t.prev=22,t.t0=t.catch(6),console.error("üéØ [ÊéíÂ∫èÊõ¥Êñ∞] Êõ¥Êñ∞Â§±Ë¥•:",t.t0),i.lastTime=0,t.t0;case 27:return t.prev=27,i.isInProgress=!1,t.finish(27);case 30:case"end":return t.stop()}}),t,null,[[6,22,27,30]])})));return function(e,r,n){return t.apply(this,arguments)}}(),gr=function(t){return'[\n  :find ?page\n  :where\n    [?page :node/title "'.concat(t,'"]\n]')},br=function(){var t=pr(lr().mark((function t(e,r){var n,i,a;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=window.roamAlphaAPI.q(gr(r)),i=n.length?n[0][0]:"",a=window.roamAlphaAPI.q("[\n  :find ?refUid\n  :in $ ?tag ?dataPage\n  :where\n    [?tagPage :node/title ?tag]\n    [?tagRefs :block/refs ?tagPage]\n    [?tagRefs :block/uid ?refUid]\n    [?tagRefs :block/page ?homePage]\n    [(!= ?homePage ?dataPage)]\n  ]",e,i),t.abrupt("return",a.map((function(t){return t[0]})));case 4:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}(),xr=function(){var t=pr(lr().mark((function t(e){var r,n,i;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ye(e);case 2:if((r=t.sent).length){t.next=5;break}return t.abrupt("return",[]);case 5:return n=r[0][0].children,i=n.filter((function(t){return!!t.string})),t.abrupt("return",i.map((function(t){return t.uid})));case 8:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),wr=function(t,e){var r,n,i,a,o=cr((n=e,i=n.children.some((function(t){return t.string.includes("reviewMode")}))?n.children:[].concat(sr(n.children),[{order:n.children.length,string:"reviewMode:: ".concat(Zt.DefaultSpacedInterval)}]),ar(ar({},n),{},{children:i})).children);try{for(o.s();!(r=o.n()).done;){var s=nr(r.value.string.split("::").map((function(t){return t.trim()})),2),l=s[0],c=s[1];"nextDueDate"===l?t[l]=Ot(Lt(c,"[[","]]")):"true"===c||"false"===c?t[l]="true"===c:"string"!=typeof(a=c)||isNaN(a)||isNaN(parseFloat(a))?t[l]=c:t[l]=Number(c)}}catch(t){o.e(t)}finally{o.f()}},Er=function(t){var e;return(null===(e=t.map((function(t){return t[0]}))[0].children)||void 0===e?void 0:e.reduce((function(t,e){var r=Lt(e.string,"((","))");if(t[r]={},!e.children)return t;var n=e.children.find((function(t){return 0===t.order}));return t[r].dateCreated=Ot(Lt(n.string,"[[","]]")),n.children?(wr(t[r],n),t):t}),{}))||{}},kr=function(t){var e;return(null===(e=t.map((function(t){return t[0]}))[0].children)||void 0===e?void 0:e.reduce((function(t,e){var r=Lt(e.string,"((","))");if(t[r]=[],!e.children)return t;var n,i=cr(e.children);try{for(i.s();!(n=i.n()).done;){var a=n.value,o={refUid:r,dateCreated:Ot(Lt(a.string,"[[","]]"))};if(!a.children)return t;wr(o,a),t[r].push(o)}}catch(t){i.e(t)}finally{i.f()}return t}),{}))||{}},Sr=function(){var t=pr(lr().mark((function t(e){var r,n;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,n=e.blockName,t.next=3,window.roamAlphaAPI.q("[\n  :find (pull ?pluginPageChildren [\n    :block/string\n    :block/children\n    :block/order\n    {:block/children ...}])\n    :in $ ?pageTitle ?dataBlockName\n    :where\n    [?page :node/title ?pageTitle]\n    [?page :block/children ?pluginPageChildren]\n    [?pluginPageChildren :block/string ?dataBlockName]\n  ]",r,n);case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Pr=function(){var t=pr(lr().mark((function t(e){var r,n,i,a;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,n=e.limitToLatest,i=void 0===n||n,t.next=3,Sr({dataPageTitle:r,blockName:"data"});case 3:if((a=t.sent).length){t.next=6;break}return t.abrupt("return",{});case 6:return t.abrupt("return",i?Er(a):kr(a));case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),_r=function(t){var e=t.map((function(t){return t[0]}))[0].children;return e&&e.length&&null!=e&&e.length&&e.reduce((function(t,e){var r;return t[Lt(e.string,"[[","]]")]=(null===(r=e.children)||void 0===r?void 0:r.reduce((function(t,e){if(!e.string)return t;var r=nr(e.string.split("::").map((function(t){return t.trim()})),2),n=r[0],i=r[1],a=Ot(i);return t[n]=a||i,t}),{}))||{},t}),{})||{}},Cr=function(){var t=pr(lr().mark((function t(e){var r,n;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,t.next=3,Sr({dataPageTitle:r,blockName:"cache"});case 3:if((n=t.sent).length){t.next=6;break}return t.abrupt("return",{});case 6:return t.abrupt("return",_r(n));case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Ar=function(){var t=pr(lr().mark((function t(e){var r,n,i,a,o,s,l;return lr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.pluginPageData,n=e.tag,i=e.dataPageTitle,t.next=3,br(n,i);case 3:return a=t.sent,t.next=6,xr(n);case 6:return o=t.sent,s=a.concat(o),l=Object.keys(r).reduce((function(t,e){return s.indexOf(e)>-1&&(t[e]=r[e]),t}),{}),t.abrupt("return",{sessionData:l,cardUids:s});case 10:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Tr=function(t){var e=t.today,r=t.dailyLimit,n=t.tagsList,i=t.isCramming,a=e.combinedToday.due+e.combinedToday.new;if(r&&a&&!i){!function(t){var e,r=t.today,n=Te(t.tagsList);try{for(n.s();!(e=n.n()).done;){var i,a,o=e.value;(i=r.tags[o].newUids).push.apply(i,Se(r.tags[o].completedNewUids)),(a=r.tags[o].dueUids).push.apply(a,Se(r.tags[o].completedDueUids)),r.tags[o].new=r.tags[o].newUids.length,r.tags[o].due=r.tags[o].dueUids.length}}catch(t){n.e(t)}finally{n.f()}}({today:e,tagsList:n});var o=n.reduce((function(t,e){return ar(ar({},t),{},or({},e,{newUids:[],dueUids:[]}))}),{}),s=r,l=1===s?0:Math.max(1,Math.floor(.25*s)),c=s-l,u=0,h=0,f=u+h;t:for(;f<a;){var p,d=cr(n);try{for(d.s();!(p=d.n()).done;){var m=p.value;if((f=u+h)===s)break t;var y=o[m],v=y.newUids.length,g=e.tags[m].newUids[v],b=y.dueUids.length,x=e.tags[m].dueUids[b],w=u<l,E=h<c,k=!!x||h<e.combinedToday.due,S=!!g||u<e.combinedToday.new;!g||!w&&k?!x||!E&&S||(o[m].dueUids.push(e.tags[m].dueUids[b]),h++):(o[m].newUids.push(e.tags[m].newUids[v]),u++)}}catch(t){d.e(t)}finally{d.f()}}var P,_=cr(n);try{for(_.s();!(P=_.n()).done;){var C=P.value,A=e.tags[C],T=A.completedDueUids,M=A.completedNewUids,D=Math.max(o[C].dueUids.length-T.length,0),L=Math.max(o[C].newUids.length-M.length,0);o[C].dueUids=o[C].dueUids.slice(0,D),o[C].newUids=o[C].newUids.slice(0,L)}}catch(t){_.e(t)}finally{_.f()}var O,F=cr(n);try{for(F.s();!(O=F.n()).done;){var I=O.value;e.tags[I]=ar(ar({},e.tags[I]),{},{dueUids:o[I].dueUids,newUids:o[I].newUids,due:o[I].dueUids.length,new:o[I].newUids.length})}}catch(t){F.e(t)}finally{F.f()}}};function Mr(t){return Mr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Mr(t)}function Dr(t){return function(t){if(Array.isArray(t))return Gr(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||Br(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lr(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Or(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Lr(Object(r),!0).forEach((function(e){Vr(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Lr(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Fr(){Fr=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Mr(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Mr(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Ir(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function jr(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Ir(a,n,i,o,s,"next",t)}function s(t){Ir(a,n,i,o,s,"throw",t)}o(void 0)}))}}function Nr(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=Br(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function Rr(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||Br(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Br(t,e){if(t){if("string"==typeof t)return Gr(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Gr(t,e):void 0}}function Gr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Vr(t,e,r){var n;return n=function(t,e){if("object"!=Mr(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=Mr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e),(e="symbol"==Mr(n)?n:String(n))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var zr=Vr(Vr(Vr(Vr({},"r/1",{oldDisplayButtonText:"Again",memoDisplayButtonText:"Forgot",memoGrade:0}),"r/2",{oldDisplayButtonText:"Hard",memoDisplayButtonText:"Hard",memoGrade:3}),"r/3",{oldDisplayButtonText:"Good",memoDisplayButtonText:"Good",memoGrade:4}),"r/4",{oldDisplayButtonText:"Easy",memoDisplayButtonText:"Perfect",memoGrade:5}),Hr=function(t,e){return t.reduce((function(t,r){var n=Rr(r,1)[0],i=n.title;return n.children.filter((function(t){return t.string==="[[".concat(e,"]]")})).filter((function(t){return!!t.children})).forEach((function(e){var r,n=Nr(e.children);try{for(n.s();!(r=n.n()).done;){var a=r.value.string.split(" ");if(2===a.length){var o=Rr(a,2),s=o[0],l=o[1];if(s&&l){var c=Lt(s,"((","))");t[c]||(t[c]=[]),t[c].push({refUid:c,grade:zr[Lt(l,"[[","]]")].memoGrade,dateCreated:Ot(i),isRoamSrOldPracticeRecord:!0})}}}}catch(t){n.e(t)}finally{n.f()}})),t}),{})},$r=function(t){for(var e in t)t[e]=t[e].sort((function(t,e){return t.dateCreated-e.dateCreated}));return t},Ur=function(){var t=jr(Fr().mark((function t(){var e,r;return Fr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e="roam/sr/review",t.next=3,window.roamAlphaAPI.q("\n    [:find (pull ?parentPageId [\n      :node/title\n      :block/string\n      :block/children\n      {:block/children ...}])\n     :in $ ?reviewTagPageName\n     :where\n     [?pageId :node/title ?reviewTagPageName]\n     [?refIds :block/refs ?pageId]\n     [?parentPageId :block/children, ?refIds]\n    ]",e);case 3:return r=t.sent,t.abrupt("return",$r(Hr(r,e)));case 5:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}(),qr=function(t,e){var r=Or({},t);for(var n in e)n in t&&(e[n].some((function(t){return t.isRoamSrOldPracticeRecord}))?r[n]=Dr(e[n]):r[n]=[].concat(Dr(r[n]),Dr(e[n])),r[n].sort((function(t,e){return t.dateCreated-e.dateCreated})));return r},Wr=function(){var t=jr(Fr().mark((function t(e,r,n){var i,a,o,s,l,c,u,h,f,p,d,m,y,v,g,b,x,w,E,k;return Fr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:i=qr(e,r),a={},o=0,s=Object.entries(i);case 3:if(!(o<s.length)){t.next=37;break}(l=Rr(s[o],2))[0],c=l[1],u=Nr(c),t.prev=6,u.s();case 8:if((h=u.n()).done){t.next=26;break}return f=h.value,p=f.refUid,d=f.dateCreated,m=f.grade,y=f.isRoamSrOldPracticeRecord,v={refUid:p,grade:m,dataPageTitle:n,dateCreated:d,eFactor:void 0,repetitions:void 0,interval:void 0},a[p]?(g=a[p][a[p].length-1],b=g.eFactor,x=g.repetitions,w=g.interval,v=Or(Or({},v),{},{eFactor:b,repetitions:x,interval:w})):(E=Ee({dateCreated:d}),v=Or(Or({},v),E)),t.t0=Or,t.t1=Or,t.t2={},t.next=18,practice(v,!0);case 18:t.t3=t.sent,t.t4=(0,t.t1)(t.t2,t.t3),t.t5={},t.t6={grade:m,dateCreated:d,isRoamSrOldPracticeRecord:!!y},k=(0,t.t0)(t.t4,t.t5,t.t6),a[p]?a[p].push(k):a[p]=[k];case 24:t.next=8;break;case 26:t.next=31;break;case 28:t.prev=28,t.t7=t.catch(6),u.e(t.t7);case 31:return t.prev=31,u.f(),t.finish(31);case 34:o++,t.next=3;break;case 37:return t.abrupt("return",a);case 38:case"end":return t.stop()}}),t,null,[[6,28,31,34]])})));return function(e,r,n){return t.apply(this,arguments)}}();function Yr(t){return Yr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Yr(t)}function Xr(){Xr=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Yr(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Yr(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Jr(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Kr(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Jr(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=Yr(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=Yr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==Yr(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Jr(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Zr(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Qr(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return tn(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?tn(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function tn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var en=new Map;const rn=function(t){var e=t.refUid,n=Qr(r.useState({}),2),i=n[0],a=n[1],o=Qr(r.useState(!1),2),s=o[0],l=o[1],c=Qr(r.useState(0),2),u=c[0],h=c[1],f=r.useCallback((function(){e&&(function(t){en.delete(t)}(e),h((function(t){return t+1})))}),[e]);return r.useEffect((function(){if(e){var t=function(){var t,r=(t=Xr().mark((function t(){var r,n,i,o;return Xr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return l(!0),t.prev=1,console.log("üîç [BlockInfo] Ëé∑ÂèñÊúÄÊñ∞block‰ø°ÊÅØ for:",e),t.next=5,he(e);case 5:o=t.sent,console.log("üîç [BlockInfo] Ëé∑ÂèñÁªìÊûú:",{refUid:e,hasChildren:!(null===(r=o.children)||void 0===r||!r.length),hasChildrenUids:!(null===(n=o.childrenUids)||void 0===n||!n.length),childrenCount:(null===(i=o.children)||void 0===i?void 0:i.length)||0}),en.set(e,o),a(Kr(Kr({},o),{},{refUid:e})),t.next=14;break;case 11:t.prev=11,t.t0=t.catch(1),console.error("üîç [BlockInfo] Ëé∑Âèñblock‰ø°ÊÅØÂ§±Ë¥•:",t.t0);case 14:return t.prev=14,l(!1),t.finish(14);case 17:case"end":return t.stop()}}),t,null,[[1,11,14,17]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Zr(a,n,i,o,s,"next",t)}function s(t){Zr(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(){return r.apply(this,arguments)}}();t()}}),[e,u]),{blockInfo:i,isLoading:s,refreshBlockInfo:f}};var nn=void 0,an=function(t){return new Promise((function(e){return setTimeout(e,t)}))},on=__webpack_require__(3049);const sn=JSON.parse('{"v":"4.8.0","meta":{"g":"LottieFiles AE 3.1.1","a":"setya.play@gmail.com","k":"Dancing Book","d":"Dancing Book","tc":"Green Lottie"},"fr":30,"ip":0,"op":120,"w":634,"h":619,"nm":"03","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"tl1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[118,222.75,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[204.89,267.485,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[169,105.75,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[204.89,267.485,0],"to":[0,0,0],"ti":[0,0,0]},{"t":120,"s":[118,222.75,0]}],"ix":2},"a":{"a":0,"k":[17.522,17.522,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-9.539],[9.539,0],[0,9.539],[-9.539,0]],"o":[[0,9.539],[-9.539,0],[0,-9.539],[9.539,0]],"v":[[17.272,0],[0,17.272],[-17.272,0],[0,-17.272]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[17.522,17.522],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"A 3","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[187.369,210.494,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[22.5,88]],"o":[[-3,41],[0,0]],"v":[[-201.5,-83],[-295,-83]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[-76.375,87.583]],"o":[[-25.994,66.543],[0,0]],"v":[[-172.884,-14.244],[-217.595,-44.106]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[-10.507,91.391]],"o":[[-26.286,10.88],[0,0]],"v":[[-198.209,-84.649],[-292.592,-162.835]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[-84.871,73.158]],"o":[[-42.763,79.596],[0,0]],"v":[[-171.867,-13.618],[-210.432,-48.87]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[22.5,88]],"o":[[-3,41],[0,0]],"v":[[-201.5,-83],[-295,-83]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":5,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"pipi","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[112.353,123.49,0]}],"ix":2},"a":{"a":0,"k":[78.343,3.81,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-0.983],[7.53,0],[0,0.983],[-7.53,0]],"o":[[0,0.983],[-7.53,0],[0,-0.983],[7.53,0]],"v":[[13.635,0],[0,1.78],[-13.635,0],[0,-1.78]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.210503641764,0.925490196078,0.776534615311,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[142.802,2.03],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-0.983],[7.53,0],[0,0.983],[-7.53,0]],"o":[[0,0.983],[-7.53,0],[0,-0.983],[7.53,0]],"v":[[13.635,0],[0,1.78],[-13.635,0],[0,-1.78]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.210503641764,0.925490196078,0.776534615311,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[13.884,5.591],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":4,"nm":"mlt","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[117.66,146.199,0]}],"ix":2},"a":{"a":0,"k":[34.609,26.648,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"t":480,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"st","c":{"a":0,"k":[0.073356396544,0.623529411765,0.508910055722,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[34.609,26.649],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":4,"nm":"mata","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[109.492,98.752,0]}],"ix":2},"a":{"a":0,"k":[57.588,8.163,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"t":480,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[107.012,8.163],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"t":480,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[8.163,8.163],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":6,"ty":4,"nm":"DEPAN","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":0,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":30,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":60,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":90,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":120,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":150,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":180,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":210,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":240,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":270,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":300,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":330,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":360,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":390,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":420,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":450,"s":[-5]},{"t":480,"s":[0]}],"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":30,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":60,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":90,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":120,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":150,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":180,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":210,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":240,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":270,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":300,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":330,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":360,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":390,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":420,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":450,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[339.061,358.247,0]}],"ix":2},"a":{"a":0,"k":[111.43,259.241,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.113725490196,0.866666666667,0.709803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[111.839,129.928],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":7,"ty":4,"nm":"A 2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[415,309.5,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[76,-63.5]],"o":[[0,0],[0,0]],"v":[[-18,64],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[84,-49]],"o":[[0,0],[0,0]],"v":[[7.5,71.5],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[79,-65]],"o":[[0,0],[0,0]],"v":[[-9,61],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[85.5,-54.5]],"o":[[0,0],[0,0]],"v":[[4.322,65.143],[-37,201.5]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[76,-63.5]],"o":[[0,0],[0,0]],"v":[[-18,64],[-37,201.5]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":8,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":8,"ty":4,"nm":"A","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[317,309.5,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[61,-82]],"o":[[0,0],[0,0]],"v":[[-42,57.5],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[91,-45]],"o":[[0,0],[0,0]],"v":[[-10.5,81.5],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[45,-80]],"o":[[0,0],[0,0]],"v":[[-31,36],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[93,-43.5]],"o":[[0,0],[0,0]],"v":[[-14.678,75.643],[-37,201.5]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[61,-82]],"o":[[0,0],[0,0]],"v":[[-42,57.5],[-37,201.5]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":8,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":9,"ty":4,"nm":"sp2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[375.268,512.462,0],"ix":2},"a":{"a":0,"k":[0.25,7.554,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-4.034],[10.603,0],[0,4.034],[-10.602,0]],"o":[[0,4.034],[-10.602,0],[0,-4.034],[10.603,0]],"v":[[19.198,0],[0,7.304],[-19.198,0],[0,-7.304]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[19.448,7.554],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":10,"ty":4,"nm":"sp1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[276.7,512.087,0],"ix":2},"a":{"a":0,"k":[0.25,7.554,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-4.034],[10.603,0],[0,4.034],[-10.602,0]],"o":[[0,4.034],[-10.602,0],[0,-4.034],[10.603,0]],"v":[[19.198,0],[0,7.304],[-19.198,0],[0,-7.304]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[19.448,7.554],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":11,"ty":4,"nm":"tl2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[515.75,199.25,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[501.145,281.399,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[537.75,145.25,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[501.145,281.399,0],"to":[0,0,0],"ti":[0,0,0]},{"t":120,"s":[515.75,199.25,0]}],"ix":2},"a":{"a":0,"k":[19.865,19.865,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.68,-8.801],[-8.801,3.68],[3.68,8.8],[8.801,-3.679]],"o":[[3.68,8.801],[8.8,-3.679],[-3.68,-8.801],[-8.8,3.68]],"v":[[-15.935,6.662],[6.663,15.935],[15.935,-6.662],[-6.663,-15.935]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[19.865,19.865],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":12,"ty":4,"nm":"buku Outlines","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[87.445,149.649,0],"ix":2},"a":{"a":0,"k":[131.136,149.649,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[34.432,144.16],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"t":480,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[136.215,277.268],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"t":480,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[145.762,270.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"t":480,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[158.049,262.27],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[142.196,269.183],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"t":480,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[144.347,278.508],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":13,"ty":4,"nm":"buku Outlines 2","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[87.445,149.649,0],"ix":2},"a":{"a":0,"k":[131.136,149.649,0],"ix":1},"s":{"a":0,"k":[100,-100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"t":480,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[136.215,277.268],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"t":480,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[145.762,270.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"t":480,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[158.049,262.27],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[142.196,269.183],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"t":480,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[144.347,278.508],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":14,"ty":4,"nm":"Shape Layer 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[342,510,0],"ix":2},"a":{"a":0,"k":[25,200.5,0],"ix":1},"s":{"a":0,"k":[100,30,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[244,244],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[0.490195988674,0,0.180391992307,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":0,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117647059,0.898039215686,0.901960784314,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[25,200.5],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":15,"ty":4,"nm":"A 4","parent":11,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":9,"ix":10},"p":{"a":0,"k":[-84.216,186.894,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[54.728,40.444]],"o":[[9.576,38.861],[0,0]],"v":[[75.275,-181.115],[-10.22,-128.976]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[22.5,88]],"o":[[18.587,75.802],[0,0]],"v":[[76.863,-182.172],[11.005,-160.722]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[75.196,9.865]],"o":[[15.193,45.565],[0,0]],"v":[[77.121,-180.648],[-5.782,-88.168]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[22.5,88]],"o":[[22.937,66.507],[0,0]],"v":[[75.212,-181.404],[12.726,-149.858]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[54.728,40.444]],"o":[[9.576,38.861],[0,0]],"v":[[75.275,-181.115],[-10.22,-128.976]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":5,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0}],"markers":[]}');var ln,cn,un,hn=["className","wrapperClassName"];function fn(){return fn=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},fn.apply(this,arguments)}const pn=Dt((function(t){var e=t.className,r=t.wrapperClassName,n=function(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}(t,hn);return React.createElement(i.Tooltip,fn({className:r,popoverClassName:e},n))}))(ln||(cn=["\n  &.bp3-tooltip .bp3-popover-content {\n    font-size: 12px;\n    padding: 2px 5px;\n  }\n"],un||(un=cn.slice(0)),ln=Object.freeze(Object.defineProperties(cn,{raw:{value:Object.freeze(un)}})))),dn="@media (max-width: 420px)",mn="@media (min-width: 1024px)",yn="@media (min-width: 1280px)";var vn=function(t){!function(t){(arguments.length>1&&void 0!==arguments[1]?arguments[1]:[]).forEach((function(e){return t.dispatchEvent(new MouseEvent(e,{view:window,bubbles:!0,cancelable:!0,buttons:1}))}))}(t,["mouseenter","mouseover","mousedown","click","mouseup"])};function gn(t){return gn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},gn(t)}function bn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function xn(){xn=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==gn(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(gn(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function wn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function En(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?wn(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=gn(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=gn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==gn(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):wn(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function kn(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Sn(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){kn(a,n,i,o,s,"next",t)}function s(t){kn(a,n,i,o,s,"throw",t)}o(void 0)}))}}function Pn(t){return Array.from(t.childNodes).filter((function(t){return 3===t.nodeType&&t.textContent.trim().length>1}))}function _n(t,e){for(var r=Pn(t),n=0;n<r.length;){var i=r[n],a=i.textContent,o=e.exec(a);if(o){var s=o[0],l=o.index,c=l+s.length,u=a.slice(0,l),h=a.slice(c),f=document.createElement("span");f.classList.add("roam-memo-cloze"),f.textContent=s;var p=document.createTextNode(u),d=document.createTextNode(h);i.parentNode.insertBefore(p,i),i.parentNode.insertBefore(f,i),i.parentNode.insertBefore(d,i),i.parentNode.removeChild(i),r=Pn(t)}else n++}}const Cn=function(t){var e,n,i=t.renderedBlockElm,a=t.hasClozeCallback,o=(e=r.useState({default:void 0,custom:void 0}),n=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(e,n)||function(t,e){if(t){if("string"==typeof t)return bn(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?bn(t,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[0],l=o[1];r.useEffect((function(){Sn(xn().mark((function t(){var e;return xn().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(i){t.next=2;break}return t.abrupt("return");case 2:e=i.querySelectorAll(".rm-highlight"),l((function(){return En(En({},s),{},{default:e.length})}));case 4:case"end":return t.stop()}}),t)})))()}),[i]),function(t){var e=t.renderedBlockElm,n=t.setClozeCounts;r.useEffect((function(){Sn(xn().mark((function t(){var r,i,a,o;return xn().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return");case 2:if(r=e.querySelector(".rm-block-main .dont-unfocus-block span")){t.next=5;break}return t.abrupt("return");case 5:i=new RegExp("".concat("{","(.+?)").concat("}"),"gs"),a=new RegExp(i,"gs"),_n(r,a),o=e.querySelectorAll(".roam-memo-cloze"),n((function(t){return En(En({},t),{},{custom:o.length})}));case 12:case"end":return t.stop()}}),t)})))()}),[e])}({renderedBlockElm:i,setClozeCounts:l}),r.useEffect((function(){if(!Object.values(s).every((function(t){return void 0===t}))){var t=Object.values(s).reduce((function(t,e){return t+e}),0);a(t>0)}}),[s])};function An(t){return An="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},An(t)}var Tn,Mn,Dn;function Ln(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function On(){On=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==An(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(An(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Fn(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function In(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return jn(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?jn(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Nn=Dt.div(Tn||(Tn=Ln(["\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1000;\n  background: rgba(255, 255, 255, 0.9);\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #666;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n"]))),Rn=Dt.div(Mn||(Mn=Ln(["\n  // To align bullet on the left + ref count on the right correctly\n  position: relative;\n  left: -14px;\n  width: calc(100% + 19px);\n  opacity: ",";\n  transition: opacity 0.2s ease-in-out;\n\n  & .rm-block-children {\n    /* üöÄ FLASH FIX V3: ‰ΩøÁî® visibility + opacity ‰ª£Êõø displayÔºåÈÅøÂÖçÈó™ÁÉÅ */\n    visibility: ",";\n    opacity: ",";\n    height: ",";\n    overflow: ",";\n    transition: opacity 0.15s ease-in-out, height 0.15s ease-in-out;\n    display: flex; /* ‰øùÊåÅ flex Â∏ÉÂ±ÄÔºå‰∏çÊîπÂèò display */\n  }\n\n  & .rm-block-separator {\n    min-width: unset; // Keeping roam block from expanding 100\n  }\n\n  & .rm-highlight,\n  .roam-memo-cloze {\n    background-color: ",";\n    color: ",";\n    overflow: hidden;\n    border-radius: 2px;\n    padding: 0;\n    margin: 0;\n    /* üöÄ FLASH FIX V3: Ê∑ªÂä†Âπ≥ÊªëËøáÊ∏°ÊïàÊûú */\n    transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;\n  }\n"])),(function(t){return t.isLoading?.5:1}),(function(t){return t.showAnswers?"visible":"hidden"}),(function(t){return t.showAnswers?1:0}),(function(t){return t.showAnswers?"auto":"0"}),(function(t){return t.showAnswers?"visible":"hidden"}),(function(t){return t.showAnswers?"transparent":"#e1e3e5"}),(function(t){return t.showAnswers?"inherit":"transparent"})),Bn=function(t){var e=t.breadcrumbs,n=e.map((function(t,r){return{current:r===e.length-1,text:t.title||t.string}}));return r.createElement(Gn,{className:"rm-zoom zoom-path-view"},n.map((function(t,e){return r.createElement("div",{key:e,className:"rm-zoom-item"},r.createElement("span",{className:"rm-zoom-item-content"},t.text)," ",e!==n.length-1&&r.createElement(i.Icon,{icon:"chevron-right"}))})))},Gn=Dt.div(Dn||(Dn=Ln(["\n  opacity: 0.7;\n  margin-left: 8px !important;\n  margin-top: -4px !important;\n\n  &.rm-zoom-item {\n    cursor: auto !important;\n  }\n"])));const Vn=function(t){var e=t.refUid,n=t.showAnswers,i=t.setHasCloze,a=t.breadcrumbs,o=t.showBreadcrumbs,s=r.useRef(null),l=In(r.useState(null),2),c=l[0],u=l[1],h=In(r.useState(!1),2),f=h[0],p=h[1];Cn({renderedBlockElm:c,hasClozeCallback:i});var d=In(r.useState(0),2),m=d[0],y=d[1],v=r.useRef(e),g=r.useRef(null);r.useEffect((function(){v.current=e}),[e]);var b=r.useRef(null),x=r.useCallback((function(){y((function(t){return t+1}))}),[]);return r.useEffect((function(){var t=function(){var t,e=(t=On().mark((function t(){var e,r,n,i;return On().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=v.current,s.current){t.next=3;break}return t.abrupt("return");case 3:return p(!0),t.prev=4,t.next=7,window.roamAlphaAPI.ui.components.unmountNode({el:s.current});case 7:return t.next=9,window.roamAlphaAPI.ui.components.renderBlock({uid:e,el:s.current});case 9:if(r=s.current.querySelector(".rm-block"),u(r),!(null==r?void 0:r.classList.contains("rm-block--closed"))){t.next=18;break}return n=s.current.querySelector(".block-expand .rm-caret"),vn(n),t.next=17,an(50);case 17:vn(n);case 18:g.current&&g.current.disconnect(),i=new MutationObserver((function(t){t.forEach((function(t){"childList"===t.type&&t.addedNodes.length>0&&t.addedNodes.forEach((function(t){if(t instanceof HTMLElement){var e=t.querySelectorAll("textarea");e.length>0&&e.forEach((function(t){t.removeEventListener("blur",x),t.addEventListener("blur",x)}))}}))}))})),i.observe(s.current,{childList:!0,subtree:!0}),g.current=i;case 22:return t.prev=22,p(!1),t.finish(22);case 25:case"end":return t.stop()}}),t,null,[[4,,22,25]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Fn(a,n,i,o,s,"next",t)}function s(t){Fn(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(){return e.apply(this,arguments)}}(),e=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300,r=new Map;return function(n){for(var i=arguments.length,a=new Array(i>1?i-1:0),o=1;o<i;o++)a[o-1]=arguments[o];r.has(n)&&clearTimeout(r.get(n));var s=setTimeout((function(){r.delete(n),t.apply(nn,a)}),e);r.set(n,s)}}(t,50);return b.current=function(){return e(v.current)},function(){b.current=null,g.current&&(g.current.disconnect(),g.current=null)}}),[x]),r.useEffect((function(){b.current&&b.current()}),[e,m]),r.createElement("div",null,a&&o&&r.createElement(Bn,{breadcrumbs:a}),f&&r.createElement(Nn,null,"Âä†ËΩΩ‰∏≠..."),r.createElement(Rn,{ref:s,showAnswers:n,isLoading:f}))};var zn,Hn=((zn=Hn||{})[zn.New=0]="New",zn[zn.Learning=1]="Learning",zn[zn.Review=2]="Review",zn[zn.Relearning=3]="Relearning",zn),$n=(t=>(t[t.Manual=0]="Manual",t[t.Again=1]="Again",t[t.Hard=2]="Hard",t[t.Good=3]="Good",t[t.Easy=4]="Easy",t))($n||{});class Un{static card(t){return{...t,state:Un.state(t.state),due:Un.time(t.due),last_review:t.last_review?Un.time(t.last_review):void 0}}static rating(t){if("string"==typeof t){const e=t.charAt(0).toUpperCase(),r=t.slice(1).toLowerCase(),n=$n[`${e}${r}`];if(void 0===n)throw new Error(`Invalid rating:[${t}]`);return n}if("number"==typeof t)return t;throw new Error(`Invalid rating:[${t}]`)}static state(t){if("string"==typeof t){const e=t.charAt(0).toUpperCase(),r=t.slice(1).toLowerCase(),n=Hn[`${e}${r}`];if(void 0===n)throw new Error(`Invalid state:[${t}]`);return n}if("number"==typeof t)return t;throw new Error(`Invalid state:[${t}]`)}static time(t){if("object"==typeof t&&t instanceof Date)return t;if("string"==typeof t){const e=Date.parse(t);if(isNaN(e))throw new Error(`Invalid date:[${t}]`);return new Date(e)}if("number"==typeof t)return new Date(t);throw new Error(`Invalid date:[${t}]`)}static review_log(t){return{...t,due:Un.time(t.due),rating:Un.rating(t.rating),state:Un.state(t.state),review:Un.time(t.review)}}}function qn(t,e,r){return new Date(r?Un.time(t).getTime()+24*e*60*60*1e3:Un.time(t).getTime()+60*e*1e3)}function Wn(t,e,r){if(!t||!e)throw new Error("Invalid date");const n=Un.time(t).getTime()-Un.time(e).getTime();let i=0;switch(r){case"days":i=Math.floor(n/864e5);break;case"minutes":i=Math.floor(n/6e4)}return i}function Yn(t){return t<10?`0${t}`:`${t}`}Date.prototype.scheduler=function(t,e){return qn(this,t,e)},Date.prototype.diff=function(t,e){return Wn(this,t,e)},Date.prototype.format=function(){return function(t){const e=Un.time(t),r=e.getFullYear(),n=e.getMonth()+1,i=e.getDate(),a=e.getHours(),o=e.getMinutes(),s=e.getSeconds();return`${r}-${Yn(n)}-${Yn(i)} ${Yn(a)}:${Yn(o)}:${Yn(s)}`}(this)},Date.prototype.dueFormat=function(t,e,r){return function(t,e,r,n=Jn){t=Un.time(t),e=Un.time(e),n.length!==Jn.length&&(n=Jn);let i,a=t.getTime()-e.getTime();for(a/=1e3,i=0;i<Xn.length&&!(a<Xn[i]);i++)a/=Xn[i];return`${Math.floor(a)}${r?n[i]:""}`}(this,t,e,r)};const Xn=[60,60,24,31,12],Jn=["second","min","hour","day","month","year"],Kn=Object.freeze([$n.Again,$n.Hard,$n.Good,$n.Easy]),Zn=[{start:2.5,end:7,factor:.15},{start:7,end:20,factor:.1},{start:20,end:1/0,factor:.05}];function Qn(t,e,r){return Math.min(Math.max(t,e),r)}const ti=Object.freeze(["1m","10m"]),ei=Object.freeze(["10m"]),ri=.001,ni=100,ii=Object.freeze([.212,1.2931,2.3065,8.2956,6.4133,.8334,3.0194,.001,1.8722,.1666,.796,1.4835,.0614,.2629,1.6483,.6014,1.8729,.5425,.0912,.0658,.1542]),ai=(t,e)=>{let r=2;return Math.max(0,e)>1&&(r=Qn(+(-(Math.log(t[11])+Math.log(Math.pow(2,t[13])-1)+.3*t[14])/e).toFixed(8),.01,2)),(t=>[[ri,ni],[ri,ni],[ri,ni],[ri,ni],[1,10],[.001,4],[.001,4],[.001,.75],[0,4.5],[0,.8],[.001,3.5],[.001,5],[.001,.25],[.001,.9],[0,4],[0,1],[1,6],[0,t],[0,t],[0,.8],[.1,.8]])(r).map((([e,r],n)=>Qn(t[n],e,r)))},oi=t=>{if(void 0===t)return[...ii];switch(t.length){case 21:return[...t];case 19:return console.debug("[FSRS-6]auto fill w from 19 to 21 length"),[...t,0,.5];case 17:{const e=[...t];return e[4]=+(2*e[5]+e[4]).toFixed(8),e[5]=+(Math.log(3*e[5]+1)/3).toFixed(8),e[6]=+(e[6]+.5).toFixed(8),console.debug("[FSRS-6]auto fill w from 17 to 21 length"),e.concat([0,0,0,.5])}default:return console.warn("[FSRS]Invalid parameters length, using default parameters"),[...ii]}},si=t=>{const e=Array.isArray(t?.learning_steps)?t.learning_steps:ti,r=Array.isArray(t?.relearning_steps)?t.relearning_steps:ei,n=ai(oi(t?.w),r.length);return{request_retention:t?.request_retention||.9,maximum_interval:t?.maximum_interval||36500,w:n,enable_fuzz:t?.enable_fuzz??!1,enable_short_term:t?.enable_short_term??!0,learning_steps:e,relearning_steps:r}};function li(t,e){const r={due:t?Un.time(t):new Date,stability:0,difficulty:0,elapsed_days:0,scheduled_days:0,reps:0,lapses:0,learning_steps:0,state:Hn.New,last_review:void 0};return e&&"function"==typeof e?e(r):r}class ci{c;s0;s1;s2;constructor(t){const e=function(){let t=4022871197;return function(e){e=String(e);for(let r=0;r<e.length;r++){t+=e.charCodeAt(r);let n=.02519603282416938*t;t=n>>>0,n-=t,n*=t,t=n>>>0,n-=t,t+=4294967296*n}return 2.3283064365386963e-10*(t>>>0)}}();this.c=1,this.s0=e(" "),this.s1=e(" "),this.s2=e(" "),null==t&&(t=+new Date),this.s0-=e(t),this.s0<0&&(this.s0+=1),this.s1-=e(t),this.s1<0&&(this.s1+=1),this.s2-=e(t),this.s2<0&&(this.s2+=1)}next(){const t=2091639*this.s0+2.3283064365386963e-10*this.c;return this.s0=this.s1,this.s1=this.s2,this.s2=t-(this.c=0|t),this.s2}set state(t){this.c=t.c,this.s0=t.s0,this.s1=t.s1,this.s2=t.s2}get state(){return{c:this.c,s0:this.s0,s1:this.s1,s2:this.s2}}}const ui=t=>{const e="number"==typeof t?-t:-t[20];return{decay:e,factor:+(Math.exp(Math.pow(e,-1)*Math.log(.9))-1).toFixed(8)}};function hi(t,e,r){const{decay:n,factor:i}=ui(t);return+Math.pow(1+i*e/r,n).toFixed(8)}class fi{param;intervalModifier;_seed;constructor(t){this.param=new Proxy(si(t),this.params_handler_proxy()),this.intervalModifier=this.calculate_interval_modifier(this.param.request_retention),this.forgetting_curve=hi.bind(this,this.param.w)}get interval_modifier(){return this.intervalModifier}set seed(t){this._seed=t}calculate_interval_modifier(t){if(t<=0||t>1)throw new Error("Requested retention rate should be in the range (0,1]");const{decay:e,factor:r}=ui(this.param.w);return+((Math.pow(t,1/e)-1)/r).toFixed(8)}get parameters(){return this.param}set parameters(t){this.update_parameters(t)}params_handler_proxy(){const t=this;return{set:function(e,r,n){return"request_retention"===r&&Number.isFinite(n)?t.intervalModifier=t.calculate_interval_modifier(Number(n)):"w"===r&&(n=ai(oi(n),e.relearning_steps.length),t.forgetting_curve=hi.bind(this,n),t.intervalModifier=t.calculate_interval_modifier(Number(e.request_retention))),Reflect.set(e,r,n),!0}}}update_parameters(t){const e=si(t);for(const t in e)if(t in this.param){const r=t;this.param[r]=e[r]}}init_stability(t){return Math.max(this.param.w[t-1],.1)}init_difficulty(t){return+(this.param.w[4]-Math.exp((t-1)*this.param.w[5])+1).toFixed(8)}apply_fuzz(t,e){if(!this.param.enable_fuzz||t<2.5)return Math.round(t);const r=function(t){const e=new ci(t),r=()=>e.next();return r.int32=()=>4294967296*e.next()|0,r.double=()=>r()+11102230246251565e-32*(2097152*r()|0),r.state=()=>e.state,r.importState=t=>(e.state=t,r),r}(this._seed)(),{min_ivl:n,max_ivl:i}=function(t,e,r){let n=1;for(const e of Zn)n+=e.factor*Math.max(Math.min(t,e.end)-e.start,0);t=Math.min(t,r);let i=Math.max(2,Math.round(t-n));const a=Math.min(Math.round(t+n),r);return t>e&&(i=Math.max(i,e+1)),i=Math.min(i,a),{min_ivl:i,max_ivl:a}}(t,e,this.param.maximum_interval);return Math.floor(r*(i-n+1)+n)}next_interval(t,e){const r=Math.min(Math.max(1,Math.round(t*this.intervalModifier)),this.param.maximum_interval);return this.apply_fuzz(r,e)}linear_damping(t,e){return+(t*(10-e)/9).toFixed(8)}next_difficulty(t,e){const r=-this.param.w[6]*(e-3),n=t+this.linear_damping(r,t);return Qn(this.mean_reversion(this.init_difficulty($n.Easy),n),1,10)}mean_reversion(t,e){return+(this.param.w[7]*t+(1-this.param.w[7])*e).toFixed(8)}next_recall_stability(t,e,r,n){const i=$n.Hard===n?this.param.w[15]:1,a=$n.Easy===n?this.param.w[16]:1;return+Qn(e*(1+Math.exp(this.param.w[8])*(11-t)*Math.pow(e,-this.param.w[9])*(Math.exp((1-r)*this.param.w[10])-1)*i*a),ri,36500).toFixed(8)}next_forget_stability(t,e,r){return+Qn(this.param.w[11]*Math.pow(t,-this.param.w[12])*(Math.pow(e+1,this.param.w[13])-1)*Math.exp((1-r)*this.param.w[14]),ri,36500).toFixed(8)}next_short_term_stability(t,e){const r=Math.pow(t,-this.param.w[19])*Math.exp(this.param.w[17]*(e-3+this.param.w[18]));return+Qn(t*(e>=3?Math.max(r,1):r),ri,36500).toFixed(8)}forgetting_curve;next_state(t,e,r){const{difficulty:n,stability:i}=t??{difficulty:0,stability:0};if(e<0)throw new Error(`Invalid delta_t "${e}"`);if(r<0||r>4)throw new Error(`Invalid grade "${r}"`);if(0===n&&0===i)return{difficulty:Qn(this.init_difficulty(r),1,10),stability:this.init_stability(r)};if(0===r)return{difficulty:n,stability:i};if(n<1||i<ri)throw new Error(`Invalid memory state { difficulty: ${n}, stability: ${i} }`);const a=this.forgetting_curve(e,i),o=this.next_recall_stability(n,i,a,r),s=this.next_forget_stability(n,i,a),l=this.next_short_term_stability(i,r);let c=o;if(1===r){let[t,e]=[0,0];this.param.enable_short_term&&(t=this.param.w[17],e=this.param.w[18]),c=Qn(+(i/Math.exp(t*e)).toFixed(8),ri,s)}return 0===e&&this.param.enable_short_term&&(c=l),{difficulty:this.next_difficulty(n,r),stability:c}}}function pi(){return`${this.review_time.getTime()}_${this.current.reps}_${this.current.difficulty*this.current.stability}`}const di=t=>{const e=t.slice(-1),r=parseInt(t.slice(0,-1),10);if(isNaN(r)||!Number.isFinite(r)||r<0)throw new Error(`Invalid step value: ${t}`);switch(e){case"m":return r;case"h":return 60*r;case"d":return 1440*r;default:throw new Error(`Invalid step unit: ${t}, expected m/h/d`)}},mi=(t,e,r)=>{const n=e===Hn.Relearning||e===Hn.Review?t.relearning_steps:t.learning_steps,i=n.length;if(0===i||r>=i)return{};const a=n[0],o=di,s=()=>{if(1===i)return Math.round(1.5*o(a));const t=n[1];return Math.round((o(a)+o(t))/2)},l=t=>t<0||t>=i?null:n[t],c={},u=l(Math.max(0,r));if(e===Hn.Review)return c[$n.Again]={scheduled_minutes:o(u),next_step:0},c;{c[$n.Again]={scheduled_minutes:o(a),next_step:0},c[$n.Hard]={scheduled_minutes:s(),next_step:r};const t=l(r+1);if(t){const e=(t=>o(t))(t);e&&(c[$n.Good]={scheduled_minutes:Math.round(e),next_step:r+1})}}return c};var yi=(t=>(t.SCHEDULER="Scheduler",t.LEARNING_STEPS="LearningSteps",t.SEED="Seed",t))(yi||{});class vi{last;current;review_time;next=new Map;algorithm;strategies;elapsed_days=0;constructor(t,e,r,n){this.algorithm=r,this.last=Un.card(t),this.current=Un.card(t),this.review_time=Un.time(e),this.strategies=n,this.init()}checkGrade(t){if(!Number.isFinite(t)||t<0||t>4)throw new Error(`Invalid grade "${t}",expected 1-4`)}init(){const{state:t,last_review:e}=this.current;let r=0;t!==Hn.New&&e&&(r=function(t,e){const r=Date.UTC(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n=Date.UTC(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate());return Math.floor((n-r)/864e5)}(e,this.review_time)),this.current.last_review=this.review_time,this.elapsed_days=r,this.current.elapsed_days=r,this.current.reps+=1;let n=pi;if(this.strategies){const t=this.strategies.get(yi.SEED);t&&(n=t)}this.algorithm.seed=n.call(this)}preview(){return{[$n.Again]:this.review($n.Again),[$n.Hard]:this.review($n.Hard),[$n.Good]:this.review($n.Good),[$n.Easy]:this.review($n.Easy),[Symbol.iterator]:this.previewIterator.bind(this)}}*previewIterator(){for(const t of Kn)yield this.review(t)}review(t){const{state:e}=this.last;let r;switch(this.checkGrade(t),e){case Hn.New:r=this.newState(t);break;case Hn.Learning:case Hn.Relearning:r=this.learningState(t);break;case Hn.Review:r=this.reviewState(t)}return r}buildLog(t){const{last_review:e,due:r,elapsed_days:n}=this.last;return{rating:t,state:this.current.state,due:e||r,stability:this.current.stability,difficulty:this.current.difficulty,elapsed_days:this.elapsed_days,last_elapsed_days:n,scheduled_days:this.current.scheduled_days,learning_steps:this.current.learning_steps,review:this.review_time}}}class gi extends vi{learningStepsStrategy;constructor(t,e,r,n){super(t,e,r,n);let i=mi;if(this.strategies){const t=this.strategies.get(yi.LEARNING_STEPS);t&&(i=t)}this.learningStepsStrategy=i}getLearningInfo(t,e){const r=this.algorithm.parameters;t.learning_steps=t.learning_steps||0;const n=this.learningStepsStrategy(r,t.state,this.current.state===Hn.Learning?t.learning_steps+1:t.learning_steps);return{scheduled_minutes:Math.max(0,n[e]?.scheduled_minutes??0),next_steps:Math.max(0,n[e]?.next_step??0)}}applyLearningSteps(t,e,r){const{scheduled_minutes:n,next_steps:i}=this.getLearningInfo(this.current,e);if(n>0&&n<1440)t.learning_steps=i,t.scheduled_days=0,t.state=r,t.due=qn(this.review_time,Math.round(n),!1);else if(t.state=Hn.Review,n>=1440)t.learning_steps=i,t.due=qn(this.review_time,Math.round(n),!1),t.scheduled_days=Math.floor(n/1440);else{t.learning_steps=0;const e=this.algorithm.next_interval(t.stability,this.elapsed_days);t.scheduled_days=e,t.due=qn(this.review_time,e,!0)}}newState(t){const e=this.next.get(t);if(e)return e;const r=Un.card(this.current);r.difficulty=Qn(this.algorithm.init_difficulty(t),1,10),r.stability=this.algorithm.init_stability(t),this.applyLearningSteps(r,t,Hn.Learning);const n={card:r,log:this.buildLog(t)};return this.next.set(t,n),n}learningState(t){const e=this.next.get(t);if(e)return e;const{state:r,difficulty:n,stability:i}=this.last,a=Un.card(this.current);a.difficulty=this.algorithm.next_difficulty(n,t),a.stability=this.algorithm.next_short_term_stability(i,t),this.applyLearningSteps(a,t,r);const o={card:a,log:this.buildLog(t)};return this.next.set(t,o),o}reviewState(t){const e=this.next.get(t);if(e)return e;const r=this.elapsed_days,{difficulty:n,stability:i}=this.last,a=this.algorithm.forgetting_curve(r,i),o=Un.card(this.current),s=Un.card(this.current),l=Un.card(this.current),c=Un.card(this.current);this.next_ds(o,s,l,c,n,i,a),this.next_interval(s,l,c,r),this.next_state(s,l,c),this.applyLearningSteps(o,$n.Again,Hn.Relearning),o.lapses+=1;const u={card:o,log:this.buildLog($n.Again)},h={card:s,log:super.buildLog($n.Hard)},f={card:l,log:super.buildLog($n.Good)},p={card:c,log:super.buildLog($n.Easy)};return this.next.set($n.Again,u),this.next.set($n.Hard,h),this.next.set($n.Good,f),this.next.set($n.Easy,p),this.next.get(t)}next_ds(t,e,r,n,i,a,o){t.difficulty=this.algorithm.next_difficulty(i,$n.Again);const s=a/Math.exp(this.algorithm.parameters.w[17]*this.algorithm.parameters.w[18]),l=this.algorithm.next_forget_stability(i,a,o);t.stability=Qn(+s.toFixed(8),ri,l),e.difficulty=this.algorithm.next_difficulty(i,$n.Hard),e.stability=this.algorithm.next_recall_stability(i,a,o,$n.Hard),r.difficulty=this.algorithm.next_difficulty(i,$n.Good),r.stability=this.algorithm.next_recall_stability(i,a,o,$n.Good),n.difficulty=this.algorithm.next_difficulty(i,$n.Easy),n.stability=this.algorithm.next_recall_stability(i,a,o,$n.Easy)}next_interval(t,e,r,n){let i,a;i=this.algorithm.next_interval(t.stability,n),a=this.algorithm.next_interval(e.stability,n),i=Math.min(i,a),a=Math.max(a,i+1);const o=Math.max(this.algorithm.next_interval(r.stability,n),a+1);t.scheduled_days=i,t.due=qn(this.review_time,i,!0),e.scheduled_days=a,e.due=qn(this.review_time,a,!0),r.scheduled_days=o,r.due=qn(this.review_time,o,!0)}next_state(t,e,r){t.state=Hn.Review,t.learning_steps=0,e.state=Hn.Review,e.learning_steps=0,r.state=Hn.Review,r.learning_steps=0}}class bi extends vi{newState(t){const e=this.next.get(t);if(e)return e;this.current.scheduled_days=0,this.current.elapsed_days=0;const r=Un.card(this.current),n=Un.card(this.current),i=Un.card(this.current),a=Un.card(this.current);return this.init_ds(r,n,i,a),this.next_interval(r,n,i,a,0),this.next_state(r,n,i,a),this.update_next(r,n,i,a),this.next.get(t)}init_ds(t,e,r,n){t.difficulty=Qn(this.algorithm.init_difficulty($n.Again),1,10),t.stability=this.algorithm.init_stability($n.Again),e.difficulty=Qn(this.algorithm.init_difficulty($n.Hard),1,10),e.stability=this.algorithm.init_stability($n.Hard),r.difficulty=Qn(this.algorithm.init_difficulty($n.Good),1,10),r.stability=this.algorithm.init_stability($n.Good),n.difficulty=Qn(this.algorithm.init_difficulty($n.Easy),1,10),n.stability=this.algorithm.init_stability($n.Easy)}learningState(t){return this.reviewState(t)}reviewState(t){const e=this.next.get(t);if(e)return e;const r=this.elapsed_days,{difficulty:n,stability:i}=this.last,a=this.algorithm.forgetting_curve(r,i),o=Un.card(this.current),s=Un.card(this.current),l=Un.card(this.current),c=Un.card(this.current);return this.next_ds(o,s,l,c,n,i,a),this.next_interval(o,s,l,c,r),this.next_state(o,s,l,c),o.lapses+=1,this.update_next(o,s,l,c),this.next.get(t)}next_ds(t,e,r,n,i,a,o){t.difficulty=this.algorithm.next_difficulty(i,$n.Again);const s=this.algorithm.next_forget_stability(i,a,o);t.stability=Qn(a,ri,s),e.difficulty=this.algorithm.next_difficulty(i,$n.Hard),e.stability=this.algorithm.next_recall_stability(i,a,o,$n.Hard),r.difficulty=this.algorithm.next_difficulty(i,$n.Good),r.stability=this.algorithm.next_recall_stability(i,a,o,$n.Good),n.difficulty=this.algorithm.next_difficulty(i,$n.Easy),n.stability=this.algorithm.next_recall_stability(i,a,o,$n.Easy)}next_interval(t,e,r,n,i){let a,o,s,l;a=this.algorithm.next_interval(t.stability,i),o=this.algorithm.next_interval(e.stability,i),s=this.algorithm.next_interval(r.stability,i),l=this.algorithm.next_interval(n.stability,i),a=Math.min(a,o),o=Math.max(o,a+1),s=Math.max(s,o+1),l=Math.max(l,s+1),t.scheduled_days=a,t.due=qn(this.review_time,a,!0),e.scheduled_days=o,e.due=qn(this.review_time,o,!0),r.scheduled_days=s,r.due=qn(this.review_time,s,!0),n.scheduled_days=l,n.due=qn(this.review_time,l,!0)}next_state(t,e,r,n){t.state=Hn.Review,t.learning_steps=0,e.state=Hn.Review,e.learning_steps=0,r.state=Hn.Review,r.learning_steps=0,n.state=Hn.Review,n.learning_steps=0}update_next(t,e,r,n){const i={card:t,log:this.buildLog($n.Again)},a={card:e,log:super.buildLog($n.Hard)},o={card:r,log:super.buildLog($n.Good)},s={card:n,log:super.buildLog($n.Easy)};this.next.set($n.Again,i),this.next.set($n.Hard,a),this.next.set($n.Good,o),this.next.set($n.Easy,s)}}class xi{fsrs;constructor(t){this.fsrs=t}replay(t,e,r){return this.fsrs.next(t,e,r)}handleManualRating(t,e,r,n,i,a,o){if(typeof e>"u")throw new Error("reschedule: state is required for manual rating");let s,l;if(e===Hn.New)s={rating:$n.Manual,state:e,due:o??r,stability:t.stability,difficulty:t.difficulty,elapsed_days:n,last_elapsed_days:t.elapsed_days,scheduled_days:t.scheduled_days,learning_steps:t.learning_steps,review:r},l=li(r),l.last_review=r;else{if(typeof o>"u")throw new Error("reschedule: due is required for manual rating");const c=Wn(o,r,"days");s={rating:$n.Manual,state:t.state,due:t.last_review||t.due,stability:t.stability,difficulty:t.difficulty,elapsed_days:n,last_elapsed_days:t.elapsed_days,scheduled_days:t.scheduled_days,learning_steps:t.learning_steps,review:r},l={...t,state:e,due:o,last_review:r,stability:i||t.stability,difficulty:a||t.difficulty,elapsed_days:n,scheduled_days:c,reps:t.reps+1}}return{card:l,log:s}}reschedule(t,e){const r=[];let n=li(t.due);for(const t of e){let e;if(t.review=Un.time(t.review),t.rating===$n.Manual){let r=0;n.state!==Hn.New&&n.last_review&&(r=Wn(t.review,n.last_review,"days")),e=this.handleManualRating(n,t.state,t.review,r,t.stability,t.difficulty,t.due?Un.time(t.due):void 0)}else e=this.replay(n,t.review,t.rating);r.push(e),n=e.card}return r}calculateManualRecord(t,e,r,n){if(!r)return null;const{card:i,log:a}=r,o=Un.card(t);return o.due.getTime()===i.due.getTime()?null:(o.scheduled_days=Wn(i.due,o.due,"days"),this.handleManualRating(o,i.state,Un.time(e),a.elapsed_days,n?i.stability:void 0,n?i.difficulty:void 0,i.due))}}class wi extends fi{strategyHandler=new Map;Scheduler;constructor(t){super(t);const{enable_short_term:e}=this.parameters;this.Scheduler=e?gi:bi}params_handler_proxy(){const t=this;return{set:function(e,r,n){return"request_retention"===r&&Number.isFinite(n)?t.intervalModifier=t.calculate_interval_modifier(Number(n)):"enable_short_term"===r?t.Scheduler=!0===n?gi:bi:"w"===r&&(n=ai(oi(n),e.relearning_steps.length),t.forgetting_curve=hi.bind(this,n),t.intervalModifier=t.calculate_interval_modifier(Number(e.request_retention))),Reflect.set(e,r,n),!0}}}useStrategy(t,e){return this.strategyHandler.set(t,e),this}clearStrategy(t){return t?this.strategyHandler.delete(t):this.strategyHandler.clear(),this}getScheduler(t,e){return new(this.strategyHandler.get(yi.SCHEDULER)||this.Scheduler)(t,e,this,this.strategyHandler)}repeat(t,e,r){const n=this.getScheduler(t,e).preview();return r&&"function"==typeof r?r(n):n}next(t,e,r,n){const i=this.getScheduler(t,e),a=Un.rating(r);if(a===$n.Manual)throw new Error("Cannot review a manual rating");const o=i.review(a);return n&&"function"==typeof n?n(o):o}get_retrievability(t,e,r=!0){const n=Un.card(t);e=e?Un.time(e):new Date;const i=n.state!==Hn.New?Math.max(Wn(e,n.last_review,"days"),0):0,a=n.state!==Hn.New?this.forgetting_curve(i,+n.stability.toFixed(8)):0;return r?`${(100*a).toFixed(2)}%`:a}rollback(t,e,r){const n=Un.card(t),i=Un.review_log(e);if(i.rating===$n.Manual)throw new Error("Cannot rollback a manual rating");let a,o,s;switch(i.state){case Hn.New:a=i.due,o=void 0,s=0;break;case Hn.Learning:case Hn.Relearning:case Hn.Review:a=i.review,o=i.due,s=n.lapses-(i.rating===$n.Again&&i.state===Hn.Review?1:0)}const l={...n,due:a,stability:i.stability,difficulty:i.difficulty,elapsed_days:i.last_elapsed_days,scheduled_days:i.scheduled_days,reps:Math.max(0,n.reps-1),lapses:Math.max(0,s),learning_steps:i.learning_steps,state:i.state,last_review:o};return r&&"function"==typeof r?r(l):l}forget(t,e,r=!1,n){const i=Un.card(t);e=Un.time(e);const a=i.state===Hn.New?0:Wn(e,i.due,"days"),o={rating:$n.Manual,state:i.state,due:i.due,stability:i.stability,difficulty:i.difficulty,elapsed_days:0,last_elapsed_days:i.elapsed_days,scheduled_days:a,learning_steps:i.learning_steps,review:e},s={card:{...i,due:e,stability:0,difficulty:0,elapsed_days:0,scheduled_days:0,reps:r?0:i.reps,lapses:r?0:i.lapses,learning_steps:0,state:Hn.New,last_review:i.last_review},log:o};return n&&"function"==typeof n?n(s):s}reschedule(t,e=[],r={}){const{recordLogHandler:n,reviewsOrderBy:i,skipManual:a=!0,now:o=new Date,update_memory_state:s=!1}=r;i&&"function"==typeof i&&e.sort(i),a&&(e=e.filter((t=>t.rating!==$n.Manual)));const l=new xi(this),c=l.reschedule(r.first_card||li(),e),u=c.length,h=Un.card(t),f=l.calculateManualRecord(h,o,u?c[u-1]:void 0,s);return n&&"function"==typeof n?{collections:c.map(n),reschedule_item:f?n(f):null}:{collections:c,reschedule_item:f}}}var Ei=(t=>new wi(t||{}))(si());function ki(t){return ki="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ki(t)}var Si=["dateCreated","reviewMode","schedulingAlgorithm"],Pi=["nextDueDateFromNow"];function _i(){_i=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==ki(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(ki(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Ci(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Ai(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ti(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ai(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=ki(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=ki(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==ki(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ai(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Mi(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}var Di=function(t){var e=t.dateCreated,r=t.reviewMode,n=t.schedulingAlgorithm,i=void 0===n?"SM2":n,a=Mi(t,Si),o={reviewMode:r};if(r===Zt.FixedInterval){var s=a.intervalMultiplier,l=a.intervalMultiplierType,c=new Date,u=null;return l===Qt.Days?u=zt(c,s):l===Qt.Weeks?u=zt(c,7*s):l===Qt.Months?u=zt(c,30*s):l===Qt.Years&&(u=zt(c,365*s)),Ti(Ti({},o),{},{reviewMode:Zt.FixedInterval,intervalMultiplier:s,intervalMultiplierType:l,nextDueDate:u,nextDueDateFromNow:$t(u)})}var h,f=a.grade,p=a.interval,d=a.repetitions,m=a.eFactor,y=a.fsrsState;"FSRS"===i?(console.log("üß† ‰ΩøÁî®FSRSÁÆóÊ≥ïË∞ÉÂ∫¶"),h=function(t,e){try{var r;if(t.fsrsState)if("string"==typeof t.fsrsState)try{r=JSON.parse(t.fsrsState)}catch(t){console.warn("FSRSÁä∂ÊÄÅËß£ÊûêÂ§±Ë¥•ÔºåÂàõÂª∫Êñ∞Âç°Áâá:",t),r=li()}else r=t.fsrsState;else r=li();var n=function(t){switch(t){case 0:case 1:return 1;case 2:return 2;case 3:case 4:default:return 3;case 5:return 4}}(e),i=new Date,a=Ei.repeat(r,i)[n];if(!a||!a.card||!a.card.due)throw new Error("FSRSË∞ÉÂ∫¶Â§±Ë¥•: Êó†Ê≥ïËé∑ÂèñÊúâÊïàÁöÑnextCard.card");var o=a.card,s=o.due.getTime()-i.getTime(),l=Math.max(0,Math.round(s/864e5));return console.log("‚úÖ FSRSÁÆóÊ≥ïÊàêÂäü:",{intervalDays:l,nextDue:o.due.toISOString()}),{interval:l,repetition:o.reps,efactor:o.stability,fsrsState:o}}catch(r){return console.error("FSRSÁÆóÊ≥ïÊâßË°åÈîôËØØ:",r),{interval:e>=3?Math.max(1,2*(t.interval||1)):1,repetition:(t.repetition||0)+1,efactor:t.efactor||2.5}}}({interval:p,repetition:d,efactor:m,fsrsState:y},f)):(console.log("üß† ‰ΩøÁî®SM2ÁÆóÊ≥ïË∞ÉÂ∫¶"),h=function(t,e){var r,n,i;return 0===e?(r=0,n=0,i=t.efactor):e<3?(r=1,n=0,i=t.efactor):(0===t.repetition?(r=1,n=1):1===t.repetition?(r=6,n=2):(r=Math.round(t.interval*t.efactor),n=t.repetition+1),(i=t.efactor+(.1-(5-e)*(.08+.02*(5-e))))<1.3&&(i=1.3)),{interval:r,repetition:n,efactor:i}}({interval:p,repetition:d,efactor:m},f));var v=zt(e,h.interval);return Ti(Ti(Ti({},o),{},{reviewMode:Zt.DefaultSpacedInterval,grade:f,repetitions:h.repetition,interval:h.interval,eFactor:h.efactor},"FSRS"===i&&h.fsrsState&&{fsrsState:h.fsrsState}),{},{dateCreated:e,nextDueDate:v,nextDueDateFromNow:$t(v)})};const Li=function(){var t,e=(t=_i().mark((function t(e){var r,n,i,a,o,s,l,c,u,h,f,p,d,m,y,v,g;return _i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(console.log("üèÉ‚Äç‚ôÇÔ∏è Practice called with:",e),r=e.refUid,n=e.dataPageTitle,i=e.dateCreated,a=e.isCramming,o=e.isDryRun,s=e.grade,l=e.reviewMode,c=e.eFactor,u=e.interval,h=e.repetitions,f=e.intervalMultiplier,p=e.intervalMultiplierType,d=e.fsrsEnabled,m=void 0!==d&&d,y=e.fsrsState,console.log("üèÉ‚Äç‚ôÇÔ∏è Practice mode - grade:",s,"isCramming:",a),(v=Di({dateCreated:i,reviewMode:l,grade:s,eFactor:c,interval:u,repetitions:h,intervalMultiplier:f,intervalMultiplierType:p,schedulingAlgorithm:m?"FSRS":"SM2",fsrsState:y})).nextDueDateFromNow,g=Mi(v,Pi),o||a){t.next=10;break}return console.log("üèÉ‚Äç‚ôÇÔ∏è Normal mode - saving full practice data..."),t.next=8,Je(Ti({refUid:r,dataPageTitle:n,dateCreated:i},g));case 8:t.next=11;break;case 10:a?console.log("üèÉ‚Äç‚ôÇÔ∏è Cramming mode - Á∫ØÁªÉ‰π†Ê®°ÂºèÔºå‰∏ç‰øùÂ≠ò‰ªª‰ΩïÊï∞ÊçÆ"):o&&console.log("üèÉ‚Äç‚ôÇÔ∏è Dry run mode - ÊµãËØïÊ®°ÂºèÔºå‰∏ç‰øùÂ≠òÊï∞ÊçÆ");case 11:return t.abrupt("return",g);case 12:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Ci(a,n,i,o,s,"next",t)}function s(t){Ci(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t){return e.apply(this,arguments)}}();var Oi,Fi=Dt.span(Oi||(Oi=function(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}(["\n  background-color: ",";\n  color: #abbbc9;\n  text-transform: uppercase;\n  font-size: 9px;\n  padding: 1px 2px;\n  border-radius: 2px;\n  position: relative;\n  top: -0.5px;\n"])),(function(t){return"light"===t.kind?"rgba(138, 155, 168, 0.2)":"rgba(138, 155, 168, 0.1)"}));const Ii=Fi;function ji(t){return ji="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ji(t)}var Ni,Ri,Bi,Gi,Vi,zi,Hi,$i,Ui,qi=["tooltipText","wrapperClassName"];function Wi(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function Yi(){Yi=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==ji(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(ji(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Xi(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Ji(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Ki(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Ki(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ki(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Zi=function(t){var e=t.activateButtonFn,n=t.showAnswerFn,i=t.activeButtonKey;return r.createElement(Qi,null,r.createElement("div",{className:"flex-shrink-0"}),r.createElement("div",{className:"flex-1 flex justify-center"},r.createElement(pa,{className:"text-base font-medium py-1 mobile-show-answer",intent:"none",onClick:function(){e("space-button",n)},active:"space-button"===i,outlined:!0},"Show Answer"," ",r.createElement("span",{className:"ml-2"},r.createElement(Ii,null,"SPACE")))),r.createElement("div",{className:"flex-shrink-0"}))},Qi=Dt.div(Ni||(Ni=Wi(["\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  "," {\n    padding: 8px 0;\n    \n    .mobile-show-answer {\n      min-width: 200px;\n      min-height: 42px;\n      max-height: 42px;\n      font-size: 16px;\n      font-weight: 500;\n      padding: 8px 16px !important;\n    }\n  }\n"])),dn),ta=function(t){var e=t.onStartCrammingClick,n=t.onCloseCallback;return r.createElement(ea,null,r.createElement("div",{className:"flex-shrink-0"}),r.createElement("div",{className:"finished-buttons-wrapper flex-1 flex justify-center gap-4"},r.createElement(pn,{content:"Review all cards without waiting for scheduling",placement:"top"},r.createElement(i.Button,{className:"text-base font-medium py-1 mobile-finish-button",intent:"none",onClick:e,outlined:!0},"Continue Cramming")),r.createElement(i.Button,{className:"text-base font-medium py-1 mobile-finish-button",intent:"primary",onClick:n,outlined:!0},"Close")),r.createElement("div",{className:"flex-shrink-0"}))},ea=Dt.div(Ri||(Ri=Wi(["\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  "," {\n    .finished-buttons-wrapper {\n      flex-direction: column;\n      gap: 8px;\n      width: 100%;\n      \n      .mobile-finish-button {\n        width: 100%;\n        min-height: 44px;\n        font-size: 16px;\n      }\n    }\n  }\n"])),dn),ra=function(t){t.activateButtonFn;var e=t.activeButtonKey,n=t.skipFn,a=t.gradeFn,o=t.intervalEstimates,s=t.intervalPractice,l=t.isIntervalEditorOpen,c=t.toggleIntervalEditorOpen,u=r.useContext(wo),h=u.reviewMode,f=u.setReviewModeOverride,p=h===Zt.FixedInterval;return r.createElement(da,null,r.createElement("div",{className:"skip-button-wrapper flex-shrink-0"},r.createElement(pa,{key:"skip-button",className:"text-base font-medium py-1 mobile-skip-button",tooltipText:"Skip for now",onClick:function(){return n()},active:"skip-button"===e,outlined:!0},"Skip"," ",r.createElement("span",{className:"ml-2"},r.createElement(Ii,null,"S")))),r.createElement("div",{className:"grading-buttons-wrapper flex-1 flex justify-center gap-2 flex-wrap"},p?r.createElement(aa,{activeButtonKey:e,intervalPractice:s,isIntervalEditorOpen:l,toggleIntervalEditorOpen:c,intervalEstimates:o}):r.createElement(sa,{activeButtonKey:e,gradeFn:a,intervalEstimates:o})),r.createElement("div",{className:"toggle-switch-wrapper flex-shrink-0"},r.createElement(ha,{className:"flex items-center justify-center gap-1 bg-gray-50 px-2 py-1 rounded-md border border-gray-200",style:{minWidth:"100px"}},r.createElement("span",{className:"text-xs ".concat(p?"text-gray-400":"text-blue-600 font-medium")},"AUTO"),r.createElement(i.Switch,{className:"mb-0",style:{transform:"scale(0.9)"},checked:p,onChange:function(){void 0!==f&&f((function(t){if(void 0===t)return h===Zt.DefaultSpacedInterval?Zt.FixedInterval:Zt.DefaultSpacedInterval}))},"data-testid":"review-mode-switch"}),r.createElement("span",{className:"text-xs ".concat(p?"text-blue-600 font-medium":"text-gray-400")},"FIX"))))},na=function(){var t=r.useContext(wo),e=t.intervalMultiplier,n=t.intervalMultiplierType,a=t.setIntervalMultiplier,o=t.setIntervalMultiplierType,s=[{value:Qt.Days,label:"Days"},{value:Qt.Weeks,label:"Weeks"},{value:Qt.Months,label:"Months"},{value:Qt.Years,label:"Years"}];return r.createElement("div",{className:"flex p-2 items-center w-80 justify-evenly"},r.createElement("div",{className:""},"Every"),r.createElement("div",{className:"w-24"},r.createElement(i.NumericInput,{min:1,max:365,stepSize:1,majorStepSize:30,minorStepSize:1,value:e,onValueChange:function(t){isNaN(t)||a(t)},fill:!0})),r.createElement("div",{className:"bp3-html-select"},r.createElement("select",{value:n,onChange:function(t){return o(t.currentTarget.value)}},s.map((function(t){return r.createElement("option",{key:t.value,value:t.value,selected:t.value===n},t.label)}))),r.createElement("span",{className:"bp3-icon bp3-icon-double-caret-vertical"})))},ia=function(t){var e=t.intervalMultiplier,n=t.intervalMultiplierType,i="";if(1===e)switch(n){case Qt.Weeks:i+="Weekly";break;case Qt.Months:i+="Monthly";break;case Qt.Years:i+="Yearly";break;default:i+="Daily"}return r.createElement(r.Fragment,null,"Review"," ",r.createElement("span",{className:"font-medium mr-3"},i||r.createElement(r.Fragment,null,"Every ",e," ",n)))},aa=function(t){var e=t.activeButtonKey,n=t.intervalPractice,a=t.isIntervalEditorOpen,o=t.toggleIntervalEditorOpen,s=t.intervalEstimates,l=r.useContext(wo),c=l.intervalMultiplier,u=l.intervalMultiplierType;return s?r.createElement(oa,null,r.createElement(i.Popover,{isOpen:a,onInteraction:function(t){!t&&a&&o()}},r.createElement(pa,{icon:"time",className:"text-base font-normal py-1 mobile-interval-button",intent:"default",onClick:o,tooltipText:"Change Interval",active:"change-interval-button"===e,outlined:!0},r.createElement("span",{className:"ml-2"},r.createElement(ia,{intervalMultiplier:c,intervalMultiplierType:u}),r.createElement(Ii,null,"E"))),r.createElement(na,null)),r.createElement(pa,{icon:"tick",className:"text-base font-medium py-1 mobile-next-button",intent:"success",onClick:function(){return n()},tooltipText:"Review ".concat(s[0].nextDueDateFromNow),active:"next-button"===e,outlined:!0},"Next"," ",r.createElement("span",{className:"ml-2"},r.createElement(Ii,null,"SPACE")))):(console.error("Interval estimates not set"),null)},oa=Dt.div(Bi||(Bi=Wi(["\n  display: flex;\n  gap: 8px;\n  align-items: center;\n\n  "," {\n    flex-direction: column;\n    width: 100%;\n    gap: 6px;\n\n    .mobile-interval-button,\n    .mobile-next-button {\n      width: 100%;\n      min-height: 44px;\n      font-size: 16px;\n    }\n  }\n"])),dn),sa=function(t){var e,n,i,a,o=t.activeButtonKey,s=t.gradeFn,l=t.intervalEstimates;return l?r.createElement(la,null,r.createElement(pa,{key:"forget-button",className:"text-base font-medium py-1 mobile-button",intent:"danger",tooltipText:"Review ".concat(null===(e=l[0])||void 0===e?void 0:e.nextDueDateFromNow),onClick:function(){return s(0)},active:"forgot-button"===o,outlined:!0},"Forgot"," ",r.createElement("span",{className:"ml-2"},r.createElement(Ii,null,"X"))),r.createElement(pa,{className:"text-base font-medium py-1 mobile-button",intent:"warning",onClick:function(){return s(2)},tooltipText:"Review ".concat(null===(n=l[2])||void 0===n?void 0:n.nextDueDateFromNow),active:"hard-button"===o,outlined:!0},"Hard"," ",r.createElement("span",{className:"ml-2"},r.createElement(Ii,null,"H"))),r.createElement(pa,{className:"text-base font-medium py-1 mobile-button",intent:"primary",onClick:function(){return s(4)},tooltipText:"Review ".concat(null===(i=l[4])||void 0===i?void 0:i.nextDueDateFromNow),active:"good-button"===o,outlined:!0},"Good"," ",r.createElement("span",{className:"ml-2"},r.createElement(Ii,null,"G"))),r.createElement(pa,{className:"text-base font-medium py-1 mobile-button",intent:"success",onClick:function(){return s(5)},tooltipText:"Review ".concat(null===(a=l[5])||void 0===a?void 0:a.nextDueDateFromNow),active:"perfect-button"===o,outlined:!0},"Perfect"," ",r.createElement("span",{className:"ml-2"},r.createElement(Ii,null,"SPACE")))):(console.error("Interval estimates not set"),null)},la=Dt.div(Gi||(Gi=Wi(["\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  width: 100%;\n  flex-wrap: wrap;\n\n  "," {\n    flex-direction: column;\n    gap: 8px;\n    padding: 8px 0;\n    width: 100%;\n\n    .mobile-button {\n      width: 100%;\n      min-height: 38px;\n      max-height: 38px;\n      font-size: 14px;\n      padding: 6px 12px !important;\n      \n      .bp3-button-text {\n        width: 100%;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        font-weight: 500;\n        \n        .ml-2 {\n          margin-left: 8px;\n          font-size: 11px;\n          opacity: 0.8;\n        }\n      }\n    }\n  }\n"])),dn),ca=Dt.div(Vi||(Vi=Wi(["\n  background-color: #f6f9fd;\n  min-height: 50px;\n  border-top: 1px solid rgba(16, 22, 26, 0.1);\n\n  & .bp3-button-text {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  "," {\n    padding: 12px 8px;\n  }\n"])),dn),ua=Dt.div(zi||(zi=Wi(["\n  &.bp3-dialog-footer-actions .bp3-button {\n    margin-left: 0;\n  }\n\n  "," {\n    flex-direction: column;\n    gap: 6px;\n    margin: 0 !important;\n    padding: 8px 12px;\n  }\n"])),dn),ha=Dt.div(Hi||(Hi=Wi(["\n  "," {\n    order: -1;\n    align-self: flex-end;\n    margin-bottom: 8px;\n  }\n"])),dn),fa=Dt(i.Button)($i||($i=Wi([""]))),pa=function(t){var e=t.tooltipText,n=t.wrapperClassName,i=void 0===n?"":n,a=function(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}(t,qi);return r.createElement(pn,{content:e,placement:"top",wrapperClassName:i},r.createElement(fa,a))},da=Dt.div(Ui||(Ui=Wi(["\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  gap: 12px;\n\n  "," {\n    flex-direction: column;\n    gap: 6px;\n    padding: 4px;\n\n    .skip-button-wrapper {\n      width: 100%;\n      \n      .mobile-skip-button {\n        width: 100%;\n        min-height: 34px;\n        max-height: 34px;\n        font-size: 13px;\n        padding: 4px 8px !important;\n      }\n    }\n\n    .grading-buttons-wrapper {\n      width: 100%;\n      order: 2;\n      /* Á¥ßÂáëÂ∏ÉÂ±ÄÔºåÁßªÈô§Â§ö‰ΩôÁ©∫Èó¥ */\n      flex: none;\n    }\n\n    .toggle-switch-wrapper {\n      order: 1;\n      align-self: flex-end;\n      margin-bottom: 4px;\n      flex-shrink: 0;\n      \n      /* Áº©Â∞èÂºÄÂÖ≥Â∞∫ÂØ∏ */\n      .bp3-switch {\n        transform: scale(0.8);\n      }\n    }\n  }\n"])),dn);const ma=function(t){var e=t.setShowAnswers,n=t.showAnswers,a=t.refUid,o=t.onPracticeClick,s=t.onSkipClick,l=t.onPrevClick,c=t.isDone,u=t.hasCards,h=t.onCloseCallback,f=t.currentCardData,p=t.onStartCrammingClick,d=t.fsrsEnabled,m=void 0!==d&&d,y=r.useContext(wo),v=y.reviewMode,g=y.intervalMultiplier,b=y.intervalMultiplierType,x=Ji(r.useState(!1),2),w=x[0],E=x[1],k=function(){return E((function(t){return!t}))},S=Ji(r.useState(null),2),P=S[0],_=S[1],C=function(){var t,e=(t=Yi().mark((function t(e,r){var n;return Yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return _(e),n="skip-button"===e?50:100,t.next=4,an(n);case 4:r(),_(null);case 6:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Xi(a,n,i,o,s,"next",t)}function s(t){Xi(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t,r){return e.apply(this,arguments)}}(),A=r.useMemo((function(){return function(){e(!0)}}),[e]),T=r.useMemo((function(){return function(t){var e;switch(t){case 0:e="forgot-button";break;case 2:e="hard-button";break;case 4:e="good-button";break;case 5:e="perfect-button"}C(e,(function(){return o({grade:t,refUid:a})}))}}),[o,a]),M=r.useMemo((function(){return function(){C("next-button",(function(){return o({refUid:a})}))}}),[o,a]),D=r.useMemo((function(){return function(){C("skip-button",(function(){return s()}))}}),[s]),L=r.useMemo((function(){return[{combo:"space",global:!0,label:"Primary Action Trigger",onKeyDown:function(){n?v===Zt.FixedInterval?M():T(5):C("space-button",A)}},{combo:"S",global:!0,label:"Skip",onKeyDown:D},{combo:"right",global:!0,label:"Skip",onKeyDown:D},{combo:"left",global:!0,label:"Previous",onKeyDown:l},{combo:"X",global:!0,label:"Forgot (Grade 0)",onKeyDown:function(){return T(0)},disabled:v===Zt.FixedInterval},{combo:"H",global:!0,label:"Grade 2",onKeyDown:function(){return T(2)},disabled:v===Zt.FixedInterval},{combo:"G",global:!0,label:"Grade 4",onKeyDown:function(){return T(4)},disabled:v!==Zt.DefaultSpacedInterval},{combo:"E",global:!0,label:"Edit Interval",onKeyDown:k,disabled:v!==Zt.FixedInterval}]}),[D,l,v,n,A,M,T]),O=i.useHotkeys(L),F=O.handleKeyDown,I=O.handleKeyUp,j=r.useMemo((function(){if(f){if(v){for(var t=[0,1,2,3,4,5],e=f.interval,r=f.repetitions,n=f.eFactor,i=f.fsrsState,a={},o=v===Zt.FixedInterval?1:t.length,s=0;s<o;s++){var l=t[s],c=Di({grade:l,interval:e,repetitions:r,eFactor:n,fsrsState:i,dateCreated:new Date,reviewMode:v,intervalMultiplier:g,intervalMultiplierType:b,schedulingAlgorithm:m?"FSRS":"SM2"});a[l]=c}return a}console.error("Review mode not set")}}),[f,g,b,v,m]);return r.createElement(ca,{className:"bp3-multistep-dialog-footer flex items-center justify-center rounded-b-md p-0",onKeyDown:F,onKeyUp:I},r.createElement(ua,{className:"bp3-dialog-footer-actions flex items-center justify-between w-full mx-5 my-3","data-testid":"footer-actions-wrapper"},c||!u?r.createElement(ta,{onStartCrammingClick:p,onCloseCallback:h}):n?r.createElement(ra,{activateButtonFn:C,activeButtonKey:P,skipFn:D,gradeFn:T,intervalEstimates:j,intervalPractice:M,isIntervalEditorOpen:w,toggleIntervalEditorOpen:k}):r.createElement(Zi,{activateButtonFn:C,showAnswerFn:A,activeButtonKey:P})))};var ya,va,ga;function ba(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}var xa=Dt.div(ya||(ya=ba(["\n  width: 100%;\n  padding: 12px 20px;\n  background-color: #f6f9fd;\n  border-top: 1px solid #e1e8ed;\n  border-bottom: 1px solid #e1e8ed;\n  position: relative;\n  z-index: 1;\n"]))),wa=Dt.div(va||(va=ba(["\n  position: relative;\n  width: 100%;\n"]))),Ea=Dt.input(ga||(ga=ba(["\n  -webkit-appearance: none;\n  width: 100%;\n  height: 8px;\n  border-radius: 4px;\n  background: linear-gradient(to right, #e74c3c 0%, #f39c12 50%, #27ae60 100%);\n  outline: none;\n  opacity: 0.8;\n  transition: opacity 0.2s;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 1;\n  }\n\n  &::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: #3498db;\n    cursor: grab;\n    border: 2px solid #fff;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n    transition: all 0.15s ease;\n  }\n\n  &::-webkit-slider-thumb:hover {\n    background: #2980b9;\n    transform: scale(1.1);\n  }\n\n  &::-webkit-slider-thumb:active {\n    cursor: grabbing;\n    transform: scale(1.2);\n  }\n\n  &::-moz-range-thumb {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: #3498db;\n    cursor: grab;\n    border: 2px solid #fff;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n    transition: all 0.15s ease;\n  }\n\n  &::-moz-range-thumb:hover {\n    background: #2980b9;\n    transform: scale(1.1);\n  }\n\n  &::-moz-range-thumb:active {\n    cursor: grabbing;\n    transform: scale(1.2);\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n\n  &:disabled::-webkit-slider-thumb {\n    cursor: not-allowed;\n    background: #95a5a6;\n  }\n\n  &:disabled::-moz-range-thumb {\n    cursor: not-allowed;\n    background: #95a5a6;\n  }\n"])));const ka=function(t){var e=t.priority,n=t.onPriorityChange,i=t.disabled,a=t.allCardsCount,o=r.useCallback((function(t,e){return e<=1?1:Math.max(1,Math.min(e,e-t+1))}),[]),s=r.useCallback((function(t,e){return e<=1?1:Math.max(1,Math.min(e,e-t+1))}),[]),l=r.useMemo((function(){return s(e,a)}),[e,a,s]),c=r.useCallback((function(t){if(!i){var e=parseInt(t.target.value);if(!isNaN(e)){var r=o(e,a);n(r)}}}),[a,o,n,i]),u=Math.max(1,a);return r.createElement(xa,null,r.createElement("div",{style:{display:"flex",alignItems:"center",marginBottom:"8px"}},r.createElement("span",{style:{fontSize:"14px",fontWeight:"bold",color:"#2c3e50"}},"‰ºòÂÖàÁ∫ßÊéíÂêç"),r.createElement("span",{style:{fontSize:"12px",color:"#7f8c8d",marginLeft:"8px",fontStyle:"italic"}},"(ÊãñÂä®Ë∞ÉÊï¥ÊéíÂêçÔºåÂÖ≥Èó≠Á™óÂè£Êó∂Ëá™Âä®‰øùÂ≠ò)")),r.createElement(wa,null,r.createElement(Ea,{type:"range",min:"1",max:u,value:l,onChange:c,disabled:i})),r.createElement("div",{style:{display:"flex",justifyContent:"space-between",marginTop:"8px",fontSize:"12px",color:"#7f8c8d"}},r.createElement("span",null,"‰Ωé‰ºòÂÖàÁ∫ßÔºàÁ¨¨",a,"ÂêçÔºâ"),r.createElement("div",{style:{display:"flex",flexDirection:"column",alignItems:"center"}},r.createElement("span",{style:{fontWeight:"bold",color:"#2c3e50"}},"ÂΩìÂâçÊÄªÊéíÂêçÔºöÁ¨¨",e,"Âêç",a>0&&" / ÂÖ±".concat(a,"Âº†Âç°Áâá"))),r.createElement("span",null,"È´ò‰ºòÂÖàÁ∫ßÔºàÁ¨¨1ÂêçÔºâ")))};var Sa,Pa;function _a(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function Ca(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Aa=Dt.div(Sa||(Sa=_a(["\n  display: flex;\n  flex-direction: column;\n  width: 150px;\n  gap: 4px;\n"]))),Ta=Dt.div(Pa||(Pa=_a(["\n  font-size: 12px;\n  color: #5c7080;\n  text-align: center;\n"])));const Ma=function(t){var e,n,a=t.initialPriority,o=t.onPriorityChange,s=(e=r.useState(0),n=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(e,n)||function(t,e){if(t){if("string"==typeof t)return Ca(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Ca(t,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=s[0],c=s[1];return r.createElement(Aa,null,r.createElement(i.Slider,{min:-50,max:50,stepSize:1,labelStepSize:25,value:l,onChange:function(t){c(t);var e=Math.round(a*(1+t/100));o(Math.max(0,Math.min(100,e)))},labelRenderer:function(t){return"".concat(t,"%")}}),r.createElement(Ta,null,"ÂÅèÁßª: ",l>=0?"+":"",l,"%"))};function Da(t){return Da="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Da(t)}var La,Oa,Fa,Ia,ja,Na,Ra;function Ba(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function Ga(){Ga=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Da(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Da(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Va(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function za(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Ha(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Ha(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ha(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var $a=Dt.div(La||(La=Ba(["\n  max-height: 500px;\n  overflow-y: auto;\n  \n  tr.selected {\n    background-color: rgba(19, 124, 189, 0.1);\n  }\n"]))),Ua=Dt.div(Oa||(Oa=Ba(["\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n"]))),qa=Dt.div(Fa||(Fa=Ba(["\n  display: flex;\n  align-items: center;\n  gap: 8px;\n"]))),Wa=Dt.div(Ia||(Ia=Ba(["\n  width: 50px;\n  height: 6px;\n  background-color: #e1e8ed;\n  border-radius: 3px;\n  position: relative;\n  \n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 100%;\n    width: ","%;\n    background-color: ",";\n    border-radius: 3px;\n    transition: width 0.3s ease;\n  }\n"])),(function(t){return t.priority}),(function(t){return t.priority>=70?"#0f9960":t.priority>=40?"#d69e2e":"#db3737"})),Ya=Dt.div(ja||(ja=Ba(["\n  display: flex;\n  align-items: center;\n"]))),Xa=Dt.div(Na||(Na=Ba(["\n  margin-top: 20px;\n"]))),Ja=Dt.div(Ra||(Ra=Ba(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100px;\n"])));const Ka=function(t){var e=t.deckPriorities,n=t.selectedDeck,a=t.isOpen,o=t.onClose,s=t.onApplyOffset,l=za(r.useState(null),2),c=l[0],u=l[1],h=za(r.useState(50),2),f=h[0],p=h[1],d=za(r.useState(50),2),m=d[0],y=d[1],v=za(r.useState(!1),2),g=v[0],b=v[1],x=r.useMemo((function(){return Object.values(e).sort((function(t,e){return e.medianPriority-t.medianPriority}))}),[e]),w=function(){var t,e=(t=Ga().mark((function t(){var e;return Ga().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!c||!s){t.next=15;break}return b(!0),t.prev=2,e=(f-m)/m*100,t.next=6,s(c,e);case 6:u(null),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(2),console.error("Â∫îÁî®ÁâåÁªÑÂÅèÁßªÂ§±Ë¥•:",t.t0);case 12:return t.prev=12,b(!1),t.finish(12);case 15:case"end":return t.stop()}}),t,null,[[2,9,12,15]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Va(a,n,i,o,s,"next",t)}function s(t){Va(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(){return e.apply(this,arguments)}}(),E=function(){u(null),b(!1)};return r.createElement(i.Dialog,{isOpen:a,onClose:o,title:"ÁâåÁªÑ‰ºòÂÖàÁ∫ßÁÆ°ÁêÜ",style:{width:"600px"}},r.createElement($a,{className:"bp3-dialog-body"},0===Object.keys(e).length?r.createElement(Ja,null,r.createElement(i.Spinner,null)):r.createElement(i.HTMLTable,{className:"bp3-html-table bp3-html-table-striped",style:{width:"100%"}},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"ÁâåÁªÑÂêçÁß∞"),r.createElement("th",null,"Âç°ÁâáÊï∞Èáè"),r.createElement("th",null,"‰∏≠‰ΩçÊï∞‰ºòÂÖàÁ∫ß"),r.createElement("th",null,"Êìç‰Ωú"))),r.createElement("tbody",null,x.map((function(t){return r.createElement("tr",{key:t.deckName,className:n===t.deckName?"selected":""},r.createElement("td",null,r.createElement(Ua,null,t.deckName)),r.createElement("td",null,t.cardCount),r.createElement("td",null,c===t.deckName?r.createElement(Ya,null,r.createElement(Ma,{initialPriority:m,onPriorityChange:p})):r.createElement(qa,null,r.createElement(Wa,{priority:t.medianPriority}),r.createElement("span",null,t.medianPriority,"%"))),r.createElement("td",null,c===t.deckName?r.createElement(i.ButtonGroup,null,r.createElement(i.Button,{icon:g?r.createElement(i.Spinner,{size:12}):"tick",intent:"success",small:!0,onClick:w,disabled:g}),r.createElement(i.Button,{icon:"cross",intent:"danger",small:!0,onClick:E,disabled:g})):r.createElement(pn,{content:"Ë∞ÉÊï¥ÁâåÁªÑÂÜÖÊâÄÊúâÂç°ÁâáÁöÑ‰ºòÂÖàÁ∫ß"},r.createElement(i.Button,{icon:"edit",small:!0,onClick:function(){return function(t){u(t.deckName),p(t.medianPriority),y(t.medianPriority)}(t)},disabled:0===t.cardCount}))))})))),r.createElement(Xa,null,r.createElement(i.Callout,{intent:"primary",icon:"info-sign"},r.createElement("h4",null,"ÁâåÁªÑ‰ºòÂÖàÁ∫ßËØ¥Êòé"),r.createElement("ul",null,r.createElement("li",null,"ÊØè‰∏™ÁâåÁªÑÁöÑ‰ºòÂÖàÁ∫ßÊòØÂÖ∂ÊâÄÊúâÂç°Áâá‰ºòÂÖàÁ∫ßÁöÑ‰∏≠‰ΩçÊï∞„ÄÇ"),r.createElement("li",null,"Âú®ÁºñËæëÊ®°Âºè‰∏ãÔºå‰ΩøÁî®ÊªëÂùóËÆæÁΩÆ‰∏Ä‰∏™**ÂÅèÁßªÈáè**Ôºà-50% Ëá≥ +50%Ôºâ„ÄÇ"),r.createElement("li",null,"‰øùÂ≠òÂêéÔºåËØ•ÁâåÁªÑÂÜÖÊâÄÊúâÂç°ÁâáÁöÑ‰ºòÂÖàÁ∫ßÂ∞ÜÊåâÊ≠§ÂÅèÁßªÈáèËøõË°åÊâπÈáèË∞ÉÊï¥„ÄÇ"),r.createElement("li",null,"‰ºòÂÖàÁ∫ßË∂äÈ´òÔºåÂç°ÁâáÂú®Ê∑∑ÂêàÂ≠¶‰π†ÈòüÂàó‰∏≠Ë∂äÈù†Ââç„ÄÇ"))))),r.createElement("div",{className:"bp3-dialog-footer"},r.createElement("div",{className:"bp3-dialog-footer-actions"},r.createElement(i.Button,{onClick:o},"ÂÖ≥Èó≠"))))};function Za(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Qa(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Qa(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Qa(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var to,eo,ro,no,io,ao,oo;function so(t){return so="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},so(t)}function lo(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function co(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function uo(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?co(Object(r),!0).forEach((function(e){ho(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):co(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function ho(t,e,r){var n;return n=function(t,e){if("object"!=so(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=so(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e),(e="symbol"==so(n)?n:String(n))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function fo(){fo=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==so(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(so(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function po(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=bo(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function mo(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function yo(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){mo(a,n,i,o,s,"next",t)}function s(t){mo(a,n,i,o,s,"throw",t)}o(void 0)}))}}function vo(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||bo(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function go(t){return function(t){if(Array.isArray(t))return xo(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||bo(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bo(t,e){if(t){if("string"==typeof t)return xo(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?xo(t,e):void 0}}function xo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var wo=r.createContext({}),Eo=Dt(i.Dialog)(to||(to=lo(["\n  display: grid;\n  grid-template-rows: 50px 1fr auto;\n  max-height: 80vh;\n  width: 90vw;\n\n  "," {\n    /* ÊâãÊú∫Á´ØÂç†Êª°Â±èÂπï */\n    width: 100vw;\n    max-width: 100vw;\n    height: 100vh;\n    max-height: 100vh;\n    margin: 0;\n    border-radius: 0;\n  }\n\n  "," {\n    width: 80vw;\n  }\n\n  "," {\n    width: 70vw;\n  }\n"])),dn,mn,yn),ko=Dt.div(eo||(eo=lo(["\n  overflow-x: hidden; // because of tweaks we do in ContentWrapper container overflows\n  min-height: 200px;\n\n  "," {\n    /* ÊâãÊú∫Á´ØÂáèÂ∞ëÂÜÖËæπË∑ù */\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n    padding-top: 16px !important;\n    padding-bottom: 16px !important;\n    /* Á°Æ‰øùÂÜÖÂÆπÂèØ‰ª•ÊªöÂä® */\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch; /* iOS smooth scrolling */\n  }\n"])),dn),So=Dt.div(ro||(ro=lo(["\n  justify-content: space-between;\n  color: #5c7080;\n  background-color: #f6f9fd;\n  box-shadow: 0 1px 0 rgb(16 22 26 / 10%);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n  line-height: inherit;\n  margin: 0;\n  min-height: 50px;\n  display: flex;\n  align-items: center;\n  padding: 0 16px;\n\n  /* Shortcut way to tag selector color */\n  & .bp3-button {\n    color: #5c7080;\n  }\n\n  "," {\n    padding: 0 8px;\n    min-height: 48px;\n    \n    /* Áº©Â∞èÂ≠ó‰ΩìÂíåÈó¥Ë∑ù */\n    .text-sm {\n      font-size: 12px;\n    }\n    \n    /* ÈöêËóè‰∏Ä‰∫õ‰∏çÂ§™ÈáçË¶ÅÁöÑÂÖÉÁ¥† */\n    .mx-2 {\n      margin-left: 4px;\n      margin-right: 4px;\n    }\n    \n    .mx-3 {\n      margin-left: 8px;\n      margin-right: 8px;\n    }\n\n    /* Ë∞ÉÊï¥ÂºÄÂÖ≥Â§ßÂ∞è */\n    .bp3-switch {\n      transform: scale(0.7) !important;\n    }\n  }\n"])),dn),Po=function(t){var e=t.tagsList,n=t.selectedTag,o=t.onTagChange;return r.createElement(a.Select,{items:e,activeItem:n,filterable:!0,itemPredicate:function(t,e){var r=t.toLowerCase();return e.toLowerCase().includes(r)},inputProps:{placeholder:"ÊêúÁ¥¢ÁâåÁªÑ..."},itemRenderer:function(t,n){var i=n.handleClick,a=n.modifiers,o=n.query,s=t.toLowerCase().indexOf(o.toLowerCase());if(o&&s>=0){var l=t.substring(0,s),c=t.substring(s,s+o.length),u=t.substring(s+o.length);return r.createElement(Ao,{text:r.createElement("span",null,l,r.createElement("strong",{style:{color:"#106ba3"}},c),u),originalText:t,tagsList:e,active:a.active,key:t,onClick:i})}return r.createElement(Ao,{text:t,originalText:t,tagsList:e,active:a.active,key:t,onClick:i})},onItemSelect:function(t){o(t)},popoverProps:{minimal:!0,popoverClassName:"tag-selector-popover",modifiers:{preventOverflow:{enabled:!0},flip:{enabled:!0}}},resetOnQuery:!0,resetOnSelect:!0},r.createElement(i.Button,{text:n,rightIcon:"caret-down",minimal:!0,"data-testid":"tag-selector-cta"}))},_o=Dt.div(no||(no=lo(["\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 6px;\n  background-color: ",";\n  user-select: none;\n\n  &:hover {\n    cursor: pointer;\n    background-color: ",";\n  }\n"])),(function(t){return t.active?"rgba(0, 0, 0, 0.05)":"transparent"}),(function(t){return t.active?"rgba(0, 0, 0, 0.05)":"rgba(0, 0, 0, 0.03)"})),Co=Dt(i.Tag)(io||(io=lo(["\n  &.bp3-tag {\n    font-size: 11px;\n    padding: 1px 3px;\n    min-height: auto;\n    min-width: auto;\n  }\n"]))),Ao=function(t){var e,n,a,o=t.text,s=t.originalText,l=t.onClick,c=t.active,u=t.tagsList,h=r.useContext(wo),f=h.today,p=h.setRenderMode,d=s||o,m=(null===(e=f.tags[d])||void 0===e?void 0:e.due)||0,y=(null===(n=f.tags[d])||void 0===n?void 0:n.new)||0,v=(null===(a=f.tags[d])||void 0===a?void 0:a.renderMode)||re.Normal,g=vo(r.useState(!1),2),b=g[0],x=g[1],w=u.indexOf(d)===u.length-1?"bottom":"top",E=r.createElement("div",{onClick:function(t){return t.stopPropagation()}},r.createElement(i.Menu,{className:"bg-transparent min-w-full text-sm"},r.createElement(i.MenuItem,{text:r.createElement("div",{className:"flex items-center justify-between"},r.createElement("span",{className:"text-xs"},"Swap Q/A"),r.createElement(i.Switch,{alignIndicator:i.Alignment.RIGHT,checked:v===re.AnswerFirst,onChange:function(){var t=v===re.Normal?re.AnswerFirst:re.Normal;p(d,t)},className:"mb-0"})),className:"hover:bg-transparent hover:no-underline"}),r.createElement(i.MenuDivider,null)));return r.createElement(_o,{onClick:l,active:c,key:o,tabIndex:-1,"data-testid":"tag-selector-item",className:"flex-col"},r.createElement("div",{className:"flex"},r.createElement("div",{className:"flex items-center"},o),r.createElement("div",{className:"ml-2"},m>0&&r.createElement(pn,{content:"Due",placement:w},r.createElement(Co,{active:!0,minimal:!0,intent:"primary",className:"text-center","data-testid":"tag-selector-due"},m)),y>0&&r.createElement(pn,{content:"New",placement:w},r.createElement(Co,{active:!0,minimal:!0,intent:"success",className:"text-center ml-2","data-testid":"tag-selector-new"},y))),r.createElement("div",{onClick:function(t){return t.stopPropagation()},className:""},r.createElement(i.Button,{icon:r.createElement(i.Icon,{icon:b?"chevron-up":"cog",size:11}),className:"ml-1 bp3-small","data-testid":"tag-settings-button",minimal:!0,onClick:function(){x(!b)}}))),r.createElement(i.Collapse,{isOpen:b},E))},To=function(t){var e=t.status,n=t.nextDueDate;if(t.isCramming)return r.createElement(pn,{content:"Reviews don't affect scheduling",placement:"left"},r.createElement(i.Tag,{intent:"none"},"Cramming"));switch(e){case"new":return r.createElement(i.Tag,{intent:"success",minimal:!0},"New");case"dueToday":return r.createElement(i.Tag,{intent:"primary",minimal:!0},"Due Today");case"pastDue":var a=$t(n);return r.createElement(i.Tag,{intent:"warning",title:"Due ".concat(a),minimal:!0},"Past Due");default:return null}},Mo=Dt(i.Icon)(ao||(ao=lo(["\n  margin-right: 5px !important;\n"]))),Do=function(t){var e=t.showBreadcrumbs;return r.createElement("div",{className:"flex align-center"},"".concat(e?"Hide":"Show"," Breadcrumbs"),r.createElement("span",null,r.createElement(Ii,{kind:"light",className:"mx-2"},"B")))},Lo=function(t){var e=t.tagsList,n=t.onCloseCallback,a=t.onTagChange,o=t.className,s=t.status,l=t.isDone,c=t.nextDueDate,u=t.showBreadcrumbs,h=t.setShowBreadcrumbs,f=t.isCramming,p=t.practiceCardUids,d=t.onOpenDeckPriority,m=t.isGlobalMixedMode,y=t.setIsGlobalMixedMode,v=function(t){var e=(0,r.useContext)(t);if(void 0===e)throw new Error("Context Provider not found");return e}(wo),g=v.selectedTag,b=v.today,x=v.currentIndex,w=(b.tags[g]||{completed:0,due:0,new:0,dueUids:[],newUids:[]}).completed,E=m?b.combinedToday:null,k=p?p.length:0,S=f?k:m?E?E.completed+k:0:w+k,P=f?x+1:m?E?E.completed+x+1:0:w+x+1;return r.createElement(So,{className:o,tabIndex:0},r.createElement("div",{className:"flex items-center"},r.createElement(Mo,{icon:"box",size:14}),r.createElement("div",{tabIndex:-1},r.createElement(Po,{tagsList:e,selectedTag:g,onTagChange:a})),r.createElement("div",{className:"mx-3"},r.createElement(Oo,{className:"flex items-center justify-center gap-1 bg-gray-50 px-2 py-1 rounded-md border border-gray-200",style:{minWidth:"80px"}},r.createElement("span",{className:"text-xs ".concat(m?"text-gray-400":"text-blue-600 font-medium")},"ÂçïÁªÑ"),r.createElement(i.Switch,{className:"mb-0",style:{transform:"scale(0.8)"},checked:m,onChange:function(){return y(!m)},"data-testid":"global-mixed-mode-switch"}),r.createElement("span",{className:"text-xs ".concat(m?"text-blue-600 font-medium":"text-gray-400")},"Ê∑∑Âêà")))),r.createElement("div",{className:"flex items-center justify-end"},d&&r.createElement(pn,{content:"ÁÆ°ÁêÜÁâåÁªÑ‰ºòÂÖàÁ∫ß",placement:"left"},r.createElement(i.Button,{icon:"sort",minimal:!0,small:!0,onClick:d,className:"mx-1"})),!l&&r.createElement("div",{onClick:function(){return h(!u)},className:"px-1 cursor-pointer"},r.createElement(pn,{content:r.createElement(Do,{showBreadcrumbs:u}),placement:"left"},r.createElement(i.Icon,{icon:u?"eye-open":"eye-off",className:u?"opacity-100":"opacity-60"}))),r.createElement("span",{"data-testid":"status-badge"},r.createElement(To,{status:s,nextDueDate:c,isCramming:f,"data-testid":"status-badge"})),r.createElement("span",{className:"text-sm mx-2 font-medium"},r.createElement("span",{"data-testid":"display-count-current"},l?0:P),r.createElement("span",{className:"opacity-50 mx-1"},"/"),r.createElement("span",{className:"opacity-50","data-testid":"display-count-total"},l?0:S)),r.createElement("button",{"aria-label":"Close",className:"bp3-dialog-close-button bp3-button bp3-minimal bp3-icon-cross",onClick:n})))},Oo=Dt.div(oo||(oo=lo(["\n  &:hover {\n    background-color: #e8f4f8;\n    border-color: #cce7f0;\n  }\n\n  transition: all 0.2s ease;\n\n  "," {\n    min-width: 65px !important;\n    \n    .text-xs {\n      font-size: 10px;\n    }\n    \n    /* ÂáèÂ∞ëÂÜÖËæπË∑ù */\n    padding: 2px 4px !important;\n  }\n"])),dn);const Fo=function(t){var e,n=t.isOpen,a=t.tagsList,o=t.selectedTag,s=t.onCloseCallback,l=t.practiceData,c=t.today,u=t.handlePracticeClick,h=t.handleMemoTagChange,f=(t.handleReviewMoreClick,t.isCramming),p=t.setIsCramming,d=t.rtlEnabled,m=t.setRenderMode,y=t.dataPageTitle,v=t.onDataRefresh,g=t.allCardsCount,b=t.priorityOrder,x=t.allCardUids,w=t.cardUids,E=t.defaultPriority,k=t.fsrsEnabled,S=t.deckPriorities,P=t.isGlobalMixedMode,_=t.setIsGlobalMixedMode,C=c.tags[o]||{completed:0,dueUids:[],newUids:[]},A=(C.completed,r.useMemo((function(){var t=[];if(P?(t=a.flatMap((function(t){var e=c.tags[t];return e?[].concat(go(e.dueUids),go(e.newUids)):[]})),t=go(new Set(t))):t=[].concat(go(C.dueUids),go(C.newUids)),b.length>0){var e=new Map(b.map((function(t,e){return[t,e]}))),r=function(t){var r;return null!==(r=e.get(t))&&void 0!==r?r:Number.MAX_SAFE_INTEGER};return t.sort((function(t,e){return r(t)-r(e)}))}return t}),[P,a,c.tags,C.dueUids,C.newUids,b])),T=C.renderMode,M=vo(r.useState(0),2),D=M[0],L=M[1],O=0===D,F=A[D],I=r.useMemo((function(){return F&&l[F]||[]}),[F,l]),j=function(t){var e=t.currentCardRefUid,n=t.sessions,i=n[n.length-1],a=Za(r.useState(i),2),o=a[0],s=a[1],l=Za(r.useState(null==i?void 0:i.reviewMode),2),c=l[0],u=l[1],h=Za(r.useState(),2),f=h[0],p=h[1];return r.useEffect((function(){if(e){if(f&&f!==(null==i?void 0:i.reviewMode)){var t=function(t){for(var e,r=t.sessions,n=t.reviewMode,i=r.length-1;i>=0;i--){var a=r[i];if(a.reviewMode===n){e=a;break}}return e||Ee({reviewMode:n})}({sessions:n,reviewMode:f});return s(t),void u(t.reviewMode)}s(i),u(null==i?void 0:i.reviewMode)}else s(void 0)}),[c,n,e,i,f]),r.useEffect((function(){p(void 0),u(null==i?void 0:i.reviewMode)}),[e,i]),{currentCardData:o,reviewMode:c,setReviewModeOverride:p}}({currentCardRefUid:F,sessions:I}),N=j.currentCardData,R=j.reviewMode,B=j.setReviewModeOverride,G=C.new+C.due>0,V=C.status===ee.Finished||!N,z=r.useMemo((function(){return Ee({reviewMode:Zt.FixedInterval})}),[]),H=vo(r.useState((null==N?void 0:N.intervalMultiplier)||z.intervalMultiplier),2),$=H[0],U=H[1],q=vo(r.useState((null==N?void 0:N.intervalMultiplierType)||z.intervalMultiplierType),2),W=q[0],Y=q[1],X=vo(r.useState({}),2),J=X[0],K=X[1],Z=vo(r.useState(!1),2),Q=(Z[0],Z[1]),tt=vo(r.useState(!1),2),et=tt[0],rt=tt[1],nt=r.useCallback(function(){var t=yo(fo().mark((function t(e,r){var n,i,a,o,s,l,c,u,h,f;return fo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,0!==(i=w[e]||[]).length){t.next=5;break}return console.warn("ÁâåÁªÑ ".concat(e," Ê≤°ÊúâÂç°ÁâáÔºåË∑≥ËøáÂÅèÁßªÊìç‰Ωú")),t.abrupt("return");case 5:a=new Map(b.map((function(t,e){return[t,e+1]}))),o={},s=po(i);try{for(s.s();!(l=s.n()).done;)c=l.value,u=a.get(c)||Math.ceil(g*(1-E/100)),h=Math.round(u*(1-r/100)),o[c]=Math.max(1,Math.min(g,h))}catch(t){s.e(t)}finally{s.f()}return t.next=11,er({rankingChanges:o,dataPageTitle:y,allCardUids:x});case 11:v(),null!==(n=window.roamAlphaAPI)&&void 0!==n&&null!==(n=n.ui)&&void 0!==n&&n.showToast&&window.roamAlphaAPI.ui.showToast({message:'ÁâåÁªÑ "'.concat(e,'" ‰ºòÂÖàÁ∫ßÂÅèÁßª ').concat(r>0?"+":"").concat(r,"% Â∑≤Â∫îÁî®"),intent:"success",timeout:3e3}),t.next=19;break;case 15:t.prev=15,t.t0=t.catch(0),console.error("ÁâåÁªÑÂÅèÁßªÂ∫îÁî®Â§±Ë¥•:",t.t0),null!==(f=window.roamAlphaAPI)&&void 0!==f&&null!==(f=f.ui)&&void 0!==f&&f.showToast&&window.roamAlphaAPI.ui.showToast({message:"ÁâåÁªÑ‰ºòÂÖàÁ∫ßÂÅèÁßªÂ∫îÁî®Â§±Ë¥•ÔºåËØ∑ÈáçËØï",intent:"danger",timeout:5e3});case 19:case"end":return t.stop()}}),t,null,[[0,15]])})));return function(e,r){return t.apply(this,arguments)}}(),[w,b,g,E,y,x,v]),it=r.useRef(!0);r.useEffect((function(){return function(){it.current=!1}}),[]);var at=r.useMemo((function(){if(!F)return Math.max(1,Math.ceil(g*(1-E/100)));if(void 0!==J[F])return J[F];var t=b.indexOf(F);return-1===t?1:t+1}),[F,b,g,J,E]),ot=r.useCallback((function(t){F&&(K((function(e){return uo(uo({},e),{},ho({},F,t))})),Q(!0))}),[F]);r.useEffect((function(){N&&((null==N?void 0:N.reviewMode)===Zt.FixedInterval?(U(N.intervalMultiplier),Y(N.intervalMultiplierType)):(U(z.intervalMultiplier),Y(z.intervalMultiplierType)))}),[N,z]);var st=N&&"nextDueDate"in N,lt=N&&"isNew"in N&&N.isNew,ct=st?N.nextDueDate:void 0,ut=0===Ht(ct,new Date),ht=lt?"new":ut?"dueToday":st?"pastDue":null,ft=rn({refUid:F}),pt=ft.blockInfo,dt=ft.isLoading,mt=(ft.refreshBlockInfo,!!pt.children&&!!pt.children.length),yt=!!pt.childrenUids&&!!pt.childrenUids.length,vt=A[D+1],gt=(rn({refUid:vt,skip:!vt}).blockInfo,vo(r.useState(!1),2)),bt=gt[0],xt=gt[1],wt=vo(r.useState(!0),2),Et=wt[0],kt=wt[1],St=T===re.AnswerFirst&&yt&&!bt;r.useEffect((function(){xt(!1)}),[F]),r.useEffect((function(){if(F&&!dt&&!mt&&!yt&&!Et&&!bt){var t=setTimeout((function(){return xt(!0)}),100);return function(){return clearTimeout(t)}}}),[F,mt,yt,Et,dt,bt]);var Pt=function(){var t=yo(fo().mark((function t(e){var r;return fo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return L(0),h(e),p(!1),t.next=5,an(100);case 5:document.activeElement instanceof HTMLElement&&(null===(r=document)||void 0===r||r.activeElement.blur());case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),_t=r.useRef(A.length);r.useEffect((function(){A.length!==_t.current&&(L(0),_t.current=A.length)}),[A.length]);var Ct=r.useCallback((function(t){if(!V){var e=uo(uo(uo({},N),t),{},{intervalMultiplier:$,intervalMultiplierType:W}),r=function(){var t=yo(fo().mark((function t(){return fo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,u(e);case 3:t.next=8;break;case 5:t.prev=5,t.t0=t.catch(0),console.error("ÁªÉ‰π†Êï∞ÊçÆ‰øùÂ≠òÂ§±Ë¥•:",t.t0);case 8:case"end":return t.stop()}}),t,null,[[0,5]])})));return function(){return t.apply(this,arguments)}}();r(),L(D+1)}}),[u,V,D,N,$,W]),At=r.useCallback((function(){V||L(D+1)}),[D,V]),Tt=r.useCallback((function(){O||L(D-1)}),[D,O]),Mt={loop:!0,autoplay:!0,animationData:sn,rendererSettings:{preserveAspectRatio:"xMidYMid slice"}},Dt=vo(r.useState(!0),2),Lt=Dt[0],Ot=Dt[1],Ft=r.useMemo((function(){return[{combo:"B",global:!0,label:"Show BreadCrumbs",onKeyDown:function(){return Ot(!Lt)}}]}),[Lt]);i.useHotkeys(Ft),function(t){(0,r.useEffect)((function(){var e="roam-memo-zindex-fix";if(t){if(document.getElementById(e))return;var r=document.createElement("style");r.id=e,r.type="text/css",r.textContent="\n        /*\n         * Roam Research ÂõæÁâáÊÇ¨ÊµÆÁ™óÂè£ÁöÑÂ±ÇÁ∫ßÊèêÂçá\n         * Ëß£ÂÜ≥Ë¢´ Memo Êèí‰ª∂ÈÅÆÊå°ÁöÑÈóÆÈ¢ò\n         */\n        \n        /* ÊèêÂçá Roam ÂõæÁâáÊµÆÂ±ÇÁöÑ Z-index */\n        #rm-modal-portal {\n          z-index: 1002 !important; /* Roam ÂõæÁâáÊµÆÂ±ÇÊï¥‰ΩìÁöÑ z-indexÔºåÊúÄÈ´ò */\n        }\n        \n        #rm-modal-portal > div > div > div.bp3-dialog-container.bp3-overlay-content > div {\n          z-index: 1001 !important; /* Á°Æ‰øùÂõæÁâáÂÆûÈôÖÂÜÖÂÆπ‰πüÈ´ò */\n        }\n        \n        /* ÊèêÂçá Roam ÂèåÈìæÂºπÂá∫ËèúÂçïÁöÑ Z-index */\n        .rm-autocomplete__results {\n          z-index: 1000 !important; /* ‰ΩøÁî®‰∏Ä‰∏™ÈùûÂ∏∏È´òÁöÑÂÄºÔºåÁ°Æ‰øùÊòæÁ§∫Âú®ÊâÄÊúâÂÖ∂‰ªñÂÖÉÁ¥†‰πã‰∏ä */\n          width: auto !important; /* Ë∞ÉÊï¥‰∏∫Ëá™ÈÄÇÂ∫îÂÆΩÂ∫¶ */\n          max-width: unset !important; /* ÂèñÊ∂àÊúÄÂ§ßÂÆΩÂ∫¶ÈôêÂà∂ */\n          min-width: 150px !important; /* ËÆæÁΩÆÊúÄÂ∞èÂÆΩÂ∫¶ÔºåÈò≤Ê≠¢ËøáÁ™Ñ */\n        }\n        \n        /* ÊèêÂçáÂÖ∂‰ªñÂèØËÉΩË¢´ÈÅÆÊå°ÁöÑ Roam UI ÂÖÉÁ¥† */\n        .bp3-popover {\n          z-index: 999 !important;\n        }\n        \n        .bp3-tooltip {\n          z-index: 998 !important;\n        }\n      ",document.head.appendChild(r),console.log("üîß Roam Memo: Z-index fix Â∑≤ÊøÄÊ¥ª")}else{var n=document.getElementById(e);n&&(document.head.removeChild(n),console.log("üîß Roam Memo: Z-index fix Â∑≤ÁßªÈô§"))}return function(){var t=document.getElementById(e);t&&document.head.removeChild(t)}}),[t])}(n),function(t){(0,r.useEffect)((function(){console.log("üéØ Roam Memo: useFocusFix Ëß¶ÂèëÔºåÁ™óÂè£Áä∂ÊÄÅ:",t);var e=null;return t&&(console.log("üéØ Roam Memo: ÊøÄÊ¥ªÁÑ¶ÁÇπ‰øùÊä§Êú∫Âà∂"),e=function(t){var e=t.target;e&&e.matches&&e.matches("textarea.dont-unfocus-block")&&(Math.random()<.1&&console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§Ê≠£Âú®Â∑•‰Ωú (Â∑≤Êã¶Êà™Â§öÊ¨°ÁÑ¶ÁÇπ‰∏¢Â§±)"),t.preventDefault(),t.stopPropagation())},document.addEventListener("blur",e,!0),console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§‰∫ã‰ª∂ÁõëÂê¨Âô®Â∑≤Ê∑ªÂä†")),function(){e&&(document.removeEventListener("blur",e,!0),console.log("üéØ Roam Memo: ÁÑ¶ÁÇπ‰øùÊä§‰∫ã‰ª∂ÁõëÂê¨Âô®Â∑≤ÁßªÈô§"))}}),[t])}(n);var It=!V&&G,jt=r.useRef(It);r.useEffect((function(){if(jt.current&&!It&&Object.keys(J).length>0){var t=(null==y?void 0:y.trim())||"roam/memo";if(!x||0===x.length)return;er({rankingChanges:J,dataPageTitle:t,allCardUids:x}).then((function(){it.current&&(K({}),Q(!1))})).catch((function(t){var e;it.current&&(console.error("üéØ ‰ºòÂÖàÁ∫ß‰øùÂ≠òÂ§±Ë¥•:",t),null!==(e=window.roamAlphaAPI)&&void 0!==e&&null!==(e=e.ui)&&void 0!==e&&e.showToast&&window.roamAlphaAPI.ui.showToast({message:"‰ºòÂÖàÁ∫ß‰øùÂ≠òÂ§±Ë¥•ÔºåÊï∞ÊçÆÊöÇÂ≠òÊú¨Âú∞„ÄÇËØ∑ÈáçÊñ∞ÊâìÂºÄÁªÉ‰π†Á™óÂè£ÈáçËØï„ÄÇ",intent:"warning",timeout:5e3}))}))}jt.current=It}),[It,J,y,x]);A&&A.length;return f||P&&c.combinedToday.completed,f||P&&c.combinedToday.completed,r.createElement(wo.Provider,{value:{reviewMode:R,setReviewModeOverride:B,intervalMultiplier:$,setIntervalMultiplier:U,intervalMultiplierType:W,setIntervalMultiplierType:Y,onPracticeClick:Ct,today:c,selectedTag:o,currentIndex:D,renderMode:T,setRenderMode:m}},r.createElement(Eo,{isOpen:n,onClose:s,className:"pb-0 bg-white",canEscapeKeyClose:!1},r.createElement(Lo,{className:"bp3-dialog-header outline-none focus:outline-none focus-visible:outline-none",tagsList:a,onCloseCallback:s,onTagChange:Pt,status:ht,isDone:V,nextDueDate:ct,showBreadcrumbs:Lt,setShowBreadcrumbs:Ot,isCramming:f,practiceCardUids:A,onOpenDeckPriority:function(){return rt(!0)},isGlobalMixedMode:P,setIsGlobalMixedMode:_}),r.createElement(ko,{className:"bp3-dialog-body overflow-y-scroll m-0 pt-6 pb-8 px-4",dir:d?"rtl":void 0},F?r.createElement(r.Fragment,null,St?null===(e=pt.childrenUids)||void 0===e?void 0:e.map((function(t){return r.createElement(Vn,{key:t,refUid:t,showAnswers:bt,setHasCloze:kt,breadcrumbs:pt.breadcrumbs,showBreadcrumbs:!1})})):r.createElement(Vn,{refUid:F,showAnswers:bt,setHasCloze:kt,breadcrumbs:pt.breadcrumbs,showBreadcrumbs:Lt})):r.createElement("div",{"data-testid":"practice-overlay-done-state",className:"flex items-center flex-col"},r.createElement(on.A,{options:Mt,style:{height:200,width:"auto"}}),r.createElement("div",null,"You're all caught up! üåü"," ",C.completed>0?"Reviewed ".concat(C.completed," ").concat(("card","cards",1===C.completed?"card":"cards")," today."):""))),r.createElement(ma,{refUid:F,onPracticeClick:Ct,onSkipClick:At,onPrevClick:Tt,setShowAnswers:xt,showAnswers:bt,isDone:V,hasCards:G,onCloseCallback:s,currentCardData:N,onStartCrammingClick:function(){v(),p(!0),L(0)},fsrsEnabled:k}),It&&r.createElement(ka,{priority:at,onPriorityChange:ot,disabled:!1,allCardsCount:g})),r.createElement(Ka,{isOpen:et,onClose:function(){return rt(!1)},deckPriorities:S,selectedDeck:o,onApplyOffset:nt}))};var Io,jo;function No(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}var Ro=Dt.span(Io||(Io=No(["\n  display: flex;\n"]))),Bo=Dt(i.Tag)(jo||(jo=No(["\n  &.bp3-tag {\n    padding: 1px 3px;\n    min-height: auto;\n    min-width: auto;\n  }\n"])));const Go=function(t){var e=t.onClickCallback,r=t.today,n=r.combinedToday.status===ee.Finished,i=r.combinedToday,a=n?"bp3-icon-confirm":"bp3-icon-box";return React.createElement(Ro,{"data-testid":"side-panel-wrapper",className:"w-full justify-between",onClick:e},React.createElement("div",null,React.createElement("div",{className:"flex"},React.createElement("span",{className:"bp3-icon ".concat(a," icon bp3-icon-small flex items-center")}),React.createElement("div",null,"Review"))),React.createElement("div",{className:"ml-2"},i.due>0&&React.createElement(pn,{content:"Due",placement:"top"},React.createElement(Bo,{active:!0,minimal:!0,intent:"primary",className:"text-center","data-testid":"due-tag"},i.due)),i.new>0&&React.createElement(pn,{content:"New",placement:"top"},React.createElement(Bo,{active:!0,minimal:!0,intent:"success",className:"text-center ml-2","data-testid":"new-tag"},i.new))))};function Vo(t){return Vo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Vo(t)}function zo(){zo=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Vo(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Vo(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Ho(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function $o(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Uo(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Uo(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Uo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function qo(t){return qo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},qo(t)}var Wo,Yo,Xo,Jo,Ko;function Zo(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Qo(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Zo(Object(r),!0).forEach((function(e){ts(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Zo(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function ts(t,e,r){var n;return n=function(t,e){if("object"!=qo(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=qo(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e),(e="symbol"==qo(n)?n:String(n))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function es(){es=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==qo(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(qo(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function rs(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function ns(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){rs(a,n,i,o,s,"next",t)}function s(t){rs(a,n,i,o,s,"throw",t)}o(void 0)}))}}function is(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||as(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function as(t,e){if(t){if("string"==typeof t)return os(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?os(t,e):void 0}}function os(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function ss(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}var ls="#e5e7eb",cs=function(t){var e=t.sessions,n=e.some((function(t){return!t.isRoamSrOldPracticeRecord}));return r.createElement("div",{className:"overflow-scroll"},r.createElement("table",{className:"bp3-html-table bp3-small bp3-html-table-striped w-full"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Grade"),r.createElement("th",null,"Date"),r.createElement("th",null,"eFactor"),r.createElement("th",null,"Interval"),r.createElement("th",null,"Streak"),r.createElement("th",null,"Due"),n&&r.createElement("th",null,"New"))),r.createElement("tbody",null,e.map((function(t,e){return r.createElement("tr",{key:e},r.createElement("td",null,t.grade),r.createElement("td",null,It(t.dateCreated)),r.createElement("td",null,t.eFactor.toFixed(2)),r.createElement("td",null,t.interval),r.createElement("td",null,t.repetitions),r.createElement("td",null,It(t.nextDueDate)),n&&r.createElement("td",null,t.isRoamSrOldPracticeRecord?"":"‚ùáÔ∏è"))})))))},us=Dt.div(Wo||(Wo=ss(["\n  width: 100%;\n  border-bottom: 1px solid ",";\n"])),ls),hs=function(t){var e=t.uuid,n=t.sessions,a=t.isLast,o=t.isFirst,s=t.selectedUids,l=t.setSelectedUids,c=t.blockInfo,u=is(r.useState(!1),2),h=u[0],f=u[1],p=is(r.useState(!!o),2),d=p[0],m=p[1];r.useEffect((function(){s.includes(e)?f(!0):f(!1)}),[s]);var y=n.filter((function(t){return!t.isRoamSrOldPracticeRecord}));return r.createElement(r.Fragment,null,r.createElement("div",{className:"flex flex-col px-4 py-4"},r.createElement("div",{className:"flex items-center"},r.createElement(i.Checkbox,{checked:h,onChange:function(t){l((function(r){return t.target.checked?[].concat(function(t){if(Array.isArray(t))return os(t)}(n=r)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(n)||as(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]):r.filter((function(t){return t!==e}));var n}))},className:"cursor-not-allowed"}),r.createElement("div",{className:"truncate w-full cursor-pointer",onClick:function(){return m((function(t){return!t}))}},r.createElement("div",{className:"truncate w-full cursor-pointer text-gray-600"},null==c?void 0:c.string),r.createElement("div",{className:"bp3-text-small bp3-text-muted"},"Found ",n.length-y.length," Practice Sessions"," ",r.createElement("span",{className:"text-green-600"},y.length>0&&"(merged with ".concat(y.length," new sessions)")))),r.createElement("div",{className:"px-5 cursor-pointer",onClick:function(){return m((function(t){return!t}))}},r.createElement(i.Icon,{icon:"chevron-down",className:"".concat(d?"transform rotate-180":"")}))),d&&r.createElement(cs,{sessions:n})),!a&&r.createElement(us,null))},fs=Dt.div(Yo||(Yo=ss(["\n  max-height: 500px;\n  overflow: scroll;\n"]))),ps=Dt(i.Dialog)(Xo||(Xo=ss(["\n  width: 90%;\n  max-width: 700px;\n"]))),ds=Dt.div(Jo||(Jo=ss(["\n  border-bottom: 1px solid ",";\n"])),ls),ms=function(t){var e=t.totalCardsFound,n=t.totalRecords,a=t.executeImport,o=t.isImporting,s=t.selectedUids,l=t.setLaunchPanel,c=t.importedUids,u=t.onSelectAllClick,h=t.onDeselectAllClick;return r.createElement(ds,{className:"flex px-4 py-4 justify-between"},r.createElement("div",null,r.createElement("h4",{className:"bp3-heading mb-1"},"Import Roam Sr. Data"),r.createElement("div",{className:"bp3-text-small bp3-text-muted"},r.createElement(r.Fragment,null,"Found ",r.createElement("strong",null,e)," cards with a total of"," ",r.createElement("strong",null,n)," sessions.")),c.length>0&&r.createElement("div",{className:"bp3-text-small bp3-text-muted"},r.createElement(r.Fragment,null,r.createElement("strong",null,c.length)," cards have already been imported."))),r.createElement("div",null,r.createElement("div",{className:"flex justify-end items-center"},r.createElement(i.Button,{onClick:a,disabled:o||!s.length,intent:"primary"},"Import ",s.length===e?"All":"(".concat(s.length,")")),r.createElement(i.Button,{icon:"cross",onClick:function(){return l(!1)},className:"ml-2"})),r.createElement("div",{className:"bp3-text-small bp3-text-muted pt-2"},r.createElement(i.Button,{onClick:u,className:"ml-2",small:!0,minimal:!0},r.createElement("span",{className:"bp3-text-small bp3-text-muted"},"Select All"))," ","/"," ",r.createElement(i.Button,{onClick:h,small:!0,minimal:!0},r.createElement("span",{className:"bp3-text-small bp3-text-muted"},"Deselect All")))))},ys=Dt.div(Ko||(Ko=ss(["\n  margin-top: 0 !important;\n  margin-bottom: 5px;\n"]))),vs=function(t){var e=t.token,n=t.setToken,a=t.setShowImportPage,o=t.dataPageTitle,s=is(r.useState(!1),2),l=s[0],c=s[1],u=is(r.useState(""),2),h=u[0],f=u[1],p=function(){var t=ns(es().mark((function t(){var r,n,i,s;return es().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return c(!0),t.next=3,pe(o);case 3:return r=t.sent,n=window.roamAlphaAPI.util.generateUID(),i=window.roamAlphaAPI.graph.name,s={graphName:i,data:{action:"batch-actions",actions:[{action:"create-block",location:{"parent-uid":r,order:"last"},block:{uid:n,string:"test"}},{action:"delete-block",block:{uid:n}}]}},t.prev=8,t.next=11,fetch("".concat("https://roam-memo-server.onrender.com","/save-roam-sr-data"),{method:"POST",body:JSON.stringify(s),headers:{Authorization:"Bearer ".concat(e),"Content-Type":"application/json"}});case 11:if(200===t.sent.status){t.next=14;break}throw new Error("API validation failed. Please check your token and make sure you have edit access to this graph");case 14:a(!0),t.next=20;break;case 17:t.prev=17,t.t0=t.catch(8),f(t.t0.message);case 20:c(!1);case 21:case"end":return t.stop()}}),t,null,[[8,17]])})));return function(){return t.apply(this,arguments)}}();return r.createElement("div",{className:"flex px-4 py-4 justify-between"},r.createElement("div",{className:"flex items-center"},r.createElement(i.FormGroup,{label:"Roam Graph API Token",labelFor:"text-input",labelInfo:"(required)"},r.createElement(ys,{className:"bp3-form-helper-text",style:{marginBottom:10}},"In order to import your practice data, you need to generate a Roam Graph API Token."," ",r.createElement("a",{href:"https://roamresearch.com/#/app/developer-documentation/page/bmYYKQ4vf",target:"_blank",rel:"noreferrer"},"Click here")," ","to learn how to generate one."),r.createElement(i.InputGroup,{autoFocus:!0,id:"text-input",placeholder:"roam-graph-token-XXXXX-XXXXXXXXXXXX",value:e,onChange:function(t){n(t.target.value)},onKeyUp:function(t){"Enter"===t.key&&p()},className:"mb-3"}),r.createElement("div",{className:"flex justify-center flex-col"},r.createElement("div",{className:"text-center"},r.createElement(i.Button,{icon:"geosearch",intent:"primary",loading:l,disabled:!e||l,onClick:p},"Fetch Preview Data")),h&&r.createElement("div",{className:"mt-3 text-center text-sm text-red-400"},h)))))},gs=function(t){var e=t.isImporting,n=t.setLaunchPanel,a=t.hasImported,o=t.selectedUids,s=t.importedUids,l=o.length,c=is(r.useState(l),1)[0],u=is(r.useState(s.length),1)[0],h=s.length-u,f=h===c;return e||a?r.createElement("div",{className:"absolute inset-0 flex flex-col bg-white z-10"},r.createElement("div",{className:"py-5 px-5 flex h-full flex-col justify-center items-center"},a?r.createElement("h4",{className:"bp3-heading mb-3"},"Import Complete"):r.createElement("h4",{className:"bp3-heading mb-3"},"Importing Sessions ",h,"/",c),r.createElement(i.ProgressBar,{intent:f?"success":"primary",animate:!f,stripes:!f,value:h/c,className:"mb-3"}),f?r.createElement(i.Button,{onClick:function(){n(!1)}},"Close"):r.createElement(ys,{className:"bp3-form-helper-text mb-5"},"This may take a while to sync especially if you have a lot of practice data. Go grab coffee."))):null},bs=function(t){var e=t.dataPageTitle,n=t.token,a=t.setLaunchPanel,o=is(r.useState(!0),2),s=o[0],l=o[1],c=is(r.useState(0),2),u=c[0],h=c[1],f=is(r.useState(!1),2),p=f[0],d=f[1],m=is(r.useState(!1),2),y=m[0],v=m[1],g=is(r.useState({}),2),b=g[0],x=g[1],w=Object.keys(b).length>0,E=is(r.useState([]),2),k=E[0],S=E[1],P=is(r.useState([]),2),_=P[0],C=P[1],A=is(r.useState({}),2),T=A[0],M=A[1],D=Object.keys(b).length,L=Object.values(b).reduce((function(t,e){return t+e.length}),0);r.useEffect((function(){ns(es().mark((function t(){var r,n,i,a,o,s,c,u,h,f;return es().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return l(!0),t.next=3,an(300);case 3:return t.next=5,Pr({dataPageTitle:e,limitToLatest:!1});case 5:return r=t.sent,t.next=8,Ur();case 8:return n=t.sent,t.next=11,Wr(n,r,e);case 11:i=t.sent,a=[],o=0,s=Object.keys(r);case 14:if(!(o<s.length)){t.next=24;break}if((c=s[o])in n){t.next=18;break}return t.abrupt("continue",21);case 18:r[c].some((function(t){return t.isRoamSrOldPracticeRecord}))&&a.push(c);case 21:o++,t.next=14;break;case 24:u=es().mark((function t(){var e,r;return es().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!((e=f[h])in T)){t.next=3;break}return t.abrupt("return",1);case 3:return t.next=5,he(e);case 5:r=t.sent,M((function(t){return Qo(Qo({},t),{},ts({},e,r))}));case 7:case"end":return t.stop()}}),t)})),h=0,f=Object.keys(i);case 26:if(!(h<f.length)){t.next=33;break}return t.delegateYield(u(),"t0",28);case 28:if(!t.t0){t.next=30;break}return t.abrupt("continue",30);case 30:h++,t.next=26;break;case 33:C(a),x(i),S(Object.keys(i).filter((function(t){return!a.includes(t)}))),l(!1);case 37:case"end":return t.stop()}}),t)})))()}),[u]),r.useEffect((function(){if(y||p){var t=setInterval(ns(es().mark((function t(){return es().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:h((function(t){return t+1}));case 1:case"end":return t.stop()}}),t)}))),3e3);return function(){return clearInterval(t)}}}),[y]);var O=function(){var t=ns(es().mark((function t(){return es().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return v(!0),t.next=3,Ke({token:n,records:b,selectedUids:k,dataPageTitle:e});case 3:d(!0),v(!1),h((function(t){return t+1}));case 6:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();return!s||y||p?r.createElement("div",{className:"flex flex-col relative"},r.createElement(gs,{isImporting:y,hasImported:p,setLaunchPanel:a,selectedUids:k,importedUids:_}),r.createElement(ms,{totalCardsFound:D,totalRecords:L,executeImport:O,isImporting:y,selectedUids:k,setLaunchPanel:a,importedUids:_,onSelectAllClick:function(){return S(Object.keys(b))},onDeselectAllClick:function(){return S([])}}),r.createElement(fs,null,w?Object.keys(b).sort((function(t){return _.includes(t)?1:-1})).map((function(t,e,n){return r.createElement(hs,{key:t,uuid:t,sessions:b[t],isLast:e===n.length-1,isFirst:0===e,selectedUids:k,setSelectedUids:S,blockInfo:T[t]})})):r.createElement("div",{className:"flex justify-center items-center my-10"},r.createElement("div",null,"No records found.")))):r.createElement("div",{className:"flex justify-center items-center my-10"},r.createElement(i.Spinner,{className:"mr-3"}),r.createElement("div",null,"Loading..."))},xs=function(t){var e=t.dataPageTitle,n=t.setLaunchPanel,i=t.token,a=t.setToken,o=is(r.useState(!1),2),s=o[0],l=o[1];return r.createElement(ps,{className:"bp3-ui-text pb-0 bg-white select-none",canEscapeKeyClose:!1,isOpen:!0},i&&s?r.createElement(bs,{dataPageTitle:e,token:i,setLaunchPanel:n}):r.createElement(vs,{token:i,setToken:a,setShowImportPage:l,dataPageTitle:e}))};const ws=function(t){var e=t.dataPageTitle,n=is(r.useState(!1),2),a=n[0],o=n[1],s=is(r.useState(null),2),l=s[0],c=s[1];return r.createElement("div",null,r.createElement(i.Button,{onClick:function(){return o(!0)}},"Launch"),a&&r.createElement(xs,{dataPageTitle:e,setLaunchPanel:o,token:l,setToken:c}))};function Es(t){return Es="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Es(t)}function ks(){ks=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Es(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Es(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Ss(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ps(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ss(Object(r),!0).forEach((function(e){_s(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ss(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function _s(t,e,r){var n;return n=function(t,e){if("object"!=Es(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=Es(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e),(e="symbol"==Es(n)?n:String(n))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Cs(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function As(t){return As="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},As(t)}function Ts(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ms(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ts(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=As(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=As(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==As(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ts(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ds(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Ls={dataPageTitle:"roam/memo",dailyLimit:0,rtlEnabled:!1,shuffleCards:!1,defaultPriority:70,fsrsEnabled:!0,isGlobalMixedMode:!1};const Os=function(){var t,e,r=(t=n().useState(Ls),e=2,function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Ds(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Ds(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[0],a=r[1];return n().useEffect((function(){window.roamMemo.extensionAPI.settings.panel.create(function(t){var e=t.settings,r=t.setSettings,n=function(){var t,e=(t=ks().mark((function t(e){var n,i;return ks().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.key,i=e.value,window.roamMemo.extensionAPI.settings.set(n,i),r((function(t){return Ps(Ps({},t),{},_s({},n,i))}));case 3:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Cs(a,n,i,o,s,"next",t)}function s(t){Cs(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t){return e.apply(this,arguments)}}(),i=function(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300;return function(){for(var n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];clearTimeout(e),e=setTimeout((function(){t.apply(nn,i)}),r)}}((function(t){return n(t)}));return{tabTitle:"Memo Enhanced",settings:[{id:"fsrsEnabled",name:"Enable FSRS Algorithm/ÂêØÁî®FSRSÁÆóÊ≥ï",description:"Enable the modern FSRS algorithm instead of SM2. FSRS provides better long-term retention prediction. \nÈªòËÆ§ÂêØÁî®Êõ¥ÂÖàËøõÁöÑFSRSÁÆóÊ≥ïÔºåÊèê‰æõÂü∫‰∫éÊú∫Âô®Â≠¶‰π†ÁöÑËÆ∞ÂøÜÈ¢ÑÊµã„ÄÇËã•ÊÉ≥ÂàáÊç¢ÂõûÁªèÂÖ∏ÁöÑSM2ÁÆóÊ≥ïÔºåÂèØÂÖ≥Èó≠Ê≠§ÂºÄÂÖ≥„ÄÇ",action:{type:"switch",checked:e.fsrsEnabled,onChange:function(t){i({key:"fsrsEnabled",value:t.target.checked})}}},{id:"migrate-roam-sr-data",name:"Migrate Roam/Sr Data",description:"A tool to import your Roam/Sr data into Memo Enhanced.",action:{type:"reactComponent",component:function(){return React.createElement(ws,{dataPageTitle:e.dataPageTitle})}}},{id:"dataPageTitle",name:"Data Page Title",description:"Name of page where we'll store all your data",action:{type:"input",placeholder:Ls.dataPageTitle,onChange:function(t){var e=t.target.value.trim();i({key:"dataPageTitle",value:e})}}},{id:"dailyLimit",name:"Daily Review Limit",description:"Number of cards to review each day. 0 means no limit.",action:{type:"input",placeholder:Ls.dailyLimit,onChange:function(t){var e=t.target.value.trim(),r=!isNaN(Number(e));i({key:"dailyLimit",value:r?Number(e):0})}}},{id:"rtlEnabled",name:"Right-to-Left (RTL) Enabled",description:"Enable RTL for languages like Arabic, Hebrew, etc.",action:{type:"switch",checked:e.rtlEnabled,onChange:function(t){i({key:"rtlEnabled",value:t.target.checked})}}},{id:"shuffleCards",name:"Shuffle Cards",description:"Randomly shuffle the order of new and due cards during review.",action:{type:"switch",checked:e.shuffleCards,onChange:function(t){i({key:"shuffleCards",value:t.target.checked})}}},{id:"defaultPriority",name:"Default Priority for New Cards",description:"Set the default priority (0-100) for new cards. Higher numbers = higher priority. New cards will be added to the ranking list with this priority.",action:{type:"input",placeholder:Ls.defaultPriority.toString(),onChange:function(t){var e=t.target.value.trim(),r=Number(e);!isNaN(r)&&r>=0&&r<=100?i({key:"defaultPriority",value:r}):""===e&&i({key:"defaultPriority",value:Ls.defaultPriority})}}}]}}({settings:i,setSettings:a}))}),[a,i.dataPageTitle]),n().useEffect((function(){var t=window.roamMemo.extensionAPI.settings.getAll()||{};"shuffleCards"in t||(t.shuffleCards=Ls.shuffleCards),"schedulingAlgorithm"in t&&!("fsrsEnabled"in t)&&(t.fsrsEnabled="FSRS"===t.schedulingAlgorithm),"fsrsEnabled"in t||(t.fsrsEnabled=Ls.fsrsEnabled);var e=Ms(Ms({},Ls),t);["dailyLimit","defaultPriority"].forEach((function(t){"string"==typeof e[t]&&(e[t]=Number(e[t]))})),a(e),Object.keys(Ls).forEach((function(e){e in t||window.roamMemo.extensionAPI.settings.set(e,Ls[e])}))}),[a]),[i,a]};function Fs(t){return Fs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Fs(t)}function Is(){Is=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Fs(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Fs(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function js(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=Ns(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function Ns(t,e){if(t){if("string"==typeof t)return Rs(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Rs(t,e):void 0}}function Rs(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Bs(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Gs(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Bs(a,n,i,o,s,"next",t)}function s(t){Bs(a,n,i,o,s,"throw",t)}o(void 0)}))}}const Vs=function(t){var e,n,i=t.dataPageTitle,a=r.useMemo((function(){var t=function(){var t=Gs(Is().mark((function t(){var e,r,n,a,o;return Is().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,an(100);case 2:e=(s=Array.from(document.querySelectorAll(".rm-ref-page-view .rm-ref-page-view-title")),function(t){if(Array.isArray(t))return Rs(t)}(s)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(s)||Ns(s)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).filter((function(t){return t.textContent===i})),r=js(e);try{for(r.s();!(n=r.n()).done;)a=n.value,(o=null==a?void 0:a.parentNode.querySelector(".rm-caret-open"))&&vn(o)}catch(t){r.e(t)}finally{r.f()}case 5:case"end":return t.stop()}var s}),t)})));return function(){return t.apply(this,arguments)}}();return t}),[i]),o=(e=r.useState(""),n=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(e,n)||Ns(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[0],l=o[1];r.useEffect((function(){a();var t=function(){l(location.href),a()};return window.addEventListener("popstate",t),function(){window.removeEventListener("popstate",t)}}),[i,a]),r.useEffect((function(){var t=new MutationObserver((function(){a()}));return Gs(Is().mark((function e(){var r;return Is().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,an(100);case 2:if(r=document.querySelector(".roam-log-container")){e.next=5;break}return e.abrupt("return");case 5:t.observe(r,{childList:!0});case 6:case"end":return e.stop()}}),e)})))(),function(){t.disconnect()}}),[a,s])};var zs=__webpack_require__(5207);__webpack_require__.n(zs)();function Hs(t){return Hs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Hs(t)}function $s(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Us(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?$s(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=Hs(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=Hs(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==Hs(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):$s(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function qs(){qs=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Hs(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Hs(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Ws(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Ys(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Ws(a,n,i,o,s,"next",t)}function s(t){Ws(a,n,i,o,s,"throw",t)}o(void 0)}))}}function Xs(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Js(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Js(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Js(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Ks(t){return Ks="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ks(t)}function Zs(){Zs=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Ks(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Ks(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Qs(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function tl(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||el(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function el(t,e){if(t){if("string"==typeof t)return rl(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?rl(t,e):void 0}}function rl(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function nl(t,e){if(t){if("string"==typeof t)return il(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?il(t,e):void 0}}function il(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var al=function(t){if(0===t.length)return 50;var e,r=(e=t,function(t){if(Array.isArray(t))return il(t)}(e)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||nl(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).sort((function(t,e){return t-e})),n=Math.floor(r.length/2);return r.length%2==0?(r[n-1]+r[n])/2:r[n]};const ol=function(t){var e,n,i=t.tagsList,a=(t.practiceData,t.cardUids),o=t.priorityOrder,s=t.allCardsCount,l=t.defaultPriority,c=(e=r.useState(!0),n=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(e,n)||nl(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=c[0],h=c[1],f=r.useMemo((function(){if(!o)return h(!0),{};h(!0);try{var t,e={},r=function(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=nl(t))){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}(i);try{for(r.s();!(t=r.n()).done;){var n=t.value,c=a[n]||[];if(0!==c.length){var u=c.map((function(t){var e=tr({refUid:t,priorityOrder:o,allCardsCount:s,defaultPriority:l});return Math.round(100*(1-(e-1)/Math.max(1,s-1)))})),f=al(u);e[n]={deckName:n,medianPriority:Math.round(f),cardCount:c.length}}else e[n]={deckName:n,medianPriority:l,cardCount:0}}}catch(t){r.e(t)}finally{r.f()}return e}catch(t){return console.error("Error calculating deck priorities:",t),{}}finally{h(!1)}}),[i,a,o,s,l]);return{deckPriorities:f,updateDeckPriority:r.useCallback((function(t,e){console.log("Êõ¥Êñ∞ÁâåÁªÑ ".concat(t," ÁöÑ‰ºòÂÖàÁ∫ßÂà∞ ").concat(e))}),[]),isLoading:u}};function sl(t){return sl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},sl(t)}var ll=["refUid"];function cl(){cl=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:_(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==sl(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function _(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(sl(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(P.prototype),c(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function ul(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}function hl(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function fl(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function pl(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?fl(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=sl(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=sl(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==sl(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):fl(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function dl(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||ml(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ml(t,e){if(t){if("string"==typeof t)return yl(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?yl(t,e):void 0}}function yl(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}const vl=function(){var t=dl(r.useState(!1),2),e=t[0],a=t[1],o=dl(r.useState(!1),2),s=o[0],l=o[1],c=dl(r.useState(""),2),u=c[0],h=c[1],f=dl(Os(),2),p=f[0],d=f[1],m=p.dataPageTitle,y=p.dailyLimit,v=p.rtlEnabled,g=p.shuffleCards,b=p.defaultPriority,x=p.fsrsEnabled,w=p.isGlobalMixedMode,E=function(t){var e=t.dataPageTitle,n=tl(r.useState([]),2),i=n[0],a=n[1],o=tl(r.useState(!0),2),s=o[0],l=o[1],c=r.useRef(!1),u=tl(r.useState(0),2),h=u[0],f=u[1];return r.useEffect((function(){var t=function(){var t,r=(t=Zs().mark((function t(){var r,n,i,o,s;return Zs().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!c.current){t.next=2;break}return t.abrupt("return");case 2:c.current=!0,l(!0);try{r=window.roamAlphaAPI.q("[:find ?title :where [?p :node/title ?title] [?p :block/uid ?uid]]"),n=r.map((function(t){return t[0]})).filter(Boolean),i=/(January|February|March|April|May|June|July|August|September|October|November|December) \d{1,2}(st|nd|rd|th), \d{4}|^\d{4}-\d{2}-\d{2}$/,o=n.filter((function(t){return!i.test(t)&&t!==e})),u=new Set(o),s=function(t){if(Array.isArray(t))return rl(t)}(u)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(u)||el(u)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),a(s)}catch(t){console.error("Ëé∑ÂèñÈ°µÈù¢ÂàóË°®Â§±Ë¥•:",t),a([])}finally{l(!1),c.current=!1}case 5:case"end":return t.stop()}var u}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Qs(a,n,i,o,s,"next",t)}function s(t){Qs(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(){return r.apply(this,arguments)}}();t()}),[e,h]),{allPages:i,isLoading:s,refreshPages:function(){f((function(t){return t+1}))}}}({dataPageTitle:m}),k=E.allPages,S=(E.isLoading,E.refreshPages,r.useMemo((function(){return 0===k.length?"":k.includes(u)?u:k[0]}),[u,k]));r.useEffect((function(){!S||S===u&&u||h(S)}),[S,u,h]);var P,_=function(t){var e=t.dataPageTitle,r=t.selectedTag,i=Xs(n().useState({}),2),a=i[0],o=i[1],s=Xs(n().useState(0),2),l=s[0],c=s[1],u=function(){var t=Ys(qs().mark((function t(n){return qs().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Kt({dataPageTitle:e,selectedTag:r,toDeleteKeyId:n});case 2:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}();n().useEffect((function(){var t=function(){var t=Ys(qs().mark((function t(){var r;return qs().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Cr({dataPageTitle:e});case 2:r=t.sent,o(r);case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();t()}),[l,e,r]);var h,f=n().useCallback((function(){return c((function(t){return t+1}))}),[c]);return{saveCacheData:(h=Ys(qs().mark((function t(n,i){return qs().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Jt(Us({dataPageTitle:e,data:n,selectedTag:r},i));case 2:c((function(t){return t+1}));case 3:case"end":return t.stop()}}),t)}))),function(t,e){return h.apply(this,arguments)}),deleteCacheDataKey:u,fetchCacheData:f,data:r?a[r]||{}:a}}({dataPageTitle:m}),C=_.fetchCacheData,A=_.saveCacheData,T=_.data,M=function(t){var e=t.tagsList,n=t.selectedTag,i=t.dataPageTitle,a=t.cachedData,o=t.isCramming,s=t.dailyLimit,l=t.shuffleCards,c=t.defaultPriority,u=r.useRef({}),h=r.useRef([]),f=r.useRef([]),p=r.useRef({}),d=$o(r.useState(0),2),m=d[0],y=d[1],v=$o(r.useState(!1),2),g=v[0],b=v[1],x=$o(r.useState(ne),2),w=x[0],E=x[1],k=$o(r.useState(0),2),S=k[0],P=k[1],_=r.useMemo((function(){return"number"==typeof c?c:70}),[c]),C=r.useRef(!1);return r.useEffect((function(){var t;C.current||(t=zo().mark((function t(){var r,c,d,m,v,g,b;return zo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n){t.next=2;break}return t.abrupt("return");case 2:return C.current=!0,t.prev=3,t.next=6,yr({tagsList:e,dataPageTitle:i,dailyLimit:s,isCramming:o,shuffleCards:l,cachedData:a,defaultPriority:_});case 6:r=t.sent,c=r.practiceData,d=r.todayStats,m=r.allCardsCount,v=r.priorityOrder,g=r.allCardUids,b=r.cardUids,u.current=c,h.current=v,f.current=g,p.current=b,E(d),P(m),y((function(t){return t+1})),t.next=25;break;case 22:t.prev=22,t.t0=t.catch(3),console.error("üìä [usePracticeData] Êï∞ÊçÆËé∑ÂèñÂ§±Ë¥•:",t.t0);case 25:return t.prev=25,C.current=!1,t.finish(25);case 28:case"end":return t.stop()}}),t,null,[[3,22,25,28]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Ho(a,n,i,o,s,"next",t)}function s(t){Ho(a,n,i,o,s,"throw",t)}o(void 0)}))})()}),[n,i,g,o,s,e,l,a,_]),{get practiceData(){return u.current},get priorityOrder(){return h.current},get allCardUids(){return f.current},get cardUids(){return p.current},fetchPracticeData:function(){return b((function(t){return!t}))},today:w,allCardsCount:S,dataVersion:m}}({tagsList:k,selectedTag:S,dataPageTitle:m,cachedData:T,isCramming:s,dailyLimit:y,shuffleCards:g,defaultPriority:b}),D=M.practiceData,L=M.today,O=M.fetchPracticeData,F=M.allCardsCount,I=M.priorityOrder,j=M.allCardUids,N=M.cardUids,R=ol({tagsList:k,cardUids:N,priorityOrder:I,allCardsCount:F,defaultPriority:b}),B=R.deckPriorities,G=(R.isLoading,r.useMemo((function(){return k&&0!==k.length&&0!==Object.keys(B).length?(t=k,function(t){if(Array.isArray(t))return yl(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||ml(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).sort((function(t,e){var r,n,i,a,o=null!==(r=null===(n=B[t])||void 0===n?void 0:n.medianPriority)&&void 0!==r?r:b;return(null!==(i=null===(a=B[e])||void 0===a?void 0:a.medianPriority)&&void 0!==i?i:b)-o})):k;var t}),[k,B,b])),V=function(){var t,e=(t=cl().mark((function t(e){var r,n,i;return cl().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.refUid,n=ul(e,ll),r){t.next=4;break}return console.error("HandlePracticeFn Error: No refUid provided"),t.abrupt("return");case 4:return t.prev=4,i=pl(pl({},n),{},{dataPageTitle:m,dateCreated:new Date,refUid:r,isCramming:s,fsrsEnabled:x}),t.next=8,Li(i);case 8:t.next=13;break;case 10:t.prev=10,t.t0=t.catch(4),console.error("Error Saving Practice Data",t.t0);case 13:case"end":return t.stop()}}),t,null,[[4,10]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){hl(a,n,i,o,s,"next",t)}function s(t){hl(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t){return e.apply(this,arguments)}}(),z=function(){C(),O()};P=function(){e||z()},r.useEffect((function(){var t=function(){"visible"===document.visibilityState&&P()};return document.addEventListener("visibilitychange",t),function(){document.removeEventListener("visibilitychange",t)}}),[P]);var H=function(){z(),a(!0),l(!1)};Vs({dataPageTitle:m});var $,U,q,W=dl(r.useState([]),2),Y=W[0],X=W[1];return U=($={onEnterCallback:function(t){var e=k.filter((function(e){return t.value.includes(e)}));X(e)},onLeaveCallback:function(t){if(!e){var r=k.filter((function(e){return t.value.includes(e)}));Y.length!==r.length&&O()}}}).onEnterCallback,q=$.onLeaveCallback,n().useEffect((function(){return document.leave("textarea.rm-block-input",q),document.arrive("textarea.rm-block-input",U),function(){document.unbindLeave("textarea.rm-block-input",q),document.unbindArrive("textarea.rm-block-input",U)}}),[U,q]),function(t){var e=t.onShowPracticeOverlay;n().useEffect((function(){var t="Memo: Start Review Session";return window.roamAlphaAPI.ui.commandPalette.addCommand({label:t,callback:function(){return e()}}),function(){window.roamAlphaAPI.ui.commandPalette.removeCommand({label:t})}}),[e])}({onShowPracticeOverlay:H}),r.createElement(i.HotkeysProvider,null,r.createElement(r.Fragment,null,r.createElement(Go,{onClickCallback:H,today:L}),e&&r.createElement(Fo,{isOpen:e,onCloseCallback:function(){a(!1),l(!1),z()},practiceData:D,today:L,handlePracticeClick:V,tagsList:G,selectedTag:S,handleMemoTagChange:h,handleReviewMoreClick:function(){},isCramming:s,setIsCramming:l,rtlEnabled:v,setRenderMode:function(t,e){A({renderMode:e},{selectedTag:t}),C()},dataPageTitle:m,onDataRefresh:z,allCardsCount:F,priorityOrder:I,allCardUids:j,cardUids:N,deckPriorities:B,defaultPriority:b,fsrsEnabled:x,isGlobalMixedMode:w,setIsGlobalMixedMode:function(t){d((function(e){return pl(pl({},e),{},{isGlobalMixedMode:t})})),window.roamMemo.extensionAPI.settings.set("isGlobalMixedMode",t)}})))};console.log("Memo: Initializing...");var gl="roam-memo-wrapper";const bl={onload:function(t){var r=t.extensionAPI;window.roamMemo={extensionAPI:r},i.FocusStyleManager.onlyShowFocusOnTabs();var n,a,o=(n=document.querySelector(".rm-left-sidebar__daily-notes"),(a=document.createElement("div")).id=gl,a.classList.add("log-button"),n&&n.parentNode?n.parentNode.insertBefore(a,n.nextSibling):document.body.appendChild(a),a);e().render(React.createElement(vl,null),o),console.log("Memo: Initialized")},onunload:function(){var t=document.getElementById(gl);try{__webpack_require__(8667).roamFocusManager.forceCleanup()}catch(t){console.error("üéØ Memo Enhanced: Ê∏ÖÁêÜÁÑ¶ÁÇπÁÆ°ÁêÜÂô®Â§±Ë¥•:",t)}try{__webpack_require__(1419).roamZIndexManager.removeZIndexFix()}catch(t){console.error("üîß Memo Enhanced: Ê∏ÖÁêÜÂ±ÇÁ∫ßÁÆ°ÁêÜÂô®Â§±Ë¥•:",t)}t&&(e().unmountComponentAtNode(t),t.remove()),console.log("Memo: Unloaded - ÊâÄÊúâ‰øÆÂ§çËÑöÊú¨Â∑≤Ê∏ÖÁêÜ")}}})();var __webpack_exports__default=__webpack_exports__.A;export{__webpack_exports__default as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVE4cEIsTUFBTSwrQkFBZ0NBLEVBQ3RELENBRUlrSSxJQUNGd2dILElBQUFBLHVCQUFnQ3hnSCxHQUNoQ0EsRUFBVTZnSCxVQUdaN3lJLFFBQVFDLElBQUksNkJBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2Fycml2ZS9zcmMvYXJyaXZlLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9zcmMvdXRpbHMvcm9hbUZvY3VzTWFuYWdlci50cyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vc3JjL3V0aWxzL3JvYW1aSW5kZXhNYW5hZ2VyLnRzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvZGF5anMvZGF5anMubWluLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL2NhbGVuZGFyLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL3JlbGF0aXZlVGltZS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL2xvdHRpZS13ZWIvYnVpbGQvcGxheWVyL2xvdHRpZS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvcmVhY3QtbG90dGllL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC9leHRlcm5hbCB3aW5kb3cgXCJSZWFjdFwiIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC93ZWJwYWNrL3J1bnRpbWUvYW1kIG9wdGlvbnMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvZXh0ZXJuYWwgd2luZG93IFwiUmVhY3RET01cIiIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkL2V4dGVybmFsIHdpbmRvdyBbXCJCbHVlcHJpbnRcIixcIkNvcmVcIl0iLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC9leHRlcm5hbCB3aW5kb3cgW1wiQmx1ZXByaW50XCIsXCJTZWxlY3RcIl0iLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5lc20uanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NoZWV0L2Rpc3QvZW1vdGlvbi1zaGVldC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVXRpbGl0eS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVG9rZW5pemVyLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9FbnVtLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9TZXJpYWxpemVyLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9QYXJzZXIuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9jYWNoZS9kaXN0L2Vtb3Rpb24tY2FjaGUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL01pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L2Vtb3Rpb24tdW5pdGxlc3MuZXNtLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2VyaWFsaXplL2Rpc3QvZW1vdGlvbi1zZXJpYWxpemUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcy9kaXN0L2Vtb3Rpb24tdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9kaXN0L2Vtb3Rpb24tZWxlbWVudC1jMzk2MTdkOC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3V0aWxzL2Rpc3QvZW1vdGlvbi11dGlscy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9kaXN0L2Vtb3Rpb24tc3R5bGVkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaGFzaC9kaXN0L2Vtb3Rpb24taGFzaC5lc20uanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy91dGlscy9zdHJpbmcudHMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy91dGlscy9kYXRlLnRzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9zcmMvcXVlcmllcy9jYWNoZS50cyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vc3JjL21vZGVscy9zZXNzaW9uLnRzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9zcmMvdXRpbHMvb2JqZWN0LnRzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9zcmMvbW9kZWxzL3ByYWN0aWNlLnRzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9zcmMvcXVlcmllcy91dGlscy50cyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vc3JjL3F1ZXJpZXMvdG9kYXkudHMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9xdWVyaWVzL3NhdmUudHMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9xdWVyaWVzL2RhdGEudHMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9xdWVyaWVzL2xlZ2FjeVJvYW1Tci50cyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vc3JjL2hvb2tzL3VzZUJsb2NrSW5mby50c3giLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy91dGlscy9hc3luYy50cyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vc3JjL2NvbXBvbmVudHMvVG9vbHRpcC50c3giLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy91dGlscy9tZWRpYVF1ZXJpZXMudHMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9ob29rcy91c2VaSW5kZXhGaXgudHMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy91dGlscy9kb20udHMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9ob29rcy91c2VDbG96ZS50c3giLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9jb21wb25lbnRzL292ZXJsYXkvQ2FyZEJsb2NrLnRzeCIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vbm9kZV9tb2R1bGVzL3RzLWZzcnMvZGlzdC9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9hbGdvcml0aG1zL2ZzcnMudHMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9wcmFjdGljZS50cyIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vc3JjL2NvbXBvbmVudHMvQnV0dG9uVGFncy50c3giLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9jb21wb25lbnRzL292ZXJsYXkvRm9vdGVyLnRzeCIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vc3JjL2NvbXBvbmVudHMvb3ZlcmxheS9Qcmlvcml0eVNsaWRlci50c3giLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9jb21wb25lbnRzL09mZnNldFNsaWRlci50c3giLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9jb21wb25lbnRzL0RlY2tQcmlvcml0eU1hbmFnZXIudHN4Iiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9zcmMvaG9va3MvdXNlQ3VycmVudENhcmREYXRhLnRzeCIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vc3JjL2NvbXBvbmVudHMvb3ZlcmxheS9QcmFjdGljZU92ZXJsYXkudHN4Iiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9zcmMvaG9va3MvdXNlU2FmZUNvbnRleHQudHN4Iiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9zcmMvaG9va3MvdXNlRm9jdXNGaXgudHMiLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9jb21wb25lbnRzL1NpZGVQYW5lbFdpZGdldC50c3giLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9ob29rcy91c2VQcmFjdGljZURhdGEudHN4Iiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9zcmMvY29tcG9uZW50cy9Sb2FtU3JJbXBvcnRQYW5lbC50c3giLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9zZXR0aW5nc1BhbmVsQ29uZmlnLnRzeCIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vc3JjL2hvb2tzL3VzZVNldHRpbmdzLnRzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9zcmMvaG9va3MvdXNlQ29sbGFwc2VSZWZlcmVuY2VMaXN0LnRzeCIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vc3JjL2hvb2tzL3VzZU9uQmxvY2tJbnRlcmFjdC50c3giLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9ob29rcy91c2VDYWNoZWREYXRhLnRzIiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9zcmMvaG9va3MvdXNlQWxsUGFnZXMudHN4Iiwid2VicGFjazovL21lbW8tZW5oYW5jZWQvLi9zcmMvaG9va3MvdXNlRGVja1ByaW9yaXR5LnRzeCIsIndlYnBhY2s6Ly9tZW1vLWVuaGFuY2VkLy4vc3JjL2FwcC50c3giLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9ob29rcy91c2VPblZpc2liaWxpdHlTdGF0ZUNoYW5nZS50c3giLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9ob29rcy91c2VDb21tYW5kUGFsZXR0ZUFjdGlvbi50c3giLCJ3ZWJwYWNrOi8vbWVtby1lbmhhbmNlZC8uL3NyYy9leHRlbnNpb24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFscyBqUXVlcnksV2luZG93LEhUTUxFbGVtZW50LEhUTUxEb2N1bWVudCxIVE1MQ29sbGVjdGlvbixOb2RlTGlzdCxNdXRhdGlvbk9ic2VydmVyICovXG4vKmV4cG9ydGVkIEFycml2ZSovXG4vKmpzaGludCBsYXRlZGVmOmZhbHNlICovXG5cbi8qXG4gKiBhcnJpdmUuanNcbiAqIHYyLjQuMVxuICogaHR0cHM6Ly9naXRodWIuY29tL3V6YWlyZmFyb29xL2Fycml2ZVxuICogTUlUIGxpY2Vuc2VkXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcgVXphaXIgRmFyb29xXG4gKi9cbnZhciBBcnJpdmUgPSAoZnVuY3Rpb24od2luZG93LCAkLCB1bmRlZmluZWQpIHtcblxuICBcInVzZSBzdHJpY3RcIjtcblxuICBpZighd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgdHlwZW9mIEhUTUxFbGVtZW50ID09PSAndW5kZWZpbmVkJyl7XG4gICAgcmV0dXJuOyAvL2ZvciB1bnN1cHBvcnRlZCBicm93c2Vyc1xuICB9XG5cbiAgdmFyIGFycml2ZVVuaXF1ZUlkID0gMDtcblxuICB2YXIgdXRpbHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1hdGNoZXMgPSBIVE1MRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyB8fCBIVE1MRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IEhUTUxFbGVtZW50LnByb3RvdHlwZS5tb3pNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgICAgICAgICAgIHx8IEhUTUxFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvcjtcblxuICAgIHJldHVybiB7XG4gICAgICBtYXRjaGVzU2VsZWN0b3I6IGZ1bmN0aW9uKGVsZW0sIHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBlbGVtIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgbWF0Y2hlcy5jYWxsKGVsZW0sIHNlbGVjdG9yKTtcbiAgICAgIH0sXG4gICAgICAvLyB0byBlbmFibGUgZnVuY3Rpb24gb3ZlcmxvYWRpbmcgLSBCeSBKb2huIFJlc2lnIChNSVQgTGljZW5zZWQpXG4gICAgICBhZGRNZXRob2Q6IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIGZuKSB7XG4gICAgICAgIHZhciBvbGQgPSBvYmplY3RbIG5hbWUgXTtcbiAgICAgICAgb2JqZWN0WyBuYW1lIF0gPSBmdW5jdGlvbigpe1xuICAgICAgICAgIGlmICggZm4ubGVuZ3RoID09IGFyZ3VtZW50cy5sZW5ndGggKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICggdHlwZW9mIG9sZCA9PSAnZnVuY3Rpb24nICkge1xuICAgICAgICAgICAgcmV0dXJuIG9sZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGNhbGxDYWxsYmFja3M6IGZ1bmN0aW9uKGNhbGxiYWNrc1RvQmVDYWxsZWQsIHJlZ2lzdHJhdGlvbkRhdGEpIHtcbiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbkRhdGEgJiYgcmVnaXN0cmF0aW9uRGF0YS5vcHRpb25zLm9uY2VPbmx5ICYmIHJlZ2lzdHJhdGlvbkRhdGEuZmlyZWRFbGVtcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgIC8vIGFzIG9ubHlPbmNlIHBhcmFtIGlzIHRydWUsIG1ha2Ugc3VyZSB3ZSBmaXJlIHRoZSBldmVudCBmb3Igb25seSBvbmUgaXRlbVxuICAgICAgICAgIGNhbGxiYWNrc1RvQmVDYWxsZWQgPSBbY2FsbGJhY2tzVG9CZUNhbGxlZFswXV07XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgY2I7IChjYiA9IGNhbGxiYWNrc1RvQmVDYWxsZWRbaV0pOyBpKyspIHtcbiAgICAgICAgICBpZiAoY2IgJiYgY2IuY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNiLmNhbGxiYWNrLmNhbGwoY2IuZWxlbSwgY2IuZWxlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbkRhdGEgJiYgcmVnaXN0cmF0aW9uRGF0YS5vcHRpb25zLm9uY2VPbmx5ICYmIHJlZ2lzdHJhdGlvbkRhdGEuZmlyZWRFbGVtcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgIC8vIHVuYmluZCBldmVudCBhZnRlciBmaXJzdCBjYWxsYmFjayBhcyBvbmNlT25seSBpcyB0cnVlLlxuICAgICAgICAgIHJlZ2lzdHJhdGlvbkRhdGEubWUudW5iaW5kRXZlbnRXaXRoU2VsZWN0b3JBbmRDYWxsYmFjay5jYWxsKFxuICAgICAgICAgICAgcmVnaXN0cmF0aW9uRGF0YS50YXJnZXQsIHJlZ2lzdHJhdGlvbkRhdGEuc2VsZWN0b3IsIHJlZ2lzdHJhdGlvbkRhdGEuY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gdHJhdmVyc2UgdGhyb3VnaCBhbGwgZGVzY2VuZGFudHMgb2YgYSBub2RlIHRvIGNoZWNrIGlmIGV2ZW50IHNob3VsZCBiZSBmaXJlZCBmb3IgYW55IGRlc2NlbmRhbnRcbiAgICAgIGNoZWNrQ2hpbGROb2Rlc1JlY3Vyc2l2ZWx5OiBmdW5jdGlvbihub2RlcywgcmVnaXN0cmF0aW9uRGF0YSwgbWF0Y2hGdW5jLCBjYWxsYmFja3NUb0JlQ2FsbGVkKSB7XG4gICAgICAgIC8vIGNoZWNrIGVhY2ggbmV3IG5vZGUgaWYgaXQgbWF0Y2hlcyB0aGUgc2VsZWN0b3JcbiAgICAgICAgZm9yICh2YXIgaT0wLCBub2RlOyAobm9kZSA9IG5vZGVzW2ldKTsgaSsrKSB7XG4gICAgICAgICAgaWYgKG1hdGNoRnVuYyhub2RlLCByZWdpc3RyYXRpb25EYXRhLCBjYWxsYmFja3NUb0JlQ2FsbGVkKSkge1xuICAgICAgICAgICAgY2FsbGJhY2tzVG9CZUNhbGxlZC5wdXNoKHsgY2FsbGJhY2s6IHJlZ2lzdHJhdGlvbkRhdGEuY2FsbGJhY2ssIGVsZW06IG5vZGUgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB1dGlscy5jaGVja0NoaWxkTm9kZXNSZWN1cnNpdmVseShub2RlLmNoaWxkTm9kZXMsIHJlZ2lzdHJhdGlvbkRhdGEsIG1hdGNoRnVuYywgY2FsbGJhY2tzVG9CZUNhbGxlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbWVyZ2VBcnJheXM6IGZ1bmN0aW9uKGZpcnN0QXJyLCBzZWNvbmRBcnIpe1xuICAgICAgICAvLyBPdmVyd3JpdGVzIGRlZmF1bHQgb3B0aW9ucyB3aXRoIHVzZXItZGVmaW5lZCBvcHRpb25zLlxuICAgICAgICB2YXIgb3B0aW9ucyA9IHt9LFxuICAgICAgICAgICAgYXR0ck5hbWU7XG4gICAgICAgIGZvciAoYXR0ck5hbWUgaW4gZmlyc3RBcnIpIHtcbiAgICAgICAgICBpZiAoZmlyc3RBcnIuaGFzT3duUHJvcGVydHkoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICBvcHRpb25zW2F0dHJOYW1lXSA9IGZpcnN0QXJyW2F0dHJOYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChhdHRyTmFtZSBpbiBzZWNvbmRBcnIpIHtcbiAgICAgICAgICBpZiAoc2Vjb25kQXJyLmhhc093blByb3BlcnR5KGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgb3B0aW9uc1thdHRyTmFtZV0gPSBzZWNvbmRBcnJbYXR0ck5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgIH0sXG4gICAgICB0b0VsZW1lbnRzQXJyYXk6IGZ1bmN0aW9uIChlbGVtZW50cykge1xuICAgICAgICAvLyBjaGVjayBpZiBvYmplY3QgaXMgYW4gYXJyYXkgKG9yIGFycmF5IGxpa2Ugb2JqZWN0KVxuICAgICAgICAvLyBOb3RlOiB3aW5kb3cgb2JqZWN0IGhhcyAubGVuZ3RoIHByb3BlcnR5IGJ1dCBpdCdzIG5vdCBhcnJheSBvZiBlbGVtZW50cyBzbyBkb24ndCBjb25zaWRlciBpdCBhbiBhcnJheVxuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnRzICE9PSBcInVuZGVmaW5lZFwiICYmICh0eXBlb2YgZWxlbWVudHMubGVuZ3RoICE9PSBcIm51bWJlclwiIHx8IGVsZW1lbnRzID09PSB3aW5kb3cpKSB7XG4gICAgICAgICAgZWxlbWVudHMgPSBbZWxlbWVudHNdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpO1xuXG5cbiAgLy8gQ2xhc3MgdG8gbWFpbnRhaW4gc3RhdGUgb2YgYWxsIHJlZ2lzdGVyZWQgZXZlbnRzIG9mIGEgc2luZ2xlIHR5cGVcbiAgdmFyIEV2ZW50c0J1Y2tldCA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgRXZlbnRzQnVja2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBob2xkcyBhbGwgdGhlIGV2ZW50c1xuXG4gICAgICB0aGlzLl9ldmVudHNCdWNrZXQgICAgPSBbXTtcbiAgICAgIC8vIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGlsZSBhZGRpbmcgYW4gZXZlbnQsIHRoZSBmdW5jdGlvbiBzaG91bGQgZG8gdGhlIGV2ZW50IGluaXRpYWxpemF0aW9uL3JlZ2lzdHJhdGlvblxuICAgICAgdGhpcy5fYmVmb3JlQWRkaW5nICAgID0gbnVsbDtcbiAgICAgIC8vIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGlsZSByZW1vdmluZyBhbiBldmVudCwgdGhlIGZ1bmN0aW9uIHNob3VsZCBkbyB0aGUgZXZlbnQgZGVzdHJ1Y3Rpb25cbiAgICAgIHRoaXMuX2JlZm9yZVJlbW92aW5nICA9IG51bGw7XG4gICAgfTtcblxuICAgIEV2ZW50c0J1Y2tldC5wcm90b3R5cGUuYWRkRXZlbnQgPSBmdW5jdGlvbih0YXJnZXQsIHNlbGVjdG9yLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgdmFyIG5ld0V2ZW50ID0ge1xuICAgICAgICB0YXJnZXQ6ICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgc2VsZWN0b3I6ICAgICAgICAgICBzZWxlY3RvcixcbiAgICAgICAgb3B0aW9uczogICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICBjYWxsYmFjazogICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICBmaXJlZEVsZW1zOiAgICAgICAgIFtdXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5fYmVmb3JlQWRkaW5nKSB7XG4gICAgICAgIHRoaXMuX2JlZm9yZUFkZGluZyhuZXdFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2V2ZW50c0J1Y2tldC5wdXNoKG5ld0V2ZW50KTtcbiAgICAgIHJldHVybiBuZXdFdmVudDtcbiAgICB9O1xuXG4gICAgRXZlbnRzQnVja2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKGNvbXBhcmVGdW5jdGlvbikge1xuICAgICAgZm9yICh2YXIgaT10aGlzLl9ldmVudHNCdWNrZXQubGVuZ3RoIC0gMSwgcmVnaXN0ZXJlZEV2ZW50OyAocmVnaXN0ZXJlZEV2ZW50ID0gdGhpcy5fZXZlbnRzQnVja2V0W2ldKTsgaS0tKSB7XG4gICAgICAgIGlmIChjb21wYXJlRnVuY3Rpb24ocmVnaXN0ZXJlZEV2ZW50KSkge1xuICAgICAgICAgIGlmICh0aGlzLl9iZWZvcmVSZW1vdmluZykge1xuICAgICAgICAgICAgICB0aGlzLl9iZWZvcmVSZW1vdmluZyhyZWdpc3RlcmVkRXZlbnQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIG1hcmsgY2FsbGJhY2sgYXMgbnVsbCBzbyB0aGF0IGV2ZW4gaWYgYW4gZXZlbnQgbXV0YXRpb24gd2FzIGFscmVhZHkgdHJpZ2dlcmVkIGl0IGRvZXMgbm90IGNhbGwgY2FsbGJhY2tcbiAgICAgICAgICB2YXIgcmVtb3ZlZEV2ZW50cyA9IHRoaXMuX2V2ZW50c0J1Y2tldC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgaWYgKHJlbW92ZWRFdmVudHMgJiYgcmVtb3ZlZEV2ZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlbW92ZWRFdmVudHNbMF0uY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBFdmVudHNCdWNrZXQucHJvdG90eXBlLmJlZm9yZUFkZGluZyA9IGZ1bmN0aW9uKGJlZm9yZUFkZGluZykge1xuICAgICAgdGhpcy5fYmVmb3JlQWRkaW5nID0gYmVmb3JlQWRkaW5nO1xuICAgIH07XG5cbiAgICBFdmVudHNCdWNrZXQucHJvdG90eXBlLmJlZm9yZVJlbW92aW5nID0gZnVuY3Rpb24oYmVmb3JlUmVtb3ZpbmcpIHtcbiAgICAgIHRoaXMuX2JlZm9yZVJlbW92aW5nID0gYmVmb3JlUmVtb3Zpbmc7XG4gICAgfTtcblxuICAgIHJldHVybiBFdmVudHNCdWNrZXQ7XG4gIH0pKCk7XG5cblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEdlbmVyYWwgY2xhc3MgZm9yIGJpbmRpbmcvdW5iaW5kaW5nIGFycml2ZSBhbmQgbGVhdmUgZXZlbnRzXG4gICAqL1xuICB2YXIgTXV0YXRpb25FdmVudHMgPSBmdW5jdGlvbihnZXRPYnNlcnZlckNvbmZpZywgb25NdXRhdGlvbikge1xuICAgIHZhciBldmVudHNCdWNrZXQgICAgPSBuZXcgRXZlbnRzQnVja2V0KCksXG4gICAgICAgIG1lICAgICAgICAgICAgICA9IHRoaXM7XG5cbiAgICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICBmaXJlT25BdHRyaWJ1dGVzTW9kaWZpY2F0aW9uOiBmYWxzZVxuICAgIH07XG5cbiAgICAvLyBhY3R1YWwgZXZlbnQgcmVnaXN0cmF0aW9uIGJlZm9yZSBhZGRpbmcgaXQgdG8gYnVja2V0XG4gICAgZXZlbnRzQnVja2V0LmJlZm9yZUFkZGluZyhmdW5jdGlvbihyZWdpc3RyYXRpb25EYXRhKSB7XG4gICAgICB2YXJcbiAgICAgICAgdGFyZ2V0ICAgID0gcmVnaXN0cmF0aW9uRGF0YS50YXJnZXQsXG4gICAgICAgIG9ic2VydmVyO1xuXG4gICAgICAvLyBtdXRhdGlvbiBvYnNlcnZlciBkb2VzIG5vdCB3b3JrIG9uIHdpbmRvdyBvciBkb2N1bWVudFxuICAgICAgaWYgKHRhcmdldCA9PT0gd2luZG93LmRvY3VtZW50IHx8IHRhcmdldCA9PT0gd2luZG93KSB7XG4gICAgICAgIHRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaHRtbFwiKVswXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlXG4gICAgICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgb25NdXRhdGlvbi5jYWxsKHRoaXMsIGUsIHJlZ2lzdHJhdGlvbkRhdGEpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjb25maWcgPSBnZXRPYnNlcnZlckNvbmZpZyhyZWdpc3RyYXRpb25EYXRhLm9wdGlvbnMpO1xuXG4gICAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwgY29uZmlnKTtcblxuICAgICAgcmVnaXN0cmF0aW9uRGF0YS5vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgICAgcmVnaXN0cmF0aW9uRGF0YS5tZSA9IG1lO1xuICAgIH0pO1xuXG4gICAgLy8gY2xlYW51cC91bnJlZ2lzdGVyIGJlZm9yZSByZW1vdmluZyBhbiBldmVudFxuICAgIGV2ZW50c0J1Y2tldC5iZWZvcmVSZW1vdmluZyhmdW5jdGlvbiAoZXZlbnREYXRhKSB7XG4gICAgICBldmVudERhdGEub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5iaW5kRXZlbnQgPSBmdW5jdGlvbihzZWxlY3Rvciwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgIG9wdGlvbnMgPSB1dGlscy5tZXJnZUFycmF5cyhkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxzLnRvRWxlbWVudHNBcnJheSh0aGlzKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBldmVudHNCdWNrZXQuYWRkRXZlbnQoZWxlbWVudHNbaV0sIHNlbGVjdG9yLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMudW5iaW5kRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxzLnRvRWxlbWVudHNBcnJheSh0aGlzKTtcbiAgICAgIGV2ZW50c0J1Y2tldC5yZW1vdmVFdmVudChmdW5jdGlvbihldmVudE9iaikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMgPT09IHVuZGVmaW5lZCB8fCBldmVudE9iai50YXJnZXQgPT09IGVsZW1lbnRzW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMudW5iaW5kRXZlbnRXaXRoU2VsZWN0b3JPckNhbGxiYWNrID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxzLnRvRWxlbWVudHNBcnJheSh0aGlzKSxcbiAgICAgICAgICBjYWxsYmFjayA9IHNlbGVjdG9yLFxuICAgICAgICAgIGNvbXBhcmVGdW5jdGlvbjtcblxuICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNvbXBhcmVGdW5jdGlvbiA9IGZ1bmN0aW9uKGV2ZW50T2JqKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCh0aGlzID09PSB1bmRlZmluZWQgfHwgZXZlbnRPYmoudGFyZ2V0ID09PSBlbGVtZW50c1tpXSkgJiYgZXZlbnRPYmouY2FsbGJhY2sgPT09IGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29tcGFyZUZ1bmN0aW9uID0gZnVuY3Rpb24oZXZlbnRPYmopIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKHRoaXMgPT09IHVuZGVmaW5lZCB8fCBldmVudE9iai50YXJnZXQgPT09IGVsZW1lbnRzW2ldKSAmJiBldmVudE9iai5zZWxlY3RvciA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGV2ZW50c0J1Y2tldC5yZW1vdmVFdmVudChjb21wYXJlRnVuY3Rpb24pO1xuICAgIH07XG5cbiAgICB0aGlzLnVuYmluZEV2ZW50V2l0aFNlbGVjdG9yQW5kQ2FsbGJhY2sgPSBmdW5jdGlvbihzZWxlY3RvciwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxzLnRvRWxlbWVudHNBcnJheSh0aGlzKTtcbiAgICAgIGV2ZW50c0J1Y2tldC5yZW1vdmVFdmVudChmdW5jdGlvbihldmVudE9iaikge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgodGhpcyA9PT0gdW5kZWZpbmVkIHx8IGV2ZW50T2JqLnRhcmdldCA9PT0gZWxlbWVudHNbaV0pICYmIGV2ZW50T2JqLnNlbGVjdG9yID09PSBzZWxlY3RvciAmJiBldmVudE9iai5jYWxsYmFjayA9PT0gY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogUHJvY2Vzc2VzICdhcnJpdmUnIGV2ZW50c1xuICAgKi9cbiAgdmFyIEFycml2ZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIERlZmF1bHQgb3B0aW9ucyBmb3IgJ2Fycml2ZScgZXZlbnRcbiAgICB2YXIgYXJyaXZlRGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICBmaXJlT25BdHRyaWJ1dGVzTW9kaWZpY2F0aW9uOiBmYWxzZSxcbiAgICAgIG9uY2VPbmx5OiBmYWxzZSxcbiAgICAgIGV4aXN0aW5nOiBmYWxzZVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRBcnJpdmVPYnNlcnZlckNvbmZpZyhvcHRpb25zKSB7XG4gICAgICB2YXIgY29uZmlnID0ge1xuICAgICAgICBhdHRyaWJ1dGVzOiBmYWxzZSxcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgICB9O1xuXG4gICAgICBpZiAob3B0aW9ucy5maXJlT25BdHRyaWJ1dGVzTW9kaWZpY2F0aW9uKSB7XG4gICAgICAgIGNvbmZpZy5hdHRyaWJ1dGVzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkFycml2ZU11dGF0aW9uKG11dGF0aW9ucywgcmVnaXN0cmF0aW9uRGF0YSkge1xuICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24oIG11dGF0aW9uICkge1xuICAgICAgICB2YXIgbmV3Tm9kZXMgICAgPSBtdXRhdGlvbi5hZGRlZE5vZGVzLFxuICAgICAgICAgICAgdGFyZ2V0Tm9kZSA9IG11dGF0aW9uLnRhcmdldCxcbiAgICAgICAgICAgIGNhbGxiYWNrc1RvQmVDYWxsZWQgPSBbXSxcbiAgICAgICAgICAgIG5vZGU7XG5cbiAgICAgICAgLy8gSWYgbmV3IG5vZGVzIGFyZSBhZGRlZFxuICAgICAgICBpZiggbmV3Tm9kZXMgIT09IG51bGwgJiYgbmV3Tm9kZXMubGVuZ3RoID4gMCApIHtcbiAgICAgICAgICB1dGlscy5jaGVja0NoaWxkTm9kZXNSZWN1cnNpdmVseShuZXdOb2RlcywgcmVnaXN0cmF0aW9uRGF0YSwgbm9kZU1hdGNoRnVuYywgY2FsbGJhY2tzVG9CZUNhbGxlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobXV0YXRpb24udHlwZSA9PT0gXCJhdHRyaWJ1dGVzXCIpIHtcbiAgICAgICAgICBpZiAobm9kZU1hdGNoRnVuYyh0YXJnZXROb2RlLCByZWdpc3RyYXRpb25EYXRhLCBjYWxsYmFja3NUb0JlQ2FsbGVkKSkge1xuICAgICAgICAgICAgY2FsbGJhY2tzVG9CZUNhbGxlZC5wdXNoKHsgY2FsbGJhY2s6IHJlZ2lzdHJhdGlvbkRhdGEuY2FsbGJhY2ssIGVsZW06IHRhcmdldE5vZGUgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdXRpbHMuY2FsbENhbGxiYWNrcyhjYWxsYmFja3NUb0JlQ2FsbGVkLCByZWdpc3RyYXRpb25EYXRhKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vZGVNYXRjaEZ1bmMobm9kZSwgcmVnaXN0cmF0aW9uRGF0YSwgY2FsbGJhY2tzVG9CZUNhbGxlZCkge1xuICAgICAgLy8gY2hlY2sgYSBzaW5nbGUgbm9kZSB0byBzZWUgaWYgaXQgbWF0Y2hlcyB0aGUgc2VsZWN0b3JcbiAgICAgIGlmICh1dGlscy5tYXRjaGVzU2VsZWN0b3Iobm9kZSwgcmVnaXN0cmF0aW9uRGF0YS5zZWxlY3RvcikpIHtcbiAgICAgICAgaWYobm9kZS5faWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5vZGUuX2lkID0gYXJyaXZlVW5pcXVlSWQrKztcbiAgICAgICAgfVxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGFycml2ZSBldmVudCBpcyBub3QgYWxyZWFkeSBmaXJlZCBmb3IgdGhlIGVsZW1lbnRcbiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbkRhdGEuZmlyZWRFbGVtcy5pbmRleE9mKG5vZGUuX2lkKSA9PSAtMSkge1xuICAgICAgICAgIHJlZ2lzdHJhdGlvbkRhdGEuZmlyZWRFbGVtcy5wdXNoKG5vZGUuX2lkKTtcblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBhcnJpdmVFdmVudHMgPSBuZXcgTXV0YXRpb25FdmVudHMoZ2V0QXJyaXZlT2JzZXJ2ZXJDb25maWcsIG9uQXJyaXZlTXV0YXRpb24pO1xuXG4gICAgdmFyIG11dGF0aW9uQmluZEV2ZW50ID0gYXJyaXZlRXZlbnRzLmJpbmRFdmVudDtcblxuICAgIC8vIG92ZXJyaWRlIGJpbmRFdmVudCBmdW5jdGlvblxuICAgIGFycml2ZUV2ZW50cy5iaW5kRXZlbnQgPSBmdW5jdGlvbihzZWxlY3Rvciwgb3B0aW9ucywgY2FsbGJhY2spIHtcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSBhcnJpdmVEZWZhdWx0T3B0aW9ucztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMgPSB1dGlscy5tZXJnZUFycmF5cyhhcnJpdmVEZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50cyA9IHV0aWxzLnRvRWxlbWVudHNBcnJheSh0aGlzKTtcblxuICAgICAgaWYgKG9wdGlvbnMuZXhpc3RpbmcpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBub2RlcyA9IGVsZW1lbnRzW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbm9kZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGV4aXN0aW5nLnB1c2goeyBjYWxsYmFjazogY2FsbGJhY2ssIGVsZW06IG5vZGVzW2pdIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vIG5lZWQgdG8gYmluZCBldmVudCBpZiB0aGUgY2FsbGJhY2sgaGFzIHRvIGJlIGZpcmVkIG9ubHkgb25jZSBhbmQgd2UgaGF2ZSBhbHJlYWR5IGZvdW5kIHRoZSBlbGVtZW50XG4gICAgICAgIGlmIChvcHRpb25zLm9uY2VPbmx5ICYmIGV4aXN0aW5nLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKGV4aXN0aW5nWzBdLmVsZW0sIGV4aXN0aW5nWzBdLmVsZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0VGltZW91dCh1dGlscy5jYWxsQ2FsbGJhY2tzLCAxLCBleGlzdGluZyk7XG4gICAgICB9XG5cbiAgICAgIG11dGF0aW9uQmluZEV2ZW50LmNhbGwodGhpcywgc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGFycml2ZUV2ZW50cztcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogUHJvY2Vzc2VzICdsZWF2ZScgZXZlbnRzXG4gICAqL1xuICB2YXIgTGVhdmVFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBEZWZhdWx0IG9wdGlvbnMgZm9yICdsZWF2ZScgZXZlbnRcbiAgICB2YXIgbGVhdmVEZWZhdWx0T3B0aW9ucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZ2V0TGVhdmVPYnNlcnZlckNvbmZpZygpIHtcbiAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkxlYXZlTXV0YXRpb24obXV0YXRpb25zLCByZWdpc3RyYXRpb25EYXRhKSB7XG4gICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiggbXV0YXRpb24gKSB7XG4gICAgICAgIHZhciByZW1vdmVkTm9kZXMgID0gbXV0YXRpb24ucmVtb3ZlZE5vZGVzLFxuICAgICAgICAgICAgY2FsbGJhY2tzVG9CZUNhbGxlZCA9IFtdO1xuXG4gICAgICAgIGlmKCByZW1vdmVkTm9kZXMgIT09IG51bGwgJiYgcmVtb3ZlZE5vZGVzLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgdXRpbHMuY2hlY2tDaGlsZE5vZGVzUmVjdXJzaXZlbHkocmVtb3ZlZE5vZGVzLCByZWdpc3RyYXRpb25EYXRhLCBub2RlTWF0Y2hGdW5jLCBjYWxsYmFja3NUb0JlQ2FsbGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHV0aWxzLmNhbGxDYWxsYmFja3MoY2FsbGJhY2tzVG9CZUNhbGxlZCwgcmVnaXN0cmF0aW9uRGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub2RlTWF0Y2hGdW5jKG5vZGUsIHJlZ2lzdHJhdGlvbkRhdGEpIHtcbiAgICAgIHJldHVybiB1dGlscy5tYXRjaGVzU2VsZWN0b3Iobm9kZSwgcmVnaXN0cmF0aW9uRGF0YS5zZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgbGVhdmVFdmVudHMgPSBuZXcgTXV0YXRpb25FdmVudHMoZ2V0TGVhdmVPYnNlcnZlckNvbmZpZywgb25MZWF2ZU11dGF0aW9uKTtcblxuICAgIHZhciBtdXRhdGlvbkJpbmRFdmVudCA9IGxlYXZlRXZlbnRzLmJpbmRFdmVudDtcblxuICAgIC8vIG92ZXJyaWRlIGJpbmRFdmVudCBmdW5jdGlvblxuICAgIGxlYXZlRXZlbnRzLmJpbmRFdmVudCA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBvcHRpb25zLCBjYWxsYmFjaykge1xuXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IGxlYXZlRGVmYXVsdE9wdGlvbnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zID0gdXRpbHMubWVyZ2VBcnJheXMobGVhdmVEZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIG11dGF0aW9uQmluZEV2ZW50LmNhbGwodGhpcywgc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxlYXZlRXZlbnRzO1xuICB9O1xuXG5cbiAgdmFyIGFycml2ZUV2ZW50cyA9IG5ldyBBcnJpdmVFdmVudHMoKSxcbiAgICAgIGxlYXZlRXZlbnRzICA9IG5ldyBMZWF2ZUV2ZW50cygpO1xuXG4gIGZ1bmN0aW9uIGV4cG9zZVVuYmluZEFwaShldmVudE9iaiwgZXhwb3NlVG8sIGZ1bmNOYW1lKSB7XG4gICAgLy8gZXhwb3NlIHVuYmluZCBmdW5jdGlvbiB3aXRoIGZ1bmN0aW9uIG92ZXJyaWRpbmdcbiAgICB1dGlscy5hZGRNZXRob2QoZXhwb3NlVG8sIGZ1bmNOYW1lLCBldmVudE9iai51bmJpbmRFdmVudCk7XG4gICAgdXRpbHMuYWRkTWV0aG9kKGV4cG9zZVRvLCBmdW5jTmFtZSwgZXZlbnRPYmoudW5iaW5kRXZlbnRXaXRoU2VsZWN0b3JPckNhbGxiYWNrKTtcbiAgICB1dGlscy5hZGRNZXRob2QoZXhwb3NlVG8sIGZ1bmNOYW1lLCBldmVudE9iai51bmJpbmRFdmVudFdpdGhTZWxlY3RvckFuZENhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKiogZXhwb3NlIEFQSXMgKioqL1xuICBmdW5jdGlvbiBleHBvc2VBcGkoZXhwb3NlVG8pIHtcbiAgICBleHBvc2VUby5hcnJpdmUgPSBhcnJpdmVFdmVudHMuYmluZEV2ZW50O1xuICAgIGV4cG9zZVVuYmluZEFwaShhcnJpdmVFdmVudHMsIGV4cG9zZVRvLCBcInVuYmluZEFycml2ZVwiKTtcblxuICAgIGV4cG9zZVRvLmxlYXZlID0gbGVhdmVFdmVudHMuYmluZEV2ZW50O1xuICAgIGV4cG9zZVVuYmluZEFwaShsZWF2ZUV2ZW50cywgZXhwb3NlVG8sIFwidW5iaW5kTGVhdmVcIik7XG4gIH1cblxuICBpZiAoJCkge1xuICAgIGV4cG9zZUFwaSgkLmZuKTtcbiAgfVxuICBleHBvc2VBcGkoSFRNTEVsZW1lbnQucHJvdG90eXBlKTtcbiAgZXhwb3NlQXBpKE5vZGVMaXN0LnByb3RvdHlwZSk7XG4gIGV4cG9zZUFwaShIVE1MQ29sbGVjdGlvbi5wcm90b3R5cGUpO1xuICBleHBvc2VBcGkoSFRNTERvY3VtZW50LnByb3RvdHlwZSk7XG4gIGV4cG9zZUFwaShXaW5kb3cucHJvdG90eXBlKTtcblxuICB2YXIgQXJyaXZlID0ge307XG4gIC8vIGV4cG9zZSBmdW5jdGlvbnMgdG8gdW5iaW5kIGFsbCBhcnJpdmUvbGVhdmUgZXZlbnRzXG4gIGV4cG9zZVVuYmluZEFwaShhcnJpdmVFdmVudHMsIEFycml2ZSwgXCJ1bmJpbmRBbGxBcnJpdmVcIik7XG4gIGV4cG9zZVVuYmluZEFwaShsZWF2ZUV2ZW50cywgQXJyaXZlLCBcInVuYmluZEFsbExlYXZlXCIpO1xuXG4gIHJldHVybiBBcnJpdmU7XG5cbn0pKHdpbmRvdywgdHlwZW9mIGpRdWVyeSA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogalF1ZXJ5LCB1bmRlZmluZWQpOyIsIi8qKlxuICogUm9hbSBSZXNlYXJjaCDnhKbngrnnrqHnkIblt6XlhbdcbiAqIOino+WGsyBtZW1vIOaPkuS7tueql+WPo+S4ree8lui+keaXtueEpueCueS4ouWkseeahOmXrumimFxuICogXG4gKiDpl67popjmj4/ov7DvvJpcbiAqIOW9k+WcqCBtZW1vIOeql+WPo+S4ree8lui+keaXtu+8jOWmguaenOaNouihjOWIh+aNouS6hiBibG9ja++8jOeEpueCueS8muaEj+WkluS4ouWksVxuICogXG4gKiDop6PlhrPmlrnmoYjvvJpcbiAqIOmAmui/h+aLpuaIqiBibHVyIOS6i+S7tuadpemYsuatoueEpueCueeahOW8guW4uOS4ouWksVxuICovXG5cbmNsYXNzIFJvYW1Gb2N1c01hbmFnZXIge1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogUm9hbUZvY3VzTWFuYWdlcjtcbiAgcHJpdmF0ZSBibHVyRXZlbnRIYW5kbGVyOiAoKGV2ZW50OiBFdmVudCkgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBpc0FjdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIGluaXRDaGVja0ludGVydmFsOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblxuICAvLyBSb2FtIOWPr+e8lui+keWFg+e0oOeahOmAieaLqeWZqFxuICBwcml2YXRlIHJlYWRvbmx5IFJPQU1fRURJVEFCTEVfU0VMRUNUT1IgPSAnaW5wdXQsIHRleHRhcmVhLCBbY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiXSwgLnJtLWJsb2NrX19pbnB1dC5yb2FtLWJsb2NrJztcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cblxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IFJvYW1Gb2N1c01hbmFnZXIge1xuICAgIGlmICghUm9hbUZvY3VzTWFuYWdlci5pbnN0YW5jZSkge1xuICAgICAgUm9hbUZvY3VzTWFuYWdlci5pbnN0YW5jZSA9IG5ldyBSb2FtRm9jdXNNYW5hZ2VyKCk7XG4gICAgfVxuICAgIHJldHVybiBSb2FtRm9jdXNNYW5hZ2VyLmluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOa/gOa0u+eEpueCueS/neaKpOacuuWItlxuICAgKiDlnKggbWVtbyDnqpflj6PmiZPlvIDml7bosIPnlKhcbiAgICovXG4gIHB1YmxpYyBhY3RpdmF0ZUZvY3VzUHJvdGVjdGlvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgY29uc29sZS5sb2coJ/Cfjq8gUm9hbSBNZW1vOiDnhKbngrnkv53miqTlt7Lmv4DmtLvvvIzml6DpnIDph43lpI3mv4DmtLsnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyDliJvlu7ogYmx1ciDkuovku7blpITnkIblmahcbiAgICB0aGlzLmJsdXJFdmVudEhhbmRsZXIgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgRWxlbWVudDtcbiAgICAgIFxuICAgICAgLy8g5qOA5p+l5aSx54Sm55qE5YWD57Sg5piv5ZCm5Li65oiR5Lus5YWz5b+D55qE5Y+v57yW6L6R5Z2XXG4gICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5tYXRjaGVzICYmIHRhcmdldC5tYXRjaGVzKHRoaXMuUk9BTV9FRElUQUJMRV9TRUxFQ1RPUikpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfjq8gUm9hbSBNZW1vOiDmi6bmiKrliLAgUm9hbSDlnZfnmoTnhKbngrnkuKLlpLHkuovku7bvvIzpmLvmraLpu5jorqTooYzkuLonKTtcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfjq8g5aSx54Sm5YWD57SgOicsIHtcbiAgICAgICAgICB0YWdOYW1lOiB0YXJnZXQudGFnTmFtZSxcbiAgICAgICAgICBjbGFzc05hbWU6IHRhcmdldC5jbGFzc05hbWUsXG4gICAgICAgICAgaWQ6IHRhcmdldC5pZFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIOmYu+atoum7mOiupOeahOWkseeEpuihjOS4ulxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyDpmLvmraLkuovku7blhpLms6FcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIOWcqOaNleiOt+mYtuautea3u+WKoOS6i+S7tuebkeWQrOWZqO+8jOS7peS+v+WwveaXqeaLpuaIqlxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLmJsdXJFdmVudEhhbmRsZXIsIHRydWUpO1xuICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgLy8g562J5b6FIFJvYW0g5bqU55So5a6M5YWo5Yqg6L295ZCO6L+b6KGM5Yid5aeL5YyW5qOA5p+lXG4gICAgdGhpcy53YWl0Rm9yUm9hbUluaXRpYWxpemF0aW9uKCk7XG5cbiAgICBjb25zb2xlLmxvZygn8J+OryBSb2FtIE1lbW86IOeEpueCueS/neaKpOacuuWItuW3sua/gOa0uycpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWBnOeUqOeEpueCueS/neaKpOacuuWItlxuICAgKiDlnKggbWVtbyDnqpflj6PlhbPpl63ml7bosIPnlKhcbiAgICovXG4gIHB1YmxpYyBkZWFjdGl2YXRlRm9jdXNQcm90ZWN0aW9uKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgY29uc29sZS5sb2coJ/Cfjq8gUm9hbSBNZW1vOiDnhKbngrnkv53miqTmnKrmv4DmtLvvvIzml6DpnIDlgZznlKgnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyDnp7vpmaTkuovku7bnm5HlkKzlmahcbiAgICBpZiAodGhpcy5ibHVyRXZlbnRIYW5kbGVyKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5ibHVyRXZlbnRIYW5kbGVyLCB0cnVlKTtcbiAgICAgIHRoaXMuYmx1ckV2ZW50SGFuZGxlciA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8g5riF55CG5Yid5aeL5YyW5qOA5p+l5a6a5pe25ZmoXG4gICAgaWYgKHRoaXMuaW5pdENoZWNrSW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbml0Q2hlY2tJbnRlcnZhbCk7XG4gICAgICB0aGlzLmluaXRDaGVja0ludGVydmFsID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgY29uc29sZS5sb2coJ/Cfjq8gUm9hbSBNZW1vOiDnhKbngrnkv53miqTmnLrliLblt7LlgZznlKgnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmo4Dmn6XnhKbngrnkv53miqTmmK/lkKblt7Lmv4DmtLtcbiAgICovXG4gIHB1YmxpYyBpc0ZvY3VzUHJvdGVjdGlvbkFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0FjdGl2ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliIfmjaLnhKbngrnkv53miqTnirbmgIFcbiAgICovXG4gIHB1YmxpYyB0b2dnbGVGb2N1c1Byb3RlY3Rpb24oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcbiAgICAgIHRoaXMuZGVhY3RpdmF0ZUZvY3VzUHJvdGVjdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFjdGl2YXRlRm9jdXNQcm90ZWN0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOetieW+hSBSb2FtIOW6lOeUqOWujOWFqOWIneWni+WMllxuICAgKiDov5nmmK/kuIDkuKrlronlhajmo4Dmn6XvvIznoa7kv50gUm9hbSDnmoQgRE9NIOe7k+aehOW3sue7j+Wwsee7qlxuICAgKi9cbiAgcHJpdmF0ZSB3YWl0Rm9yUm9hbUluaXRpYWxpemF0aW9uKCk6IHZvaWQge1xuICAgIHRoaXMuaW5pdENoZWNrSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgY29uc3Qgcm9hbUFwcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yb2FtLWFwcCcpO1xuICAgICAgY29uc3Qgcm9hbU1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucm9hbS1tYWluJyk7XG4gICAgICBcbiAgICAgIGlmIChyb2FtQXBwICYmIHJvYW1NYWluKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn46vIFJvYW0gTWVtbzogUm9hbSDlupTnlKjliJ3lp4vljJblrozmiJDvvIznhKbngrnkv53miqTohJrmnKzlh4blpIflsLHnu6onKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLmluaXRDaGVja0ludGVydmFsKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmluaXRDaGVja0ludGVydmFsKTtcbiAgICAgICAgICB0aGlzLmluaXRDaGVja0ludGVydmFsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIDUwMCk7XG4gIH1cblxuICAvKipcbiAgICog5by65Yi25riF55CG5omA5pyJ6LWE5rqQXG4gICAqIOWcqOaPkuS7tuWNuOi9veaXtuiwg+eUqO+8jOehruS/neayoeacieaui+eVmVxuICAgKi9cbiAgcHVibGljIGZvcmNlQ2xlYW51cCgpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZygn8J+OryBSb2FtIE1lbW86IOaJp+ihjOeEpueCueeuoeeQhuWZqOW8uuWItua4heeQhicpO1xuICAgIFxuICAgIHRoaXMuZGVhY3RpdmF0ZUZvY3VzUHJvdGVjdGlvbigpO1xuICAgIFxuICAgIC8vIOmineWklueahOWuieWFqOajgOafpe+8muehruS/neS6i+S7tuebkeWQrOWZqOiiq+WujOWFqOenu+mZpFxuICAgIGlmICh0aGlzLmJsdXJFdmVudEhhbmRsZXIpIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLmJsdXJFdmVudEhhbmRsZXIsIHRydWUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMuYmx1ckV2ZW50SGFuZGxlciwgZmFsc2UpO1xuICAgICAgdGhpcy5ibHVyRXZlbnRIYW5kbGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygn8J+OryBSb2FtIE1lbW86IOeEpueCueeuoeeQhuWZqOa4heeQhuWujOaIkCcpO1xuICB9XG59XG5cbi8vIOWvvOWHuuWNleS+i+WunuS+i1xuZXhwb3J0IGNvbnN0IHJvYW1Gb2N1c01hbmFnZXIgPSBSb2FtRm9jdXNNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cbi8vIOm7mOiupOWvvOWHuuexu++8jOeUqOS6jumcgOimgeeahOWcsOaWuVxuZXhwb3J0IGRlZmF1bHQgUm9hbUZvY3VzTWFuYWdlcjsgIiwiLyoqXG4gKiBSb2FtIFJlc2VhcmNoIFVJIOWxgue6p+euoeeQhuW3peWFt1xuICog6Kej5YazIG1lbW8g5o+S5Lu26YGu5oyhIFJvYW0g5Y6f55SfIFVJIOWFg+e0oOeahOmXrumimFxuICovXG5cbmNsYXNzIFJvYW1aSW5kZXhNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFJvYW1aSW5kZXhNYW5hZ2VyO1xuICBwcml2YXRlIHN0eWxlRWxlbWVudDogSFRNTFN0eWxlRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHJlYWRvbmx5IFNUWUxFX0lEID0gJ3JvYW0tbWVtby16aW5kZXgtZml4JztcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cblxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IFJvYW1aSW5kZXhNYW5hZ2VyIHtcbiAgICBpZiAoIVJvYW1aSW5kZXhNYW5hZ2VyLmluc3RhbmNlKSB7XG4gICAgICBSb2FtWkluZGV4TWFuYWdlci5pbnN0YW5jZSA9IG5ldyBSb2FtWkluZGV4TWFuYWdlcigpO1xuICAgIH1cbiAgICByZXR1cm4gUm9hbVpJbmRleE1hbmFnZXIuaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICog5rOo5YWlQ1NT5qC35byP5p2l5o+Q5Y2HUm9hbSBVSeWFg+e0oOeahOWxgue6p1xuICAgKi9cbiAgcHVibGljIGluamVjdFpJbmRleEZpeCgpOiB2b2lkIHtcbiAgICAvLyDlpoLmnpzlt7Lnu4/ms6jlhaXov4fvvIznm7TmjqXov5Tlm55cbiAgICBpZiAodGhpcy5zdHlsZUVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyDliJvlu7rmoLflvI/lhYPntKBcbiAgICB0aGlzLnN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgdGhpcy5zdHlsZUVsZW1lbnQuaWQgPSB0aGlzLlNUWUxFX0lEO1xuICAgIHRoaXMuc3R5bGVFbGVtZW50LnR5cGUgPSAndGV4dC9jc3MnO1xuXG4gICAgLy8g5a6a5LmJQ1NT6KeE5YiZXG4gICAgY29uc3QgY3NzUnVsZXMgPSBgXG4gICAgICAvKlxuICAgICAgICogUm9hbSBSZXNlYXJjaCDlm77niYfmgqzmta7nqpflj6PnmoTlsYLnuqfmj5DljYdcbiAgICAgICAqIOino+WGs+iiqyBNZW1vIOaPkuS7tumBruaMoeeahOmXrumimFxuICAgICAgICovXG4gICAgICBcbiAgICAgIC8qIOaPkOWNhyBSb2FtIOWbvueJh+a1ruWxgueahCBaLWluZGV4ICovXG4gICAgICAjcm0tbW9kYWwtcG9ydGFsIHtcbiAgICAgICAgei1pbmRleDogMTAwMiAhaW1wb3J0YW50OyAvKiBSb2FtIOWbvueJh+a1ruWxguaVtOS9k+eahCB6LWluZGV477yM5pyA6auYICovXG4gICAgICB9XG4gICAgICBcbiAgICAgICNybS1tb2RhbC1wb3J0YWwgPiBkaXYgPiBkaXYgPiBkaXYuYnAzLWRpYWxvZy1jb250YWluZXIuYnAzLW92ZXJsYXktY29udGVudCA+IGRpdiB7XG4gICAgICAgIHotaW5kZXg6IDEwMDEgIWltcG9ydGFudDsgLyog56Gu5L+d5Zu+54mH5a6e6ZmF5YaF5a655Lmf6auYICovXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8qIOaPkOWNhyBSb2FtIOWPjOmTvuW8ueWHuuiPnOWNleeahCBaLWluZGV4ICovXG4gICAgICAucm0tYXV0b2NvbXBsZXRlX19yZXN1bHRzIHtcbiAgICAgICAgei1pbmRleDogMTAwMCAhaW1wb3J0YW50OyAvKiDkvb/nlKjkuIDkuKrpnZ7luLjpq5jnmoTlgLzvvIznoa7kv53mmL7npLrlnKjmiYDmnInlhbbku5blhYPntKDkuYvkuIogKi9cbiAgICAgICAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDsgLyog6LCD5pW05Li66Ieq6YCC5bqU5a695bqmICovXG4gICAgICAgIG1heC13aWR0aDogdW5zZXQgIWltcG9ydGFudDsgLyog5Y+W5raI5pyA5aSn5a695bqm6ZmQ5Yi2ICovXG4gICAgICAgIG1pbi13aWR0aDogMTUwcHggIWltcG9ydGFudDsgLyog6K6+572u5pyA5bCP5a695bqm77yM6Ziy5q2i6L+H56qEICovXG4gICAgICB9XG4gICAgICBcbiAgICAgICAgICAgICAvKiDmj5DljYflhbbku5blj6/og73ooqvpga7mjKHnmoQgUm9hbSBVSSDlhYPntKAgKi9cbiAgICAgICAuYnAzLXBvcG92ZXIge1xuICAgICAgICAgei1pbmRleDogOTk5ICFpbXBvcnRhbnQ7XG4gICAgICAgfVxuICAgICAgIFxuICAgICAgIC5icDMtdG9vbHRpcCB7XG4gICAgICAgICB6LWluZGV4OiA5OTggIWltcG9ydGFudDtcbiAgICAgICB9XG4gICAgYDtcblxuICAgIHRoaXMuc3R5bGVFbGVtZW50LnRleHRDb250ZW50ID0gY3NzUnVsZXM7XG5cbiAgICAvLyDlsIbmoLflvI/lhYPntKDmt7vliqDliLDmlofmoaPlpLTpg6hcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHRoaXMuc3R5bGVFbGVtZW50KTtcblxuICAgIGNvbnNvbGUubG9nKCfwn5SnIFJvYW0gTWVtbzogWi1pbmRleCBmaXgg5bey5r+A5rS7Jyk7XG4gIH1cblxuICAvKipcbiAgICog56e76ZmkQ1NT5qC35byP77yM5oGi5aSN5Y6f5aeL5bGC57qnXG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlWkluZGV4Rml4KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnN0eWxlRWxlbWVudCkge1xuICAgICAgZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZCh0aGlzLnN0eWxlRWxlbWVudCk7XG4gICAgICB0aGlzLnN0eWxlRWxlbWVudCA9IG51bGw7XG4gICAgICBjb25zb2xlLmxvZygn8J+UpyBSb2FtIE1lbW86IFotaW5kZXggZml4IOW3suenu+mZpCcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDmo4Dmn6XmoLflvI/mmK/lkKblt7Lms6jlhaVcbiAgICovXG4gIHB1YmxpYyBpc0ZpeEFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdHlsZUVsZW1lbnQgIT09IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5YiH5o2i5qC35byP5rOo5YWl54q25oCBXG4gICAqL1xuICBwdWJsaWMgdG9nZ2xlWkluZGV4Rml4KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzRml4QWN0aXZlKCkpIHtcbiAgICAgIHRoaXMucmVtb3ZlWkluZGV4Rml4KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5qZWN0WkluZGV4Rml4KCk7XG4gICAgfVxuICB9XG59XG5cbi8vIOWvvOWHuuWNleS+i+WunuS+i1xuZXhwb3J0IGNvbnN0IHJvYW1aSW5kZXhNYW5hZ2VyID0gUm9hbVpJbmRleE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblxuLy8g6buY6K6k5a+85Ye657G777yM55So5LqO6ZyA6KaB55qE5Zyw5pa5XG5leHBvcnQgZGVmYXVsdCBSb2FtWkluZGV4TWFuYWdlcjsgIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ25cIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2Fzc2lnblwiKTtcblxudmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX2Fzc2lnbjIuZGVmYXVsdCB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY3JlYXRlID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKTtcblxudmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc3VwZXJDbGFzcykpKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKTtcblxudmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cbnZhciBfc3ltYm9sID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sXCIpO1xuXG52YXIgX3N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9pdGVyYXRvcjIuZGVmYXVsdCA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YoX2l0ZXJhdG9yMi5kZWZhdWx0KSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuYXNzaWduO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCkge1xuICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7XG59O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKSB7XG4gIHJldHVybiAkT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpO1xufTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TeW1ib2w7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjEyJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjAgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkR09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAhISRHT1BTLmY7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxudmFyIERPTUl0ZXJhYmxlcyA9ICgnQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCwnICtcbiAgJ0RPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsJyArXG4gICdNZWRpYUxpc3QsTWltZVR5cGVBcnJheSxOYW1lZE5vZGVNYXAsTm9kZUxpc3QsUGFpbnRSZXF1ZXN0TGlzdCxQbHVnaW4sUGx1Z2luQXJyYXksU1ZHTGVuZ3RoTGlzdCxTVkdOdW1iZXJMaXN0LCcgK1xuICAnU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsJyArXG4gICdUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdCcpLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgRE9NSXRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gRE9NSXRlcmFibGVzW2ldO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cbiIsIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuZGF5anM9ZSgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PTFlMyxlPTZlNCxuPTM2ZTUscj1cIm1pbGxpc2Vjb25kXCIsaT1cInNlY29uZFwiLHM9XCJtaW51dGVcIix1PVwiaG91clwiLGE9XCJkYXlcIixvPVwid2Vla1wiLGM9XCJtb250aFwiLGY9XCJxdWFydGVyXCIsaD1cInllYXJcIixkPVwiZGF0ZVwiLGw9XCJJbnZhbGlkIERhdGVcIiwkPS9eKFxcZHs0fSlbLS9dPyhcXGR7MSwyfSk/Wy0vXT8oXFxkezAsMn0pW1R0XFxzXSooXFxkezEsMn0pPzo/KFxcZHsxLDJ9KT86PyhcXGR7MSwyfSk/Wy46XT8oXFxkKyk/JC8seT0vXFxbKFteXFxdXSspXXxZezEsNH18TXsxLDR9fER7MSwyfXxkezEsNH18SHsxLDJ9fGh7MSwyfXxhfEF8bXsxLDJ9fHN7MSwyfXxaezEsMn18U1NTL2csTT17bmFtZTpcImVuXCIsd2Vla2RheXM6XCJTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheVwiLnNwbGl0KFwiX1wiKSxtb250aHM6XCJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG9yZGluYWw6ZnVuY3Rpb24odCl7dmFyIGU9W1widGhcIixcInN0XCIsXCJuZFwiLFwicmRcIl0sbj10JTEwMDtyZXR1cm5cIltcIit0KyhlWyhuLTIwKSUxMF18fGVbbl18fGVbMF0pK1wiXVwifX0sbT1mdW5jdGlvbih0LGUsbil7dmFyIHI9U3RyaW5nKHQpO3JldHVybiFyfHxyLmxlbmd0aD49ZT90OlwiXCIrQXJyYXkoZSsxLXIubGVuZ3RoKS5qb2luKG4pK3R9LHY9e3M6bSx6OmZ1bmN0aW9uKHQpe3ZhciBlPS10LnV0Y09mZnNldCgpLG49TWF0aC5hYnMoZSkscj1NYXRoLmZsb29yKG4vNjApLGk9biU2MDtyZXR1cm4oZTw9MD9cIitcIjpcIi1cIikrbShyLDIsXCIwXCIpK1wiOlwiK20oaSwyLFwiMFwiKX0sbTpmdW5jdGlvbiB0KGUsbil7aWYoZS5kYXRlKCk8bi5kYXRlKCkpcmV0dXJuLXQobixlKTt2YXIgcj0xMioobi55ZWFyKCktZS55ZWFyKCkpKyhuLm1vbnRoKCktZS5tb250aCgpKSxpPWUuY2xvbmUoKS5hZGQocixjKSxzPW4taTwwLHU9ZS5jbG9uZSgpLmFkZChyKyhzPy0xOjEpLGMpO3JldHVybisoLShyKyhuLWkpLyhzP2ktdTp1LWkpKXx8MCl9LGE6ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9NYXRoLmNlaWwodCl8fDA6TWF0aC5mbG9vcih0KX0scDpmdW5jdGlvbih0KXtyZXR1cm57TTpjLHk6aCx3Om8sZDphLEQ6ZCxoOnUsbTpzLHM6aSxtczpyLFE6Zn1bdF18fFN0cmluZyh0fHxcIlwiKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL3MkLyxcIlwiKX0sdTpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dH19LGc9XCJlblwiLEQ9e307RFtnXT1NO3ZhciBwPVwiJGlzRGF5anNPYmplY3RcIixTPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgX3x8ISghdHx8IXRbcF0pfSx3PWZ1bmN0aW9uIHQoZSxuLHIpe3ZhciBpO2lmKCFlKXJldHVybiBnO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXt2YXIgcz1lLnRvTG93ZXJDYXNlKCk7RFtzXSYmKGk9cyksbiYmKERbc109bixpPXMpO3ZhciB1PWUuc3BsaXQoXCItXCIpO2lmKCFpJiZ1Lmxlbmd0aD4xKXJldHVybiB0KHVbMF0pfWVsc2V7dmFyIGE9ZS5uYW1lO0RbYV09ZSxpPWF9cmV0dXJuIXImJmkmJihnPWkpLGl8fCFyJiZnfSxPPWZ1bmN0aW9uKHQsZSl7aWYoUyh0KSlyZXR1cm4gdC5jbG9uZSgpO3ZhciBuPVwib2JqZWN0XCI9PXR5cGVvZiBlP2U6e307cmV0dXJuIG4uZGF0ZT10LG4uYXJncz1hcmd1bWVudHMsbmV3IF8obil9LGI9djtiLmw9dyxiLmk9UyxiLnc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gTyh0LHtsb2NhbGU6ZS4kTCx1dGM6ZS4kdSx4OmUuJHgsJG9mZnNldDplLiRvZmZzZXR9KX07dmFyIF89ZnVuY3Rpb24oKXtmdW5jdGlvbiBNKHQpe3RoaXMuJEw9dyh0LmxvY2FsZSxudWxsLCEwKSx0aGlzLnBhcnNlKHQpLHRoaXMuJHg9dGhpcy4keHx8dC54fHx7fSx0aGlzW3BdPSEwfXZhciBtPU0ucHJvdG90eXBlO3JldHVybiBtLnBhcnNlPWZ1bmN0aW9uKHQpe3RoaXMuJGQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5kYXRlLG49dC51dGM7aWYobnVsbD09PWUpcmV0dXJuIG5ldyBEYXRlKE5hTik7aWYoYi51KGUpKXJldHVybiBuZXcgRGF0ZTtpZihlIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gbmV3IERhdGUoZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJiEvWiQvaS50ZXN0KGUpKXt2YXIgcj1lLm1hdGNoKCQpO2lmKHIpe3ZhciBpPXJbMl0tMXx8MCxzPShyWzddfHxcIjBcIikuc3Vic3RyaW5nKDAsMyk7cmV0dXJuIG4/bmV3IERhdGUoRGF0ZS5VVEMoclsxXSxpLHJbM118fDEscls0XXx8MCxyWzVdfHwwLHJbNl18fDAscykpOm5ldyBEYXRlKHJbMV0saSxyWzNdfHwxLHJbNF18fDAscls1XXx8MCxyWzZdfHwwLHMpfX1yZXR1cm4gbmV3IERhdGUoZSl9KHQpLHRoaXMuaW5pdCgpfSxtLmluaXQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRkO3RoaXMuJHk9dC5nZXRGdWxsWWVhcigpLHRoaXMuJE09dC5nZXRNb250aCgpLHRoaXMuJEQ9dC5nZXREYXRlKCksdGhpcy4kVz10LmdldERheSgpLHRoaXMuJEg9dC5nZXRIb3VycygpLHRoaXMuJG09dC5nZXRNaW51dGVzKCksdGhpcy4kcz10LmdldFNlY29uZHMoKSx0aGlzLiRtcz10LmdldE1pbGxpc2Vjb25kcygpfSxtLiR1dGlscz1mdW5jdGlvbigpe3JldHVybiBifSxtLmlzVmFsaWQ9ZnVuY3Rpb24oKXtyZXR1cm4hKHRoaXMuJGQudG9TdHJpbmcoKT09PWwpfSxtLmlzU2FtZT1mdW5jdGlvbih0LGUpe3ZhciBuPU8odCk7cmV0dXJuIHRoaXMuc3RhcnRPZihlKTw9biYmbjw9dGhpcy5lbmRPZihlKX0sbS5pc0FmdGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE8odCk8dGhpcy5zdGFydE9mKGUpfSxtLmlzQmVmb3JlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZW5kT2YoZSk8Tyh0KX0sbS4kZz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIGIudSh0KT90aGlzW2VdOnRoaXMuc2V0KG4sdCl9LG0udW5peD1mdW5jdGlvbigpe3JldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpLzFlMyl9LG0udmFsdWVPZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLmdldFRpbWUoKX0sbS5zdGFydE9mPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcyxyPSEhYi51KGUpfHxlLGY9Yi5wKHQpLGw9ZnVuY3Rpb24odCxlKXt2YXIgaT1iLncobi4kdT9EYXRlLlVUQyhuLiR5LGUsdCk6bmV3IERhdGUobi4keSxlLHQpLG4pO3JldHVybiByP2k6aS5lbmRPZihhKX0sJD1mdW5jdGlvbih0LGUpe3JldHVybiBiLncobi50b0RhdGUoKVt0XS5hcHBseShuLnRvRGF0ZShcInNcIiksKHI/WzAsMCwwLDBdOlsyMyw1OSw1OSw5OTldKS5zbGljZShlKSksbil9LHk9dGhpcy4kVyxNPXRoaXMuJE0sbT10aGlzLiRELHY9XCJzZXRcIisodGhpcy4kdT9cIlVUQ1wiOlwiXCIpO3N3aXRjaChmKXtjYXNlIGg6cmV0dXJuIHI/bCgxLDApOmwoMzEsMTEpO2Nhc2UgYzpyZXR1cm4gcj9sKDEsTSk6bCgwLE0rMSk7Y2FzZSBvOnZhciBnPXRoaXMuJGxvY2FsZSgpLndlZWtTdGFydHx8MCxEPSh5PGc/eSs3OnkpLWc7cmV0dXJuIGwocj9tLUQ6bSsoNi1EKSxNKTtjYXNlIGE6Y2FzZSBkOnJldHVybiAkKHYrXCJIb3Vyc1wiLDApO2Nhc2UgdTpyZXR1cm4gJCh2K1wiTWludXRlc1wiLDEpO2Nhc2UgczpyZXR1cm4gJCh2K1wiU2Vjb25kc1wiLDIpO2Nhc2UgaTpyZXR1cm4gJCh2K1wiTWlsbGlzZWNvbmRzXCIsMyk7ZGVmYXVsdDpyZXR1cm4gdGhpcy5jbG9uZSgpfX0sbS5lbmRPZj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5zdGFydE9mKHQsITEpfSxtLiRzZXQ9ZnVuY3Rpb24odCxlKXt2YXIgbixvPWIucCh0KSxmPVwic2V0XCIrKHRoaXMuJHU/XCJVVENcIjpcIlwiKSxsPShuPXt9LG5bYV09ZitcIkRhdGVcIixuW2RdPWYrXCJEYXRlXCIsbltjXT1mK1wiTW9udGhcIixuW2hdPWYrXCJGdWxsWWVhclwiLG5bdV09ZitcIkhvdXJzXCIsbltzXT1mK1wiTWludXRlc1wiLG5baV09ZitcIlNlY29uZHNcIixuW3JdPWYrXCJNaWxsaXNlY29uZHNcIixuKVtvXSwkPW89PT1hP3RoaXMuJEQrKGUtdGhpcy4kVyk6ZTtpZihvPT09Y3x8bz09PWgpe3ZhciB5PXRoaXMuY2xvbmUoKS5zZXQoZCwxKTt5LiRkW2xdKCQpLHkuaW5pdCgpLHRoaXMuJGQ9eS5zZXQoZCxNYXRoLm1pbih0aGlzLiRELHkuZGF5c0luTW9udGgoKSkpLiRkfWVsc2UgbCYmdGhpcy4kZFtsXSgkKTtyZXR1cm4gdGhpcy5pbml0KCksdGhpc30sbS5zZXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLiRzZXQodCxlKX0sbS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXNbYi5wKHQpXSgpfSxtLmFkZD1mdW5jdGlvbihyLGYpe3ZhciBkLGw9dGhpcztyPU51bWJlcihyKTt2YXIgJD1iLnAoZikseT1mdW5jdGlvbih0KXt2YXIgZT1PKGwpO3JldHVybiBiLncoZS5kYXRlKGUuZGF0ZSgpK01hdGgucm91bmQodCpyKSksbCl9O2lmKCQ9PT1jKXJldHVybiB0aGlzLnNldChjLHRoaXMuJE0rcik7aWYoJD09PWgpcmV0dXJuIHRoaXMuc2V0KGgsdGhpcy4keStyKTtpZigkPT09YSlyZXR1cm4geSgxKTtpZigkPT09bylyZXR1cm4geSg3KTt2YXIgTT0oZD17fSxkW3NdPWUsZFt1XT1uLGRbaV09dCxkKVskXXx8MSxtPXRoaXMuJGQuZ2V0VGltZSgpK3IqTTtyZXR1cm4gYi53KG0sdGhpcyl9LG0uc3VidHJhY3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hZGQoLTEqdCxlKX0sbS5mb3JtYXQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXRoaXMuJGxvY2FsZSgpO2lmKCF0aGlzLmlzVmFsaWQoKSlyZXR1cm4gbi5pbnZhbGlkRGF0ZXx8bDt2YXIgcj10fHxcIllZWVktTU0tRERUSEg6bW06c3NaXCIsaT1iLnoodGhpcykscz10aGlzLiRILHU9dGhpcy4kbSxhPXRoaXMuJE0sbz1uLndlZWtkYXlzLGM9bi5tb250aHMsZj1uLm1lcmlkaWVtLGg9ZnVuY3Rpb24odCxuLGkscyl7cmV0dXJuIHQmJih0W25dfHx0KGUscikpfHxpW25dLnNsaWNlKDAscyl9LGQ9ZnVuY3Rpb24odCl7cmV0dXJuIGIucyhzJTEyfHwxMix0LFwiMFwiKX0sJD1mfHxmdW5jdGlvbih0LGUsbil7dmFyIHI9dDwxMj9cIkFNXCI6XCJQTVwiO3JldHVybiBuP3IudG9Mb3dlckNhc2UoKTpyfTtyZXR1cm4gci5yZXBsYWNlKHksKGZ1bmN0aW9uKHQscil7cmV0dXJuIHJ8fGZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlXCJZWVwiOnJldHVybiBTdHJpbmcoZS4keSkuc2xpY2UoLTIpO2Nhc2VcIllZWVlcIjpyZXR1cm4gYi5zKGUuJHksNCxcIjBcIik7Y2FzZVwiTVwiOnJldHVybiBhKzE7Y2FzZVwiTU1cIjpyZXR1cm4gYi5zKGErMSwyLFwiMFwiKTtjYXNlXCJNTU1cIjpyZXR1cm4gaChuLm1vbnRoc1Nob3J0LGEsYywzKTtjYXNlXCJNTU1NXCI6cmV0dXJuIGgoYyxhKTtjYXNlXCJEXCI6cmV0dXJuIGUuJEQ7Y2FzZVwiRERcIjpyZXR1cm4gYi5zKGUuJEQsMixcIjBcIik7Y2FzZVwiZFwiOnJldHVybiBTdHJpbmcoZS4kVyk7Y2FzZVwiZGRcIjpyZXR1cm4gaChuLndlZWtkYXlzTWluLGUuJFcsbywyKTtjYXNlXCJkZGRcIjpyZXR1cm4gaChuLndlZWtkYXlzU2hvcnQsZS4kVyxvLDMpO2Nhc2VcImRkZGRcIjpyZXR1cm4gb1tlLiRXXTtjYXNlXCJIXCI6cmV0dXJuIFN0cmluZyhzKTtjYXNlXCJISFwiOnJldHVybiBiLnMocywyLFwiMFwiKTtjYXNlXCJoXCI6cmV0dXJuIGQoMSk7Y2FzZVwiaGhcIjpyZXR1cm4gZCgyKTtjYXNlXCJhXCI6cmV0dXJuICQocyx1LCEwKTtjYXNlXCJBXCI6cmV0dXJuICQocyx1LCExKTtjYXNlXCJtXCI6cmV0dXJuIFN0cmluZyh1KTtjYXNlXCJtbVwiOnJldHVybiBiLnModSwyLFwiMFwiKTtjYXNlXCJzXCI6cmV0dXJuIFN0cmluZyhlLiRzKTtjYXNlXCJzc1wiOnJldHVybiBiLnMoZS4kcywyLFwiMFwiKTtjYXNlXCJTU1NcIjpyZXR1cm4gYi5zKGUuJG1zLDMsXCIwXCIpO2Nhc2VcIlpcIjpyZXR1cm4gaX1yZXR1cm4gbnVsbH0odCl8fGkucmVwbGFjZShcIjpcIixcIlwiKX0pKX0sbS51dGNPZmZzZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMTUqLU1hdGgucm91bmQodGhpcy4kZC5nZXRUaW1lem9uZU9mZnNldCgpLzE1KX0sbS5kaWZmPWZ1bmN0aW9uKHIsZCxsKXt2YXIgJCx5PXRoaXMsTT1iLnAoZCksbT1PKHIpLHY9KG0udXRjT2Zmc2V0KCktdGhpcy51dGNPZmZzZXQoKSkqZSxnPXRoaXMtbSxEPWZ1bmN0aW9uKCl7cmV0dXJuIGIubSh5LG0pfTtzd2l0Y2goTSl7Y2FzZSBoOiQ9RCgpLzEyO2JyZWFrO2Nhc2UgYzokPUQoKTticmVhaztjYXNlIGY6JD1EKCkvMzticmVhaztjYXNlIG86JD0oZy12KS82MDQ4ZTU7YnJlYWs7Y2FzZSBhOiQ9KGctdikvODY0ZTU7YnJlYWs7Y2FzZSB1OiQ9Zy9uO2JyZWFrO2Nhc2UgczokPWcvZTticmVhaztjYXNlIGk6JD1nL3Q7YnJlYWs7ZGVmYXVsdDokPWd9cmV0dXJuIGw/JDpiLmEoJCl9LG0uZGF5c0luTW9udGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbmRPZihjKS4kRH0sbS4kbG9jYWxlPWZ1bmN0aW9uKCl7cmV0dXJuIERbdGhpcy4kTF19LG0ubG9jYWxlPWZ1bmN0aW9uKHQsZSl7aWYoIXQpcmV0dXJuIHRoaXMuJEw7dmFyIG49dGhpcy5jbG9uZSgpLHI9dyh0LGUsITApO3JldHVybiByJiYobi4kTD1yKSxufSxtLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIGIudyh0aGlzLiRkLHRoaXMpfSxtLnRvRGF0ZT1mdW5jdGlvbigpe3JldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSl9LG0udG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNWYWxpZCgpP3RoaXMudG9JU09TdHJpbmcoKTpudWxsfSxtLnRvSVNPU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQudG9JU09TdHJpbmcoKX0sbS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLnRvVVRDU3RyaW5nKCl9LE19KCksaz1fLnByb3RvdHlwZTtyZXR1cm4gTy5wcm90b3R5cGU9ayxbW1wiJG1zXCIscl0sW1wiJHNcIixpXSxbXCIkbVwiLHNdLFtcIiRIXCIsdV0sW1wiJFdcIixhXSxbXCIkTVwiLGNdLFtcIiR5XCIsaF0sW1wiJERcIixkXV0uZm9yRWFjaCgoZnVuY3Rpb24odCl7a1t0WzFdXT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy4kZyhlLHRbMF0sdFsxXSl9fSkpLE8uZXh0ZW5kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuJGl8fCh0KGUsXyxPKSx0LiRpPSEwKSxPfSxPLmxvY2FsZT13LE8uaXNEYXlqcz1TLE8udW5peD1mdW5jdGlvbih0KXtyZXR1cm4gTygxZTMqdCl9LE8uZW49RFtnXSxPLkxzPUQsTy5wPXt9LE99KSk7IiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6KGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczplfHxzZWxmKS5kYXlqc19wbHVnaW5fY2FsZW5kYXI9dCgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3JldHVybiBmdW5jdGlvbihlLHQsYSl7dmFyIG49XCJoOm1tIEFcIixkPXtsYXN0RGF5OlwiW1llc3RlcmRheSBhdF0gXCIrbixzYW1lRGF5OlwiW1RvZGF5IGF0XSBcIituLG5leHREYXk6XCJbVG9tb3Jyb3cgYXRdIFwiK24sbmV4dFdlZWs6XCJkZGRkIFthdF0gXCIrbixsYXN0V2VlazpcIltMYXN0XSBkZGRkIFthdF0gXCIrbixzYW1lRWxzZTpcIk1NL0REL1lZWVlcIn07dC5wcm90b3R5cGUuY2FsZW5kYXI9ZnVuY3Rpb24oZSx0KXt2YXIgbj10fHx0aGlzLiRsb2NhbGUoKS5jYWxlbmRhcnx8ZCxvPWEoZXx8dm9pZCAwKS5zdGFydE9mKFwiZFwiKSxzPXRoaXMuZGlmZihvLFwiZFwiLCEwKSxpPVwic2FtZUVsc2VcIixmPXM8LTY/aTpzPC0xP1wibGFzdFdlZWtcIjpzPDA/XCJsYXN0RGF5XCI6czwxP1wic2FtZURheVwiOnM8Mj9cIm5leHREYXlcIjpzPDc/XCJuZXh0V2Vla1wiOmksbD1uW2ZdfHxkW2ZdO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGw/bC5jYWxsKHRoaXMsYSgpKTp0aGlzLmZvcm1hdChsKX19fSkpOyIsIiFmdW5jdGlvbihyLGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOihyPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6cnx8c2VsZikuZGF5anNfcGx1Z2luX3JlbGF0aXZlVGltZT1lKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7cmV0dXJuIGZ1bmN0aW9uKHIsZSx0KXtyPXJ8fHt9O3ZhciBuPWUucHJvdG90eXBlLG89e2Z1dHVyZTpcImluICVzXCIscGFzdDpcIiVzIGFnb1wiLHM6XCJhIGZldyBzZWNvbmRzXCIsbTpcImEgbWludXRlXCIsbW06XCIlZCBtaW51dGVzXCIsaDpcImFuIGhvdXJcIixoaDpcIiVkIGhvdXJzXCIsZDpcImEgZGF5XCIsZGQ6XCIlZCBkYXlzXCIsTTpcImEgbW9udGhcIixNTTpcIiVkIG1vbnRoc1wiLHk6XCJhIHllYXJcIix5eTpcIiVkIHllYXJzXCJ9O2Z1bmN0aW9uIGkocixlLHQsbyl7cmV0dXJuIG4uZnJvbVRvQmFzZShyLGUsdCxvKX10LmVuLnJlbGF0aXZlVGltZT1vLG4uZnJvbVRvQmFzZT1mdW5jdGlvbihlLG4saSxkLHUpe2Zvcih2YXIgZixhLHMsbD1pLiRsb2NhbGUoKS5yZWxhdGl2ZVRpbWV8fG8saD1yLnRocmVzaG9sZHN8fFt7bDpcInNcIixyOjQ0LGQ6XCJzZWNvbmRcIn0se2w6XCJtXCIscjo4OX0se2w6XCJtbVwiLHI6NDQsZDpcIm1pbnV0ZVwifSx7bDpcImhcIixyOjg5fSx7bDpcImhoXCIscjoyMSxkOlwiaG91clwifSx7bDpcImRcIixyOjM1fSx7bDpcImRkXCIscjoyNSxkOlwiZGF5XCJ9LHtsOlwiTVwiLHI6NDV9LHtsOlwiTU1cIixyOjEwLGQ6XCJtb250aFwifSx7bDpcInlcIixyOjE3fSx7bDpcInl5XCIsZDpcInllYXJcIn1dLG09aC5sZW5ndGgsYz0wO2M8bTtjKz0xKXt2YXIgeT1oW2NdO3kuZCYmKGY9ZD90KGUpLmRpZmYoaSx5LmQsITApOmkuZGlmZihlLHkuZCwhMCkpO3ZhciBwPShyLnJvdW5kaW5nfHxNYXRoLnJvdW5kKShNYXRoLmFicyhmKSk7aWYocz1mPjAscDw9eS5yfHwheS5yKXtwPD0xJiZjPjAmJih5PWhbYy0xXSk7dmFyIHY9bFt5LmxdO3UmJihwPXUoXCJcIitwKSksYT1cInN0cmluZ1wiPT10eXBlb2Ygdj92LnJlcGxhY2UoXCIlZFwiLHApOnYocCxuLHkubCxzKTticmVha319aWYobilyZXR1cm4gYTt2YXIgTT1zP2wuZnV0dXJlOmwucGFzdDtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBNP00oYSk6TS5yZXBsYWNlKFwiJXNcIixhKX0sbi50bz1mdW5jdGlvbihyLGUpe3JldHVybiBpKHIsZSx0aGlzLCEwKX0sbi5mcm9tPWZ1bmN0aW9uKHIsZSl7cmV0dXJuIGkocixlLHRoaXMpfTt2YXIgZD1mdW5jdGlvbihyKXtyZXR1cm4gci4kdT90LnV0YygpOnQoKX07bi50b05vdz1mdW5jdGlvbihyKXtyZXR1cm4gdGhpcy50byhkKHRoaXMpLHIpfSxuLmZyb21Ob3c9ZnVuY3Rpb24ocil7cmV0dXJuIHRoaXMuZnJvbShkKHRoaXMpLHIpfX19KSk7IiwiKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIpICYmIChmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLmxvdHRpZSA9IGZhY3RvcnkoKSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHN2Z05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbiAgdmFyIGxvY2F0aW9uSHJlZiA9ICcnO1xuICB2YXIgX3VzZVdlYldvcmtlciA9IGZhbHNlO1xuICB2YXIgaW5pdGlhbERlZmF1bHRGcmFtZSA9IC05OTk5OTk7XG5cbiAgdmFyIHNldFdlYldvcmtlciA9IGZ1bmN0aW9uIHNldFdlYldvcmtlcihmbGFnKSB7XG4gICAgX3VzZVdlYldvcmtlciA9ICEhZmxhZztcbiAgfTtcblxuICB2YXIgZ2V0V2ViV29ya2VyID0gZnVuY3Rpb24gZ2V0V2ViV29ya2VyKCkge1xuICAgIHJldHVybiBfdXNlV2ViV29ya2VyO1xuICB9O1xuXG4gIHZhciBzZXRMb2NhdGlvbkhyZWYgPSBmdW5jdGlvbiBzZXRMb2NhdGlvbkhyZWYodmFsdWUpIHtcbiAgICBsb2NhdGlvbkhyZWYgPSB2YWx1ZTtcbiAgfTtcblxuICB2YXIgZ2V0TG9jYXRpb25IcmVmID0gZnVuY3Rpb24gZ2V0TG9jYXRpb25IcmVmKCkge1xuICAgIHJldHVybiBsb2NhdGlvbkhyZWY7XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlVGFnKHR5cGUpIHtcbiAgICAvLyByZXR1cm4ge2FwcGVuZENoaWxkOmZ1bmN0aW9uKCl7fSxzZXRBdHRyaWJ1dGU6ZnVuY3Rpb24oKXt9LHN0eWxlOnt9fVxuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kUHJvdG90eXBlKHNvdXJjZXMsIGRlc3RpbmF0aW9uKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHNvdXJjZXMubGVuZ3RoO1xuICAgIHZhciBzb3VyY2VQcm90b3R5cGU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHNvdXJjZVByb3RvdHlwZSA9IHNvdXJjZXNbaV0ucHJvdG90eXBlO1xuXG4gICAgICBmb3IgKHZhciBhdHRyIGluIHNvdXJjZVByb3RvdHlwZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZVByb3RvdHlwZSwgYXR0cikpIGRlc3RpbmF0aW9uLnByb3RvdHlwZVthdHRyXSA9IHNvdXJjZVByb3RvdHlwZVthdHRyXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXREZXNjcmlwdG9yKG9iamVjdCwgcHJvcCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcCk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQcm94eUZ1bmN0aW9uKHByb3RvdHlwZSkge1xuICAgIGZ1bmN0aW9uIFByb3h5RnVuY3Rpb24oKSB7fVxuXG4gICAgUHJveHlGdW5jdGlvbi5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgcmV0dXJuIFByb3h5RnVuY3Rpb247XG4gIH1cblxuICAvLyBpbXBvcnQgSG93bCBmcm9tICcuLi8uLi8zcmRfcGFydHkvaG93bGVyJztcbiAgdmFyIGF1ZGlvQ29udHJvbGxlckZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXVkaW9Db250cm9sbGVyKGF1ZGlvRmFjdG9yeSkge1xuICAgICAgdGhpcy5hdWRpb3MgPSBbXTtcbiAgICAgIHRoaXMuYXVkaW9GYWN0b3J5ID0gYXVkaW9GYWN0b3J5O1xuICAgICAgdGhpcy5fdm9sdW1lID0gMTtcbiAgICAgIHRoaXMuX2lzTXV0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBBdWRpb0NvbnRyb2xsZXIucHJvdG90eXBlID0ge1xuICAgICAgYWRkQXVkaW86IGZ1bmN0aW9uIGFkZEF1ZGlvKGF1ZGlvKSB7XG4gICAgICAgIHRoaXMuYXVkaW9zLnB1c2goYXVkaW8pO1xuICAgICAgfSxcbiAgICAgIHBhdXNlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmF1ZGlvcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgdGhpcy5hdWRpb3NbaV0ucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlc3VtZTogZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuYXVkaW9zLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICB0aGlzLmF1ZGlvc1tpXS5yZXN1bWUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFJhdGU6IGZ1bmN0aW9uIHNldFJhdGUocmF0ZVZhbHVlKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5hdWRpb3MubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHRoaXMuYXVkaW9zW2ldLnNldFJhdGUocmF0ZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZUF1ZGlvOiBmdW5jdGlvbiBjcmVhdGVBdWRpbyhhc3NldFBhdGgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXVkaW9GYWN0b3J5KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYXVkaW9GYWN0b3J5KGFzc2V0UGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2luZG93Lkhvd2wpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5Ib3dsKHtcbiAgICAgICAgICAgIHNyYzogW2Fzc2V0UGF0aF1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXNQbGF5aW5nOiBmYWxzZSxcbiAgICAgICAgICBwbGF5OiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgICAgICAgdGhpcy5pc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VlazogZnVuY3Rpb24gc2VlaygpIHtcbiAgICAgICAgICAgIHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwbGF5aW5nOiBmdW5jdGlvbiBwbGF5aW5nKCkge30sXG4gICAgICAgICAgcmF0ZTogZnVuY3Rpb24gcmF0ZSgpIHt9LFxuICAgICAgICAgIHNldFZvbHVtZTogZnVuY3Rpb24gc2V0Vm9sdW1lKCkge31cbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBzZXRBdWRpb0ZhY3Rvcnk6IGZ1bmN0aW9uIHNldEF1ZGlvRmFjdG9yeShhdWRpb0ZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5hdWRpb0ZhY3RvcnkgPSBhdWRpb0ZhY3Rvcnk7XG4gICAgICB9LFxuICAgICAgc2V0Vm9sdW1lOiBmdW5jdGlvbiBzZXRWb2x1bWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdm9sdW1lID0gdmFsdWU7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlVm9sdW1lKCk7XG4gICAgICB9LFxuICAgICAgbXV0ZTogZnVuY3Rpb24gbXV0ZSgpIHtcbiAgICAgICAgdGhpcy5faXNNdXRlZCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlVm9sdW1lKCk7XG4gICAgICB9LFxuICAgICAgdW5tdXRlOiBmdW5jdGlvbiB1bm11dGUoKSB7XG4gICAgICAgIHRoaXMuX2lzTXV0ZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl91cGRhdGVWb2x1bWUoKTtcbiAgICAgIH0sXG4gICAgICBnZXRWb2x1bWU6IGZ1bmN0aW9uIGdldFZvbHVtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZvbHVtZTtcbiAgICAgIH0sXG4gICAgICBfdXBkYXRlVm9sdW1lOiBmdW5jdGlvbiBfdXBkYXRlVm9sdW1lKCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuYXVkaW9zLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICB0aGlzLmF1ZGlvc1tpXS52b2x1bWUodGhpcy5fdm9sdW1lICogKHRoaXMuX2lzTXV0ZWQgPyAwIDogMSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBBdWRpb0NvbnRyb2xsZXIoKTtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGNyZWF0ZVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlUmVndWxhckFycmF5KHR5cGUsIGxlbikge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnaW50MTYnOlxuICAgICAgICBjYXNlICd1aW50OGMnOlxuICAgICAgICAgIHZhbHVlID0gMTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHZhbHVlID0gMS4xO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgYXJyLnB1c2godmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVR5cGVkQXJyYXlGYWN0b3J5KHR5cGUsIGxlbikge1xuICAgICAgaWYgKHR5cGUgPT09ICdmbG9hdDMyJykge1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShsZW4pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gJ2ludDE2Jykge1xuICAgICAgICByZXR1cm4gbmV3IEludDE2QXJyYXkobGVuKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09ICd1aW50OGMnKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhDbGFtcGVkQXJyYXkobGVuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNyZWF0ZVJlZ3VsYXJBcnJheSh0eXBlLCBsZW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVR5cGVkQXJyYXlGYWN0b3J5O1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVSZWd1bGFyQXJyYXk7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBjcmVhdGVTaXplZEFycmF5KGxlbikge1xuICAgIHJldHVybiBBcnJheS5hcHBseShudWxsLCB7XG4gICAgICBsZW5ndGg6IGxlblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gX3R5cGVvZiQ2KG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDYgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQ2ID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkNihvYmopOyB9XG4gIHZhciBzdWJmcmFtZUVuYWJsZWQgPSB0cnVlO1xuICB2YXIgZXhwcmVzc2lvbnNQbHVnaW4gPSBudWxsO1xuICB2YXIgZXhwcmVzc2lvbnNJbnRlcmZhY2VzID0gbnVsbDtcbiAgdmFyIGlkUHJlZml4JDEgPSAnJztcbiAgdmFyIGlzU2FmYXJpID0gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgdmFyIF9zaG91bGRSb3VuZFZhbHVlcyA9IGZhbHNlO1xuICB2YXIgYm1Qb3cgPSBNYXRoLnBvdztcbiAgdmFyIGJtU3FydCA9IE1hdGguc3FydDtcbiAgdmFyIGJtRmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgYm1NYXggPSBNYXRoLm1heDtcbiAgdmFyIGJtTWluID0gTWF0aC5taW47XG4gIHZhciBCTU1hdGggPSB7fTtcblxuICAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9wZXJ0eU5hbWVzID0gWydhYnMnLCAnYWNvcycsICdhY29zaCcsICdhc2luJywgJ2FzaW5oJywgJ2F0YW4nLCAnYXRhbmgnLCAnYXRhbjInLCAnY2VpbCcsICdjYnJ0JywgJ2V4cG0xJywgJ2NsejMyJywgJ2NvcycsICdjb3NoJywgJ2V4cCcsICdmbG9vcicsICdmcm91bmQnLCAnaHlwb3QnLCAnaW11bCcsICdsb2cnLCAnbG9nMXAnLCAnbG9nMicsICdsb2cxMCcsICdtYXgnLCAnbWluJywgJ3BvdycsICdyYW5kb20nLCAncm91bmQnLCAnc2lnbicsICdzaW4nLCAnc2luaCcsICdzcXJ0JywgJ3RhbicsICd0YW5oJywgJ3RydW5jJywgJ0UnLCAnTE4xMCcsICdMTjInLCAnTE9HMTBFJywgJ0xPRzJFJywgJ1BJJywgJ1NRUlQxXzInLCAnU1FSVDInXTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gcHJvcGVydHlOYW1lcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIEJNTWF0aFtwcm9wZXJ0eU5hbWVzW2ldXSA9IE1hdGhbcHJvcGVydHlOYW1lc1tpXV07XG4gICAgfVxuICB9KSgpO1xuXG4gIGZ1bmN0aW9uIFByb2plY3RJbnRlcmZhY2UkMSgpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBCTU1hdGgucmFuZG9tID0gTWF0aC5yYW5kb207XG5cbiAgQk1NYXRoLmFicyA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICB2YXIgdE9mVmFsID0gX3R5cGVvZiQ2KHZhbCk7XG5cbiAgICBpZiAodE9mVmFsID09PSAnb2JqZWN0JyAmJiB2YWwubGVuZ3RoKSB7XG4gICAgICB2YXIgYWJzQXJyID0gY3JlYXRlU2l6ZWRBcnJheSh2YWwubGVuZ3RoKTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHZhbC5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBhYnNBcnJbaV0gPSBNYXRoLmFicyh2YWxbaV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWJzQXJyO1xuICAgIH1cblxuICAgIHJldHVybiBNYXRoLmFicyh2YWwpO1xuICB9O1xuXG4gIHZhciBkZWZhdWx0Q3VydmVTZWdtZW50cyA9IDE1MDtcbiAgdmFyIGRlZ1RvUmFkcyA9IE1hdGguUEkgLyAxODA7XG4gIHZhciByb3VuZENvcm5lciA9IDAuNTUxOTtcblxuICBmdW5jdGlvbiByb3VuZFZhbHVlcyhmbGFnKSB7XG4gICAgX3Nob3VsZFJvdW5kVmFsdWVzID0gISFmbGFnO1xuICB9XG5cbiAgZnVuY3Rpb24gYm1SbmQodmFsdWUpIHtcbiAgICBpZiAoX3Nob3VsZFJvdW5kVmFsdWVzKSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVEaXYoZWxlbWVudCkge1xuICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGVsZW1lbnQuc3R5bGUudG9wID0gMDtcbiAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSAwO1xuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSAnMCAwJztcbiAgICBlbGVtZW50LnN0eWxlLndlYmtpdFRyYW5zZm9ybU9yaWdpbiA9ICcwIDAnO1xuICAgIGVsZW1lbnQuc3R5bGUuYmFja2ZhY2VWaXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIGVsZW1lbnQuc3R5bGUud2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xuICAgIGVsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xuICAgIGVsZW1lbnQuc3R5bGUubW96VHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1FbnRlckZyYW1lRXZlbnQodHlwZSwgY3VycmVudFRpbWUsIHRvdGFsVGltZSwgZnJhbWVNdWx0aXBsaWVyKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmN1cnJlbnRUaW1lID0gY3VycmVudFRpbWU7XG4gICAgdGhpcy50b3RhbFRpbWUgPSB0b3RhbFRpbWU7XG4gICAgdGhpcy5kaXJlY3Rpb24gPSBmcmFtZU11bHRpcGxpZXIgPCAwID8gLTEgOiAxO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1Db21wbGV0ZUV2ZW50KHR5cGUsIGZyYW1lTXVsdGlwbGllcikge1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5kaXJlY3Rpb24gPSBmcmFtZU11bHRpcGxpZXIgPCAwID8gLTEgOiAxO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1Db21wbGV0ZUxvb3BFdmVudCh0eXBlLCB0b3RhbExvb3BzLCBjdXJyZW50TG9vcCwgZnJhbWVNdWx0aXBsaWVyKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmN1cnJlbnRMb29wID0gY3VycmVudExvb3A7XG4gICAgdGhpcy50b3RhbExvb3BzID0gdG90YWxMb29wcztcbiAgICB0aGlzLmRpcmVjdGlvbiA9IGZyYW1lTXVsdGlwbGllciA8IDAgPyAtMSA6IDE7XG4gIH1cblxuICBmdW5jdGlvbiBCTVNlZ21lbnRTdGFydEV2ZW50KHR5cGUsIGZpcnN0RnJhbWUsIHRvdGFsRnJhbWVzKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmZpcnN0RnJhbWUgPSBmaXJzdEZyYW1lO1xuICAgIHRoaXMudG90YWxGcmFtZXMgPSB0b3RhbEZyYW1lcztcbiAgfVxuXG4gIGZ1bmN0aW9uIEJNRGVzdHJveUV2ZW50KHR5cGUsIHRhcmdldCkge1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBCTVJlbmRlckZyYW1lRXJyb3JFdmVudChuYXRpdmVFcnJvciwgY3VycmVudFRpbWUpIHtcbiAgICB0aGlzLnR5cGUgPSAncmVuZGVyRnJhbWVFcnJvcic7XG4gICAgdGhpcy5uYXRpdmVFcnJvciA9IG5hdGl2ZUVycm9yO1xuICAgIHRoaXMuY3VycmVudFRpbWUgPSBjdXJyZW50VGltZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEJNQ29uZmlnRXJyb3JFdmVudChuYXRpdmVFcnJvcikge1xuICAgIHRoaXMudHlwZSA9ICdjb25maWdFcnJvcic7XG4gICAgdGhpcy5uYXRpdmVFcnJvciA9IG5hdGl2ZUVycm9yO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1BbmltYXRpb25Db25maWdFcnJvckV2ZW50KHR5cGUsIG5hdGl2ZUVycm9yKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLm5hdGl2ZUVycm9yID0gbmF0aXZlRXJyb3I7XG4gIH1cblxuICB2YXIgY3JlYXRlRWxlbWVudElEID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY291bnQgPSAwO1xuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVJRCgpIHtcbiAgICAgIF9jb3VudCArPSAxO1xuICAgICAgcmV0dXJuIGlkUHJlZml4JDEgKyAnX19sb3R0aWVfZWxlbWVudF8nICsgX2NvdW50O1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBIU1Z0b1JHQihoLCBzLCB2KSB7XG4gICAgdmFyIHI7XG4gICAgdmFyIGc7XG4gICAgdmFyIGI7XG4gICAgdmFyIGk7XG4gICAgdmFyIGY7XG4gICAgdmFyIHA7XG4gICAgdmFyIHE7XG4gICAgdmFyIHQ7XG4gICAgaSA9IE1hdGguZmxvb3IoaCAqIDYpO1xuICAgIGYgPSBoICogNiAtIGk7XG4gICAgcCA9IHYgKiAoMSAtIHMpO1xuICAgIHEgPSB2ICogKDEgLSBmICogcyk7XG4gICAgdCA9IHYgKiAoMSAtICgxIC0gZikgKiBzKTtcblxuICAgIHN3aXRjaCAoaSAlIDYpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgciA9IHY7XG4gICAgICAgIGcgPSB0O1xuICAgICAgICBiID0gcDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMTpcbiAgICAgICAgciA9IHE7XG4gICAgICAgIGcgPSB2O1xuICAgICAgICBiID0gcDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgciA9IHA7XG4gICAgICAgIGcgPSB2O1xuICAgICAgICBiID0gdDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgciA9IHA7XG4gICAgICAgIGcgPSBxO1xuICAgICAgICBiID0gdjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNDpcbiAgICAgICAgciA9IHQ7XG4gICAgICAgIGcgPSBwO1xuICAgICAgICBiID0gdjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNTpcbiAgICAgICAgciA9IHY7XG4gICAgICAgIGcgPSBwO1xuICAgICAgICBiID0gcTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBbciwgZywgYl07XG4gIH1cblxuICBmdW5jdGlvbiBSR0J0b0hTVihyLCBnLCBiKSB7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgIHZhciBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICB2YXIgaDtcbiAgICB2YXIgcyA9IG1heCA9PT0gMCA/IDAgOiBkIC8gbWF4O1xuICAgIHZhciB2ID0gbWF4IC8gMjU1O1xuXG4gICAgc3dpdGNoIChtYXgpIHtcbiAgICAgIGNhc2UgbWluOlxuICAgICAgICBoID0gMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgcjpcbiAgICAgICAgaCA9IGcgLSBiICsgZCAqIChnIDwgYiA/IDYgOiAwKTtcbiAgICAgICAgaCAvPSA2ICogZDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZzpcbiAgICAgICAgaCA9IGIgLSByICsgZCAqIDI7XG4gICAgICAgIGggLz0gNiAqIGQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGI6XG4gICAgICAgIGggPSByIC0gZyArIGQgKiA0O1xuICAgICAgICBoIC89IDYgKiBkO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtoLCBzLCB2XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFNhdHVyYXRpb25Ub1JHQihjb2xvciwgb2Zmc2V0KSB7XG4gICAgdmFyIGhzdiA9IFJHQnRvSFNWKGNvbG9yWzBdICogMjU1LCBjb2xvclsxXSAqIDI1NSwgY29sb3JbMl0gKiAyNTUpO1xuICAgIGhzdlsxXSArPSBvZmZzZXQ7XG5cbiAgICBpZiAoaHN2WzFdID4gMSkge1xuICAgICAgaHN2WzFdID0gMTtcbiAgICB9IGVsc2UgaWYgKGhzdlsxXSA8PSAwKSB7XG4gICAgICBoc3ZbMV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBIU1Z0b1JHQihoc3ZbMF0sIGhzdlsxXSwgaHN2WzJdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEJyaWdodG5lc3NUb1JHQihjb2xvciwgb2Zmc2V0KSB7XG4gICAgdmFyIGhzdiA9IFJHQnRvSFNWKGNvbG9yWzBdICogMjU1LCBjb2xvclsxXSAqIDI1NSwgY29sb3JbMl0gKiAyNTUpO1xuICAgIGhzdlsyXSArPSBvZmZzZXQ7XG5cbiAgICBpZiAoaHN2WzJdID4gMSkge1xuICAgICAgaHN2WzJdID0gMTtcbiAgICB9IGVsc2UgaWYgKGhzdlsyXSA8IDApIHtcbiAgICAgIGhzdlsyXSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIEhTVnRvUkdCKGhzdlswXSwgaHN2WzFdLCBoc3ZbMl0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkSHVlVG9SR0IoY29sb3IsIG9mZnNldCkge1xuICAgIHZhciBoc3YgPSBSR0J0b0hTVihjb2xvclswXSAqIDI1NSwgY29sb3JbMV0gKiAyNTUsIGNvbG9yWzJdICogMjU1KTtcbiAgICBoc3ZbMF0gKz0gb2Zmc2V0IC8gMzYwO1xuXG4gICAgaWYgKGhzdlswXSA+IDEpIHtcbiAgICAgIGhzdlswXSAtPSAxO1xuICAgIH0gZWxzZSBpZiAoaHN2WzBdIDwgMCkge1xuICAgICAgaHN2WzBdICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIEhTVnRvUkdCKGhzdlswXSwgaHN2WzFdLCBoc3ZbMl0pO1xuICB9XG5cbiAgdmFyIHJnYlRvSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb2xvck1hcCA9IFtdO1xuICAgIHZhciBpO1xuICAgIHZhciBoZXg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgMjU2OyBpICs9IDEpIHtcbiAgICAgIGhleCA9IGkudG9TdHJpbmcoMTYpO1xuICAgICAgY29sb3JNYXBbaV0gPSBoZXgubGVuZ3RoID09PSAxID8gJzAnICsgaGV4IDogaGV4O1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAociwgZywgYikge1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIHIgPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoZyA8IDApIHtcbiAgICAgICAgZyA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChiIDwgMCkge1xuICAgICAgICBiID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICcjJyArIGNvbG9yTWFwW3JdICsgY29sb3JNYXBbZ10gKyBjb2xvck1hcFtiXTtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIHNldFN1YmZyYW1lRW5hYmxlZCA9IGZ1bmN0aW9uIHNldFN1YmZyYW1lRW5hYmxlZChmbGFnKSB7XG4gICAgc3ViZnJhbWVFbmFibGVkID0gISFmbGFnO1xuICB9O1xuXG4gIHZhciBnZXRTdWJmcmFtZUVuYWJsZWQgPSBmdW5jdGlvbiBnZXRTdWJmcmFtZUVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHN1YmZyYW1lRW5hYmxlZDtcbiAgfTtcblxuICB2YXIgc2V0RXhwcmVzc2lvbnNQbHVnaW4gPSBmdW5jdGlvbiBzZXRFeHByZXNzaW9uc1BsdWdpbih2YWx1ZSkge1xuICAgIGV4cHJlc3Npb25zUGx1Z2luID0gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGdldEV4cHJlc3Npb25zUGx1Z2luID0gZnVuY3Rpb24gZ2V0RXhwcmVzc2lvbnNQbHVnaW4oKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb25zUGx1Z2luO1xuICB9O1xuXG4gIHZhciBzZXRFeHByZXNzaW9uSW50ZXJmYWNlcyA9IGZ1bmN0aW9uIHNldEV4cHJlc3Npb25JbnRlcmZhY2VzKHZhbHVlKSB7XG4gICAgZXhwcmVzc2lvbnNJbnRlcmZhY2VzID0gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGdldEV4cHJlc3Npb25JbnRlcmZhY2VzID0gZnVuY3Rpb24gZ2V0RXhwcmVzc2lvbkludGVyZmFjZXMoKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb25zSW50ZXJmYWNlcztcbiAgfTtcblxuICB2YXIgc2V0RGVmYXVsdEN1cnZlU2VnbWVudHMgPSBmdW5jdGlvbiBzZXREZWZhdWx0Q3VydmVTZWdtZW50cyh2YWx1ZSkge1xuICAgIGRlZmF1bHRDdXJ2ZVNlZ21lbnRzID0gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGdldERlZmF1bHRDdXJ2ZVNlZ21lbnRzID0gZnVuY3Rpb24gZ2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRDdXJ2ZVNlZ21lbnRzO1xuICB9O1xuXG4gIHZhciBzZXRJZFByZWZpeCA9IGZ1bmN0aW9uIHNldElkUHJlZml4KHZhbHVlKSB7XG4gICAgaWRQcmVmaXgkMSA9IHZhbHVlO1xuICB9O1xuXG4gIHZhciBnZXRJZFByZWZpeCA9IGZ1bmN0aW9uIGdldElkUHJlZml4KCkge1xuICAgIHJldHVybiBpZFByZWZpeCQxO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5TKHR5cGUpIHtcbiAgICAvLyByZXR1cm4ge2FwcGVuZENoaWxkOmZ1bmN0aW9uKCl7fSxzZXRBdHRyaWJ1dGU6ZnVuY3Rpb24oKXt9LHN0eWxlOnt9fVxuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3R5cGVvZiQ1KG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDUgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQ1ID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkNShvYmopOyB9XG5cbiAgdmFyIGRhdGFNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY291bnRlcklkID0gMTtcbiAgICB2YXIgcHJvY2Vzc2VzID0gW107XG4gICAgdmFyIHdvcmtlckZuO1xuICAgIHZhciB3b3JrZXJJbnN0YW5jZTtcbiAgICB2YXIgd29ya2VyUHJveHkgPSB7XG4gICAgICBvbm1lc3NhZ2U6IGZ1bmN0aW9uIG9ubWVzc2FnZSgpIHt9LFxuICAgICAgcG9zdE1lc3NhZ2U6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKHBhdGgpIHtcbiAgICAgICAgd29ya2VyRm4oe1xuICAgICAgICAgIGRhdGE6IHBhdGhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgX3dvcmtlclNlbGYgPSB7XG4gICAgICBwb3N0TWVzc2FnZTogZnVuY3Rpb24gcG9zdE1lc3NhZ2UoZGF0YSkge1xuICAgICAgICB3b3JrZXJQcm94eS5vbm1lc3NhZ2Uoe1xuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVdvcmtlcihmbikge1xuICAgICAgaWYgKHdpbmRvdy5Xb3JrZXIgJiYgd2luZG93LkJsb2IgJiYgZ2V0V2ViV29ya2VyKCkpIHtcbiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbJ3ZhciBfd29ya2VyU2VsZiA9IHNlbGY7IHNlbGYub25tZXNzYWdlID0gJywgZm4udG9TdHJpbmcoKV0sIHtcbiAgICAgICAgICB0eXBlOiAndGV4dC9qYXZhc2NyaXB0J1xuICAgICAgICB9KTsgLy8gdmFyIGJsb2IgPSBuZXcgQmxvYihbJ3NlbGYub25tZXNzYWdlID0gJywgZm4udG9TdHJpbmcoKV0sIHsgdHlwZTogJ3RleHQvamF2YXNjcmlwdCcgfSk7XG5cbiAgICAgICAgdmFyIHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgIHJldHVybiBuZXcgV29ya2VyKHVybCk7XG4gICAgICB9XG5cbiAgICAgIHdvcmtlckZuID0gZm47XG4gICAgICByZXR1cm4gd29ya2VyUHJveHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0dXBXb3JrZXIoKSB7XG4gICAgICBpZiAoIXdvcmtlckluc3RhbmNlKSB7XG4gICAgICAgIHdvcmtlckluc3RhbmNlID0gY3JlYXRlV29ya2VyKGZ1bmN0aW9uIHdvcmtlclN0YXJ0KGUpIHtcbiAgICAgICAgICBmdW5jdGlvbiBkYXRhRnVuY3Rpb25NYW5hZ2VyKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVMYXllcnMobGF5ZXJzLCBjb21wcykge1xuICAgICAgICAgICAgICB2YXIgbGF5ZXJEYXRhO1xuICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgdmFyIGxlbiA9IGxheWVycy5sZW5ndGg7XG4gICAgICAgICAgICAgIHZhciBqO1xuICAgICAgICAgICAgICB2YXIgakxlbjtcbiAgICAgICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgICAgIHZhciBrTGVuO1xuXG4gICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGxheWVyRGF0YSA9IGxheWVyc1tpXTtcblxuICAgICAgICAgICAgICAgIGlmICgna3MnIGluIGxheWVyRGF0YSAmJiAhbGF5ZXJEYXRhLmNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgICAgbGF5ZXJEYXRhLmNvbXBsZXRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChsYXllckRhdGEuaGFzTWFzaykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza1Byb3BzID0gbGF5ZXJEYXRhLm1hc2tzUHJvcGVydGllcztcbiAgICAgICAgICAgICAgICAgICAgakxlbiA9IG1hc2tQcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrUHJvcHNbal0ucHQuay5pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzKG1hc2tQcm9wc1tqXS5wdC5rKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAga0xlbiA9IG1hc2tQcm9wc1tqXS5wdC5rLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Byb3BzW2pdLnB0Lmtba10ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRQYXRoc1RvQWJzb2x1dGVWYWx1ZXMobWFza1Byb3BzW2pdLnB0Lmtba10uc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Byb3BzW2pdLnB0Lmtba10uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRQYXRoc1RvQWJzb2x1dGVWYWx1ZXMobWFza1Byb3BzW2pdLnB0Lmtba10uZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKGxheWVyRGF0YS50eSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsYXllckRhdGEubGF5ZXJzID0gZmluZENvbXBMYXllcnMobGF5ZXJEYXRhLnJlZklkLCBjb21wcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlTGF5ZXJzKGxheWVyRGF0YS5sYXllcnMsIGNvbXBzKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGF5ZXJEYXRhLnR5ID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlU2hhcGVzKGxheWVyRGF0YS5zaGFwZXMpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsYXllckRhdGEudHkgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVUZXh0KGxheWVyRGF0YSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlQ2hhcnMoY2hhcnMsIGFzc2V0cykge1xuICAgICAgICAgICAgICBpZiAoY2hhcnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGNoYXJzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJzW2ldLnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFyIGNvbXBEYXRhID0gZmluZENvbXAoY2hhcnNbaV0uZGF0YS5yZWZJZCwgYXNzZXRzKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNbaV0uZGF0YS5sYXllcnMgPSBmaW5kQ29tcExheWVycyhjaGFyc1tpXS5kYXRhLnJlZklkLCBhc3NldHMpOyAvLyBjaGFyc1tpXS5kYXRhLmlwID0gMDtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhcnNbaV0uZGF0YS5vcCA9IDk5OTk5O1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGFyc1tpXS5kYXRhLnN0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhcnNbaV0uZGF0YS5zciA9IDE7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoYXJzW2ldLncgPSBjb21wRGF0YS53O1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGFyc1tpXS5kYXRhLmtzID0ge1xuICAgICAgICAgICAgICAgICAgICAvLyAgIGE6IHsgazogWzAsIDAsIDBdLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcDogeyBrOiBbMCwgLWNvbXBEYXRhLmgsIDBdLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcjogeyBrOiAwLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgczogeyBrOiBbMTAwLCAxMDBdLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgbzogeyBrOiAxMDAsIGE6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gfTtcblxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZUxheWVycyhjaGFyc1tpXS5kYXRhLmxheWVycywgYXNzZXRzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZmluZENvbXAoaWQsIGNvbXBzKSB7XG4gICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgdmFyIGxlbiA9IGNvbXBzLmxlbmd0aDtcblxuICAgICAgICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgICAgICAgIGlmIChjb21wc1tpXS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wc1tpXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZmluZENvbXBMYXllcnMoaWQsIGNvbXBzKSB7XG4gICAgICAgICAgICAgIHZhciBjb21wID0gZmluZENvbXAoaWQsIGNvbXBzKTtcblxuICAgICAgICAgICAgICBpZiAoY29tcCkge1xuICAgICAgICAgICAgICAgIGlmICghY29tcC5sYXllcnMuX191c2VkKSB7XG4gICAgICAgICAgICAgICAgICBjb21wLmxheWVycy5fX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXAubGF5ZXJzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbXAubGF5ZXJzKSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVTaGFwZXMoYXJyKSB7XG4gICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgICAgdmFyIGo7XG4gICAgICAgICAgICAgIHZhciBqTGVuO1xuXG4gICAgICAgICAgICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFycltpXS50eSA9PT0gJ3NoJykge1xuICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS5rcy5rLmkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhhcnJbaV0ua3Muayk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBqTGVuID0gYXJyW2ldLmtzLmsubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyW2ldLmtzLmtbal0ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhhcnJbaV0ua3Mua1tqXS5zWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyW2ldLmtzLmtbal0uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhhcnJbaV0ua3Mua1tqXS5lWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ2dyJykge1xuICAgICAgICAgICAgICAgICAgY29tcGxldGVTaGFwZXMoYXJyW2ldLml0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhwYXRoKSB7XG4gICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICB2YXIgbGVuID0gcGF0aC5pLmxlbmd0aDtcblxuICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBwYXRoLmlbaV1bMF0gKz0gcGF0aC52W2ldWzBdO1xuICAgICAgICAgICAgICAgIHBhdGguaVtpXVsxXSArPSBwYXRoLnZbaV1bMV07XG4gICAgICAgICAgICAgICAgcGF0aC5vW2ldWzBdICs9IHBhdGgudltpXVswXTtcbiAgICAgICAgICAgICAgICBwYXRoLm9baV1bMV0gKz0gcGF0aC52W2ldWzFdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrVmVyc2lvbihtaW5pbXVtLCBhbmltVmVyc2lvblN0cmluZykge1xuICAgICAgICAgICAgICB2YXIgYW5pbVZlcnNpb24gPSBhbmltVmVyc2lvblN0cmluZyA/IGFuaW1WZXJzaW9uU3RyaW5nLnNwbGl0KCcuJykgOiBbMTAwLCAxMDAsIDEwMF07XG5cbiAgICAgICAgICAgICAgaWYgKG1pbmltdW1bMF0gPiBhbmltVmVyc2lvblswXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGFuaW1WZXJzaW9uWzBdID4gbWluaW11bVswXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChtaW5pbXVtWzFdID4gYW5pbVZlcnNpb25bMV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChhbmltVmVyc2lvblsxXSA+IG1pbmltdW1bMV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAobWluaW11bVsyXSA+IGFuaW1WZXJzaW9uWzJdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYW5pbVZlcnNpb25bMl0gPiBtaW5pbXVtWzJdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjaGVja1RleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBtaW5pbXVtVmVyc2lvbiA9IFs0LCA0LCAxNF07XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlVGV4dExheWVyKHRleHRMYXllcikge1xuICAgICAgICAgICAgICAgIHZhciBkb2N1bWVudERhdGEgPSB0ZXh0TGF5ZXIudC5kO1xuICAgICAgICAgICAgICAgIHRleHRMYXllci50LmQgPSB7XG4gICAgICAgICAgICAgICAgICBrOiBbe1xuICAgICAgICAgICAgICAgICAgICBzOiBkb2N1bWVudERhdGEsXG4gICAgICAgICAgICAgICAgICAgIHQ6IDBcbiAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVMYXllcnMobGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGxheWVycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChsYXllcnNbaV0udHkgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGV4dExheWVyKGxheWVyc1tpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGFuaW1hdGlvbkRhdGEuYXNzZXRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tDaGFycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIG1pbmltdW1WZXJzaW9uID0gWzQsIDcsIDk5XTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRhdGEuY2hhcnMgJiYgIWNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgICB2YXIgbGVuID0gYW5pbWF0aW9uRGF0YS5jaGFycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hhckRhdGEgPSBhbmltYXRpb25EYXRhLmNoYXJzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyRGF0YS5kYXRhICYmIGNoYXJEYXRhLmRhdGEuc2hhcGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVTaGFwZXMoY2hhckRhdGEuZGF0YS5zaGFwZXMpO1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJEYXRhLmRhdGEuaXAgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJEYXRhLmRhdGEub3AgPSA5OTk5OTtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLnN0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLnNyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLmtzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBrOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGE6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGs6IFsxMDAsIDEwMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGE6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGs6IFswLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazogMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uRGF0YS5jaGFyc1tpXS50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLnNoYXBlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHk6ICdubydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhckRhdGEuZGF0YS5zaGFwZXNbMF0uaXQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgazogWzEwMCwgMTAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICByOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgazogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrOiAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGs6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGs6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0eTogJ3RyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tQYXRoUHJvcGVydGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIG1pbmltdW1WZXJzaW9uID0gWzUsIDcsIDE1XTtcblxuICAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVUZXh0TGF5ZXIodGV4dExheWVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhdGhEYXRhID0gdGV4dExheWVyLnQucDtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGF0aERhdGEuYSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgIHBhdGhEYXRhLmEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgICAgICAgIGs6IHBhdGhEYXRhLmFcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXRoRGF0YS5wID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgcGF0aERhdGEucCA9IHtcbiAgICAgICAgICAgICAgICAgICAgYTogMCxcbiAgICAgICAgICAgICAgICAgICAgazogcGF0aERhdGEucFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhdGhEYXRhLnIgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICBwYXRoRGF0YS5yID0ge1xuICAgICAgICAgICAgICAgICAgICBhOiAwLFxuICAgICAgICAgICAgICAgICAgICBrOiBwYXRoRGF0YS5yXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVMYXllcnMobGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGxheWVycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChsYXllcnNbaV0udHkgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGV4dExheWVyKGxheWVyc1tpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGFuaW1hdGlvbkRhdGEuYXNzZXRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tDb2xvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBtaW5pbXVtVmVyc2lvbiA9IFs0LCAxLCA5XTtcblxuICAgICAgICAgICAgICBmdW5jdGlvbiBpdGVyYXRlU2hhcGVzKHNoYXBlcykge1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBzaGFwZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBqO1xuICAgICAgICAgICAgICAgIHZhciBqTGVuO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoc2hhcGVzW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVTaGFwZXMoc2hhcGVzW2ldLml0KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAnZmwnIHx8IHNoYXBlc1tpXS50eSA9PT0gJ3N0Jykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcGVzW2ldLmMuayAmJiBzaGFwZXNbaV0uYy5rWzBdLmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBqTGVuID0gc2hhcGVzW2ldLmMuay5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcGVzW2ldLmMua1tqXS5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tpXS5jLmtbal0uc1swXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tpXS5jLmtbal0uc1sxXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tpXS5jLmtbal0uc1syXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tpXS5jLmtbal0uc1szXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGFwZXNbaV0uYy5rW2pdLmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5lWzBdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5lWzFdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5lWzJdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5lWzNdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1swXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1sxXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1syXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1szXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmdW5jdGlvbiBpdGVyYXRlTGF5ZXJzKGxheWVycykge1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBsYXllcnMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBpZiAobGF5ZXJzW2ldLnR5ID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVTaGFwZXMobGF5ZXJzW2ldLnNoYXBlcyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGFuaW1hdGlvbkRhdGEuYXNzZXRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tTaGFwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBtaW5pbXVtVmVyc2lvbiA9IFs0LCA0LCAxOF07XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVDbG9zaW5nU2hhcGVzKGFycikge1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBqO1xuICAgICAgICAgICAgICAgIHZhciBqTGVuO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChhcnJbaV0udHkgPT09ICdzaCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS5rcy5rLmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhcnJbaV0ua3Muay5jID0gYXJyW2ldLmNsb3NlZDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBqTGVuID0gYXJyW2ldLmtzLmsubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS5rcy5rW2pdLnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyW2ldLmtzLmtbal0uc1swXS5jID0gYXJyW2ldLmNsb3NlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS5rcy5rW2pdLmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyW2ldLmtzLmtbal0uZVswXS5jID0gYXJyW2ldLmNsb3NlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlQ2xvc2luZ1NoYXBlcyhhcnJbaV0uaXQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVMYXllcnMobGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxheWVyRGF0YTtcbiAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gbGF5ZXJzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgajtcbiAgICAgICAgICAgICAgICB2YXIgakxlbjtcbiAgICAgICAgICAgICAgICB2YXIgaztcbiAgICAgICAgICAgICAgICB2YXIga0xlbjtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgbGF5ZXJEYXRhID0gbGF5ZXJzW2ldO1xuXG4gICAgICAgICAgICAgICAgICBpZiAobGF5ZXJEYXRhLmhhc01hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2tQcm9wcyA9IGxheWVyRGF0YS5tYXNrc1Byb3BlcnRpZXM7XG4gICAgICAgICAgICAgICAgICAgIGpMZW4gPSBtYXNrUHJvcHMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Byb3BzW2pdLnB0LmsuaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Byb3BzW2pdLnB0LmsuYyA9IG1hc2tQcm9wc1tqXS5jbDtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAga0xlbiA9IG1hc2tQcm9wc1tqXS5wdC5rLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Byb3BzW2pdLnB0Lmtba10ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tQcm9wc1tqXS5wdC5rW2tdLnNbMF0uYyA9IG1hc2tQcm9wc1tqXS5jbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrUHJvcHNbal0ucHQua1trXS5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Byb3BzW2pdLnB0Lmtba10uZVswXS5jID0gbWFza1Byb3BzW2pdLmNsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmIChsYXllckRhdGEudHkgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVDbG9zaW5nU2hhcGVzKGxheWVyRGF0YS5zaGFwZXMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYW5pbWF0aW9uRGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChjaGVja1ZlcnNpb24obWluaW11bVZlcnNpb24sIGFuaW1hdGlvbkRhdGEudikpIHtcbiAgICAgICAgICAgICAgICAgIGl0ZXJhdGVMYXllcnMoYW5pbWF0aW9uRGF0YS5sYXllcnMpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsZW4gPSBhbmltYXRpb25EYXRhLmFzc2V0cy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmFzc2V0c1tpXS5sYXllcnMpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0oKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVEYXRhKGFuaW1hdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRhdGEuX19jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNoZWNrQ29sb3JzKGFuaW1hdGlvbkRhdGEpO1xuICAgICAgICAgICAgICBjaGVja1RleHQoYW5pbWF0aW9uRGF0YSk7XG4gICAgICAgICAgICAgIGNoZWNrQ2hhcnMoYW5pbWF0aW9uRGF0YSk7XG4gICAgICAgICAgICAgIGNoZWNrUGF0aFByb3BlcnRpZXMoYW5pbWF0aW9uRGF0YSk7XG4gICAgICAgICAgICAgIGNoZWNrU2hhcGVzKGFuaW1hdGlvbkRhdGEpO1xuICAgICAgICAgICAgICBjb21wbGV0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycywgYW5pbWF0aW9uRGF0YS5hc3NldHMpO1xuICAgICAgICAgICAgICBjb21wbGV0ZUNoYXJzKGFuaW1hdGlvbkRhdGEuY2hhcnMsIGFuaW1hdGlvbkRhdGEuYXNzZXRzKTtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uRGF0YS5fX2NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVUZXh0KGRhdGEpIHtcbiAgICAgICAgICAgICAgaWYgKGRhdGEudC5hLmxlbmd0aCA9PT0gMCAmJiAhKCdtJyBpbiBkYXRhLnQucCkpIHsvLyBkYXRhLnNpbmdsZVNoYXBlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbW9kdWxlT2IgPSB7fTtcbiAgICAgICAgICAgIG1vZHVsZU9iLmNvbXBsZXRlRGF0YSA9IGNvbXBsZXRlRGF0YTtcbiAgICAgICAgICAgIG1vZHVsZU9iLmNoZWNrQ29sb3JzID0gY2hlY2tDb2xvcnM7XG4gICAgICAgICAgICBtb2R1bGVPYi5jaGVja0NoYXJzID0gY2hlY2tDaGFycztcbiAgICAgICAgICAgIG1vZHVsZU9iLmNoZWNrUGF0aFByb3BlcnRpZXMgPSBjaGVja1BhdGhQcm9wZXJ0aWVzO1xuICAgICAgICAgICAgbW9kdWxlT2IuY2hlY2tTaGFwZXMgPSBjaGVja1NoYXBlcztcbiAgICAgICAgICAgIG1vZHVsZU9iLmNvbXBsZXRlTGF5ZXJzID0gY29tcGxldGVMYXllcnM7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlT2I7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFfd29ya2VyU2VsZi5kYXRhTWFuYWdlcikge1xuICAgICAgICAgICAgX3dvcmtlclNlbGYuZGF0YU1hbmFnZXIgPSBkYXRhRnVuY3Rpb25NYW5hZ2VyKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFfd29ya2VyU2VsZi5hc3NldExvYWRlcikge1xuICAgICAgICAgICAgX3dvcmtlclNlbGYuYXNzZXRMb2FkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdFJlc3BvbnNlKHhocikge1xuICAgICAgICAgICAgICAgIC8vIHVzaW5nIHR5cGVvZiBkb3VibGVzIHRoZSB0aW1lIG9mIGV4ZWN1dGlvbiBvZiB0aGlzIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAvLyBzbyBpZiBhdmFpbGFibGUsIGl0J3MgYmV0dGVyIHRvIHVzZSB0aGUgaGVhZGVyIHRvIHZhbGlkYXRlIHRoZSB0eXBlXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlSGVhZGVyID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdjb250ZW50LXR5cGUnKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50VHlwZUhlYWRlciAmJiB4aHIucmVzcG9uc2VUeXBlID09PSAnanNvbicgJiYgY29udGVudFR5cGVIZWFkZXIuaW5kZXhPZignanNvbicpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlICYmIF90eXBlb2YkNSh4aHIucmVzcG9uc2UpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlICYmIHR5cGVvZiB4aHIucmVzcG9uc2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2VUZXh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGxvYWRBc3NldChwYXRoLCBmdWxsUGF0aCwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOyAvLyBzZXQgcmVzcG9uc2VUeXBlIGFmdGVyIGNhbGxpbmcgb3BlbiBvciBJRSB3aWxsIGJyZWFrLlxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIC8vIFRoaXMgY3Jhc2hlcyBvbiBBbmRyb2lkIFdlYlZpZXcgcHJpb3IgdG8gS2l0S2F0XG4gICAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG5cbiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGZvcm1hdFJlc3BvbnNlKHhocik7XG4gICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGZvcm1hdFJlc3BvbnNlKHhocik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAvLyBIYWNrIHRvIHdvcmthcm91bmQgYmFubmVyIHZhbGlkYXRpb25cbiAgICAgICAgICAgICAgICAgIHhoci5vcGVuKFsnRycsICdFJywgJ1QnXS5qb2luKCcnKSwgcGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIC8vIEhhY2sgdG8gd29ya2Fyb3VuZCBiYW5uZXIgdmFsaWRhdGlvblxuICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oWydHJywgJ0UnLCAnVCddLmpvaW4oJycpLCBmdWxsUGF0aCArICcvJyArIHBhdGgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxvYWQ6IGxvYWRBc3NldFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChlLmRhdGEudHlwZSA9PT0gJ2xvYWRBbmltYXRpb24nKSB7XG4gICAgICAgICAgICBfd29ya2VyU2VsZi5hc3NldExvYWRlci5sb2FkKGUuZGF0YS5wYXRoLCBlLmRhdGEuZnVsbFBhdGgsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgIF93b3JrZXJTZWxmLmRhdGFNYW5hZ2VyLmNvbXBsZXRlRGF0YShkYXRhKTtcblxuICAgICAgICAgICAgICBfd29ya2VyU2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBkYXRhLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfd29ya2VyU2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcidcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGUuZGF0YS50eXBlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gZS5kYXRhLmFuaW1hdGlvbjtcblxuICAgICAgICAgICAgX3dvcmtlclNlbGYuZGF0YU1hbmFnZXIuY29tcGxldGVEYXRhKGFuaW1hdGlvbik7XG5cbiAgICAgICAgICAgIF93b3JrZXJTZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgcGF5bG9hZDogYW5pbWF0aW9uLFxuICAgICAgICAgICAgICBzdGF0dXM6ICdzdWNjZXNzJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlLmRhdGEudHlwZSA9PT0gJ2xvYWREYXRhJykge1xuICAgICAgICAgICAgX3dvcmtlclNlbGYuYXNzZXRMb2FkZXIubG9hZChlLmRhdGEucGF0aCwgZS5kYXRhLmZ1bGxQYXRoLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICBfd29ya2VyU2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBkYXRhLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfd29ya2VyU2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcidcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHdvcmtlckluc3RhbmNlLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHZhciBkYXRhID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICB2YXIgaWQgPSBkYXRhLmlkO1xuICAgICAgICAgIHZhciBwcm9jZXNzID0gcHJvY2Vzc2VzW2lkXTtcbiAgICAgICAgICBwcm9jZXNzZXNbaWRdID0gbnVsbDtcblxuICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm9uQ29tcGxldGUoZGF0YS5wYXlsb2FkKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3Mub25FcnJvcikge1xuICAgICAgICAgICAgcHJvY2Vzcy5vbkVycm9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVByb2Nlc3Mob25Db21wbGV0ZSwgb25FcnJvcikge1xuICAgICAgX2NvdW50ZXJJZCArPSAxO1xuICAgICAgdmFyIGlkID0gJ3Byb2Nlc3NJZF8nICsgX2NvdW50ZXJJZDtcbiAgICAgIHByb2Nlc3Nlc1tpZF0gPSB7XG4gICAgICAgIG9uQ29tcGxldGU6IG9uQ29tcGxldGUsXG4gICAgICAgIG9uRXJyb3I6IG9uRXJyb3JcbiAgICAgIH07XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZEFuaW1hdGlvbihwYXRoLCBvbkNvbXBsZXRlLCBvbkVycm9yKSB7XG4gICAgICBzZXR1cFdvcmtlcigpO1xuICAgICAgdmFyIHByb2Nlc3NJZCA9IGNyZWF0ZVByb2Nlc3Mob25Db21wbGV0ZSwgb25FcnJvcik7XG4gICAgICB3b3JrZXJJbnN0YW5jZS5wb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICdsb2FkQW5pbWF0aW9uJyxcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgZnVsbFBhdGg6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIGlkOiBwcm9jZXNzSWRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWREYXRhKHBhdGgsIG9uQ29tcGxldGUsIG9uRXJyb3IpIHtcbiAgICAgIHNldHVwV29ya2VyKCk7XG4gICAgICB2YXIgcHJvY2Vzc0lkID0gY3JlYXRlUHJvY2VzcyhvbkNvbXBsZXRlLCBvbkVycm9yKTtcbiAgICAgIHdvcmtlckluc3RhbmNlLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ2xvYWREYXRhJyxcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgZnVsbFBhdGg6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIGlkOiBwcm9jZXNzSWRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlQW5pbWF0aW9uKGFuaW0sIG9uQ29tcGxldGUsIG9uRXJyb3IpIHtcbiAgICAgIHNldHVwV29ya2VyKCk7XG4gICAgICB2YXIgcHJvY2Vzc0lkID0gY3JlYXRlUHJvY2VzcyhvbkNvbXBsZXRlLCBvbkVycm9yKTtcbiAgICAgIHdvcmtlckluc3RhbmNlLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ2NvbXBsZXRlJyxcbiAgICAgICAgYW5pbWF0aW9uOiBhbmltLFxuICAgICAgICBpZDogcHJvY2Vzc0lkXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbG9hZEFuaW1hdGlvbjogbG9hZEFuaW1hdGlvbixcbiAgICAgIGxvYWREYXRhOiBsb2FkRGF0YSxcbiAgICAgIGNvbXBsZXRlQW5pbWF0aW9uOiBjb21wbGV0ZUFuaW1hdGlvblxuICAgIH07XG4gIH0oKTtcblxuICB2YXIgSW1hZ2VQcmVsb2FkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb3h5SW1hZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2FudmFzID0gY3JlYXRlVGFnKCdjYW52YXMnKTtcbiAgICAgIGNhbnZhcy53aWR0aCA9IDE7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gMTtcbiAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgwLDAsMCwwKSc7XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgMSwgMSk7XG4gICAgICByZXR1cm4gY2FudmFzO1xuICAgIH0oKTtcblxuICAgIGZ1bmN0aW9uIGltYWdlTG9hZGVkKCkge1xuICAgICAgdGhpcy5sb2FkZWRBc3NldHMgKz0gMTtcblxuICAgICAgaWYgKHRoaXMubG9hZGVkQXNzZXRzID09PSB0aGlzLnRvdGFsSW1hZ2VzICYmIHRoaXMubG9hZGVkRm9vdGFnZXNDb3VudCA9PT0gdGhpcy50b3RhbEZvb3RhZ2VzKSB7XG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZENiKSB7XG4gICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWRDYihudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvb3RhZ2VMb2FkZWQoKSB7XG4gICAgICB0aGlzLmxvYWRlZEZvb3RhZ2VzQ291bnQgKz0gMTtcblxuICAgICAgaWYgKHRoaXMubG9hZGVkQXNzZXRzID09PSB0aGlzLnRvdGFsSW1hZ2VzICYmIHRoaXMubG9hZGVkRm9vdGFnZXNDb3VudCA9PT0gdGhpcy50b3RhbEZvb3RhZ2VzKSB7XG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZENiKSB7XG4gICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWRDYihudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFzc2V0c1BhdGgoYXNzZXREYXRhLCBhc3NldHNQYXRoLCBvcmlnaW5hbFBhdGgpIHtcbiAgICAgIHZhciBwYXRoID0gJyc7XG5cbiAgICAgIGlmIChhc3NldERhdGEuZSkge1xuICAgICAgICBwYXRoID0gYXNzZXREYXRhLnA7XG4gICAgICB9IGVsc2UgaWYgKGFzc2V0c1BhdGgpIHtcbiAgICAgICAgdmFyIGltYWdlUGF0aCA9IGFzc2V0RGF0YS5wO1xuXG4gICAgICAgIGlmIChpbWFnZVBhdGguaW5kZXhPZignaW1hZ2VzLycpICE9PSAtMSkge1xuICAgICAgICAgIGltYWdlUGF0aCA9IGltYWdlUGF0aC5zcGxpdCgnLycpWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgcGF0aCA9IGFzc2V0c1BhdGggKyBpbWFnZVBhdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRoID0gb3JpZ2luYWxQYXRoO1xuICAgICAgICBwYXRoICs9IGFzc2V0RGF0YS51ID8gYXNzZXREYXRhLnUgOiAnJztcbiAgICAgICAgcGF0aCArPSBhc3NldERhdGEucDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEltYWdlTG9hZGVkKGltZykge1xuICAgICAgdmFyIF9jb3VudCA9IDA7XG4gICAgICB2YXIgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJveCA9IGltZy5nZXRCQm94KCk7XG5cbiAgICAgICAgaWYgKGJveC53aWR0aCB8fCBfY291bnQgPiA1MDApIHtcbiAgICAgICAgICB0aGlzLl9pbWFnZUxvYWRlZCgpO1xuXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9jb3VudCArPSAxO1xuICAgICAgfS5iaW5kKHRoaXMpLCA1MCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW1hZ2VEYXRhKGFzc2V0RGF0YSkge1xuICAgICAgdmFyIHBhdGggPSBnZXRBc3NldHNQYXRoKGFzc2V0RGF0YSwgdGhpcy5hc3NldHNQYXRoLCB0aGlzLnBhdGgpO1xuICAgICAgdmFyIGltZyA9IGNyZWF0ZU5TKCdpbWFnZScpO1xuXG4gICAgICBpZiAoaXNTYWZhcmkpIHtcbiAgICAgICAgdGhpcy50ZXN0SW1hZ2VMb2FkZWQoaW1nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5faW1hZ2VMb2FkZWQsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBvYi5pbWcgPSBwcm94eUltYWdlO1xuXG4gICAgICAgIHRoaXMuX2ltYWdlTG9hZGVkKCk7XG4gICAgICB9LmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgIGltZy5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsICdocmVmJywgcGF0aCk7XG5cbiAgICAgIGlmICh0aGlzLl9lbGVtZW50SGVscGVyLmFwcGVuZCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50SGVscGVyLmFwcGVuZChpbWcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudEhlbHBlci5hcHBlbmRDaGlsZChpbWcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2IgPSB7XG4gICAgICAgIGltZzogaW1nLFxuICAgICAgICBhc3NldERhdGE6IGFzc2V0RGF0YVxuICAgICAgfTtcbiAgICAgIHJldHVybiBvYjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbWdEYXRhKGFzc2V0RGF0YSkge1xuICAgICAgdmFyIHBhdGggPSBnZXRBc3NldHNQYXRoKGFzc2V0RGF0YSwgdGhpcy5hc3NldHNQYXRoLCB0aGlzLnBhdGgpO1xuICAgICAgdmFyIGltZyA9IGNyZWF0ZVRhZygnaW1nJyk7XG4gICAgICBpbWcuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcbiAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5faW1hZ2VMb2FkZWQsIGZhbHNlKTtcbiAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2IuaW1nID0gcHJveHlJbWFnZTtcblxuICAgICAgICB0aGlzLl9pbWFnZUxvYWRlZCgpO1xuICAgICAgfS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICBpbWcuc3JjID0gcGF0aDtcbiAgICAgIHZhciBvYiA9IHtcbiAgICAgICAgaW1nOiBpbWcsXG4gICAgICAgIGFzc2V0RGF0YTogYXNzZXREYXRhXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG9iO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZvb3RhZ2VEYXRhKGRhdGEpIHtcbiAgICAgIHZhciBvYiA9IHtcbiAgICAgICAgYXNzZXREYXRhOiBkYXRhXG4gICAgICB9O1xuICAgICAgdmFyIHBhdGggPSBnZXRBc3NldHNQYXRoKGRhdGEsIHRoaXMuYXNzZXRzUGF0aCwgdGhpcy5wYXRoKTtcbiAgICAgIGRhdGFNYW5hZ2VyLmxvYWREYXRhKHBhdGgsIGZ1bmN0aW9uIChmb290YWdlRGF0YSkge1xuICAgICAgICBvYi5pbWcgPSBmb290YWdlRGF0YTtcblxuICAgICAgICB0aGlzLl9mb290YWdlTG9hZGVkKCk7XG4gICAgICB9LmJpbmQodGhpcyksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2IuaW1nID0ge307XG5cbiAgICAgICAgdGhpcy5fZm9vdGFnZUxvYWRlZCgpO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgIHJldHVybiBvYjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkQXNzZXRzKGFzc2V0cywgY2IpIHtcbiAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkQ2IgPSBjYjtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGFzc2V0cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoIWFzc2V0c1tpXS5sYXllcnMpIHtcbiAgICAgICAgICBpZiAoIWFzc2V0c1tpXS50IHx8IGFzc2V0c1tpXS50ID09PSAnc2VxJykge1xuICAgICAgICAgICAgdGhpcy50b3RhbEltYWdlcyArPSAxO1xuICAgICAgICAgICAgdGhpcy5pbWFnZXMucHVzaCh0aGlzLl9jcmVhdGVJbWFnZURhdGEoYXNzZXRzW2ldKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhc3NldHNbaV0udCA9PT0gMykge1xuICAgICAgICAgICAgdGhpcy50b3RhbEZvb3RhZ2VzICs9IDE7XG4gICAgICAgICAgICB0aGlzLmltYWdlcy5wdXNoKHRoaXMuY3JlYXRlRm9vdGFnZURhdGEoYXNzZXRzW2ldKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UGF0aChwYXRoKSB7XG4gICAgICB0aGlzLnBhdGggPSBwYXRoIHx8ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldEFzc2V0c1BhdGgocGF0aCkge1xuICAgICAgdGhpcy5hc3NldHNQYXRoID0gcGF0aCB8fCAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBc3NldChhc3NldERhdGEpIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmltYWdlcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmICh0aGlzLmltYWdlc1tpXS5hc3NldERhdGEgPT09IGFzc2V0RGF0YSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmltYWdlc1tpXS5pbWc7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmltYWdlc0xvYWRlZENiID0gbnVsbDtcbiAgICAgIHRoaXMuaW1hZ2VzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZGVkSW1hZ2VzKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG90YWxJbWFnZXMgPT09IHRoaXMubG9hZGVkQXNzZXRzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRlZEZvb3RhZ2VzKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG90YWxGb290YWdlcyA9PT0gdGhpcy5sb2FkZWRGb290YWdlc0NvdW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldENhY2hlVHlwZSh0eXBlLCBlbGVtZW50SGVscGVyKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ3N2ZycpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudEhlbHBlciA9IGVsZW1lbnRIZWxwZXI7XG4gICAgICAgIHRoaXMuX2NyZWF0ZUltYWdlRGF0YSA9IHRoaXMuY3JlYXRlSW1hZ2VEYXRhLmJpbmQodGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jcmVhdGVJbWFnZURhdGEgPSB0aGlzLmNyZWF0ZUltZ0RhdGEuYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBJbWFnZVByZWxvYWRlckZhY3RvcnkoKSB7XG4gICAgICB0aGlzLl9pbWFnZUxvYWRlZCA9IGltYWdlTG9hZGVkLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9mb290YWdlTG9hZGVkID0gZm9vdGFnZUxvYWRlZC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy50ZXN0SW1hZ2VMb2FkZWQgPSB0ZXN0SW1hZ2VMb2FkZWQuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuY3JlYXRlRm9vdGFnZURhdGEgPSBjcmVhdGVGb290YWdlRGF0YS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5hc3NldHNQYXRoID0gJyc7XG4gICAgICB0aGlzLnBhdGggPSAnJztcbiAgICAgIHRoaXMudG90YWxJbWFnZXMgPSAwO1xuICAgICAgdGhpcy50b3RhbEZvb3RhZ2VzID0gMDtcbiAgICAgIHRoaXMubG9hZGVkQXNzZXRzID0gMDtcbiAgICAgIHRoaXMubG9hZGVkRm9vdGFnZXNDb3VudCA9IDA7XG4gICAgICB0aGlzLmltYWdlc0xvYWRlZENiID0gbnVsbDtcbiAgICAgIHRoaXMuaW1hZ2VzID0gW107XG4gICAgfVxuXG4gICAgSW1hZ2VQcmVsb2FkZXJGYWN0b3J5LnByb3RvdHlwZSA9IHtcbiAgICAgIGxvYWRBc3NldHM6IGxvYWRBc3NldHMsXG4gICAgICBzZXRBc3NldHNQYXRoOiBzZXRBc3NldHNQYXRoLFxuICAgICAgc2V0UGF0aDogc2V0UGF0aCxcbiAgICAgIGxvYWRlZEltYWdlczogbG9hZGVkSW1hZ2VzLFxuICAgICAgbG9hZGVkRm9vdGFnZXM6IGxvYWRlZEZvb3RhZ2VzLFxuICAgICAgZGVzdHJveTogZGVzdHJveSxcbiAgICAgIGdldEFzc2V0OiBnZXRBc3NldCxcbiAgICAgIGNyZWF0ZUltZ0RhdGE6IGNyZWF0ZUltZ0RhdGEsXG4gICAgICBjcmVhdGVJbWFnZURhdGE6IGNyZWF0ZUltYWdlRGF0YSxcbiAgICAgIGltYWdlTG9hZGVkOiBpbWFnZUxvYWRlZCxcbiAgICAgIGZvb3RhZ2VMb2FkZWQ6IGZvb3RhZ2VMb2FkZWQsXG4gICAgICBzZXRDYWNoZVR5cGU6IHNldENhY2hlVHlwZVxuICAgIH07XG4gICAgcmV0dXJuIEltYWdlUHJlbG9hZGVyRmFjdG9yeTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIEJhc2VFdmVudCgpIHt9XG5cbiAgQmFzZUV2ZW50LnByb3RvdHlwZSA9IHtcbiAgICB0cmlnZ2VyRXZlbnQ6IGZ1bmN0aW9uIHRyaWdnZXJFdmVudChldmVudE5hbWUsIGFyZ3MpIHtcbiAgICAgIGlmICh0aGlzLl9jYnNbZXZlbnROYW1lXSkge1xuICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2JzW2V2ZW50TmFtZV07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjYWxsYmFja3NbaV0oYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgaWYgKCF0aGlzLl9jYnNbZXZlbnROYW1lXSkge1xuICAgICAgICB0aGlzLl9jYnNbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jYnNbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgfS5iaW5kKHRoaXMpO1xuICAgIH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2Nic1tldmVudE5hbWVdID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fY2JzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5fY2JzW2V2ZW50TmFtZV0ubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2Nic1tldmVudE5hbWVdW2ldID09PSBjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5fY2JzW2V2ZW50TmFtZV0uc3BsaWNlKGksIDEpO1xuXG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICBsZW4gLT0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2Nic1tldmVudE5hbWVdLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX2Nic1tldmVudE5hbWVdID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgbWFya2VyUGFyc2VyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHBhcnNlUGF5bG9hZExpbmVzKHBheWxvYWQpIHtcbiAgICAgIHZhciBsaW5lcyA9IHBheWxvYWQuc3BsaXQoJ1xcclxcbicpO1xuICAgICAgdmFyIGtleXMgPSB7fTtcbiAgICAgIHZhciBsaW5lO1xuICAgICAgdmFyIGtleXNDb3VudCA9IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgbGluZSA9IGxpbmVzW2ldLnNwbGl0KCc6Jyk7XG5cbiAgICAgICAgaWYgKGxpbmUubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAga2V5c1tsaW5lWzBdXSA9IGxpbmVbMV0udHJpbSgpO1xuICAgICAgICAgIGtleXNDb3VudCArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlzQ291bnQgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBrZXlzO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoX21hcmtlcnMpIHtcbiAgICAgIHZhciBtYXJrZXJzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX21hcmtlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIF9tYXJrZXIgPSBfbWFya2Vyc1tpXTtcbiAgICAgICAgdmFyIG1hcmtlckRhdGEgPSB7XG4gICAgICAgICAgdGltZTogX21hcmtlci50bSxcbiAgICAgICAgICBkdXJhdGlvbjogX21hcmtlci5kclxuICAgICAgICB9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbWFya2VyRGF0YS5wYXlsb2FkID0gSlNPTi5wYXJzZShfbWFya2Vyc1tpXS5jbSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbWFya2VyRGF0YS5wYXlsb2FkID0gcGFyc2VQYXlsb2FkTGluZXMoX21hcmtlcnNbaV0uY20pO1xuICAgICAgICAgIH0gY2F0Y2ggKF9fKSB7XG4gICAgICAgICAgICBtYXJrZXJEYXRhLnBheWxvYWQgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IF9tYXJrZXJzW2ldLmNtXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtlcnMucHVzaChtYXJrZXJEYXRhKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hcmtlcnM7XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBQcm9qZWN0SW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQ29tcG9zaXRpb24oY29tcCkge1xuICAgICAgdGhpcy5jb21wb3NpdGlvbnMucHVzaChjb21wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gX3RoaXNQcm9qZWN0RnVuY3Rpb24obmFtZSkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmNvbXBvc2l0aW9ucy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAodGhpcy5jb21wb3NpdGlvbnNbaV0uZGF0YSAmJiB0aGlzLmNvbXBvc2l0aW9uc1tpXS5kYXRhLm5tID09PSBuYW1lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb21wb3NpdGlvbnNbaV0ucHJlcGFyZUZyYW1lICYmIHRoaXMuY29tcG9zaXRpb25zW2ldLmRhdGEueHQpIHtcbiAgICAgICAgICAgICAgdGhpcy5jb21wb3NpdGlvbnNbaV0ucHJlcGFyZUZyYW1lKHRoaXMuY3VycmVudEZyYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb25zW2ldLmNvbXBJbnRlcmZhY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIF90aGlzUHJvamVjdEZ1bmN0aW9uLmNvbXBvc2l0aW9ucyA9IFtdO1xuICAgICAgX3RoaXNQcm9qZWN0RnVuY3Rpb24uY3VycmVudEZyYW1lID0gMDtcbiAgICAgIF90aGlzUHJvamVjdEZ1bmN0aW9uLnJlZ2lzdGVyQ29tcG9zaXRpb24gPSByZWdpc3RlckNvbXBvc2l0aW9uO1xuICAgICAgcmV0dXJuIF90aGlzUHJvamVjdEZ1bmN0aW9uO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgcmVuZGVyZXJzID0ge307XG5cbiAgdmFyIHJlZ2lzdGVyUmVuZGVyZXIgPSBmdW5jdGlvbiByZWdpc3RlclJlbmRlcmVyKGtleSwgdmFsdWUpIHtcbiAgICByZW5kZXJlcnNba2V5XSA9IHZhbHVlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldFJlbmRlcmVyKGtleSkge1xuICAgIHJldHVybiByZW5kZXJlcnNba2V5XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRSZW5kZXJlcigpIHtcbiAgICAvLyBSZXR1cm5zIGNhbnZhcyBieSBkZWZhdWx0IGZvciBjb21wYXRpYmlsaXR5XG4gICAgaWYgKHJlbmRlcmVycy5jYW52YXMpIHtcbiAgICAgIHJldHVybiAnY2FudmFzJztcbiAgICB9IC8vIFJldHVybnMgYW55IHJlbmRlcmVyIHRoYXQgaXMgcmVnaXN0ZXJlZFxuXG5cbiAgICBmb3IgKHZhciBrZXkgaW4gcmVuZGVyZXJzKSB7XG4gICAgICBpZiAocmVuZGVyZXJzW2tleV0pIHtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBmdW5jdGlvbiBfdHlwZW9mJDQob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YkNCA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mJDQgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZiQ0KG9iaik7IH1cblxuICB2YXIgQW5pbWF0aW9uSXRlbSA9IGZ1bmN0aW9uIEFuaW1hdGlvbkl0ZW0oKSB7XG4gICAgdGhpcy5fY2JzID0gW107XG4gICAgdGhpcy5uYW1lID0gJyc7XG4gICAgdGhpcy5wYXRoID0gJyc7XG4gICAgdGhpcy5pc0xvYWRlZCA9IGZhbHNlO1xuICAgIHRoaXMuY3VycmVudEZyYW1lID0gMDtcbiAgICB0aGlzLmN1cnJlbnRSYXdGcmFtZSA9IDA7XG4gICAgdGhpcy5maXJzdEZyYW1lID0gMDtcbiAgICB0aGlzLnRvdGFsRnJhbWVzID0gMDtcbiAgICB0aGlzLmZyYW1lUmF0ZSA9IDA7XG4gICAgdGhpcy5mcmFtZU11bHQgPSAwO1xuICAgIHRoaXMucGxheVNwZWVkID0gMTtcbiAgICB0aGlzLnBsYXlEaXJlY3Rpb24gPSAxO1xuICAgIHRoaXMucGxheUNvdW50ID0gMDtcbiAgICB0aGlzLmFuaW1hdGlvbkRhdGEgPSB7fTtcbiAgICB0aGlzLmFzc2V0cyA9IFtdO1xuICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xuICAgIHRoaXMuYXV0b3BsYXkgPSBmYWxzZTtcbiAgICB0aGlzLmxvb3AgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuYW5pbWF0aW9uSUQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICB0aGlzLmFzc2V0c1BhdGggPSAnJztcbiAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSAwO1xuICAgIHRoaXMuc2VnbWVudFBvcyA9IDA7XG4gICAgdGhpcy5pc1N1YmZyYW1lRW5hYmxlZCA9IGdldFN1YmZyYW1lRW5hYmxlZCgpO1xuICAgIHRoaXMuc2VnbWVudHMgPSBbXTtcbiAgICB0aGlzLl9pZGxlID0gdHJ1ZTtcbiAgICB0aGlzLl9jb21wbGV0ZWRMb29wID0gZmFsc2U7XG4gICAgdGhpcy5wcm9qZWN0SW50ZXJmYWNlID0gUHJvamVjdEludGVyZmFjZSgpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIgPSBuZXcgSW1hZ2VQcmVsb2FkZXIoKTtcbiAgICB0aGlzLmF1ZGlvQ29udHJvbGxlciA9IGF1ZGlvQ29udHJvbGxlckZhY3RvcnkoKTtcbiAgICB0aGlzLm1hcmtlcnMgPSBbXTtcbiAgICB0aGlzLmNvbmZpZ0FuaW1hdGlvbiA9IHRoaXMuY29uZmlnQW5pbWF0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNldHVwRXJyb3IgPSB0aGlzLm9uU2V0dXBFcnJvci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TZWdtZW50Q29tcGxldGUgPSB0aGlzLm9uU2VnbWVudENvbXBsZXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5kcmF3bkZyYW1lRXZlbnQgPSBuZXcgQk1FbnRlckZyYW1lRXZlbnQoJ2RyYXduRnJhbWUnLCAwLCAwLCAwKTtcbiAgICB0aGlzLmV4cHJlc3Npb25zUGx1Z2luID0gZ2V0RXhwcmVzc2lvbnNQbHVnaW4oKTtcbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFdmVudF0sIEFuaW1hdGlvbkl0ZW0pO1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldFBhcmFtcyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zLndyYXBwZXIgfHwgcGFyYW1zLmNvbnRhaW5lcikge1xuICAgICAgdGhpcy53cmFwcGVyID0gcGFyYW1zLndyYXBwZXIgfHwgcGFyYW1zLmNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICB2YXIgYW5pbVR5cGUgPSAnc3ZnJztcblxuICAgIGlmIChwYXJhbXMuYW5pbVR5cGUpIHtcbiAgICAgIGFuaW1UeXBlID0gcGFyYW1zLmFuaW1UeXBlO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLnJlbmRlcmVyKSB7XG4gICAgICBhbmltVHlwZSA9IHBhcmFtcy5yZW5kZXJlcjtcbiAgICB9XG5cbiAgICB2YXIgUmVuZGVyZXJDbGFzcyA9IGdldFJlbmRlcmVyKGFuaW1UeXBlKTtcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyQ2xhc3ModGhpcywgcGFyYW1zLnJlbmRlcmVyU2V0dGluZ3MpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIuc2V0Q2FjaGVUeXBlKGFuaW1UeXBlLCB0aGlzLnJlbmRlcmVyLmdsb2JhbERhdGEuZGVmcyk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRQcm9qZWN0SW50ZXJmYWNlKHRoaXMucHJvamVjdEludGVyZmFjZSk7XG4gICAgdGhpcy5hbmltVHlwZSA9IGFuaW1UeXBlO1xuXG4gICAgaWYgKHBhcmFtcy5sb29wID09PSAnJyB8fCBwYXJhbXMubG9vcCA9PT0gbnVsbCB8fCBwYXJhbXMubG9vcCA9PT0gdW5kZWZpbmVkIHx8IHBhcmFtcy5sb29wID09PSB0cnVlKSB7XG4gICAgICB0aGlzLmxvb3AgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLmxvb3AgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmxvb3AgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb29wID0gcGFyc2VJbnQocGFyYW1zLmxvb3AsIDEwKTtcbiAgICB9XG5cbiAgICB0aGlzLmF1dG9wbGF5ID0gJ2F1dG9wbGF5JyBpbiBwYXJhbXMgPyBwYXJhbXMuYXV0b3BsYXkgOiB0cnVlO1xuICAgIHRoaXMubmFtZSA9IHBhcmFtcy5uYW1lID8gcGFyYW1zLm5hbWUgOiAnJztcbiAgICB0aGlzLmF1dG9sb2FkU2VnbWVudHMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyYW1zLCAnYXV0b2xvYWRTZWdtZW50cycpID8gcGFyYW1zLmF1dG9sb2FkU2VnbWVudHMgOiB0cnVlO1xuICAgIHRoaXMuYXNzZXRzUGF0aCA9IHBhcmFtcy5hc3NldHNQYXRoO1xuICAgIHRoaXMuaW5pdGlhbFNlZ21lbnQgPSBwYXJhbXMuaW5pdGlhbFNlZ21lbnQ7XG5cbiAgICBpZiAocGFyYW1zLmF1ZGlvRmFjdG9yeSkge1xuICAgICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIuc2V0QXVkaW9GYWN0b3J5KHBhcmFtcy5hdWRpb0ZhY3RvcnkpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuYW5pbWF0aW9uRGF0YSkge1xuICAgICAgdGhpcy5zZXR1cEFuaW1hdGlvbihwYXJhbXMuYW5pbWF0aW9uRGF0YSk7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMucGF0aCkge1xuICAgICAgaWYgKHBhcmFtcy5wYXRoLmxhc3RJbmRleE9mKCdcXFxcJykgIT09IC0xKSB7XG4gICAgICAgIHRoaXMucGF0aCA9IHBhcmFtcy5wYXRoLnN1YnN0cigwLCBwYXJhbXMucGF0aC5sYXN0SW5kZXhPZignXFxcXCcpICsgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhdGggPSBwYXJhbXMucGF0aC5zdWJzdHIoMCwgcGFyYW1zLnBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmZpbGVOYW1lID0gcGFyYW1zLnBhdGguc3Vic3RyKHBhcmFtcy5wYXRoLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICAgIHRoaXMuZmlsZU5hbWUgPSB0aGlzLmZpbGVOYW1lLnN1YnN0cigwLCB0aGlzLmZpbGVOYW1lLmxhc3RJbmRleE9mKCcuanNvbicpKTtcbiAgICAgIGRhdGFNYW5hZ2VyLmxvYWRBbmltYXRpb24ocGFyYW1zLnBhdGgsIHRoaXMuY29uZmlnQW5pbWF0aW9uLCB0aGlzLm9uU2V0dXBFcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLm9uU2V0dXBFcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ2RhdGFfZmFpbGVkJyk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0dXBBbmltYXRpb24gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRhdGFNYW5hZ2VyLmNvbXBsZXRlQW5pbWF0aW9uKGRhdGEsIHRoaXMuY29uZmlnQW5pbWF0aW9uKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXREYXRhID0gZnVuY3Rpb24gKHdyYXBwZXIsIGFuaW1hdGlvbkRhdGEpIHtcbiAgICBpZiAoYW5pbWF0aW9uRGF0YSkge1xuICAgICAgaWYgKF90eXBlb2YkNChhbmltYXRpb25EYXRhKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgYW5pbWF0aW9uRGF0YSA9IEpTT04ucGFyc2UoYW5pbWF0aW9uRGF0YSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgIHdyYXBwZXI6IHdyYXBwZXIsXG4gICAgICBhbmltYXRpb25EYXRhOiBhbmltYXRpb25EYXRhXG4gICAgfTtcbiAgICB2YXIgd3JhcHBlckF0dHJpYnV0ZXMgPSB3cmFwcGVyLmF0dHJpYnV0ZXM7XG4gICAgcGFyYW1zLnBhdGggPSB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbWF0aW9uLXBhdGgnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbWF0aW9uLXBhdGgnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1wYXRoJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLXBhdGgnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tcGF0aCcpID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1wYXRoJykudmFsdWUgOiAnJztcbiAgICBwYXJhbXMuYW5pbVR5cGUgPSB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS10eXBlJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tdHlwZScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLXR5cGUnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tdHlwZScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS10eXBlJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS10eXBlJykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tcmVuZGVyZXInKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tcmVuZGVyZXInKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tcmVuZGVyZXInKSA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tcmVuZGVyZXInKS52YWx1ZSA6IGdldFJlZ2lzdGVyZWRSZW5kZXJlcigpIHx8ICdjYW52YXMnO1xuICAgIHZhciBsb29wID0gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tbG9vcCcpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1hbmltLWxvb3AnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1sb29wJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLWxvb3AnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tbG9vcCcpID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1sb29wJykudmFsdWUgOiAnJztcblxuICAgIGlmIChsb29wID09PSAnZmFsc2UnKSB7XG4gICAgICBwYXJhbXMubG9vcCA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAobG9vcCA9PT0gJ3RydWUnKSB7XG4gICAgICBwYXJhbXMubG9vcCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChsb29wICE9PSAnJykge1xuICAgICAgcGFyYW1zLmxvb3AgPSBwYXJzZUludChsb29wLCAxMCk7XG4gICAgfVxuXG4gICAgdmFyIGF1dG9wbGF5ID0gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tYXV0b3BsYXknKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1hdXRvcGxheScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLWF1dG9wbGF5JykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLWF1dG9wbGF5JykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLWF1dG9wbGF5JykgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLWF1dG9wbGF5JykudmFsdWUgOiB0cnVlO1xuICAgIHBhcmFtcy5hdXRvcGxheSA9IGF1dG9wbGF5ICE9PSAnZmFsc2UnO1xuICAgIHBhcmFtcy5uYW1lID0gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLW5hbWUnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtbmFtZScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLW5hbWUnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tbmFtZScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1uYW1lJykgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLW5hbWUnKS52YWx1ZSA6ICcnO1xuICAgIHZhciBwcmVyZW5kZXIgPSB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1wcmVyZW5kZXInKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1wcmVyZW5kZXInKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1wcmVyZW5kZXInKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tcHJlcmVuZGVyJykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLXByZXJlbmRlcicpID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1wcmVyZW5kZXInKS52YWx1ZSA6ICcnO1xuXG4gICAgaWYgKHByZXJlbmRlciA9PT0gJ2ZhbHNlJykge1xuICAgICAgcGFyYW1zLnByZXJlbmRlciA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghcGFyYW1zLnBhdGgpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZGVzdHJveScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFBhcmFtcyhwYXJhbXMpO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5pbmNsdWRlTGF5ZXJzID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5vcCA+IHRoaXMuYW5pbWF0aW9uRGF0YS5vcCkge1xuICAgICAgdGhpcy5hbmltYXRpb25EYXRhLm9wID0gZGF0YS5vcDtcbiAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBNYXRoLmZsb29yKGRhdGEub3AgLSB0aGlzLmFuaW1hdGlvbkRhdGEuaXApO1xuICAgIH1cblxuICAgIHZhciBsYXllcnMgPSB0aGlzLmFuaW1hdGlvbkRhdGEubGF5ZXJzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBsYXllcnMubGVuZ3RoO1xuICAgIHZhciBuZXdMYXllcnMgPSBkYXRhLmxheWVycztcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbiA9IG5ld0xheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICBpID0gMDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKGxheWVyc1tpXS5pZCA9PT0gbmV3TGF5ZXJzW2pdLmlkKSB7XG4gICAgICAgICAgbGF5ZXJzW2ldID0gbmV3TGF5ZXJzW2pdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkYXRhLmNoYXJzIHx8IGRhdGEuZm9udHMpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5hZGRDaGFycyhkYXRhLmNoYXJzKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5hZGRGb250cyhkYXRhLmZvbnRzLCB0aGlzLnJlbmRlcmVyLmdsb2JhbERhdGEuZGVmcyk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuYXNzZXRzKSB7XG4gICAgICBsZW4gPSBkYXRhLmFzc2V0cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkRhdGEuYXNzZXRzLnB1c2goZGF0YS5hc3NldHNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYW5pbWF0aW9uRGF0YS5fX2NvbXBsZXRlID0gZmFsc2U7XG4gICAgZGF0YU1hbmFnZXIuY29tcGxldGVBbmltYXRpb24odGhpcy5hbmltYXRpb25EYXRhLCB0aGlzLm9uU2VnbWVudENvbXBsZXRlKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5vblNlZ21lbnRDb21wbGV0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdGhpcy5hbmltYXRpb25EYXRhID0gZGF0YTtcbiAgICB2YXIgZXhwcmVzc2lvbnNQbHVnaW4gPSBnZXRFeHByZXNzaW9uc1BsdWdpbigpO1xuXG4gICAgaWYgKGV4cHJlc3Npb25zUGx1Z2luKSB7XG4gICAgICBleHByZXNzaW9uc1BsdWdpbi5pbml0RXhwcmVzc2lvbnModGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2FkTmV4dFNlZ21lbnQoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5sb2FkTmV4dFNlZ21lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlZ21lbnRzID0gdGhpcy5hbmltYXRpb25EYXRhLnNlZ21lbnRzO1xuXG4gICAgaWYgKCFzZWdtZW50cyB8fCBzZWdtZW50cy5sZW5ndGggPT09IDAgfHwgIXRoaXMuYXV0b2xvYWRTZWdtZW50cykge1xuICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhX3JlYWR5Jyk7XG4gICAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSB0aGlzLnRvdGFsRnJhbWVzO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHMuc2hpZnQoKTtcbiAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSBzZWdtZW50LnRpbWUgKiB0aGlzLmZyYW1lUmF0ZTtcbiAgICB2YXIgc2VnbWVudFBhdGggPSB0aGlzLnBhdGggKyB0aGlzLmZpbGVOYW1lICsgJ18nICsgdGhpcy5zZWdtZW50UG9zICsgJy5qc29uJztcbiAgICB0aGlzLnNlZ21lbnRQb3MgKz0gMTtcbiAgICBkYXRhTWFuYWdlci5sb2FkRGF0YShzZWdtZW50UGF0aCwgdGhpcy5pbmNsdWRlTGF5ZXJzLmJpbmQodGhpcyksIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZGF0YV9mYWlsZWQnKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmxvYWRTZWdtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VnbWVudHMgPSB0aGlzLmFuaW1hdGlvbkRhdGEuc2VnbWVudHM7XG5cbiAgICBpZiAoIXNlZ21lbnRzKSB7XG4gICAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSB0aGlzLnRvdGFsRnJhbWVzO1xuICAgIH1cblxuICAgIHRoaXMubG9hZE5leHRTZWdtZW50KCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudHJpZ2dlcignbG9hZGVkX2ltYWdlcycpO1xuICAgIHRoaXMuY2hlY2tMb2FkZWQoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5wcmVsb2FkSW1hZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIuc2V0QXNzZXRzUGF0aCh0aGlzLmFzc2V0c1BhdGgpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIuc2V0UGF0aCh0aGlzLnBhdGgpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIubG9hZEFzc2V0cyh0aGlzLmFuaW1hdGlvbkRhdGEuYXNzZXRzLCB0aGlzLmltYWdlc0xvYWRlZC5iaW5kKHRoaXMpKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5jb25maWdBbmltYXRpb24gPSBmdW5jdGlvbiAoYW5pbURhdGEpIHtcbiAgICBpZiAoIXRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5hbmltYXRpb25EYXRhID0gYW5pbURhdGE7XG5cbiAgICAgIGlmICh0aGlzLmluaXRpYWxTZWdtZW50KSB7XG4gICAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBNYXRoLmZsb29yKHRoaXMuaW5pdGlhbFNlZ21lbnRbMV0gLSB0aGlzLmluaXRpYWxTZWdtZW50WzBdKTtcbiAgICAgICAgdGhpcy5maXJzdEZyYW1lID0gTWF0aC5yb3VuZCh0aGlzLmluaXRpYWxTZWdtZW50WzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBNYXRoLmZsb29yKHRoaXMuYW5pbWF0aW9uRGF0YS5vcCAtIHRoaXMuYW5pbWF0aW9uRGF0YS5pcCk7XG4gICAgICAgIHRoaXMuZmlyc3RGcmFtZSA9IE1hdGgucm91bmQodGhpcy5hbmltYXRpb25EYXRhLmlwKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXJlci5jb25maWdBbmltYXRpb24oYW5pbURhdGEpO1xuXG4gICAgICBpZiAoIWFuaW1EYXRhLmFzc2V0cykge1xuICAgICAgICBhbmltRGF0YS5hc3NldHMgPSBbXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hc3NldHMgPSB0aGlzLmFuaW1hdGlvbkRhdGEuYXNzZXRzO1xuICAgICAgdGhpcy5mcmFtZVJhdGUgPSB0aGlzLmFuaW1hdGlvbkRhdGEuZnI7XG4gICAgICB0aGlzLmZyYW1lTXVsdCA9IHRoaXMuYW5pbWF0aW9uRGF0YS5mciAvIDEwMDA7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNlYXJjaEV4dHJhQ29tcG9zaXRpb25zKGFuaW1EYXRhLmFzc2V0cyk7XG4gICAgICB0aGlzLm1hcmtlcnMgPSBtYXJrZXJQYXJzZXIoYW5pbURhdGEubWFya2VycyB8fCBbXSk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2NvbmZpZ19yZWFkeScpO1xuICAgICAgdGhpcy5wcmVsb2FkSW1hZ2VzKCk7XG4gICAgICB0aGlzLmxvYWRTZWdtZW50cygpO1xuICAgICAgdGhpcy51cGRhRnJhbWVNb2RpZmllcigpO1xuICAgICAgdGhpcy53YWl0Rm9yRm9udHNMb2FkZWQoKTtcblxuICAgICAgaWYgKHRoaXMuaXNQYXVzZWQpIHtcbiAgICAgICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy50cmlnZ2VyQ29uZmlnRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS53YWl0Rm9yRm9udHNMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5pc0xvYWRlZCkge1xuICAgICAgdGhpcy5jaGVja0xvYWRlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMud2FpdEZvckZvbnRzTG9hZGVkLmJpbmQodGhpcyksIDIwKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuY2hlY2tMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmlzTG9hZGVkICYmIHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5pc0xvYWRlZCAmJiAodGhpcy5pbWFnZVByZWxvYWRlci5sb2FkZWRJbWFnZXMoKSB8fCB0aGlzLnJlbmRlcmVyLnJlbmRlcmVyVHlwZSAhPT0gJ2NhbnZhcycpICYmIHRoaXMuaW1hZ2VQcmVsb2FkZXIubG9hZGVkRm9vdGFnZXMoKSkge1xuICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgICB2YXIgZXhwcmVzc2lvbnNQbHVnaW4gPSBnZXRFeHByZXNzaW9uc1BsdWdpbigpO1xuXG4gICAgICBpZiAoZXhwcmVzc2lvbnNQbHVnaW4pIHtcbiAgICAgICAgZXhwcmVzc2lvbnNQbHVnaW4uaW5pdEV4cHJlc3Npb25zKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbmRlcmVyLmluaXRJdGVtcygpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignRE9NTG9hZGVkJyk7XG4gICAgICB9LmJpbmQodGhpcyksIDApO1xuICAgICAgdGhpcy5nb3RvRnJhbWUoKTtcblxuICAgICAgaWYgKHRoaXMuYXV0b3BsYXkpIHtcbiAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgLy8gQWRkaW5nIHRoaXMgdmFsaWRhdGlvbiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgaW4gY2FzZSBhbiBldmVudCBvYmplY3Qgd2FzIGJlaW5nIHBhc3NlZCBkb3duXG4gICAgdmFyIF93aWR0aCA9IHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgPyB3aWR0aCA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBfaGVpZ2h0ID0gdHlwZW9mIGhlaWdodCA9PT0gJ251bWJlcicgPyBoZWlnaHQgOiB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLnJlbmRlcmVyLnVwZGF0ZUNvbnRhaW5lclNpemUoX3dpZHRoLCBfaGVpZ2h0KTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXRTdWJmcmFtZSA9IGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgdGhpcy5pc1N1YmZyYW1lRW5hYmxlZCA9ICEhZmxhZztcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nb3RvRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jdXJyZW50RnJhbWUgPSB0aGlzLmlzU3ViZnJhbWVFbmFibGVkID8gdGhpcy5jdXJyZW50UmF3RnJhbWUgOiB+fnRoaXMuY3VycmVudFJhd0ZyYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2VcblxuICAgIGlmICh0aGlzLnRpbWVDb21wbGV0ZWQgIT09IHRoaXMudG90YWxGcmFtZXMgJiYgdGhpcy5jdXJyZW50RnJhbWUgPiB0aGlzLnRpbWVDb21wbGV0ZWQpIHtcbiAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gdGhpcy50aW1lQ29tcGxldGVkO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcignZW50ZXJGcmFtZScpO1xuICAgIHRoaXMucmVuZGVyRnJhbWUoKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2RyYXduRnJhbWUnKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc0xvYWRlZCA9PT0gZmFsc2UgfHwgIXRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuZXhwcmVzc2lvbnNQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5leHByZXNzaW9uc1BsdWdpbi5yZXNldEZyYW1lKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyRnJhbWUodGhpcy5jdXJyZW50RnJhbWUgKyB0aGlzLmZpcnN0RnJhbWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLnRyaWdnZXJSZW5kZXJGcmFtZUVycm9yKGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNQYXVzZWQgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMudHJpZ2dlcignX3BsYXknKTtcbiAgICAgIHRoaXMuYXVkaW9Db250cm9sbGVyLnJlc3VtZSgpO1xuXG4gICAgICBpZiAodGhpcy5faWRsZSkge1xuICAgICAgICB0aGlzLl9pZGxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMudHJpZ2dlcignX2FjdGl2ZScpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNQYXVzZWQgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAgIHRoaXMudHJpZ2dlcignX3BhdXNlJyk7XG4gICAgICB0aGlzLl9pZGxlID0gdHJ1ZTtcbiAgICAgIHRoaXMudHJpZ2dlcignX2lkbGUnKTtcbiAgICAgIHRoaXMuYXVkaW9Db250cm9sbGVyLnBhdXNlKCk7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnRvZ2dsZVBhdXNlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1BhdXNlZCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5wbGF5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wYXVzZSgpO1xuICAgIHRoaXMucGxheUNvdW50ID0gMDtcbiAgICB0aGlzLl9jb21wbGV0ZWRMb29wID0gZmFsc2U7XG4gICAgdGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZSgwKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nZXRNYXJrZXJEYXRhID0gZnVuY3Rpb24gKG1hcmtlck5hbWUpIHtcbiAgICB2YXIgbWFya2VyO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1hcmtlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIG1hcmtlciA9IHRoaXMubWFya2Vyc1tpXTtcblxuICAgICAgaWYgKG1hcmtlci5wYXlsb2FkICYmIG1hcmtlci5wYXlsb2FkLm5hbWUgPT09IG1hcmtlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nb1RvQW5kU3RvcCA9IGZ1bmN0aW9uICh2YWx1ZSwgaXNGcmFtZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICYmIHRoaXMubmFtZSAhPT0gbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBudW1WYWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cbiAgICBpZiAoaXNOYU4obnVtVmFsdWUpKSB7XG4gICAgICB2YXIgbWFya2VyID0gdGhpcy5nZXRNYXJrZXJEYXRhKHZhbHVlKTtcblxuICAgICAgaWYgKG1hcmtlcikge1xuICAgICAgICB0aGlzLmdvVG9BbmRTdG9wKG1hcmtlci50aW1lLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRnJhbWUpIHtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKHZhbHVlICogdGhpcy5mcmFtZU1vZGlmaWVyKTtcbiAgICB9XG5cbiAgICB0aGlzLnBhdXNlKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuZ29Ub0FuZFBsYXkgPSBmdW5jdGlvbiAodmFsdWUsIGlzRnJhbWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbnVtVmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXG4gICAgaWYgKGlzTmFOKG51bVZhbHVlKSkge1xuICAgICAgdmFyIG1hcmtlciA9IHRoaXMuZ2V0TWFya2VyRGF0YSh2YWx1ZSk7XG5cbiAgICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgaWYgKCFtYXJrZXIuZHVyYXRpb24pIHtcbiAgICAgICAgICB0aGlzLmdvVG9BbmRTdG9wKG1hcmtlci50aW1lLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBsYXlTZWdtZW50cyhbbWFya2VyLnRpbWUsIG1hcmtlci50aW1lICsgbWFya2VyLmR1cmF0aW9uXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nb1RvQW5kU3RvcChudW1WYWx1ZSwgaXNGcmFtZSwgbmFtZSk7XG4gICAgfVxuXG4gICAgdGhpcy5wbGF5KCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuYWR2YW5jZVRpbWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodGhpcy5pc1BhdXNlZCA9PT0gdHJ1ZSB8fCB0aGlzLmlzTG9hZGVkID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0VmFsdWUgPSB0aGlzLmN1cnJlbnRSYXdGcmFtZSArIHZhbHVlICogdGhpcy5mcmFtZU1vZGlmaWVyO1xuICAgIHZhciBfaXNDb21wbGV0ZSA9IGZhbHNlOyAvLyBDaGVja2luZyBpZiBuZXh0VmFsdWUgPiB0b3RhbEZyYW1lcyAtIDEgZm9yIGFkZHJlc3Npbmcgbm9uIGxvb3BpbmcgYW5kIGxvb3BpbmcgYW5pbWF0aW9ucy5cbiAgICAvLyBJZiBhbmltYXRpb24gd29uJ3QgbG9vcCwgaXQgc2hvdWxkIHN0b3AgYXQgdG90YWxGcmFtZXMgLSAxLiBJZiBpdCB3aWxsIGxvb3AgaXQgc2hvdWxkIGNvbXBsZXRlIHRoZSBsYXN0IGZyYW1lIGFuZCB0aGVuIGxvb3AuXG5cbiAgICBpZiAobmV4dFZhbHVlID49IHRoaXMudG90YWxGcmFtZXMgLSAxICYmIHRoaXMuZnJhbWVNb2RpZmllciA+IDApIHtcbiAgICAgIGlmICghdGhpcy5sb29wIHx8IHRoaXMucGxheUNvdW50ID09PSB0aGlzLmxvb3ApIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrU2VnbWVudHMobmV4dFZhbHVlID4gdGhpcy50b3RhbEZyYW1lcyA/IG5leHRWYWx1ZSAlIHRoaXMudG90YWxGcmFtZXMgOiAwKSkge1xuICAgICAgICAgIF9pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICBuZXh0VmFsdWUgPSB0aGlzLnRvdGFsRnJhbWVzIC0gMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXh0VmFsdWUgPj0gdGhpcy50b3RhbEZyYW1lcykge1xuICAgICAgICB0aGlzLnBsYXlDb3VudCArPSAxO1xuXG4gICAgICAgIGlmICghdGhpcy5jaGVja1NlZ21lbnRzKG5leHRWYWx1ZSAlIHRoaXMudG90YWxGcmFtZXMpKSB7XG4gICAgICAgICAgdGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZShuZXh0VmFsdWUgJSB0aGlzLnRvdGFsRnJhbWVzKTtcbiAgICAgICAgICB0aGlzLl9jb21wbGV0ZWRMb29wID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2xvb3BDb21wbGV0ZScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKG5leHRWYWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0VmFsdWUgPCAwKSB7XG4gICAgICBpZiAoIXRoaXMuY2hlY2tTZWdtZW50cyhuZXh0VmFsdWUgJSB0aGlzLnRvdGFsRnJhbWVzKSkge1xuICAgICAgICBpZiAodGhpcy5sb29wICYmICEodGhpcy5wbGF5Q291bnQtLSA8PSAwICYmIHRoaXMubG9vcCAhPT0gdHJ1ZSkpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBsdXNwbHVzXG4gICAgICAgICAgdGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZSh0aGlzLnRvdGFsRnJhbWVzICsgbmV4dFZhbHVlICUgdGhpcy50b3RhbEZyYW1lcyk7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuX2NvbXBsZXRlZExvb3ApIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlZExvb3AgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2xvb3BDb21wbGV0ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgbmV4dFZhbHVlID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKG5leHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKF9pc0NvbXBsZXRlKSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKG5leHRWYWx1ZSk7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2NvbXBsZXRlJyk7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmFkanVzdFNlZ21lbnQgPSBmdW5jdGlvbiAoYXJyLCBvZmZzZXQpIHtcbiAgICB0aGlzLnBsYXlDb3VudCA9IDA7XG5cbiAgICBpZiAoYXJyWzFdIDwgYXJyWzBdKSB7XG4gICAgICBpZiAodGhpcy5mcmFtZU1vZGlmaWVyID4gMCkge1xuICAgICAgICBpZiAodGhpcy5wbGF5U3BlZWQgPCAwKSB7XG4gICAgICAgICAgdGhpcy5zZXRTcGVlZCgtdGhpcy5wbGF5U3BlZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0RGlyZWN0aW9uKC0xKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRvdGFsRnJhbWVzID0gYXJyWzBdIC0gYXJyWzFdO1xuICAgICAgdGhpcy50aW1lQ29tcGxldGVkID0gdGhpcy50b3RhbEZyYW1lcztcbiAgICAgIHRoaXMuZmlyc3RGcmFtZSA9IGFyclsxXTtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUodGhpcy50b3RhbEZyYW1lcyAtIDAuMDAxIC0gb2Zmc2V0KTtcbiAgICB9IGVsc2UgaWYgKGFyclsxXSA+IGFyclswXSkge1xuICAgICAgaWYgKHRoaXMuZnJhbWVNb2RpZmllciA8IDApIHtcbiAgICAgICAgaWYgKHRoaXMucGxheVNwZWVkIDwgMCkge1xuICAgICAgICAgIHRoaXMuc2V0U3BlZWQoLXRoaXMucGxheVNwZWVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldERpcmVjdGlvbigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRvdGFsRnJhbWVzID0gYXJyWzFdIC0gYXJyWzBdO1xuICAgICAgdGhpcy50aW1lQ29tcGxldGVkID0gdGhpcy50b3RhbEZyYW1lcztcbiAgICAgIHRoaXMuZmlyc3RGcmFtZSA9IGFyclswXTtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUoMC4wMDEgKyBvZmZzZXQpO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcignc2VnbWVudFN0YXJ0Jyk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0U2VnbWVudCA9IGZ1bmN0aW9uIChpbml0LCBlbmQpIHtcbiAgICB2YXIgcGVuZGluZ0ZyYW1lID0gLTE7XG5cbiAgICBpZiAodGhpcy5pc1BhdXNlZCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFJhd0ZyYW1lICsgdGhpcy5maXJzdEZyYW1lIDwgaW5pdCkge1xuICAgICAgICBwZW5kaW5nRnJhbWUgPSBpbml0O1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnRSYXdGcmFtZSArIHRoaXMuZmlyc3RGcmFtZSA+IGVuZCkge1xuICAgICAgICBwZW5kaW5nRnJhbWUgPSBlbmQgLSBpbml0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZmlyc3RGcmFtZSA9IGluaXQ7XG4gICAgdGhpcy50b3RhbEZyYW1lcyA9IGVuZCAtIGluaXQ7XG4gICAgdGhpcy50aW1lQ29tcGxldGVkID0gdGhpcy50b3RhbEZyYW1lcztcblxuICAgIGlmIChwZW5kaW5nRnJhbWUgIT09IC0xKSB7XG4gICAgICB0aGlzLmdvVG9BbmRTdG9wKHBlbmRpbmdGcmFtZSwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnBsYXlTZWdtZW50cyA9IGZ1bmN0aW9uIChhcnIsIGZvcmNlRmxhZykge1xuICAgIGlmIChmb3JjZUZsYWcpIHtcbiAgICAgIHRoaXMuc2VnbWVudHMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICBpZiAoX3R5cGVvZiQ0KGFyclswXSkgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5zZWdtZW50cy5wdXNoKGFycltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VnbWVudHMucHVzaChhcnIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNlZ21lbnRzLmxlbmd0aCAmJiBmb3JjZUZsYWcpIHtcbiAgICAgIHRoaXMuYWRqdXN0U2VnbWVudCh0aGlzLnNlZ21lbnRzLnNoaWZ0KCksIDApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzUGF1c2VkKSB7XG4gICAgICB0aGlzLnBsYXkoKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUucmVzZXRTZWdtZW50cyA9IGZ1bmN0aW9uIChmb3JjZUZsYWcpIHtcbiAgICB0aGlzLnNlZ21lbnRzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zZWdtZW50cy5wdXNoKFt0aGlzLmFuaW1hdGlvbkRhdGEuaXAsIHRoaXMuYW5pbWF0aW9uRGF0YS5vcF0pO1xuXG4gICAgaWYgKGZvcmNlRmxhZykge1xuICAgICAgdGhpcy5jaGVja1NlZ21lbnRzKDApO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5jaGVja1NlZ21lbnRzID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICAgIGlmICh0aGlzLnNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5hZGp1c3RTZWdtZW50KHRoaXMuc2VnbWVudHMuc2hpZnQoKSwgb2Zmc2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUgfHwgIXRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcmVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLmltYWdlUHJlbG9hZGVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2Rlc3Ryb3knKTtcbiAgICB0aGlzLl9jYnMgPSBudWxsO1xuICAgIHRoaXMub25FbnRlckZyYW1lID0gbnVsbDtcbiAgICB0aGlzLm9uTG9vcENvbXBsZXRlID0gbnVsbDtcbiAgICB0aGlzLm9uQ29tcGxldGUgPSBudWxsO1xuICAgIHRoaXMub25TZWdtZW50U3RhcnQgPSBudWxsO1xuICAgIHRoaXMub25EZXN0cm95ID0gbnVsbDtcbiAgICB0aGlzLnJlbmRlcmVyID0gbnVsbDtcbiAgICB0aGlzLmV4cHJlc3Npb25zUGx1Z2luID0gbnVsbDtcbiAgICB0aGlzLmltYWdlUHJlbG9hZGVyID0gbnVsbDtcbiAgICB0aGlzLnByb2plY3RJbnRlcmZhY2UgPSBudWxsO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5jdXJyZW50UmF3RnJhbWUgPSB2YWx1ZTtcbiAgICB0aGlzLmdvdG9GcmFtZSgpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldFNwZWVkID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIHRoaXMucGxheVNwZWVkID0gdmFsO1xuICAgIHRoaXMudXBkYUZyYW1lTW9kaWZpZXIoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXREaXJlY3Rpb24gPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgdGhpcy5wbGF5RGlyZWN0aW9uID0gdmFsIDwgMCA/IC0xIDogMTtcbiAgICB0aGlzLnVwZGFGcmFtZU1vZGlmaWVyKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0TG9vcCA9IGZ1bmN0aW9uIChpc0xvb3BpbmcpIHtcbiAgICB0aGlzLmxvb3AgPSBpc0xvb3Bpbmc7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0Vm9sdW1lID0gZnVuY3Rpb24gKHZhbCwgbmFtZSkge1xuICAgIGlmIChuYW1lICYmIHRoaXMubmFtZSAhPT0gbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuYXVkaW9Db250cm9sbGVyLnNldFZvbHVtZSh2YWwpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdldFZvbHVtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5hdWRpb0NvbnRyb2xsZXIuZ2V0Vm9sdW1lKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUubXV0ZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIubXV0ZSgpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnVubXV0ZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIudW5tdXRlKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudXBkYUZyYW1lTW9kaWZpZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mcmFtZU1vZGlmaWVyID0gdGhpcy5mcmFtZU11bHQgKiB0aGlzLnBsYXlTcGVlZCAqIHRoaXMucGxheURpcmVjdGlvbjtcbiAgICB0aGlzLmF1ZGlvQ29udHJvbGxlci5zZXRSYXRlKHRoaXMucGxheVNwZWVkICogdGhpcy5wbGF5RGlyZWN0aW9uKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nZXRQYXRoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnBhdGg7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuZ2V0QXNzZXRzUGF0aCA9IGZ1bmN0aW9uIChhc3NldERhdGEpIHtcbiAgICB2YXIgcGF0aCA9ICcnO1xuXG4gICAgaWYgKGFzc2V0RGF0YS5lKSB7XG4gICAgICBwYXRoID0gYXNzZXREYXRhLnA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmFzc2V0c1BhdGgpIHtcbiAgICAgIHZhciBpbWFnZVBhdGggPSBhc3NldERhdGEucDtcblxuICAgICAgaWYgKGltYWdlUGF0aC5pbmRleE9mKCdpbWFnZXMvJykgIT09IC0xKSB7XG4gICAgICAgIGltYWdlUGF0aCA9IGltYWdlUGF0aC5zcGxpdCgnLycpWzFdO1xuICAgICAgfVxuXG4gICAgICBwYXRoID0gdGhpcy5hc3NldHNQYXRoICsgaW1hZ2VQYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoID0gdGhpcy5wYXRoO1xuICAgICAgcGF0aCArPSBhc3NldERhdGEudSA/IGFzc2V0RGF0YS51IDogJyc7XG4gICAgICBwYXRoICs9IGFzc2V0RGF0YS5wO1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdldEFzc2V0RGF0YSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gdGhpcy5hc3NldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmIChpZCA9PT0gdGhpcy5hc3NldHNbaV0uaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXNzZXRzW2ldO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlbmRlcmVyLmhpZGUoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVuZGVyZXIuc2hvdygpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdldER1cmF0aW9uID0gZnVuY3Rpb24gKGlzRnJhbWUpIHtcbiAgICByZXR1cm4gaXNGcmFtZSA/IHRoaXMudG90YWxGcmFtZXMgOiB0aGlzLnRvdGFsRnJhbWVzIC8gdGhpcy5mcmFtZVJhdGU7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudXBkYXRlRG9jdW1lbnREYXRhID0gZnVuY3Rpb24gKHBhdGgsIGRvY3VtZW50RGF0YSwgaW5kZXgpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnJlbmRlcmVyLmdldEVsZW1lbnRCeVBhdGgocGF0aCk7XG4gICAgICBlbGVtZW50LnVwZGF0ZURvY3VtZW50RGF0YShkb2N1bWVudERhdGEsIGluZGV4KTtcbiAgICB9IGNhdGNoIChlcnJvcikgey8vIFRPRE86IGRlY2lkZSBob3cgdG8gaGFuZGxlIGNhdGNoIGNhc2VcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKHRoaXMuX2NicyAmJiB0aGlzLl9jYnNbbmFtZV0pIHtcbiAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICBjYXNlICdlbnRlckZyYW1lJzpcbiAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudChuYW1lLCBuZXcgQk1FbnRlckZyYW1lRXZlbnQobmFtZSwgdGhpcy5jdXJyZW50RnJhbWUsIHRoaXMudG90YWxGcmFtZXMsIHRoaXMuZnJhbWVNb2RpZmllcikpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2RyYXduRnJhbWUnOlxuICAgICAgICAgIHRoaXMuZHJhd25GcmFtZUV2ZW50LmN1cnJlbnRUaW1lID0gdGhpcy5jdXJyZW50RnJhbWU7XG4gICAgICAgICAgdGhpcy5kcmF3bkZyYW1lRXZlbnQudG90YWxUaW1lID0gdGhpcy50b3RhbEZyYW1lcztcbiAgICAgICAgICB0aGlzLmRyYXduRnJhbWVFdmVudC5kaXJlY3Rpb24gPSB0aGlzLmZyYW1lTW9kaWZpZXI7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgdGhpcy5kcmF3bkZyYW1lRXZlbnQpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2xvb3BDb21wbGV0ZSc6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgbmV3IEJNQ29tcGxldGVMb29wRXZlbnQobmFtZSwgdGhpcy5sb29wLCB0aGlzLnBsYXlDb3VudCwgdGhpcy5mcmFtZU11bHQpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjb21wbGV0ZSc6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgbmV3IEJNQ29tcGxldGVFdmVudChuYW1lLCB0aGlzLmZyYW1lTXVsdCkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3NlZ21lbnRTdGFydCc6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgbmV3IEJNU2VnbWVudFN0YXJ0RXZlbnQobmFtZSwgdGhpcy5maXJzdEZyYW1lLCB0aGlzLnRvdGFsRnJhbWVzKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZGVzdHJveSc6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgbmV3IEJNRGVzdHJveUV2ZW50KG5hbWUsIHRoaXMpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuYW1lID09PSAnZW50ZXJGcmFtZScgJiYgdGhpcy5vbkVudGVyRnJhbWUpIHtcbiAgICAgIHRoaXMub25FbnRlckZyYW1lLmNhbGwodGhpcywgbmV3IEJNRW50ZXJGcmFtZUV2ZW50KG5hbWUsIHRoaXMuY3VycmVudEZyYW1lLCB0aGlzLnRvdGFsRnJhbWVzLCB0aGlzLmZyYW1lTXVsdCkpO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSAnbG9vcENvbXBsZXRlJyAmJiB0aGlzLm9uTG9vcENvbXBsZXRlKSB7XG4gICAgICB0aGlzLm9uTG9vcENvbXBsZXRlLmNhbGwodGhpcywgbmV3IEJNQ29tcGxldGVMb29wRXZlbnQobmFtZSwgdGhpcy5sb29wLCB0aGlzLnBsYXlDb3VudCwgdGhpcy5mcmFtZU11bHQpKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZSA9PT0gJ2NvbXBsZXRlJyAmJiB0aGlzLm9uQ29tcGxldGUpIHtcbiAgICAgIHRoaXMub25Db21wbGV0ZS5jYWxsKHRoaXMsIG5ldyBCTUNvbXBsZXRlRXZlbnQobmFtZSwgdGhpcy5mcmFtZU11bHQpKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZSA9PT0gJ3NlZ21lbnRTdGFydCcgJiYgdGhpcy5vblNlZ21lbnRTdGFydCkge1xuICAgICAgdGhpcy5vblNlZ21lbnRTdGFydC5jYWxsKHRoaXMsIG5ldyBCTVNlZ21lbnRTdGFydEV2ZW50KG5hbWUsIHRoaXMuZmlyc3RGcmFtZSwgdGhpcy50b3RhbEZyYW1lcykpO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSAnZGVzdHJveScgJiYgdGhpcy5vbkRlc3Ryb3kpIHtcbiAgICAgIHRoaXMub25EZXN0cm95LmNhbGwodGhpcywgbmV3IEJNRGVzdHJveUV2ZW50KG5hbWUsIHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudHJpZ2dlclJlbmRlckZyYW1lRXJyb3IgPSBmdW5jdGlvbiAobmF0aXZlRXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSBuZXcgQk1SZW5kZXJGcmFtZUVycm9yRXZlbnQobmF0aXZlRXJyb3IsIHRoaXMuY3VycmVudEZyYW1lKTtcbiAgICB0aGlzLnRyaWdnZXJFdmVudCgnZXJyb3InLCBlcnJvcik7XG5cbiAgICBpZiAodGhpcy5vbkVycm9yKSB7XG4gICAgICB0aGlzLm9uRXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnRyaWdnZXJDb25maWdFcnJvciA9IGZ1bmN0aW9uIChuYXRpdmVFcnJvcikge1xuICAgIHZhciBlcnJvciA9IG5ldyBCTUNvbmZpZ0Vycm9yRXZlbnQobmF0aXZlRXJyb3IsIHRoaXMuY3VycmVudEZyYW1lKTtcbiAgICB0aGlzLnRyaWdnZXJFdmVudCgnZXJyb3InLCBlcnJvcik7XG5cbiAgICBpZiAodGhpcy5vbkVycm9yKSB7XG4gICAgICB0aGlzLm9uRXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBhbmltYXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtb2R1bGVPYiA9IHt9O1xuICAgIHZhciByZWdpc3RlcmVkQW5pbWF0aW9ucyA9IFtdO1xuICAgIHZhciBpbml0VGltZSA9IDA7XG4gICAgdmFyIGxlbiA9IDA7XG4gICAgdmFyIHBsYXlpbmdBbmltYXRpb25zTnVtID0gMDtcbiAgICB2YXIgX3N0b3BwZWQgPSB0cnVlO1xuICAgIHZhciBfaXNGcm96ZW4gPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZXYpIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBhbmltSXRlbSA9IGV2LnRhcmdldDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbiA9PT0gYW5pbUl0ZW0pIHtcbiAgICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9ucy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgIGxlbiAtPSAxO1xuXG4gICAgICAgICAgaWYgKCFhbmltSXRlbS5pc1BhdXNlZCkge1xuICAgICAgICAgICAgc3VidHJhY3RQbGF5aW5nQ291bnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJBbmltYXRpb24oZWxlbWVudCwgYW5pbWF0aW9uRGF0YSkge1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5lbGVtID09PSBlbGVtZW50ICYmIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmVsZW0gIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgYW5pbUl0ZW0gPSBuZXcgQW5pbWF0aW9uSXRlbSgpO1xuICAgICAgc2V0dXBBbmltYXRpb24oYW5pbUl0ZW0sIGVsZW1lbnQpO1xuICAgICAgYW5pbUl0ZW0uc2V0RGF0YShlbGVtZW50LCBhbmltYXRpb25EYXRhKTtcbiAgICAgIHJldHVybiBhbmltSXRlbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRSZWdpc3RlcmVkQW5pbWF0aW9ucygpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbkFuaW1zID0gcmVnaXN0ZXJlZEFuaW1hdGlvbnMubGVuZ3RoO1xuICAgICAgdmFyIGFuaW1hdGlvbnMgPSBbXTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbkFuaW1zOyBpICs9IDEpIHtcbiAgICAgICAgYW5pbWF0aW9ucy5wdXNoKHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFBsYXlpbmdDb3VudCgpIHtcbiAgICAgIHBsYXlpbmdBbmltYXRpb25zTnVtICs9IDE7XG4gICAgICBhY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0UGxheWluZ0NvdW50KCkge1xuICAgICAgcGxheWluZ0FuaW1hdGlvbnNOdW0gLT0gMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR1cEFuaW1hdGlvbihhbmltSXRlbSwgZWxlbWVudCkge1xuICAgICAgYW5pbUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZGVzdHJveScsIHJlbW92ZUVsZW1lbnQpO1xuICAgICAgYW5pbUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignX2FjdGl2ZScsIGFkZFBsYXlpbmdDb3VudCk7XG4gICAgICBhbmltSXRlbS5hZGRFdmVudExpc3RlbmVyKCdfaWRsZScsIHN1YnRyYWN0UGxheWluZ0NvdW50KTtcbiAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zLnB1c2goe1xuICAgICAgICBlbGVtOiBlbGVtZW50LFxuICAgICAgICBhbmltYXRpb246IGFuaW1JdGVtXG4gICAgICB9KTtcbiAgICAgIGxlbiArPSAxO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRBbmltYXRpb24ocGFyYW1zKSB7XG4gICAgICB2YXIgYW5pbUl0ZW0gPSBuZXcgQW5pbWF0aW9uSXRlbSgpO1xuICAgICAgc2V0dXBBbmltYXRpb24oYW5pbUl0ZW0sIG51bGwpO1xuICAgICAgYW5pbUl0ZW0uc2V0UGFyYW1zKHBhcmFtcyk7XG4gICAgICByZXR1cm4gYW5pbUl0ZW07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0U3BlZWQodmFsLCBhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnNldFNwZWVkKHZhbCwgYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXREaXJlY3Rpb24odmFsLCBhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnNldERpcmVjdGlvbih2YWwsIGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGxheShhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnBsYXkoYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXN1bWUobm93VGltZSkge1xuICAgICAgdmFyIGVsYXBzZWRUaW1lID0gbm93VGltZSAtIGluaXRUaW1lO1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24uYWR2YW5jZVRpbWUoZWxhcHNlZFRpbWUpO1xuICAgICAgfVxuXG4gICAgICBpbml0VGltZSA9IG5vd1RpbWU7XG5cbiAgICAgIGlmIChwbGF5aW5nQW5pbWF0aW9uc051bSAmJiAhX2lzRnJvemVuKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzdW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9zdG9wcGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaXJzdChub3dUaW1lKSB7XG4gICAgICBpbml0VGltZSA9IG5vd1RpbWU7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc3VtZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGF1c2UoYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5wYXVzZShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdvVG9BbmRTdG9wKHZhbHVlLCBpc0ZyYW1lLCBhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLmdvVG9BbmRTdG9wKHZhbHVlLCBpc0ZyYW1lLCBhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0b3AoYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5zdG9wKGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlUGF1c2UoYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi50b2dnbGVQYXVzZShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLmRlc3Ryb3koYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWFyY2hBbmltYXRpb25zKGFuaW1hdGlvbkRhdGEsIHN0YW5kYWxvbmUsIHJlbmRlcmVyKSB7XG4gICAgICB2YXIgYW5pbUVsZW1lbnRzID0gW10uY29uY2F0KFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbG90dGllJykpLCBbXS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2JvZHltb3ZpbicpKSk7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW5BbmltcyA9IGFuaW1FbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5BbmltczsgaSArPSAxKSB7XG4gICAgICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgICAgIGFuaW1FbGVtZW50c1tpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtYm0tdHlwZScsIHJlbmRlcmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVyQW5pbWF0aW9uKGFuaW1FbGVtZW50c1tpXSwgYW5pbWF0aW9uRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFuZGFsb25lICYmIGxlbkFuaW1zID09PSAwKSB7XG4gICAgICAgIGlmICghcmVuZGVyZXIpIHtcbiAgICAgICAgICByZW5kZXJlciA9ICdzdmcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgICAgICBib2R5LmlubmVyVGV4dCA9ICcnO1xuICAgICAgICB2YXIgZGl2ID0gY3JlYXRlVGFnKCdkaXYnKTtcbiAgICAgICAgZGl2LnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICBkaXYuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICBkaXYuc2V0QXR0cmlidXRlKCdkYXRhLWJtLXR5cGUnLCByZW5kZXJlcik7XG4gICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgcmVnaXN0ZXJBbmltYXRpb24oZGl2LCBhbmltYXRpb25EYXRhKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5yZXNpemUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGlmICghX2lzRnJvemVuICYmIHBsYXlpbmdBbmltYXRpb25zTnVtKSB7XG4gICAgICAgIGlmIChfc3RvcHBlZCkge1xuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZmlyc3QpO1xuICAgICAgICAgIF9zdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcmVlemUoKSB7XG4gICAgICBfaXNGcm96ZW4gPSB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuZnJlZXplKCkge1xuICAgICAgX2lzRnJvemVuID0gZmFsc2U7XG4gICAgICBhY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFZvbHVtZSh2YWwsIGFuaW1hdGlvbikge1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24uc2V0Vm9sdW1lKHZhbCwgYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtdXRlKGFuaW1hdGlvbikge1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24ubXV0ZShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVubXV0ZShhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnVubXV0ZShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1vZHVsZU9iLnJlZ2lzdGVyQW5pbWF0aW9uID0gcmVnaXN0ZXJBbmltYXRpb247XG4gICAgbW9kdWxlT2IubG9hZEFuaW1hdGlvbiA9IGxvYWRBbmltYXRpb247XG4gICAgbW9kdWxlT2Iuc2V0U3BlZWQgPSBzZXRTcGVlZDtcbiAgICBtb2R1bGVPYi5zZXREaXJlY3Rpb24gPSBzZXREaXJlY3Rpb247XG4gICAgbW9kdWxlT2IucGxheSA9IHBsYXk7XG4gICAgbW9kdWxlT2IucGF1c2UgPSBwYXVzZTtcbiAgICBtb2R1bGVPYi5zdG9wID0gc3RvcDtcbiAgICBtb2R1bGVPYi50b2dnbGVQYXVzZSA9IHRvZ2dsZVBhdXNlO1xuICAgIG1vZHVsZU9iLnNlYXJjaEFuaW1hdGlvbnMgPSBzZWFyY2hBbmltYXRpb25zO1xuICAgIG1vZHVsZU9iLnJlc2l6ZSA9IHJlc2l6ZTsgLy8gbW9kdWxlT2Iuc3RhcnQgPSBzdGFydDtcblxuICAgIG1vZHVsZU9iLmdvVG9BbmRTdG9wID0gZ29Ub0FuZFN0b3A7XG4gICAgbW9kdWxlT2IuZGVzdHJveSA9IGRlc3Ryb3k7XG4gICAgbW9kdWxlT2IuZnJlZXplID0gZnJlZXplO1xuICAgIG1vZHVsZU9iLnVuZnJlZXplID0gdW5mcmVlemU7XG4gICAgbW9kdWxlT2Iuc2V0Vm9sdW1lID0gc2V0Vm9sdW1lO1xuICAgIG1vZHVsZU9iLm11dGUgPSBtdXRlO1xuICAgIG1vZHVsZU9iLnVubXV0ZSA9IHVubXV0ZTtcbiAgICBtb2R1bGVPYi5nZXRSZWdpc3RlcmVkQW5pbWF0aW9ucyA9IGdldFJlZ2lzdGVyZWRBbmltYXRpb25zO1xuICAgIHJldHVybiBtb2R1bGVPYjtcbiAgfSgpO1xuXG4gIC8qIGVzbGludC1kaXNhYmxlICovXG4gIHZhciBCZXppZXJGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxyXG4gICAgICAgKiBCZXppZXJFYXNpbmcgLSB1c2UgYmV6aWVyIGN1cnZlIGZvciB0cmFuc2l0aW9uIGVhc2luZyBmdW5jdGlvblxyXG4gICAgICAgKiBieSBHYcOrdGFuIFJlbmF1ZGVhdSAyMDE0IC0gMjAxNSDigJMgTUlUIExpY2Vuc2VcclxuICAgICAgICpcclxuICAgICAgICogQ3JlZGl0czogaXMgYmFzZWQgb24gRmlyZWZveCdzIG5zU01JTEtleVNwbGluZS5jcHBcclxuICAgICAgICogVXNhZ2U6XHJcbiAgICAgICAqIHZhciBzcGxpbmUgPSBCZXppZXJFYXNpbmcoWyAwLjI1LCAwLjEsIDAuMjUsIDEuMCBdKVxyXG4gICAgICAgKiBzcGxpbmUuZ2V0KHgpID0+IHJldHVybnMgdGhlIGVhc2luZyB2YWx1ZSB8IHggbXVzdCBiZSBpbiBbMCwgMV0gcmFuZ2VcclxuICAgICAgICpcclxuICAgICAgICovXG4gICAgdmFyIG9iID0ge307XG4gICAgb2IuZ2V0QmV6aWVyRWFzaW5nID0gZ2V0QmV6aWVyRWFzaW5nO1xuICAgIHZhciBiZXppZXJzID0ge307XG5cbiAgICBmdW5jdGlvbiBnZXRCZXppZXJFYXNpbmcoYSwgYiwgYywgZCwgbm0pIHtcbiAgICAgIHZhciBzdHIgPSBubSB8fCAoJ2Jlel8nICsgYSArICdfJyArIGIgKyAnXycgKyBjICsgJ18nICsgZCkucmVwbGFjZSgvXFwuL2csICdwJyk7XG5cbiAgICAgIGlmIChiZXppZXJzW3N0cl0pIHtcbiAgICAgICAgcmV0dXJuIGJlemllcnNbc3RyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJlekVhc2luZyA9IG5ldyBCZXppZXJFYXNpbmcoW2EsIGIsIGMsIGRdKTtcbiAgICAgIGJlemllcnNbc3RyXSA9IGJlekVhc2luZztcbiAgICAgIHJldHVybiBiZXpFYXNpbmc7XG4gICAgfSAvLyBUaGVzZSB2YWx1ZXMgYXJlIGVzdGFibGlzaGVkIGJ5IGVtcGlyaWNpc20gd2l0aCB0ZXN0cyAodHJhZGVvZmY6IHBlcmZvcm1hbmNlIFZTIHByZWNpc2lvbilcblxuXG4gICAgdmFyIE5FV1RPTl9JVEVSQVRJT05TID0gNDtcbiAgICB2YXIgTkVXVE9OX01JTl9TTE9QRSA9IDAuMDAxO1xuICAgIHZhciBTVUJESVZJU0lPTl9QUkVDSVNJT04gPSAwLjAwMDAwMDE7XG4gICAgdmFyIFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TID0gMTA7XG4gICAgdmFyIGtTcGxpbmVUYWJsZVNpemUgPSAxMTtcbiAgICB2YXIga1NhbXBsZVN0ZXBTaXplID0gMS4wIC8gKGtTcGxpbmVUYWJsZVNpemUgLSAxLjApO1xuICAgIHZhciBmbG9hdDMyQXJyYXlTdXBwb3J0ZWQgPSB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAnZnVuY3Rpb24nO1xuXG4gICAgZnVuY3Rpb24gQShhQTEsIGFBMikge1xuICAgICAgcmV0dXJuIDEuMCAtIDMuMCAqIGFBMiArIDMuMCAqIGFBMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBCKGFBMSwgYUEyKSB7XG4gICAgICByZXR1cm4gMy4wICogYUEyIC0gNi4wICogYUExO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIEMoYUExKSB7XG4gICAgICByZXR1cm4gMy4wICogYUExO1xuICAgIH0gLy8gUmV0dXJucyB4KHQpIGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIHkodCkgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cblxuXG4gICAgZnVuY3Rpb24gY2FsY0JlemllcihhVCwgYUExLCBhQTIpIHtcbiAgICAgIHJldHVybiAoKEEoYUExLCBhQTIpICogYVQgKyBCKGFBMSwgYUEyKSkgKiBhVCArIEMoYUExKSkgKiBhVDtcbiAgICB9IC8vIFJldHVybnMgZHgvZHQgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgZHkvZHQgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cblxuXG4gICAgZnVuY3Rpb24gZ2V0U2xvcGUoYVQsIGFBMSwgYUEyKSB7XG4gICAgICByZXR1cm4gMy4wICogQShhQTEsIGFBMikgKiBhVCAqIGFUICsgMi4wICogQihhQTEsIGFBMikgKiBhVCArIEMoYUExKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUoYVgsIGFBLCBhQiwgbVgxLCBtWDIpIHtcbiAgICAgIHZhciBjdXJyZW50WCxcbiAgICAgICAgICBjdXJyZW50VCxcbiAgICAgICAgICBpID0gMDtcblxuICAgICAgZG8ge1xuICAgICAgICBjdXJyZW50VCA9IGFBICsgKGFCIC0gYUEpIC8gMi4wO1xuICAgICAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIGFYO1xuXG4gICAgICAgIGlmIChjdXJyZW50WCA+IDAuMCkge1xuICAgICAgICAgIGFCID0gY3VycmVudFQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYUEgPSBjdXJyZW50VDtcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoTWF0aC5hYnMoY3VycmVudFgpID4gU1VCRElWSVNJT05fUFJFQ0lTSU9OICYmICsraSA8IFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TKTtcblxuICAgICAgcmV0dXJuIGN1cnJlbnRUO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBhR3Vlc3NULCBtWDEsIG1YMikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBORVdUT05fSVRFUkFUSU9OUzsgKytpKSB7XG4gICAgICAgIHZhciBjdXJyZW50U2xvcGUgPSBnZXRTbG9wZShhR3Vlc3NULCBtWDEsIG1YMik7XG4gICAgICAgIGlmIChjdXJyZW50U2xvcGUgPT09IDAuMCkgcmV0dXJuIGFHdWVzc1Q7XG4gICAgICAgIHZhciBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgICAgIGFHdWVzc1QgLT0gY3VycmVudFggLyBjdXJyZW50U2xvcGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhR3Vlc3NUO1xuICAgIH1cbiAgICAvKipcclxuICAgICAgICogcG9pbnRzIGlzIGFuIGFycmF5IG9mIFsgbVgxLCBtWTEsIG1YMiwgbVkyIF1cclxuICAgICAgICovXG5cblxuICAgIGZ1bmN0aW9uIEJlemllckVhc2luZyhwb2ludHMpIHtcbiAgICAgIHRoaXMuX3AgPSBwb2ludHM7XG4gICAgICB0aGlzLl9tU2FtcGxlVmFsdWVzID0gZmxvYXQzMkFycmF5U3VwcG9ydGVkID8gbmV3IEZsb2F0MzJBcnJheShrU3BsaW5lVGFibGVTaXplKSA6IG5ldyBBcnJheShrU3BsaW5lVGFibGVTaXplKTtcbiAgICAgIHRoaXMuX3ByZWNvbXB1dGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmdldCA9IHRoaXMuZ2V0LmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgQmV6aWVyRWFzaW5nLnByb3RvdHlwZSA9IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KHgpIHtcbiAgICAgICAgdmFyIG1YMSA9IHRoaXMuX3BbMF0sXG4gICAgICAgICAgICBtWTEgPSB0aGlzLl9wWzFdLFxuICAgICAgICAgICAgbVgyID0gdGhpcy5fcFsyXSxcbiAgICAgICAgICAgIG1ZMiA9IHRoaXMuX3BbM107XG4gICAgICAgIGlmICghdGhpcy5fcHJlY29tcHV0ZWQpIHRoaXMuX3ByZWNvbXB1dGUoKTtcbiAgICAgICAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKSByZXR1cm4geDsgLy8gbGluZWFyXG4gICAgICAgIC8vIEJlY2F1c2UgSmF2YVNjcmlwdCBudW1iZXIgYXJlIGltcHJlY2lzZSwgd2Ugc2hvdWxkIGd1YXJhbnRlZSB0aGUgZXh0cmVtZXMgYXJlIHJpZ2h0LlxuXG4gICAgICAgIGlmICh4ID09PSAwKSByZXR1cm4gMDtcbiAgICAgICAgaWYgKHggPT09IDEpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gY2FsY0Jlemllcih0aGlzLl9nZXRURm9yWCh4KSwgbVkxLCBtWTIpO1xuICAgICAgfSxcbiAgICAgIC8vIFByaXZhdGUgcGFydFxuICAgICAgX3ByZWNvbXB1dGU6IGZ1bmN0aW9uIF9wcmVjb21wdXRlKCkge1xuICAgICAgICB2YXIgbVgxID0gdGhpcy5fcFswXSxcbiAgICAgICAgICAgIG1ZMSA9IHRoaXMuX3BbMV0sXG4gICAgICAgICAgICBtWDIgPSB0aGlzLl9wWzJdLFxuICAgICAgICAgICAgbVkyID0gdGhpcy5fcFszXTtcbiAgICAgICAgdGhpcy5fcHJlY29tcHV0ZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChtWDEgIT09IG1ZMSB8fCBtWDIgIT09IG1ZMikge1xuICAgICAgICAgIHRoaXMuX2NhbGNTYW1wbGVWYWx1ZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIF9jYWxjU2FtcGxlVmFsdWVzOiBmdW5jdGlvbiBfY2FsY1NhbXBsZVZhbHVlcygpIHtcbiAgICAgICAgdmFyIG1YMSA9IHRoaXMuX3BbMF0sXG4gICAgICAgICAgICBtWDIgPSB0aGlzLl9wWzJdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga1NwbGluZVRhYmxlU2l6ZTsgKytpKSB7XG4gICAgICAgICAgdGhpcy5fbVNhbXBsZVZhbHVlc1tpXSA9IGNhbGNCZXppZXIoaSAqIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcclxuICAgICAgICAgICAqIGdldFRGb3JYIGNob3NlIHRoZSBmYXN0ZXN0IGhldXJpc3RpYyB0byBkZXRlcm1pbmUgdGhlIHBlcmNlbnRhZ2UgdmFsdWUgcHJlY2lzZWx5IGZyb20gYSBnaXZlbiBYIHByb2plY3Rpb24uXHJcbiAgICAgICAgICAgKi9cbiAgICAgIF9nZXRURm9yWDogZnVuY3Rpb24gX2dldFRGb3JYKGFYKSB7XG4gICAgICAgIHZhciBtWDEgPSB0aGlzLl9wWzBdLFxuICAgICAgICAgICAgbVgyID0gdGhpcy5fcFsyXSxcbiAgICAgICAgICAgIG1TYW1wbGVWYWx1ZXMgPSB0aGlzLl9tU2FtcGxlVmFsdWVzO1xuICAgICAgICB2YXIgaW50ZXJ2YWxTdGFydCA9IDAuMDtcbiAgICAgICAgdmFyIGN1cnJlbnRTYW1wbGUgPSAxO1xuICAgICAgICB2YXIgbGFzdFNhbXBsZSA9IGtTcGxpbmVUYWJsZVNpemUgLSAxO1xuXG4gICAgICAgIGZvciAoOyBjdXJyZW50U2FtcGxlICE9PSBsYXN0U2FtcGxlICYmIG1TYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7ICsrY3VycmVudFNhbXBsZSkge1xuICAgICAgICAgIGludGVydmFsU3RhcnQgKz0ga1NhbXBsZVN0ZXBTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgLS1jdXJyZW50U2FtcGxlOyAvLyBJbnRlcnBvbGF0ZSB0byBwcm92aWRlIGFuIGluaXRpYWwgZ3Vlc3MgZm9yIHRcblxuICAgICAgICB2YXIgZGlzdCA9IChhWCAtIG1TYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pIC8gKG1TYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZSArIDFdIC0gbVNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XG4gICAgICAgIHZhciBndWVzc0ZvclQgPSBpbnRlcnZhbFN0YXJ0ICsgZGlzdCAqIGtTYW1wbGVTdGVwU2l6ZTtcbiAgICAgICAgdmFyIGluaXRpYWxTbG9wZSA9IGdldFNsb3BlKGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuXG4gICAgICAgIGlmIChpbml0aWFsU2xvcGUgPj0gTkVXVE9OX01JTl9TTE9QRSkge1xuICAgICAgICAgIHJldHVybiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5pdGlhbFNsb3BlID09PSAwLjApIHtcbiAgICAgICAgICByZXR1cm4gZ3Vlc3NGb3JUO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJpbmFyeVN1YmRpdmlkZShhWCwgaW50ZXJ2YWxTdGFydCwgaW50ZXJ2YWxTdGFydCArIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgdmFyIHBvb2xpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gX2RvdWJsZShhcnIpIHtcbiAgICAgIHJldHVybiBhcnIuY29uY2F0KGNyZWF0ZVNpemVkQXJyYXkoYXJyLmxlbmd0aCkpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBcImRvdWJsZVwiOiBfZG91YmxlXG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBwb29sRmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGluaXRpYWxMZW5ndGgsIF9jcmVhdGUsIF9yZWxlYXNlKSB7XG4gICAgICB2YXIgX2xlbmd0aCA9IDA7XG4gICAgICB2YXIgX21heExlbmd0aCA9IGluaXRpYWxMZW5ndGg7XG4gICAgICB2YXIgcG9vbCA9IGNyZWF0ZVNpemVkQXJyYXkoX21heExlbmd0aCk7XG4gICAgICB2YXIgb2IgPSB7XG4gICAgICAgIG5ld0VsZW1lbnQ6IG5ld0VsZW1lbnQsXG4gICAgICAgIHJlbGVhc2U6IHJlbGVhc2VcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIG5ld0VsZW1lbnQoKSB7XG4gICAgICAgIHZhciBlbGVtZW50O1xuXG4gICAgICAgIGlmIChfbGVuZ3RoKSB7XG4gICAgICAgICAgX2xlbmd0aCAtPSAxO1xuICAgICAgICAgIGVsZW1lbnQgPSBwb29sW19sZW5ndGhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQgPSBfY3JlYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVsZWFzZShlbGVtZW50KSB7XG4gICAgICAgIGlmIChfbGVuZ3RoID09PSBfbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgcG9vbCA9IHBvb2xpbmdbXCJkb3VibGVcIl0ocG9vbCk7XG4gICAgICAgICAgX21heExlbmd0aCAqPSAyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9yZWxlYXNlKSB7XG4gICAgICAgICAgX3JlbGVhc2UoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBwb29sW19sZW5ndGhdID0gZWxlbWVudDtcbiAgICAgICAgX2xlbmd0aCArPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBiZXppZXJMZW5ndGhQb29sID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFkZGVkTGVuZ3RoOiAwLFxuICAgICAgICBwZXJjZW50czogY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGdldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKCkpLFxuICAgICAgICBsZW5ndGhzOiBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgZ2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvb2xGYWN0b3J5KDgsIGNyZWF0ZSk7XG4gIH0oKTtcblxuICB2YXIgc2VnbWVudHNMZW5ndGhQb29sID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlbmd0aHM6IFtdLFxuICAgICAgICB0b3RhbExlbmd0aDogMFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxlYXNlKGVsZW1lbnQpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGVsZW1lbnQubGVuZ3Rocy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBiZXppZXJMZW5ndGhQb29sLnJlbGVhc2UoZWxlbWVudC5sZW5ndGhzW2ldKTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5sZW5ndGhzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvb2xGYWN0b3J5KDgsIGNyZWF0ZSwgcmVsZWFzZSk7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBiZXpGdW5jdGlvbigpIHtcbiAgICB2YXIgbWF0aCA9IE1hdGg7XG5cbiAgICBmdW5jdGlvbiBwb2ludE9uTGluZTJEKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgICAgIHZhciBkZXQxID0geDEgKiB5MiArIHkxICogeDMgKyB4MiAqIHkzIC0geDMgKiB5MiAtIHkzICogeDEgLSB4MiAqIHkxO1xuICAgICAgcmV0dXJuIGRldDEgPiAtMC4wMDEgJiYgZGV0MSA8IDAuMDAxO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50T25MaW5lM0QoeDEsIHkxLCB6MSwgeDIsIHkyLCB6MiwgeDMsIHkzLCB6Mykge1xuICAgICAgaWYgKHoxID09PSAwICYmIHoyID09PSAwICYmIHozID09PSAwKSB7XG4gICAgICAgIHJldHVybiBwb2ludE9uTGluZTJEKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlzdDEgPSBtYXRoLnNxcnQobWF0aC5wb3coeDIgLSB4MSwgMikgKyBtYXRoLnBvdyh5MiAtIHkxLCAyKSArIG1hdGgucG93KHoyIC0gejEsIDIpKTtcbiAgICAgIHZhciBkaXN0MiA9IG1hdGguc3FydChtYXRoLnBvdyh4MyAtIHgxLCAyKSArIG1hdGgucG93KHkzIC0geTEsIDIpICsgbWF0aC5wb3coejMgLSB6MSwgMikpO1xuICAgICAgdmFyIGRpc3QzID0gbWF0aC5zcXJ0KG1hdGgucG93KHgzIC0geDIsIDIpICsgbWF0aC5wb3coeTMgLSB5MiwgMikgKyBtYXRoLnBvdyh6MyAtIHoyLCAyKSk7XG4gICAgICB2YXIgZGlmZkRpc3Q7XG5cbiAgICAgIGlmIChkaXN0MSA+IGRpc3QyKSB7XG4gICAgICAgIGlmIChkaXN0MSA+IGRpc3QzKSB7XG4gICAgICAgICAgZGlmZkRpc3QgPSBkaXN0MSAtIGRpc3QyIC0gZGlzdDM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlmZkRpc3QgPSBkaXN0MyAtIGRpc3QyIC0gZGlzdDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZGlzdDMgPiBkaXN0Mikge1xuICAgICAgICBkaWZmRGlzdCA9IGRpc3QzIC0gZGlzdDIgLSBkaXN0MTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpZmZEaXN0ID0gZGlzdDIgLSBkaXN0MSAtIGRpc3QzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGlmZkRpc3QgPiAtMC4wMDAxICYmIGRpZmZEaXN0IDwgMC4wMDAxO1xuICAgIH1cblxuICAgIHZhciBnZXRCZXppZXJMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHB0MSwgcHQyLCBwdDMsIHB0NCkge1xuICAgICAgICB2YXIgY3VydmVTZWdtZW50cyA9IGdldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKCk7XG4gICAgICAgIHZhciBrO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbjtcbiAgICAgICAgdmFyIHB0Q29vcmQ7XG4gICAgICAgIHZhciBwZXJjO1xuICAgICAgICB2YXIgYWRkZWRMZW5ndGggPSAwO1xuICAgICAgICB2YXIgcHREaXN0YW5jZTtcbiAgICAgICAgdmFyIHBvaW50ID0gW107XG4gICAgICAgIHZhciBsYXN0UG9pbnQgPSBbXTtcbiAgICAgICAgdmFyIGxlbmd0aERhdGEgPSBiZXppZXJMZW5ndGhQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgICAgbGVuID0gcHQzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgY3VydmVTZWdtZW50czsgayArPSAxKSB7XG4gICAgICAgICAgcGVyYyA9IGsgLyAoY3VydmVTZWdtZW50cyAtIDEpO1xuICAgICAgICAgIHB0RGlzdGFuY2UgPSAwO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICBwdENvb3JkID0gYm1Qb3coMSAtIHBlcmMsIDMpICogcHQxW2ldICsgMyAqIGJtUG93KDEgLSBwZXJjLCAyKSAqIHBlcmMgKiBwdDNbaV0gKyAzICogKDEgLSBwZXJjKSAqIGJtUG93KHBlcmMsIDIpICogcHQ0W2ldICsgYm1Qb3cocGVyYywgMykgKiBwdDJbaV07XG4gICAgICAgICAgICBwb2ludFtpXSA9IHB0Q29vcmQ7XG5cbiAgICAgICAgICAgIGlmIChsYXN0UG9pbnRbaV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgcHREaXN0YW5jZSArPSBibVBvdyhwb2ludFtpXSAtIGxhc3RQb2ludFtpXSwgMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxhc3RQb2ludFtpXSA9IHBvaW50W2ldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwdERpc3RhbmNlKSB7XG4gICAgICAgICAgICBwdERpc3RhbmNlID0gYm1TcXJ0KHB0RGlzdGFuY2UpO1xuICAgICAgICAgICAgYWRkZWRMZW5ndGggKz0gcHREaXN0YW5jZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZW5ndGhEYXRhLnBlcmNlbnRzW2tdID0gcGVyYztcbiAgICAgICAgICBsZW5ndGhEYXRhLmxlbmd0aHNba10gPSBhZGRlZExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxlbmd0aERhdGEuYWRkZWRMZW5ndGggPSBhZGRlZExlbmd0aDtcbiAgICAgICAgcmV0dXJuIGxlbmd0aERhdGE7XG4gICAgICB9O1xuICAgIH0oKTtcblxuICAgIGZ1bmN0aW9uIGdldFNlZ21lbnRzTGVuZ3RoKHNoYXBlRGF0YSkge1xuICAgICAgdmFyIHNlZ21lbnRzTGVuZ3RoID0gc2VnbWVudHNMZW5ndGhQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgIHZhciBjbG9zZWQgPSBzaGFwZURhdGEuYztcbiAgICAgIHZhciBwYXRoViA9IHNoYXBlRGF0YS52O1xuICAgICAgdmFyIHBhdGhPID0gc2hhcGVEYXRhLm87XG4gICAgICB2YXIgcGF0aEkgPSBzaGFwZURhdGEuaTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHNoYXBlRGF0YS5fbGVuZ3RoO1xuICAgICAgdmFyIGxlbmd0aHMgPSBzZWdtZW50c0xlbmd0aC5sZW5ndGhzO1xuICAgICAgdmFyIHRvdGFsTGVuZ3RoID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbiAtIDE7IGkgKz0gMSkge1xuICAgICAgICBsZW5ndGhzW2ldID0gZ2V0QmV6aWVyTGVuZ3RoKHBhdGhWW2ldLCBwYXRoVltpICsgMV0sIHBhdGhPW2ldLCBwYXRoSVtpICsgMV0pO1xuICAgICAgICB0b3RhbExlbmd0aCArPSBsZW5ndGhzW2ldLmFkZGVkTGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2xvc2VkICYmIGxlbikge1xuICAgICAgICBsZW5ndGhzW2ldID0gZ2V0QmV6aWVyTGVuZ3RoKHBhdGhWW2ldLCBwYXRoVlswXSwgcGF0aE9baV0sIHBhdGhJWzBdKTtcbiAgICAgICAgdG90YWxMZW5ndGggKz0gbGVuZ3Roc1tpXS5hZGRlZExlbmd0aDtcbiAgICAgIH1cblxuICAgICAgc2VnbWVudHNMZW5ndGgudG90YWxMZW5ndGggPSB0b3RhbExlbmd0aDtcbiAgICAgIHJldHVybiBzZWdtZW50c0xlbmd0aDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBCZXppZXJEYXRhKGxlbmd0aCkge1xuICAgICAgdGhpcy5zZWdtZW50TGVuZ3RoID0gMDtcbiAgICAgIHRoaXMucG9pbnRzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gUG9pbnREYXRhKHBhcnRpYWwsIHBvaW50KSB7XG4gICAgICB0aGlzLnBhcnRpYWxMZW5ndGggPSBwYXJ0aWFsO1xuICAgICAgdGhpcy5wb2ludCA9IHBvaW50O1xuICAgIH1cblxuICAgIHZhciBidWlsZEJlemllckRhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmVkRGF0YSA9IHt9O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChwdDEsIHB0MiwgcHQzLCBwdDQpIHtcbiAgICAgICAgdmFyIGJlemllck5hbWUgPSAocHQxWzBdICsgJ18nICsgcHQxWzFdICsgJ18nICsgcHQyWzBdICsgJ18nICsgcHQyWzFdICsgJ18nICsgcHQzWzBdICsgJ18nICsgcHQzWzFdICsgJ18nICsgcHQ0WzBdICsgJ18nICsgcHQ0WzFdKS5yZXBsYWNlKC9cXC4vZywgJ3AnKTtcblxuICAgICAgICBpZiAoIXN0b3JlZERhdGFbYmV6aWVyTmFtZV0pIHtcbiAgICAgICAgICB2YXIgY3VydmVTZWdtZW50cyA9IGdldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKCk7XG4gICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgdmFyIGxlbjtcbiAgICAgICAgICB2YXIgcHRDb29yZDtcbiAgICAgICAgICB2YXIgcGVyYztcbiAgICAgICAgICB2YXIgYWRkZWRMZW5ndGggPSAwO1xuICAgICAgICAgIHZhciBwdERpc3RhbmNlO1xuICAgICAgICAgIHZhciBwb2ludDtcbiAgICAgICAgICB2YXIgbGFzdFBvaW50ID0gbnVsbDtcblxuICAgICAgICAgIGlmIChwdDEubGVuZ3RoID09PSAyICYmIChwdDFbMF0gIT09IHB0MlswXSB8fCBwdDFbMV0gIT09IHB0MlsxXSkgJiYgcG9pbnRPbkxpbmUyRChwdDFbMF0sIHB0MVsxXSwgcHQyWzBdLCBwdDJbMV0sIHB0MVswXSArIHB0M1swXSwgcHQxWzFdICsgcHQzWzFdKSAmJiBwb2ludE9uTGluZTJEKHB0MVswXSwgcHQxWzFdLCBwdDJbMF0sIHB0MlsxXSwgcHQyWzBdICsgcHQ0WzBdLCBwdDJbMV0gKyBwdDRbMV0pKSB7XG4gICAgICAgICAgICBjdXJ2ZVNlZ21lbnRzID0gMjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgYmV6aWVyRGF0YSA9IG5ldyBCZXppZXJEYXRhKGN1cnZlU2VnbWVudHMpO1xuICAgICAgICAgIGxlbiA9IHB0My5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgY3VydmVTZWdtZW50czsgayArPSAxKSB7XG4gICAgICAgICAgICBwb2ludCA9IGNyZWF0ZVNpemVkQXJyYXkobGVuKTtcbiAgICAgICAgICAgIHBlcmMgPSBrIC8gKGN1cnZlU2VnbWVudHMgLSAxKTtcbiAgICAgICAgICAgIHB0RGlzdGFuY2UgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgcHRDb29yZCA9IGJtUG93KDEgLSBwZXJjLCAzKSAqIHB0MVtpXSArIDMgKiBibVBvdygxIC0gcGVyYywgMikgKiBwZXJjICogKHB0MVtpXSArIHB0M1tpXSkgKyAzICogKDEgLSBwZXJjKSAqIGJtUG93KHBlcmMsIDIpICogKHB0MltpXSArIHB0NFtpXSkgKyBibVBvdyhwZXJjLCAzKSAqIHB0MltpXTtcbiAgICAgICAgICAgICAgcG9pbnRbaV0gPSBwdENvb3JkO1xuXG4gICAgICAgICAgICAgIGlmIChsYXN0UG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwdERpc3RhbmNlICs9IGJtUG93KHBvaW50W2ldIC0gbGFzdFBvaW50W2ldLCAyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwdERpc3RhbmNlID0gYm1TcXJ0KHB0RGlzdGFuY2UpO1xuICAgICAgICAgICAgYWRkZWRMZW5ndGggKz0gcHREaXN0YW5jZTtcbiAgICAgICAgICAgIGJlemllckRhdGEucG9pbnRzW2tdID0gbmV3IFBvaW50RGF0YShwdERpc3RhbmNlLCBwb2ludCk7XG4gICAgICAgICAgICBsYXN0UG9pbnQgPSBwb2ludDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBiZXppZXJEYXRhLnNlZ21lbnRMZW5ndGggPSBhZGRlZExlbmd0aDtcbiAgICAgICAgICBzdG9yZWREYXRhW2Jlemllck5hbWVdID0gYmV6aWVyRGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdG9yZWREYXRhW2Jlemllck5hbWVdO1xuICAgICAgfTtcbiAgICB9KCk7XG5cbiAgICBmdW5jdGlvbiBnZXREaXN0YW5jZVBlcmMocGVyYywgYmV6aWVyRGF0YSkge1xuICAgICAgdmFyIHBlcmNlbnRzID0gYmV6aWVyRGF0YS5wZXJjZW50cztcbiAgICAgIHZhciBsZW5ndGhzID0gYmV6aWVyRGF0YS5sZW5ndGhzO1xuICAgICAgdmFyIGxlbiA9IHBlcmNlbnRzLmxlbmd0aDtcbiAgICAgIHZhciBpbml0UG9zID0gYm1GbG9vcigobGVuIC0gMSkgKiBwZXJjKTtcbiAgICAgIHZhciBsZW5ndGhQb3MgPSBwZXJjICogYmV6aWVyRGF0YS5hZGRlZExlbmd0aDtcbiAgICAgIHZhciBsUGVyYyA9IDA7XG5cbiAgICAgIGlmIChpbml0UG9zID09PSBsZW4gLSAxIHx8IGluaXRQb3MgPT09IDAgfHwgbGVuZ3RoUG9zID09PSBsZW5ndGhzW2luaXRQb3NdKSB7XG4gICAgICAgIHJldHVybiBwZXJjZW50c1tpbml0UG9zXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpciA9IGxlbmd0aHNbaW5pdFBvc10gPiBsZW5ndGhQb3MgPyAtMSA6IDE7XG4gICAgICB2YXIgZmxhZyA9IHRydWU7XG5cbiAgICAgIHdoaWxlIChmbGFnKSB7XG4gICAgICAgIGlmIChsZW5ndGhzW2luaXRQb3NdIDw9IGxlbmd0aFBvcyAmJiBsZW5ndGhzW2luaXRQb3MgKyAxXSA+IGxlbmd0aFBvcykge1xuICAgICAgICAgIGxQZXJjID0gKGxlbmd0aFBvcyAtIGxlbmd0aHNbaW5pdFBvc10pIC8gKGxlbmd0aHNbaW5pdFBvcyArIDFdIC0gbGVuZ3Roc1tpbml0UG9zXSk7XG4gICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluaXRQb3MgKz0gZGlyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluaXRQb3MgPCAwIHx8IGluaXRQb3MgPj0gbGVuIC0gMSkge1xuICAgICAgICAgIC8vIEZJWCBmb3IgVHlwZWRBcnJheXMgdGhhdCBkb24ndCBzdG9yZSBmbG9hdGluZyBwb2ludCB2YWx1ZXMgd2l0aCBlbm91Z2ggYWNjdXJhY3lcbiAgICAgICAgICBpZiAoaW5pdFBvcyA9PT0gbGVuIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHBlcmNlbnRzW2luaXRQb3NdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGVyY2VudHNbaW5pdFBvc10gKyAocGVyY2VudHNbaW5pdFBvcyArIDFdIC0gcGVyY2VudHNbaW5pdFBvc10pICogbFBlcmM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UG9pbnRJblNlZ21lbnQocHQxLCBwdDIsIHB0MywgcHQ0LCBwZXJjZW50LCBiZXppZXJEYXRhKSB7XG4gICAgICB2YXIgdDEgPSBnZXREaXN0YW5jZVBlcmMocGVyY2VudCwgYmV6aWVyRGF0YSk7XG4gICAgICB2YXIgdTEgPSAxIC0gdDE7XG4gICAgICB2YXIgcHRYID0gbWF0aC5yb3VuZCgodTEgKiB1MSAqIHUxICogcHQxWzBdICsgKHQxICogdTEgKiB1MSArIHUxICogdDEgKiB1MSArIHUxICogdTEgKiB0MSkgKiBwdDNbMF0gKyAodDEgKiB0MSAqIHUxICsgdTEgKiB0MSAqIHQxICsgdDEgKiB1MSAqIHQxKSAqIHB0NFswXSArIHQxICogdDEgKiB0MSAqIHB0MlswXSkgKiAxMDAwKSAvIDEwMDA7XG4gICAgICB2YXIgcHRZID0gbWF0aC5yb3VuZCgodTEgKiB1MSAqIHUxICogcHQxWzFdICsgKHQxICogdTEgKiB1MSArIHUxICogdDEgKiB1MSArIHUxICogdTEgKiB0MSkgKiBwdDNbMV0gKyAodDEgKiB0MSAqIHUxICsgdTEgKiB0MSAqIHQxICsgdDEgKiB1MSAqIHQxKSAqIHB0NFsxXSArIHQxICogdDEgKiB0MSAqIHB0MlsxXSkgKiAxMDAwKSAvIDEwMDA7XG4gICAgICByZXR1cm4gW3B0WCwgcHRZXTtcbiAgICB9XG5cbiAgICB2YXIgYmV6aWVyU2VnbWVudFBvaW50cyA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCA4KTtcblxuICAgIGZ1bmN0aW9uIGdldE5ld1NlZ21lbnQocHQxLCBwdDIsIHB0MywgcHQ0LCBzdGFydFBlcmMsIGVuZFBlcmMsIGJlemllckRhdGEpIHtcbiAgICAgIGlmIChzdGFydFBlcmMgPCAwKSB7XG4gICAgICAgIHN0YXJ0UGVyYyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0UGVyYyA+IDEpIHtcbiAgICAgICAgc3RhcnRQZXJjID0gMTtcbiAgICAgIH1cblxuICAgICAgdmFyIHQwID0gZ2V0RGlzdGFuY2VQZXJjKHN0YXJ0UGVyYywgYmV6aWVyRGF0YSk7XG4gICAgICBlbmRQZXJjID0gZW5kUGVyYyA+IDEgPyAxIDogZW5kUGVyYztcbiAgICAgIHZhciB0MSA9IGdldERpc3RhbmNlUGVyYyhlbmRQZXJjLCBiZXppZXJEYXRhKTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHB0MS5sZW5ndGg7XG4gICAgICB2YXIgdTAgPSAxIC0gdDA7XG4gICAgICB2YXIgdTEgPSAxIC0gdDE7XG4gICAgICB2YXIgdTB1MHUwID0gdTAgKiB1MCAqIHUwO1xuICAgICAgdmFyIHQwdTB1MF8zID0gdDAgKiB1MCAqIHUwICogMzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgdmFyIHQwdDB1MF8zID0gdDAgKiB0MCAqIHUwICogMzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgdmFyIHQwdDB0MCA9IHQwICogdDAgKiB0MDsgLy9cblxuICAgICAgdmFyIHUwdTB1MSA9IHUwICogdTAgKiB1MTtcbiAgICAgIHZhciB0MHUwdTFfMyA9IHQwICogdTAgKiB1MSArIHUwICogdDAgKiB1MSArIHUwICogdTAgKiB0MTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgdmFyIHQwdDB1MV8zID0gdDAgKiB0MCAqIHUxICsgdTAgKiB0MCAqIHQxICsgdDAgKiB1MCAqIHQxOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICB2YXIgdDB0MHQxID0gdDAgKiB0MCAqIHQxOyAvL1xuXG4gICAgICB2YXIgdTB1MXUxID0gdTAgKiB1MSAqIHUxO1xuICAgICAgdmFyIHQwdTF1MV8zID0gdDAgKiB1MSAqIHUxICsgdTAgKiB0MSAqIHUxICsgdTAgKiB1MSAqIHQxOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICB2YXIgdDB0MXUxXzMgPSB0MCAqIHQxICogdTEgKyB1MCAqIHQxICogdDEgKyB0MCAqIHUxICogdDE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgIHZhciB0MHQxdDEgPSB0MCAqIHQxICogdDE7IC8vXG5cbiAgICAgIHZhciB1MXUxdTEgPSB1MSAqIHUxICogdTE7XG4gICAgICB2YXIgdDF1MXUxXzMgPSB0MSAqIHUxICogdTEgKyB1MSAqIHQxICogdTEgKyB1MSAqIHUxICogdDE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgIHZhciB0MXQxdTFfMyA9IHQxICogdDEgKiB1MSArIHUxICogdDEgKiB0MSArIHQxICogdTEgKiB0MTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgdmFyIHQxdDF0MSA9IHQxICogdDEgKiB0MTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGJlemllclNlZ21lbnRQb2ludHNbaSAqIDRdID0gbWF0aC5yb3VuZCgodTB1MHUwICogcHQxW2ldICsgdDB1MHUwXzMgKiBwdDNbaV0gKyB0MHQwdTBfMyAqIHB0NFtpXSArIHQwdDB0MCAqIHB0MltpXSkgKiAxMDAwKSAvIDEwMDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgICAgYmV6aWVyU2VnbWVudFBvaW50c1tpICogNCArIDFdID0gbWF0aC5yb3VuZCgodTB1MHUxICogcHQxW2ldICsgdDB1MHUxXzMgKiBwdDNbaV0gKyB0MHQwdTFfMyAqIHB0NFtpXSArIHQwdDB0MSAqIHB0MltpXSkgKiAxMDAwKSAvIDEwMDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgICAgYmV6aWVyU2VnbWVudFBvaW50c1tpICogNCArIDJdID0gbWF0aC5yb3VuZCgodTB1MXUxICogcHQxW2ldICsgdDB1MXUxXzMgKiBwdDNbaV0gKyB0MHQxdTFfMyAqIHB0NFtpXSArIHQwdDF0MSAqIHB0MltpXSkgKiAxMDAwKSAvIDEwMDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgICAgYmV6aWVyU2VnbWVudFBvaW50c1tpICogNCArIDNdID0gbWF0aC5yb3VuZCgodTF1MXUxICogcHQxW2ldICsgdDF1MXUxXzMgKiBwdDNbaV0gKyB0MXQxdTFfMyAqIHB0NFtpXSArIHQxdDF0MSAqIHB0MltpXSkgKiAxMDAwKSAvIDEwMDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiZXppZXJTZWdtZW50UG9pbnRzO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBnZXRTZWdtZW50c0xlbmd0aDogZ2V0U2VnbWVudHNMZW5ndGgsXG4gICAgICBnZXROZXdTZWdtZW50OiBnZXROZXdTZWdtZW50LFxuICAgICAgZ2V0UG9pbnRJblNlZ21lbnQ6IGdldFBvaW50SW5TZWdtZW50LFxuICAgICAgYnVpbGRCZXppZXJEYXRhOiBidWlsZEJlemllckRhdGEsXG4gICAgICBwb2ludE9uTGluZTJEOiBwb2ludE9uTGluZTJELFxuICAgICAgcG9pbnRPbkxpbmUzRDogcG9pbnRPbkxpbmUzRFxuICAgIH07XG4gIH1cblxuICB2YXIgYmV6ID0gYmV6RnVuY3Rpb24oKTtcblxuICB2YXIgaW5pdEZyYW1lID0gaW5pdGlhbERlZmF1bHRGcmFtZTtcbiAgdmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZVZhbHVlKGZyYW1lTnVtLCBjYWNoaW5nKSB7XG4gICAgdmFyIG9mZnNldFRpbWUgPSB0aGlzLm9mZnNldFRpbWU7XG4gICAgdmFyIG5ld1ZhbHVlO1xuXG4gICAgaWYgKHRoaXMucHJvcFR5cGUgPT09ICdtdWx0aWRpbWVuc2lvbmFsJykge1xuICAgICAgbmV3VmFsdWUgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgdGhpcy5wdi5sZW5ndGgpO1xuICAgIH1cblxuICAgIHZhciBpdGVyYXRpb25JbmRleCA9IGNhY2hpbmcubGFzdEluZGV4O1xuICAgIHZhciBpID0gaXRlcmF0aW9uSW5kZXg7XG4gICAgdmFyIGxlbiA9IHRoaXMua2V5ZnJhbWVzLmxlbmd0aCAtIDE7XG4gICAgdmFyIGZsYWcgPSB0cnVlO1xuICAgIHZhciBrZXlEYXRhO1xuICAgIHZhciBuZXh0S2V5RGF0YTtcbiAgICB2YXIga2V5ZnJhbWVNZXRhZGF0YTtcblxuICAgIHdoaWxlIChmbGFnKSB7XG4gICAgICBrZXlEYXRhID0gdGhpcy5rZXlmcmFtZXNbaV07XG4gICAgICBuZXh0S2V5RGF0YSA9IHRoaXMua2V5ZnJhbWVzW2kgKyAxXTtcblxuICAgICAgaWYgKGkgPT09IGxlbiAtIDEgJiYgZnJhbWVOdW0gPj0gbmV4dEtleURhdGEudCAtIG9mZnNldFRpbWUpIHtcbiAgICAgICAgaWYgKGtleURhdGEuaCkge1xuICAgICAgICAgIGtleURhdGEgPSBuZXh0S2V5RGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0ZXJhdGlvbkluZGV4ID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0S2V5RGF0YS50IC0gb2Zmc2V0VGltZSA+IGZyYW1lTnVtKSB7XG4gICAgICAgIGl0ZXJhdGlvbkluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChpIDwgbGVuIC0gMSkge1xuICAgICAgICBpICs9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRpb25JbmRleCA9IDA7XG4gICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBrZXlmcmFtZU1ldGFkYXRhID0gdGhpcy5rZXlmcmFtZXNNZXRhZGF0YVtpXSB8fCB7fTtcbiAgICB2YXIgaztcbiAgICB2YXIga0xlbjtcbiAgICB2YXIgcGVyYztcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgajtcbiAgICB2YXIgZm5jO1xuICAgIHZhciBuZXh0S2V5VGltZSA9IG5leHRLZXlEYXRhLnQgLSBvZmZzZXRUaW1lO1xuICAgIHZhciBrZXlUaW1lID0ga2V5RGF0YS50IC0gb2Zmc2V0VGltZTtcbiAgICB2YXIgZW5kVmFsdWU7XG5cbiAgICBpZiAoa2V5RGF0YS50bykge1xuICAgICAgaWYgKCFrZXlmcmFtZU1ldGFkYXRhLmJlemllckRhdGEpIHtcbiAgICAgICAga2V5ZnJhbWVNZXRhZGF0YS5iZXppZXJEYXRhID0gYmV6LmJ1aWxkQmV6aWVyRGF0YShrZXlEYXRhLnMsIG5leHRLZXlEYXRhLnMgfHwga2V5RGF0YS5lLCBrZXlEYXRhLnRvLCBrZXlEYXRhLnRpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJlemllckRhdGEgPSBrZXlmcmFtZU1ldGFkYXRhLmJlemllckRhdGE7XG5cbiAgICAgIGlmIChmcmFtZU51bSA+PSBuZXh0S2V5VGltZSB8fCBmcmFtZU51bSA8IGtleVRpbWUpIHtcbiAgICAgICAgdmFyIGluZCA9IGZyYW1lTnVtID49IG5leHRLZXlUaW1lID8gYmV6aWVyRGF0YS5wb2ludHMubGVuZ3RoIC0gMSA6IDA7XG4gICAgICAgIGtMZW4gPSBiZXppZXJEYXRhLnBvaW50c1tpbmRdLnBvaW50Lmxlbmd0aDtcblxuICAgICAgICBmb3IgKGsgPSAwOyBrIDwga0xlbjsgayArPSAxKSB7XG4gICAgICAgICAgbmV3VmFsdWVba10gPSBiZXppZXJEYXRhLnBvaW50c1tpbmRdLnBvaW50W2tdO1xuICAgICAgICB9IC8vIGNhY2hpbmcuX2xhc3RLZXlmcmFtZUluZGV4ID0gLTE7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdCkge1xuICAgICAgICAgIGZuYyA9IGtleWZyYW1lTWV0YWRhdGEuX19mbmN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZuYyA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKGtleURhdGEuby54LCBrZXlEYXRhLm8ueSwga2V5RGF0YS5pLngsIGtleURhdGEuaS55LCBrZXlEYXRhLm4pLmdldDtcbiAgICAgICAgICBrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdCA9IGZuYztcbiAgICAgICAgfVxuXG4gICAgICAgIHBlcmMgPSBmbmMoKGZyYW1lTnVtIC0ga2V5VGltZSkgLyAobmV4dEtleVRpbWUgLSBrZXlUaW1lKSk7XG4gICAgICAgIHZhciBkaXN0YW5jZUluTGluZSA9IGJlemllckRhdGEuc2VnbWVudExlbmd0aCAqIHBlcmM7XG4gICAgICAgIHZhciBzZWdtZW50UGVyYztcbiAgICAgICAgdmFyIGFkZGVkTGVuZ3RoID0gY2FjaGluZy5sYXN0RnJhbWUgPCBmcmFtZU51bSAmJiBjYWNoaW5nLl9sYXN0S2V5ZnJhbWVJbmRleCA9PT0gaSA/IGNhY2hpbmcuX2xhc3RBZGRlZExlbmd0aCA6IDA7XG4gICAgICAgIGogPSBjYWNoaW5nLmxhc3RGcmFtZSA8IGZyYW1lTnVtICYmIGNhY2hpbmcuX2xhc3RLZXlmcmFtZUluZGV4ID09PSBpID8gY2FjaGluZy5fbGFzdFBvaW50IDogMDtcbiAgICAgICAgZmxhZyA9IHRydWU7XG4gICAgICAgIGpMZW4gPSBiZXppZXJEYXRhLnBvaW50cy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGZsYWcpIHtcbiAgICAgICAgICBhZGRlZExlbmd0aCArPSBiZXppZXJEYXRhLnBvaW50c1tqXS5wYXJ0aWFsTGVuZ3RoO1xuXG4gICAgICAgICAgaWYgKGRpc3RhbmNlSW5MaW5lID09PSAwIHx8IHBlcmMgPT09IDAgfHwgaiA9PT0gYmV6aWVyRGF0YS5wb2ludHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAga0xlbiA9IGJlemllckRhdGEucG9pbnRzW2pdLnBvaW50Lmxlbmd0aDtcblxuICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgICBuZXdWYWx1ZVtrXSA9IGJlemllckRhdGEucG9pbnRzW2pdLnBvaW50W2tdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlSW5MaW5lID49IGFkZGVkTGVuZ3RoICYmIGRpc3RhbmNlSW5MaW5lIDwgYWRkZWRMZW5ndGggKyBiZXppZXJEYXRhLnBvaW50c1tqICsgMV0ucGFydGlhbExlbmd0aCkge1xuICAgICAgICAgICAgc2VnbWVudFBlcmMgPSAoZGlzdGFuY2VJbkxpbmUgLSBhZGRlZExlbmd0aCkgLyBiZXppZXJEYXRhLnBvaW50c1tqICsgMV0ucGFydGlhbExlbmd0aDtcbiAgICAgICAgICAgIGtMZW4gPSBiZXppZXJEYXRhLnBvaW50c1tqXS5wb2ludC5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBrTGVuOyBrICs9IDEpIHtcbiAgICAgICAgICAgICAgbmV3VmFsdWVba10gPSBiZXppZXJEYXRhLnBvaW50c1tqXS5wb2ludFtrXSArIChiZXppZXJEYXRhLnBvaW50c1tqICsgMV0ucG9pbnRba10gLSBiZXppZXJEYXRhLnBvaW50c1tqXS5wb2ludFtrXSkgKiBzZWdtZW50UGVyYztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGogPCBqTGVuIC0gMSkge1xuICAgICAgICAgICAgaiArPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2FjaGluZy5fbGFzdFBvaW50ID0gajtcbiAgICAgICAgY2FjaGluZy5fbGFzdEFkZGVkTGVuZ3RoID0gYWRkZWRMZW5ndGggLSBiZXppZXJEYXRhLnBvaW50c1tqXS5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICBjYWNoaW5nLl9sYXN0S2V5ZnJhbWVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvdXRYO1xuICAgICAgdmFyIG91dFk7XG4gICAgICB2YXIgaW5YO1xuICAgICAgdmFyIGluWTtcbiAgICAgIHZhciBrZXlWYWx1ZTtcbiAgICAgIGxlbiA9IGtleURhdGEucy5sZW5ndGg7XG4gICAgICBlbmRWYWx1ZSA9IG5leHRLZXlEYXRhLnMgfHwga2V5RGF0YS5lO1xuXG4gICAgICBpZiAodGhpcy5zaCAmJiBrZXlEYXRhLmggIT09IDEpIHtcbiAgICAgICAgaWYgKGZyYW1lTnVtID49IG5leHRLZXlUaW1lKSB7XG4gICAgICAgICAgbmV3VmFsdWVbMF0gPSBlbmRWYWx1ZVswXTtcbiAgICAgICAgICBuZXdWYWx1ZVsxXSA9IGVuZFZhbHVlWzFdO1xuICAgICAgICAgIG5ld1ZhbHVlWzJdID0gZW5kVmFsdWVbMl07XG4gICAgICAgIH0gZWxzZSBpZiAoZnJhbWVOdW0gPD0ga2V5VGltZSkge1xuICAgICAgICAgIG5ld1ZhbHVlWzBdID0ga2V5RGF0YS5zWzBdO1xuICAgICAgICAgIG5ld1ZhbHVlWzFdID0ga2V5RGF0YS5zWzFdO1xuICAgICAgICAgIG5ld1ZhbHVlWzJdID0ga2V5RGF0YS5zWzJdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBxdWF0U3RhcnQgPSBjcmVhdGVRdWF0ZXJuaW9uKGtleURhdGEucyk7XG4gICAgICAgICAgdmFyIHF1YXRFbmQgPSBjcmVhdGVRdWF0ZXJuaW9uKGVuZFZhbHVlKTtcbiAgICAgICAgICB2YXIgdGltZSA9IChmcmFtZU51bSAtIGtleVRpbWUpIC8gKG5leHRLZXlUaW1lIC0ga2V5VGltZSk7XG4gICAgICAgICAgcXVhdGVybmlvblRvRXVsZXIobmV3VmFsdWUsIHNsZXJwKHF1YXRTdGFydCwgcXVhdEVuZCwgdGltZSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoa2V5RGF0YS5oICE9PSAxKSB7XG4gICAgICAgICAgICBpZiAoZnJhbWVOdW0gPj0gbmV4dEtleVRpbWUpIHtcbiAgICAgICAgICAgICAgcGVyYyA9IDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZyYW1lTnVtIDwga2V5VGltZSkge1xuICAgICAgICAgICAgICBwZXJjID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChrZXlEYXRhLm8ueC5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtleWZyYW1lTWV0YWRhdGEuX19mbmN0KSB7XG4gICAgICAgICAgICAgICAgICBrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdCA9IFtdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICgha2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3RbaV0pIHtcbiAgICAgICAgICAgICAgICAgIG91dFggPSBrZXlEYXRhLm8ueFtpXSA9PT0gdW5kZWZpbmVkID8ga2V5RGF0YS5vLnhbMF0gOiBrZXlEYXRhLm8ueFtpXTtcbiAgICAgICAgICAgICAgICAgIG91dFkgPSBrZXlEYXRhLm8ueVtpXSA9PT0gdW5kZWZpbmVkID8ga2V5RGF0YS5vLnlbMF0gOiBrZXlEYXRhLm8ueVtpXTtcbiAgICAgICAgICAgICAgICAgIGluWCA9IGtleURhdGEuaS54W2ldID09PSB1bmRlZmluZWQgPyBrZXlEYXRhLmkueFswXSA6IGtleURhdGEuaS54W2ldO1xuICAgICAgICAgICAgICAgICAgaW5ZID0ga2V5RGF0YS5pLnlbaV0gPT09IHVuZGVmaW5lZCA/IGtleURhdGEuaS55WzBdIDoga2V5RGF0YS5pLnlbaV07XG4gICAgICAgICAgICAgICAgICBmbmMgPSBCZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZyhvdXRYLCBvdXRZLCBpblgsIGluWSkuZ2V0O1xuICAgICAgICAgICAgICAgICAga2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3RbaV0gPSBmbmM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZuYyA9IGtleWZyYW1lTWV0YWRhdGEuX19mbmN0W2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgha2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3QpIHtcbiAgICAgICAgICAgICAgICBvdXRYID0ga2V5RGF0YS5vLng7XG4gICAgICAgICAgICAgICAgb3V0WSA9IGtleURhdGEuby55O1xuICAgICAgICAgICAgICAgIGluWCA9IGtleURhdGEuaS54O1xuICAgICAgICAgICAgICAgIGluWSA9IGtleURhdGEuaS55O1xuICAgICAgICAgICAgICAgIGZuYyA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKG91dFgsIG91dFksIGluWCwgaW5ZKS5nZXQ7XG4gICAgICAgICAgICAgICAga2V5RGF0YS5rZXlmcmFtZU1ldGFkYXRhID0gZm5jO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZuYyA9IGtleWZyYW1lTWV0YWRhdGEuX19mbmN0O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcGVyYyA9IGZuYygoZnJhbWVOdW0gLSBrZXlUaW1lKSAvIChuZXh0S2V5VGltZSAtIGtleVRpbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbmRWYWx1ZSA9IG5leHRLZXlEYXRhLnMgfHwga2V5RGF0YS5lO1xuICAgICAgICAgIGtleVZhbHVlID0ga2V5RGF0YS5oID09PSAxID8ga2V5RGF0YS5zW2ldIDoga2V5RGF0YS5zW2ldICsgKGVuZFZhbHVlW2ldIC0ga2V5RGF0YS5zW2ldKSAqIHBlcmM7XG5cbiAgICAgICAgICBpZiAodGhpcy5wcm9wVHlwZSA9PT0gJ211bHRpZGltZW5zaW9uYWwnKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZVtpXSA9IGtleVZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGtleVZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNhY2hpbmcubGFzdEluZGV4ID0gaXRlcmF0aW9uSW5kZXg7XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xuICB9IC8vIGJhc2VkIG9uIEBUb2ppJ3MgaHR0cHM6Ly9naXRodWIuY29tL3RvamkvZ2wtbWF0cml4L1xuXG5cbiAgZnVuY3Rpb24gc2xlcnAoYSwgYiwgdCkge1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICB2YXIgYXggPSBhWzBdO1xuICAgIHZhciBheSA9IGFbMV07XG4gICAgdmFyIGF6ID0gYVsyXTtcbiAgICB2YXIgYXcgPSBhWzNdO1xuICAgIHZhciBieCA9IGJbMF07XG4gICAgdmFyIGJ5ID0gYlsxXTtcbiAgICB2YXIgYnogPSBiWzJdO1xuICAgIHZhciBidyA9IGJbM107XG4gICAgdmFyIG9tZWdhO1xuICAgIHZhciBjb3NvbTtcbiAgICB2YXIgc2lub207XG4gICAgdmFyIHNjYWxlMDtcbiAgICB2YXIgc2NhbGUxO1xuICAgIGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidztcblxuICAgIGlmIChjb3NvbSA8IDAuMCkge1xuICAgICAgY29zb20gPSAtY29zb207XG4gICAgICBieCA9IC1ieDtcbiAgICAgIGJ5ID0gLWJ5O1xuICAgICAgYnogPSAtYno7XG4gICAgICBidyA9IC1idztcbiAgICB9XG5cbiAgICBpZiAoMS4wIC0gY29zb20gPiAwLjAwMDAwMSkge1xuICAgICAgb21lZ2EgPSBNYXRoLmFjb3MoY29zb20pO1xuICAgICAgc2lub20gPSBNYXRoLnNpbihvbWVnYSk7XG4gICAgICBzY2FsZTAgPSBNYXRoLnNpbigoMS4wIC0gdCkgKiBvbWVnYSkgLyBzaW5vbTtcbiAgICAgIHNjYWxlMSA9IE1hdGguc2luKHQgKiBvbWVnYSkgLyBzaW5vbTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NhbGUwID0gMS4wIC0gdDtcbiAgICAgIHNjYWxlMSA9IHQ7XG4gICAgfVxuXG4gICAgb3V0WzBdID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgICBvdXRbMV0gPSBzY2FsZTAgKiBheSArIHNjYWxlMSAqIGJ5O1xuICAgIG91dFsyXSA9IHNjYWxlMCAqIGF6ICsgc2NhbGUxICogYno7XG4gICAgb3V0WzNdID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhdGVybmlvblRvRXVsZXIob3V0LCBxdWF0KSB7XG4gICAgdmFyIHF4ID0gcXVhdFswXTtcbiAgICB2YXIgcXkgPSBxdWF0WzFdO1xuICAgIHZhciBxeiA9IHF1YXRbMl07XG4gICAgdmFyIHF3ID0gcXVhdFszXTtcbiAgICB2YXIgaGVhZGluZyA9IE1hdGguYXRhbjIoMiAqIHF5ICogcXcgLSAyICogcXggKiBxeiwgMSAtIDIgKiBxeSAqIHF5IC0gMiAqIHF6ICogcXopO1xuICAgIHZhciBhdHRpdHVkZSA9IE1hdGguYXNpbigyICogcXggKiBxeSArIDIgKiBxeiAqIHF3KTtcbiAgICB2YXIgYmFuayA9IE1hdGguYXRhbjIoMiAqIHF4ICogcXcgLSAyICogcXkgKiBxeiwgMSAtIDIgKiBxeCAqIHF4IC0gMiAqIHF6ICogcXopO1xuICAgIG91dFswXSA9IGhlYWRpbmcgLyBkZWdUb1JhZHM7XG4gICAgb3V0WzFdID0gYXR0aXR1ZGUgLyBkZWdUb1JhZHM7XG4gICAgb3V0WzJdID0gYmFuayAvIGRlZ1RvUmFkcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVF1YXRlcm5pb24odmFsdWVzKSB7XG4gICAgdmFyIGhlYWRpbmcgPSB2YWx1ZXNbMF0gKiBkZWdUb1JhZHM7XG4gICAgdmFyIGF0dGl0dWRlID0gdmFsdWVzWzFdICogZGVnVG9SYWRzO1xuICAgIHZhciBiYW5rID0gdmFsdWVzWzJdICogZGVnVG9SYWRzO1xuICAgIHZhciBjMSA9IE1hdGguY29zKGhlYWRpbmcgLyAyKTtcbiAgICB2YXIgYzIgPSBNYXRoLmNvcyhhdHRpdHVkZSAvIDIpO1xuICAgIHZhciBjMyA9IE1hdGguY29zKGJhbmsgLyAyKTtcbiAgICB2YXIgczEgPSBNYXRoLnNpbihoZWFkaW5nIC8gMik7XG4gICAgdmFyIHMyID0gTWF0aC5zaW4oYXR0aXR1ZGUgLyAyKTtcbiAgICB2YXIgczMgPSBNYXRoLnNpbihiYW5rIC8gMik7XG4gICAgdmFyIHcgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG4gICAgdmFyIHggPSBzMSAqIHMyICogYzMgKyBjMSAqIGMyICogczM7XG4gICAgdmFyIHkgPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG4gICAgdmFyIHogPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG4gICAgcmV0dXJuIFt4LCB5LCB6LCB3XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFZhbHVlQXRDdXJyZW50VGltZSgpIHtcbiAgICB2YXIgZnJhbWVOdW0gPSB0aGlzLmNvbXAucmVuZGVyZWRGcmFtZSAtIHRoaXMub2Zmc2V0VGltZTtcbiAgICB2YXIgaW5pdFRpbWUgPSB0aGlzLmtleWZyYW1lc1swXS50IC0gdGhpcy5vZmZzZXRUaW1lO1xuICAgIHZhciBlbmRUaW1lID0gdGhpcy5rZXlmcmFtZXNbdGhpcy5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCAtIHRoaXMub2Zmc2V0VGltZTtcblxuICAgIGlmICghKGZyYW1lTnVtID09PSB0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSB8fCB0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSAhPT0gaW5pdEZyYW1lICYmICh0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSA+PSBlbmRUaW1lICYmIGZyYW1lTnVtID49IGVuZFRpbWUgfHwgdGhpcy5fY2FjaGluZy5sYXN0RnJhbWUgPCBpbml0VGltZSAmJiBmcmFtZU51bSA8IGluaXRUaW1lKSkpIHtcbiAgICAgIGlmICh0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSA+PSBmcmFtZU51bSkge1xuICAgICAgICB0aGlzLl9jYWNoaW5nLl9sYXN0S2V5ZnJhbWVJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLl9jYWNoaW5nLmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciByZW5kZXJSZXN1bHQgPSB0aGlzLmludGVycG9sYXRlVmFsdWUoZnJhbWVOdW0sIHRoaXMuX2NhY2hpbmcpO1xuICAgICAgdGhpcy5wdiA9IHJlbmRlclJlc3VsdDtcbiAgICB9XG5cbiAgICB0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSA9IGZyYW1lTnVtO1xuICAgIHJldHVybiB0aGlzLnB2O1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0VlZhbHVlKHZhbCkge1xuICAgIHZhciBtdWx0aXBsaWVkVmFsdWU7XG5cbiAgICBpZiAodGhpcy5wcm9wVHlwZSA9PT0gJ3VuaWRpbWVuc2lvbmFsJykge1xuICAgICAgbXVsdGlwbGllZFZhbHVlID0gdmFsICogdGhpcy5tdWx0O1xuXG4gICAgICBpZiAobWF0aEFicyh0aGlzLnYgLSBtdWx0aXBsaWVkVmFsdWUpID4gMC4wMDAwMSkge1xuICAgICAgICB0aGlzLnYgPSBtdWx0aXBsaWVkVmFsdWU7XG4gICAgICAgIHRoaXMuX21kZiA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBsZW4gPSB0aGlzLnYubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBtdWx0aXBsaWVkVmFsdWUgPSB2YWxbaV0gKiB0aGlzLm11bHQ7XG5cbiAgICAgICAgaWYgKG1hdGhBYnModGhpcy52W2ldIC0gbXVsdGlwbGllZFZhbHVlKSA+IDAuMDAwMDEpIHtcbiAgICAgICAgICB0aGlzLnZbaV0gPSBtdWx0aXBsaWVkVmFsdWU7XG4gICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlKCkge1xuICAgIGlmICh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQgfHwgIXRoaXMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxvY2spIHtcbiAgICAgIHRoaXMuc2V0VlZhbHVlKHRoaXMucHYpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubG9jayA9IHRydWU7XG4gICAgdGhpcy5fbWRmID0gdGhpcy5faXNGaXJzdEZyYW1lO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGg7XG4gICAgdmFyIGZpbmFsVmFsdWUgPSB0aGlzLmtmID8gdGhpcy5wdiA6IHRoaXMuZGF0YS5rO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBmaW5hbFZhbHVlID0gdGhpcy5lZmZlY3RzU2VxdWVuY2VbaV0oZmluYWxWYWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRWVmFsdWUoZmluYWxWYWx1ZSk7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gZmFsc2U7XG4gICAgdGhpcy5sb2NrID0gZmFsc2U7XG4gICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEVmZmVjdChlZmZlY3RGdW5jdGlvbikge1xuICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlLnB1c2goZWZmZWN0RnVuY3Rpb24pO1xuICAgIHRoaXMuY29udGFpbmVyLmFkZER5bmFtaWNQcm9wZXJ0eSh0aGlzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFZhbHVlUHJvcGVydHkoZWxlbSwgZGF0YSwgbXVsdCwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wcm9wVHlwZSA9ICd1bmlkaW1lbnNpb25hbCc7XG4gICAgdGhpcy5tdWx0ID0gbXVsdCB8fCAxO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy52ID0gbXVsdCA/IGRhdGEuayAqIG11bHQgOiBkYXRhLms7XG4gICAgdGhpcy5wdiA9IGRhdGEuaztcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIHRoaXMuY29tcCA9IGVsZW0uY29tcDtcbiAgICB0aGlzLmsgPSBmYWxzZTtcbiAgICB0aGlzLmtmID0gZmFsc2U7XG4gICAgdGhpcy52ZWwgPSAwO1xuICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW107XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB0aGlzLmdldFZhbHVlID0gcHJvY2Vzc0VmZmVjdHNTZXF1ZW5jZTtcbiAgICB0aGlzLnNldFZWYWx1ZSA9IHNldFZWYWx1ZTtcbiAgICB0aGlzLmFkZEVmZmVjdCA9IGFkZEVmZmVjdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIE11bHRpRGltZW5zaW9uYWxQcm9wZXJ0eShlbGVtLCBkYXRhLCBtdWx0LCBjb250YWluZXIpIHtcbiAgICB0aGlzLnByb3BUeXBlID0gJ211bHRpZGltZW5zaW9uYWwnO1xuICAgIHRoaXMubXVsdCA9IG11bHQgfHwgMTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgIHRoaXMuayA9IGZhbHNlO1xuICAgIHRoaXMua2YgPSBmYWxzZTtcbiAgICB0aGlzLmZyYW1lSWQgPSAtMTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gZGF0YS5rLmxlbmd0aDtcbiAgICB0aGlzLnYgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcbiAgICB0aGlzLnB2ID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG4gICAgdGhpcy52ZWwgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy52W2ldID0gZGF0YS5rW2ldICogdGhpcy5tdWx0O1xuICAgICAgdGhpcy5wdltpXSA9IGRhdGEua1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW107XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHByb2Nlc3NFZmZlY3RzU2VxdWVuY2U7XG4gICAgdGhpcy5zZXRWVmFsdWUgPSBzZXRWVmFsdWU7XG4gICAgdGhpcy5hZGRFZmZlY3QgPSBhZGRFZmZlY3Q7XG4gIH1cblxuICBmdW5jdGlvbiBLZXlmcmFtZWRWYWx1ZVByb3BlcnR5KGVsZW0sIGRhdGEsIG11bHQsIGNvbnRhaW5lcikge1xuICAgIHRoaXMucHJvcFR5cGUgPSAndW5pZGltZW5zaW9uYWwnO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gZGF0YS5rO1xuICAgIHRoaXMua2V5ZnJhbWVzTWV0YWRhdGEgPSBbXTtcbiAgICB0aGlzLm9mZnNldFRpbWUgPSBlbGVtLmRhdGEuc3Q7XG4gICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgdGhpcy5fY2FjaGluZyA9IHtcbiAgICAgIGxhc3RGcmFtZTogaW5pdEZyYW1lLFxuICAgICAgbGFzdEluZGV4OiAwLFxuICAgICAgdmFsdWU6IDAsXG4gICAgICBfbGFzdEtleWZyYW1lSW5kZXg6IC0xXG4gICAgfTtcbiAgICB0aGlzLmsgPSB0cnVlO1xuICAgIHRoaXMua2YgPSB0cnVlO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5tdWx0ID0gbXVsdCB8fCAxO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgIHRoaXMudiA9IGluaXRGcmFtZTtcbiAgICB0aGlzLnB2ID0gaW5pdEZyYW1lO1xuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IHRydWU7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHByb2Nlc3NFZmZlY3RzU2VxdWVuY2U7XG4gICAgdGhpcy5zZXRWVmFsdWUgPSBzZXRWVmFsdWU7XG4gICAgdGhpcy5pbnRlcnBvbGF0ZVZhbHVlID0gaW50ZXJwb2xhdGVWYWx1ZTtcbiAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZSA9IFtnZXRWYWx1ZUF0Q3VycmVudFRpbWUuYmluZCh0aGlzKV07XG4gICAgdGhpcy5hZGRFZmZlY3QgPSBhZGRFZmZlY3Q7XG4gIH1cblxuICBmdW5jdGlvbiBLZXlmcmFtZWRNdWx0aWRpbWVuc2lvbmFsUHJvcGVydHkoZWxlbSwgZGF0YSwgbXVsdCwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wcm9wVHlwZSA9ICdtdWx0aWRpbWVuc2lvbmFsJztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gZGF0YS5rLmxlbmd0aDtcbiAgICB2YXIgcztcbiAgICB2YXIgZTtcbiAgICB2YXIgdG87XG4gICAgdmFyIHRpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbiAtIDE7IGkgKz0gMSkge1xuICAgICAgaWYgKGRhdGEua1tpXS50byAmJiBkYXRhLmtbaV0ucyAmJiBkYXRhLmtbaSArIDFdICYmIGRhdGEua1tpICsgMV0ucykge1xuICAgICAgICBzID0gZGF0YS5rW2ldLnM7XG4gICAgICAgIGUgPSBkYXRhLmtbaSArIDFdLnM7XG4gICAgICAgIHRvID0gZGF0YS5rW2ldLnRvO1xuICAgICAgICB0aSA9IGRhdGEua1tpXS50aTtcblxuICAgICAgICBpZiAocy5sZW5ndGggPT09IDIgJiYgIShzWzBdID09PSBlWzBdICYmIHNbMV0gPT09IGVbMV0pICYmIGJlei5wb2ludE9uTGluZTJEKHNbMF0sIHNbMV0sIGVbMF0sIGVbMV0sIHNbMF0gKyB0b1swXSwgc1sxXSArIHRvWzFdKSAmJiBiZXoucG9pbnRPbkxpbmUyRChzWzBdLCBzWzFdLCBlWzBdLCBlWzFdLCBlWzBdICsgdGlbMF0sIGVbMV0gKyB0aVsxXSkgfHwgcy5sZW5ndGggPT09IDMgJiYgIShzWzBdID09PSBlWzBdICYmIHNbMV0gPT09IGVbMV0gJiYgc1syXSA9PT0gZVsyXSkgJiYgYmV6LnBvaW50T25MaW5lM0Qoc1swXSwgc1sxXSwgc1syXSwgZVswXSwgZVsxXSwgZVsyXSwgc1swXSArIHRvWzBdLCBzWzFdICsgdG9bMV0sIHNbMl0gKyB0b1syXSkgJiYgYmV6LnBvaW50T25MaW5lM0Qoc1swXSwgc1sxXSwgc1syXSwgZVswXSwgZVsxXSwgZVsyXSwgZVswXSArIHRpWzBdLCBlWzFdICsgdGlbMV0sIGVbMl0gKyB0aVsyXSkpIHtcbiAgICAgICAgICBkYXRhLmtbaV0udG8gPSBudWxsO1xuICAgICAgICAgIGRhdGEua1tpXS50aSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc1swXSA9PT0gZVswXSAmJiBzWzFdID09PSBlWzFdICYmIHRvWzBdID09PSAwICYmIHRvWzFdID09PSAwICYmIHRpWzBdID09PSAwICYmIHRpWzFdID09PSAwKSB7XG4gICAgICAgICAgaWYgKHMubGVuZ3RoID09PSAyIHx8IHNbMl0gPT09IGVbMl0gJiYgdG9bMl0gPT09IDAgJiYgdGlbMl0gPT09IDApIHtcbiAgICAgICAgICAgIGRhdGEua1tpXS50byA9IG51bGw7XG4gICAgICAgICAgICBkYXRhLmtbaV0udGkgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW2dldFZhbHVlQXRDdXJyZW50VGltZS5iaW5kKHRoaXMpXTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gZGF0YS5rO1xuICAgIHRoaXMua2V5ZnJhbWVzTWV0YWRhdGEgPSBbXTtcbiAgICB0aGlzLm9mZnNldFRpbWUgPSBlbGVtLmRhdGEuc3Q7XG4gICAgdGhpcy5rID0gdHJ1ZTtcbiAgICB0aGlzLmtmID0gdHJ1ZTtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHRoaXMubXVsdCA9IG11bHQgfHwgMTtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIHRoaXMuY29tcCA9IGVsZW0uY29tcDtcbiAgICB0aGlzLmdldFZhbHVlID0gcHJvY2Vzc0VmZmVjdHNTZXF1ZW5jZTtcbiAgICB0aGlzLnNldFZWYWx1ZSA9IHNldFZWYWx1ZTtcbiAgICB0aGlzLmludGVycG9sYXRlVmFsdWUgPSBpbnRlcnBvbGF0ZVZhbHVlO1xuICAgIHRoaXMuZnJhbWVJZCA9IC0xO1xuICAgIHZhciBhcnJMZW4gPSBkYXRhLmtbMF0ucy5sZW5ndGg7XG4gICAgdGhpcy52ID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGFyckxlbik7XG4gICAgdGhpcy5wdiA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBhcnJMZW4pO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGFyckxlbjsgaSArPSAxKSB7XG4gICAgICB0aGlzLnZbaV0gPSBpbml0RnJhbWU7XG4gICAgICB0aGlzLnB2W2ldID0gaW5pdEZyYW1lO1xuICAgIH1cblxuICAgIHRoaXMuX2NhY2hpbmcgPSB7XG4gICAgICBsYXN0RnJhbWU6IGluaXRGcmFtZSxcbiAgICAgIGxhc3RJbmRleDogMCxcbiAgICAgIHZhbHVlOiBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgYXJyTGVuKVxuICAgIH07XG4gICAgdGhpcy5hZGRFZmZlY3QgPSBhZGRFZmZlY3Q7XG4gIH1cblxuICB2YXIgUHJvcGVydHlGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGdldFByb3AoZWxlbSwgZGF0YSwgdHlwZSwgbXVsdCwgY29udGFpbmVyKSB7XG4gICAgICBpZiAoZGF0YS5zaWQpIHtcbiAgICAgICAgZGF0YSA9IGVsZW0uZ2xvYmFsRGF0YS5zbG90TWFuYWdlci5nZXRQcm9wKGRhdGEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcDtcblxuICAgICAgaWYgKCFkYXRhLmsubGVuZ3RoKSB7XG4gICAgICAgIHAgPSBuZXcgVmFsdWVQcm9wZXJ0eShlbGVtLCBkYXRhLCBtdWx0LCBjb250YWluZXIpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YS5rWzBdID09PSAnbnVtYmVyJykge1xuICAgICAgICBwID0gbmV3IE11bHRpRGltZW5zaW9uYWxQcm9wZXJ0eShlbGVtLCBkYXRhLCBtdWx0LCBjb250YWluZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcCA9IG5ldyBLZXlmcmFtZWRWYWx1ZVByb3BlcnR5KGVsZW0sIGRhdGEsIG11bHQsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHAgPSBuZXcgS2V5ZnJhbWVkTXVsdGlkaW1lbnNpb25hbFByb3BlcnR5KGVsZW0sIGRhdGEsIG11bHQsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocC5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgIGNvbnRhaW5lci5hZGREeW5hbWljUHJvcGVydHkocCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwO1xuICAgIH1cblxuICAgIHZhciBvYiA9IHtcbiAgICAgIGdldFByb3A6IGdldFByb3BcbiAgICB9O1xuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcigpIHt9XG5cbiAgRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyLnByb3RvdHlwZSA9IHtcbiAgICBhZGREeW5hbWljUHJvcGVydHk6IGZ1bmN0aW9uIGFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKSB7XG4gICAgICBpZiAodGhpcy5keW5hbWljUHJvcGVydGllcy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgICB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLnB1c2gocHJvcCk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZER5bmFtaWNQcm9wZXJ0eSh0aGlzKTtcbiAgICAgICAgdGhpcy5faXNBbmltYXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBpdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM6IGZ1bmN0aW9uIGl0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpIHtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzW2ldLmdldFZhbHVlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZHluYW1pY1Byb3BlcnRpZXNbaV0uX21kZikge1xuICAgICAgICAgIHRoaXMuX21kZiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGluaXREeW5hbWljUHJvcGVydHlDb250YWluZXI6IGZ1bmN0aW9uIGluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoY29udGFpbmVyKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgIHRoaXMuZHluYW1pY1Byb3BlcnRpZXMgPSBbXTtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNBbmltYXRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcG9pbnRQb29sID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHJldHVybiBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvb2xGYWN0b3J5KDgsIGNyZWF0ZSk7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBTaGFwZVBhdGgoKSB7XG4gICAgdGhpcy5jID0gZmFsc2U7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICB0aGlzLl9tYXhMZW5ndGggPSA4O1xuICAgIHRoaXMudiA9IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fbWF4TGVuZ3RoKTtcbiAgICB0aGlzLm8gPSBjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCk7XG4gICAgdGhpcy5pID0gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpO1xuICB9XG5cbiAgU2hhcGVQYXRoLnByb3RvdHlwZS5zZXRQYXRoRGF0YSA9IGZ1bmN0aW9uIChjbG9zZWQsIGxlbikge1xuICAgIHRoaXMuYyA9IGNsb3NlZDtcbiAgICB0aGlzLnNldExlbmd0aChsZW4pO1xuICAgIHZhciBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICB0aGlzLnZbaV0gPSBwb2ludFBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgdGhpcy5vW2ldID0gcG9pbnRQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgIHRoaXMuaVtpXSA9IHBvaW50UG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICBpICs9IDE7XG4gICAgfVxuICB9O1xuXG4gIFNoYXBlUGF0aC5wcm90b3R5cGUuc2V0TGVuZ3RoID0gZnVuY3Rpb24gKGxlbikge1xuICAgIHdoaWxlICh0aGlzLl9tYXhMZW5ndGggPCBsZW4pIHtcbiAgICAgIHRoaXMuZG91YmxlQXJyYXlMZW5ndGgoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9sZW5ndGggPSBsZW47XG4gIH07XG5cbiAgU2hhcGVQYXRoLnByb3RvdHlwZS5kb3VibGVBcnJheUxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnYgPSB0aGlzLnYuY29uY2F0KGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fbWF4TGVuZ3RoKSk7XG4gICAgdGhpcy5pID0gdGhpcy5pLmNvbmNhdChjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCkpO1xuICAgIHRoaXMubyA9IHRoaXMuby5jb25jYXQoY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpKTtcbiAgICB0aGlzLl9tYXhMZW5ndGggKj0gMjtcbiAgfTtcblxuICBTaGFwZVBhdGgucHJvdG90eXBlLnNldFhZQXQgPSBmdW5jdGlvbiAoeCwgeSwgdHlwZSwgcG9zLCByZXBsYWNlKSB7XG4gICAgdmFyIGFycjtcbiAgICB0aGlzLl9sZW5ndGggPSBNYXRoLm1heCh0aGlzLl9sZW5ndGgsIHBvcyArIDEpO1xuXG4gICAgaWYgKHRoaXMuX2xlbmd0aCA+PSB0aGlzLl9tYXhMZW5ndGgpIHtcbiAgICAgIHRoaXMuZG91YmxlQXJyYXlMZW5ndGgoKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3YnOlxuICAgICAgICBhcnIgPSB0aGlzLnY7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgYXJyID0gdGhpcy5pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbyc6XG4gICAgICAgIGFyciA9IHRoaXMubztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFyciA9IFtdO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoIWFycltwb3NdIHx8IGFycltwb3NdICYmICFyZXBsYWNlKSB7XG4gICAgICBhcnJbcG9zXSA9IHBvaW50UG9vbC5uZXdFbGVtZW50KCk7XG4gICAgfVxuXG4gICAgYXJyW3Bvc11bMF0gPSB4O1xuICAgIGFycltwb3NdWzFdID0geTtcbiAgfTtcblxuICBTaGFwZVBhdGgucHJvdG90eXBlLnNldFRyaXBsZUF0ID0gZnVuY3Rpb24gKHZYLCB2WSwgb1gsIG9ZLCBpWCwgaVksIHBvcywgcmVwbGFjZSkge1xuICAgIHRoaXMuc2V0WFlBdCh2WCwgdlksICd2JywgcG9zLCByZXBsYWNlKTtcbiAgICB0aGlzLnNldFhZQXQob1gsIG9ZLCAnbycsIHBvcywgcmVwbGFjZSk7XG4gICAgdGhpcy5zZXRYWUF0KGlYLCBpWSwgJ2knLCBwb3MsIHJlcGxhY2UpO1xuICB9O1xuXG4gIFNoYXBlUGF0aC5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmV3UGF0aCA9IG5ldyBTaGFwZVBhdGgoKTtcbiAgICBuZXdQYXRoLnNldFBhdGhEYXRhKHRoaXMuYywgdGhpcy5fbGVuZ3RoKTtcbiAgICB2YXIgdmVydGljZXMgPSB0aGlzLnY7XG4gICAgdmFyIG91dFBvaW50cyA9IHRoaXMubztcbiAgICB2YXIgaW5Qb2ludHMgPSB0aGlzLmk7XG4gICAgdmFyIGluaXQgPSAwO1xuXG4gICAgaWYgKHRoaXMuYykge1xuICAgICAgbmV3UGF0aC5zZXRUcmlwbGVBdCh2ZXJ0aWNlc1swXVswXSwgdmVydGljZXNbMF1bMV0sIGluUG9pbnRzWzBdWzBdLCBpblBvaW50c1swXVsxXSwgb3V0UG9pbnRzWzBdWzBdLCBvdXRQb2ludHNbMF1bMV0sIDAsIGZhbHNlKTtcbiAgICAgIGluaXQgPSAxO1xuICAgIH1cblxuICAgIHZhciBjbnQgPSB0aGlzLl9sZW5ndGggLSAxO1xuICAgIHZhciBsZW4gPSB0aGlzLl9sZW5ndGg7XG4gICAgdmFyIGk7XG5cbiAgICBmb3IgKGkgPSBpbml0OyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIG5ld1BhdGguc2V0VHJpcGxlQXQodmVydGljZXNbY250XVswXSwgdmVydGljZXNbY250XVsxXSwgaW5Qb2ludHNbY250XVswXSwgaW5Qb2ludHNbY250XVsxXSwgb3V0UG9pbnRzW2NudF1bMF0sIG91dFBvaW50c1tjbnRdWzFdLCBpLCBmYWxzZSk7XG4gICAgICBjbnQgLT0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3UGF0aDtcbiAgfTtcblxuICBTaGFwZVBhdGgucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGVuZ3RoO1xuICB9O1xuXG4gIHZhciBzaGFwZVBvb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgcmV0dXJuIG5ldyBTaGFwZVBhdGgoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxlYXNlKHNoYXBlUGF0aCkge1xuICAgICAgdmFyIGxlbiA9IHNoYXBlUGF0aC5fbGVuZ3RoO1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBwb2ludFBvb2wucmVsZWFzZShzaGFwZVBhdGgudltpXSk7XG4gICAgICAgIHBvaW50UG9vbC5yZWxlYXNlKHNoYXBlUGF0aC5pW2ldKTtcbiAgICAgICAgcG9pbnRQb29sLnJlbGVhc2Uoc2hhcGVQYXRoLm9baV0pO1xuICAgICAgICBzaGFwZVBhdGgudltpXSA9IG51bGw7XG4gICAgICAgIHNoYXBlUGF0aC5pW2ldID0gbnVsbDtcbiAgICAgICAgc2hhcGVQYXRoLm9baV0gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBzaGFwZVBhdGguX2xlbmd0aCA9IDA7XG4gICAgICBzaGFwZVBhdGguYyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lKHNoYXBlKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZmFjdG9yeS5uZXdFbGVtZW50KCk7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzaGFwZS5fbGVuZ3RoID09PSB1bmRlZmluZWQgPyBzaGFwZS52Lmxlbmd0aCA6IHNoYXBlLl9sZW5ndGg7XG4gICAgICBjbG9uZWQuc2V0TGVuZ3RoKGxlbik7XG4gICAgICBjbG9uZWQuYyA9IHNoYXBlLmM7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBjbG9uZWQuc2V0VHJpcGxlQXQoc2hhcGUudltpXVswXSwgc2hhcGUudltpXVsxXSwgc2hhcGUub1tpXVswXSwgc2hhcGUub1tpXVsxXSwgc2hhcGUuaVtpXVswXSwgc2hhcGUuaVtpXVsxXSwgaSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfVxuXG4gICAgdmFyIGZhY3RvcnkgPSBwb29sRmFjdG9yeSg0LCBjcmVhdGUsIHJlbGVhc2UpO1xuICAgIGZhY3RvcnkuY2xvbmUgPSBjbG9uZTtcbiAgICByZXR1cm4gZmFjdG9yeTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFNoYXBlQ29sbGVjdGlvbigpIHtcbiAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgIHRoaXMuX21heExlbmd0aCA9IDQ7XG4gICAgdGhpcy5zaGFwZXMgPSBjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCk7XG4gIH1cblxuICBTaGFwZUNvbGxlY3Rpb24ucHJvdG90eXBlLmFkZFNoYXBlID0gZnVuY3Rpb24gKHNoYXBlRGF0YSkge1xuICAgIGlmICh0aGlzLl9sZW5ndGggPT09IHRoaXMuX21heExlbmd0aCkge1xuICAgICAgdGhpcy5zaGFwZXMgPSB0aGlzLnNoYXBlcy5jb25jYXQoY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpKTtcbiAgICAgIHRoaXMuX21heExlbmd0aCAqPSAyO1xuICAgIH1cblxuICAgIHRoaXMuc2hhcGVzW3RoaXMuX2xlbmd0aF0gPSBzaGFwZURhdGE7XG4gICAgdGhpcy5fbGVuZ3RoICs9IDE7XG4gIH07XG5cbiAgU2hhcGVDb2xsZWN0aW9uLnByb3RvdHlwZS5yZWxlYXNlU2hhcGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuX2xlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzaGFwZVBvb2wucmVsZWFzZSh0aGlzLnNoYXBlc1tpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgfTtcblxuICB2YXIgc2hhcGVDb2xsZWN0aW9uUG9vbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2IgPSB7XG4gICAgICBuZXdTaGFwZUNvbGxlY3Rpb246IG5ld1NoYXBlQ29sbGVjdGlvbixcbiAgICAgIHJlbGVhc2U6IHJlbGVhc2VcbiAgICB9O1xuICAgIHZhciBfbGVuZ3RoID0gMDtcbiAgICB2YXIgX21heExlbmd0aCA9IDQ7XG4gICAgdmFyIHBvb2wgPSBjcmVhdGVTaXplZEFycmF5KF9tYXhMZW5ndGgpO1xuXG4gICAgZnVuY3Rpb24gbmV3U2hhcGVDb2xsZWN0aW9uKCkge1xuICAgICAgdmFyIHNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgaWYgKF9sZW5ndGgpIHtcbiAgICAgICAgX2xlbmd0aCAtPSAxO1xuICAgICAgICBzaGFwZUNvbGxlY3Rpb24gPSBwb29sW19sZW5ndGhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2hhcGVDb2xsZWN0aW9uID0gbmV3IFNoYXBlQ29sbGVjdGlvbigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2hhcGVDb2xsZWN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbGVhc2Uoc2hhcGVDb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzaGFwZUNvbGxlY3Rpb24uX2xlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHNoYXBlUG9vbC5yZWxlYXNlKHNoYXBlQ29sbGVjdGlvbi5zaGFwZXNbaV0pO1xuICAgICAgfVxuXG4gICAgICBzaGFwZUNvbGxlY3Rpb24uX2xlbmd0aCA9IDA7XG5cbiAgICAgIGlmIChfbGVuZ3RoID09PSBfbWF4TGVuZ3RoKSB7XG4gICAgICAgIHBvb2wgPSBwb29saW5nW1wiZG91YmxlXCJdKHBvb2wpO1xuICAgICAgICBfbWF4TGVuZ3RoICo9IDI7XG4gICAgICB9XG5cbiAgICAgIHBvb2xbX2xlbmd0aF0gPSBzaGFwZUNvbGxlY3Rpb247XG4gICAgICBfbGVuZ3RoICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgdmFyIFNoYXBlUHJvcGVydHlGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbml0RnJhbWUgPSAtOTk5OTk5O1xuXG4gICAgZnVuY3Rpb24gaW50ZXJwb2xhdGVTaGFwZShmcmFtZU51bSwgcHJldmlvdXNWYWx1ZSwgY2FjaGluZykge1xuICAgICAgdmFyIGl0ZXJhdGlvbkluZGV4ID0gY2FjaGluZy5sYXN0SW5kZXg7XG4gICAgICB2YXIga2V5UHJvcFM7XG4gICAgICB2YXIga2V5UHJvcEU7XG4gICAgICB2YXIgaXNIb2xkO1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgaztcbiAgICAgIHZhciBqTGVuO1xuICAgICAgdmFyIGtMZW47XG4gICAgICB2YXIgcGVyYztcbiAgICAgIHZhciB2ZXJ0ZXhWYWx1ZTtcbiAgICAgIHZhciBrZiA9IHRoaXMua2V5ZnJhbWVzO1xuXG4gICAgICBpZiAoZnJhbWVOdW0gPCBrZlswXS50IC0gdGhpcy5vZmZzZXRUaW1lKSB7XG4gICAgICAgIGtleVByb3BTID0ga2ZbMF0uc1swXTtcbiAgICAgICAgaXNIb2xkID0gdHJ1ZTtcbiAgICAgICAgaXRlcmF0aW9uSW5kZXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChmcmFtZU51bSA+PSBrZltrZi5sZW5ndGggLSAxXS50IC0gdGhpcy5vZmZzZXRUaW1lKSB7XG4gICAgICAgIGtleVByb3BTID0ga2Zba2YubGVuZ3RoIC0gMV0ucyA/IGtmW2tmLmxlbmd0aCAtIDFdLnNbMF0gOiBrZltrZi5sZW5ndGggLSAyXS5lWzBdO1xuICAgICAgICAvKiBpZihrZltrZi5sZW5ndGggLSAxXS5zKXtcclxuICAgICAgICAgICAgICAgICAga2V5UHJvcFMgPSBrZltrZi5sZW5ndGggLSAxXS5zWzBdO1xyXG4gICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICBrZXlQcm9wUyA9IGtmW2tmLmxlbmd0aCAtIDJdLmVbMF07XHJcbiAgICAgICAgICAgICAgfSAqL1xuXG4gICAgICAgIGlzSG9sZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaSA9IGl0ZXJhdGlvbkluZGV4O1xuICAgICAgICB2YXIgbGVuID0ga2YubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIGZsYWcgPSB0cnVlO1xuICAgICAgICB2YXIga2V5RGF0YTtcbiAgICAgICAgdmFyIG5leHRLZXlEYXRhO1xuICAgICAgICB2YXIga2V5ZnJhbWVNZXRhZGF0YTtcblxuICAgICAgICB3aGlsZSAoZmxhZykge1xuICAgICAgICAgIGtleURhdGEgPSBrZltpXTtcbiAgICAgICAgICBuZXh0S2V5RGF0YSA9IGtmW2kgKyAxXTtcblxuICAgICAgICAgIGlmIChuZXh0S2V5RGF0YS50IC0gdGhpcy5vZmZzZXRUaW1lID4gZnJhbWVOdW0pIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpIDwgbGVuIC0gMSkge1xuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAga2V5ZnJhbWVNZXRhZGF0YSA9IHRoaXMua2V5ZnJhbWVzTWV0YWRhdGFbaV0gfHwge307XG4gICAgICAgIGlzSG9sZCA9IGtleURhdGEuaCA9PT0gMTtcbiAgICAgICAgaXRlcmF0aW9uSW5kZXggPSBpO1xuXG4gICAgICAgIGlmICghaXNIb2xkKSB7XG4gICAgICAgICAgaWYgKGZyYW1lTnVtID49IG5leHRLZXlEYXRhLnQgLSB0aGlzLm9mZnNldFRpbWUpIHtcbiAgICAgICAgICAgIHBlcmMgPSAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZnJhbWVOdW0gPCBrZXlEYXRhLnQgLSB0aGlzLm9mZnNldFRpbWUpIHtcbiAgICAgICAgICAgIHBlcmMgPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZm5jO1xuXG4gICAgICAgICAgICBpZiAoa2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3QpIHtcbiAgICAgICAgICAgICAgZm5jID0ga2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3Q7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmbmMgPSBCZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZyhrZXlEYXRhLm8ueCwga2V5RGF0YS5vLnksIGtleURhdGEuaS54LCBrZXlEYXRhLmkueSkuZ2V0O1xuICAgICAgICAgICAgICBrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdCA9IGZuYztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGVyYyA9IGZuYygoZnJhbWVOdW0gLSAoa2V5RGF0YS50IC0gdGhpcy5vZmZzZXRUaW1lKSkgLyAobmV4dEtleURhdGEudCAtIHRoaXMub2Zmc2V0VGltZSAtIChrZXlEYXRhLnQgLSB0aGlzLm9mZnNldFRpbWUpKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAga2V5UHJvcEUgPSBuZXh0S2V5RGF0YS5zID8gbmV4dEtleURhdGEuc1swXSA6IGtleURhdGEuZVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGtleVByb3BTID0ga2V5RGF0YS5zWzBdO1xuICAgICAgfVxuXG4gICAgICBqTGVuID0gcHJldmlvdXNWYWx1ZS5fbGVuZ3RoO1xuICAgICAga0xlbiA9IGtleVByb3BTLmlbMF0ubGVuZ3RoO1xuICAgICAgY2FjaGluZy5sYXN0SW5kZXggPSBpdGVyYXRpb25JbmRleDtcblxuICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwga0xlbjsgayArPSAxKSB7XG4gICAgICAgICAgdmVydGV4VmFsdWUgPSBpc0hvbGQgPyBrZXlQcm9wUy5pW2pdW2tdIDoga2V5UHJvcFMuaVtqXVtrXSArIChrZXlQcm9wRS5pW2pdW2tdIC0ga2V5UHJvcFMuaVtqXVtrXSkgKiBwZXJjO1xuICAgICAgICAgIHByZXZpb3VzVmFsdWUuaVtqXVtrXSA9IHZlcnRleFZhbHVlO1xuICAgICAgICAgIHZlcnRleFZhbHVlID0gaXNIb2xkID8ga2V5UHJvcFMub1tqXVtrXSA6IGtleVByb3BTLm9bal1ba10gKyAoa2V5UHJvcEUub1tqXVtrXSAtIGtleVByb3BTLm9bal1ba10pICogcGVyYztcbiAgICAgICAgICBwcmV2aW91c1ZhbHVlLm9bal1ba10gPSB2ZXJ0ZXhWYWx1ZTtcbiAgICAgICAgICB2ZXJ0ZXhWYWx1ZSA9IGlzSG9sZCA/IGtleVByb3BTLnZbal1ba10gOiBrZXlQcm9wUy52W2pdW2tdICsgKGtleVByb3BFLnZbal1ba10gLSBrZXlQcm9wUy52W2pdW2tdKSAqIHBlcmM7XG4gICAgICAgICAgcHJldmlvdXNWYWx1ZS52W2pdW2tdID0gdmVydGV4VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZVNoYXBlQ3VycmVudFRpbWUoKSB7XG4gICAgICB2YXIgZnJhbWVOdW0gPSB0aGlzLmNvbXAucmVuZGVyZWRGcmFtZSAtIHRoaXMub2Zmc2V0VGltZTtcbiAgICAgIHZhciBpbml0VGltZSA9IHRoaXMua2V5ZnJhbWVzWzBdLnQgLSB0aGlzLm9mZnNldFRpbWU7XG4gICAgICB2YXIgZW5kVGltZSA9IHRoaXMua2V5ZnJhbWVzW3RoaXMua2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQgLSB0aGlzLm9mZnNldFRpbWU7XG4gICAgICB2YXIgbGFzdEZyYW1lID0gdGhpcy5fY2FjaGluZy5sYXN0RnJhbWU7XG5cbiAgICAgIGlmICghKGxhc3RGcmFtZSAhPT0gaW5pdEZyYW1lICYmIChsYXN0RnJhbWUgPCBpbml0VGltZSAmJiBmcmFtZU51bSA8IGluaXRUaW1lIHx8IGxhc3RGcmFtZSA+IGVuZFRpbWUgJiYgZnJhbWVOdW0gPiBlbmRUaW1lKSkpIHtcbiAgICAgICAgLy8vIC9cbiAgICAgICAgdGhpcy5fY2FjaGluZy5sYXN0SW5kZXggPSBsYXN0RnJhbWUgPCBmcmFtZU51bSA/IHRoaXMuX2NhY2hpbmcubGFzdEluZGV4IDogMDtcbiAgICAgICAgdGhpcy5pbnRlcnBvbGF0ZVNoYXBlKGZyYW1lTnVtLCB0aGlzLnB2LCB0aGlzLl9jYWNoaW5nKTsgLy8vIC9cbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2FjaGluZy5sYXN0RnJhbWUgPSBmcmFtZU51bTtcbiAgICAgIHJldHVybiB0aGlzLnB2O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0U2hhcGUoKSB7XG4gICAgICB0aGlzLnBhdGhzID0gdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaGFwZXNFcXVhbChzaGFwZTEsIHNoYXBlMikge1xuICAgICAgaWYgKHNoYXBlMS5fbGVuZ3RoICE9PSBzaGFwZTIuX2xlbmd0aCB8fCBzaGFwZTEuYyAhPT0gc2hhcGUyLmMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzaGFwZTEuX2xlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzaGFwZTEudltpXVswXSAhPT0gc2hhcGUyLnZbaV1bMF0gfHwgc2hhcGUxLnZbaV1bMV0gIT09IHNoYXBlMi52W2ldWzFdIHx8IHNoYXBlMS5vW2ldWzBdICE9PSBzaGFwZTIub1tpXVswXSB8fCBzaGFwZTEub1tpXVsxXSAhPT0gc2hhcGUyLm9baV1bMV0gfHwgc2hhcGUxLmlbaV1bMF0gIT09IHNoYXBlMi5pW2ldWzBdIHx8IHNoYXBlMS5pW2ldWzFdICE9PSBzaGFwZTIuaVtpXVsxXSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRWVmFsdWUobmV3UGF0aCkge1xuICAgICAgaWYgKCFzaGFwZXNFcXVhbCh0aGlzLnYsIG5ld1BhdGgpKSB7XG4gICAgICAgIHRoaXMudiA9IHNoYXBlUG9vbC5jbG9uZShuZXdQYXRoKTtcbiAgICAgICAgdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7XG4gICAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24uYWRkU2hhcGUodGhpcy52KTtcbiAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wYXRocyA9IHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0VmZmVjdHNTZXF1ZW5jZSgpIHtcbiAgICAgIGlmICh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5sb2NrKSB7XG4gICAgICAgIHRoaXMuc2V0VlZhbHVlKHRoaXMucHYpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9jayA9IHRydWU7XG4gICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICAgIHZhciBmaW5hbFZhbHVlO1xuXG4gICAgICBpZiAodGhpcy5rZikge1xuICAgICAgICBmaW5hbFZhbHVlID0gdGhpcy5wdjtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLmtzKSB7XG4gICAgICAgIGZpbmFsVmFsdWUgPSB0aGlzLmRhdGEua3MuaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbmFsVmFsdWUgPSB0aGlzLmRhdGEucHQuaztcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgZmluYWxWYWx1ZSA9IHRoaXMuZWZmZWN0c1NlcXVlbmNlW2ldKGZpbmFsVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFZWYWx1ZShmaW5hbFZhbHVlKTtcbiAgICAgIHRoaXMubG9jayA9IGZhbHNlO1xuICAgICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBTaGFwZVByb3BlcnR5KGVsZW0sIGRhdGEsIHR5cGUpIHtcbiAgICAgIHRoaXMucHJvcFR5cGUgPSAnc2hhcGUnO1xuICAgICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgICAgdGhpcy5jb250YWluZXIgPSBlbGVtO1xuICAgICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICB0aGlzLmsgPSBmYWxzZTtcbiAgICAgIHRoaXMua2YgPSBmYWxzZTtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgICAgdmFyIHBhdGhEYXRhID0gdHlwZSA9PT0gMyA/IGRhdGEucHQuayA6IGRhdGEua3MuaztcbiAgICAgIHRoaXMudiA9IHNoYXBlUG9vbC5jbG9uZShwYXRoRGF0YSk7XG4gICAgICB0aGlzLnB2ID0gc2hhcGVQb29sLmNsb25lKHRoaXMudik7XG4gICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uID0gc2hhcGVDb2xsZWN0aW9uUG9vbC5uZXdTaGFwZUNvbGxlY3Rpb24oKTtcbiAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgdGhpcy5wYXRocy5hZGRTaGFwZSh0aGlzLnYpO1xuICAgICAgdGhpcy5yZXNldCA9IHJlc2V0U2hhcGU7XG4gICAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZSA9IFtdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEVmZmVjdChlZmZlY3RGdW5jdGlvbikge1xuICAgICAgdGhpcy5lZmZlY3RzU2VxdWVuY2UucHVzaChlZmZlY3RGdW5jdGlvbik7XG4gICAgICB0aGlzLmNvbnRhaW5lci5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7XG4gICAgfVxuXG4gICAgU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuaW50ZXJwb2xhdGVTaGFwZSA9IGludGVycG9sYXRlU2hhcGU7XG4gICAgU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlO1xuICAgIFNoYXBlUHJvcGVydHkucHJvdG90eXBlLnNldFZWYWx1ZSA9IHNldFZWYWx1ZTtcbiAgICBTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5hZGRFZmZlY3QgPSBhZGRFZmZlY3Q7XG5cbiAgICBmdW5jdGlvbiBLZXlmcmFtZWRTaGFwZVByb3BlcnR5KGVsZW0sIGRhdGEsIHR5cGUpIHtcbiAgICAgIHRoaXMucHJvcFR5cGUgPSAnc2hhcGUnO1xuICAgICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gZWxlbTtcbiAgICAgIHRoaXMub2Zmc2V0VGltZSA9IGVsZW0uZGF0YS5zdDtcbiAgICAgIHRoaXMua2V5ZnJhbWVzID0gdHlwZSA9PT0gMyA/IGRhdGEucHQuayA6IGRhdGEua3MuaztcbiAgICAgIHRoaXMua2V5ZnJhbWVzTWV0YWRhdGEgPSBbXTtcbiAgICAgIHRoaXMuayA9IHRydWU7XG4gICAgICB0aGlzLmtmID0gdHJ1ZTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmtleWZyYW1lc1swXS5zWzBdLmkubGVuZ3RoO1xuICAgICAgdGhpcy52ID0gc2hhcGVQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgIHRoaXMudi5zZXRQYXRoRGF0YSh0aGlzLmtleWZyYW1lc1swXS5zWzBdLmMsIGxlbik7XG4gICAgICB0aGlzLnB2ID0gc2hhcGVQb29sLmNsb25lKHRoaXMudik7XG4gICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uID0gc2hhcGVDb2xsZWN0aW9uUG9vbC5uZXdTaGFwZUNvbGxlY3Rpb24oKTtcbiAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgdGhpcy5wYXRocy5hZGRTaGFwZSh0aGlzLnYpO1xuICAgICAgdGhpcy5sYXN0RnJhbWUgPSBpbml0RnJhbWU7XG4gICAgICB0aGlzLnJlc2V0ID0gcmVzZXRTaGFwZTtcbiAgICAgIHRoaXMuX2NhY2hpbmcgPSB7XG4gICAgICAgIGxhc3RGcmFtZTogaW5pdEZyYW1lLFxuICAgICAgICBsYXN0SW5kZXg6IDBcbiAgICAgIH07XG4gICAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZSA9IFtpbnRlcnBvbGF0ZVNoYXBlQ3VycmVudFRpbWUuYmluZCh0aGlzKV07XG4gICAgfVxuXG4gICAgS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlO1xuICAgIEtleWZyYW1lZFNoYXBlUHJvcGVydHkucHJvdG90eXBlLmludGVycG9sYXRlU2hhcGUgPSBpbnRlcnBvbGF0ZVNoYXBlO1xuICAgIEtleWZyYW1lZFNoYXBlUHJvcGVydHkucHJvdG90eXBlLnNldFZWYWx1ZSA9IHNldFZWYWx1ZTtcbiAgICBLZXlmcmFtZWRTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5hZGRFZmZlY3QgPSBhZGRFZmZlY3Q7XG5cbiAgICB2YXIgRWxsU2hhcGVQcm9wZXJ0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjUG9pbnQgPSByb3VuZENvcm5lcjtcblxuICAgICAgZnVuY3Rpb24gRWxsU2hhcGVQcm9wZXJ0eUZhY3RvcnkoZWxlbSwgZGF0YSkge1xuICAgICAgICB0aGlzLnYgPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgICB0aGlzLnYuc2V0UGF0aERhdGEodHJ1ZSwgNCk7XG4gICAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpO1xuICAgICAgICB0aGlzLnBhdGhzID0gdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnYpO1xuICAgICAgICB0aGlzLmQgPSBkYXRhLmQ7XG4gICAgICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgICAgIHRoaXMuY29tcCA9IGVsZW0uY29tcDtcbiAgICAgICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICAgICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wLCAxLCAwLCB0aGlzKTtcbiAgICAgICAgdGhpcy5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zLCAxLCAwLCB0aGlzKTtcblxuICAgICAgICBpZiAodGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmsgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuayA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuY29udmVydEVsbFRvUGF0aCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIEVsbFNoYXBlUHJvcGVydHlGYWN0b3J5LnByb3RvdHlwZSA9IHtcbiAgICAgICAgcmVzZXQ6IHJlc2V0U2hhcGUsXG4gICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5mcmFtZUlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgICAgICAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX21kZikge1xuICAgICAgICAgICAgdGhpcy5jb252ZXJ0RWxsVG9QYXRoKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb252ZXJ0RWxsVG9QYXRoOiBmdW5jdGlvbiBjb252ZXJ0RWxsVG9QYXRoKCkge1xuICAgICAgICAgIHZhciBwMCA9IHRoaXMucC52WzBdO1xuICAgICAgICAgIHZhciBwMSA9IHRoaXMucC52WzFdO1xuICAgICAgICAgIHZhciBzMCA9IHRoaXMucy52WzBdIC8gMjtcbiAgICAgICAgICB2YXIgczEgPSB0aGlzLnMudlsxXSAvIDI7XG5cbiAgICAgICAgICB2YXIgX2N3ID0gdGhpcy5kICE9PSAzO1xuXG4gICAgICAgICAgdmFyIF92ID0gdGhpcy52O1xuICAgICAgICAgIF92LnZbMF1bMF0gPSBwMDtcbiAgICAgICAgICBfdi52WzBdWzFdID0gcDEgLSBzMTtcbiAgICAgICAgICBfdi52WzFdWzBdID0gX2N3ID8gcDAgKyBzMCA6IHAwIC0gczA7XG4gICAgICAgICAgX3YudlsxXVsxXSA9IHAxO1xuICAgICAgICAgIF92LnZbMl1bMF0gPSBwMDtcbiAgICAgICAgICBfdi52WzJdWzFdID0gcDEgKyBzMTtcbiAgICAgICAgICBfdi52WzNdWzBdID0gX2N3ID8gcDAgLSBzMCA6IHAwICsgczA7XG4gICAgICAgICAgX3YudlszXVsxXSA9IHAxO1xuICAgICAgICAgIF92LmlbMF1bMF0gPSBfY3cgPyBwMCAtIHMwICogY1BvaW50IDogcDAgKyBzMCAqIGNQb2ludDtcbiAgICAgICAgICBfdi5pWzBdWzFdID0gcDEgLSBzMTtcbiAgICAgICAgICBfdi5pWzFdWzBdID0gX2N3ID8gcDAgKyBzMCA6IHAwIC0gczA7XG4gICAgICAgICAgX3YuaVsxXVsxXSA9IHAxIC0gczEgKiBjUG9pbnQ7XG4gICAgICAgICAgX3YuaVsyXVswXSA9IF9jdyA/IHAwICsgczAgKiBjUG9pbnQgOiBwMCAtIHMwICogY1BvaW50O1xuICAgICAgICAgIF92LmlbMl1bMV0gPSBwMSArIHMxO1xuICAgICAgICAgIF92LmlbM11bMF0gPSBfY3cgPyBwMCAtIHMwIDogcDAgKyBzMDtcbiAgICAgICAgICBfdi5pWzNdWzFdID0gcDEgKyBzMSAqIGNQb2ludDtcbiAgICAgICAgICBfdi5vWzBdWzBdID0gX2N3ID8gcDAgKyBzMCAqIGNQb2ludCA6IHAwIC0gczAgKiBjUG9pbnQ7XG4gICAgICAgICAgX3Yub1swXVsxXSA9IHAxIC0gczE7XG4gICAgICAgICAgX3Yub1sxXVswXSA9IF9jdyA/IHAwICsgczAgOiBwMCAtIHMwO1xuICAgICAgICAgIF92Lm9bMV1bMV0gPSBwMSArIHMxICogY1BvaW50O1xuICAgICAgICAgIF92Lm9bMl1bMF0gPSBfY3cgPyBwMCAtIHMwICogY1BvaW50IDogcDAgKyBzMCAqIGNQb2ludDtcbiAgICAgICAgICBfdi5vWzJdWzFdID0gcDEgKyBzMTtcbiAgICAgICAgICBfdi5vWzNdWzBdID0gX2N3ID8gcDAgLSBzMCA6IHAwICsgczA7XG4gICAgICAgICAgX3Yub1szXVsxXSA9IHAxIC0gczEgKiBjUG9pbnQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIEVsbFNoYXBlUHJvcGVydHlGYWN0b3J5KTtcbiAgICAgIHJldHVybiBFbGxTaGFwZVByb3BlcnR5RmFjdG9yeTtcbiAgICB9KCk7XG5cbiAgICB2YXIgU3RhclNoYXBlUHJvcGVydHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBTdGFyU2hhcGVQcm9wZXJ0eUZhY3RvcnkoZWxlbSwgZGF0YSkge1xuICAgICAgICB0aGlzLnYgPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgICB0aGlzLnYuc2V0UGF0aERhdGEodHJ1ZSwgMCk7XG4gICAgICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgICAgIHRoaXMuY29tcCA9IGVsZW0uY29tcDtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgICAgIHRoaXMuZCA9IGRhdGEuZDtcbiAgICAgICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuXG4gICAgICAgIGlmIChkYXRhLnN5ID09PSAxKSB7XG4gICAgICAgICAgdGhpcy5pciA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuaXIsIDAsIDAsIHRoaXMpO1xuICAgICAgICAgIHRoaXMuaXMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmlzLCAwLCAwLjAxLCB0aGlzKTtcbiAgICAgICAgICB0aGlzLmNvbnZlcnRUb1BhdGggPSB0aGlzLmNvbnZlcnRTdGFyVG9QYXRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29udmVydFRvUGF0aCA9IHRoaXMuY29udmVydFBvbHlnb25Ub1BhdGg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnB0ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wdCwgMCwgMCwgdGhpcyk7XG4gICAgICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucCwgMSwgMCwgdGhpcyk7XG4gICAgICAgIHRoaXMuciA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuciwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICAgICAgdGhpcy5vciA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEub3IsIDAsIDAsIHRoaXMpO1xuICAgICAgICB0aGlzLm9zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vcywgMCwgMC4wMSwgdGhpcyk7XG4gICAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpO1xuICAgICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMudik7XG4gICAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuXG4gICAgICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuayA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5rID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5jb252ZXJ0VG9QYXRoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgU3RhclNoYXBlUHJvcGVydHlGYWN0b3J5LnByb3RvdHlwZSA9IHtcbiAgICAgICAgcmVzZXQ6IHJlc2V0U2hhcGUsXG4gICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5mcmFtZUlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgICAgICAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX21kZikge1xuICAgICAgICAgICAgdGhpcy5jb252ZXJ0VG9QYXRoKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb252ZXJ0U3RhclRvUGF0aDogZnVuY3Rpb24gY29udmVydFN0YXJUb1BhdGgoKSB7XG4gICAgICAgICAgdmFyIG51bVB0cyA9IE1hdGguZmxvb3IodGhpcy5wdC52KSAqIDI7XG4gICAgICAgICAgdmFyIGFuZ2xlID0gTWF0aC5QSSAqIDIgLyBudW1QdHM7XG4gICAgICAgICAgLyogdGhpcy52LnYubGVuZ3RoID0gbnVtUHRzO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnYuaS5sZW5ndGggPSBudW1QdHM7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMudi5vLmxlbmd0aCA9IG51bVB0czsgKi9cblxuICAgICAgICAgIHZhciBsb25nRmxhZyA9IHRydWU7XG4gICAgICAgICAgdmFyIGxvbmdSYWQgPSB0aGlzLm9yLnY7XG4gICAgICAgICAgdmFyIHNob3J0UmFkID0gdGhpcy5pci52O1xuICAgICAgICAgIHZhciBsb25nUm91bmQgPSB0aGlzLm9zLnY7XG4gICAgICAgICAgdmFyIHNob3J0Um91bmQgPSB0aGlzLmlzLnY7XG4gICAgICAgICAgdmFyIGxvbmdQZXJpbVNlZ21lbnQgPSAyICogTWF0aC5QSSAqIGxvbmdSYWQgLyAobnVtUHRzICogMik7XG4gICAgICAgICAgdmFyIHNob3J0UGVyaW1TZWdtZW50ID0gMiAqIE1hdGguUEkgKiBzaG9ydFJhZCAvIChudW1QdHMgKiAyKTtcbiAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICB2YXIgcmFkO1xuICAgICAgICAgIHZhciByb3VuZG5lc3M7XG4gICAgICAgICAgdmFyIHBlcmltU2VnbWVudDtcbiAgICAgICAgICB2YXIgY3VycmVudEFuZyA9IC1NYXRoLlBJIC8gMjtcbiAgICAgICAgICBjdXJyZW50QW5nICs9IHRoaXMuci52O1xuICAgICAgICAgIHZhciBkaXIgPSB0aGlzLmRhdGEuZCA9PT0gMyA/IC0xIDogMTtcbiAgICAgICAgICB0aGlzLnYuX2xlbmd0aCA9IDA7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtUHRzOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHJhZCA9IGxvbmdGbGFnID8gbG9uZ1JhZCA6IHNob3J0UmFkO1xuICAgICAgICAgICAgcm91bmRuZXNzID0gbG9uZ0ZsYWcgPyBsb25nUm91bmQgOiBzaG9ydFJvdW5kO1xuICAgICAgICAgICAgcGVyaW1TZWdtZW50ID0gbG9uZ0ZsYWcgPyBsb25nUGVyaW1TZWdtZW50IDogc2hvcnRQZXJpbVNlZ21lbnQ7XG4gICAgICAgICAgICB2YXIgeCA9IHJhZCAqIE1hdGguY29zKGN1cnJlbnRBbmcpO1xuICAgICAgICAgICAgdmFyIHkgPSByYWQgKiBNYXRoLnNpbihjdXJyZW50QW5nKTtcbiAgICAgICAgICAgIHZhciBveCA9IHggPT09IDAgJiYgeSA9PT0gMCA/IDAgOiB5IC8gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICAgICAgdmFyIG95ID0geCA9PT0gMCAmJiB5ID09PSAwID8gMCA6IC14IC8gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICAgICAgeCArPSArdGhpcy5wLnZbMF07XG4gICAgICAgICAgICB5ICs9ICt0aGlzLnAudlsxXTtcbiAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdCh4LCB5LCB4IC0gb3ggKiBwZXJpbVNlZ21lbnQgKiByb3VuZG5lc3MgKiBkaXIsIHkgLSBveSAqIHBlcmltU2VnbWVudCAqIHJvdW5kbmVzcyAqIGRpciwgeCArIG94ICogcGVyaW1TZWdtZW50ICogcm91bmRuZXNzICogZGlyLCB5ICsgb3kgKiBwZXJpbVNlZ21lbnQgKiByb3VuZG5lc3MgKiBkaXIsIGksIHRydWUpO1xuICAgICAgICAgICAgLyogdGhpcy52LnZbaV0gPSBbeCx5XTtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMudi5pW2ldID0gW3grb3gqcGVyaW1TZWdtZW50KnJvdW5kbmVzcypkaXIseStveSpwZXJpbVNlZ21lbnQqcm91bmRuZXNzKmRpcl07XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnYub1tpXSA9IFt4LW94KnBlcmltU2VnbWVudCpyb3VuZG5lc3MqZGlyLHktb3kqcGVyaW1TZWdtZW50KnJvdW5kbmVzcypkaXJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy52Ll9sZW5ndGggPSBudW1QdHM7ICovXG5cbiAgICAgICAgICAgIGxvbmdGbGFnID0gIWxvbmdGbGFnO1xuICAgICAgICAgICAgY3VycmVudEFuZyArPSBhbmdsZSAqIGRpcjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRQb2x5Z29uVG9QYXRoOiBmdW5jdGlvbiBjb252ZXJ0UG9seWdvblRvUGF0aCgpIHtcbiAgICAgICAgICB2YXIgbnVtUHRzID0gTWF0aC5mbG9vcih0aGlzLnB0LnYpO1xuICAgICAgICAgIHZhciBhbmdsZSA9IE1hdGguUEkgKiAyIC8gbnVtUHRzO1xuICAgICAgICAgIHZhciByYWQgPSB0aGlzLm9yLnY7XG4gICAgICAgICAgdmFyIHJvdW5kbmVzcyA9IHRoaXMub3MudjtcbiAgICAgICAgICB2YXIgcGVyaW1TZWdtZW50ID0gMiAqIE1hdGguUEkgKiByYWQgLyAobnVtUHRzICogNCk7XG4gICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgdmFyIGN1cnJlbnRBbmcgPSAtTWF0aC5QSSAqIDAuNTtcbiAgICAgICAgICB2YXIgZGlyID0gdGhpcy5kYXRhLmQgPT09IDMgPyAtMSA6IDE7XG4gICAgICAgICAgY3VycmVudEFuZyArPSB0aGlzLnIudjtcbiAgICAgICAgICB0aGlzLnYuX2xlbmd0aCA9IDA7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtUHRzOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciB4ID0gcmFkICogTWF0aC5jb3MoY3VycmVudEFuZyk7XG4gICAgICAgICAgICB2YXIgeSA9IHJhZCAqIE1hdGguc2luKGN1cnJlbnRBbmcpO1xuICAgICAgICAgICAgdmFyIG94ID0geCA9PT0gMCAmJiB5ID09PSAwID8gMCA6IHkgLyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgICAgICB2YXIgb3kgPSB4ID09PSAwICYmIHkgPT09IDAgPyAwIDogLXggLyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgICAgICB4ICs9ICt0aGlzLnAudlswXTtcbiAgICAgICAgICAgIHkgKz0gK3RoaXMucC52WzFdO1xuICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHgsIHksIHggLSBveCAqIHBlcmltU2VnbWVudCAqIHJvdW5kbmVzcyAqIGRpciwgeSAtIG95ICogcGVyaW1TZWdtZW50ICogcm91bmRuZXNzICogZGlyLCB4ICsgb3ggKiBwZXJpbVNlZ21lbnQgKiByb3VuZG5lc3MgKiBkaXIsIHkgKyBveSAqIHBlcmltU2VnbWVudCAqIHJvdW5kbmVzcyAqIGRpciwgaSwgdHJ1ZSk7XG4gICAgICAgICAgICBjdXJyZW50QW5nICs9IGFuZ2xlICogZGlyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMucGF0aHMubGVuZ3RoID0gMDtcbiAgICAgICAgICB0aGlzLnBhdGhzWzBdID0gdGhpcy52O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBTdGFyU2hhcGVQcm9wZXJ0eUZhY3RvcnkpO1xuICAgICAgcmV0dXJuIFN0YXJTaGFwZVByb3BlcnR5RmFjdG9yeTtcbiAgICB9KCk7XG5cbiAgICB2YXIgUmVjdFNoYXBlUHJvcGVydHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBSZWN0U2hhcGVQcm9wZXJ0eUZhY3RvcnkoZWxlbSwgZGF0YSkge1xuICAgICAgICB0aGlzLnYgPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgICB0aGlzLnYuYyA9IHRydWU7XG4gICAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpO1xuICAgICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMudik7XG4gICAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgICAgICB0aGlzLmNvbXAgPSBlbGVtLmNvbXA7XG4gICAgICAgIHRoaXMuZnJhbWVJZCA9IC0xO1xuICAgICAgICB0aGlzLmQgPSBkYXRhLmQ7XG4gICAgICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICAgICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wLCAxLCAwLCB0aGlzKTtcbiAgICAgICAgdGhpcy5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zLCAxLCAwLCB0aGlzKTtcbiAgICAgICAgdGhpcy5yID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5yLCAwLCAwLCB0aGlzKTtcblxuICAgICAgICBpZiAodGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmsgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuayA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuY29udmVydFJlY3RUb1BhdGgoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBSZWN0U2hhcGVQcm9wZXJ0eUZhY3RvcnkucHJvdG90eXBlID0ge1xuICAgICAgICBjb252ZXJ0UmVjdFRvUGF0aDogZnVuY3Rpb24gY29udmVydFJlY3RUb1BhdGgoKSB7XG4gICAgICAgICAgdmFyIHAwID0gdGhpcy5wLnZbMF07XG4gICAgICAgICAgdmFyIHAxID0gdGhpcy5wLnZbMV07XG4gICAgICAgICAgdmFyIHYwID0gdGhpcy5zLnZbMF0gLyAyO1xuICAgICAgICAgIHZhciB2MSA9IHRoaXMucy52WzFdIC8gMjtcbiAgICAgICAgICB2YXIgcm91bmQgPSBibU1pbih2MCwgdjEsIHRoaXMuci52KTtcbiAgICAgICAgICB2YXIgY1BvaW50ID0gcm91bmQgKiAoMSAtIHJvdW5kQ29ybmVyKTtcbiAgICAgICAgICB0aGlzLnYuX2xlbmd0aCA9IDA7XG5cbiAgICAgICAgICBpZiAodGhpcy5kID09PSAyIHx8IHRoaXMuZCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwICsgdjAsIHAxIC0gdjEgKyByb3VuZCwgcDAgKyB2MCwgcDEgLSB2MSArIHJvdW5kLCBwMCArIHYwLCBwMSAtIHYxICsgY1BvaW50LCAwLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCArIHYwLCBwMSArIHYxIC0gcm91bmQsIHAwICsgdjAsIHAxICsgdjEgLSBjUG9pbnQsIHAwICsgdjAsIHAxICsgdjEgLSByb3VuZCwgMSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChyb3VuZCAhPT0gMCkge1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCAtIHJvdW5kLCBwMSArIHYxLCBwMCArIHYwIC0gcm91bmQsIHAxICsgdjEsIHAwICsgdjAgLSBjUG9pbnQsIHAxICsgdjEsIDIsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCArIHJvdW5kLCBwMSArIHYxLCBwMCAtIHYwICsgY1BvaW50LCBwMSArIHYxLCBwMCAtIHYwICsgcm91bmQsIHAxICsgdjEsIDMsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgKyB2MSAtIHJvdW5kLCBwMCAtIHYwLCBwMSArIHYxIC0gcm91bmQsIHAwIC0gdjAsIHAxICsgdjEgLSBjUG9pbnQsIDQsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgLSB2MSArIHJvdW5kLCBwMCAtIHYwLCBwMSAtIHYxICsgY1BvaW50LCBwMCAtIHYwLCBwMSAtIHYxICsgcm91bmQsIDUsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCArIHJvdW5kLCBwMSAtIHYxLCBwMCAtIHYwICsgcm91bmQsIHAxIC0gdjEsIHAwIC0gdjAgKyBjUG9pbnQsIHAxIC0gdjEsIDYsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCAtIHJvdW5kLCBwMSAtIHYxLCBwMCArIHYwIC0gY1BvaW50LCBwMSAtIHYxLCBwMCArIHYwIC0gcm91bmQsIHAxIC0gdjEsIDcsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAsIHAxICsgdjEsIHAwIC0gdjAgKyBjUG9pbnQsIHAxICsgdjEsIHAwIC0gdjAsIHAxICsgdjEsIDIpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgLSB2MSwgcDAgLSB2MCwgcDEgLSB2MSArIGNQb2ludCwgcDAgLSB2MCwgcDEgLSB2MSwgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCArIHYwLCBwMSAtIHYxICsgcm91bmQsIHAwICsgdjAsIHAxIC0gdjEgKyBjUG9pbnQsIHAwICsgdjAsIHAxIC0gdjEgKyByb3VuZCwgMCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChyb3VuZCAhPT0gMCkge1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCAtIHJvdW5kLCBwMSAtIHYxLCBwMCArIHYwIC0gcm91bmQsIHAxIC0gdjEsIHAwICsgdjAgLSBjUG9pbnQsIHAxIC0gdjEsIDEsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCArIHJvdW5kLCBwMSAtIHYxLCBwMCAtIHYwICsgY1BvaW50LCBwMSAtIHYxLCBwMCAtIHYwICsgcm91bmQsIHAxIC0gdjEsIDIsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgLSB2MSArIHJvdW5kLCBwMCAtIHYwLCBwMSAtIHYxICsgcm91bmQsIHAwIC0gdjAsIHAxIC0gdjEgKyBjUG9pbnQsIDMsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgKyB2MSAtIHJvdW5kLCBwMCAtIHYwLCBwMSArIHYxIC0gY1BvaW50LCBwMCAtIHYwLCBwMSArIHYxIC0gcm91bmQsIDQsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCArIHJvdW5kLCBwMSArIHYxLCBwMCAtIHYwICsgcm91bmQsIHAxICsgdjEsIHAwIC0gdjAgKyBjUG9pbnQsIHAxICsgdjEsIDUsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCAtIHJvdW5kLCBwMSArIHYxLCBwMCArIHYwIC0gY1BvaW50LCBwMSArIHYxLCBwMCArIHYwIC0gcm91bmQsIHAxICsgdjEsIDYsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCwgcDEgKyB2MSAtIHJvdW5kLCBwMCArIHYwLCBwMSArIHYxIC0gcm91bmQsIHAwICsgdjAsIHAxICsgdjEgLSBjUG9pbnQsIDcsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAsIHAxIC0gdjEsIHAwIC0gdjAgKyBjUG9pbnQsIHAxIC0gdjEsIHAwIC0gdjAsIHAxIC0gdjEsIDEsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgKyB2MSwgcDAgLSB2MCwgcDEgKyB2MSAtIGNQb2ludCwgcDAgLSB2MCwgcDEgKyB2MSwgMiwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCArIHYwLCBwMSArIHYxLCBwMCArIHYwIC0gY1BvaW50LCBwMSArIHYxLCBwMCArIHYwLCBwMSArIHYxLCAzLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5mcmFtZUlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgICAgICAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX21kZikge1xuICAgICAgICAgICAgdGhpcy5jb252ZXJ0UmVjdFRvUGF0aCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQ6IHJlc2V0U2hhcGVcbiAgICAgIH07XG4gICAgICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFJlY3RTaGFwZVByb3BlcnR5RmFjdG9yeSk7XG4gICAgICByZXR1cm4gUmVjdFNoYXBlUHJvcGVydHlGYWN0b3J5O1xuICAgIH0oKTtcblxuICAgIGZ1bmN0aW9uIGdldFNoYXBlUHJvcChlbGVtLCBkYXRhLCB0eXBlKSB7XG4gICAgICB2YXIgcHJvcDtcblxuICAgICAgaWYgKHR5cGUgPT09IDMgfHwgdHlwZSA9PT0gNCkge1xuICAgICAgICB2YXIgZGF0YVByb3AgPSB0eXBlID09PSAzID8gZGF0YS5wdCA6IGRhdGEua3M7XG4gICAgICAgIHZhciBrZXlzID0gZGF0YVByb3AuaztcblxuICAgICAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICBwcm9wID0gbmV3IEtleWZyYW1lZFNoYXBlUHJvcGVydHkoZWxlbSwgZGF0YSwgdHlwZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvcCA9IG5ldyBTaGFwZVByb3BlcnR5KGVsZW0sIGRhdGEsIHR5cGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDUpIHtcbiAgICAgICAgcHJvcCA9IG5ldyBSZWN0U2hhcGVQcm9wZXJ0eShlbGVtLCBkYXRhKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gNikge1xuICAgICAgICBwcm9wID0gbmV3IEVsbFNoYXBlUHJvcGVydHkoZWxlbSwgZGF0YSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDcpIHtcbiAgICAgICAgcHJvcCA9IG5ldyBTdGFyU2hhcGVQcm9wZXJ0eShlbGVtLCBkYXRhKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3Auaykge1xuICAgICAgICBlbGVtLmFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29uc3RydWN0b3JGdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBTaGFwZVByb3BlcnR5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEtleWZyYW1lZENvbnN0cnVjdG9yRnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eTtcbiAgICB9XG5cbiAgICB2YXIgb2IgPSB7fTtcbiAgICBvYi5nZXRTaGFwZVByb3AgPSBnZXRTaGFwZVByb3A7XG4gICAgb2IuZ2V0Q29uc3RydWN0b3JGdW5jdGlvbiA9IGdldENvbnN0cnVjdG9yRnVuY3Rpb247XG4gICAgb2IuZ2V0S2V5ZnJhbWVkQ29uc3RydWN0b3JGdW5jdGlvbiA9IGdldEtleWZyYW1lZENvbnN0cnVjdG9yRnVuY3Rpb247XG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgLyohXHJcbiAgIFRyYW5zZm9ybWF0aW9uIE1hdHJpeCB2Mi4wXHJcbiAgIChjKSBFcGlzdGVtZXggMjAxNC0yMDE1XHJcbiAgIHd3dy5lcGlzdGVtZXguY29tXHJcbiAgIEJ5IEtlbiBGeXJzdGVuYmVyZ1xyXG4gICBDb250cmlidXRpb25zIGJ5IGxlZW9uaXlhLlxyXG4gICBMaWNlbnNlOiBNSVQsIGhlYWRlciByZXF1aXJlZC5cclxuICAgKi9cblxuICAvKipcclxuICAgKiAyRCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggb2JqZWN0IGluaXRpYWxpemVkIHdpdGggaWRlbnRpdHkgbWF0cml4LlxyXG4gICAqXHJcbiAgICogVGhlIG1hdHJpeCBjYW4gc3luY2hyb25pemUgYSBjYW52YXMgY29udGV4dCBieSBzdXBwbHlpbmcgdGhlIGNvbnRleHRcclxuICAgKiBhcyBhbiBhcmd1bWVudCwgb3IgbGF0ZXIgYXBwbHkgY3VycmVudCBhYnNvbHV0ZSB0cmFuc2Zvcm0gdG8gYW5cclxuICAgKiBleGlzdGluZyBjb250ZXh0LlxyXG4gICAqXHJcbiAgICogQWxsIHZhbHVlcyBhcmUgaGFuZGxlZCBhcyBmbG9hdGluZyBwb2ludCB2YWx1ZXMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gW2NvbnRleHRdIC0gT3B0aW9uYWwgY29udGV4dCB0byBzeW5jIHdpdGggTWF0cml4XHJcbiAgICogQHByb3Age251bWJlcn0gYSAtIHNjYWxlIHhcclxuICAgKiBAcHJvcCB7bnVtYmVyfSBiIC0gc2hlYXIgeVxyXG4gICAqIEBwcm9wIHtudW1iZXJ9IGMgLSBzaGVhciB4XHJcbiAgICogQHByb3Age251bWJlcn0gZCAtIHNjYWxlIHlcclxuICAgKiBAcHJvcCB7bnVtYmVyfSBlIC0gdHJhbnNsYXRlIHhcclxuICAgKiBAcHJvcCB7bnVtYmVyfSBmIC0gdHJhbnNsYXRlIHlcclxuICAgKiBAcHJvcCB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfG51bGx9IFtjb250ZXh0PW51bGxdIC0gc2V0IG9yIGdldCBjdXJyZW50IGNhbnZhcyBjb250ZXh0XHJcbiAgICogQGNvbnN0cnVjdG9yXHJcbiAgICovXG5cbiAgdmFyIE1hdHJpeCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2NvcyA9IE1hdGguY29zO1xuICAgIHZhciBfc2luID0gTWF0aC5zaW47XG4gICAgdmFyIF90YW4gPSBNYXRoLnRhbjtcbiAgICB2YXIgX3JuZCA9IE1hdGgucm91bmQ7XG5cbiAgICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHRoaXMucHJvcHNbMF0gPSAxO1xuICAgICAgdGhpcy5wcm9wc1sxXSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzJdID0gMDtcbiAgICAgIHRoaXMucHJvcHNbM10gPSAwO1xuICAgICAgdGhpcy5wcm9wc1s0XSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzVdID0gMTtcbiAgICAgIHRoaXMucHJvcHNbNl0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1s3XSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzhdID0gMDtcbiAgICAgIHRoaXMucHJvcHNbOV0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1sxMF0gPSAxO1xuICAgICAgdGhpcy5wcm9wc1sxMV0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1sxMl0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1sxM10gPSAwO1xuICAgICAgdGhpcy5wcm9wc1sxNF0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1sxNV0gPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcm90YXRlKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBtQ29zID0gX2NvcyhhbmdsZSk7XG5cbiAgICAgIHZhciBtU2luID0gX3NpbihhbmdsZSk7XG5cbiAgICAgIHJldHVybiB0aGlzLl90KG1Db3MsIC1tU2luLCAwLCAwLCBtU2luLCBtQ29zLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3RhdGVYKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBtQ29zID0gX2NvcyhhbmdsZSk7XG5cbiAgICAgIHZhciBtU2luID0gX3NpbihhbmdsZSk7XG5cbiAgICAgIHJldHVybiB0aGlzLl90KDEsIDAsIDAsIDAsIDAsIG1Db3MsIC1tU2luLCAwLCAwLCBtU2luLCBtQ29zLCAwLCAwLCAwLCAwLCAxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3RhdGVZKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBtQ29zID0gX2NvcyhhbmdsZSk7XG5cbiAgICAgIHZhciBtU2luID0gX3NpbihhbmdsZSk7XG5cbiAgICAgIHJldHVybiB0aGlzLl90KG1Db3MsIDAsIG1TaW4sIDAsIDAsIDEsIDAsIDAsIC1tU2luLCAwLCBtQ29zLCAwLCAwLCAwLCAwLCAxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3RhdGVaKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBtQ29zID0gX2NvcyhhbmdsZSk7XG5cbiAgICAgIHZhciBtU2luID0gX3NpbihhbmdsZSk7XG5cbiAgICAgIHJldHVybiB0aGlzLl90KG1Db3MsIC1tU2luLCAwLCAwLCBtU2luLCBtQ29zLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaGVhcihzeCwgc3kpIHtcbiAgICAgIHJldHVybiB0aGlzLl90KDEsIHN5LCBzeCwgMSwgMCwgMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2tldyhheCwgYXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNoZWFyKF90YW4oYXgpLCBfdGFuKGF5KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2tld0Zyb21BeGlzKGF4LCBhbmdsZSkge1xuICAgICAgdmFyIG1Db3MgPSBfY29zKGFuZ2xlKTtcblxuICAgICAgdmFyIG1TaW4gPSBfc2luKGFuZ2xlKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3QobUNvcywgbVNpbiwgMCwgMCwgLW1TaW4sIG1Db3MsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEpLl90KDEsIDAsIDAsIDAsIF90YW4oYXgpLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxKS5fdChtQ29zLCAtbVNpbiwgMCwgMCwgbVNpbiwgbUNvcywgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSk7IC8vIHJldHVybiB0aGlzLl90KG1Db3MsIG1TaW4sIC1tU2luLCBtQ29zLCAwLCAwKS5fdCgxLCAwLCBfdGFuKGF4KSwgMSwgMCwgMCkuX3QobUNvcywgLW1TaW4sIG1TaW4sIG1Db3MsIDAsIDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlKHN4LCBzeSwgc3opIHtcbiAgICAgIGlmICghc3ogJiYgc3ogIT09IDApIHtcbiAgICAgICAgc3ogPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ggPT09IDEgJiYgc3kgPT09IDEgJiYgc3ogPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl90KHN4LCAwLCAwLCAwLCAwLCBzeSwgMCwgMCwgMCwgMCwgc3osIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmLCBnLCBoLCBpLCBqLCBrLCBsLCBtLCBuLCBvLCBwKSB7XG4gICAgICB0aGlzLnByb3BzWzBdID0gYTtcbiAgICAgIHRoaXMucHJvcHNbMV0gPSBiO1xuICAgICAgdGhpcy5wcm9wc1syXSA9IGM7XG4gICAgICB0aGlzLnByb3BzWzNdID0gZDtcbiAgICAgIHRoaXMucHJvcHNbNF0gPSBlO1xuICAgICAgdGhpcy5wcm9wc1s1XSA9IGY7XG4gICAgICB0aGlzLnByb3BzWzZdID0gZztcbiAgICAgIHRoaXMucHJvcHNbN10gPSBoO1xuICAgICAgdGhpcy5wcm9wc1s4XSA9IGk7XG4gICAgICB0aGlzLnByb3BzWzldID0gajtcbiAgICAgIHRoaXMucHJvcHNbMTBdID0gaztcbiAgICAgIHRoaXMucHJvcHNbMTFdID0gbDtcbiAgICAgIHRoaXMucHJvcHNbMTJdID0gbTtcbiAgICAgIHRoaXMucHJvcHNbMTNdID0gbjtcbiAgICAgIHRoaXMucHJvcHNbMTRdID0gbztcbiAgICAgIHRoaXMucHJvcHNbMTVdID0gcDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZSh0eCwgdHksIHR6KSB7XG4gICAgICB0eiA9IHR6IHx8IDA7XG5cbiAgICAgIGlmICh0eCAhPT0gMCB8fCB0eSAhPT0gMCB8fCB0eiAhPT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdCgxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCB0eCwgdHksIHR6LCAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKGEyLCBiMiwgYzIsIGQyLCBlMiwgZjIsIGcyLCBoMiwgaTIsIGoyLCBrMiwgbDIsIG0yLCBuMiwgbzIsIHAyKSB7XG4gICAgICB2YXIgX3AgPSB0aGlzLnByb3BzO1xuXG4gICAgICBpZiAoYTIgPT09IDEgJiYgYjIgPT09IDAgJiYgYzIgPT09IDAgJiYgZDIgPT09IDAgJiYgZTIgPT09IDAgJiYgZjIgPT09IDEgJiYgZzIgPT09IDAgJiYgaDIgPT09IDAgJiYgaTIgPT09IDAgJiYgajIgPT09IDAgJiYgazIgPT09IDEgJiYgbDIgPT09IDApIHtcbiAgICAgICAgLy8gTk9URTogY29tbWVudGluZyB0aGlzIGNvbmRpdGlvbiBiZWNhdXNlIFR1cmJvRmFuIGRlb3B0aW1pemVzIGNvZGUgd2hlbiBwcmVzZW50XG4gICAgICAgIC8vIGlmKG0yICE9PSAwIHx8IG4yICE9PSAwIHx8IG8yICE9PSAwKXtcbiAgICAgICAgX3BbMTJdID0gX3BbMTJdICogYTIgKyBfcFsxNV0gKiBtMjtcbiAgICAgICAgX3BbMTNdID0gX3BbMTNdICogZjIgKyBfcFsxNV0gKiBuMjtcbiAgICAgICAgX3BbMTRdID0gX3BbMTRdICogazIgKyBfcFsxNV0gKiBvMjtcbiAgICAgICAgX3BbMTVdICo9IHAyOyAvLyB9XG5cbiAgICAgICAgdGhpcy5faWRlbnRpdHlDYWxjdWxhdGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgYTEgPSBfcFswXTtcbiAgICAgIHZhciBiMSA9IF9wWzFdO1xuICAgICAgdmFyIGMxID0gX3BbMl07XG4gICAgICB2YXIgZDEgPSBfcFszXTtcbiAgICAgIHZhciBlMSA9IF9wWzRdO1xuICAgICAgdmFyIGYxID0gX3BbNV07XG4gICAgICB2YXIgZzEgPSBfcFs2XTtcbiAgICAgIHZhciBoMSA9IF9wWzddO1xuICAgICAgdmFyIGkxID0gX3BbOF07XG4gICAgICB2YXIgajEgPSBfcFs5XTtcbiAgICAgIHZhciBrMSA9IF9wWzEwXTtcbiAgICAgIHZhciBsMSA9IF9wWzExXTtcbiAgICAgIHZhciBtMSA9IF9wWzEyXTtcbiAgICAgIHZhciBuMSA9IF9wWzEzXTtcbiAgICAgIHZhciBvMSA9IF9wWzE0XTtcbiAgICAgIHZhciBwMSA9IF9wWzE1XTtcbiAgICAgIC8qIG1hdHJpeCBvcmRlciAoY2FudmFzIGNvbXBhdGlibGUpOlxyXG4gICAgICAgICAgICogYWNlXHJcbiAgICAgICAgICAgKiBiZGZcclxuICAgICAgICAgICAqIDAwMVxyXG4gICAgICAgICAgICovXG5cbiAgICAgIF9wWzBdID0gYTEgKiBhMiArIGIxICogZTIgKyBjMSAqIGkyICsgZDEgKiBtMjtcbiAgICAgIF9wWzFdID0gYTEgKiBiMiArIGIxICogZjIgKyBjMSAqIGoyICsgZDEgKiBuMjtcbiAgICAgIF9wWzJdID0gYTEgKiBjMiArIGIxICogZzIgKyBjMSAqIGsyICsgZDEgKiBvMjtcbiAgICAgIF9wWzNdID0gYTEgKiBkMiArIGIxICogaDIgKyBjMSAqIGwyICsgZDEgKiBwMjtcbiAgICAgIF9wWzRdID0gZTEgKiBhMiArIGYxICogZTIgKyBnMSAqIGkyICsgaDEgKiBtMjtcbiAgICAgIF9wWzVdID0gZTEgKiBiMiArIGYxICogZjIgKyBnMSAqIGoyICsgaDEgKiBuMjtcbiAgICAgIF9wWzZdID0gZTEgKiBjMiArIGYxICogZzIgKyBnMSAqIGsyICsgaDEgKiBvMjtcbiAgICAgIF9wWzddID0gZTEgKiBkMiArIGYxICogaDIgKyBnMSAqIGwyICsgaDEgKiBwMjtcbiAgICAgIF9wWzhdID0gaTEgKiBhMiArIGoxICogZTIgKyBrMSAqIGkyICsgbDEgKiBtMjtcbiAgICAgIF9wWzldID0gaTEgKiBiMiArIGoxICogZjIgKyBrMSAqIGoyICsgbDEgKiBuMjtcbiAgICAgIF9wWzEwXSA9IGkxICogYzIgKyBqMSAqIGcyICsgazEgKiBrMiArIGwxICogbzI7XG4gICAgICBfcFsxMV0gPSBpMSAqIGQyICsgajEgKiBoMiArIGsxICogbDIgKyBsMSAqIHAyO1xuICAgICAgX3BbMTJdID0gbTEgKiBhMiArIG4xICogZTIgKyBvMSAqIGkyICsgcDEgKiBtMjtcbiAgICAgIF9wWzEzXSA9IG0xICogYjIgKyBuMSAqIGYyICsgbzEgKiBqMiArIHAxICogbjI7XG4gICAgICBfcFsxNF0gPSBtMSAqIGMyICsgbjEgKiBnMiArIG8xICogazIgKyBwMSAqIG8yO1xuICAgICAgX3BbMTVdID0gbTEgKiBkMiArIG4xICogaDIgKyBvMSAqIGwyICsgcDEgKiBwMjtcbiAgICAgIHRoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbXVsdGlwbHkobWF0cml4KSB7XG4gICAgICB2YXIgbWF0cml4UHJvcHMgPSBtYXRyaXgucHJvcHM7XG4gICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0obWF0cml4UHJvcHNbMF0sIG1hdHJpeFByb3BzWzFdLCBtYXRyaXhQcm9wc1syXSwgbWF0cml4UHJvcHNbM10sIG1hdHJpeFByb3BzWzRdLCBtYXRyaXhQcm9wc1s1XSwgbWF0cml4UHJvcHNbNl0sIG1hdHJpeFByb3BzWzddLCBtYXRyaXhQcm9wc1s4XSwgbWF0cml4UHJvcHNbOV0sIG1hdHJpeFByb3BzWzEwXSwgbWF0cml4UHJvcHNbMTFdLCBtYXRyaXhQcm9wc1sxMl0sIG1hdHJpeFByb3BzWzEzXSwgbWF0cml4UHJvcHNbMTRdLCBtYXRyaXhQcm9wc1sxNV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWRlbnRpdHkoKSB7XG4gICAgICBpZiAoIXRoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZCkge1xuICAgICAgICB0aGlzLl9pZGVudGl0eSA9ICEodGhpcy5wcm9wc1swXSAhPT0gMSB8fCB0aGlzLnByb3BzWzFdICE9PSAwIHx8IHRoaXMucHJvcHNbMl0gIT09IDAgfHwgdGhpcy5wcm9wc1szXSAhPT0gMCB8fCB0aGlzLnByb3BzWzRdICE9PSAwIHx8IHRoaXMucHJvcHNbNV0gIT09IDEgfHwgdGhpcy5wcm9wc1s2XSAhPT0gMCB8fCB0aGlzLnByb3BzWzddICE9PSAwIHx8IHRoaXMucHJvcHNbOF0gIT09IDAgfHwgdGhpcy5wcm9wc1s5XSAhPT0gMCB8fCB0aGlzLnByb3BzWzEwXSAhPT0gMSB8fCB0aGlzLnByb3BzWzExXSAhPT0gMCB8fCB0aGlzLnByb3BzWzEyXSAhPT0gMCB8fCB0aGlzLnByb3BzWzEzXSAhPT0gMCB8fCB0aGlzLnByb3BzWzE0XSAhPT0gMCB8fCB0aGlzLnByb3BzWzE1XSAhPT0gMSk7XG4gICAgICAgIHRoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9pZGVudGl0eTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcXVhbHMobWF0cikge1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB3aGlsZSAoaSA8IDE2KSB7XG4gICAgICAgIGlmIChtYXRyLnByb3BzW2ldICE9PSB0aGlzLnByb3BzW2ldKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZShtYXRyKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IDE2OyBpICs9IDEpIHtcbiAgICAgICAgbWF0ci5wcm9wc1tpXSA9IHRoaXMucHJvcHNbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lRnJvbVByb3BzKHByb3BzKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IDE2OyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5wcm9wc1tpXSA9IHByb3BzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5VG9Qb2ludCh4LCB5LCB6KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiB4ICogdGhpcy5wcm9wc1swXSArIHkgKiB0aGlzLnByb3BzWzRdICsgeiAqIHRoaXMucHJvcHNbOF0gKyB0aGlzLnByb3BzWzEyXSxcbiAgICAgICAgeTogeCAqIHRoaXMucHJvcHNbMV0gKyB5ICogdGhpcy5wcm9wc1s1XSArIHogKiB0aGlzLnByb3BzWzldICsgdGhpcy5wcm9wc1sxM10sXG4gICAgICAgIHo6IHggKiB0aGlzLnByb3BzWzJdICsgeSAqIHRoaXMucHJvcHNbNl0gKyB6ICogdGhpcy5wcm9wc1sxMF0gKyB0aGlzLnByb3BzWzE0XVxuICAgICAgfTtcbiAgICAgIC8qIHJldHVybiB7XHJcbiAgICAgICAgICAgeDogeCAqIG1lLmEgKyB5ICogbWUuYyArIG1lLmUsXHJcbiAgICAgICAgICAgeTogeCAqIG1lLmIgKyB5ICogbWUuZCArIG1lLmZcclxuICAgICAgICAgICB9OyAqL1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5VG9YKHgsIHksIHopIHtcbiAgICAgIHJldHVybiB4ICogdGhpcy5wcm9wc1swXSArIHkgKiB0aGlzLnByb3BzWzRdICsgeiAqIHRoaXMucHJvcHNbOF0gKyB0aGlzLnByb3BzWzEyXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVRvWSh4LCB5LCB6KSB7XG4gICAgICByZXR1cm4geCAqIHRoaXMucHJvcHNbMV0gKyB5ICogdGhpcy5wcm9wc1s1XSArIHogKiB0aGlzLnByb3BzWzldICsgdGhpcy5wcm9wc1sxM107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlUb1ooeCwgeSwgeikge1xuICAgICAgcmV0dXJuIHggKiB0aGlzLnByb3BzWzJdICsgeSAqIHRoaXMucHJvcHNbNl0gKyB6ICogdGhpcy5wcm9wc1sxMF0gKyB0aGlzLnByb3BzWzE0XTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJbnZlcnNlTWF0cml4KCkge1xuICAgICAgdmFyIGRldGVybWluYW50ID0gdGhpcy5wcm9wc1swXSAqIHRoaXMucHJvcHNbNV0gLSB0aGlzLnByb3BzWzFdICogdGhpcy5wcm9wc1s0XTtcbiAgICAgIHZhciBhID0gdGhpcy5wcm9wc1s1XSAvIGRldGVybWluYW50O1xuICAgICAgdmFyIGIgPSAtdGhpcy5wcm9wc1sxXSAvIGRldGVybWluYW50O1xuICAgICAgdmFyIGMgPSAtdGhpcy5wcm9wc1s0XSAvIGRldGVybWluYW50O1xuICAgICAgdmFyIGQgPSB0aGlzLnByb3BzWzBdIC8gZGV0ZXJtaW5hbnQ7XG4gICAgICB2YXIgZSA9ICh0aGlzLnByb3BzWzRdICogdGhpcy5wcm9wc1sxM10gLSB0aGlzLnByb3BzWzVdICogdGhpcy5wcm9wc1sxMl0pIC8gZGV0ZXJtaW5hbnQ7XG4gICAgICB2YXIgZiA9IC0odGhpcy5wcm9wc1swXSAqIHRoaXMucHJvcHNbMTNdIC0gdGhpcy5wcm9wc1sxXSAqIHRoaXMucHJvcHNbMTJdKSAvIGRldGVybWluYW50O1xuICAgICAgdmFyIGludmVyc2VNYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgICBpbnZlcnNlTWF0cml4LnByb3BzWzBdID0gYTtcbiAgICAgIGludmVyc2VNYXRyaXgucHJvcHNbMV0gPSBiO1xuICAgICAgaW52ZXJzZU1hdHJpeC5wcm9wc1s0XSA9IGM7XG4gICAgICBpbnZlcnNlTWF0cml4LnByb3BzWzVdID0gZDtcbiAgICAgIGludmVyc2VNYXRyaXgucHJvcHNbMTJdID0gZTtcbiAgICAgIGludmVyc2VNYXRyaXgucHJvcHNbMTNdID0gZjtcbiAgICAgIHJldHVybiBpbnZlcnNlTWF0cml4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmVyc2VQb2ludChwdCkge1xuICAgICAgdmFyIGludmVyc2VNYXRyaXggPSB0aGlzLmdldEludmVyc2VNYXRyaXgoKTtcbiAgICAgIHJldHVybiBpbnZlcnNlTWF0cml4LmFwcGx5VG9Qb2ludEFycmF5KHB0WzBdLCBwdFsxXSwgcHRbMl0gfHwgMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52ZXJzZVBvaW50cyhwdHMpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHB0cy5sZW5ndGg7XG4gICAgICB2YXIgcmV0UHRzID0gW107XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZXRQdHNbaV0gPSBpbnZlcnNlUG9pbnQocHRzW2ldKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldFB0cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVRvVHJpcGxlUG9pbnRzKHB0MSwgcHQyLCBwdDMpIHtcbiAgICAgIHZhciBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgNik7XG5cbiAgICAgIGlmICh0aGlzLmlzSWRlbnRpdHkoKSkge1xuICAgICAgICBhcnJbMF0gPSBwdDFbMF07XG4gICAgICAgIGFyclsxXSA9IHB0MVsxXTtcbiAgICAgICAgYXJyWzJdID0gcHQyWzBdO1xuICAgICAgICBhcnJbM10gPSBwdDJbMV07XG4gICAgICAgIGFycls0XSA9IHB0M1swXTtcbiAgICAgICAgYXJyWzVdID0gcHQzWzFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHAwID0gdGhpcy5wcm9wc1swXTtcbiAgICAgICAgdmFyIHAxID0gdGhpcy5wcm9wc1sxXTtcbiAgICAgICAgdmFyIHA0ID0gdGhpcy5wcm9wc1s0XTtcbiAgICAgICAgdmFyIHA1ID0gdGhpcy5wcm9wc1s1XTtcbiAgICAgICAgdmFyIHAxMiA9IHRoaXMucHJvcHNbMTJdO1xuICAgICAgICB2YXIgcDEzID0gdGhpcy5wcm9wc1sxM107XG4gICAgICAgIGFyclswXSA9IHB0MVswXSAqIHAwICsgcHQxWzFdICogcDQgKyBwMTI7XG4gICAgICAgIGFyclsxXSA9IHB0MVswXSAqIHAxICsgcHQxWzFdICogcDUgKyBwMTM7XG4gICAgICAgIGFyclsyXSA9IHB0MlswXSAqIHAwICsgcHQyWzFdICogcDQgKyBwMTI7XG4gICAgICAgIGFyclszXSA9IHB0MlswXSAqIHAxICsgcHQyWzFdICogcDUgKyBwMTM7XG4gICAgICAgIGFycls0XSA9IHB0M1swXSAqIHAwICsgcHQzWzFdICogcDQgKyBwMTI7XG4gICAgICAgIGFycls1XSA9IHB0M1swXSAqIHAxICsgcHQzWzFdICogcDUgKyBwMTM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlUb1BvaW50QXJyYXkoeCwgeSwgeikge1xuICAgICAgdmFyIGFycjtcblxuICAgICAgaWYgKHRoaXMuaXNJZGVudGl0eSgpKSB7XG4gICAgICAgIGFyciA9IFt4LCB5LCB6XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyciA9IFt4ICogdGhpcy5wcm9wc1swXSArIHkgKiB0aGlzLnByb3BzWzRdICsgeiAqIHRoaXMucHJvcHNbOF0gKyB0aGlzLnByb3BzWzEyXSwgeCAqIHRoaXMucHJvcHNbMV0gKyB5ICogdGhpcy5wcm9wc1s1XSArIHogKiB0aGlzLnByb3BzWzldICsgdGhpcy5wcm9wc1sxM10sIHggKiB0aGlzLnByb3BzWzJdICsgeSAqIHRoaXMucHJvcHNbNl0gKyB6ICogdGhpcy5wcm9wc1sxMF0gKyB0aGlzLnByb3BzWzE0XV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoeCwgeSkge1xuICAgICAgaWYgKHRoaXMuaXNJZGVudGl0eSgpKSB7XG4gICAgICAgIHJldHVybiB4ICsgJywnICsgeTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wID0gdGhpcy5wcm9wcztcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKCh4ICogX3BbMF0gKyB5ICogX3BbNF0gKyBfcFsxMl0pICogMTAwKSAvIDEwMCArICcsJyArIE1hdGgucm91bmQoKHggKiBfcFsxXSArIHkgKiBfcFs1XSArIF9wWzEzXSkgKiAxMDApIC8gMTAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQ1NTKCkge1xuICAgICAgLy8gRG9lc24ndCBtYWtlIG11Y2ggc2Vuc2UgdG8gYWRkIHRoaXMgb3B0aW1pemF0aW9uLiBJZiBpdCBpcyBhbiBpZGVudGl0eSBtYXRyaXgsIGl0J3MgdmVyeSBsaWtlbHkgdGhpcyB3aWxsIGdldCBjYWxsZWQgb25seSBvbmNlIHNpbmNlIGl0IHdvbid0IGJlIGtleWZyYW1lZC5cblxuICAgICAgLyogaWYodGhpcy5pc0lkZW50aXR5KCkpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICB9ICovXG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgdmFyIGNzc1ZhbHVlID0gJ21hdHJpeDNkKCc7XG4gICAgICB2YXIgdiA9IDEwMDAwO1xuXG4gICAgICB3aGlsZSAoaSA8IDE2KSB7XG4gICAgICAgIGNzc1ZhbHVlICs9IF9ybmQocHJvcHNbaV0gKiB2KSAvIHY7XG4gICAgICAgIGNzc1ZhbHVlICs9IGkgPT09IDE1ID8gJyknIDogJywnO1xuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjc3NWYWx1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3VuZE1hdHJpeFByb3BlcnR5KHZhbCkge1xuICAgICAgdmFyIHYgPSAxMDAwMDtcblxuICAgICAgaWYgKHZhbCA8IDAuMDAwMDAxICYmIHZhbCA+IDAgfHwgdmFsID4gLTAuMDAwMDAxICYmIHZhbCA8IDApIHtcbiAgICAgICAgcmV0dXJuIF9ybmQodmFsICogdikgLyB2O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvMmRDU1MoKSB7XG4gICAgICAvLyBEb2Vzbid0IG1ha2UgbXVjaCBzZW5zZSB0byBhZGQgdGhpcyBvcHRpbWl6YXRpb24uIElmIGl0IGlzIGFuIGlkZW50aXR5IG1hdHJpeCwgaXQncyB2ZXJ5IGxpa2VseSB0aGlzIHdpbGwgZ2V0IGNhbGxlZCBvbmx5IG9uY2Ugc2luY2UgaXQgd29uJ3QgYmUga2V5ZnJhbWVkLlxuXG4gICAgICAvKiBpZih0aGlzLmlzSWRlbnRpdHkoKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgIH0gKi9cbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG5cbiAgICAgIHZhciBfYSA9IHJvdW5kTWF0cml4UHJvcGVydHkocHJvcHNbMF0pO1xuXG4gICAgICB2YXIgX2IgPSByb3VuZE1hdHJpeFByb3BlcnR5KHByb3BzWzFdKTtcblxuICAgICAgdmFyIF9jID0gcm91bmRNYXRyaXhQcm9wZXJ0eShwcm9wc1s0XSk7XG5cbiAgICAgIHZhciBfZCA9IHJvdW5kTWF0cml4UHJvcGVydHkocHJvcHNbNV0pO1xuXG4gICAgICB2YXIgX2UgPSByb3VuZE1hdHJpeFByb3BlcnR5KHByb3BzWzEyXSk7XG5cbiAgICAgIHZhciBfZiA9IHJvdW5kTWF0cml4UHJvcGVydHkocHJvcHNbMTNdKTtcblxuICAgICAgcmV0dXJuICdtYXRyaXgoJyArIF9hICsgJywnICsgX2IgKyAnLCcgKyBfYyArICcsJyArIF9kICsgJywnICsgX2UgKyAnLCcgKyBfZiArICcpJztcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5yZXNldCA9IHJlc2V0O1xuICAgICAgdGhpcy5yb3RhdGUgPSByb3RhdGU7XG4gICAgICB0aGlzLnJvdGF0ZVggPSByb3RhdGVYO1xuICAgICAgdGhpcy5yb3RhdGVZID0gcm90YXRlWTtcbiAgICAgIHRoaXMucm90YXRlWiA9IHJvdGF0ZVo7XG4gICAgICB0aGlzLnNrZXcgPSBza2V3O1xuICAgICAgdGhpcy5za2V3RnJvbUF4aXMgPSBza2V3RnJvbUF4aXM7XG4gICAgICB0aGlzLnNoZWFyID0gc2hlYXI7XG4gICAgICB0aGlzLnNjYWxlID0gc2NhbGU7XG4gICAgICB0aGlzLnNldFRyYW5zZm9ybSA9IHNldFRyYW5zZm9ybTtcbiAgICAgIHRoaXMudHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuICAgICAgdGhpcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICB0aGlzLm11bHRpcGx5ID0gbXVsdGlwbHk7XG4gICAgICB0aGlzLmFwcGx5VG9Qb2ludCA9IGFwcGx5VG9Qb2ludDtcbiAgICAgIHRoaXMuYXBwbHlUb1ggPSBhcHBseVRvWDtcbiAgICAgIHRoaXMuYXBwbHlUb1kgPSBhcHBseVRvWTtcbiAgICAgIHRoaXMuYXBwbHlUb1ogPSBhcHBseVRvWjtcbiAgICAgIHRoaXMuYXBwbHlUb1BvaW50QXJyYXkgPSBhcHBseVRvUG9pbnRBcnJheTtcbiAgICAgIHRoaXMuYXBwbHlUb1RyaXBsZVBvaW50cyA9IGFwcGx5VG9UcmlwbGVQb2ludHM7XG4gICAgICB0aGlzLmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkID0gYXBwbHlUb1BvaW50U3RyaW5naWZpZWQ7XG4gICAgICB0aGlzLnRvQ1NTID0gdG9DU1M7XG4gICAgICB0aGlzLnRvMmRDU1MgPSB0bzJkQ1NTO1xuICAgICAgdGhpcy5jbG9uZSA9IGNsb25lO1xuICAgICAgdGhpcy5jbG9uZUZyb21Qcm9wcyA9IGNsb25lRnJvbVByb3BzO1xuICAgICAgdGhpcy5lcXVhbHMgPSBlcXVhbHM7XG4gICAgICB0aGlzLmludmVyc2VQb2ludHMgPSBpbnZlcnNlUG9pbnRzO1xuICAgICAgdGhpcy5pbnZlcnNlUG9pbnQgPSBpbnZlcnNlUG9pbnQ7XG4gICAgICB0aGlzLmdldEludmVyc2VNYXRyaXggPSBnZXRJbnZlcnNlTWF0cml4O1xuICAgICAgdGhpcy5fdCA9IHRoaXMudHJhbnNmb3JtO1xuICAgICAgdGhpcy5pc0lkZW50aXR5ID0gaXNJZGVudGl0eTtcbiAgICAgIHRoaXMuX2lkZW50aXR5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5wcm9wcyA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCAxNik7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF90eXBlb2YkMyhvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiQzID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YkMyA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mJDMob2JqKTsgfVxuICB2YXIgbG90dGllID0ge307XG4gIHZhciBzdGFuZGFsb25lID0gJ19fW1NUQU5EQUxPTkVdX18nO1xuICB2YXIgYW5pbWF0aW9uRGF0YSA9ICdfX1tBTklNQVRJT05EQVRBXV9fJztcbiAgdmFyIHJlbmRlcmVyID0gJyc7XG5cbiAgZnVuY3Rpb24gc2V0TG9jYXRpb24oaHJlZikge1xuICAgIHNldExvY2F0aW9uSHJlZihocmVmKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlYXJjaEFuaW1hdGlvbnMoKSB7XG4gICAgaWYgKHN0YW5kYWxvbmUgPT09IHRydWUpIHtcbiAgICAgIGFuaW1hdGlvbk1hbmFnZXIuc2VhcmNoQW5pbWF0aW9ucyhhbmltYXRpb25EYXRhLCBzdGFuZGFsb25lLCByZW5kZXJlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFuaW1hdGlvbk1hbmFnZXIuc2VhcmNoQW5pbWF0aW9ucygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFN1YmZyYW1lUmVuZGVyaW5nKGZsYWcpIHtcbiAgICBzZXRTdWJmcmFtZUVuYWJsZWQoZmxhZyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRQcmVmaXgocHJlZml4KSB7XG4gICAgc2V0SWRQcmVmaXgocHJlZml4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRBbmltYXRpb24ocGFyYW1zKSB7XG4gICAgaWYgKHN0YW5kYWxvbmUgPT09IHRydWUpIHtcbiAgICAgIHBhcmFtcy5hbmltYXRpb25EYXRhID0gSlNPTi5wYXJzZShhbmltYXRpb25EYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYW5pbWF0aW9uTWFuYWdlci5sb2FkQW5pbWF0aW9uKHBhcmFtcyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRRdWFsaXR5KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSAnaGlnaCc6XG4gICAgICAgICAgc2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoMjAwKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICBjYXNlICdtZWRpdW0nOlxuICAgICAgICAgIHNldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKDUwKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdsb3cnOlxuICAgICAgICAgIHNldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKDEwKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc05hTih2YWx1ZSkgJiYgdmFsdWUgPiAxKSB7XG4gICAgICBzZXREZWZhdWx0Q3VydmVTZWdtZW50cyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGdldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKCkgPj0gNTApIHtcbiAgICAgIHJvdW5kVmFsdWVzKGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91bmRWYWx1ZXModHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5Ccm93c2VyKCkge1xuICAgIHJldHVybiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJztcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc3RhbGxQbHVnaW4odHlwZSwgcGx1Z2luKSB7XG4gICAgaWYgKHR5cGUgPT09ICdleHByZXNzaW9ucycpIHtcbiAgICAgIHNldEV4cHJlc3Npb25zUGx1Z2luKHBsdWdpbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RmFjdG9yeShuYW1lKSB7XG4gICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICBjYXNlICdwcm9wZXJ0eUZhY3RvcnknOlxuICAgICAgICByZXR1cm4gUHJvcGVydHlGYWN0b3J5O1xuXG4gICAgICBjYXNlICdzaGFwZVByb3BlcnR5RmFjdG9yeSc6XG4gICAgICAgIHJldHVybiBTaGFwZVByb3BlcnR5RmFjdG9yeTtcblxuICAgICAgY2FzZSAnbWF0cml4JzpcbiAgICAgICAgcmV0dXJuIE1hdHJpeDtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgbG90dGllLnBsYXkgPSBhbmltYXRpb25NYW5hZ2VyLnBsYXk7XG4gIGxvdHRpZS5wYXVzZSA9IGFuaW1hdGlvbk1hbmFnZXIucGF1c2U7XG4gIGxvdHRpZS5zZXRMb2NhdGlvbkhyZWYgPSBzZXRMb2NhdGlvbjtcbiAgbG90dGllLnRvZ2dsZVBhdXNlID0gYW5pbWF0aW9uTWFuYWdlci50b2dnbGVQYXVzZTtcbiAgbG90dGllLnNldFNwZWVkID0gYW5pbWF0aW9uTWFuYWdlci5zZXRTcGVlZDtcbiAgbG90dGllLnNldERpcmVjdGlvbiA9IGFuaW1hdGlvbk1hbmFnZXIuc2V0RGlyZWN0aW9uO1xuICBsb3R0aWUuc3RvcCA9IGFuaW1hdGlvbk1hbmFnZXIuc3RvcDtcbiAgbG90dGllLnNlYXJjaEFuaW1hdGlvbnMgPSBzZWFyY2hBbmltYXRpb25zO1xuICBsb3R0aWUucmVnaXN0ZXJBbmltYXRpb24gPSBhbmltYXRpb25NYW5hZ2VyLnJlZ2lzdGVyQW5pbWF0aW9uO1xuICBsb3R0aWUubG9hZEFuaW1hdGlvbiA9IGxvYWRBbmltYXRpb247XG4gIGxvdHRpZS5zZXRTdWJmcmFtZVJlbmRlcmluZyA9IHNldFN1YmZyYW1lUmVuZGVyaW5nO1xuICBsb3R0aWUucmVzaXplID0gYW5pbWF0aW9uTWFuYWdlci5yZXNpemU7IC8vIGxvdHRpZS5zdGFydCA9IHN0YXJ0O1xuXG4gIGxvdHRpZS5nb1RvQW5kU3RvcCA9IGFuaW1hdGlvbk1hbmFnZXIuZ29Ub0FuZFN0b3A7XG4gIGxvdHRpZS5kZXN0cm95ID0gYW5pbWF0aW9uTWFuYWdlci5kZXN0cm95O1xuICBsb3R0aWUuc2V0UXVhbGl0eSA9IHNldFF1YWxpdHk7XG4gIGxvdHRpZS5pbkJyb3dzZXIgPSBpbkJyb3dzZXI7XG4gIGxvdHRpZS5pbnN0YWxsUGx1Z2luID0gaW5zdGFsbFBsdWdpbjtcbiAgbG90dGllLmZyZWV6ZSA9IGFuaW1hdGlvbk1hbmFnZXIuZnJlZXplO1xuICBsb3R0aWUudW5mcmVlemUgPSBhbmltYXRpb25NYW5hZ2VyLnVuZnJlZXplO1xuICBsb3R0aWUuc2V0Vm9sdW1lID0gYW5pbWF0aW9uTWFuYWdlci5zZXRWb2x1bWU7XG4gIGxvdHRpZS5tdXRlID0gYW5pbWF0aW9uTWFuYWdlci5tdXRlO1xuICBsb3R0aWUudW5tdXRlID0gYW5pbWF0aW9uTWFuYWdlci51bm11dGU7XG4gIGxvdHRpZS5nZXRSZWdpc3RlcmVkQW5pbWF0aW9ucyA9IGFuaW1hdGlvbk1hbmFnZXIuZ2V0UmVnaXN0ZXJlZEFuaW1hdGlvbnM7XG4gIGxvdHRpZS51c2VXZWJXb3JrZXIgPSBzZXRXZWJXb3JrZXI7XG4gIGxvdHRpZS5zZXRJRFByZWZpeCA9IHNldFByZWZpeDtcbiAgbG90dGllLl9fZ2V0RmFjdG9yeSA9IGdldEZhY3Rvcnk7XG4gIGxvdHRpZS52ZXJzaW9uID0gJzUuMTIuMic7XG5cbiAgZnVuY3Rpb24gY2hlY2tSZWFkeSgpIHtcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgY2xlYXJJbnRlcnZhbChyZWFkeVN0YXRlQ2hlY2tJbnRlcnZhbCk7XG4gICAgICBzZWFyY2hBbmltYXRpb25zKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UXVlcnlWYXJpYWJsZSh2YXJpYWJsZSkge1xuICAgIHZhciB2YXJzID0gcXVlcnlTdHJpbmcuc3BsaXQoJyYnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIHBhaXIgPSB2YXJzW2ldLnNwbGl0KCc9Jyk7XG5cbiAgICAgIGlmIChkZWNvZGVVUklDb21wb25lbnQocGFpclswXSkgPT0gdmFyaWFibGUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBxdWVyeVN0cmluZyA9ICcnO1xuXG4gIGlmIChzdGFuZGFsb25lKSB7XG4gICAgdmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gICAgdmFyIGluZGV4ID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuICAgIHZhciBteVNjcmlwdCA9IHNjcmlwdHNbaW5kZXhdIHx8IHtcbiAgICAgIHNyYzogJydcbiAgICB9O1xuICAgIHF1ZXJ5U3RyaW5nID0gbXlTY3JpcHQuc3JjID8gbXlTY3JpcHQuc3JjLnJlcGxhY2UoL15bXlxcP10rXFw/Py8sICcnKSA6ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5cbiAgICByZW5kZXJlciA9IGdldFF1ZXJ5VmFyaWFibGUoJ3JlbmRlcmVyJyk7XG4gIH1cblxuICB2YXIgcmVhZHlTdGF0ZUNoZWNrSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChjaGVja1JlYWR5LCAxMDApOyAvLyB0aGlzIGFkZHMgYm9keW1vdmluIHRvIHRoZSB3aW5kb3cgb2JqZWN0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXG4gIHRyeSB7XG4gICAgaWYgKCEoKHR5cGVvZiBleHBvcnRzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YkMyhleHBvcnRzKSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSAmJiAhKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgICkge1xuICAgICAgd2luZG93LmJvZHltb3ZpbiA9IGxvdHRpZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikgey8vXG4gIH1cblxuICB2YXIgU2hhcGVNb2RpZmllcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iID0ge307XG4gICAgdmFyIG1vZGlmaWVycyA9IHt9O1xuICAgIG9iLnJlZ2lzdGVyTW9kaWZpZXIgPSByZWdpc3Rlck1vZGlmaWVyO1xuICAgIG9iLmdldE1vZGlmaWVyID0gZ2V0TW9kaWZpZXI7XG5cbiAgICBmdW5jdGlvbiByZWdpc3Rlck1vZGlmaWVyKG5tLCBmYWN0b3J5KSB7XG4gICAgICBpZiAoIW1vZGlmaWVyc1tubV0pIHtcbiAgICAgICAgbW9kaWZpZXJzW25tXSA9IGZhY3Rvcnk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TW9kaWZpZXIobm0sIGVsZW0sIGRhdGEpIHtcbiAgICAgIHJldHVybiBuZXcgbW9kaWZpZXJzW25tXShlbGVtLCBkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBTaGFwZU1vZGlmaWVyKCkge31cblxuICBTaGFwZU1vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKCkge307XG5cbiAgU2hhcGVNb2RpZmllci5wcm90b3R5cGUuYWRkU2hhcGVUb01vZGlmaWVyID0gZnVuY3Rpb24gKCkge307XG5cbiAgU2hhcGVNb2RpZmllci5wcm90b3R5cGUuYWRkU2hhcGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgIC8vIEFkZGluZyBzaGFwZSB0byBkeW5hbWljIHByb3BlcnRpZXMuIEl0IGNvdmVycyB0aGUgY2FzZSB3aGVyZSBhIHNoYXBlIGhhcyBubyBlZmZlY3RzIGFwcGxpZWQsIHRvIHJlc2V0IGl0J3MgX21kZiBzdGF0ZSBvbiBldmVyeSB0aWNrLlxuICAgICAgZGF0YS5zaC5jb250YWluZXIuYWRkRHluYW1pY1Byb3BlcnR5KGRhdGEuc2gpO1xuICAgICAgdmFyIHNoYXBlRGF0YSA9IHtcbiAgICAgICAgc2hhcGU6IGRhdGEuc2gsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uOiBzaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpXG4gICAgICB9O1xuICAgICAgdGhpcy5zaGFwZXMucHVzaChzaGFwZURhdGEpO1xuICAgICAgdGhpcy5hZGRTaGFwZVRvTW9kaWZpZXIoc2hhcGVEYXRhKTtcblxuICAgICAgaWYgKHRoaXMuX2lzQW5pbWF0ZWQpIHtcbiAgICAgICAgZGF0YS5zZXRBc0FuaW1hdGVkKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNoYXBlTW9kaWZpZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSkge1xuICAgIHRoaXMuc2hhcGVzID0gW107XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gICAgdGhpcy5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzKGVsZW0sIGRhdGEpO1xuICAgIHRoaXMuZnJhbWVJZCA9IGluaXRpYWxEZWZhdWx0RnJhbWU7XG4gICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICB0aGlzLmsgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5rID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nZXRWYWx1ZSh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgU2hhcGVNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc0tleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgPT09IHRoaXMuZnJhbWVJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZnJhbWVJZCA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7XG4gICAgdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKTtcbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFNoYXBlTW9kaWZpZXIpO1xuXG4gIGZ1bmN0aW9uIFRyaW1Nb2RpZmllcigpIHt9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTaGFwZU1vZGlmaWVyXSwgVHJpbU1vZGlmaWVyKTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXMgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSkge1xuICAgIHRoaXMucyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucywgMCwgMC4wMSwgdGhpcyk7XG4gICAgdGhpcy5lID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5lLCAwLCAwLjAxLCB0aGlzKTtcbiAgICB0aGlzLm8gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm8sIDAsIDAsIHRoaXMpO1xuICAgIHRoaXMuc1ZhbHVlID0gMDtcbiAgICB0aGlzLmVWYWx1ZSA9IDA7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMucHJvY2Vzc0tleXM7XG4gICAgdGhpcy5tID0gZGF0YS5tO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXRoaXMucy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoIHx8ICEhdGhpcy5lLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggfHwgISF0aGlzLm8uZWZmZWN0c1NlcXVlbmNlLmxlbmd0aDtcbiAgfTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLmFkZFNoYXBlVG9Nb2RpZmllciA9IGZ1bmN0aW9uIChzaGFwZURhdGEpIHtcbiAgICBzaGFwZURhdGEucGF0aHNEYXRhID0gW107XG4gIH07XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5jYWxjdWxhdGVTaGFwZUVkZ2VzID0gZnVuY3Rpb24gKHMsIGUsIHNoYXBlTGVuZ3RoLCBhZGRlZExlbmd0aCwgdG90YWxNb2RpZmllckxlbmd0aCkge1xuICAgIHZhciBzZWdtZW50cyA9IFtdO1xuXG4gICAgaWYgKGUgPD0gMSkge1xuICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgIHM6IHMsXG4gICAgICAgIGU6IGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocyA+PSAxKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgczogcyAtIDEsXG4gICAgICAgIGU6IGUgLSAxXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgIHM6IHMsXG4gICAgICAgIGU6IDFcbiAgICAgIH0pO1xuICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgIHM6IDAsXG4gICAgICAgIGU6IGUgLSAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgc2hhcGVTZWdtZW50cyA9IFtdO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgdmFyIHNlZ21lbnRPYjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgc2VnbWVudE9iID0gc2VnbWVudHNbaV07XG5cbiAgICAgIGlmICghKHNlZ21lbnRPYi5lICogdG90YWxNb2RpZmllckxlbmd0aCA8IGFkZGVkTGVuZ3RoIHx8IHNlZ21lbnRPYi5zICogdG90YWxNb2RpZmllckxlbmd0aCA+IGFkZGVkTGVuZ3RoICsgc2hhcGVMZW5ndGgpKSB7XG4gICAgICAgIHZhciBzaGFwZVM7XG4gICAgICAgIHZhciBzaGFwZUU7XG5cbiAgICAgICAgaWYgKHNlZ21lbnRPYi5zICogdG90YWxNb2RpZmllckxlbmd0aCA8PSBhZGRlZExlbmd0aCkge1xuICAgICAgICAgIHNoYXBlUyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hhcGVTID0gKHNlZ21lbnRPYi5zICogdG90YWxNb2RpZmllckxlbmd0aCAtIGFkZGVkTGVuZ3RoKSAvIHNoYXBlTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlZ21lbnRPYi5lICogdG90YWxNb2RpZmllckxlbmd0aCA+PSBhZGRlZExlbmd0aCArIHNoYXBlTGVuZ3RoKSB7XG4gICAgICAgICAgc2hhcGVFID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaGFwZUUgPSAoc2VnbWVudE9iLmUgKiB0b3RhbE1vZGlmaWVyTGVuZ3RoIC0gYWRkZWRMZW5ndGgpIC8gc2hhcGVMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBzaGFwZVNlZ21lbnRzLnB1c2goW3NoYXBlUywgc2hhcGVFXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzaGFwZVNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgc2hhcGVTZWdtZW50cy5wdXNoKFswLCAwXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoYXBlU2VnbWVudHM7XG4gIH07XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5yZWxlYXNlUGF0aHNEYXRhID0gZnVuY3Rpb24gKHBhdGhzRGF0YSkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBwYXRoc0RhdGEubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBzZWdtZW50c0xlbmd0aFBvb2wucmVsZWFzZShwYXRoc0RhdGFbaV0pO1xuICAgIH1cblxuICAgIHBhdGhzRGF0YS5sZW5ndGggPSAwO1xuICAgIHJldHVybiBwYXRoc0RhdGE7XG4gIH07XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzU2hhcGVzID0gZnVuY3Rpb24gKF9pc0ZpcnN0RnJhbWUpIHtcbiAgICB2YXIgcztcbiAgICB2YXIgZTtcblxuICAgIGlmICh0aGlzLl9tZGYgfHwgX2lzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIG8gPSB0aGlzLm8udiAlIDM2MCAvIDM2MDtcblxuICAgICAgaWYgKG8gPCAwKSB7XG4gICAgICAgIG8gKz0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucy52ID4gMSkge1xuICAgICAgICBzID0gMSArIG87XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucy52IDwgMCkge1xuICAgICAgICBzID0gMCArIG87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzID0gdGhpcy5zLnYgKyBvO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5lLnYgPiAxKSB7XG4gICAgICAgIGUgPSAxICsgbztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5lLnYgPCAwKSB7XG4gICAgICAgIGUgPSAwICsgbztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGUgPSB0aGlzLmUudiArIG87XG4gICAgICB9XG5cbiAgICAgIGlmIChzID4gZSkge1xuICAgICAgICB2YXIgX3MgPSBzO1xuICAgICAgICBzID0gZTtcbiAgICAgICAgZSA9IF9zO1xuICAgICAgfVxuXG4gICAgICBzID0gTWF0aC5yb3VuZChzICogMTAwMDApICogMC4wMDAxO1xuICAgICAgZSA9IE1hdGgucm91bmQoZSAqIDEwMDAwKSAqIDAuMDAwMTtcbiAgICAgIHRoaXMuc1ZhbHVlID0gcztcbiAgICAgIHRoaXMuZVZhbHVlID0gZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcyA9IHRoaXMuc1ZhbHVlO1xuICAgICAgZSA9IHRoaXMuZVZhbHVlO1xuICAgIH1cblxuICAgIHZhciBzaGFwZVBhdGhzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlcy5sZW5ndGg7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIHBhdGhzRGF0YTtcbiAgICB2YXIgcGF0aERhdGE7XG4gICAgdmFyIHRvdGFsU2hhcGVMZW5ndGg7XG4gICAgdmFyIHRvdGFsTW9kaWZpZXJMZW5ndGggPSAwO1xuXG4gICAgaWYgKGUgPT09IHMpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnNoYXBlc1tpXS5sb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7XG4gICAgICAgIHRoaXMuc2hhcGVzW2ldLnNoYXBlLl9tZGYgPSB0cnVlO1xuICAgICAgICB0aGlzLnNoYXBlc1tpXS5zaGFwZS5wYXRocyA9IHRoaXMuc2hhcGVzW2ldLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuXG4gICAgICAgIGlmICh0aGlzLl9tZGYpIHtcbiAgICAgICAgICB0aGlzLnNoYXBlc1tpXS5wYXRoc0RhdGEubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShlID09PSAxICYmIHMgPT09IDAgfHwgZSA9PT0gMCAmJiBzID09PSAxKSkge1xuICAgICAgdmFyIHNlZ21lbnRzID0gW107XG4gICAgICB2YXIgc2hhcGVEYXRhO1xuICAgICAgdmFyIGxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgc2hhcGVEYXRhID0gdGhpcy5zaGFwZXNbaV07IC8vIGlmIHNoYXBlIGhhc24ndCBjaGFuZ2VkIGFuZCB0cmltIHByb3BlcnRpZXMgaGF2ZW4ndCBjaGFuZ2VkLCBjYWNoZWQgcHJldmlvdXMgcGF0aCBjYW4gYmUgdXNlZFxuXG4gICAgICAgIGlmICghc2hhcGVEYXRhLnNoYXBlLl9tZGYgJiYgIXRoaXMuX21kZiAmJiAhX2lzRmlyc3RGcmFtZSAmJiB0aGlzLm0gIT09IDIpIHtcbiAgICAgICAgICBzaGFwZURhdGEuc2hhcGUucGF0aHMgPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hhcGVQYXRocyA9IHNoYXBlRGF0YS5zaGFwZS5wYXRocztcbiAgICAgICAgICBqTGVuID0gc2hhcGVQYXRocy5fbGVuZ3RoO1xuICAgICAgICAgIHRvdGFsU2hhcGVMZW5ndGggPSAwO1xuXG4gICAgICAgICAgaWYgKCFzaGFwZURhdGEuc2hhcGUuX21kZiAmJiBzaGFwZURhdGEucGF0aHNEYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgdG90YWxTaGFwZUxlbmd0aCA9IHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRoc0RhdGEgPSB0aGlzLnJlbGVhc2VQYXRoc0RhdGEoc2hhcGVEYXRhLnBhdGhzRGF0YSk7XG5cbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgcGF0aERhdGEgPSBiZXouZ2V0U2VnbWVudHNMZW5ndGgoc2hhcGVQYXRocy5zaGFwZXNbal0pO1xuICAgICAgICAgICAgICBwYXRoc0RhdGEucHVzaChwYXRoRGF0YSk7XG4gICAgICAgICAgICAgIHRvdGFsU2hhcGVMZW5ndGggKz0gcGF0aERhdGEudG90YWxMZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoID0gdG90YWxTaGFwZUxlbmd0aDtcbiAgICAgICAgICAgIHNoYXBlRGF0YS5wYXRoc0RhdGEgPSBwYXRoc0RhdGE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdG90YWxNb2RpZmllckxlbmd0aCArPSB0b3RhbFNoYXBlTGVuZ3RoO1xuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc2hhcGVTID0gcztcbiAgICAgIHZhciBzaGFwZUUgPSBlO1xuICAgICAgdmFyIGFkZGVkTGVuZ3RoID0gMDtcbiAgICAgIHZhciBlZGdlcztcblxuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgc2hhcGVEYXRhID0gdGhpcy5zaGFwZXNbaV07XG5cbiAgICAgICAgaWYgKHNoYXBlRGF0YS5zaGFwZS5fbWRmKSB7XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpOyAvLyBpZiBtID09PSAyIG1lYW5zIHBhdGhzIGFyZSB0cmltbWVkIGluZGl2aWR1YWxseSBzbyBlZGdlcyBuZWVkIHRvIGJlIGZvdW5kIGZvciB0aGlzIHNwZWNpZmljIHNoYXBlIHJlbGF0aXZlIHRvIHdob2VsIGdyb3VwXG5cbiAgICAgICAgICBpZiAodGhpcy5tID09PSAyICYmIGxlbiA+IDEpIHtcbiAgICAgICAgICAgIGVkZ2VzID0gdGhpcy5jYWxjdWxhdGVTaGFwZUVkZ2VzKHMsIGUsIHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoLCBhZGRlZExlbmd0aCwgdG90YWxNb2RpZmllckxlbmd0aCk7XG4gICAgICAgICAgICBhZGRlZExlbmd0aCArPSBzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWRnZXMgPSBbW3NoYXBlUywgc2hhcGVFXV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgakxlbiA9IGVkZ2VzLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHNoYXBlUyA9IGVkZ2VzW2pdWzBdO1xuICAgICAgICAgICAgc2hhcGVFID0gZWRnZXNbal1bMV07XG4gICAgICAgICAgICBzZWdtZW50cy5sZW5ndGggPSAwO1xuXG4gICAgICAgICAgICBpZiAoc2hhcGVFIDw9IDEpIHtcbiAgICAgICAgICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgczogc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGggKiBzaGFwZVMsXG4gICAgICAgICAgICAgICAgZTogc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGggKiBzaGFwZUVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNoYXBlUyA+PSAxKSB7XG4gICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHM6IHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoICogKHNoYXBlUyAtIDEpLFxuICAgICAgICAgICAgICAgIGU6IHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoICogKHNoYXBlRSAtIDEpXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgczogc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGggKiBzaGFwZVMsXG4gICAgICAgICAgICAgICAgZTogc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGhcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHM6IDAsXG4gICAgICAgICAgICAgICAgZTogc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGggKiAoc2hhcGVFIC0gMSlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBuZXdTaGFwZXNEYXRhID0gdGhpcy5hZGRTaGFwZXMoc2hhcGVEYXRhLCBzZWdtZW50c1swXSk7XG5cbiAgICAgICAgICAgIGlmIChzZWdtZW50c1swXS5zICE9PSBzZWdtZW50c1swXS5lKSB7XG4gICAgICAgICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RTaGFwZUluQ29sbGVjdGlvbiA9IHNoYXBlRGF0YS5zaGFwZS5wYXRocy5zaGFwZXNbc2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGggLSAxXTtcblxuICAgICAgICAgICAgICAgIGlmIChsYXN0U2hhcGVJbkNvbGxlY3Rpb24uYykge1xuICAgICAgICAgICAgICAgICAgdmFyIGxhc3RTaGFwZSA9IG5ld1NoYXBlc0RhdGEucG9wKCk7XG4gICAgICAgICAgICAgICAgICB0aGlzLmFkZFBhdGhzKG5ld1NoYXBlc0RhdGEsIGxvY2FsU2hhcGVDb2xsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgIG5ld1NoYXBlc0RhdGEgPSB0aGlzLmFkZFNoYXBlcyhzaGFwZURhdGEsIHNlZ21lbnRzWzFdLCBsYXN0U2hhcGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmFkZFBhdGhzKG5ld1NoYXBlc0RhdGEsIGxvY2FsU2hhcGVDb2xsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgIG5ld1NoYXBlc0RhdGEgPSB0aGlzLmFkZFNoYXBlcyhzaGFwZURhdGEsIHNlZ21lbnRzWzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLmFkZFBhdGhzKG5ld1NoYXBlc0RhdGEsIGxvY2FsU2hhcGVDb2xsZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzaGFwZURhdGEuc2hhcGUucGF0aHMgPSBsb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5fbWRmKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgLy8gUmVsZWFzaWduIFRyaW0gQ2FjaGVkIHBhdGhzIGRhdGEgd2hlbiBubyB0cmltIGFwcGxpZWQgaW4gY2FzZSBzaGFwZXMgYXJlIG1vZGlmaWVkIGluYmV0d2Vlbi5cbiAgICAgICAgLy8gRG9uJ3QgcmVtb3ZlIHRoaXMgZXZlbiBpZiBpdCdzIGxvc2luZyBjYWNoZWQgaW5mby5cbiAgICAgICAgdGhpcy5zaGFwZXNbaV0ucGF0aHNEYXRhLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuc2hhcGVzW2ldLnNoYXBlLl9tZGYgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLmFkZFBhdGhzID0gZnVuY3Rpb24gKG5ld1BhdGhzLCBsb2NhbFNoYXBlQ29sbGVjdGlvbikge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBuZXdQYXRocy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKG5ld1BhdGhzW2ldKTtcbiAgICB9XG4gIH07XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5hZGRTZWdtZW50ID0gZnVuY3Rpb24gKHB0MSwgcHQyLCBwdDMsIHB0NCwgc2hhcGVQYXRoLCBwb3MsIG5ld1NoYXBlKSB7XG4gICAgc2hhcGVQYXRoLnNldFhZQXQocHQyWzBdLCBwdDJbMV0sICdvJywgcG9zKTtcbiAgICBzaGFwZVBhdGguc2V0WFlBdChwdDNbMF0sIHB0M1sxXSwgJ2knLCBwb3MgKyAxKTtcblxuICAgIGlmIChuZXdTaGFwZSkge1xuICAgICAgc2hhcGVQYXRoLnNldFhZQXQocHQxWzBdLCBwdDFbMV0sICd2JywgcG9zKTtcbiAgICB9XG5cbiAgICBzaGFwZVBhdGguc2V0WFlBdChwdDRbMF0sIHB0NFsxXSwgJ3YnLCBwb3MgKyAxKTtcbiAgfTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLmFkZFNlZ21lbnRGcm9tQXJyYXkgPSBmdW5jdGlvbiAocG9pbnRzLCBzaGFwZVBhdGgsIHBvcywgbmV3U2hhcGUpIHtcbiAgICBzaGFwZVBhdGguc2V0WFlBdChwb2ludHNbMV0sIHBvaW50c1s1XSwgJ28nLCBwb3MpO1xuICAgIHNoYXBlUGF0aC5zZXRYWUF0KHBvaW50c1syXSwgcG9pbnRzWzZdLCAnaScsIHBvcyArIDEpO1xuXG4gICAgaWYgKG5ld1NoYXBlKSB7XG4gICAgICBzaGFwZVBhdGguc2V0WFlBdChwb2ludHNbMF0sIHBvaW50c1s0XSwgJ3YnLCBwb3MpO1xuICAgIH1cblxuICAgIHNoYXBlUGF0aC5zZXRYWUF0KHBvaW50c1szXSwgcG9pbnRzWzddLCAndicsIHBvcyArIDEpO1xuICB9O1xuXG4gIFRyaW1Nb2RpZmllci5wcm90b3R5cGUuYWRkU2hhcGVzID0gZnVuY3Rpb24gKHNoYXBlRGF0YSwgc2hhcGVTZWdtZW50LCBzaGFwZVBhdGgpIHtcbiAgICB2YXIgcGF0aHNEYXRhID0gc2hhcGVEYXRhLnBhdGhzRGF0YTtcbiAgICB2YXIgc2hhcGVQYXRocyA9IHNoYXBlRGF0YS5zaGFwZS5wYXRocy5zaGFwZXM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHNoYXBlRGF0YS5zaGFwZS5wYXRocy5fbGVuZ3RoO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBhZGRlZExlbmd0aCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW5ndGhEYXRhO1xuICAgIHZhciBzZWdtZW50Q291bnQ7XG4gICAgdmFyIGxlbmd0aHM7XG4gICAgdmFyIHNlZ21lbnQ7XG4gICAgdmFyIHNoYXBlcyA9IFtdO1xuICAgIHZhciBpbml0UG9zO1xuICAgIHZhciBuZXdTaGFwZSA9IHRydWU7XG5cbiAgICBpZiAoIXNoYXBlUGF0aCkge1xuICAgICAgc2hhcGVQYXRoID0gc2hhcGVQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgIHNlZ21lbnRDb3VudCA9IDA7XG4gICAgICBpbml0UG9zID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VnbWVudENvdW50ID0gc2hhcGVQYXRoLl9sZW5ndGg7XG4gICAgICBpbml0UG9zID0gc2hhcGVQYXRoLl9sZW5ndGg7XG4gICAgfVxuXG4gICAgc2hhcGVzLnB1c2goc2hhcGVQYXRoKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgbGVuZ3RocyA9IHBhdGhzRGF0YVtpXS5sZW5ndGhzO1xuICAgICAgc2hhcGVQYXRoLmMgPSBzaGFwZVBhdGhzW2ldLmM7XG4gICAgICBqTGVuID0gc2hhcGVQYXRoc1tpXS5jID8gbGVuZ3Rocy5sZW5ndGggOiBsZW5ndGhzLmxlbmd0aCArIDE7XG5cbiAgICAgIGZvciAoaiA9IDE7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgY3VycmVudExlbmd0aERhdGEgPSBsZW5ndGhzW2ogLSAxXTtcblxuICAgICAgICBpZiAoYWRkZWRMZW5ndGggKyBjdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aCA8IHNoYXBlU2VnbWVudC5zKSB7XG4gICAgICAgICAgYWRkZWRMZW5ndGggKz0gY3VycmVudExlbmd0aERhdGEuYWRkZWRMZW5ndGg7XG4gICAgICAgICAgc2hhcGVQYXRoLmMgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChhZGRlZExlbmd0aCA+IHNoYXBlU2VnbWVudC5lKSB7XG4gICAgICAgICAgc2hhcGVQYXRoLmMgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc2hhcGVTZWdtZW50LnMgPD0gYWRkZWRMZW5ndGggJiYgc2hhcGVTZWdtZW50LmUgPj0gYWRkZWRMZW5ndGggKyBjdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5hZGRTZWdtZW50KHNoYXBlUGF0aHNbaV0udltqIC0gMV0sIHNoYXBlUGF0aHNbaV0ub1tqIC0gMV0sIHNoYXBlUGF0aHNbaV0uaVtqXSwgc2hhcGVQYXRoc1tpXS52W2pdLCBzaGFwZVBhdGgsIHNlZ21lbnRDb3VudCwgbmV3U2hhcGUpO1xuICAgICAgICAgICAgbmV3U2hhcGUgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VnbWVudCA9IGJlei5nZXROZXdTZWdtZW50KHNoYXBlUGF0aHNbaV0udltqIC0gMV0sIHNoYXBlUGF0aHNbaV0udltqXSwgc2hhcGVQYXRoc1tpXS5vW2ogLSAxXSwgc2hhcGVQYXRoc1tpXS5pW2pdLCAoc2hhcGVTZWdtZW50LnMgLSBhZGRlZExlbmd0aCkgLyBjdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aCwgKHNoYXBlU2VnbWVudC5lIC0gYWRkZWRMZW5ndGgpIC8gY3VycmVudExlbmd0aERhdGEuYWRkZWRMZW5ndGgsIGxlbmd0aHNbaiAtIDFdKTtcbiAgICAgICAgICAgIHRoaXMuYWRkU2VnbWVudEZyb21BcnJheShzZWdtZW50LCBzaGFwZVBhdGgsIHNlZ21lbnRDb3VudCwgbmV3U2hhcGUpOyAvLyB0aGlzLmFkZFNlZ21lbnQoc2VnbWVudC5wdDEsIHNlZ21lbnQucHQzLCBzZWdtZW50LnB0NCwgc2VnbWVudC5wdDIsIHNoYXBlUGF0aCwgc2VnbWVudENvdW50LCBuZXdTaGFwZSk7XG5cbiAgICAgICAgICAgIG5ld1NoYXBlID0gZmFsc2U7XG4gICAgICAgICAgICBzaGFwZVBhdGguYyA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFkZGVkTGVuZ3RoICs9IGN1cnJlbnRMZW5ndGhEYXRhLmFkZGVkTGVuZ3RoO1xuICAgICAgICAgIHNlZ21lbnRDb3VudCArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGFwZVBhdGhzW2ldLmMgJiYgbGVuZ3Rocy5sZW5ndGgpIHtcbiAgICAgICAgY3VycmVudExlbmd0aERhdGEgPSBsZW5ndGhzW2ogLSAxXTtcblxuICAgICAgICBpZiAoYWRkZWRMZW5ndGggPD0gc2hhcGVTZWdtZW50LmUpIHtcbiAgICAgICAgICB2YXIgc2VnbWVudExlbmd0aCA9IGxlbmd0aHNbaiAtIDFdLmFkZGVkTGVuZ3RoO1xuXG4gICAgICAgICAgaWYgKHNoYXBlU2VnbWVudC5zIDw9IGFkZGVkTGVuZ3RoICYmIHNoYXBlU2VnbWVudC5lID49IGFkZGVkTGVuZ3RoICsgc2VnbWVudExlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5hZGRTZWdtZW50KHNoYXBlUGF0aHNbaV0udltqIC0gMV0sIHNoYXBlUGF0aHNbaV0ub1tqIC0gMV0sIHNoYXBlUGF0aHNbaV0uaVswXSwgc2hhcGVQYXRoc1tpXS52WzBdLCBzaGFwZVBhdGgsIHNlZ21lbnRDb3VudCwgbmV3U2hhcGUpO1xuICAgICAgICAgICAgbmV3U2hhcGUgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VnbWVudCA9IGJlei5nZXROZXdTZWdtZW50KHNoYXBlUGF0aHNbaV0udltqIC0gMV0sIHNoYXBlUGF0aHNbaV0udlswXSwgc2hhcGVQYXRoc1tpXS5vW2ogLSAxXSwgc2hhcGVQYXRoc1tpXS5pWzBdLCAoc2hhcGVTZWdtZW50LnMgLSBhZGRlZExlbmd0aCkgLyBzZWdtZW50TGVuZ3RoLCAoc2hhcGVTZWdtZW50LmUgLSBhZGRlZExlbmd0aCkgLyBzZWdtZW50TGVuZ3RoLCBsZW5ndGhzW2ogLSAxXSk7XG4gICAgICAgICAgICB0aGlzLmFkZFNlZ21lbnRGcm9tQXJyYXkoc2VnbWVudCwgc2hhcGVQYXRoLCBzZWdtZW50Q291bnQsIG5ld1NoYXBlKTsgLy8gdGhpcy5hZGRTZWdtZW50KHNlZ21lbnQucHQxLCBzZWdtZW50LnB0Mywgc2VnbWVudC5wdDQsIHNlZ21lbnQucHQyLCBzaGFwZVBhdGgsIHNlZ21lbnRDb3VudCwgbmV3U2hhcGUpO1xuXG4gICAgICAgICAgICBuZXdTaGFwZSA9IGZhbHNlO1xuICAgICAgICAgICAgc2hhcGVQYXRoLmMgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hhcGVQYXRoLmMgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFkZGVkTGVuZ3RoICs9IGN1cnJlbnRMZW5ndGhEYXRhLmFkZGVkTGVuZ3RoO1xuICAgICAgICBzZWdtZW50Q291bnQgKz0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoYXBlUGF0aC5fbGVuZ3RoKSB7XG4gICAgICAgIHNoYXBlUGF0aC5zZXRYWUF0KHNoYXBlUGF0aC52W2luaXRQb3NdWzBdLCBzaGFwZVBhdGgudltpbml0UG9zXVsxXSwgJ2knLCBpbml0UG9zKTtcbiAgICAgICAgc2hhcGVQYXRoLnNldFhZQXQoc2hhcGVQYXRoLnZbc2hhcGVQYXRoLl9sZW5ndGggLSAxXVswXSwgc2hhcGVQYXRoLnZbc2hhcGVQYXRoLl9sZW5ndGggLSAxXVsxXSwgJ28nLCBzaGFwZVBhdGguX2xlbmd0aCAtIDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRkZWRMZW5ndGggPiBzaGFwZVNlZ21lbnQuZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGkgPCBsZW4gLSAxKSB7XG4gICAgICAgIHNoYXBlUGF0aCA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICAgIG5ld1NoYXBlID0gdHJ1ZTtcbiAgICAgICAgc2hhcGVzLnB1c2goc2hhcGVQYXRoKTtcbiAgICAgICAgc2VnbWVudENvdW50ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2hhcGVzO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFB1Y2tlckFuZEJsb2F0TW9kaWZpZXIoKSB7fVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU2hhcGVNb2RpZmllcl0sIFB1Y2tlckFuZEJsb2F0TW9kaWZpZXIpO1xuXG4gIFB1Y2tlckFuZEJsb2F0TW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXMgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSkge1xuICAgIHRoaXMuZ2V0VmFsdWUgPSB0aGlzLnByb2Nlc3NLZXlzO1xuICAgIHRoaXMuYW1vdW50ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5hLCAwLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISF0aGlzLmFtb3VudC5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO1xuICB9O1xuXG4gIFB1Y2tlckFuZEJsb2F0TW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NQYXRoID0gZnVuY3Rpb24gKHBhdGgsIGFtb3VudCkge1xuICAgIHZhciBwZXJjZW50ID0gYW1vdW50IC8gMTAwO1xuICAgIHZhciBjZW50ZXJQb2ludCA9IFswLCAwXTtcbiAgICB2YXIgcGF0aExlbmd0aCA9IHBhdGguX2xlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcGF0aExlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjZW50ZXJQb2ludFswXSArPSBwYXRoLnZbaV1bMF07XG4gICAgICBjZW50ZXJQb2ludFsxXSArPSBwYXRoLnZbaV1bMV07XG4gICAgfVxuXG4gICAgY2VudGVyUG9pbnRbMF0gLz0gcGF0aExlbmd0aDtcbiAgICBjZW50ZXJQb2ludFsxXSAvPSBwYXRoTGVuZ3RoO1xuICAgIHZhciBjbG9uZWRQYXRoID0gc2hhcGVQb29sLm5ld0VsZW1lbnQoKTtcbiAgICBjbG9uZWRQYXRoLmMgPSBwYXRoLmM7XG4gICAgdmFyIHZYO1xuICAgIHZhciB2WTtcbiAgICB2YXIgb1g7XG4gICAgdmFyIG9ZO1xuICAgIHZhciBpWDtcbiAgICB2YXIgaVk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcGF0aExlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2WCA9IHBhdGgudltpXVswXSArIChjZW50ZXJQb2ludFswXSAtIHBhdGgudltpXVswXSkgKiBwZXJjZW50O1xuICAgICAgdlkgPSBwYXRoLnZbaV1bMV0gKyAoY2VudGVyUG9pbnRbMV0gLSBwYXRoLnZbaV1bMV0pICogcGVyY2VudDtcbiAgICAgIG9YID0gcGF0aC5vW2ldWzBdICsgKGNlbnRlclBvaW50WzBdIC0gcGF0aC5vW2ldWzBdKSAqIC1wZXJjZW50O1xuICAgICAgb1kgPSBwYXRoLm9baV1bMV0gKyAoY2VudGVyUG9pbnRbMV0gLSBwYXRoLm9baV1bMV0pICogLXBlcmNlbnQ7XG4gICAgICBpWCA9IHBhdGguaVtpXVswXSArIChjZW50ZXJQb2ludFswXSAtIHBhdGguaVtpXVswXSkgKiAtcGVyY2VudDtcbiAgICAgIGlZID0gcGF0aC5pW2ldWzFdICsgKGNlbnRlclBvaW50WzFdIC0gcGF0aC5pW2ldWzFdKSAqIC1wZXJjZW50O1xuICAgICAgY2xvbmVkUGF0aC5zZXRUcmlwbGVBdCh2WCwgdlksIG9YLCBvWSwgaVgsIGlZLCBpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVkUGF0aDtcbiAgfTtcblxuICBQdWNrZXJBbmRCbG9hdE1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzU2hhcGVzID0gZnVuY3Rpb24gKF9pc0ZpcnN0RnJhbWUpIHtcbiAgICB2YXIgc2hhcGVQYXRocztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5zaGFwZXMubGVuZ3RoO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBhbW91bnQgPSB0aGlzLmFtb3VudC52O1xuXG4gICAgaWYgKGFtb3VudCAhPT0gMCkge1xuICAgICAgdmFyIHNoYXBlRGF0YTtcbiAgICAgIHZhciBsb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHNoYXBlRGF0YSA9IHRoaXMuc2hhcGVzW2ldO1xuICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbiA9IHNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgICBpZiAoISghc2hhcGVEYXRhLnNoYXBlLl9tZGYgJiYgIXRoaXMuX21kZiAmJiAhX2lzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7XG4gICAgICAgICAgc2hhcGVEYXRhLnNoYXBlLl9tZGYgPSB0cnVlO1xuICAgICAgICAgIHNoYXBlUGF0aHMgPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuc2hhcGVzO1xuICAgICAgICAgIGpMZW4gPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuX2xlbmd0aDtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMucHJvY2Vzc1BhdGgoc2hhcGVQYXRoc1tqXSwgYW1vdW50KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2hhcGVEYXRhLnNoYXBlLnBhdGhzID0gc2hhcGVEYXRhLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICB2YXIgVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkZWZhdWx0VmVjdG9yID0gWzAsIDBdO1xuXG4gICAgZnVuY3Rpb24gYXBwbHlUb01hdHJpeChtYXQpIHtcbiAgICAgIHZhciBfbWRmID0gdGhpcy5fbWRmO1xuICAgICAgdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKTtcbiAgICAgIHRoaXMuX21kZiA9IHRoaXMuX21kZiB8fCBfbWRmO1xuXG4gICAgICBpZiAodGhpcy5hKSB7XG4gICAgICAgIG1hdC50cmFuc2xhdGUoLXRoaXMuYS52WzBdLCAtdGhpcy5hLnZbMV0sIHRoaXMuYS52WzJdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucykge1xuICAgICAgICBtYXQuc2NhbGUodGhpcy5zLnZbMF0sIHRoaXMucy52WzFdLCB0aGlzLnMudlsyXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNrKSB7XG4gICAgICAgIG1hdC5za2V3RnJvbUF4aXMoLXRoaXMuc2sudiwgdGhpcy5zYS52KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucikge1xuICAgICAgICBtYXQucm90YXRlKC10aGlzLnIudik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXQucm90YXRlWigtdGhpcy5yei52KS5yb3RhdGVZKHRoaXMucnkudikucm90YXRlWCh0aGlzLnJ4LnYpLnJvdGF0ZVooLXRoaXMub3IudlsyXSkucm90YXRlWSh0aGlzLm9yLnZbMV0pLnJvdGF0ZVgodGhpcy5vci52WzBdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5wLnMpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5wLnopIHtcbiAgICAgICAgICBtYXQudHJhbnNsYXRlKHRoaXMucHgudiwgdGhpcy5weS52LCAtdGhpcy5wei52KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXQudHJhbnNsYXRlKHRoaXMucHgudiwgdGhpcy5weS52LCAwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF0LnRyYW5zbGF0ZSh0aGlzLnAudlswXSwgdGhpcy5wLnZbMV0sIC10aGlzLnAudlsyXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0tleXMoZm9yY2VSZW5kZXIpIHtcbiAgICAgIGlmICh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNEaXJ0eSkge1xuICAgICAgICB0aGlzLnByZWNhbGN1bGF0ZU1hdHJpeCgpO1xuICAgICAgICB0aGlzLl9pc0RpcnR5ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG5cbiAgICAgIGlmICh0aGlzLl9tZGYgfHwgZm9yY2VSZW5kZXIpIHtcbiAgICAgICAgdmFyIGZyYW1lUmF0ZTtcbiAgICAgICAgdGhpcy52LmNsb25lRnJvbVByb3BzKHRoaXMucHJlLnByb3BzKTtcblxuICAgICAgICBpZiAodGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgMSkge1xuICAgICAgICAgIHRoaXMudi50cmFuc2xhdGUoLXRoaXMuYS52WzBdLCAtdGhpcy5hLnZbMV0sIHRoaXMuYS52WzJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPCAyKSB7XG4gICAgICAgICAgdGhpcy52LnNjYWxlKHRoaXMucy52WzBdLCB0aGlzLnMudlsxXSwgdGhpcy5zLnZbMl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2sgJiYgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgMykge1xuICAgICAgICAgIHRoaXMudi5za2V3RnJvbUF4aXMoLXRoaXMuc2sudiwgdGhpcy5zYS52KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnIgJiYgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgNCkge1xuICAgICAgICAgIHRoaXMudi5yb3RhdGUoLXRoaXMuci52KTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5yICYmIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDQpIHtcbiAgICAgICAgICB0aGlzLnYucm90YXRlWigtdGhpcy5yei52KS5yb3RhdGVZKHRoaXMucnkudikucm90YXRlWCh0aGlzLnJ4LnYpLnJvdGF0ZVooLXRoaXMub3IudlsyXSkucm90YXRlWSh0aGlzLm9yLnZbMV0pLnJvdGF0ZVgodGhpcy5vci52WzBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmF1dG9PcmllbnRlZCkge1xuICAgICAgICAgIHZhciB2MTtcbiAgICAgICAgICB2YXIgdjI7XG4gICAgICAgICAgZnJhbWVSYXRlID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuXG4gICAgICAgICAgaWYgKHRoaXMucCAmJiB0aGlzLnAua2V5ZnJhbWVzICYmIHRoaXMucC5nZXRWYWx1ZUF0VGltZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucC5fY2FjaGluZy5sYXN0RnJhbWUgKyB0aGlzLnAub2Zmc2V0VGltZSA8PSB0aGlzLnAua2V5ZnJhbWVzWzBdLnQpIHtcbiAgICAgICAgICAgICAgdjEgPSB0aGlzLnAuZ2V0VmFsdWVBdFRpbWUoKHRoaXMucC5rZXlmcmFtZXNbMF0udCArIDAuMDEpIC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgICAgdjIgPSB0aGlzLnAuZ2V0VmFsdWVBdFRpbWUodGhpcy5wLmtleWZyYW1lc1swXS50IC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wLl9jYWNoaW5nLmxhc3RGcmFtZSArIHRoaXMucC5vZmZzZXRUaW1lID49IHRoaXMucC5rZXlmcmFtZXNbdGhpcy5wLmtleWZyYW1lcy5sZW5ndGggLSAxXS50KSB7XG4gICAgICAgICAgICAgIHYxID0gdGhpcy5wLmdldFZhbHVlQXRUaW1lKHRoaXMucC5rZXlmcmFtZXNbdGhpcy5wLmtleWZyYW1lcy5sZW5ndGggLSAxXS50IC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgICAgdjIgPSB0aGlzLnAuZ2V0VmFsdWVBdFRpbWUoKHRoaXMucC5rZXlmcmFtZXNbdGhpcy5wLmtleWZyYW1lcy5sZW5ndGggLSAxXS50IC0gMC4wNSkgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdjEgPSB0aGlzLnAucHY7XG4gICAgICAgICAgICAgIHYyID0gdGhpcy5wLmdldFZhbHVlQXRUaW1lKCh0aGlzLnAuX2NhY2hpbmcubGFzdEZyYW1lICsgdGhpcy5wLm9mZnNldFRpbWUgLSAwLjAxKSAvIGZyYW1lUmF0ZSwgdGhpcy5wLm9mZnNldFRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5weCAmJiB0aGlzLnB4LmtleWZyYW1lcyAmJiB0aGlzLnB5LmtleWZyYW1lcyAmJiB0aGlzLnB4LmdldFZhbHVlQXRUaW1lICYmIHRoaXMucHkuZ2V0VmFsdWVBdFRpbWUpIHtcbiAgICAgICAgICAgIHYxID0gW107XG4gICAgICAgICAgICB2MiA9IFtdO1xuICAgICAgICAgICAgdmFyIHB4ID0gdGhpcy5weDtcbiAgICAgICAgICAgIHZhciBweSA9IHRoaXMucHk7XG5cbiAgICAgICAgICAgIGlmIChweC5fY2FjaGluZy5sYXN0RnJhbWUgKyBweC5vZmZzZXRUaW1lIDw9IHB4LmtleWZyYW1lc1swXS50KSB7XG4gICAgICAgICAgICAgIHYxWzBdID0gcHguZ2V0VmFsdWVBdFRpbWUoKHB4LmtleWZyYW1lc1swXS50ICsgMC4wMSkgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgICB2MVsxXSA9IHB5LmdldFZhbHVlQXRUaW1lKChweS5rZXlmcmFtZXNbMF0udCArIDAuMDEpIC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgICAgdjJbMF0gPSBweC5nZXRWYWx1ZUF0VGltZShweC5rZXlmcmFtZXNbMF0udCAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICAgIHYyWzFdID0gcHkuZ2V0VmFsdWVBdFRpbWUocHkua2V5ZnJhbWVzWzBdLnQgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChweC5fY2FjaGluZy5sYXN0RnJhbWUgKyBweC5vZmZzZXRUaW1lID49IHB4LmtleWZyYW1lc1tweC5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCkge1xuICAgICAgICAgICAgICB2MVswXSA9IHB4LmdldFZhbHVlQXRUaW1lKHB4LmtleWZyYW1lc1tweC5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICAgIHYxWzFdID0gcHkuZ2V0VmFsdWVBdFRpbWUocHkua2V5ZnJhbWVzW3B5LmtleWZyYW1lcy5sZW5ndGggLSAxXS50IC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgICAgdjJbMF0gPSBweC5nZXRWYWx1ZUF0VGltZSgocHgua2V5ZnJhbWVzW3B4LmtleWZyYW1lcy5sZW5ndGggLSAxXS50IC0gMC4wMSkgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgICB2MlsxXSA9IHB5LmdldFZhbHVlQXRUaW1lKChweS5rZXlmcmFtZXNbcHkua2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQgLSAwLjAxKSAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2MSA9IFtweC5wdiwgcHkucHZdO1xuICAgICAgICAgICAgICB2MlswXSA9IHB4LmdldFZhbHVlQXRUaW1lKChweC5fY2FjaGluZy5sYXN0RnJhbWUgKyBweC5vZmZzZXRUaW1lIC0gMC4wMSkgLyBmcmFtZVJhdGUsIHB4Lm9mZnNldFRpbWUpO1xuICAgICAgICAgICAgICB2MlsxXSA9IHB5LmdldFZhbHVlQXRUaW1lKChweS5fY2FjaGluZy5sYXN0RnJhbWUgKyBweS5vZmZzZXRUaW1lIC0gMC4wMSkgLyBmcmFtZVJhdGUsIHB5Lm9mZnNldFRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2MiA9IGRlZmF1bHRWZWN0b3I7XG4gICAgICAgICAgICB2MSA9IHYyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMudi5yb3RhdGUoLU1hdGguYXRhbjIodjFbMV0gLSB2MlsxXSwgdjFbMF0gLSB2MlswXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5wICYmIHRoaXMuZGF0YS5wLnMpIHtcbiAgICAgICAgICBpZiAodGhpcy5kYXRhLnAueikge1xuICAgICAgICAgICAgdGhpcy52LnRyYW5zbGF0ZSh0aGlzLnB4LnYsIHRoaXMucHkudiwgLXRoaXMucHoudik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudi50cmFuc2xhdGUodGhpcy5weC52LCB0aGlzLnB5LnYsIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnYudHJhbnNsYXRlKHRoaXMucC52WzBdLCB0aGlzLnAudlsxXSwgLXRoaXMucC52WzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZWNhbGN1bGF0ZU1hdHJpeCgpIHtcbiAgICAgIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA9IDA7XG4gICAgICB0aGlzLnByZS5yZXNldCgpO1xuXG4gICAgICBpZiAoIXRoaXMuYS5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucHJlLnRyYW5zbGF0ZSgtdGhpcy5hLnZbMF0sIC10aGlzLmEudlsxXSwgdGhpcy5hLnZbMl0pO1xuICAgICAgICB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMucy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucHJlLnNjYWxlKHRoaXMucy52WzBdLCB0aGlzLnMudlsxXSwgdGhpcy5zLnZbMl0pO1xuICAgICAgICB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zaykge1xuICAgICAgICBpZiAoIXRoaXMuc2suZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCAmJiAhdGhpcy5zYS5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5wcmUuc2tld0Zyb21BeGlzKC10aGlzLnNrLnYsIHRoaXMuc2Eudik7XG4gICAgICAgICAgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zID0gMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucikge1xuICAgICAgICBpZiAoIXRoaXMuci5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5wcmUucm90YXRlKC10aGlzLnIudik7XG4gICAgICAgICAgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zID0gNDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghdGhpcy5yei5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoICYmICF0aGlzLnJ5LmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggJiYgIXRoaXMucnguZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCAmJiAhdGhpcy5vci5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucHJlLnJvdGF0ZVooLXRoaXMucnoudikucm90YXRlWSh0aGlzLnJ5LnYpLnJvdGF0ZVgodGhpcy5yeC52KS5yb3RhdGVaKC10aGlzLm9yLnZbMl0pLnJvdGF0ZVkodGhpcy5vci52WzFdKS5yb3RhdGVYKHRoaXMub3IudlswXSk7XG4gICAgICAgIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA9IDQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXV0b09yaWVudCgpIHsvL1xuICAgICAgLy8gdmFyIHByZXZQID0gdGhpcy5nZXRWYWx1ZUF0VGltZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKSB7XG4gICAgICB0aGlzLl9hZGREeW5hbWljUHJvcGVydHkocHJvcCk7XG5cbiAgICAgIHRoaXMuZWxlbS5hZGREeW5hbWljUHJvcGVydHkocHJvcCk7XG4gICAgICB0aGlzLl9pc0RpcnR5ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBUcmFuc2Zvcm1Qcm9wZXJ0eShlbGVtLCBkYXRhLCBjb250YWluZXIpIHtcbiAgICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgICB0aGlzLmZyYW1lSWQgPSAtMTtcbiAgICAgIHRoaXMucHJvcFR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICB0aGlzLnYgPSBuZXcgTWF0cml4KCk7IC8vIFByZWNhbGN1bGF0ZWQgbWF0cml4IHdpdGggbm9uIGFuaW1hdGVkIHByb3BlcnRpZXNcblxuICAgICAgdGhpcy5wcmUgPSBuZXcgTWF0cml4KCk7XG4gICAgICB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPSAwO1xuICAgICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGNvbnRhaW5lciB8fCBlbGVtKTtcblxuICAgICAgaWYgKGRhdGEucCAmJiBkYXRhLnAucykge1xuICAgICAgICB0aGlzLnB4ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wLngsIDAsIDAsIHRoaXMpO1xuICAgICAgICB0aGlzLnB5ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wLnksIDAsIDAsIHRoaXMpO1xuXG4gICAgICAgIGlmIChkYXRhLnAueikge1xuICAgICAgICAgIHRoaXMucHogPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnAueiwgMCwgMCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucCB8fCB7XG4gICAgICAgICAgazogWzAsIDAsIDBdXG4gICAgICAgIH0sIDEsIDAsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5yeCkge1xuICAgICAgICB0aGlzLnJ4ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5yeCwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICAgICAgdGhpcy5yeSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucnksIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgICAgIHRoaXMucnogPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnJ6LCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuXG4gICAgICAgIGlmIChkYXRhLm9yLmtbMF0udGkpIHtcbiAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICB2YXIgbGVuID0gZGF0YS5vci5rLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgZGF0YS5vci5rW2ldLnRvID0gbnVsbDtcbiAgICAgICAgICAgIGRhdGEub3Iua1tpXS50aSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vciA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEub3IsIDEsIGRlZ1RvUmFkcywgdGhpcyk7IC8vIHNoIEluZGljYXRlcyBpdCBuZWVkcyB0byBiZSBjYXBwZWQgYmV0d2VlbiAtMTgwIGFuZCAxODBcblxuICAgICAgICB0aGlzLm9yLnNoID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuciA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuciB8fCB7XG4gICAgICAgICAgazogMFxuICAgICAgICB9LCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5zaykge1xuICAgICAgICB0aGlzLnNrID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zaywgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICAgICAgdGhpcy5zYSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuc2EsIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYSB8fCB7XG4gICAgICAgIGs6IFswLCAwLCAwXVxuICAgICAgfSwgMSwgMCwgdGhpcyk7XG4gICAgICB0aGlzLnMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnMgfHwge1xuICAgICAgICBrOiBbMTAwLCAxMDAsIDEwMF1cbiAgICAgIH0sIDEsIDAuMDEsIHRoaXMpOyAvLyBPcGFjaXR5IGlzIG5vdCBwYXJ0IG9mIHRoZSB0cmFuc2Zvcm0gcHJvcGVydGllcywgdGhhdCdzIHdoeSBpdCB3b24ndCB1c2UgdGhpcy5keW5hbWljUHJvcGVydGllcy4gVGhhdCB3YXkgdHJhbnNmb3JtcyB3b24ndCBnZXQgdXBkYXRlZCBpZiBvcGFjaXR5IGNoYW5nZXMuXG5cbiAgICAgIGlmIChkYXRhLm8pIHtcbiAgICAgICAgdGhpcy5vID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vLCAwLCAwLjAxLCBlbGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubyA9IHtcbiAgICAgICAgICBfbWRmOiBmYWxzZSxcbiAgICAgICAgICB2OiAxXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzRGlydHkgPSB0cnVlO1xuXG4gICAgICBpZiAoIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZ2V0VmFsdWUodHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgVHJhbnNmb3JtUHJvcGVydHkucHJvdG90eXBlID0ge1xuICAgICAgYXBwbHlUb01hdHJpeDogYXBwbHlUb01hdHJpeCxcbiAgICAgIGdldFZhbHVlOiBwcm9jZXNzS2V5cyxcbiAgICAgIHByZWNhbGN1bGF0ZU1hdHJpeDogcHJlY2FsY3VsYXRlTWF0cml4LFxuICAgICAgYXV0b09yaWVudDogYXV0b09yaWVudFxuICAgIH07XG4gICAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBUcmFuc2Zvcm1Qcm9wZXJ0eSk7XG4gICAgVHJhbnNmb3JtUHJvcGVydHkucHJvdG90eXBlLmFkZER5bmFtaWNQcm9wZXJ0eSA9IGFkZER5bmFtaWNQcm9wZXJ0eTtcbiAgICBUcmFuc2Zvcm1Qcm9wZXJ0eS5wcm90b3R5cGUuX2FkZER5bmFtaWNQcm9wZXJ0eSA9IER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lci5wcm90b3R5cGUuYWRkRHluYW1pY1Byb3BlcnR5O1xuXG4gICAgZnVuY3Rpb24gZ2V0VHJhbnNmb3JtUHJvcGVydHkoZWxlbSwgZGF0YSwgY29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gbmV3IFRyYW5zZm9ybVByb3BlcnR5KGVsZW0sIGRhdGEsIGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFRyYW5zZm9ybVByb3BlcnR5OiBnZXRUcmFuc2Zvcm1Qcm9wZXJ0eVxuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBSZXBlYXRlck1vZGlmaWVyKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW1NoYXBlTW9kaWZpZXJdLCBSZXBlYXRlck1vZGlmaWVyKTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEpIHtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5wcm9jZXNzS2V5cztcbiAgICB0aGlzLmMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmMsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMubyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEubywgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy50ciA9IFRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeS5nZXRUcmFuc2Zvcm1Qcm9wZXJ0eShlbGVtLCBkYXRhLnRyLCB0aGlzKTtcbiAgICB0aGlzLnNvID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS50ci5zbywgMCwgMC4wMSwgdGhpcyk7XG4gICAgdGhpcy5lbyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudHIuZW8sIDAsIDAuMDEsIHRoaXMpO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cbiAgICBpZiAoIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmdldFZhbHVlKHRydWUpO1xuICAgIH1cblxuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoO1xuICAgIHRoaXMucE1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLnJNYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5zTWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMudE1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgfTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5hcHBseVRyYW5zZm9ybXMgPSBmdW5jdGlvbiAocE1hdHJpeCwgck1hdHJpeCwgc01hdHJpeCwgdHJhbnNmb3JtLCBwZXJjLCBpbnYpIHtcbiAgICB2YXIgZGlyID0gaW52ID8gLTEgOiAxO1xuICAgIHZhciBzY2FsZVggPSB0cmFuc2Zvcm0ucy52WzBdICsgKDEgLSB0cmFuc2Zvcm0ucy52WzBdKSAqICgxIC0gcGVyYyk7XG4gICAgdmFyIHNjYWxlWSA9IHRyYW5zZm9ybS5zLnZbMV0gKyAoMSAtIHRyYW5zZm9ybS5zLnZbMV0pICogKDEgLSBwZXJjKTtcbiAgICBwTWF0cml4LnRyYW5zbGF0ZSh0cmFuc2Zvcm0ucC52WzBdICogZGlyICogcGVyYywgdHJhbnNmb3JtLnAudlsxXSAqIGRpciAqIHBlcmMsIHRyYW5zZm9ybS5wLnZbMl0pO1xuICAgIHJNYXRyaXgudHJhbnNsYXRlKC10cmFuc2Zvcm0uYS52WzBdLCAtdHJhbnNmb3JtLmEudlsxXSwgdHJhbnNmb3JtLmEudlsyXSk7XG4gICAgck1hdHJpeC5yb3RhdGUoLXRyYW5zZm9ybS5yLnYgKiBkaXIgKiBwZXJjKTtcbiAgICByTWF0cml4LnRyYW5zbGF0ZSh0cmFuc2Zvcm0uYS52WzBdLCB0cmFuc2Zvcm0uYS52WzFdLCB0cmFuc2Zvcm0uYS52WzJdKTtcbiAgICBzTWF0cml4LnRyYW5zbGF0ZSgtdHJhbnNmb3JtLmEudlswXSwgLXRyYW5zZm9ybS5hLnZbMV0sIHRyYW5zZm9ybS5hLnZbMl0pO1xuICAgIHNNYXRyaXguc2NhbGUoaW52ID8gMSAvIHNjYWxlWCA6IHNjYWxlWCwgaW52ID8gMSAvIHNjYWxlWSA6IHNjYWxlWSk7XG4gICAgc01hdHJpeC50cmFuc2xhdGUodHJhbnNmb3JtLmEudlswXSwgdHJhbnNmb3JtLmEudlsxXSwgdHJhbnNmb3JtLmEudlsyXSk7XG4gIH07XG5cbiAgUmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChlbGVtLCBhcnIsIHBvcywgZWxlbXNEYXRhKSB7XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICB0aGlzLmFyciA9IGFycjtcbiAgICB0aGlzLnBvcyA9IHBvcztcbiAgICB0aGlzLmVsZW1zRGF0YSA9IGVsZW1zRGF0YTtcbiAgICB0aGlzLl9jdXJyZW50Q29waWVzID0gMDtcbiAgICB0aGlzLl9lbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuX2dyb3VwcyA9IFtdO1xuICAgIHRoaXMuZnJhbWVJZCA9IC0xO1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmluaXRNb2RpZmllclByb3BlcnRpZXMoZWxlbSwgYXJyW3Bvc10pO1xuXG4gICAgd2hpbGUgKHBvcyA+IDApIHtcbiAgICAgIHBvcyAtPSAxOyAvLyB0aGlzLl9lbGVtZW50cy51bnNoaWZ0KGFyci5zcGxpY2UocG9zLDEpWzBdKTtcblxuICAgICAgdGhpcy5fZWxlbWVudHMudW5zaGlmdChhcnJbcG9zXSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmsgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdldFZhbHVlKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5yZXNldEVsZW1lbnRzID0gZnVuY3Rpb24gKGVsZW1lbnRzKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgZWxlbWVudHNbaV0uX3Byb2Nlc3NlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAoZWxlbWVudHNbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgdGhpcy5yZXNldEVsZW1lbnRzKGVsZW1lbnRzW2ldLml0KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgUmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUuY2xvbmVFbGVtZW50cyA9IGZ1bmN0aW9uIChlbGVtZW50cykge1xuICAgIHZhciBuZXdFbGVtZW50cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZWxlbWVudHMpKTtcbiAgICB0aGlzLnJlc2V0RWxlbWVudHMobmV3RWxlbWVudHMpO1xuICAgIHJldHVybiBuZXdFbGVtZW50cztcbiAgfTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5jaGFuZ2VHcm91cFJlbmRlciA9IGZ1bmN0aW9uIChlbGVtZW50cywgcmVuZGVyRmxhZykge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGVsZW1lbnRzW2ldLl9yZW5kZXIgPSByZW5kZXJGbGFnO1xuXG4gICAgICBpZiAoZWxlbWVudHNbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VHcm91cFJlbmRlcihlbGVtZW50c1tpXS5pdCwgcmVuZGVyRmxhZyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFJlcGVhdGVyTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NTaGFwZXMgPSBmdW5jdGlvbiAoX2lzRmlyc3RGcmFtZSkge1xuICAgIHZhciBpdGVtcztcbiAgICB2YXIgaXRlbXNUcmFuc2Zvcm07XG4gICAgdmFyIGk7XG4gICAgdmFyIGRpcjtcbiAgICB2YXIgY29udDtcbiAgICB2YXIgaGFzUmVsb2FkZWQgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLl9tZGYgfHwgX2lzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIGNvcGllcyA9IE1hdGguY2VpbCh0aGlzLmMudik7XG5cbiAgICAgIGlmICh0aGlzLl9ncm91cHMubGVuZ3RoIDwgY29waWVzKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLl9ncm91cHMubGVuZ3RoIDwgY29waWVzKSB7XG4gICAgICAgICAgdmFyIGdyb3VwID0ge1xuICAgICAgICAgICAgaXQ6IHRoaXMuY2xvbmVFbGVtZW50cyh0aGlzLl9lbGVtZW50cyksXG4gICAgICAgICAgICB0eTogJ2dyJ1xuICAgICAgICAgIH07XG4gICAgICAgICAgZ3JvdXAuaXQucHVzaCh7XG4gICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgIGl4OiAxLFxuICAgICAgICAgICAgICBrOiBbMCwgMF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBubTogJ1RyYW5zZm9ybScsXG4gICAgICAgICAgICBvOiB7XG4gICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgIGl4OiA3LFxuICAgICAgICAgICAgICBrOiAxMDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwOiB7XG4gICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgIGl4OiAyLFxuICAgICAgICAgICAgICBrOiBbMCwgMF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByOiB7XG4gICAgICAgICAgICAgIGE6IDEsXG4gICAgICAgICAgICAgIGl4OiA2LFxuICAgICAgICAgICAgICBrOiBbe1xuICAgICAgICAgICAgICAgIHM6IDAsXG4gICAgICAgICAgICAgICAgZTogMCxcbiAgICAgICAgICAgICAgICB0OiAwXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBzOiAwLFxuICAgICAgICAgICAgICAgIGU6IDAsXG4gICAgICAgICAgICAgICAgdDogMVxuICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHM6IHtcbiAgICAgICAgICAgICAgYTogMCxcbiAgICAgICAgICAgICAgaXg6IDMsXG4gICAgICAgICAgICAgIGs6IFsxMDAsIDEwMF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYToge1xuICAgICAgICAgICAgICBhOiAwLFxuICAgICAgICAgICAgICBpeDogNSxcbiAgICAgICAgICAgICAgazogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNrOiB7XG4gICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgIGl4OiA0LFxuICAgICAgICAgICAgICBrOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHk6ICd0cidcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmFyci5zcGxpY2UoMCwgMCwgZ3JvdXApO1xuXG4gICAgICAgICAgdGhpcy5fZ3JvdXBzLnNwbGljZSgwLCAwLCBncm91cCk7XG5cbiAgICAgICAgICB0aGlzLl9jdXJyZW50Q29waWVzICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVsZW0ucmVsb2FkU2hhcGVzKCk7XG4gICAgICAgIGhhc1JlbG9hZGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgY29udCA9IDA7XG4gICAgICB2YXIgcmVuZGVyRmxhZztcblxuICAgICAgZm9yIChpID0gMDsgaSA8PSB0aGlzLl9ncm91cHMubGVuZ3RoIC0gMTsgaSArPSAxKSB7XG4gICAgICAgIHJlbmRlckZsYWcgPSBjb250IDwgY29waWVzO1xuICAgICAgICB0aGlzLl9ncm91cHNbaV0uX3JlbmRlciA9IHJlbmRlckZsYWc7XG4gICAgICAgIHRoaXMuY2hhbmdlR3JvdXBSZW5kZXIodGhpcy5fZ3JvdXBzW2ldLml0LCByZW5kZXJGbGFnKTtcblxuICAgICAgICBpZiAoIXJlbmRlckZsYWcpIHtcbiAgICAgICAgICB2YXIgZWxlbXMgPSB0aGlzLmVsZW1zRGF0YVtpXS5pdDtcbiAgICAgICAgICB2YXIgdHJhbnNmb3JtRGF0YSA9IGVsZW1zW2VsZW1zLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgaWYgKHRyYW5zZm9ybURhdGEudHJhbnNmb3JtLm9wLnYgIT09IDApIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybURhdGEudHJhbnNmb3JtLm9wLl9tZGYgPSB0cnVlO1xuICAgICAgICAgICAgdHJhbnNmb3JtRGF0YS50cmFuc2Zvcm0ub3AudiA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybURhdGEudHJhbnNmb3JtLm9wLl9tZGYgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2N1cnJlbnRDb3BpZXMgPSBjb3BpZXM7IC8vLyAvXG5cbiAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm8udjtcbiAgICAgIHZhciBvZmZzZXRNb2R1bG8gPSBvZmZzZXQgJSAxO1xuICAgICAgdmFyIHJvdW5kT2Zmc2V0ID0gb2Zmc2V0ID4gMCA/IE1hdGguZmxvb3Iob2Zmc2V0KSA6IE1hdGguY2VpbChvZmZzZXQpO1xuICAgICAgdmFyIHBQcm9wcyA9IHRoaXMucE1hdHJpeC5wcm9wcztcbiAgICAgIHZhciByUHJvcHMgPSB0aGlzLnJNYXRyaXgucHJvcHM7XG4gICAgICB2YXIgc1Byb3BzID0gdGhpcy5zTWF0cml4LnByb3BzO1xuICAgICAgdGhpcy5wTWF0cml4LnJlc2V0KCk7XG4gICAgICB0aGlzLnJNYXRyaXgucmVzZXQoKTtcbiAgICAgIHRoaXMuc01hdHJpeC5yZXNldCgpO1xuICAgICAgdGhpcy50TWF0cml4LnJlc2V0KCk7XG4gICAgICB0aGlzLm1hdHJpeC5yZXNldCgpO1xuICAgICAgdmFyIGl0ZXJhdGlvbiA9IDA7XG5cbiAgICAgIGlmIChvZmZzZXQgPiAwKSB7XG4gICAgICAgIHdoaWxlIChpdGVyYXRpb24gPCByb3VuZE9mZnNldCkge1xuICAgICAgICAgIHRoaXMuYXBwbHlUcmFuc2Zvcm1zKHRoaXMucE1hdHJpeCwgdGhpcy5yTWF0cml4LCB0aGlzLnNNYXRyaXgsIHRoaXMudHIsIDEsIGZhbHNlKTtcbiAgICAgICAgICBpdGVyYXRpb24gKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvZmZzZXRNb2R1bG8pIHtcbiAgICAgICAgICB0aGlzLmFwcGx5VHJhbnNmb3Jtcyh0aGlzLnBNYXRyaXgsIHRoaXMuck1hdHJpeCwgdGhpcy5zTWF0cml4LCB0aGlzLnRyLCBvZmZzZXRNb2R1bG8sIGZhbHNlKTtcbiAgICAgICAgICBpdGVyYXRpb24gKz0gb2Zmc2V0TW9kdWxvO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgd2hpbGUgKGl0ZXJhdGlvbiA+IHJvdW5kT2Zmc2V0KSB7XG4gICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybXModGhpcy5wTWF0cml4LCB0aGlzLnJNYXRyaXgsIHRoaXMuc01hdHJpeCwgdGhpcy50ciwgMSwgdHJ1ZSk7XG4gICAgICAgICAgaXRlcmF0aW9uIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2Zmc2V0TW9kdWxvKSB7XG4gICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybXModGhpcy5wTWF0cml4LCB0aGlzLnJNYXRyaXgsIHRoaXMuc01hdHJpeCwgdGhpcy50ciwgLW9mZnNldE1vZHVsbywgdHJ1ZSk7XG4gICAgICAgICAgaXRlcmF0aW9uIC09IG9mZnNldE1vZHVsbztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpID0gdGhpcy5kYXRhLm0gPT09IDEgPyAwIDogdGhpcy5fY3VycmVudENvcGllcyAtIDE7XG4gICAgICBkaXIgPSB0aGlzLmRhdGEubSA9PT0gMSA/IDEgOiAtMTtcbiAgICAgIGNvbnQgPSB0aGlzLl9jdXJyZW50Q29waWVzO1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgakxlbjtcblxuICAgICAgd2hpbGUgKGNvbnQpIHtcbiAgICAgICAgaXRlbXMgPSB0aGlzLmVsZW1zRGF0YVtpXS5pdDtcbiAgICAgICAgaXRlbXNUcmFuc2Zvcm0gPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS50cmFuc2Zvcm0ubVByb3BzLnYucHJvcHM7XG4gICAgICAgIGpMZW4gPSBpdGVtc1RyYW5zZm9ybS5sZW5ndGg7XG4gICAgICAgIGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdLnRyYW5zZm9ybS5tUHJvcHMuX21kZiA9IHRydWU7XG4gICAgICAgIGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdLnRyYW5zZm9ybS5vcC5fbWRmID0gdHJ1ZTtcbiAgICAgICAgaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0udHJhbnNmb3JtLm9wLnYgPSB0aGlzLl9jdXJyZW50Q29waWVzID09PSAxID8gdGhpcy5zby52IDogdGhpcy5zby52ICsgKHRoaXMuZW8udiAtIHRoaXMuc28udikgKiAoaSAvICh0aGlzLl9jdXJyZW50Q29waWVzIC0gMSkpO1xuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IDApIHtcbiAgICAgICAgICBpZiAoaSAhPT0gMCAmJiBkaXIgPT09IDEgfHwgaSAhPT0gdGhpcy5fY3VycmVudENvcGllcyAtIDEgJiYgZGlyID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybXModGhpcy5wTWF0cml4LCB0aGlzLnJNYXRyaXgsIHRoaXMuc01hdHJpeCwgdGhpcy50ciwgMSwgZmFsc2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMubWF0cml4LnRyYW5zZm9ybShyUHJvcHNbMF0sIHJQcm9wc1sxXSwgclByb3BzWzJdLCByUHJvcHNbM10sIHJQcm9wc1s0XSwgclByb3BzWzVdLCByUHJvcHNbNl0sIHJQcm9wc1s3XSwgclByb3BzWzhdLCByUHJvcHNbOV0sIHJQcm9wc1sxMF0sIHJQcm9wc1sxMV0sIHJQcm9wc1sxMl0sIHJQcm9wc1sxM10sIHJQcm9wc1sxNF0sIHJQcm9wc1sxNV0pO1xuICAgICAgICAgIHRoaXMubWF0cml4LnRyYW5zZm9ybShzUHJvcHNbMF0sIHNQcm9wc1sxXSwgc1Byb3BzWzJdLCBzUHJvcHNbM10sIHNQcm9wc1s0XSwgc1Byb3BzWzVdLCBzUHJvcHNbNl0sIHNQcm9wc1s3XSwgc1Byb3BzWzhdLCBzUHJvcHNbOV0sIHNQcm9wc1sxMF0sIHNQcm9wc1sxMV0sIHNQcm9wc1sxMl0sIHNQcm9wc1sxM10sIHNQcm9wc1sxNF0sIHNQcm9wc1sxNV0pO1xuICAgICAgICAgIHRoaXMubWF0cml4LnRyYW5zZm9ybShwUHJvcHNbMF0sIHBQcm9wc1sxXSwgcFByb3BzWzJdLCBwUHJvcHNbM10sIHBQcm9wc1s0XSwgcFByb3BzWzVdLCBwUHJvcHNbNl0sIHBQcm9wc1s3XSwgcFByb3BzWzhdLCBwUHJvcHNbOV0sIHBQcm9wc1sxMF0sIHBQcm9wc1sxMV0sIHBQcm9wc1sxMl0sIHBQcm9wc1sxM10sIHBQcm9wc1sxNF0sIHBQcm9wc1sxNV0pO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgaXRlbXNUcmFuc2Zvcm1bal0gPSB0aGlzLm1hdHJpeC5wcm9wc1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLm1hdHJpeC5yZXNldCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubWF0cml4LnJlc2V0KCk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBpdGVtc1RyYW5zZm9ybVtqXSA9IHRoaXMubWF0cml4LnByb3BzW2pdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGl0ZXJhdGlvbiArPSAxO1xuICAgICAgICBjb250IC09IDE7XG4gICAgICAgIGkgKz0gZGlyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250ID0gdGhpcy5fY3VycmVudENvcGllcztcbiAgICAgIGkgPSAwO1xuICAgICAgZGlyID0gMTtcblxuICAgICAgd2hpbGUgKGNvbnQpIHtcbiAgICAgICAgaXRlbXMgPSB0aGlzLmVsZW1zRGF0YVtpXS5pdDtcbiAgICAgICAgaXRlbXNUcmFuc2Zvcm0gPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS50cmFuc2Zvcm0ubVByb3BzLnYucHJvcHM7XG4gICAgICAgIGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdLnRyYW5zZm9ybS5tUHJvcHMuX21kZiA9IGZhbHNlO1xuICAgICAgICBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS50cmFuc2Zvcm0ub3AuX21kZiA9IGZhbHNlO1xuICAgICAgICBjb250IC09IDE7XG4gICAgICAgIGkgKz0gZGlyO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoYXNSZWxvYWRlZDtcbiAgfTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5hZGRTaGFwZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGZ1bmN0aW9uIFJvdW5kQ29ybmVyc01vZGlmaWVyKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW1NoYXBlTW9kaWZpZXJdLCBSb3VuZENvcm5lcnNNb2RpZmllcik7XG5cbiAgUm91bmRDb3JuZXJzTW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXMgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSkge1xuICAgIHRoaXMuZ2V0VmFsdWUgPSB0aGlzLnByb2Nlc3NLZXlzO1xuICAgIHRoaXMucmQgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnIsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXRoaXMucmQuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aDtcbiAgfTtcblxuICBSb3VuZENvcm5lcnNNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1BhdGggPSBmdW5jdGlvbiAocGF0aCwgcm91bmQpIHtcbiAgICB2YXIgY2xvbmVkUGF0aCA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgY2xvbmVkUGF0aC5jID0gcGF0aC5jO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBwYXRoLl9sZW5ndGg7XG4gICAgdmFyIGN1cnJlbnRWO1xuICAgIHZhciBjdXJyZW50STtcbiAgICB2YXIgY3VycmVudE87XG4gICAgdmFyIGNsb3NlclY7XG4gICAgdmFyIGRpc3RhbmNlO1xuICAgIHZhciBuZXdQb3NQZXJjO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHZYO1xuICAgIHZhciB2WTtcbiAgICB2YXIgb1g7XG4gICAgdmFyIG9ZO1xuICAgIHZhciBpWDtcbiAgICB2YXIgaVk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGN1cnJlbnRWID0gcGF0aC52W2ldO1xuICAgICAgY3VycmVudE8gPSBwYXRoLm9baV07XG4gICAgICBjdXJyZW50SSA9IHBhdGguaVtpXTtcblxuICAgICAgaWYgKGN1cnJlbnRWWzBdID09PSBjdXJyZW50T1swXSAmJiBjdXJyZW50VlsxXSA9PT0gY3VycmVudE9bMV0gJiYgY3VycmVudFZbMF0gPT09IGN1cnJlbnRJWzBdICYmIGN1cnJlbnRWWzFdID09PSBjdXJyZW50SVsxXSkge1xuICAgICAgICBpZiAoKGkgPT09IDAgfHwgaSA9PT0gbGVuIC0gMSkgJiYgIXBhdGguYykge1xuICAgICAgICAgIGNsb25lZFBhdGguc2V0VHJpcGxlQXQoY3VycmVudFZbMF0sIGN1cnJlbnRWWzFdLCBjdXJyZW50T1swXSwgY3VycmVudE9bMV0sIGN1cnJlbnRJWzBdLCBjdXJyZW50SVsxXSwgaW5kZXgpO1xuICAgICAgICAgIC8qIGNsb25lZFBhdGgudltpbmRleF0gPSBjdXJyZW50VjtcclxuICAgICAgICAgICAgICAgICAgY2xvbmVkUGF0aC5vW2luZGV4XSA9IGN1cnJlbnRPO1xyXG4gICAgICAgICAgICAgICAgICBjbG9uZWRQYXRoLmlbaW5kZXhdID0gY3VycmVudEk7ICovXG5cbiAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICBjbG9zZXJWID0gcGF0aC52W2xlbiAtIDFdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbG9zZXJWID0gcGF0aC52W2kgLSAxXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyhjdXJyZW50VlswXSAtIGNsb3NlclZbMF0sIDIpICsgTWF0aC5wb3coY3VycmVudFZbMV0gLSBjbG9zZXJWWzFdLCAyKSk7XG4gICAgICAgICAgbmV3UG9zUGVyYyA9IGRpc3RhbmNlID8gTWF0aC5taW4oZGlzdGFuY2UgLyAyLCByb3VuZCkgLyBkaXN0YW5jZSA6IDA7XG4gICAgICAgICAgaVggPSBjdXJyZW50VlswXSArIChjbG9zZXJWWzBdIC0gY3VycmVudFZbMF0pICogbmV3UG9zUGVyYztcbiAgICAgICAgICB2WCA9IGlYO1xuICAgICAgICAgIGlZID0gY3VycmVudFZbMV0gLSAoY3VycmVudFZbMV0gLSBjbG9zZXJWWzFdKSAqIG5ld1Bvc1BlcmM7XG4gICAgICAgICAgdlkgPSBpWTtcbiAgICAgICAgICBvWCA9IHZYIC0gKHZYIC0gY3VycmVudFZbMF0pICogcm91bmRDb3JuZXI7XG4gICAgICAgICAgb1kgPSB2WSAtICh2WSAtIGN1cnJlbnRWWzFdKSAqIHJvdW5kQ29ybmVyO1xuICAgICAgICAgIGNsb25lZFBhdGguc2V0VHJpcGxlQXQodlgsIHZZLCBvWCwgb1ksIGlYLCBpWSwgaW5kZXgpO1xuICAgICAgICAgIGluZGV4ICs9IDE7XG5cbiAgICAgICAgICBpZiAoaSA9PT0gbGVuIC0gMSkge1xuICAgICAgICAgICAgY2xvc2VyViA9IHBhdGgudlswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xvc2VyViA9IHBhdGgudltpICsgMV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coY3VycmVudFZbMF0gLSBjbG9zZXJWWzBdLCAyKSArIE1hdGgucG93KGN1cnJlbnRWWzFdIC0gY2xvc2VyVlsxXSwgMikpO1xuICAgICAgICAgIG5ld1Bvc1BlcmMgPSBkaXN0YW5jZSA/IE1hdGgubWluKGRpc3RhbmNlIC8gMiwgcm91bmQpIC8gZGlzdGFuY2UgOiAwO1xuICAgICAgICAgIG9YID0gY3VycmVudFZbMF0gKyAoY2xvc2VyVlswXSAtIGN1cnJlbnRWWzBdKSAqIG5ld1Bvc1BlcmM7XG4gICAgICAgICAgdlggPSBvWDtcbiAgICAgICAgICBvWSA9IGN1cnJlbnRWWzFdICsgKGNsb3NlclZbMV0gLSBjdXJyZW50VlsxXSkgKiBuZXdQb3NQZXJjO1xuICAgICAgICAgIHZZID0gb1k7XG4gICAgICAgICAgaVggPSB2WCAtICh2WCAtIGN1cnJlbnRWWzBdKSAqIHJvdW5kQ29ybmVyO1xuICAgICAgICAgIGlZID0gdlkgLSAodlkgLSBjdXJyZW50VlsxXSkgKiByb3VuZENvcm5lcjtcbiAgICAgICAgICBjbG9uZWRQYXRoLnNldFRyaXBsZUF0KHZYLCB2WSwgb1gsIG9ZLCBpWCwgaVksIGluZGV4KTtcbiAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9uZWRQYXRoLnNldFRyaXBsZUF0KHBhdGgudltpXVswXSwgcGF0aC52W2ldWzFdLCBwYXRoLm9baV1bMF0sIHBhdGgub1tpXVsxXSwgcGF0aC5pW2ldWzBdLCBwYXRoLmlbaV1bMV0sIGluZGV4KTtcbiAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVkUGF0aDtcbiAgfTtcblxuICBSb3VuZENvcm5lcnNNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1NoYXBlcyA9IGZ1bmN0aW9uIChfaXNGaXJzdEZyYW1lKSB7XG4gICAgdmFyIHNoYXBlUGF0aHM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuc2hhcGVzLmxlbmd0aDtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgcmQgPSB0aGlzLnJkLnY7XG5cbiAgICBpZiAocmQgIT09IDApIHtcbiAgICAgIHZhciBzaGFwZURhdGE7XG4gICAgICB2YXIgbG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBzaGFwZURhdGEgPSB0aGlzLnNoYXBlc1tpXTtcbiAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgICAgaWYgKCEoIXNoYXBlRGF0YS5zaGFwZS5fbWRmICYmICF0aGlzLl9tZGYgJiYgIV9pc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpO1xuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICBzaGFwZVBhdGhzID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlcztcbiAgICAgICAgICBqTGVuID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnByb2Nlc3NQYXRoKHNoYXBlUGF0aHNbal0sIHJkKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2hhcGVEYXRhLnNoYXBlLnBhdGhzID0gc2hhcGVEYXRhLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBmbG9hdEVxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoYSAtIGIpICogMTAwMDAwIDw9IE1hdGgubWluKE1hdGguYWJzKGEpLCBNYXRoLmFicyhiKSk7XG4gIH1cblxuICBmdW5jdGlvbiBmbG9hdFplcm8oZikge1xuICAgIHJldHVybiBNYXRoLmFicyhmKSA8PSAwLjAwMDAxO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVycChwMCwgcDEsIGFtb3VudCkge1xuICAgIHJldHVybiBwMCAqICgxIC0gYW1vdW50KSArIHAxICogYW1vdW50O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVycFBvaW50KHAwLCBwMSwgYW1vdW50KSB7XG4gICAgcmV0dXJuIFtsZXJwKHAwWzBdLCBwMVswXSwgYW1vdW50KSwgbGVycChwMFsxXSwgcDFbMV0sIGFtb3VudCldO1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhZFJvb3RzKGEsIGIsIGMpIHtcbiAgICAvLyBubyByb290XG4gICAgaWYgKGEgPT09IDApIHJldHVybiBbXTtcbiAgICB2YXIgcyA9IGIgKiBiIC0gNCAqIGEgKiBjOyAvLyBDb21wbGV4IHJvb3RzXG5cbiAgICBpZiAocyA8IDApIHJldHVybiBbXTtcbiAgICB2YXIgc2luZ2xlUm9vdCA9IC1iIC8gKDIgKiBhKTsgLy8gMSByb290XG5cbiAgICBpZiAocyA9PT0gMCkgcmV0dXJuIFtzaW5nbGVSb290XTtcbiAgICB2YXIgZGVsdGEgPSBNYXRoLnNxcnQocykgLyAoMiAqIGEpOyAvLyAyIHJvb3RzXG5cbiAgICByZXR1cm4gW3NpbmdsZVJvb3QgLSBkZWx0YSwgc2luZ2xlUm9vdCArIGRlbHRhXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvbHlub21pYWxDb2VmZmljaWVudHMocDAsIHAxLCBwMiwgcDMpIHtcbiAgICByZXR1cm4gWy1wMCArIDMgKiBwMSAtIDMgKiBwMiArIHAzLCAzICogcDAgLSA2ICogcDEgKyAzICogcDIsIC0zICogcDAgKyAzICogcDEsIHAwXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpbmdsZVBvaW50KHApIHtcbiAgICByZXR1cm4gbmV3IFBvbHlub21pYWxCZXppZXIocCwgcCwgcCwgcCwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gUG9seW5vbWlhbEJlemllcihwMCwgcDEsIHAyLCBwMywgbGluZWFyaXplKSB7XG4gICAgaWYgKGxpbmVhcml6ZSAmJiBwb2ludEVxdWFsKHAwLCBwMSkpIHtcbiAgICAgIHAxID0gbGVycFBvaW50KHAwLCBwMywgMSAvIDMpO1xuICAgIH1cblxuICAgIGlmIChsaW5lYXJpemUgJiYgcG9pbnRFcXVhbChwMiwgcDMpKSB7XG4gICAgICBwMiA9IGxlcnBQb2ludChwMCwgcDMsIDIgLyAzKTtcbiAgICB9XG5cbiAgICB2YXIgY29lZmZ4ID0gcG9seW5vbWlhbENvZWZmaWNpZW50cyhwMFswXSwgcDFbMF0sIHAyWzBdLCBwM1swXSk7XG4gICAgdmFyIGNvZWZmeSA9IHBvbHlub21pYWxDb2VmZmljaWVudHMocDBbMV0sIHAxWzFdLCBwMlsxXSwgcDNbMV0pO1xuICAgIHRoaXMuYSA9IFtjb2VmZnhbMF0sIGNvZWZmeVswXV07XG4gICAgdGhpcy5iID0gW2NvZWZmeFsxXSwgY29lZmZ5WzFdXTtcbiAgICB0aGlzLmMgPSBbY29lZmZ4WzJdLCBjb2VmZnlbMl1dO1xuICAgIHRoaXMuZCA9IFtjb2VmZnhbM10sIGNvZWZmeVszXV07XG4gICAgdGhpcy5wb2ludHMgPSBbcDAsIHAxLCBwMiwgcDNdO1xuICB9XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiBbKCh0aGlzLmFbMF0gKiB0ICsgdGhpcy5iWzBdKSAqIHQgKyB0aGlzLmNbMF0pICogdCArIHRoaXMuZFswXSwgKCh0aGlzLmFbMV0gKiB0ICsgdGhpcy5iWzFdKSAqIHQgKyB0aGlzLmNbMV0pICogdCArIHRoaXMuZFsxXV07XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuZGVyaXZhdGl2ZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIFsoMyAqIHQgKiB0aGlzLmFbMF0gKyAyICogdGhpcy5iWzBdKSAqIHQgKyB0aGlzLmNbMF0sICgzICogdCAqIHRoaXMuYVsxXSArIDIgKiB0aGlzLmJbMV0pICogdCArIHRoaXMuY1sxXV07XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUudGFuZ2VudEFuZ2xlID0gZnVuY3Rpb24gKHQpIHtcbiAgICB2YXIgcCA9IHRoaXMuZGVyaXZhdGl2ZSh0KTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMihwWzFdLCBwWzBdKTtcbiAgfTtcblxuICBQb2x5bm9taWFsQmV6aWVyLnByb3RvdHlwZS5ub3JtYWxBbmdsZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIHAgPSB0aGlzLmRlcml2YXRpdmUodCk7XG4gICAgcmV0dXJuIE1hdGguYXRhbjIocFswXSwgcFsxXSk7XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuaW5mbGVjdGlvblBvaW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGVub20gPSB0aGlzLmFbMV0gKiB0aGlzLmJbMF0gLSB0aGlzLmFbMF0gKiB0aGlzLmJbMV07XG4gICAgaWYgKGZsb2F0WmVybyhkZW5vbSkpIHJldHVybiBbXTtcbiAgICB2YXIgdGN1c3AgPSAtMC41ICogKHRoaXMuYVsxXSAqIHRoaXMuY1swXSAtIHRoaXMuYVswXSAqIHRoaXMuY1sxXSkgLyBkZW5vbTtcbiAgICB2YXIgc3F1YXJlID0gdGN1c3AgKiB0Y3VzcCAtIDEgLyAzICogKHRoaXMuYlsxXSAqIHRoaXMuY1swXSAtIHRoaXMuYlswXSAqIHRoaXMuY1sxXSkgLyBkZW5vbTtcbiAgICBpZiAoc3F1YXJlIDwgMCkgcmV0dXJuIFtdO1xuICAgIHZhciByb290ID0gTWF0aC5zcXJ0KHNxdWFyZSk7XG5cbiAgICBpZiAoZmxvYXRaZXJvKHJvb3QpKSB7XG4gICAgICBpZiAocm9vdCA+IDAgJiYgcm9vdCA8IDEpIHJldHVybiBbdGN1c3BdO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHJldHVybiBbdGN1c3AgLSByb290LCB0Y3VzcCArIHJvb3RdLmZpbHRlcihmdW5jdGlvbiAocikge1xuICAgICAgcmV0dXJuIHIgPiAwICYmIHIgPCAxO1xuICAgIH0pO1xuICB9O1xuXG4gIFBvbHlub21pYWxCZXppZXIucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gKHQpIHtcbiAgICBpZiAodCA8PSAwKSByZXR1cm4gW3NpbmdsZVBvaW50KHRoaXMucG9pbnRzWzBdKSwgdGhpc107XG4gICAgaWYgKHQgPj0gMSkgcmV0dXJuIFt0aGlzLCBzaW5nbGVQb2ludCh0aGlzLnBvaW50c1t0aGlzLnBvaW50cy5sZW5ndGggLSAxXSldO1xuICAgIHZhciBwMTAgPSBsZXJwUG9pbnQodGhpcy5wb2ludHNbMF0sIHRoaXMucG9pbnRzWzFdLCB0KTtcbiAgICB2YXIgcDExID0gbGVycFBvaW50KHRoaXMucG9pbnRzWzFdLCB0aGlzLnBvaW50c1syXSwgdCk7XG4gICAgdmFyIHAxMiA9IGxlcnBQb2ludCh0aGlzLnBvaW50c1syXSwgdGhpcy5wb2ludHNbM10sIHQpO1xuICAgIHZhciBwMjAgPSBsZXJwUG9pbnQocDEwLCBwMTEsIHQpO1xuICAgIHZhciBwMjEgPSBsZXJwUG9pbnQocDExLCBwMTIsIHQpO1xuICAgIHZhciBwMyA9IGxlcnBQb2ludChwMjAsIHAyMSwgdCk7XG4gICAgcmV0dXJuIFtuZXcgUG9seW5vbWlhbEJlemllcih0aGlzLnBvaW50c1swXSwgcDEwLCBwMjAsIHAzLCB0cnVlKSwgbmV3IFBvbHlub21pYWxCZXppZXIocDMsIHAyMSwgcDEyLCB0aGlzLnBvaW50c1szXSwgdHJ1ZSldO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGV4dHJlbWEoYmV6LCBjb21wKSB7XG4gICAgdmFyIG1pbiA9IGJlei5wb2ludHNbMF1bY29tcF07XG4gICAgdmFyIG1heCA9IGJlei5wb2ludHNbYmV6LnBvaW50cy5sZW5ndGggLSAxXVtjb21wXTtcblxuICAgIGlmIChtaW4gPiBtYXgpIHtcbiAgICAgIHZhciBlID0gbWF4O1xuICAgICAgbWF4ID0gbWluO1xuICAgICAgbWluID0gZTtcbiAgICB9IC8vIERlcml2YXRpdmUgcm9vdHMgdG8gZmluZCBtaW4vbWF4XG5cblxuICAgIHZhciBmID0gcXVhZFJvb3RzKDMgKiBiZXouYVtjb21wXSwgMiAqIGJlei5iW2NvbXBdLCBiZXouY1tjb21wXSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGYubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChmW2ldID4gMCAmJiBmW2ldIDwgMSkge1xuICAgICAgICB2YXIgdmFsID0gYmV6LnBvaW50KGZbaV0pW2NvbXBdO1xuICAgICAgICBpZiAodmFsIDwgbWluKSBtaW4gPSB2YWw7ZWxzZSBpZiAodmFsID4gbWF4KSBtYXggPSB2YWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1pbjogbWluLFxuICAgICAgbWF4OiBtYXhcbiAgICB9O1xuICB9XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuYm91bmRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBleHRyZW1hKHRoaXMsIDApLFxuICAgICAgeTogZXh0cmVtYSh0aGlzLCAxKVxuICAgIH07XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuYm91bmRpbmdCb3ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvdW5kcyA9IHRoaXMuYm91bmRzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IGJvdW5kcy54Lm1pbixcbiAgICAgIHJpZ2h0OiBib3VuZHMueC5tYXgsXG4gICAgICB0b3A6IGJvdW5kcy55Lm1pbixcbiAgICAgIGJvdHRvbTogYm91bmRzLnkubWF4LFxuICAgICAgd2lkdGg6IGJvdW5kcy54Lm1heCAtIGJvdW5kcy54Lm1pbixcbiAgICAgIGhlaWdodDogYm91bmRzLnkubWF4IC0gYm91bmRzLnkubWluLFxuICAgICAgY3g6IChib3VuZHMueC5tYXggKyBib3VuZHMueC5taW4pIC8gMixcbiAgICAgIGN5OiAoYm91bmRzLnkubWF4ICsgYm91bmRzLnkubWluKSAvIDJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGludGVyc2VjdERhdGEoYmV6LCB0MSwgdDIpIHtcbiAgICB2YXIgYm94ID0gYmV6LmJvdW5kaW5nQm94KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN4OiBib3guY3gsXG4gICAgICBjeTogYm94LmN5LFxuICAgICAgd2lkdGg6IGJveC53aWR0aCxcbiAgICAgIGhlaWdodDogYm94LmhlaWdodCxcbiAgICAgIGJlejogYmV6LFxuICAgICAgdDogKHQxICsgdDIpIC8gMixcbiAgICAgIHQxOiB0MSxcbiAgICAgIHQyOiB0MlxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzcGxpdERhdGEoZGF0YSkge1xuICAgIHZhciBzcGxpdCA9IGRhdGEuYmV6LnNwbGl0KDAuNSk7XG4gICAgcmV0dXJuIFtpbnRlcnNlY3REYXRhKHNwbGl0WzBdLCBkYXRhLnQxLCBkYXRhLnQpLCBpbnRlcnNlY3REYXRhKHNwbGl0WzFdLCBkYXRhLnQsIGRhdGEudDIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJveEludGVyc2VjdChiMSwgYjIpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoYjEuY3ggLSBiMi5jeCkgKiAyIDwgYjEud2lkdGggKyBiMi53aWR0aCAmJiBNYXRoLmFicyhiMS5jeSAtIGIyLmN5KSAqIDIgPCBiMS5oZWlnaHQgKyBiMi5oZWlnaHQ7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnNlY3RzSW1wbChkMSwgZDIsIGRlcHRoLCB0b2xlcmFuY2UsIGludGVyc2VjdGlvbnMsIG1heFJlY3Vyc2lvbikge1xuICAgIGlmICghYm94SW50ZXJzZWN0KGQxLCBkMikpIHJldHVybjtcblxuICAgIGlmIChkZXB0aCA+PSBtYXhSZWN1cnNpb24gfHwgZDEud2lkdGggPD0gdG9sZXJhbmNlICYmIGQxLmhlaWdodCA8PSB0b2xlcmFuY2UgJiYgZDIud2lkdGggPD0gdG9sZXJhbmNlICYmIGQyLmhlaWdodCA8PSB0b2xlcmFuY2UpIHtcbiAgICAgIGludGVyc2VjdGlvbnMucHVzaChbZDEudCwgZDIudF0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkMXMgPSBzcGxpdERhdGEoZDEpO1xuICAgIHZhciBkMnMgPSBzcGxpdERhdGEoZDIpO1xuICAgIGludGVyc2VjdHNJbXBsKGQxc1swXSwgZDJzWzBdLCBkZXB0aCArIDEsIHRvbGVyYW5jZSwgaW50ZXJzZWN0aW9ucywgbWF4UmVjdXJzaW9uKTtcbiAgICBpbnRlcnNlY3RzSW1wbChkMXNbMF0sIGQyc1sxXSwgZGVwdGggKyAxLCB0b2xlcmFuY2UsIGludGVyc2VjdGlvbnMsIG1heFJlY3Vyc2lvbik7XG4gICAgaW50ZXJzZWN0c0ltcGwoZDFzWzFdLCBkMnNbMF0sIGRlcHRoICsgMSwgdG9sZXJhbmNlLCBpbnRlcnNlY3Rpb25zLCBtYXhSZWN1cnNpb24pO1xuICAgIGludGVyc2VjdHNJbXBsKGQxc1sxXSwgZDJzWzFdLCBkZXB0aCArIDEsIHRvbGVyYW5jZSwgaW50ZXJzZWN0aW9ucywgbWF4UmVjdXJzaW9uKTtcbiAgfVxuXG4gIFBvbHlub21pYWxCZXppZXIucHJvdG90eXBlLmludGVyc2VjdGlvbnMgPSBmdW5jdGlvbiAob3RoZXIsIHRvbGVyYW5jZSwgbWF4UmVjdXJzaW9uKSB7XG4gICAgaWYgKHRvbGVyYW5jZSA9PT0gdW5kZWZpbmVkKSB0b2xlcmFuY2UgPSAyO1xuICAgIGlmIChtYXhSZWN1cnNpb24gPT09IHVuZGVmaW5lZCkgbWF4UmVjdXJzaW9uID0gNztcbiAgICB2YXIgaW50ZXJzZWN0aW9ucyA9IFtdO1xuICAgIGludGVyc2VjdHNJbXBsKGludGVyc2VjdERhdGEodGhpcywgMCwgMSksIGludGVyc2VjdERhdGEob3RoZXIsIDAsIDEpLCAwLCB0b2xlcmFuY2UsIGludGVyc2VjdGlvbnMsIG1heFJlY3Vyc2lvbik7XG4gICAgcmV0dXJuIGludGVyc2VjdGlvbnM7XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5zaGFwZVNlZ21lbnQgPSBmdW5jdGlvbiAoc2hhcGVQYXRoLCBpbmRleCkge1xuICAgIHZhciBuZXh0SW5kZXggPSAoaW5kZXggKyAxKSAlIHNoYXBlUGF0aC5sZW5ndGgoKTtcbiAgICByZXR1cm4gbmV3IFBvbHlub21pYWxCZXppZXIoc2hhcGVQYXRoLnZbaW5kZXhdLCBzaGFwZVBhdGgub1tpbmRleF0sIHNoYXBlUGF0aC5pW25leHRJbmRleF0sIHNoYXBlUGF0aC52W25leHRJbmRleF0sIHRydWUpO1xuICB9O1xuXG4gIFBvbHlub21pYWxCZXppZXIuc2hhcGVTZWdtZW50SW52ZXJ0ZWQgPSBmdW5jdGlvbiAoc2hhcGVQYXRoLCBpbmRleCkge1xuICAgIHZhciBuZXh0SW5kZXggPSAoaW5kZXggKyAxKSAlIHNoYXBlUGF0aC5sZW5ndGgoKTtcbiAgICByZXR1cm4gbmV3IFBvbHlub21pYWxCZXppZXIoc2hhcGVQYXRoLnZbbmV4dEluZGV4XSwgc2hhcGVQYXRoLmlbbmV4dEluZGV4XSwgc2hhcGVQYXRoLm9baW5kZXhdLCBzaGFwZVBhdGgudltpbmRleF0sIHRydWUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNyb3NzUHJvZHVjdChhLCBiKSB7XG4gICAgcmV0dXJuIFthWzFdICogYlsyXSAtIGFbMl0gKiBiWzFdLCBhWzJdICogYlswXSAtIGFbMF0gKiBiWzJdLCBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVJbnRlcnNlY3Rpb24oc3RhcnQxLCBlbmQxLCBzdGFydDIsIGVuZDIpIHtcbiAgICB2YXIgdjEgPSBbc3RhcnQxWzBdLCBzdGFydDFbMV0sIDFdO1xuICAgIHZhciB2MiA9IFtlbmQxWzBdLCBlbmQxWzFdLCAxXTtcbiAgICB2YXIgdjMgPSBbc3RhcnQyWzBdLCBzdGFydDJbMV0sIDFdO1xuICAgIHZhciB2NCA9IFtlbmQyWzBdLCBlbmQyWzFdLCAxXTtcbiAgICB2YXIgciA9IGNyb3NzUHJvZHVjdChjcm9zc1Byb2R1Y3QodjEsIHYyKSwgY3Jvc3NQcm9kdWN0KHYzLCB2NCkpO1xuICAgIGlmIChmbG9hdFplcm8oclsyXSkpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBbclswXSAvIHJbMl0sIHJbMV0gLyByWzJdXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvbGFyT2Zmc2V0KHAsIGFuZ2xlLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gW3BbMF0gKyBNYXRoLmNvcyhhbmdsZSkgKiBsZW5ndGgsIHBbMV0gLSBNYXRoLnNpbihhbmdsZSkgKiBsZW5ndGhdO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9pbnREaXN0YW5jZShwMSwgcDIpIHtcbiAgICByZXR1cm4gTWF0aC5oeXBvdChwMVswXSAtIHAyWzBdLCBwMVsxXSAtIHAyWzFdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50RXF1YWwocDEsIHAyKSB7XG4gICAgcmV0dXJuIGZsb2F0RXF1YWwocDFbMF0sIHAyWzBdKSAmJiBmbG9hdEVxdWFsKHAxWzFdLCBwMlsxXSk7XG4gIH1cblxuICBmdW5jdGlvbiBaaWdaYWdNb2RpZmllcigpIHt9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTaGFwZU1vZGlmaWVyXSwgWmlnWmFnTW9kaWZpZXIpO1xuXG4gIFppZ1phZ01vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEpIHtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5wcm9jZXNzS2V5cztcbiAgICB0aGlzLmFtcGxpdHVkZSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucywgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5mcmVxdWVuY3kgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnIsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMucG9pbnRzVHlwZSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucHQsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSB0aGlzLmFtcGxpdHVkZS5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoICE9PSAwIHx8IHRoaXMuZnJlcXVlbmN5LmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggIT09IDAgfHwgdGhpcy5wb2ludHNUeXBlLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggIT09IDA7XG4gIH07XG5cbiAgZnVuY3Rpb24gc2V0UG9pbnQob3V0cHV0QmV6aWVyLCBwb2ludCwgYW5nbGUsIGRpcmVjdGlvbiwgYW1wbGl0dWRlLCBvdXRBbXBsaXR1ZGUsIGluQW1wbGl0dWRlKSB7XG4gICAgdmFyIGFuZ08gPSBhbmdsZSAtIE1hdGguUEkgLyAyO1xuICAgIHZhciBhbmdJID0gYW5nbGUgKyBNYXRoLlBJIC8gMjtcbiAgICB2YXIgcHggPSBwb2ludFswXSArIE1hdGguY29zKGFuZ2xlKSAqIGRpcmVjdGlvbiAqIGFtcGxpdHVkZTtcbiAgICB2YXIgcHkgPSBwb2ludFsxXSAtIE1hdGguc2luKGFuZ2xlKSAqIGRpcmVjdGlvbiAqIGFtcGxpdHVkZTtcbiAgICBvdXRwdXRCZXppZXIuc2V0VHJpcGxlQXQocHgsIHB5LCBweCArIE1hdGguY29zKGFuZ08pICogb3V0QW1wbGl0dWRlLCBweSAtIE1hdGguc2luKGFuZ08pICogb3V0QW1wbGl0dWRlLCBweCArIE1hdGguY29zKGFuZ0kpICogaW5BbXBsaXR1ZGUsIHB5IC0gTWF0aC5zaW4oYW5nSSkgKiBpbkFtcGxpdHVkZSwgb3V0cHV0QmV6aWVyLmxlbmd0aCgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFBlcnBlbmRpY3VsYXJWZWN0b3IocHQxLCBwdDIpIHtcbiAgICB2YXIgdmVjdG9yID0gW3B0MlswXSAtIHB0MVswXSwgcHQyWzFdIC0gcHQxWzFdXTtcbiAgICB2YXIgcm90ID0gLU1hdGguUEkgKiAwLjU7XG4gICAgdmFyIHJvdGF0ZWRWZWN0b3IgPSBbTWF0aC5jb3Mocm90KSAqIHZlY3RvclswXSAtIE1hdGguc2luKHJvdCkgKiB2ZWN0b3JbMV0sIE1hdGguc2luKHJvdCkgKiB2ZWN0b3JbMF0gKyBNYXRoLmNvcyhyb3QpICogdmVjdG9yWzFdXTtcbiAgICByZXR1cm4gcm90YXRlZFZlY3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFByb2plY3RpbmdBbmdsZShwYXRoLCBjdXIpIHtcbiAgICB2YXIgcHJldkluZGV4ID0gY3VyID09PSAwID8gcGF0aC5sZW5ndGgoKSAtIDEgOiBjdXIgLSAxO1xuICAgIHZhciBuZXh0SW5kZXggPSAoY3VyICsgMSkgJSBwYXRoLmxlbmd0aCgpO1xuICAgIHZhciBwcmV2UG9pbnQgPSBwYXRoLnZbcHJldkluZGV4XTtcbiAgICB2YXIgbmV4dFBvaW50ID0gcGF0aC52W25leHRJbmRleF07XG4gICAgdmFyIHBWZWN0b3IgPSBnZXRQZXJwZW5kaWN1bGFyVmVjdG9yKHByZXZQb2ludCwgbmV4dFBvaW50KTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMigwLCAxKSAtIE1hdGguYXRhbjIocFZlY3RvclsxXSwgcFZlY3RvclswXSk7XG4gIH1cblxuICBmdW5jdGlvbiB6aWdaYWdDb3JuZXIob3V0cHV0QmV6aWVyLCBwYXRoLCBjdXIsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUsIGRpcmVjdGlvbikge1xuICAgIHZhciBhbmdsZSA9IGdldFByb2plY3RpbmdBbmdsZShwYXRoLCBjdXIpO1xuICAgIHZhciBwb2ludCA9IHBhdGgudltjdXIgJSBwYXRoLl9sZW5ndGhdO1xuICAgIHZhciBwcmV2UG9pbnQgPSBwYXRoLnZbY3VyID09PSAwID8gcGF0aC5fbGVuZ3RoIC0gMSA6IGN1ciAtIDFdO1xuICAgIHZhciBuZXh0UG9pbnQgPSBwYXRoLnZbKGN1ciArIDEpICUgcGF0aC5fbGVuZ3RoXTtcbiAgICB2YXIgcHJldkRpc3QgPSBwb2ludFR5cGUgPT09IDIgPyBNYXRoLnNxcnQoTWF0aC5wb3cocG9pbnRbMF0gLSBwcmV2UG9pbnRbMF0sIDIpICsgTWF0aC5wb3cocG9pbnRbMV0gLSBwcmV2UG9pbnRbMV0sIDIpKSA6IDA7XG4gICAgdmFyIG5leHREaXN0ID0gcG9pbnRUeXBlID09PSAyID8gTWF0aC5zcXJ0KE1hdGgucG93KHBvaW50WzBdIC0gbmV4dFBvaW50WzBdLCAyKSArIE1hdGgucG93KHBvaW50WzFdIC0gbmV4dFBvaW50WzFdLCAyKSkgOiAwO1xuICAgIHNldFBvaW50KG91dHB1dEJlemllciwgcGF0aC52W2N1ciAlIHBhdGguX2xlbmd0aF0sIGFuZ2xlLCBkaXJlY3Rpb24sIGFtcGxpdHVkZSwgbmV4dERpc3QgLyAoKGZyZXF1ZW5jeSArIDEpICogMiksIHByZXZEaXN0IC8gKChmcmVxdWVuY3kgKyAxKSAqIDIpLCBwb2ludFR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gemlnWmFnU2VnbWVudChvdXRwdXRCZXppZXIsIHNlZ21lbnQsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUsIGRpcmVjdGlvbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZnJlcXVlbmN5OyBpICs9IDEpIHtcbiAgICAgIHZhciB0ID0gKGkgKyAxKSAvIChmcmVxdWVuY3kgKyAxKTtcbiAgICAgIHZhciBkaXN0ID0gcG9pbnRUeXBlID09PSAyID8gTWF0aC5zcXJ0KE1hdGgucG93KHNlZ21lbnQucG9pbnRzWzNdWzBdIC0gc2VnbWVudC5wb2ludHNbMF1bMF0sIDIpICsgTWF0aC5wb3coc2VnbWVudC5wb2ludHNbM11bMV0gLSBzZWdtZW50LnBvaW50c1swXVsxXSwgMikpIDogMDtcbiAgICAgIHZhciBhbmdsZSA9IHNlZ21lbnQubm9ybWFsQW5nbGUodCk7XG4gICAgICB2YXIgcG9pbnQgPSBzZWdtZW50LnBvaW50KHQpO1xuICAgICAgc2V0UG9pbnQob3V0cHV0QmV6aWVyLCBwb2ludCwgYW5nbGUsIGRpcmVjdGlvbiwgYW1wbGl0dWRlLCBkaXN0IC8gKChmcmVxdWVuY3kgKyAxKSAqIDIpLCBkaXN0IC8gKChmcmVxdWVuY3kgKyAxKSAqIDIpLCBwb2ludFR5cGUpO1xuICAgICAgZGlyZWN0aW9uID0gLWRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlyZWN0aW9uO1xuICB9XG5cbiAgWmlnWmFnTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NQYXRoID0gZnVuY3Rpb24gKHBhdGgsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUpIHtcbiAgICB2YXIgY291bnQgPSBwYXRoLl9sZW5ndGg7XG4gICAgdmFyIGNsb25lZFBhdGggPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgIGNsb25lZFBhdGguYyA9IHBhdGguYztcblxuICAgIGlmICghcGF0aC5jKSB7XG4gICAgICBjb3VudCAtPSAxO1xuICAgIH1cblxuICAgIGlmIChjb3VudCA9PT0gMCkgcmV0dXJuIGNsb25lZFBhdGg7XG4gICAgdmFyIGRpcmVjdGlvbiA9IC0xO1xuICAgIHZhciBzZWdtZW50ID0gUG9seW5vbWlhbEJlemllci5zaGFwZVNlZ21lbnQocGF0aCwgMCk7XG4gICAgemlnWmFnQ29ybmVyKGNsb25lZFBhdGgsIHBhdGgsIDAsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUsIGRpcmVjdGlvbik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpICs9IDEpIHtcbiAgICAgIGRpcmVjdGlvbiA9IHppZ1phZ1NlZ21lbnQoY2xvbmVkUGF0aCwgc2VnbWVudCwgYW1wbGl0dWRlLCBmcmVxdWVuY3ksIHBvaW50VHlwZSwgLWRpcmVjdGlvbik7XG5cbiAgICAgIGlmIChpID09PSBjb3VudCAtIDEgJiYgIXBhdGguYykge1xuICAgICAgICBzZWdtZW50ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlZ21lbnQgPSBQb2x5bm9taWFsQmV6aWVyLnNoYXBlU2VnbWVudChwYXRoLCAoaSArIDEpICUgY291bnQpO1xuICAgICAgfVxuXG4gICAgICB6aWdaYWdDb3JuZXIoY2xvbmVkUGF0aCwgcGF0aCwgaSArIDEsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUsIGRpcmVjdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lZFBhdGg7XG4gIH07XG5cbiAgWmlnWmFnTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NTaGFwZXMgPSBmdW5jdGlvbiAoX2lzRmlyc3RGcmFtZSkge1xuICAgIHZhciBzaGFwZVBhdGhzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlcy5sZW5ndGg7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGFtcGxpdHVkZSA9IHRoaXMuYW1wbGl0dWRlLnY7XG4gICAgdmFyIGZyZXF1ZW5jeSA9IE1hdGgubWF4KDAsIE1hdGgucm91bmQodGhpcy5mcmVxdWVuY3kudikpO1xuICAgIHZhciBwb2ludFR5cGUgPSB0aGlzLnBvaW50c1R5cGUudjtcblxuICAgIGlmIChhbXBsaXR1ZGUgIT09IDApIHtcbiAgICAgIHZhciBzaGFwZURhdGE7XG4gICAgICB2YXIgbG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBzaGFwZURhdGEgPSB0aGlzLnNoYXBlc1tpXTtcbiAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgICAgaWYgKCEoIXNoYXBlRGF0YS5zaGFwZS5fbWRmICYmICF0aGlzLl9tZGYgJiYgIV9pc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpO1xuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICBzaGFwZVBhdGhzID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlcztcbiAgICAgICAgICBqTGVuID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnByb2Nlc3NQYXRoKHNoYXBlUGF0aHNbal0sIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzaGFwZURhdGEuc2hhcGUucGF0aHMgPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGxpbmVhck9mZnNldChwMSwgcDIsIGFtb3VudCkge1xuICAgIHZhciBhbmdsZSA9IE1hdGguYXRhbjIocDJbMF0gLSBwMVswXSwgcDJbMV0gLSBwMVsxXSk7XG4gICAgcmV0dXJuIFtwb2xhck9mZnNldChwMSwgYW5nbGUsIGFtb3VudCksIHBvbGFyT2Zmc2V0KHAyLCBhbmdsZSwgYW1vdW50KV07XG4gIH1cblxuICBmdW5jdGlvbiBvZmZzZXRTZWdtZW50KHNlZ21lbnQsIGFtb3VudCkge1xuICAgIHZhciBwMDtcbiAgICB2YXIgcDFhO1xuICAgIHZhciBwMWI7XG4gICAgdmFyIHAyYjtcbiAgICB2YXIgcDJhO1xuICAgIHZhciBwMztcbiAgICB2YXIgZTtcbiAgICBlID0gbGluZWFyT2Zmc2V0KHNlZ21lbnQucG9pbnRzWzBdLCBzZWdtZW50LnBvaW50c1sxXSwgYW1vdW50KTtcbiAgICBwMCA9IGVbMF07XG4gICAgcDFhID0gZVsxXTtcbiAgICBlID0gbGluZWFyT2Zmc2V0KHNlZ21lbnQucG9pbnRzWzFdLCBzZWdtZW50LnBvaW50c1syXSwgYW1vdW50KTtcbiAgICBwMWIgPSBlWzBdO1xuICAgIHAyYiA9IGVbMV07XG4gICAgZSA9IGxpbmVhck9mZnNldChzZWdtZW50LnBvaW50c1syXSwgc2VnbWVudC5wb2ludHNbM10sIGFtb3VudCk7XG4gICAgcDJhID0gZVswXTtcbiAgICBwMyA9IGVbMV07XG4gICAgdmFyIHAxID0gbGluZUludGVyc2VjdGlvbihwMCwgcDFhLCBwMWIsIHAyYik7XG4gICAgaWYgKHAxID09PSBudWxsKSBwMSA9IHAxYTtcbiAgICB2YXIgcDIgPSBsaW5lSW50ZXJzZWN0aW9uKHAyYSwgcDMsIHAxYiwgcDJiKTtcbiAgICBpZiAocDIgPT09IG51bGwpIHAyID0gcDJhO1xuICAgIHJldHVybiBuZXcgUG9seW5vbWlhbEJlemllcihwMCwgcDEsIHAyLCBwMyk7XG4gIH1cblxuICBmdW5jdGlvbiBqb2luTGluZXMob3V0cHV0QmV6aWVyLCBzZWcxLCBzZWcyLCBsaW5lSm9pbiwgbWl0ZXJMaW1pdCkge1xuICAgIHZhciBwMCA9IHNlZzEucG9pbnRzWzNdO1xuICAgIHZhciBwMSA9IHNlZzIucG9pbnRzWzBdOyAvLyBCZXZlbFxuXG4gICAgaWYgKGxpbmVKb2luID09PSAzKSByZXR1cm4gcDA7IC8vIENvbm5lY3RlZCwgdGhleSBkb24ndCBuZWVkIGEgam9pbnRcblxuICAgIGlmIChwb2ludEVxdWFsKHAwLCBwMSkpIHJldHVybiBwMDsgLy8gUm91bmRcblxuICAgIGlmIChsaW5lSm9pbiA9PT0gMikge1xuICAgICAgdmFyIGFuZ2xlT3V0ID0gLXNlZzEudGFuZ2VudEFuZ2xlKDEpO1xuICAgICAgdmFyIGFuZ2xlSW4gPSAtc2VnMi50YW5nZW50QW5nbGUoMCkgKyBNYXRoLlBJO1xuICAgICAgdmFyIGNlbnRlciA9IGxpbmVJbnRlcnNlY3Rpb24ocDAsIHBvbGFyT2Zmc2V0KHAwLCBhbmdsZU91dCArIE1hdGguUEkgLyAyLCAxMDApLCBwMSwgcG9sYXJPZmZzZXQocDEsIGFuZ2xlT3V0ICsgTWF0aC5QSSAvIDIsIDEwMCkpO1xuICAgICAgdmFyIHJhZGl1cyA9IGNlbnRlciA/IHBvaW50RGlzdGFuY2UoY2VudGVyLCBwMCkgOiBwb2ludERpc3RhbmNlKHAwLCBwMSkgLyAyO1xuICAgICAgdmFyIHRhbiA9IHBvbGFyT2Zmc2V0KHAwLCBhbmdsZU91dCwgMiAqIHJhZGl1cyAqIHJvdW5kQ29ybmVyKTtcbiAgICAgIG91dHB1dEJlemllci5zZXRYWUF0KHRhblswXSwgdGFuWzFdLCAnbycsIG91dHB1dEJlemllci5sZW5ndGgoKSAtIDEpO1xuICAgICAgdGFuID0gcG9sYXJPZmZzZXQocDEsIGFuZ2xlSW4sIDIgKiByYWRpdXMgKiByb3VuZENvcm5lcik7XG4gICAgICBvdXRwdXRCZXppZXIuc2V0VHJpcGxlQXQocDFbMF0sIHAxWzFdLCBwMVswXSwgcDFbMV0sIHRhblswXSwgdGFuWzFdLCBvdXRwdXRCZXppZXIubGVuZ3RoKCkpO1xuICAgICAgcmV0dXJuIHAxO1xuICAgIH0gLy8gTWl0ZXJcblxuXG4gICAgdmFyIHQwID0gcG9pbnRFcXVhbChwMCwgc2VnMS5wb2ludHNbMl0pID8gc2VnMS5wb2ludHNbMF0gOiBzZWcxLnBvaW50c1syXTtcbiAgICB2YXIgdDEgPSBwb2ludEVxdWFsKHAxLCBzZWcyLnBvaW50c1sxXSkgPyBzZWcyLnBvaW50c1szXSA6IHNlZzIucG9pbnRzWzFdO1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBsaW5lSW50ZXJzZWN0aW9uKHQwLCBwMCwgcDEsIHQxKTtcblxuICAgIGlmIChpbnRlcnNlY3Rpb24gJiYgcG9pbnREaXN0YW5jZShpbnRlcnNlY3Rpb24sIHAwKSA8IG1pdGVyTGltaXQpIHtcbiAgICAgIG91dHB1dEJlemllci5zZXRUcmlwbGVBdChpbnRlcnNlY3Rpb25bMF0sIGludGVyc2VjdGlvblsxXSwgaW50ZXJzZWN0aW9uWzBdLCBpbnRlcnNlY3Rpb25bMV0sIGludGVyc2VjdGlvblswXSwgaW50ZXJzZWN0aW9uWzFdLCBvdXRwdXRCZXppZXIubGVuZ3RoKCkpO1xuICAgICAgcmV0dXJuIGludGVyc2VjdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gcDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbnRlcnNlY3Rpb24oYSwgYikge1xuICAgIHZhciBpbnRlcnNlY3QgPSBhLmludGVyc2VjdGlvbnMoYik7XG4gICAgaWYgKGludGVyc2VjdC5sZW5ndGggJiYgZmxvYXRFcXVhbChpbnRlcnNlY3RbMF1bMF0sIDEpKSBpbnRlcnNlY3Quc2hpZnQoKTtcbiAgICBpZiAoaW50ZXJzZWN0Lmxlbmd0aCkgcmV0dXJuIGludGVyc2VjdFswXTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBydW5lU2VnbWVudEludGVyc2VjdGlvbihhLCBiKSB7XG4gICAgdmFyIG91dGEgPSBhLnNsaWNlKCk7XG4gICAgdmFyIG91dGIgPSBiLnNsaWNlKCk7XG4gICAgdmFyIGludGVyc2VjdCA9IGdldEludGVyc2VjdGlvbihhW2EubGVuZ3RoIC0gMV0sIGJbMF0pO1xuXG4gICAgaWYgKGludGVyc2VjdCkge1xuICAgICAgb3V0YVthLmxlbmd0aCAtIDFdID0gYVthLmxlbmd0aCAtIDFdLnNwbGl0KGludGVyc2VjdFswXSlbMF07XG4gICAgICBvdXRiWzBdID0gYlswXS5zcGxpdChpbnRlcnNlY3RbMV0pWzFdO1xuICAgIH1cblxuICAgIGlmIChhLmxlbmd0aCA+IDEgJiYgYi5sZW5ndGggPiAxKSB7XG4gICAgICBpbnRlcnNlY3QgPSBnZXRJbnRlcnNlY3Rpb24oYVswXSwgYltiLmxlbmd0aCAtIDFdKTtcblxuICAgICAgaWYgKGludGVyc2VjdCkge1xuICAgICAgICByZXR1cm4gW1thWzBdLnNwbGl0KGludGVyc2VjdFswXSlbMF1dLCBbYltiLmxlbmd0aCAtIDFdLnNwbGl0KGludGVyc2VjdFsxXSlbMV1dXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW291dGEsIG91dGJdO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJ1bmVJbnRlcnNlY3Rpb25zKHNlZ21lbnRzKSB7XG4gICAgdmFyIGU7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBlID0gcHJ1bmVTZWdtZW50SW50ZXJzZWN0aW9uKHNlZ21lbnRzW2kgLSAxXSwgc2VnbWVudHNbaV0pO1xuICAgICAgc2VnbWVudHNbaSAtIDFdID0gZVswXTtcbiAgICAgIHNlZ21lbnRzW2ldID0gZVsxXTtcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgZSA9IHBydW5lU2VnbWVudEludGVyc2VjdGlvbihzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXSwgc2VnbWVudHNbMF0pO1xuICAgICAgc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0gMV0gPSBlWzBdO1xuICAgICAgc2VnbWVudHNbMF0gPSBlWzFdO1xuICAgIH1cblxuICAgIHJldHVybiBzZWdtZW50cztcbiAgfVxuXG4gIGZ1bmN0aW9uIG9mZnNldFNlZ21lbnRTcGxpdChzZWdtZW50LCBhbW91bnQpIHtcbiAgICAvKlxyXG4gICAgICBXZSBzcGxpdCBlYWNoIGJlemllciBzZWdtZW50IGludG8gc21hbGxlciBwaWVjZXMgYmFzZWRcclxuICAgICAgb24gaW5mbGVjdGlvbiBwb2ludHMsIHRoaXMgZW5zdXJlcyB0aGUgY29udHJvbCBwb2ludFxyXG4gICAgICBwb2x5Z29uIGlzIGNvbnZleC5cclxuICAgICAgICAoQSBjdWJpYyBiZXppZXIgY2FuIGhhdmUgbm9uZSwgb25lLCBvciB0d28gaW5mbGVjdGlvbiBwb2ludHMpXHJcbiAgICAqL1xuICAgIHZhciBmbGV4ID0gc2VnbWVudC5pbmZsZWN0aW9uUG9pbnRzKCk7XG4gICAgdmFyIGxlZnQ7XG4gICAgdmFyIHJpZ2h0O1xuICAgIHZhciBzcGxpdDtcbiAgICB2YXIgbWlkO1xuXG4gICAgaWYgKGZsZXgubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gW29mZnNldFNlZ21lbnQoc2VnbWVudCwgYW1vdW50KV07XG4gICAgfVxuXG4gICAgaWYgKGZsZXgubGVuZ3RoID09PSAxIHx8IGZsb2F0RXF1YWwoZmxleFsxXSwgMSkpIHtcbiAgICAgIHNwbGl0ID0gc2VnbWVudC5zcGxpdChmbGV4WzBdKTtcbiAgICAgIGxlZnQgPSBzcGxpdFswXTtcbiAgICAgIHJpZ2h0ID0gc3BsaXRbMV07XG4gICAgICByZXR1cm4gW29mZnNldFNlZ21lbnQobGVmdCwgYW1vdW50KSwgb2Zmc2V0U2VnbWVudChyaWdodCwgYW1vdW50KV07XG4gICAgfVxuXG4gICAgc3BsaXQgPSBzZWdtZW50LnNwbGl0KGZsZXhbMF0pO1xuICAgIGxlZnQgPSBzcGxpdFswXTtcbiAgICB2YXIgdCA9IChmbGV4WzFdIC0gZmxleFswXSkgLyAoMSAtIGZsZXhbMF0pO1xuICAgIHNwbGl0ID0gc3BsaXRbMV0uc3BsaXQodCk7XG4gICAgbWlkID0gc3BsaXRbMF07XG4gICAgcmlnaHQgPSBzcGxpdFsxXTtcbiAgICByZXR1cm4gW29mZnNldFNlZ21lbnQobGVmdCwgYW1vdW50KSwgb2Zmc2V0U2VnbWVudChtaWQsIGFtb3VudCksIG9mZnNldFNlZ21lbnQocmlnaHQsIGFtb3VudCldO1xuICB9XG5cbiAgZnVuY3Rpb24gT2Zmc2V0UGF0aE1vZGlmaWVyKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW1NoYXBlTW9kaWZpZXJdLCBPZmZzZXRQYXRoTW9kaWZpZXIpO1xuXG4gIE9mZnNldFBhdGhNb2RpZmllci5wcm90b3R5cGUuaW5pdE1vZGlmaWVyUHJvcGVydGllcyA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhKSB7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMucHJvY2Vzc0tleXM7XG4gICAgdGhpcy5hbW91bnQgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmEsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMubWl0ZXJMaW1pdCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEubWwsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMubGluZUpvaW4gPSBkYXRhLmxqO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSB0aGlzLmFtb3VudC5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoICE9PSAwO1xuICB9O1xuXG4gIE9mZnNldFBhdGhNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1BhdGggPSBmdW5jdGlvbiAoaW5wdXRCZXppZXIsIGFtb3VudCwgbGluZUpvaW4sIG1pdGVyTGltaXQpIHtcbiAgICB2YXIgb3V0cHV0QmV6aWVyID0gc2hhcGVQb29sLm5ld0VsZW1lbnQoKTtcbiAgICBvdXRwdXRCZXppZXIuYyA9IGlucHV0QmV6aWVyLmM7XG4gICAgdmFyIGNvdW50ID0gaW5wdXRCZXppZXIubGVuZ3RoKCk7XG5cbiAgICBpZiAoIWlucHV0QmV6aWVyLmMpIHtcbiAgICAgIGNvdW50IC09IDE7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGo7XG4gICAgdmFyIHNlZ21lbnQ7XG4gICAgdmFyIG11bHRpU2VnbWVudHMgPSBbXTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSArPSAxKSB7XG4gICAgICBzZWdtZW50ID0gUG9seW5vbWlhbEJlemllci5zaGFwZVNlZ21lbnQoaW5wdXRCZXppZXIsIGkpO1xuICAgICAgbXVsdGlTZWdtZW50cy5wdXNoKG9mZnNldFNlZ21lbnRTcGxpdChzZWdtZW50LCBhbW91bnQpKTtcbiAgICB9XG5cbiAgICBpZiAoIWlucHV0QmV6aWVyLmMpIHtcbiAgICAgIGZvciAoaSA9IGNvdW50IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgc2VnbWVudCA9IFBvbHlub21pYWxCZXppZXIuc2hhcGVTZWdtZW50SW52ZXJ0ZWQoaW5wdXRCZXppZXIsIGkpO1xuICAgICAgICBtdWx0aVNlZ21lbnRzLnB1c2gob2Zmc2V0U2VnbWVudFNwbGl0KHNlZ21lbnQsIGFtb3VudCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIG11bHRpU2VnbWVudHMgPSBwcnVuZUludGVyc2VjdGlvbnMobXVsdGlTZWdtZW50cyk7IC8vIEFkZCBiZXppZXIgc2VnbWVudHMgdG8gdGhlIG91dHB1dCBhbmQgYXBwbHkgbGluZSBqb2ludHNcblxuICAgIHZhciBsYXN0UG9pbnQgPSBudWxsO1xuICAgIHZhciBsYXN0U2VnID0gbnVsbDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBtdWx0aVNlZ21lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgbXVsdGlTZWdtZW50ID0gbXVsdGlTZWdtZW50c1tpXTtcbiAgICAgIGlmIChsYXN0U2VnKSBsYXN0UG9pbnQgPSBqb2luTGluZXMob3V0cHV0QmV6aWVyLCBsYXN0U2VnLCBtdWx0aVNlZ21lbnRbMF0sIGxpbmVKb2luLCBtaXRlckxpbWl0KTtcbiAgICAgIGxhc3RTZWcgPSBtdWx0aVNlZ21lbnRbbXVsdGlTZWdtZW50Lmxlbmd0aCAtIDFdO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgbXVsdGlTZWdtZW50Lmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHNlZ21lbnQgPSBtdWx0aVNlZ21lbnRbal07XG5cbiAgICAgICAgaWYgKGxhc3RQb2ludCAmJiBwb2ludEVxdWFsKHNlZ21lbnQucG9pbnRzWzBdLCBsYXN0UG9pbnQpKSB7XG4gICAgICAgICAgb3V0cHV0QmV6aWVyLnNldFhZQXQoc2VnbWVudC5wb2ludHNbMV1bMF0sIHNlZ21lbnQucG9pbnRzWzFdWzFdLCAnbycsIG91dHB1dEJlemllci5sZW5ndGgoKSAtIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dEJlemllci5zZXRUcmlwbGVBdChzZWdtZW50LnBvaW50c1swXVswXSwgc2VnbWVudC5wb2ludHNbMF1bMV0sIHNlZ21lbnQucG9pbnRzWzFdWzBdLCBzZWdtZW50LnBvaW50c1sxXVsxXSwgc2VnbWVudC5wb2ludHNbMF1bMF0sIHNlZ21lbnQucG9pbnRzWzBdWzFdLCBvdXRwdXRCZXppZXIubGVuZ3RoKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0QmV6aWVyLnNldFRyaXBsZUF0KHNlZ21lbnQucG9pbnRzWzNdWzBdLCBzZWdtZW50LnBvaW50c1szXVsxXSwgc2VnbWVudC5wb2ludHNbM11bMF0sIHNlZ21lbnQucG9pbnRzWzNdWzFdLCBzZWdtZW50LnBvaW50c1syXVswXSwgc2VnbWVudC5wb2ludHNbMl1bMV0sIG91dHB1dEJlemllci5sZW5ndGgoKSk7XG4gICAgICAgIGxhc3RQb2ludCA9IHNlZ21lbnQucG9pbnRzWzNdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtdWx0aVNlZ21lbnRzLmxlbmd0aCkgam9pbkxpbmVzKG91dHB1dEJlemllciwgbGFzdFNlZywgbXVsdGlTZWdtZW50c1swXVswXSwgbGluZUpvaW4sIG1pdGVyTGltaXQpO1xuICAgIHJldHVybiBvdXRwdXRCZXppZXI7XG4gIH07XG5cbiAgT2Zmc2V0UGF0aE1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzU2hhcGVzID0gZnVuY3Rpb24gKF9pc0ZpcnN0RnJhbWUpIHtcbiAgICB2YXIgc2hhcGVQYXRocztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5zaGFwZXMubGVuZ3RoO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBhbW91bnQgPSB0aGlzLmFtb3VudC52O1xuICAgIHZhciBtaXRlckxpbWl0ID0gdGhpcy5taXRlckxpbWl0LnY7XG4gICAgdmFyIGxpbmVKb2luID0gdGhpcy5saW5lSm9pbjtcblxuICAgIGlmIChhbW91bnQgIT09IDApIHtcbiAgICAgIHZhciBzaGFwZURhdGE7XG4gICAgICB2YXIgbG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBzaGFwZURhdGEgPSB0aGlzLnNoYXBlc1tpXTtcbiAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgICAgaWYgKCEoIXNoYXBlRGF0YS5zaGFwZS5fbWRmICYmICF0aGlzLl9tZGYgJiYgIV9pc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpO1xuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICBzaGFwZVBhdGhzID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlcztcbiAgICAgICAgICBqTGVuID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnByb2Nlc3NQYXRoKHNoYXBlUGF0aHNbal0sIGFtb3VudCwgbGluZUpvaW4sIG1pdGVyTGltaXQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzaGFwZURhdGEuc2hhcGUucGF0aHMgPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldEZvbnRQcm9wZXJ0aWVzKGZvbnREYXRhKSB7XG4gICAgdmFyIHN0eWxlcyA9IGZvbnREYXRhLmZTdHlsZSA/IGZvbnREYXRhLmZTdHlsZS5zcGxpdCgnICcpIDogW107XG4gICAgdmFyIGZXZWlnaHQgPSAnbm9ybWFsJztcbiAgICB2YXIgZlN0eWxlID0gJ25vcm1hbCc7XG4gICAgdmFyIGxlbiA9IHN0eWxlcy5sZW5ndGg7XG4gICAgdmFyIHN0eWxlTmFtZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHN0eWxlTmFtZSA9IHN0eWxlc1tpXS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBzd2l0Y2ggKHN0eWxlTmFtZSkge1xuICAgICAgICBjYXNlICdpdGFsaWMnOlxuICAgICAgICAgIGZTdHlsZSA9ICdpdGFsaWMnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2JvbGQnOlxuICAgICAgICAgIGZXZWlnaHQgPSAnNzAwJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdibGFjayc6XG4gICAgICAgICAgZldlaWdodCA9ICc5MDAnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICAgICAgZldlaWdodCA9ICc1MDAnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JlZ3VsYXInOlxuICAgICAgICBjYXNlICdub3JtYWwnOlxuICAgICAgICAgIGZXZWlnaHQgPSAnNDAwJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdsaWdodCc6XG4gICAgICAgIGNhc2UgJ3RoaW4nOlxuICAgICAgICAgIGZXZWlnaHQgPSAnMjAwJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdHlsZTogZlN0eWxlLFxuICAgICAgd2VpZ2h0OiBmb250RGF0YS5mV2VpZ2h0IHx8IGZXZWlnaHRcbiAgICB9O1xuICB9XG5cbiAgdmFyIEZvbnRNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtYXhXYWl0aW5nVGltZSA9IDUwMDA7XG4gICAgdmFyIGVtcHR5Q2hhciA9IHtcbiAgICAgIHc6IDAsXG4gICAgICBzaXplOiAwLFxuICAgICAgc2hhcGVzOiBbXSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc2hhcGVzOiBbXVxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGNvbWJpbmVkQ2hhcmFjdGVycyA9IFtdOyAvLyBIaW5kaSBjaGFyYWN0ZXJzXG5cbiAgICBjb21iaW5lZENoYXJhY3RlcnMgPSBjb21iaW5lZENoYXJhY3RlcnMuY29uY2F0KFsyMzA0LCAyMzA1LCAyMzA2LCAyMzA3LCAyMzYyLCAyMzYzLCAyMzY0LCAyMzY0LCAyMzY2LCAyMzY3LCAyMzY4LCAyMzY5LCAyMzcwLCAyMzcxLCAyMzcyLCAyMzczLCAyMzc0LCAyMzc1LCAyMzc2LCAyMzc3LCAyMzc4LCAyMzc5LCAyMzgwLCAyMzgxLCAyMzgyLCAyMzgzLCAyMzg3LCAyMzg4LCAyMzg5LCAyMzkwLCAyMzkxLCAyNDAyLCAyNDAzXSk7XG4gICAgdmFyIEJMQUNLX0ZMQUdfQ09ERV9QT0lOVCA9IDEyNzk4ODtcbiAgICB2YXIgQ0FOQ0VMX1RBR19DT0RFX1BPSU5UID0gOTE3NjMxO1xuICAgIHZhciBBX1RBR19DT0RFX1BPSU5UID0gOTE3NjAxO1xuICAgIHZhciBaX1RBR19DT0RFX1BPSU5UID0gOTE3NjI2O1xuICAgIHZhciBWQVJJQVRJT05fU0VMRUNUT1JfMTZfQ09ERV9QT0lOVCA9IDY1MDM5O1xuICAgIHZhciBaRVJPX1dJRFRIX0pPSU5FUl9DT0RFX1BPSU5UID0gODIwNTtcbiAgICB2YXIgUkVHSU9OQUxfQ0hBUkFDVEVSX0FfQ09ERV9QT0lOVCA9IDEyNzQ2MjtcbiAgICB2YXIgUkVHSU9OQUxfQ0hBUkFDVEVSX1pfQ09ERV9QT0lOVCA9IDEyNzQ4NztcbiAgICB2YXIgc3Vycm9nYXRlTW9kaWZpZXJzID0gWydkODNjZGZmYicsICdkODNjZGZmYycsICdkODNjZGZmZCcsICdkODNjZGZmZScsICdkODNjZGZmZiddO1xuXG4gICAgZnVuY3Rpb24gdHJpbUZvbnRPcHRpb25zKGZvbnQpIHtcbiAgICAgIHZhciBmYW1pbHlBcnJheSA9IGZvbnQuc3BsaXQoJywnKTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGZhbWlseUFycmF5Lmxlbmd0aDtcbiAgICAgIHZhciBlbmFibGVkRmFtaWxpZXMgPSBbXTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmIChmYW1pbHlBcnJheVtpXSAhPT0gJ3NhbnMtc2VyaWYnICYmIGZhbWlseUFycmF5W2ldICE9PSAnbW9ub3NwYWNlJykge1xuICAgICAgICAgIGVuYWJsZWRGYW1pbGllcy5wdXNoKGZhbWlseUFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZW5hYmxlZEZhbWlsaWVzLmpvaW4oJywnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRVcE5vZGUoZm9udCwgZmFtaWx5KSB7XG4gICAgICB2YXIgcGFyZW50Tm9kZSA9IGNyZWF0ZVRhZygnc3BhbicpOyAvLyBOb2RlIGlzIGludmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycy5cblxuICAgICAgcGFyZW50Tm9kZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICBwYXJlbnROb2RlLnN0eWxlLmZvbnRGYW1pbHkgPSBmYW1pbHk7XG4gICAgICB2YXIgbm9kZSA9IGNyZWF0ZVRhZygnc3BhbicpOyAvLyBDaGFyYWN0ZXJzIHRoYXQgdmFyeSBzaWduaWZpY2FudGx5IGFtb25nIGRpZmZlcmVudCBmb250c1xuXG4gICAgICBub2RlLmlubmVyVGV4dCA9ICdnaUl0VDFXUXlAIS0vIyc7IC8vIFZpc2libGUgLSBzbyB3ZSBjYW4gbWVhc3VyZSBpdCAtIGJ1dCBub3Qgb24gdGhlIHNjcmVlblxuXG4gICAgICBwYXJlbnROb2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIHBhcmVudE5vZGUuc3R5bGUubGVmdCA9ICctMTAwMDBweCc7XG4gICAgICBwYXJlbnROb2RlLnN0eWxlLnRvcCA9ICctMTAwMDBweCc7IC8vIExhcmdlIGZvbnQgc2l6ZSBtYWtlcyBldmVuIHN1YnRsZSBjaGFuZ2VzIG9idmlvdXNcblxuICAgICAgcGFyZW50Tm9kZS5zdHlsZS5mb250U2l6ZSA9ICczMDBweCc7IC8vIFJlc2V0IGFueSBmb250IHByb3BlcnRpZXNcblxuICAgICAgcGFyZW50Tm9kZS5zdHlsZS5mb250VmFyaWFudCA9ICdub3JtYWwnO1xuICAgICAgcGFyZW50Tm9kZS5zdHlsZS5mb250U3R5bGUgPSAnbm9ybWFsJztcbiAgICAgIHBhcmVudE5vZGUuc3R5bGUuZm9udFdlaWdodCA9ICdub3JtYWwnO1xuICAgICAgcGFyZW50Tm9kZS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gJzAnO1xuICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocGFyZW50Tm9kZSk7IC8vIFJlbWVtYmVyIHdpZHRoIHdpdGggbm8gYXBwbGllZCB3ZWIgZm9udFxuXG4gICAgICB2YXIgd2lkdGggPSBub2RlLm9mZnNldFdpZHRoO1xuICAgICAgbm9kZS5zdHlsZS5mb250RmFtaWx5ID0gdHJpbUZvbnRPcHRpb25zKGZvbnQpICsgJywgJyArIGZhbWlseTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgIHc6IHdpZHRoLFxuICAgICAgICBwYXJlbnQ6IHBhcmVudE5vZGVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tMb2FkZWRGb250cygpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZm9udHMubGVuZ3RoO1xuICAgICAgdmFyIG5vZGU7XG4gICAgICB2YXIgdztcbiAgICAgIHZhciBsb2FkZWRDb3VudCA9IGxlbjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0aGlzLmZvbnRzW2ldLmxvYWRlZCkge1xuICAgICAgICAgIGxvYWRlZENvdW50IC09IDE7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5mb250c1tpXS5mT3JpZ2luID09PSAnbicgfHwgdGhpcy5mb250c1tpXS5vcmlnaW4gPT09IDApIHtcbiAgICAgICAgICB0aGlzLmZvbnRzW2ldLmxvYWRlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZSA9IHRoaXMuZm9udHNbaV0ubW9ub0Nhc2Uubm9kZTtcbiAgICAgICAgICB3ID0gdGhpcy5mb250c1tpXS5tb25vQ2FzZS53O1xuXG4gICAgICAgICAgaWYgKG5vZGUub2Zmc2V0V2lkdGggIT09IHcpIHtcbiAgICAgICAgICAgIGxvYWRlZENvdW50IC09IDE7XG4gICAgICAgICAgICB0aGlzLmZvbnRzW2ldLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUgPSB0aGlzLmZvbnRzW2ldLnNhbnNDYXNlLm5vZGU7XG4gICAgICAgICAgICB3ID0gdGhpcy5mb250c1tpXS5zYW5zQ2FzZS53O1xuXG4gICAgICAgICAgICBpZiAobm9kZS5vZmZzZXRXaWR0aCAhPT0gdykge1xuICAgICAgICAgICAgICBsb2FkZWRDb3VudCAtPSAxO1xuICAgICAgICAgICAgICB0aGlzLmZvbnRzW2ldLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuZm9udHNbaV0ubG9hZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmZvbnRzW2ldLnNhbnNDYXNlLnBhcmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9udHNbaV0uc2Fuc0Nhc2UucGFyZW50KTtcbiAgICAgICAgICAgIHRoaXMuZm9udHNbaV0ubW9ub0Nhc2UucGFyZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5mb250c1tpXS5tb25vQ2FzZS5wYXJlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobG9hZGVkQ291bnQgIT09IDAgJiYgRGF0ZS5ub3coKSAtIHRoaXMuaW5pdFRpbWUgPCBtYXhXYWl0aW5nVGltZSkge1xuICAgICAgICBzZXRUaW1lb3V0KHRoaXMuY2hlY2tMb2FkZWRGb250c0JpbmRlZCwgMjApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLnNldElzTG9hZGVkQmluZGVkLCAxMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSGVscGVyKGZvbnREYXRhLCBkZWYpIHtcbiAgICAgIHZhciBlbmdpbmUgPSBkb2N1bWVudC5ib2R5ICYmIGRlZiA/ICdzdmcnIDogJ2NhbnZhcyc7XG4gICAgICB2YXIgaGVscGVyO1xuICAgICAgdmFyIGZvbnRQcm9wcyA9IGdldEZvbnRQcm9wZXJ0aWVzKGZvbnREYXRhKTtcblxuICAgICAgaWYgKGVuZ2luZSA9PT0gJ3N2ZycpIHtcbiAgICAgICAgdmFyIHRIZWxwZXIgPSBjcmVhdGVOUygndGV4dCcpO1xuICAgICAgICB0SGVscGVyLnN0eWxlLmZvbnRTaXplID0gJzEwMHB4JzsgLy8gdEhlbHBlci5zdHlsZS5mb250RmFtaWx5ID0gZm9udERhdGEuZkZhbWlseTtcblxuICAgICAgICB0SGVscGVyLnNldEF0dHJpYnV0ZSgnZm9udC1mYW1pbHknLCBmb250RGF0YS5mRmFtaWx5KTtcbiAgICAgICAgdEhlbHBlci5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc3R5bGUnLCBmb250UHJvcHMuc3R5bGUpO1xuICAgICAgICB0SGVscGVyLnNldEF0dHJpYnV0ZSgnZm9udC13ZWlnaHQnLCBmb250UHJvcHMud2VpZ2h0KTtcbiAgICAgICAgdEhlbHBlci50ZXh0Q29udGVudCA9ICcxJztcblxuICAgICAgICBpZiAoZm9udERhdGEuZkNsYXNzKSB7XG4gICAgICAgICAgdEhlbHBlci5zdHlsZS5mb250RmFtaWx5ID0gJ2luaGVyaXQnO1xuICAgICAgICAgIHRIZWxwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsIGZvbnREYXRhLmZDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdEhlbHBlci5zdHlsZS5mb250RmFtaWx5ID0gZm9udERhdGEuZkZhbWlseTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZi5hcHBlbmRDaGlsZCh0SGVscGVyKTtcbiAgICAgICAgaGVscGVyID0gdEhlbHBlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0Q2FudmFzSGVscGVyID0gbmV3IE9mZnNjcmVlbkNhbnZhcyg1MDAsIDUwMCkuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgdENhbnZhc0hlbHBlci5mb250ID0gZm9udFByb3BzLnN0eWxlICsgJyAnICsgZm9udFByb3BzLndlaWdodCArICcgMTAwcHggJyArIGZvbnREYXRhLmZGYW1pbHk7XG4gICAgICAgIGhlbHBlciA9IHRDYW52YXNIZWxwZXI7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1lYXN1cmUodGV4dCkge1xuICAgICAgICBpZiAoZW5naW5lID09PSAnc3ZnJykge1xuICAgICAgICAgIGhlbHBlci50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgICAgICAgcmV0dXJuIGhlbHBlci5nZXRDb21wdXRlZFRleHRMZW5ndGgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoZWxwZXIubWVhc3VyZVRleHQodGV4dCkud2lkdGg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lYXN1cmVUZXh0OiBtZWFzdXJlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEZvbnRzKGZvbnREYXRhLCBkZWZzKSB7XG4gICAgICBpZiAoIWZvbnREYXRhKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNoYXJzKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmZvbnRzID0gZm9udERhdGEubGlzdDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgICAgIGZvbnREYXRhLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGRhdGEuaGVscGVyID0gY3JlYXRlSGVscGVyKGRhdGEpO1xuICAgICAgICAgIGRhdGEuY2FjaGUgPSB7fTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZm9udHMgPSBmb250RGF0YS5saXN0O1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBmb250QXJyID0gZm9udERhdGEubGlzdDtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGZvbnRBcnIubGVuZ3RoO1xuICAgICAgdmFyIF9wZW5kaW5nRm9udHMgPSBsZW47XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB2YXIgc2hvdWxkTG9hZEZvbnQgPSB0cnVlO1xuICAgICAgICB2YXIgbG9hZGVkU2VsZWN0b3I7XG4gICAgICAgIHZhciBqO1xuICAgICAgICBmb250QXJyW2ldLmxvYWRlZCA9IGZhbHNlO1xuICAgICAgICBmb250QXJyW2ldLm1vbm9DYXNlID0gc2V0VXBOb2RlKGZvbnRBcnJbaV0uZkZhbWlseSwgJ21vbm9zcGFjZScpO1xuICAgICAgICBmb250QXJyW2ldLnNhbnNDYXNlID0gc2V0VXBOb2RlKGZvbnRBcnJbaV0uZkZhbWlseSwgJ3NhbnMtc2VyaWYnKTtcblxuICAgICAgICBpZiAoIWZvbnRBcnJbaV0uZlBhdGgpIHtcbiAgICAgICAgICBmb250QXJyW2ldLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgX3BlbmRpbmdGb250cyAtPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKGZvbnRBcnJbaV0uZk9yaWdpbiA9PT0gJ3AnIHx8IGZvbnRBcnJbaV0ub3JpZ2luID09PSAzKSB7XG4gICAgICAgICAgbG9hZGVkU2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdHlsZVtmLWZvcmlnaW49XCJwXCJdW2YtZmFtaWx5PVwiJyArIGZvbnRBcnJbaV0uZkZhbWlseSArICdcIl0sIHN0eWxlW2Ytb3JpZ2luPVwiM1wiXVtmLWZhbWlseT1cIicgKyBmb250QXJyW2ldLmZGYW1pbHkgKyAnXCJdJyk7XG5cbiAgICAgICAgICBpZiAobG9hZGVkU2VsZWN0b3IubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2hvdWxkTG9hZEZvbnQgPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2hvdWxkTG9hZEZvbnQpIHtcbiAgICAgICAgICAgIHZhciBzID0gY3JlYXRlVGFnKCdzdHlsZScpO1xuICAgICAgICAgICAgcy5zZXRBdHRyaWJ1dGUoJ2YtZm9yaWdpbicsIGZvbnRBcnJbaV0uZk9yaWdpbik7XG4gICAgICAgICAgICBzLnNldEF0dHJpYnV0ZSgnZi1vcmlnaW4nLCBmb250QXJyW2ldLm9yaWdpbik7XG4gICAgICAgICAgICBzLnNldEF0dHJpYnV0ZSgnZi1mYW1pbHknLCBmb250QXJyW2ldLmZGYW1pbHkpO1xuICAgICAgICAgICAgcy50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgICAgIHMuaW5uZXJUZXh0ID0gJ0Bmb250LWZhY2Uge2ZvbnQtZmFtaWx5OiAnICsgZm9udEFycltpXS5mRmFtaWx5ICsgXCI7IGZvbnQtc3R5bGU6IG5vcm1hbDsgc3JjOiB1cmwoJ1wiICsgZm9udEFycltpXS5mUGF0aCArIFwiJyk7fVwiO1xuICAgICAgICAgICAgZGVmcy5hcHBlbmRDaGlsZChzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZm9udEFycltpXS5mT3JpZ2luID09PSAnZycgfHwgZm9udEFycltpXS5vcmlnaW4gPT09IDEpIHtcbiAgICAgICAgICBsb2FkZWRTZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmtbZi1mb3JpZ2luPVwiZ1wiXSwgbGlua1tmLW9yaWdpbj1cIjFcIl0nKTtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsb2FkZWRTZWxlY3Rvci5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgaWYgKGxvYWRlZFNlbGVjdG9yW2pdLmhyZWYuaW5kZXhPZihmb250QXJyW2ldLmZQYXRoKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgLy8gRm9udCBpcyBhbHJlYWR5IGxvYWRlZFxuICAgICAgICAgICAgICBzaG91bGRMb2FkRm9udCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzaG91bGRMb2FkRm9udCkge1xuICAgICAgICAgICAgdmFyIGwgPSBjcmVhdGVUYWcoJ2xpbmsnKTtcbiAgICAgICAgICAgIGwuc2V0QXR0cmlidXRlKCdmLWZvcmlnaW4nLCBmb250QXJyW2ldLmZPcmlnaW4pO1xuICAgICAgICAgICAgbC5zZXRBdHRyaWJ1dGUoJ2Ytb3JpZ2luJywgZm9udEFycltpXS5vcmlnaW4pO1xuICAgICAgICAgICAgbC50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgICAgIGwucmVsID0gJ3N0eWxlc2hlZXQnO1xuICAgICAgICAgICAgbC5ocmVmID0gZm9udEFycltpXS5mUGF0aDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGZvbnRBcnJbaV0uZk9yaWdpbiA9PT0gJ3QnIHx8IGZvbnRBcnJbaV0ub3JpZ2luID09PSAyKSB7XG4gICAgICAgICAgbG9hZGVkU2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHRbZi1mb3JpZ2luPVwidFwiXSwgc2NyaXB0W2Ytb3JpZ2luPVwiMlwiXScpO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGxvYWRlZFNlbGVjdG9yLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICBpZiAoZm9udEFycltpXS5mUGF0aCA9PT0gbG9hZGVkU2VsZWN0b3Jbal0uc3JjKSB7XG4gICAgICAgICAgICAgIC8vIEZvbnQgaXMgYWxyZWFkeSBsb2FkZWRcbiAgICAgICAgICAgICAgc2hvdWxkTG9hZEZvbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2hvdWxkTG9hZEZvbnQpIHtcbiAgICAgICAgICAgIHZhciBzYyA9IGNyZWF0ZVRhZygnbGluaycpO1xuICAgICAgICAgICAgc2Muc2V0QXR0cmlidXRlKCdmLWZvcmlnaW4nLCBmb250QXJyW2ldLmZPcmlnaW4pO1xuICAgICAgICAgICAgc2Muc2V0QXR0cmlidXRlKCdmLW9yaWdpbicsIGZvbnRBcnJbaV0ub3JpZ2luKTtcbiAgICAgICAgICAgIHNjLnNldEF0dHJpYnV0ZSgncmVsJywgJ3N0eWxlc2hlZXQnKTtcbiAgICAgICAgICAgIHNjLnNldEF0dHJpYnV0ZSgnaHJlZicsIGZvbnRBcnJbaV0uZlBhdGgpO1xuICAgICAgICAgICAgZGVmcy5hcHBlbmRDaGlsZChzYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9udEFycltpXS5oZWxwZXIgPSBjcmVhdGVIZWxwZXIoZm9udEFycltpXSwgZGVmcyk7XG4gICAgICAgIGZvbnRBcnJbaV0uY2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5mb250cy5wdXNoKGZvbnRBcnJbaV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3BlbmRpbmdGb250cyA9PT0gMCkge1xuICAgICAgICB0aGlzLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9uIHNvbWUgY2FzZXMgZXZlbiBpZiB0aGUgZm9udCBpcyBsb2FkZWQsIGl0IHdvbid0IGxvYWQgY29ycmVjdGx5IHdoZW4gbWVhc3VyaW5nIHRleHQgb24gY2FudmFzLlxuICAgICAgICAvLyBBZGRpbmcgdGhpcyB0aW1lb3V0IHNlZW1zIHRvIGZpeCBpdFxuICAgICAgICBzZXRUaW1lb3V0KHRoaXMuY2hlY2tMb2FkZWRGb250cy5iaW5kKHRoaXMpLCAxMDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZENoYXJzKGNoYXJzKSB7XG4gICAgICBpZiAoIWNoYXJzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmNoYXJzKSB7XG4gICAgICAgIHRoaXMuY2hhcnMgPSBbXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gY2hhcnMubGVuZ3RoO1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgakxlbiA9IHRoaXMuY2hhcnMubGVuZ3RoO1xuICAgICAgdmFyIGZvdW5kO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaiA9IDA7XG4gICAgICAgIGZvdW5kID0gZmFsc2U7XG5cbiAgICAgICAgd2hpbGUgKGogPCBqTGVuKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY2hhcnNbal0uc3R5bGUgPT09IGNoYXJzW2ldLnN0eWxlICYmIHRoaXMuY2hhcnNbal0uZkZhbWlseSA9PT0gY2hhcnNbaV0uZkZhbWlseSAmJiB0aGlzLmNoYXJzW2pdLmNoID09PSBjaGFyc1tpXS5jaCkge1xuICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICB0aGlzLmNoYXJzLnB1c2goY2hhcnNbaV0pO1xuICAgICAgICAgIGpMZW4gKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENoYXJEYXRhKF9jaGFyLCBzdHlsZSwgZm9udCkge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuY2hhcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBpZiAodGhpcy5jaGFyc1tpXS5jaCA9PT0gX2NoYXIgJiYgdGhpcy5jaGFyc1tpXS5zdHlsZSA9PT0gc3R5bGUgJiYgdGhpcy5jaGFyc1tpXS5mRmFtaWx5ID09PSBmb250KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnNbaV07XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmICgodHlwZW9mIF9jaGFyID09PSAnc3RyaW5nJyAmJiBfY2hhci5jaGFyQ29kZUF0KDApICE9PSAxMyB8fCAhX2NoYXIpICYmIGNvbnNvbGUgJiYgY29uc29sZS53YXJuIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgJiYgIXRoaXMuX3dhcm5lZCkge1xuICAgICAgICB0aGlzLl93YXJuZWQgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLndhcm4oJ01pc3NpbmcgY2hhcmFjdGVyIGZyb20gZXhwb3J0ZWQgY2hhcmFjdGVycyBsaXN0OiAnLCBfY2hhciwgc3R5bGUsIGZvbnQpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVtcHR5Q2hhcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZWFzdXJlVGV4dChfY2hhcjIsIGZvbnROYW1lLCBzaXplKSB7XG4gICAgICB2YXIgZm9udERhdGEgPSB0aGlzLmdldEZvbnRCeU5hbWUoZm9udE5hbWUpOyAvLyBVc2luZyB0aGUgY2hhciBpbnN0ZWFkIG9mIGNoYXIuY2hhckNvZGVBdCgwKVxuICAgICAgLy8gdG8gYXZvaWQgY29sbGlzaW9ucyBiZXR3ZWVuIGVxdWFsIGNoYXJzXG5cbiAgICAgIHZhciBpbmRleCA9IF9jaGFyMjtcblxuICAgICAgaWYgKCFmb250RGF0YS5jYWNoZVtpbmRleF0pIHtcbiAgICAgICAgdmFyIHRIZWxwZXIgPSBmb250RGF0YS5oZWxwZXI7XG5cbiAgICAgICAgaWYgKF9jaGFyMiA9PT0gJyAnKSB7XG4gICAgICAgICAgdmFyIGRvdWJsZVNpemUgPSB0SGVscGVyLm1lYXN1cmVUZXh0KCd8JyArIF9jaGFyMiArICd8Jyk7XG4gICAgICAgICAgdmFyIHNpbmdsZVNpemUgPSB0SGVscGVyLm1lYXN1cmVUZXh0KCd8fCcpO1xuICAgICAgICAgIGZvbnREYXRhLmNhY2hlW2luZGV4XSA9IChkb3VibGVTaXplIC0gc2luZ2xlU2l6ZSkgLyAxMDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9udERhdGEuY2FjaGVbaW5kZXhdID0gdEhlbHBlci5tZWFzdXJlVGV4dChfY2hhcjIpIC8gMTAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb250RGF0YS5jYWNoZVtpbmRleF0gKiBzaXplO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEZvbnRCeU5hbWUobmFtZSkge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZm9udHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBpZiAodGhpcy5mb250c1tpXS5mTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZvbnRzW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5mb250c1swXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb2RlUG9pbnQoc3RyaW5nKSB7XG4gICAgICB2YXIgY29kZVBvaW50ID0gMDtcbiAgICAgIHZhciBmaXJzdCA9IHN0cmluZy5jaGFyQ29kZUF0KDApO1xuXG4gICAgICBpZiAoZmlyc3QgPj0gMHhEODAwICYmIGZpcnN0IDw9IDB4REJGRikge1xuICAgICAgICB2YXIgc2Vjb25kID0gc3RyaW5nLmNoYXJDb2RlQXQoMSk7XG5cbiAgICAgICAgaWYgKHNlY29uZCA+PSAweERDMDAgJiYgc2Vjb25kIDw9IDB4REZGRikge1xuICAgICAgICAgIGNvZGVQb2ludCA9IChmaXJzdCAtIDB4RDgwMCkgKiAweDQwMCArIHNlY29uZCAtIDB4REMwMCArIDB4MTAwMDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvZGVQb2ludDtcbiAgICB9IC8vIFNraW4gdG9uZSBtb2RpZmllcnNcblxuXG4gICAgZnVuY3Rpb24gaXNNb2RpZmllcihmaXJzdENoYXJDb2RlLCBzZWNvbmRDaGFyQ29kZSkge1xuICAgICAgdmFyIHN1bSA9IGZpcnN0Q2hhckNvZGUudG9TdHJpbmcoMTYpICsgc2Vjb25kQ2hhckNvZGUudG9TdHJpbmcoMTYpO1xuICAgICAgcmV0dXJuIHN1cnJvZ2F0ZU1vZGlmaWVycy5pbmRleE9mKHN1bSkgIT09IC0xO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzWmVyb1dpZHRoSm9pbmVyKGNoYXJDb2RlKSB7XG4gICAgICByZXR1cm4gY2hhckNvZGUgPT09IFpFUk9fV0lEVEhfSk9JTkVSX0NPREVfUE9JTlQ7XG4gICAgfSAvLyBUaGlzIGNvZGVwb2ludCBtYXkgY2hhbmdlIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBwcmVjZWRpbmcgY2hhcmFjdGVyLlxuICAgIC8vIElmIHRoYXQgaXMgYSBzeW1ib2wsIGRpbmdiYXQgb3IgZW1vamksIFUrRkUwRiBmb3JjZXMgaXQgdG8gYmUgcmVuZGVyZWRcbiAgICAvLyBhcyBhIGNvbG9yZnVsIGltYWdlIGFzIGNvbXBhcmVkIHRvIGEgbW9ub2Nocm9tZSB0ZXh0IHZhcmlhbnQuXG5cblxuICAgIGZ1bmN0aW9uIGlzVmFyaWF0aW9uU2VsZWN0b3IoY2hhckNvZGUpIHtcbiAgICAgIHJldHVybiBjaGFyQ29kZSA9PT0gVkFSSUFUSU9OX1NFTEVDVE9SXzE2X0NPREVfUE9JTlQ7XG4gICAgfSAvLyBUaGUgcmVnaW9uYWwgaW5kaWNhdG9yIHN5bWJvbHMgYXJlIGEgc2V0IG9mIDI2IGFscGhhYmV0aWMgVW5pY29kZVxuICAgIC8vLyBjaGFyYWN0ZXJzIChB4oCTWikgaW50ZW5kZWQgdG8gYmUgdXNlZCB0byBlbmNvZGUgSVNPIDMxNjYtMSBhbHBoYS0yXG4gICAgLy8gdHdvLWxldHRlciBjb3VudHJ5IGNvZGVzIGluIGEgd2F5IHRoYXQgYWxsb3dzIG9wdGlvbmFsIHNwZWNpYWwgdHJlYXRtZW50LlxuXG5cbiAgICBmdW5jdGlvbiBpc1JlZ2lvbmFsQ29kZShzdHJpbmcpIHtcbiAgICAgIHZhciBjb2RlUG9pbnQgPSBnZXRDb2RlUG9pbnQoc3RyaW5nKTtcblxuICAgICAgaWYgKGNvZGVQb2ludCA+PSBSRUdJT05BTF9DSEFSQUNURVJfQV9DT0RFX1BPSU5UICYmIGNvZGVQb2ludCA8PSBSRUdJT05BTF9DSEFSQUNURVJfWl9DT0RFX1BPSU5UKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBTb21lIEVtb2ppIGltcGxlbWVudGF0aW9ucyByZXByZXNlbnQgY29tYmluYXRpb25zIG9mXG4gICAgLy8gdHdvIOKAnHJlZ2lvbmFsIGluZGljYXRvcuKAnSBsZXR0ZXJzIGFzIGEgc2luZ2xlIGZsYWcgc3ltYm9sLlxuXG5cbiAgICBmdW5jdGlvbiBpc0ZsYWdFbW9qaShzdHJpbmcpIHtcbiAgICAgIHJldHVybiBpc1JlZ2lvbmFsQ29kZShzdHJpbmcuc3Vic3RyKDAsIDIpKSAmJiBpc1JlZ2lvbmFsQ29kZShzdHJpbmcuc3Vic3RyKDIsIDIpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0NvbWJpbmVkQ2hhcmFjdGVyKF9jaGFyMykge1xuICAgICAgcmV0dXJuIGNvbWJpbmVkQ2hhcmFjdGVycy5pbmRleE9mKF9jaGFyMykgIT09IC0xO1xuICAgIH0gLy8gUmVnaW9uYWwgZmxhZ3Mgc3RhcnQgd2l0aCBhIEJMQUNLX0ZMQUdfQ09ERV9QT0lOVFxuICAgIC8vIGZvbG93ZWQgYnkgNSBjaGFycyBpbiB0aGUgVEFHIHJhbmdlXG4gICAgLy8gYW5kIGVuZCB3aXRoIGEgQ0FOQ0VMX1RBR19DT0RFX1BPSU5UXG5cblxuICAgIGZ1bmN0aW9uIGlzUmVnaW9uYWxGbGFnKHRleHQsIGluZGV4KSB7XG4gICAgICB2YXIgY29kZVBvaW50ID0gZ2V0Q29kZVBvaW50KHRleHQuc3Vic3RyKGluZGV4LCAyKSk7XG5cbiAgICAgIGlmIChjb2RlUG9pbnQgIT09IEJMQUNLX0ZMQUdfQ09ERV9QT0lOVCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICBpbmRleCArPSAyO1xuXG4gICAgICB3aGlsZSAoY291bnQgPCA1KSB7XG4gICAgICAgIGNvZGVQb2ludCA9IGdldENvZGVQb2ludCh0ZXh0LnN1YnN0cihpbmRleCwgMikpO1xuXG4gICAgICAgIGlmIChjb2RlUG9pbnQgPCBBX1RBR19DT0RFX1BPSU5UIHx8IGNvZGVQb2ludCA+IFpfVEFHX0NPREVfUE9JTlQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb3VudCArPSAxO1xuICAgICAgICBpbmRleCArPSAyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0Q29kZVBvaW50KHRleHQuc3Vic3RyKGluZGV4LCAyKSkgPT09IENBTkNFTF9UQUdfQ09ERV9QT0lOVDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRJc0xvYWRlZCgpIHtcbiAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBGb250ID0gZnVuY3Rpb24gRm9udCgpIHtcbiAgICAgIHRoaXMuZm9udHMgPSBbXTtcbiAgICAgIHRoaXMuY2hhcnMgPSBudWxsO1xuICAgICAgdGhpcy50eXBla2l0TG9hZGVkID0gMDtcbiAgICAgIHRoaXMuaXNMb2FkZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3dhcm5lZCA9IGZhbHNlO1xuICAgICAgdGhpcy5pbml0VGltZSA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLnNldElzTG9hZGVkQmluZGVkID0gdGhpcy5zZXRJc0xvYWRlZC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5jaGVja0xvYWRlZEZvbnRzQmluZGVkID0gdGhpcy5jaGVja0xvYWRlZEZvbnRzLmJpbmQodGhpcyk7XG4gICAgfTtcblxuICAgIEZvbnQuaXNNb2RpZmllciA9IGlzTW9kaWZpZXI7XG4gICAgRm9udC5pc1plcm9XaWR0aEpvaW5lciA9IGlzWmVyb1dpZHRoSm9pbmVyO1xuICAgIEZvbnQuaXNGbGFnRW1vamkgPSBpc0ZsYWdFbW9qaTtcbiAgICBGb250LmlzUmVnaW9uYWxDb2RlID0gaXNSZWdpb25hbENvZGU7XG4gICAgRm9udC5pc0NvbWJpbmVkQ2hhcmFjdGVyID0gaXNDb21iaW5lZENoYXJhY3RlcjtcbiAgICBGb250LmlzUmVnaW9uYWxGbGFnID0gaXNSZWdpb25hbEZsYWc7XG4gICAgRm9udC5pc1ZhcmlhdGlvblNlbGVjdG9yID0gaXNWYXJpYXRpb25TZWxlY3RvcjtcbiAgICBGb250LkJMQUNLX0ZMQUdfQ09ERV9QT0lOVCA9IEJMQUNLX0ZMQUdfQ09ERV9QT0lOVDtcbiAgICB2YXIgZm9udFByb3RvdHlwZSA9IHtcbiAgICAgIGFkZENoYXJzOiBhZGRDaGFycyxcbiAgICAgIGFkZEZvbnRzOiBhZGRGb250cyxcbiAgICAgIGdldENoYXJEYXRhOiBnZXRDaGFyRGF0YSxcbiAgICAgIGdldEZvbnRCeU5hbWU6IGdldEZvbnRCeU5hbWUsXG4gICAgICBtZWFzdXJlVGV4dDogbWVhc3VyZVRleHQsXG4gICAgICBjaGVja0xvYWRlZEZvbnRzOiBjaGVja0xvYWRlZEZvbnRzLFxuICAgICAgc2V0SXNMb2FkZWQ6IHNldElzTG9hZGVkXG4gICAgfTtcbiAgICBGb250LnByb3RvdHlwZSA9IGZvbnRQcm90b3R5cGU7XG4gICAgcmV0dXJuIEZvbnQ7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBTbG90TWFuYWdlcihhbmltYXRpb25EYXRhKSB7XG4gICAgdGhpcy5hbmltYXRpb25EYXRhID0gYW5pbWF0aW9uRGF0YTtcbiAgfVxuXG4gIFNsb3RNYW5hZ2VyLnByb3RvdHlwZS5nZXRQcm9wID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAodGhpcy5hbmltYXRpb25EYXRhLnNsb3RzICYmIHRoaXMuYW5pbWF0aW9uRGF0YS5zbG90c1tkYXRhLnNpZF0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRhdGEsIHRoaXMuYW5pbWF0aW9uRGF0YS5zbG90c1tkYXRhLnNpZF0ucCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgZnVuY3Rpb24gc2xvdEZhY3RvcnkoYW5pbWF0aW9uRGF0YSkge1xuICAgIHJldHVybiBuZXcgU2xvdE1hbmFnZXIoYW5pbWF0aW9uRGF0YSk7XG4gIH1cblxuICBmdW5jdGlvbiBSZW5kZXJhYmxlRWxlbWVudCgpIHt9XG5cbiAgUmVuZGVyYWJsZUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIGluaXRSZW5kZXJhYmxlOiBmdW5jdGlvbiBpbml0UmVuZGVyYWJsZSgpIHtcbiAgICAgIC8vIGxheWVyJ3MgdmlzaWJpbGl0eSByZWxhdGVkIHRvIGlucG9pbnQgYW5kIG91dHBvaW50LiBSZW5hbWUgaXNWaXNpYmxlIHRvIGlzSW5SYW5nZVxuICAgICAgdGhpcy5pc0luUmFuZ2UgPSBmYWxzZTsgLy8gbGF5ZXIncyBkaXNwbGF5IHN0YXRlXG5cbiAgICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7IC8vIElmIGxheWVyJ3MgdHJhbnNwYXJlbmN5IGVxdWFscyAwLCBpdCBjYW4gYmUgaGlkZGVuXG5cbiAgICAgIHRoaXMuaXNUcmFuc3BhcmVudCA9IGZhbHNlOyAvLyBsaXN0IG9mIGFuaW1hdGVkIGNvbXBvbmVudHNcblxuICAgICAgdGhpcy5yZW5kZXJhYmxlQ29tcG9uZW50cyA9IFtdO1xuICAgIH0sXG4gICAgYWRkUmVuZGVyYWJsZUNvbXBvbmVudDogZnVuY3Rpb24gYWRkUmVuZGVyYWJsZUNvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICAgIGlmICh0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzLmluZGV4T2YoY29tcG9uZW50KSA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJhYmxlQ29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmVSZW5kZXJhYmxlQ29tcG9uZW50OiBmdW5jdGlvbiByZW1vdmVSZW5kZXJhYmxlQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgICAgaWYgKHRoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpICE9PSAtMSkge1xuICAgICAgICB0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzLnNwbGljZSh0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzLmluZGV4T2YoY29tcG9uZW50KSwgMSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwcmVwYXJlUmVuZGVyYWJsZUZyYW1lOiBmdW5jdGlvbiBwcmVwYXJlUmVuZGVyYWJsZUZyYW1lKG51bSkge1xuICAgICAgdGhpcy5jaGVja0xheWVyTGltaXRzKG51bSk7XG4gICAgfSxcbiAgICBjaGVja1RyYW5zcGFyZW5jeTogZnVuY3Rpb24gY2hlY2tUcmFuc3BhcmVuY3koKSB7XG4gICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5vLnYgPD0gMCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNUcmFuc3BhcmVudCAmJiB0aGlzLmdsb2JhbERhdGEucmVuZGVyQ29uZmlnLmhpZGVPblRyYW5zcGFyZW50KSB7XG4gICAgICAgICAgdGhpcy5pc1RyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzVHJhbnNwYXJlbnQpIHtcbiAgICAgICAgdGhpcy5pc1RyYW5zcGFyZW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqIEluaXRpYWxpemVzIGZyYW1lIHJlbGF0ZWQgcHJvcGVydGllcy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG51bVxyXG4gICAgICAgKiBjdXJyZW50IGZyYW1lIG51bWJlciBpbiBMYXllcidzIHRpbWVcclxuICAgICAgICpcclxuICAgICAgICovXG4gICAgY2hlY2tMYXllckxpbWl0czogZnVuY3Rpb24gY2hlY2tMYXllckxpbWl0cyhudW0pIHtcbiAgICAgIGlmICh0aGlzLmRhdGEuaXAgLSB0aGlzLmRhdGEuc3QgPD0gbnVtICYmIHRoaXMuZGF0YS5vcCAtIHRoaXMuZGF0YS5zdCA+IG51bSkge1xuICAgICAgICBpZiAodGhpcy5pc0luUmFuZ2UgIT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuX21kZiA9IHRydWU7XG4gICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmlzSW5SYW5nZSA9IHRydWU7XG4gICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0luUmFuZ2UgIT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc0luUmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJSZW5kZXJhYmxlOiBmdW5jdGlvbiByZW5kZXJSZW5kZXJhYmxlKCkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5yZW5kZXJhYmxlQ29tcG9uZW50cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzW2ldLnJlbmRlckZyYW1lKHRoaXMuX2lzRmlyc3RGcmFtZSk7XG4gICAgICB9XG4gICAgICAvKiB0aGlzLm1hc2tNYW5hZ2VyLnJlbmRlckZyYW1lKHRoaXMuZmluYWxUcmFuc2Zvcm0ubWF0KTtcclxuICAgICAgICAgIHRoaXMucmVuZGVyYWJsZUVmZmVjdHNNYW5hZ2VyLnJlbmRlckZyYW1lKHRoaXMuX2lzRmlyc3RGcmFtZSk7ICovXG5cbiAgICB9LFxuICAgIHNvdXJjZVJlY3RBdFRpbWU6IGZ1bmN0aW9uIHNvdXJjZVJlY3RBdFRpbWUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHdpZHRoOiAxMDAsXG4gICAgICAgIGhlaWdodDogMTAwXG4gICAgICB9O1xuICAgIH0sXG4gICAgZ2V0TGF5ZXJTaXplOiBmdW5jdGlvbiBnZXRMYXllclNpemUoKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLnR5ID09PSA1KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdzogdGhpcy5kYXRhLnRleHREYXRhLndpZHRoLFxuICAgICAgICAgIGg6IHRoaXMuZGF0YS50ZXh0RGF0YS5oZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdzogdGhpcy5kYXRhLndpZHRoLFxuICAgICAgICBoOiB0aGlzLmRhdGEuaGVpZ2h0XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0QmxlbmRNb2RlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBibGVuZE1vZGVFbnVtcyA9IHtcbiAgICAgIDA6ICdzb3VyY2Utb3ZlcicsXG4gICAgICAxOiAnbXVsdGlwbHknLFxuICAgICAgMjogJ3NjcmVlbicsXG4gICAgICAzOiAnb3ZlcmxheScsXG4gICAgICA0OiAnZGFya2VuJyxcbiAgICAgIDU6ICdsaWdodGVuJyxcbiAgICAgIDY6ICdjb2xvci1kb2RnZScsXG4gICAgICA3OiAnY29sb3ItYnVybicsXG4gICAgICA4OiAnaGFyZC1saWdodCcsXG4gICAgICA5OiAnc29mdC1saWdodCcsXG4gICAgICAxMDogJ2RpZmZlcmVuY2UnLFxuICAgICAgMTE6ICdleGNsdXNpb24nLFxuICAgICAgMTI6ICdodWUnLFxuICAgICAgMTM6ICdzYXR1cmF0aW9uJyxcbiAgICAgIDE0OiAnY29sb3InLFxuICAgICAgMTU6ICdsdW1pbm9zaXR5J1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtb2RlKSB7XG4gICAgICByZXR1cm4gYmxlbmRNb2RlRW51bXNbbW9kZV0gfHwgJyc7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFNsaWRlckVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDAsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBBbmdsZUVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDAsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBDb2xvckVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDEsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBQb2ludEVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDEsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBMYXllckluZGV4RWZmZWN0KGRhdGEsIGVsZW0sIGNvbnRhaW5lcikge1xuICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudiwgMCwgMCwgY29udGFpbmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIE1hc2tJbmRleEVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDAsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBDaGVja2JveEVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDAsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBOb1ZhbHVlRWZmZWN0KCkge1xuICAgIHRoaXMucCA9IHt9O1xuICB9XG5cbiAgZnVuY3Rpb24gRWZmZWN0c01hbmFnZXIoZGF0YSwgZWxlbWVudCkge1xuICAgIHZhciBlZmZlY3RzID0gZGF0YS5lZiB8fCBbXTtcbiAgICB0aGlzLmVmZmVjdEVsZW1lbnRzID0gW107XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGVmZmVjdHMubGVuZ3RoO1xuICAgIHZhciBlZmZlY3RJdGVtO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBlZmZlY3RJdGVtID0gbmV3IEdyb3VwRWZmZWN0KGVmZmVjdHNbaV0sIGVsZW1lbnQpO1xuICAgICAgdGhpcy5lZmZlY3RFbGVtZW50cy5wdXNoKGVmZmVjdEl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIEdyb3VwRWZmZWN0KGRhdGEsIGVsZW1lbnQpIHtcbiAgICB0aGlzLmluaXQoZGF0YSwgZWxlbWVudCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIEdyb3VwRWZmZWN0KTtcbiAgR3JvdXBFZmZlY3QucHJvdG90eXBlLmdldFZhbHVlID0gR3JvdXBFZmZlY3QucHJvdG90eXBlLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcztcblxuICBHcm91cEVmZmVjdC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChkYXRhLCBlbGVtZW50KSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmVmZmVjdEVsZW1lbnRzID0gW107XG4gICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW1lbnQpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmRhdGEuZWYubGVuZ3RoO1xuICAgIHZhciBlZmY7XG4gICAgdmFyIGVmZmVjdHMgPSB0aGlzLmRhdGEuZWY7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGVmZiA9IG51bGw7XG5cbiAgICAgIHN3aXRjaCAoZWZmZWN0c1tpXS50eSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgZWZmID0gbmV3IFNsaWRlckVmZmVjdChlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgZWZmID0gbmV3IEFuZ2xlRWZmZWN0KGVmZmVjdHNbaV0sIGVsZW1lbnQsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBlZmYgPSBuZXcgQ29sb3JFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGVmZiA9IG5ldyBQb2ludEVmZmVjdChlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDQ6XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICBlZmYgPSBuZXcgQ2hlY2tib3hFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICBlZmYgPSBuZXcgTGF5ZXJJbmRleEVmZmVjdChlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDExOlxuICAgICAgICAgIGVmZiA9IG5ldyBNYXNrSW5kZXhFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIGVmZiA9IG5ldyBFZmZlY3RzTWFuYWdlcihlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gY2FzZSA2OlxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZWZmID0gbmV3IE5vVmFsdWVFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChlZmYpIHtcbiAgICAgICAgdGhpcy5lZmZlY3RFbGVtZW50cy5wdXNoKGVmZik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIEJhc2VFbGVtZW50KCkge31cblxuICBCYXNlRWxlbWVudC5wcm90b3R5cGUgPSB7XG4gICAgY2hlY2tNYXNrczogZnVuY3Rpb24gY2hlY2tNYXNrcygpIHtcbiAgICAgIGlmICghdGhpcy5kYXRhLmhhc01hc2spIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gdGhpcy5kYXRhLm1hc2tzUHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEubWFza3NQcm9wZXJ0aWVzW2ldLm1vZGUgIT09ICduJyAmJiB0aGlzLmRhdGEubWFza3NQcm9wZXJ0aWVzW2ldLmNsICE9PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBpbml0RXhwcmVzc2lvbnM6IGZ1bmN0aW9uIGluaXRFeHByZXNzaW9ucygpIHtcbiAgICAgIHZhciBleHByZXNzaW9uc0ludGVyZmFjZXMgPSBnZXRFeHByZXNzaW9uSW50ZXJmYWNlcygpO1xuXG4gICAgICBpZiAoIWV4cHJlc3Npb25zSW50ZXJmYWNlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBMYXllckV4cHJlc3Npb25JbnRlcmZhY2UgPSBleHByZXNzaW9uc0ludGVyZmFjZXMoJ2xheWVyJyk7XG4gICAgICB2YXIgRWZmZWN0c0V4cHJlc3Npb25JbnRlcmZhY2UgPSBleHByZXNzaW9uc0ludGVyZmFjZXMoJ2VmZmVjdHMnKTtcbiAgICAgIHZhciBTaGFwZUV4cHJlc3Npb25JbnRlcmZhY2UgPSBleHByZXNzaW9uc0ludGVyZmFjZXMoJ3NoYXBlJyk7XG4gICAgICB2YXIgVGV4dEV4cHJlc3Npb25JbnRlcmZhY2UgPSBleHByZXNzaW9uc0ludGVyZmFjZXMoJ3RleHQnKTtcbiAgICAgIHZhciBDb21wRXhwcmVzc2lvbkludGVyZmFjZSA9IGV4cHJlc3Npb25zSW50ZXJmYWNlcygnY29tcCcpO1xuICAgICAgdGhpcy5sYXllckludGVyZmFjZSA9IExheWVyRXhwcmVzc2lvbkludGVyZmFjZSh0aGlzKTtcblxuICAgICAgaWYgKHRoaXMuZGF0YS5oYXNNYXNrICYmIHRoaXMubWFza01hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5sYXllckludGVyZmFjZS5yZWdpc3Rlck1hc2tJbnRlcmZhY2UodGhpcy5tYXNrTWFuYWdlcik7XG4gICAgICB9XG5cbiAgICAgIHZhciBlZmZlY3RzSW50ZXJmYWNlID0gRWZmZWN0c0V4cHJlc3Npb25JbnRlcmZhY2UuY3JlYXRlRWZmZWN0c0ludGVyZmFjZSh0aGlzLCB0aGlzLmxheWVySW50ZXJmYWNlKTtcbiAgICAgIHRoaXMubGF5ZXJJbnRlcmZhY2UucmVnaXN0ZXJFZmZlY3RzSW50ZXJmYWNlKGVmZmVjdHNJbnRlcmZhY2UpO1xuXG4gICAgICBpZiAodGhpcy5kYXRhLnR5ID09PSAwIHx8IHRoaXMuZGF0YS54dCkge1xuICAgICAgICB0aGlzLmNvbXBJbnRlcmZhY2UgPSBDb21wRXhwcmVzc2lvbkludGVyZmFjZSh0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLnR5ID09PSA0KSB7XG4gICAgICAgIHRoaXMubGF5ZXJJbnRlcmZhY2Uuc2hhcGVJbnRlcmZhY2UgPSBTaGFwZUV4cHJlc3Npb25JbnRlcmZhY2UodGhpcy5zaGFwZXNEYXRhLCB0aGlzLml0ZW1zRGF0YSwgdGhpcy5sYXllckludGVyZmFjZSk7XG4gICAgICAgIHRoaXMubGF5ZXJJbnRlcmZhY2UuY29udGVudCA9IHRoaXMubGF5ZXJJbnRlcmZhY2Uuc2hhcGVJbnRlcmZhY2U7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS50eSA9PT0gNSkge1xuICAgICAgICB0aGlzLmxheWVySW50ZXJmYWNlLnRleHRJbnRlcmZhY2UgPSBUZXh0RXhwcmVzc2lvbkludGVyZmFjZSh0aGlzKTtcbiAgICAgICAgdGhpcy5sYXllckludGVyZmFjZS50ZXh0ID0gdGhpcy5sYXllckludGVyZmFjZS50ZXh0SW50ZXJmYWNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0QmxlbmRNb2RlOiBmdW5jdGlvbiBzZXRCbGVuZE1vZGUoKSB7XG4gICAgICB2YXIgYmxlbmRNb2RlVmFsdWUgPSBnZXRCbGVuZE1vZGUodGhpcy5kYXRhLmJtKTtcbiAgICAgIHZhciBlbGVtID0gdGhpcy5iYXNlRWxlbWVudCB8fCB0aGlzLmxheWVyRWxlbWVudDtcbiAgICAgIGVsZW0uc3R5bGVbJ21peC1ibGVuZC1tb2RlJ10gPSBibGVuZE1vZGVWYWx1ZTtcbiAgICB9LFxuICAgIGluaXRCYXNlRGF0YTogZnVuY3Rpb24gaW5pdEJhc2VEYXRhKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICAgIHRoaXMuZ2xvYmFsRGF0YSA9IGdsb2JhbERhdGE7XG4gICAgICB0aGlzLmNvbXAgPSBjb21wO1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHRoaXMubGF5ZXJJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpOyAvLyBTdHJldGNoIGZhY3RvciBmb3Igb2xkIGFuaW1hdGlvbnMgbWlzc2luZyB0aGlzIHByb3BlcnR5LlxuXG4gICAgICBpZiAoIXRoaXMuZGF0YS5zcikge1xuICAgICAgICB0aGlzLmRhdGEuc3IgPSAxO1xuICAgICAgfSAvLyBlZmZlY3RzIG1hbmFnZXJcblxuXG4gICAgICB0aGlzLmVmZmVjdHNNYW5hZ2VyID0gbmV3IEVmZmVjdHNNYW5hZ2VyKHRoaXMuZGF0YSwgdGhpcywgdGhpcy5keW5hbWljUHJvcGVydGllcyk7XG4gICAgfSxcbiAgICBnZXRUeXBlOiBmdW5jdGlvbiBnZXRUeXBlKCkge1xuICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICB9LFxuICAgIHNvdXJjZVJlY3RBdFRpbWU6IGZ1bmN0aW9uIHNvdXJjZVJlY3RBdFRpbWUoKSB7fVxuICB9O1xuXG4gIC8qKlxyXG4gICAqIEBmaWxlXHJcbiAgICogSGFuZGxlcyBlbGVtZW50J3MgbGF5ZXIgZnJhbWUgdXBkYXRlLlxyXG4gICAqIENoZWNrcyBsYXllciBpbiBwb2ludCBhbmQgb3V0IHBvaW50XHJcbiAgICpcclxuICAgKi9cbiAgZnVuY3Rpb24gRnJhbWVFbGVtZW50KCkge31cblxuICBGcmFtZUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIC8qKlxyXG4gICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICogSW5pdGlhbGl6ZXMgZnJhbWUgcmVsYXRlZCBwcm9wZXJ0aWVzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKi9cbiAgICBpbml0RnJhbWU6IGZ1bmN0aW9uIGluaXRGcmFtZSgpIHtcbiAgICAgIC8vIHNldCB0byB0cnVlIHdoZW4gaW5wb2ludCBpcyByZW5kZXJlZFxuICAgICAgdGhpcy5faXNGaXJzdEZyYW1lID0gZmFsc2U7IC8vIGxpc3Qgb2YgYW5pbWF0ZWQgcHJvcGVydGllc1xuXG4gICAgICB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzID0gW107IC8vIElmIGxheWVyIGhhcyBiZWVuIG1vZGlmaWVkIGluIGN1cnJlbnQgdGljayB0aGlzIHdpbGwgYmUgdHJ1ZVxuXG4gICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgKiBDYWxjdWxhdGVzIGFsbCBkeW5hbWljIHZhbHVlc1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtXHJcbiAgICAgICAqIGN1cnJlbnQgZnJhbWUgbnVtYmVyIGluIExheWVyJ3MgdGltZVxyXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzVmlzaWJsZVxyXG4gICAgICAgKiBpZiBsYXllcnMgaXMgY3VycmVudGx5IGluIHJhbmdlXHJcbiAgICAgICAqXHJcbiAgICAgICAqL1xuICAgIHByZXBhcmVQcm9wZXJ0aWVzOiBmdW5jdGlvbiBwcmVwYXJlUHJvcGVydGllcyhudW0sIGlzVmlzaWJsZSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoaXNWaXNpYmxlIHx8IHRoaXMuX2lzUGFyZW50ICYmIHRoaXMuZHluYW1pY1Byb3BlcnRpZXNbaV0ucHJvcFR5cGUgPT09ICd0cmFuc2Zvcm0nKSB7XG4gICAgICAgICAgdGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5nZXRWYWx1ZSgpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuZHluYW1pY1Byb3BlcnRpZXNbaV0uX21kZikge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLl9tZGYgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFkZER5bmFtaWNQcm9wZXJ0eTogZnVuY3Rpb24gYWRkRHluYW1pY1Byb3BlcnR5KHByb3ApIHtcbiAgICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICAgIHRoaXMuZHluYW1pY1Byb3BlcnRpZXMucHVzaChwcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gRm9vdGFnZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgdGhpcy5pbml0UmVuZGVyYWJsZSgpO1xuICAgIHRoaXMuYXNzZXREYXRhID0gZ2xvYmFsRGF0YS5nZXRBc3NldERhdGEoZGF0YS5yZWZJZCk7XG4gICAgdGhpcy5mb290YWdlRGF0YSA9IGdsb2JhbERhdGEuaW1hZ2VMb2FkZXIuZ2V0QXNzZXQodGhpcy5hc3NldERhdGEpO1xuICAgIHRoaXMuaW5pdEJhc2VEYXRhKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgRm9vdGFnZUVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGV4dGVuZFByb3RvdHlwZShbUmVuZGVyYWJsZUVsZW1lbnQsIEJhc2VFbGVtZW50LCBGcmFtZUVsZW1lbnRdLCBGb290YWdlRWxlbWVudCk7XG5cbiAgRm9vdGFnZUVsZW1lbnQucHJvdG90eXBlLmdldEJhc2VFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIEZvb3RhZ2VFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIEZvb3RhZ2VFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge307XG5cbiAgRm9vdGFnZUVsZW1lbnQucHJvdG90eXBlLmluaXRFeHByZXNzaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXhwcmVzc2lvbnNJbnRlcmZhY2VzID0gZ2V0RXhwcmVzc2lvbkludGVyZmFjZXMoKTtcblxuICAgIGlmICghZXhwcmVzc2lvbnNJbnRlcmZhY2VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIEZvb3RhZ2VJbnRlcmZhY2UgPSBleHByZXNzaW9uc0ludGVyZmFjZXMoJ2Zvb3RhZ2UnKTtcbiAgICB0aGlzLmxheWVySW50ZXJmYWNlID0gRm9vdGFnZUludGVyZmFjZSh0aGlzKTtcbiAgfTtcblxuICBGb290YWdlRWxlbWVudC5wcm90b3R5cGUuZ2V0Rm9vdGFnZURhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9vdGFnZURhdGE7XG4gIH07XG5cbiAgZnVuY3Rpb24gQXVkaW9FbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmluaXRGcmFtZSgpO1xuICAgIHRoaXMuaW5pdFJlbmRlcmFibGUoKTtcbiAgICB0aGlzLmFzc2V0RGF0YSA9IGdsb2JhbERhdGEuZ2V0QXNzZXREYXRhKGRhdGEucmVmSWQpO1xuICAgIHRoaXMuaW5pdEJhc2VEYXRhKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xuICAgIHRoaXMuX2NhblBsYXkgPSBmYWxzZTtcbiAgICB2YXIgYXNzZXRQYXRoID0gdGhpcy5nbG9iYWxEYXRhLmdldEFzc2V0c1BhdGgodGhpcy5hc3NldERhdGEpO1xuICAgIHRoaXMuYXVkaW8gPSB0aGlzLmdsb2JhbERhdGEuYXVkaW9Db250cm9sbGVyLmNyZWF0ZUF1ZGlvKGFzc2V0UGF0aCk7XG4gICAgdGhpcy5fY3VycmVudFRpbWUgPSAwO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5hdWRpb0NvbnRyb2xsZXIuYWRkQXVkaW8odGhpcyk7XG4gICAgdGhpcy5fdm9sdW1lTXVsdGlwbGllciA9IDE7XG4gICAgdGhpcy5fdm9sdW1lID0gMTtcbiAgICB0aGlzLl9wcmV2aW91c1ZvbHVtZSA9IG51bGw7XG4gICAgdGhpcy50bSA9IGRhdGEudG0gPyBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLnRtLCAwLCBnbG9iYWxEYXRhLmZyYW1lUmF0ZSwgdGhpcykgOiB7XG4gICAgICBfcGxhY2Vob2xkZXI6IHRydWVcbiAgICB9O1xuICAgIHRoaXMubHYgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLmF1ICYmIGRhdGEuYXUubHYgPyBkYXRhLmF1Lmx2IDoge1xuICAgICAgazogWzEwMF1cbiAgICB9LCAxLCAwLjAxLCB0aGlzKTtcbiAgfVxuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHRoaXMucHJlcGFyZVJlbmRlcmFibGVGcmFtZShudW0sIHRydWUpO1xuICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0cnVlKTtcblxuICAgIGlmICghdGhpcy50bS5fcGxhY2Vob2xkZXIpIHtcbiAgICAgIHZhciB0aW1lUmVtYXBwZWQgPSB0aGlzLnRtLnY7XG4gICAgICB0aGlzLl9jdXJyZW50VGltZSA9IHRpbWVSZW1hcHBlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSBudW0gLyB0aGlzLmRhdGEuc3I7XG4gICAgfVxuXG4gICAgdGhpcy5fdm9sdW1lID0gdGhpcy5sdi52WzBdO1xuICAgIHZhciB0b3RhbFZvbHVtZSA9IHRoaXMuX3ZvbHVtZSAqIHRoaXMuX3ZvbHVtZU11bHRpcGxpZXI7XG5cbiAgICBpZiAodGhpcy5fcHJldmlvdXNWb2x1bWUgIT09IHRvdGFsVm9sdW1lKSB7XG4gICAgICB0aGlzLl9wcmV2aW91c1ZvbHVtZSA9IHRvdGFsVm9sdW1lO1xuICAgICAgdGhpcy5hdWRpby52b2x1bWUodG90YWxWb2x1bWUpO1xuICAgIH1cbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW1JlbmRlcmFibGVFbGVtZW50LCBCYXNlRWxlbWVudCwgRnJhbWVFbGVtZW50XSwgQXVkaW9FbGVtZW50KTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzSW5SYW5nZSAmJiB0aGlzLl9jYW5QbGF5KSB7XG4gICAgICBpZiAoIXRoaXMuX2lzUGxheWluZykge1xuICAgICAgICB0aGlzLmF1ZGlvLnBsYXkoKTtcbiAgICAgICAgdGhpcy5hdWRpby5zZWVrKHRoaXMuX2N1cnJlbnRUaW1lIC8gdGhpcy5nbG9iYWxEYXRhLmZyYW1lUmF0ZSk7XG4gICAgICAgIHRoaXMuX2lzUGxheWluZyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLmF1ZGlvLnBsYXlpbmcoKSB8fCBNYXRoLmFicyh0aGlzLl9jdXJyZW50VGltZSAvIHRoaXMuZ2xvYmFsRGF0YS5mcmFtZVJhdGUgLSB0aGlzLmF1ZGlvLnNlZWsoKSkgPiAwLjEpIHtcbiAgICAgICAgdGhpcy5hdWRpby5zZWVrKHRoaXMuX2N1cnJlbnRUaW1lIC8gdGhpcy5nbG9iYWxEYXRhLmZyYW1lUmF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHsvLyB0aGlzLmF1ZGlvLnBsYXkoKVxuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmF1ZGlvLnBhdXNlKCk7XG4gICAgdGhpcy5faXNQbGF5aW5nID0gZmFsc2U7XG4gIH07XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmF1ZGlvLnBhdXNlKCk7XG4gICAgdGhpcy5faXNQbGF5aW5nID0gZmFsc2U7XG4gICAgdGhpcy5fY2FuUGxheSA9IGZhbHNlO1xuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2NhblBsYXkgPSB0cnVlO1xuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuc2V0UmF0ZSA9IGZ1bmN0aW9uIChyYXRlVmFsdWUpIHtcbiAgICB0aGlzLmF1ZGlvLnJhdGUocmF0ZVZhbHVlKTtcbiAgfTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLnZvbHVtZSA9IGZ1bmN0aW9uICh2b2x1bWVWYWx1ZSkge1xuICAgIHRoaXMuX3ZvbHVtZU11bHRpcGxpZXIgPSB2b2x1bWVWYWx1ZTtcbiAgICB0aGlzLl9wcmV2aW91c1ZvbHVtZSA9IHZvbHVtZVZhbHVlICogdGhpcy5fdm9sdW1lO1xuICAgIHRoaXMuYXVkaW8udm9sdW1lKHRoaXMuX3ByZXZpb3VzVm9sdW1lKTtcbiAgfTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLmdldEJhc2VFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuc291cmNlUmVjdEF0VGltZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuaW5pdEV4cHJlc3Npb25zID0gZnVuY3Rpb24gKCkge307XG5cbiAgZnVuY3Rpb24gQmFzZVJlbmRlcmVyKCkge31cblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmNoZWNrTGF5ZXJzID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG4gICAgdmFyIGRhdGE7XG4gICAgdGhpcy5jb21wbGV0ZUxheWVycyA9IHRydWU7XG5cbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgaWYgKCF0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIGRhdGEgPSB0aGlzLmxheWVyc1tpXTtcblxuICAgICAgICBpZiAoZGF0YS5pcCAtIGRhdGEuc3QgPD0gbnVtIC0gdGhpcy5sYXllcnNbaV0uc3QgJiYgZGF0YS5vcCAtIGRhdGEuc3QgPiBudW0gLSB0aGlzLmxheWVyc1tpXS5zdCkge1xuICAgICAgICAgIHRoaXMuYnVpbGRJdGVtKGkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29tcGxldGVMYXllcnMgPSB0aGlzLmVsZW1lbnRzW2ldID8gdGhpcy5jb21wbGV0ZUxheWVycyA6IGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2tQZW5kaW5nRWxlbWVudHMoKTtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUl0ZW0gPSBmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICBzd2l0Y2ggKGxheWVyLnR5KSB7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUltYWdlKGxheWVyKTtcblxuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVDb21wKGxheWVyKTtcblxuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVTb2xpZChsYXllcik7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTnVsbChsYXllcik7XG5cbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2hhcGUobGF5ZXIpO1xuXG4gICAgICBjYXNlIDU6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRleHQobGF5ZXIpO1xuXG4gICAgICBjYXNlIDY6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUF1ZGlvKGxheWVyKTtcblxuICAgICAgY2FzZSAxMzpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQ2FtZXJhKGxheWVyKTtcblxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRm9vdGFnZShsYXllcik7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZU51bGwobGF5ZXIpO1xuICAgIH1cbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUNhbWVyYSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdVxcJ3JlIHVzaW5nIGEgM2QgY2FtZXJhLiBUcnkgdGhlIGh0bWwgcmVuZGVyZXIuJyk7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVBdWRpbyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBBdWRpb0VsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUZvb3RhZ2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgRm9vdGFnZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmJ1aWxkQWxsSXRlbXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5idWlsZEl0ZW0oaSk7XG4gICAgfVxuXG4gICAgdGhpcy5jaGVja1BlbmRpbmdFbGVtZW50cygpO1xuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuaW5jbHVkZUxheWVycyA9IGZ1bmN0aW9uIChuZXdMYXllcnMpIHtcbiAgICB0aGlzLmNvbXBsZXRlTGF5ZXJzID0gZmFsc2U7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IG5ld0xheWVycy5sZW5ndGg7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGogPSAwO1xuXG4gICAgICB3aGlsZSAoaiA8IGpMZW4pIHtcbiAgICAgICAgaWYgKHRoaXMubGF5ZXJzW2pdLmlkID09PSBuZXdMYXllcnNbaV0uaWQpIHtcbiAgICAgICAgICB0aGlzLmxheWVyc1tqXSA9IG5ld0xheWVyc1tpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGogKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5zZXRQcm9qZWN0SW50ZXJmYWNlID0gZnVuY3Rpb24gKHBJbnRlcmZhY2UpIHtcbiAgICB0aGlzLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZSA9IHBJbnRlcmZhY2U7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5pbml0SXRlbXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmdsb2JhbERhdGEucHJvZ3Jlc3NpdmVMb2FkKSB7XG4gICAgICB0aGlzLmJ1aWxkQWxsSXRlbXMoKTtcbiAgICB9XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5idWlsZEVsZW1lbnRQYXJlbnRpbmcgPSBmdW5jdGlvbiAoZWxlbWVudCwgcGFyZW50TmFtZSwgaGllcmFyY2h5KSB7XG4gICAgdmFyIGVsZW1lbnRzID0gdGhpcy5lbGVtZW50cztcbiAgICB2YXIgbGF5ZXJzID0gdGhpcy5sYXllcnM7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSBsYXllcnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmIChsYXllcnNbaV0uaW5kID09IHBhcmVudE5hbWUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICAgICAgaWYgKCFlbGVtZW50c1tpXSB8fCBlbGVtZW50c1tpXSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMuYnVpbGRJdGVtKGkpO1xuICAgICAgICAgIHRoaXMuYWRkUGVuZGluZ0VsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGllcmFyY2h5LnB1c2goZWxlbWVudHNbaV0pO1xuICAgICAgICAgIGVsZW1lbnRzW2ldLnNldEFzUGFyZW50KCk7XG5cbiAgICAgICAgICBpZiAobGF5ZXJzW2ldLnBhcmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkRWxlbWVudFBhcmVudGluZyhlbGVtZW50LCBsYXllcnNbaV0ucGFyZW50LCBoaWVyYXJjaHkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LnNldEhpZXJhcmNoeShoaWVyYXJjaHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuYWRkUGVuZGluZ0VsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5zZWFyY2hFeHRyYUNvbXBvc2l0aW9ucyA9IGZ1bmN0aW9uIChhc3NldHMpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gYXNzZXRzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKGFzc2V0c1tpXS54dCkge1xuICAgICAgICB2YXIgY29tcCA9IHRoaXMuY3JlYXRlQ29tcChhc3NldHNbaV0pO1xuICAgICAgICBjb21wLmluaXRFeHByZXNzaW9ucygpO1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZS5yZWdpc3RlckNvbXBvc2l0aW9uKGNvbXApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmdldEVsZW1lbnRCeUlkID0gZnVuY3Rpb24gKGluZCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0uZGF0YS5pbmQgPT09IGluZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50c1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmdldEVsZW1lbnRCeVBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xuICAgIHZhciBwYXRoVmFsdWUgPSBwYXRoLnNoaWZ0KCk7XG4gICAgdmFyIGVsZW1lbnQ7XG5cbiAgICBpZiAodHlwZW9mIHBhdGhWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzW3BhdGhWYWx1ZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0uZGF0YS5ubSA9PT0gcGF0aFZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudCA9IHRoaXMuZWxlbWVudHNbaV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50LmdldEVsZW1lbnRCeVBhdGgocGF0aCk7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5zZXR1cEdsb2JhbERhdGEgPSBmdW5jdGlvbiAoYW5pbURhdGEsIGZvbnRzQ29udGFpbmVyKSB7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyID0gbmV3IEZvbnRNYW5hZ2VyKCk7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnNsb3RNYW5hZ2VyID0gc2xvdEZhY3RvcnkoYW5pbURhdGEpO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5hZGRDaGFycyhhbmltRGF0YS5jaGFycyk7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmFkZEZvbnRzKGFuaW1EYXRhLmZvbnRzLCBmb250c0NvbnRhaW5lcik7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmdldEFzc2V0RGF0YSA9IHRoaXMuYW5pbWF0aW9uSXRlbS5nZXRBc3NldERhdGEuYmluZCh0aGlzLmFuaW1hdGlvbkl0ZW0pO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5nZXRBc3NldHNQYXRoID0gdGhpcy5hbmltYXRpb25JdGVtLmdldEFzc2V0c1BhdGguYmluZCh0aGlzLmFuaW1hdGlvbkl0ZW0pO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5pbWFnZUxvYWRlciA9IHRoaXMuYW5pbWF0aW9uSXRlbS5pbWFnZVByZWxvYWRlcjtcbiAgICB0aGlzLmdsb2JhbERhdGEuYXVkaW9Db250cm9sbGVyID0gdGhpcy5hbmltYXRpb25JdGVtLmF1ZGlvQ29udHJvbGxlcjtcbiAgICB0aGlzLmdsb2JhbERhdGEuZnJhbWVJZCA9IDA7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmZyYW1lUmF0ZSA9IGFuaW1EYXRhLmZyO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5ubSA9IGFuaW1EYXRhLm5tO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZSA9IHtcbiAgICAgIHc6IGFuaW1EYXRhLncsXG4gICAgICBoOiBhbmltRGF0YS5oXG4gICAgfTtcbiAgfTtcblxuICB2YXIgZWZmZWN0VHlwZXMgPSB7XG4gICAgVFJBTlNGT1JNX0VGRkVDVDogJ3RyYW5zZm9ybUVGZmVjdCdcbiAgfTtcblxuICBmdW5jdGlvbiBUcmFuc2Zvcm1FbGVtZW50KCkge31cblxuICBUcmFuc2Zvcm1FbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICBpbml0VHJhbnNmb3JtOiBmdW5jdGlvbiBpbml0VHJhbnNmb3JtKCkge1xuICAgICAgdmFyIG1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0gPSB7XG4gICAgICAgIG1Qcm9wOiB0aGlzLmRhdGEua3MgPyBUcmFuc2Zvcm1Qcm9wZXJ0eUZhY3RvcnkuZ2V0VHJhbnNmb3JtUHJvcGVydHkodGhpcywgdGhpcy5kYXRhLmtzLCB0aGlzKSA6IHtcbiAgICAgICAgICBvOiAwXG4gICAgICAgIH0sXG4gICAgICAgIF9tYXRNZGY6IGZhbHNlLFxuICAgICAgICBfbG9jYWxNYXRNZGY6IGZhbHNlLFxuICAgICAgICBfb3BNZGY6IGZhbHNlLFxuICAgICAgICBtYXQ6IG1hdCxcbiAgICAgICAgbG9jYWxNYXQ6IG1hdCxcbiAgICAgICAgbG9jYWxPcGFjaXR5OiAxXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5kYXRhLmFvKSB7XG4gICAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3AuYXV0b09yaWVudGVkID0gdHJ1ZTtcbiAgICAgIH0gLy8gVE9ETzogY2hlY2sgVFlQRSAxMTogR3VpZGVkIGVsZW1lbnRzXG5cblxuICAgICAgaWYgKHRoaXMuZGF0YS50eSAhPT0gMTEpIHsvLyB0aGlzLmNyZWF0ZUVsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJUcmFuc2Zvcm06IGZ1bmN0aW9uIHJlbmRlclRyYW5zZm9ybSgpIHtcbiAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0uX29wTWRmID0gdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5vLl9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lO1xuICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmID0gdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5fbWRmIHx8IHRoaXMuX2lzRmlyc3RGcmFtZTtcblxuICAgICAgaWYgKHRoaXMuaGllcmFyY2h5KSB7XG4gICAgICAgIHZhciBtYXQ7XG4gICAgICAgIHZhciBmaW5hbE1hdCA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubWF0O1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmhpZXJhcmNoeS5sZW5ndGg7IC8vIENoZWNraW5nIGlmIGFueSBvZiB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cmljZXMgaW4gdGhlIGhpZXJhcmNoeSBjaGFpbiBoYXMgY2hhbmdlZC5cblxuICAgICAgICBpZiAoIXRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZikge1xuICAgICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3AuX21kZikge1xuICAgICAgICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGYgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGYpIHtcbiAgICAgICAgICBtYXQgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnYucHJvcHM7XG4gICAgICAgICAgZmluYWxNYXQuY2xvbmVGcm9tUHJvcHMobWF0KTtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgZmluYWxNYXQubXVsdGlwbHkodGhpcy5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3Audik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGYpIHtcbiAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5fbG9jYWxNYXRNZGYgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGY7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZikge1xuICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsT3BhY2l0eSA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3Auby52O1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyTG9jYWxUcmFuc2Zvcm06IGZ1bmN0aW9uIHJlbmRlckxvY2FsVHJhbnNmb3JtKCkge1xuICAgICAgaWYgKHRoaXMubG9jYWxUcmFuc2Zvcm1zKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMubG9jYWxUcmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5fbG9jYWxNYXRNZGYgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGY7XG5cbiAgICAgICAgaWYgKCF0aGlzLmZpbmFsVHJhbnNmb3JtLl9sb2NhbE1hdE1kZiB8fCAhdGhpcy5maW5hbFRyYW5zZm9ybS5fb3BNZGYpIHtcbiAgICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgICAgaWYgKHRoaXMubG9jYWxUcmFuc2Zvcm1zW2ldLl9tZGYpIHtcbiAgICAgICAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5fbG9jYWxNYXRNZGYgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5sb2NhbFRyYW5zZm9ybXNbaV0uX29wTWRmICYmICF0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZikge1xuICAgICAgICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsT3BhY2l0eSA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3Auby52O1xuICAgICAgICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZiA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5fbG9jYWxNYXRNZGYpIHtcbiAgICAgICAgICB2YXIgbG9jYWxNYXQgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsTWF0O1xuICAgICAgICAgIHRoaXMubG9jYWxUcmFuc2Zvcm1zWzBdLm1hdHJpeC5jbG9uZShsb2NhbE1hdCk7XG5cbiAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBsbWF0ID0gdGhpcy5sb2NhbFRyYW5zZm9ybXNbaV0ubWF0cml4O1xuICAgICAgICAgICAgbG9jYWxNYXQubXVsdGlwbHkobG1hdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbG9jYWxNYXQubXVsdGlwbHkodGhpcy5maW5hbFRyYW5zZm9ybS5tYXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZmluYWxUcmFuc2Zvcm0uX29wTWRmKSB7XG4gICAgICAgICAgdmFyIGxvY2FsT3AgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsT3BhY2l0eTtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgbG9jYWxPcCAqPSB0aGlzLmxvY2FsVHJhbnNmb3Jtc1tpXS5vcGFjaXR5ICogMC4wMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsT3BhY2l0eSA9IGxvY2FsT3A7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNlYXJjaEVmZmVjdFRyYW5zZm9ybXM6IGZ1bmN0aW9uIHNlYXJjaEVmZmVjdFRyYW5zZm9ybXMoKSB7XG4gICAgICBpZiAodGhpcy5yZW5kZXJhYmxlRWZmZWN0c01hbmFnZXIpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybUVmZmVjdHMgPSB0aGlzLnJlbmRlcmFibGVFZmZlY3RzTWFuYWdlci5nZXRFZmZlY3RzKGVmZmVjdFR5cGVzLlRSQU5TRk9STV9FRkZFQ1QpO1xuXG4gICAgICAgIGlmICh0cmFuc2Zvcm1FZmZlY3RzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMubG9jYWxUcmFuc2Zvcm1zID0gW107XG4gICAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgdmFyIGxlbiA9IHRyYW5zZm9ybUVmZmVjdHMubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2FsVHJhbnNmb3Jtcy5wdXNoKHRyYW5zZm9ybUVmZmVjdHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZ2xvYmFsVG9Mb2NhbDogZnVuY3Rpb24gZ2xvYmFsVG9Mb2NhbChwdCkge1xuICAgICAgdmFyIHRyYW5zZm9ybXMgPSBbXTtcbiAgICAgIHRyYW5zZm9ybXMucHVzaCh0aGlzLmZpbmFsVHJhbnNmb3JtKTtcbiAgICAgIHZhciBmbGFnID0gdHJ1ZTtcbiAgICAgIHZhciBjb21wID0gdGhpcy5jb21wO1xuXG4gICAgICB3aGlsZSAoZmxhZykge1xuICAgICAgICBpZiAoY29tcC5maW5hbFRyYW5zZm9ybSkge1xuICAgICAgICAgIGlmIChjb21wLmRhdGEuaGFzTWFzaykge1xuICAgICAgICAgICAgdHJhbnNmb3Jtcy5zcGxpY2UoMCwgMCwgY29tcC5maW5hbFRyYW5zZm9ybSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29tcCA9IGNvbXAuY29tcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICB2YXIgcHROZXc7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBwdE5ldyA9IHRyYW5zZm9ybXNbaV0ubWF0LmFwcGx5VG9Qb2ludEFycmF5KDAsIDAsIDApOyAvLyBwdE5ldyA9IHRyYW5zZm9ybXNbaV0ubWF0LmFwcGx5VG9Qb2ludEFycmF5KHB0WzBdLHB0WzFdLHB0WzJdKTtcblxuICAgICAgICBwdCA9IFtwdFswXSAtIHB0TmV3WzBdLCBwdFsxXSAtIHB0TmV3WzFdLCAwXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHB0O1xuICAgIH0sXG4gICAgbUhlbHBlcjogbmV3IE1hdHJpeCgpXG4gIH07XG5cbiAgZnVuY3Rpb24gTWFza0VsZW1lbnQoZGF0YSwgZWxlbWVudCwgZ2xvYmFsRGF0YSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmdsb2JhbERhdGEgPSBnbG9iYWxEYXRhO1xuICAgIHRoaXMuc3RvcmVkRGF0YSA9IFtdO1xuICAgIHRoaXMubWFza3NQcm9wZXJ0aWVzID0gdGhpcy5kYXRhLm1hc2tzUHJvcGVydGllcyB8fCBbXTtcbiAgICB0aGlzLm1hc2tFbGVtZW50ID0gbnVsbDtcbiAgICB2YXIgZGVmcyA9IHRoaXMuZ2xvYmFsRGF0YS5kZWZzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLm1hc2tzUHJvcGVydGllcyA/IHRoaXMubWFza3NQcm9wZXJ0aWVzLmxlbmd0aCA6IDA7XG4gICAgdGhpcy52aWV3RGF0YSA9IGNyZWF0ZVNpemVkQXJyYXkobGVuKTtcbiAgICB0aGlzLnNvbGlkUGF0aCA9ICcnO1xuICAgIHZhciBwYXRoO1xuICAgIHZhciBwcm9wZXJ0aWVzID0gdGhpcy5tYXNrc1Byb3BlcnRpZXM7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgY3VycmVudE1hc2tzID0gW107XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGxheWVySWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICB2YXIgcmVjdDtcbiAgICB2YXIgZXhwYW5zb3I7XG4gICAgdmFyIGZlTW9ycGg7XG4gICAgdmFyIHg7XG4gICAgdmFyIG1hc2tUeXBlID0gJ2NsaXBQYXRoJztcbiAgICB2YXIgbWFza1JlZiA9ICdjbGlwLXBhdGgnO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAocHJvcGVydGllc1tpXS5tb2RlICE9PSAnYScgJiYgcHJvcGVydGllc1tpXS5tb2RlICE9PSAnbicgfHwgcHJvcGVydGllc1tpXS5pbnYgfHwgcHJvcGVydGllc1tpXS5vLmsgIT09IDEwMCB8fCBwcm9wZXJ0aWVzW2ldLm8ueCkge1xuICAgICAgICBtYXNrVHlwZSA9ICdtYXNrJztcbiAgICAgICAgbWFza1JlZiA9ICdtYXNrJztcbiAgICAgIH1cblxuICAgICAgaWYgKChwcm9wZXJ0aWVzW2ldLm1vZGUgPT09ICdzJyB8fCBwcm9wZXJ0aWVzW2ldLm1vZGUgPT09ICdpJykgJiYgY291bnQgPT09IDApIHtcbiAgICAgICAgcmVjdCA9IGNyZWF0ZU5TKCdyZWN0Jyk7XG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlKCdmaWxsJywgJyNmZmZmZmYnKTtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5lbGVtZW50LmNvbXAuZGF0YS53IHx8IDApO1xuICAgICAgICByZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5lbGVtZW50LmNvbXAuZGF0YS5oIHx8IDApO1xuICAgICAgICBjdXJyZW50TWFza3MucHVzaChyZWN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlY3QgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBwYXRoID0gY3JlYXRlTlMoJ3BhdGgnKTtcblxuICAgICAgaWYgKHByb3BlcnRpZXNbaV0ubW9kZSA9PT0gJ24nKSB7XG4gICAgICAgIC8vIFRPRE8gbW92ZSB0aGlzIHRvIGEgZmFjdG9yeSBvciB0byBhIGNvbnN0cnVjdG9yXG4gICAgICAgIHRoaXMudmlld0RhdGFbaV0gPSB7XG4gICAgICAgICAgb3A6IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMuZWxlbWVudCwgcHJvcGVydGllc1tpXS5vLCAwLCAwLjAxLCB0aGlzLmVsZW1lbnQpLFxuICAgICAgICAgIHByb3A6IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcCh0aGlzLmVsZW1lbnQsIHByb3BlcnRpZXNbaV0sIDMpLFxuICAgICAgICAgIGVsZW06IHBhdGgsXG4gICAgICAgICAgbGFzdFBhdGg6ICcnXG4gICAgICAgIH07XG4gICAgICAgIGRlZnMuYXBwZW5kQ2hpbGQocGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3VudCArPSAxO1xuICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnZmlsbCcsIHByb3BlcnRpZXNbaV0ubW9kZSA9PT0gJ3MnID8gJyMwMDAwMDAnIDogJyNmZmZmZmYnKTtcbiAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ2NsaXAtcnVsZScsICdub256ZXJvJyk7XG4gICAgICAgIHZhciBmaWx0ZXJJRDtcblxuICAgICAgICBpZiAocHJvcGVydGllc1tpXS54LmsgIT09IDApIHtcbiAgICAgICAgICBtYXNrVHlwZSA9ICdtYXNrJztcbiAgICAgICAgICBtYXNrUmVmID0gJ21hc2snO1xuICAgICAgICAgIHggPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLmVsZW1lbnQsIHByb3BlcnRpZXNbaV0ueCwgMCwgbnVsbCwgdGhpcy5lbGVtZW50KTtcbiAgICAgICAgICBmaWx0ZXJJRCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgICAgIGV4cGFuc29yID0gY3JlYXRlTlMoJ2ZpbHRlcicpO1xuICAgICAgICAgIGV4cGFuc29yLnNldEF0dHJpYnV0ZSgnaWQnLCBmaWx0ZXJJRCk7XG4gICAgICAgICAgZmVNb3JwaCA9IGNyZWF0ZU5TKCdmZU1vcnBob2xvZ3knKTtcbiAgICAgICAgICBmZU1vcnBoLnNldEF0dHJpYnV0ZSgnb3BlcmF0b3InLCAnZXJvZGUnKTtcbiAgICAgICAgICBmZU1vcnBoLnNldEF0dHJpYnV0ZSgnaW4nLCAnU291cmNlR3JhcGhpYycpO1xuICAgICAgICAgIGZlTW9ycGguc2V0QXR0cmlidXRlKCdyYWRpdXMnLCAnMCcpO1xuICAgICAgICAgIGV4cGFuc29yLmFwcGVuZENoaWxkKGZlTW9ycGgpO1xuICAgICAgICAgIGRlZnMuYXBwZW5kQ2hpbGQoZXhwYW5zb3IpO1xuICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UnLCBwcm9wZXJ0aWVzW2ldLm1vZGUgPT09ICdzJyA/ICcjMDAwMDAwJyA6ICcjZmZmZmZmJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmVNb3JwaCA9IG51bGw7XG4gICAgICAgICAgeCA9IG51bGw7XG4gICAgICAgIH0gLy8gVE9ETyBtb3ZlIHRoaXMgdG8gYSBmYWN0b3J5IG9yIHRvIGEgY29uc3RydWN0b3JcblxuXG4gICAgICAgIHRoaXMuc3RvcmVkRGF0YVtpXSA9IHtcbiAgICAgICAgICBlbGVtOiBwYXRoLFxuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgZXhwYW46IGZlTW9ycGgsXG4gICAgICAgICAgbGFzdFBhdGg6ICcnLFxuICAgICAgICAgIGxhc3RPcGVyYXRvcjogJycsXG4gICAgICAgICAgZmlsdGVySWQ6IGZpbHRlcklELFxuICAgICAgICAgIGxhc3RSYWRpdXM6IDBcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAocHJvcGVydGllc1tpXS5tb2RlID09PSAnaScpIHtcbiAgICAgICAgICBqTGVuID0gY3VycmVudE1hc2tzLmxlbmd0aDtcbiAgICAgICAgICB2YXIgZyA9IGNyZWF0ZU5TKCdnJyk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBnLmFwcGVuZENoaWxkKGN1cnJlbnRNYXNrc1tqXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG1hc2sgPSBjcmVhdGVOUygnbWFzaycpO1xuICAgICAgICAgIG1hc2suc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCAnYWxwaGEnKTtcbiAgICAgICAgICBtYXNrLnNldEF0dHJpYnV0ZSgnaWQnLCBsYXllcklkICsgJ18nICsgY291bnQpO1xuICAgICAgICAgIG1hc2suYXBwZW5kQ2hpbGQocGF0aCk7XG4gICAgICAgICAgZGVmcy5hcHBlbmRDaGlsZChtYXNrKTtcbiAgICAgICAgICBnLnNldEF0dHJpYnV0ZSgnbWFzaycsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgbGF5ZXJJZCArICdfJyArIGNvdW50ICsgJyknKTtcbiAgICAgICAgICBjdXJyZW50TWFza3MubGVuZ3RoID0gMDtcbiAgICAgICAgICBjdXJyZW50TWFza3MucHVzaChnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJyZW50TWFza3MucHVzaChwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzW2ldLmludiAmJiAhdGhpcy5zb2xpZFBhdGgpIHtcbiAgICAgICAgICB0aGlzLnNvbGlkUGF0aCA9IHRoaXMuY3JlYXRlTGF5ZXJTb2xpZFBhdGgoKTtcbiAgICAgICAgfSAvLyBUT0RPIG1vdmUgdGhpcyB0byBhIGZhY3Rvcnkgb3IgdG8gYSBjb25zdHJ1Y3RvclxuXG5cbiAgICAgICAgdGhpcy52aWV3RGF0YVtpXSA9IHtcbiAgICAgICAgICBlbGVtOiBwYXRoLFxuICAgICAgICAgIGxhc3RQYXRoOiAnJyxcbiAgICAgICAgICBvcDogUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcy5lbGVtZW50LCBwcm9wZXJ0aWVzW2ldLm8sIDAsIDAuMDEsIHRoaXMuZWxlbWVudCksXG4gICAgICAgICAgcHJvcDogU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wKHRoaXMuZWxlbWVudCwgcHJvcGVydGllc1tpXSwgMyksXG4gICAgICAgICAgaW52UmVjdDogcmVjdFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghdGhpcy52aWV3RGF0YVtpXS5wcm9wLmspIHtcbiAgICAgICAgICB0aGlzLmRyYXdQYXRoKHByb3BlcnRpZXNbaV0sIHRoaXMudmlld0RhdGFbaV0ucHJvcC52LCB0aGlzLnZpZXdEYXRhW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubWFza0VsZW1lbnQgPSBjcmVhdGVOUyhtYXNrVHlwZSk7XG4gICAgbGVuID0gY3VycmVudE1hc2tzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5tYXNrRWxlbWVudC5hcHBlbmRDaGlsZChjdXJyZW50TWFza3NbaV0pO1xuICAgIH1cblxuICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgIHRoaXMubWFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIGxheWVySWQpO1xuICAgICAgdGhpcy5lbGVtZW50Lm1hc2tlZEVsZW1lbnQuc2V0QXR0cmlidXRlKG1hc2tSZWYsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgbGF5ZXJJZCArICcpJyk7XG4gICAgICBkZWZzLmFwcGVuZENoaWxkKHRoaXMubWFza0VsZW1lbnQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZpZXdEYXRhLmxlbmd0aCkge1xuICAgICAgdGhpcy5lbGVtZW50LmFkZFJlbmRlcmFibGVDb21wb25lbnQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgTWFza0VsZW1lbnQucHJvdG90eXBlLmdldE1hc2tQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICByZXR1cm4gdGhpcy52aWV3RGF0YVtwb3NdLnByb3A7XG4gIH07XG5cbiAgTWFza0VsZW1lbnQucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKGlzRmlyc3RGcmFtZSkge1xuICAgIHZhciBmaW5hbE1hdCA9IHRoaXMuZWxlbWVudC5maW5hbFRyYW5zZm9ybS5tYXQ7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubWFza3NQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMudmlld0RhdGFbaV0ucHJvcC5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICB0aGlzLmRyYXdQYXRoKHRoaXMubWFza3NQcm9wZXJ0aWVzW2ldLCB0aGlzLnZpZXdEYXRhW2ldLnByb3AudiwgdGhpcy52aWV3RGF0YVtpXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnZpZXdEYXRhW2ldLm9wLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHRoaXMudmlld0RhdGFbaV0uZWxlbS5zZXRBdHRyaWJ1dGUoJ2ZpbGwtb3BhY2l0eScsIHRoaXMudmlld0RhdGFbaV0ub3Audik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm1hc2tzUHJvcGVydGllc1tpXS5tb2RlICE9PSAnbicpIHtcbiAgICAgICAgaWYgKHRoaXMudmlld0RhdGFbaV0uaW52UmVjdCAmJiAodGhpcy5lbGVtZW50LmZpbmFsVHJhbnNmb3JtLm1Qcm9wLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSkge1xuICAgICAgICAgIHRoaXMudmlld0RhdGFbaV0uaW52UmVjdC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIGZpbmFsTWF0LmdldEludmVyc2VNYXRyaXgoKS50bzJkQ1NTKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3RvcmVkRGF0YVtpXS54ICYmICh0aGlzLnN0b3JlZERhdGFbaV0ueC5fbWRmIHx8IGlzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgICB2YXIgZmVNb3JwaCA9IHRoaXMuc3RvcmVkRGF0YVtpXS5leHBhbjtcblxuICAgICAgICAgIGlmICh0aGlzLnN0b3JlZERhdGFbaV0ueC52IDwgMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmVkRGF0YVtpXS5sYXN0T3BlcmF0b3IgIT09ICdlcm9kZScpIHtcbiAgICAgICAgICAgICAgdGhpcy5zdG9yZWREYXRhW2ldLmxhc3RPcGVyYXRvciA9ICdlcm9kZSc7XG4gICAgICAgICAgICAgIHRoaXMuc3RvcmVkRGF0YVtpXS5lbGVtLnNldEF0dHJpYnV0ZSgnZmlsdGVyJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyB0aGlzLnN0b3JlZERhdGFbaV0uZmlsdGVySWQgKyAnKScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmZU1vcnBoLnNldEF0dHJpYnV0ZSgncmFkaXVzJywgLXRoaXMuc3RvcmVkRGF0YVtpXS54LnYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yZWREYXRhW2ldLmxhc3RPcGVyYXRvciAhPT0gJ2RpbGF0ZScpIHtcbiAgICAgICAgICAgICAgdGhpcy5zdG9yZWREYXRhW2ldLmxhc3RPcGVyYXRvciA9ICdkaWxhdGUnO1xuICAgICAgICAgICAgICB0aGlzLnN0b3JlZERhdGFbaV0uZWxlbS5zZXRBdHRyaWJ1dGUoJ2ZpbHRlcicsIG51bGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnN0b3JlZERhdGFbaV0uZWxlbS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIHRoaXMuc3RvcmVkRGF0YVtpXS54LnYgKiAyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgTWFza0VsZW1lbnQucHJvdG90eXBlLmdldE1hc2tlbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1hc2tFbGVtZW50O1xuICB9O1xuXG4gIE1hc2tFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVMYXllclNvbGlkUGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF0aCA9ICdNMCwwICc7XG4gICAgcGF0aCArPSAnIGgnICsgdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLnc7XG4gICAgcGF0aCArPSAnIHYnICsgdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmg7XG4gICAgcGF0aCArPSAnIGgtJyArIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53O1xuICAgIHBhdGggKz0gJyB2LScgKyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaCArICcgJztcbiAgICByZXR1cm4gcGF0aDtcbiAgfTtcblxuICBNYXNrRWxlbWVudC5wcm90b3R5cGUuZHJhd1BhdGggPSBmdW5jdGlvbiAocGF0aERhdGEsIHBhdGhOb2Rlcywgdmlld0RhdGEpIHtcbiAgICB2YXIgcGF0aFN0cmluZyA9ICcgTScgKyBwYXRoTm9kZXMudlswXVswXSArICcsJyArIHBhdGhOb2Rlcy52WzBdWzFdO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG4gICAgbGVuID0gcGF0aE5vZGVzLl9sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIC8vIHBhdGhTdHJpbmcgKz0gXCIgQ1wiK3BhdGhOb2Rlcy5vW2ktMV1bMF0rJywnK3BhdGhOb2Rlcy5vW2ktMV1bMV0gKyBcIiBcIitwYXRoTm9kZXMuaVtpXVswXSsnLCcrcGF0aE5vZGVzLmlbaV1bMV0gKyBcIiBcIitwYXRoTm9kZXMudltpXVswXSsnLCcrcGF0aE5vZGVzLnZbaV1bMV07XG4gICAgICBwYXRoU3RyaW5nICs9ICcgQycgKyBwYXRoTm9kZXMub1tpIC0gMV1bMF0gKyAnLCcgKyBwYXRoTm9kZXMub1tpIC0gMV1bMV0gKyAnICcgKyBwYXRoTm9kZXMuaVtpXVswXSArICcsJyArIHBhdGhOb2Rlcy5pW2ldWzFdICsgJyAnICsgcGF0aE5vZGVzLnZbaV1bMF0gKyAnLCcgKyBwYXRoTm9kZXMudltpXVsxXTtcbiAgICB9IC8vIHBhdGhTdHJpbmcgKz0gXCIgQ1wiK3BhdGhOb2Rlcy5vW2ktMV1bMF0rJywnK3BhdGhOb2Rlcy5vW2ktMV1bMV0gKyBcIiBcIitwYXRoTm9kZXMuaVswXVswXSsnLCcrcGF0aE5vZGVzLmlbMF1bMV0gKyBcIiBcIitwYXRoTm9kZXMudlswXVswXSsnLCcrcGF0aE5vZGVzLnZbMF1bMV07XG5cblxuICAgIGlmIChwYXRoTm9kZXMuYyAmJiBsZW4gPiAxKSB7XG4gICAgICBwYXRoU3RyaW5nICs9ICcgQycgKyBwYXRoTm9kZXMub1tpIC0gMV1bMF0gKyAnLCcgKyBwYXRoTm9kZXMub1tpIC0gMV1bMV0gKyAnICcgKyBwYXRoTm9kZXMuaVswXVswXSArICcsJyArIHBhdGhOb2Rlcy5pWzBdWzFdICsgJyAnICsgcGF0aE5vZGVzLnZbMF1bMF0gKyAnLCcgKyBwYXRoTm9kZXMudlswXVsxXTtcbiAgICB9IC8vIHBhdGhOb2Rlcy5fX3JlbmRlcmVkU3RyaW5nID0gcGF0aFN0cmluZztcblxuXG4gICAgaWYgKHZpZXdEYXRhLmxhc3RQYXRoICE9PSBwYXRoU3RyaW5nKSB7XG4gICAgICB2YXIgcGF0aFNoYXBlVmFsdWUgPSAnJztcblxuICAgICAgaWYgKHZpZXdEYXRhLmVsZW0pIHtcbiAgICAgICAgaWYgKHBhdGhOb2Rlcy5jKSB7XG4gICAgICAgICAgcGF0aFNoYXBlVmFsdWUgPSBwYXRoRGF0YS5pbnYgPyB0aGlzLnNvbGlkUGF0aCArIHBhdGhTdHJpbmcgOiBwYXRoU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgdmlld0RhdGEuZWxlbS5zZXRBdHRyaWJ1dGUoJ2QnLCBwYXRoU2hhcGVWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZpZXdEYXRhLmxhc3RQYXRoID0gcGF0aFN0cmluZztcbiAgICB9XG4gIH07XG5cbiAgTWFza0VsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLmdsb2JhbERhdGEgPSBudWxsO1xuICAgIHRoaXMubWFza0VsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuZGF0YSA9IG51bGw7XG4gICAgdGhpcy5tYXNrc1Byb3BlcnRpZXMgPSBudWxsO1xuICB9O1xuXG4gIHZhciBmaWx0ZXJzRmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2IgPSB7fTtcbiAgICBvYi5jcmVhdGVGaWx0ZXIgPSBjcmVhdGVGaWx0ZXI7XG4gICAgb2IuY3JlYXRlQWxwaGFUb0x1bWluYW5jZUZpbHRlciA9IGNyZWF0ZUFscGhhVG9MdW1pbmFuY2VGaWx0ZXI7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGaWx0ZXIoZmlsSWQsIHNraXBDb29yZGluYXRlcykge1xuICAgICAgdmFyIGZpbCA9IGNyZWF0ZU5TKCdmaWx0ZXInKTtcbiAgICAgIGZpbC5zZXRBdHRyaWJ1dGUoJ2lkJywgZmlsSWQpO1xuXG4gICAgICBpZiAoc2tpcENvb3JkaW5hdGVzICE9PSB0cnVlKSB7XG4gICAgICAgIGZpbC5zZXRBdHRyaWJ1dGUoJ2ZpbHRlclVuaXRzJywgJ29iamVjdEJvdW5kaW5nQm94Jyk7XG4gICAgICAgIGZpbC5zZXRBdHRyaWJ1dGUoJ3gnLCAnMCUnKTtcbiAgICAgICAgZmlsLnNldEF0dHJpYnV0ZSgneScsICcwJScpO1xuICAgICAgICBmaWwuc2V0QXR0cmlidXRlKCd3aWR0aCcsICcxMDAlJyk7XG4gICAgICAgIGZpbC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsICcxMDAlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQWxwaGFUb0x1bWluYW5jZUZpbHRlcigpIHtcbiAgICAgIHZhciBmZUNvbG9yTWF0cml4ID0gY3JlYXRlTlMoJ2ZlQ29sb3JNYXRyaXgnKTtcbiAgICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd0eXBlJywgJ21hdHJpeCcpO1xuICAgICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdzUkdCJyk7XG4gICAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndmFsdWVzJywgJzAgMCAwIDEgMCAgMCAwIDAgMSAwICAwIDAgMCAxIDAgIDAgMCAwIDEgMScpO1xuICAgICAgcmV0dXJuIGZlQ29sb3JNYXRyaXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgdmFyIGZlYXR1cmVTdXBwb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYiA9IHtcbiAgICAgIG1hc2tUeXBlOiB0cnVlLFxuICAgICAgc3ZnTHVtYUhpZGRlbjogdHJ1ZSxcbiAgICAgIG9mZnNjcmVlbkNhbnZhczogdHlwZW9mIE9mZnNjcmVlbkNhbnZhcyAhPT0gJ3VuZGVmaW5lZCdcbiAgICB9O1xuXG4gICAgaWYgKC9NU0lFIDEwL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAvTVNJRSA5L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAvcnY6MTEuMC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgL0VkZ2VcXC9cXGQuL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgb2IubWFza1R5cGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoL2ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICBvYi5zdmdMdW1hSGlkZGVuID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgdmFyIHJlZ2lzdGVyZWRFZmZlY3RzJDEgPSB7fTtcbiAgdmFyIGlkUHJlZml4ID0gJ2ZpbHRlcl9yZXN1bHRfJztcblxuICBmdW5jdGlvbiBTVkdFZmZlY3RzKGVsZW0pIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgc291cmNlID0gJ1NvdXJjZUdyYXBoaWMnO1xuICAgIHZhciBsZW4gPSBlbGVtLmRhdGEuZWYgPyBlbGVtLmRhdGEuZWYubGVuZ3RoIDogMDtcbiAgICB2YXIgZmlsSWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICB2YXIgZmlsID0gZmlsdGVyc0ZhY3RvcnkuY3JlYXRlRmlsdGVyKGZpbElkLCB0cnVlKTtcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHRoaXMuZmlsdGVycyA9IFtdO1xuICAgIHZhciBmaWx0ZXJNYW5hZ2VyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBmaWx0ZXJNYW5hZ2VyID0gbnVsbDtcbiAgICAgIHZhciB0eXBlID0gZWxlbS5kYXRhLmVmW2ldLnR5O1xuXG4gICAgICBpZiAocmVnaXN0ZXJlZEVmZmVjdHMkMVt0eXBlXSkge1xuICAgICAgICB2YXIgRWZmZWN0ID0gcmVnaXN0ZXJlZEVmZmVjdHMkMVt0eXBlXS5lZmZlY3Q7XG4gICAgICAgIGZpbHRlck1hbmFnZXIgPSBuZXcgRWZmZWN0KGZpbCwgZWxlbS5lZmZlY3RzTWFuYWdlci5lZmZlY3RFbGVtZW50c1tpXSwgZWxlbSwgaWRQcmVmaXggKyBjb3VudCwgc291cmNlKTtcbiAgICAgICAgc291cmNlID0gaWRQcmVmaXggKyBjb3VudDtcblxuICAgICAgICBpZiAocmVnaXN0ZXJlZEVmZmVjdHMkMVt0eXBlXS5jb3VudHNBc0VmZmVjdCkge1xuICAgICAgICAgIGNvdW50ICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbHRlck1hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJzLnB1c2goZmlsdGVyTWFuYWdlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvdW50KSB7XG4gICAgICBlbGVtLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChmaWwpO1xuICAgICAgZWxlbS5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWx0ZXInLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGZpbElkICsgJyknKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5maWx0ZXJzLmxlbmd0aCkge1xuICAgICAgZWxlbS5hZGRSZW5kZXJhYmxlQ29tcG9uZW50KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIFNWR0VmZmVjdHMucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKF9pc0ZpcnN0RnJhbWUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5maWx0ZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5maWx0ZXJzW2ldLnJlbmRlckZyYW1lKF9pc0ZpcnN0RnJhbWUpO1xuICAgIH1cbiAgfTtcblxuICBTVkdFZmZlY3RzLnByb3RvdHlwZS5nZXRFZmZlY3RzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5maWx0ZXJzLmxlbmd0aDtcbiAgICB2YXIgZWZmZWN0cyA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5maWx0ZXJzW2ldLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgZWZmZWN0cy5wdXNoKHRoaXMuZmlsdGVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVmZmVjdHM7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QkMShpZCwgZWZmZWN0LCBjb3VudHNBc0VmZmVjdCkge1xuICAgIHJlZ2lzdGVyZWRFZmZlY3RzJDFbaWRdID0ge1xuICAgICAgZWZmZWN0OiBlZmZlY3QsXG4gICAgICBjb3VudHNBc0VmZmVjdDogY291bnRzQXNFZmZlY3RcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gU1ZHQmFzZUVsZW1lbnQoKSB7fVxuXG4gIFNWR0Jhc2VFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICBpbml0UmVuZGVyZXJFbGVtZW50OiBmdW5jdGlvbiBpbml0UmVuZGVyZXJFbGVtZW50KCkge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQgPSBjcmVhdGVOUygnZycpO1xuICAgIH0sXG4gICAgY3JlYXRlQ29udGFpbmVyRWxlbWVudHM6IGZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCkge1xuICAgICAgdGhpcy5tYXR0ZUVsZW1lbnQgPSBjcmVhdGVOUygnZycpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQgPSB0aGlzLmxheWVyRWxlbWVudDtcbiAgICAgIHRoaXMubWFza2VkRWxlbWVudCA9IHRoaXMubGF5ZXJFbGVtZW50O1xuICAgICAgdGhpcy5fc2l6ZUNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHZhciBsYXllckVsZW1lbnRQYXJlbnQgPSBudWxsOyAvLyBJZiB0aGlzIGxheWVyIGFjdHMgYXMgYSBtYXNrIGZvciB0aGUgZm9sbG93aW5nIGxheWVyXG5cbiAgICAgIGlmICh0aGlzLmRhdGEudGQpIHtcbiAgICAgICAgdGhpcy5tYXR0ZU1hc2tzID0ge307XG4gICAgICAgIHZhciBnZyA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICAgIGdnLnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLmxheWVySWQpO1xuICAgICAgICBnZy5hcHBlbmRDaGlsZCh0aGlzLmxheWVyRWxlbWVudCk7XG4gICAgICAgIGxheWVyRWxlbWVudFBhcmVudCA9IGdnO1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChnZyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS50dCkge1xuICAgICAgICB0aGlzLm1hdHRlRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmxheWVyRWxlbWVudCk7XG4gICAgICAgIGxheWVyRWxlbWVudFBhcmVudCA9IHRoaXMubWF0dGVFbGVtZW50O1xuICAgICAgICB0aGlzLmJhc2VFbGVtZW50ID0gdGhpcy5tYXR0ZUVsZW1lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJhc2VFbGVtZW50ID0gdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEubG4pIHtcbiAgICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIHRoaXMuZGF0YS5sbik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuY2wpIHtcbiAgICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRoaXMuZGF0YS5jbCk7XG4gICAgICB9IC8vIENsaXBwaW5nIGNvbXBvc2l0aW9ucyB0byBoaWRlIGNvbnRlbnQgdGhhdCBleGNlZWRzIGJvdW5kYXJpZXMuIElmIGNvbGxhcHNlZCB0cmFuc2Zvcm1hdGlvbnMgaXMgb24sIGNvbXBvbmVudCBzaG91bGQgbm90IGJlIGNsaXBwZWRcblxuXG4gICAgICBpZiAodGhpcy5kYXRhLnR5ID09PSAwICYmICF0aGlzLmRhdGEuaGQpIHtcbiAgICAgICAgdmFyIGNwID0gY3JlYXRlTlMoJ2NsaXBQYXRoJyk7XG4gICAgICAgIHZhciBwdCA9IGNyZWF0ZU5TKCdwYXRoJyk7XG4gICAgICAgIHB0LnNldEF0dHJpYnV0ZSgnZCcsICdNMCwwIEwnICsgdGhpcy5kYXRhLncgKyAnLDAgTCcgKyB0aGlzLmRhdGEudyArICcsJyArIHRoaXMuZGF0YS5oICsgJyBMMCwnICsgdGhpcy5kYXRhLmggKyAneicpO1xuICAgICAgICB2YXIgY2xpcElkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICAgIGNwLnNldEF0dHJpYnV0ZSgnaWQnLCBjbGlwSWQpO1xuICAgICAgICBjcC5hcHBlbmRDaGlsZChwdCk7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGNwKTtcblxuICAgICAgICBpZiAodGhpcy5jaGVja01hc2tzKCkpIHtcbiAgICAgICAgICB2YXIgY3BHcm91cCA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICAgICAgY3BHcm91cC5zZXRBdHRyaWJ1dGUoJ2NsaXAtcGF0aCcsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgY2xpcElkICsgJyknKTtcbiAgICAgICAgICBjcEdyb3VwLmFwcGVuZENoaWxkKHRoaXMubGF5ZXJFbGVtZW50KTtcbiAgICAgICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudCA9IGNwR3JvdXA7XG5cbiAgICAgICAgICBpZiAobGF5ZXJFbGVtZW50UGFyZW50KSB7XG4gICAgICAgICAgICBsYXllckVsZW1lbnRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJhc2VFbGVtZW50ID0gdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xpcC1wYXRoJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBjbGlwSWQgKyAnKScpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuYm0gIT09IDApIHtcbiAgICAgICAgdGhpcy5zZXRCbGVuZE1vZGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlckVsZW1lbnQ6IGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoKSB7XG4gICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5fbG9jYWxNYXRNZGYpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsTWF0LnRvMmRDU1MoKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZikge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLCB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsT3BhY2l0eSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95QmFzZUVsZW1lbnQ6IGZ1bmN0aW9uIGRlc3Ryb3lCYXNlRWxlbWVudCgpIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMubWF0dGVFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMubWFza01hbmFnZXIuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgZ2V0QmFzZUVsZW1lbnQ6IGZ1bmN0aW9uIGdldEJhc2VFbGVtZW50KCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS5oZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuYmFzZUVsZW1lbnQ7XG4gICAgfSxcbiAgICBjcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50czogZnVuY3Rpb24gY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMoKSB7XG4gICAgICB0aGlzLm1hc2tNYW5hZ2VyID0gbmV3IE1hc2tFbGVtZW50KHRoaXMuZGF0YSwgdGhpcywgdGhpcy5nbG9iYWxEYXRhKTtcbiAgICAgIHRoaXMucmVuZGVyYWJsZUVmZmVjdHNNYW5hZ2VyID0gbmV3IFNWR0VmZmVjdHModGhpcyk7XG4gICAgICB0aGlzLnNlYXJjaEVmZmVjdFRyYW5zZm9ybXMoKTtcbiAgICB9LFxuICAgIGdldE1hdHRlOiBmdW5jdGlvbiBnZXRNYXR0ZShtYXR0ZVR5cGUpIHtcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5vdCBiZSBhIGNvbW1vbiBjYXNlLiBCdXQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHdlJ2xsIGNyZWF0ZSB0aGUgbWF0dGUgb2JqZWN0LlxuICAgICAgLy8gSXQgc29sdmVzIGFuaW1hdGlvbnMgdGhhdCBoYXZlIHR3byBjb25zZWN1dGl2ZSBsYXllcnMgbWFya2VkIGFzIG1hdHRlIG1hc2tzLlxuICAgICAgLy8gV2hpY2ggaXMgYW4gdW5kZWZpbmVkIGJlaGF2aW9yIGluIEFFLlxuICAgICAgaWYgKCF0aGlzLm1hdHRlTWFza3MpIHtcbiAgICAgICAgdGhpcy5tYXR0ZU1hc2tzID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5tYXR0ZU1hc2tzW21hdHRlVHlwZV0pIHtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5sYXllcklkICsgJ18nICsgbWF0dGVUeXBlO1xuICAgICAgICB2YXIgZmlsSWQ7XG4gICAgICAgIHZhciBmaWw7XG4gICAgICAgIHZhciB1c2VFbGVtZW50O1xuICAgICAgICB2YXIgZ2c7XG5cbiAgICAgICAgaWYgKG1hdHRlVHlwZSA9PT0gMSB8fCBtYXR0ZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICB2YXIgbWFza2VyID0gY3JlYXRlTlMoJ21hc2snKTtcbiAgICAgICAgICBtYXNrZXIuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgICBtYXNrZXIuc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCBtYXR0ZVR5cGUgPT09IDMgPyAnbHVtaW5hbmNlJyA6ICdhbHBoYScpO1xuICAgICAgICAgIHVzZUVsZW1lbnQgPSBjcmVhdGVOUygndXNlJyk7XG4gICAgICAgICAgdXNlRWxlbWVudC5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsICdocmVmJywgJyMnICsgdGhpcy5sYXllcklkKTtcbiAgICAgICAgICBtYXNrZXIuYXBwZW5kQ2hpbGQodXNlRWxlbWVudCk7XG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQobWFza2VyKTtcblxuICAgICAgICAgIGlmICghZmVhdHVyZVN1cHBvcnQubWFza1R5cGUgJiYgbWF0dGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICBtYXNrZXIuc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCAnbHVtaW5hbmNlJyk7XG4gICAgICAgICAgICBmaWxJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgICAgICAgZmlsID0gZmlsdGVyc0ZhY3RvcnkuY3JlYXRlRmlsdGVyKGZpbElkKTtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGZpbCk7XG4gICAgICAgICAgICBmaWwuYXBwZW5kQ2hpbGQoZmlsdGVyc0ZhY3RvcnkuY3JlYXRlQWxwaGFUb0x1bWluYW5jZUZpbHRlcigpKTtcbiAgICAgICAgICAgIGdnID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgICAgICAgIGdnLmFwcGVuZENoaWxkKHVzZUVsZW1lbnQpO1xuICAgICAgICAgICAgbWFza2VyLmFwcGVuZENoaWxkKGdnKTtcbiAgICAgICAgICAgIGdnLnNldEF0dHJpYnV0ZSgnZmlsdGVyJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBmaWxJZCArICcpJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG1hdHRlVHlwZSA9PT0gMikge1xuICAgICAgICAgIHZhciBtYXNrR3JvdXAgPSBjcmVhdGVOUygnbWFzaycpO1xuICAgICAgICAgIG1hc2tHcm91cC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgICAgIG1hc2tHcm91cC5zZXRBdHRyaWJ1dGUoJ21hc2stdHlwZScsICdhbHBoYScpO1xuICAgICAgICAgIHZhciBtYXNrR3JvdXBlciA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICAgICAgbWFza0dyb3VwLmFwcGVuZENoaWxkKG1hc2tHcm91cGVyKTtcbiAgICAgICAgICBmaWxJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgICAgIGZpbCA9IGZpbHRlcnNGYWN0b3J5LmNyZWF0ZUZpbHRlcihmaWxJZCk7IC8vLyAvXG5cbiAgICAgICAgICB2YXIgZmVDVHIgPSBjcmVhdGVOUygnZmVDb21wb25lbnRUcmFuc2ZlcicpO1xuICAgICAgICAgIGZlQ1RyLnNldEF0dHJpYnV0ZSgnaW4nLCAnU291cmNlR3JhcGhpYycpO1xuICAgICAgICAgIGZpbC5hcHBlbmRDaGlsZChmZUNUcik7XG4gICAgICAgICAgdmFyIGZlRnVuYyA9IGNyZWF0ZU5TKCdmZUZ1bmNBJyk7XG4gICAgICAgICAgZmVGdW5jLnNldEF0dHJpYnV0ZSgndHlwZScsICd0YWJsZScpO1xuICAgICAgICAgIGZlRnVuYy5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgJzEuMCAwLjAnKTtcbiAgICAgICAgICBmZUNUci5hcHBlbmRDaGlsZChmZUZ1bmMpOyAvLy8gL1xuXG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQoZmlsKTtcbiAgICAgICAgICB2YXIgYWxwaGFSZWN0ID0gY3JlYXRlTlMoJ3JlY3QnKTtcbiAgICAgICAgICBhbHBoYVJlY3Quc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMuY29tcC5kYXRhLncpO1xuICAgICAgICAgIGFscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuY29tcC5kYXRhLmgpO1xuICAgICAgICAgIGFscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ3gnLCAnMCcpO1xuICAgICAgICAgIGFscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ3knLCAnMCcpO1xuICAgICAgICAgIGFscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnI2ZmZmZmZicpO1xuICAgICAgICAgIGFscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLCAnMCcpO1xuICAgICAgICAgIG1hc2tHcm91cGVyLnNldEF0dHJpYnV0ZSgnZmlsdGVyJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBmaWxJZCArICcpJyk7XG4gICAgICAgICAgbWFza0dyb3VwZXIuYXBwZW5kQ2hpbGQoYWxwaGFSZWN0KTtcbiAgICAgICAgICB1c2VFbGVtZW50ID0gY3JlYXRlTlMoJ3VzZScpO1xuICAgICAgICAgIHVzZUVsZW1lbnQuc2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCAnaHJlZicsICcjJyArIHRoaXMubGF5ZXJJZCk7XG4gICAgICAgICAgbWFza0dyb3VwZXIuYXBwZW5kQ2hpbGQodXNlRWxlbWVudCk7XG5cbiAgICAgICAgICBpZiAoIWZlYXR1cmVTdXBwb3J0Lm1hc2tUeXBlKSB7XG4gICAgICAgICAgICBtYXNrR3JvdXAuc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCAnbHVtaW5hbmNlJyk7XG4gICAgICAgICAgICBmaWwuYXBwZW5kQ2hpbGQoZmlsdGVyc0ZhY3RvcnkuY3JlYXRlQWxwaGFUb0x1bWluYW5jZUZpbHRlcigpKTtcbiAgICAgICAgICAgIGdnID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgICAgICAgIG1hc2tHcm91cGVyLmFwcGVuZENoaWxkKGFscGhhUmVjdCk7XG4gICAgICAgICAgICBnZy5hcHBlbmRDaGlsZCh0aGlzLmxheWVyRWxlbWVudCk7XG4gICAgICAgICAgICBtYXNrR3JvdXBlci5hcHBlbmRDaGlsZChnZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQobWFza0dyb3VwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWF0dGVNYXNrc1ttYXR0ZVR5cGVdID0gaWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLm1hdHRlTWFza3NbbWF0dGVUeXBlXTtcbiAgICB9LFxuICAgIHNldE1hdHRlOiBmdW5jdGlvbiBzZXRNYXR0ZShpZCkge1xuICAgICAgaWYgKCF0aGlzLm1hdHRlRWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMubWF0dGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnbWFzaycsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgaWQgKyAnKScpO1xuICAgIH1cbiAgfTtcblxuICAvKipcclxuICAgKiBAZmlsZVxyXG4gICAqIEhhbmRsZXMgQUUncyBsYXllciBwYXJlbnRpbmcgcHJvcGVydHkuXHJcbiAgICpcclxuICAgKi9cbiAgZnVuY3Rpb24gSGllcmFyY2h5RWxlbWVudCgpIHt9XG5cbiAgSGllcmFyY2h5RWxlbWVudC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXHJcbiAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgKiBJbml0aWFsaXplcyBoaWVyYXJjaHkgcHJvcGVydGllc1xyXG4gICAgICAgKlxyXG4gICAgICAgKi9cbiAgICBpbml0SGllcmFyY2h5OiBmdW5jdGlvbiBpbml0SGllcmFyY2h5KCkge1xuICAgICAgLy8gZWxlbWVudCdzIHBhcmVudCBsaXN0XG4gICAgICB0aGlzLmhpZXJhcmNoeSA9IFtdOyAvLyBpZiBlbGVtZW50IGlzIHBhcmVudCBvZiBhbm90aGVyIGxheWVyIF9pc1BhcmVudCB3aWxsIGJlIHRydWVcblxuICAgICAgdGhpcy5faXNQYXJlbnQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2hlY2tQYXJlbnRpbmcoKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgKiBTZXRzIGxheWVyJ3MgaGllcmFyY2h5LlxyXG4gICAgICAgKiBAcGFyYW0ge2FycmF5fSBoaWVyYXJjaFxyXG4gICAgICAgKiBsYXllcidzIHBhcmVudCBsaXN0XHJcbiAgICAgICAqXHJcbiAgICAgICAqL1xuICAgIHNldEhpZXJhcmNoeTogZnVuY3Rpb24gc2V0SGllcmFyY2h5KGhpZXJhcmNoeSkge1xuICAgICAgdGhpcy5oaWVyYXJjaHkgPSBoaWVyYXJjaHk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICogU2V0cyBsYXllciBhcyBwYXJlbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqL1xuICAgIHNldEFzUGFyZW50OiBmdW5jdGlvbiBzZXRBc1BhcmVudCgpIHtcbiAgICAgIHRoaXMuX2lzUGFyZW50ID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgKiBTZWFyY2hlcyBsYXllcidzIHBhcmVudGluZyBjaGFpblxyXG4gICAgICAgKlxyXG4gICAgICAgKi9cbiAgICBjaGVja1BhcmVudGluZzogZnVuY3Rpb24gY2hlY2tQYXJlbnRpbmcoKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLnBhcmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuY29tcC5idWlsZEVsZW1lbnRQYXJlbnRpbmcodGhpcywgdGhpcy5kYXRhLnBhcmVudCwgW10pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBSZW5kZXJhYmxlRE9NRWxlbWVudCgpIHt9XG5cbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3Byb3RvdHlwZSA9IHtcbiAgICAgIGluaXRFbGVtZW50OiBmdW5jdGlvbiBpbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgICAgIHRoaXMuaW5pdEJhc2VEYXRhKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgICAgICB0aGlzLmluaXRUcmFuc2Zvcm0oZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgICAgIHRoaXMuaW5pdEhpZXJhcmNoeSgpO1xuICAgICAgICB0aGlzLmluaXRSZW5kZXJhYmxlKCk7XG4gICAgICAgIHRoaXMuaW5pdFJlbmRlcmVyRWxlbWVudCgpO1xuICAgICAgICB0aGlzLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVDb250ZW50KCk7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSxcbiAgICAgIGhpZGU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdISURFJywgdGhpcyk7XG4gICAgICAgIGlmICghdGhpcy5oaWRkZW4gJiYgKCF0aGlzLmlzSW5SYW5nZSB8fCB0aGlzLmlzVHJhbnNwYXJlbnQpKSB7XG4gICAgICAgICAgdmFyIGVsZW0gPSB0aGlzLmJhc2VFbGVtZW50IHx8IHRoaXMubGF5ZXJFbGVtZW50O1xuICAgICAgICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICB0aGlzLmhpZGRlbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzaG93OiBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnU0hPVycsIHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5pc0luUmFuZ2UgJiYgIXRoaXMuaXNUcmFuc3BhcmVudCkge1xuICAgICAgICAgIGlmICghdGhpcy5kYXRhLmhkKSB7XG4gICAgICAgICAgICB2YXIgZWxlbSA9IHRoaXMuYmFzZUVsZW1lbnQgfHwgdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlbmRlckZyYW1lOiBmdW5jdGlvbiByZW5kZXJGcmFtZSgpIHtcbiAgICAgICAgLy8gSWYgaXQgaXMgZXhwb3J0ZWQgYXMgaGlkZGVuIChkYXRhLmhkID09PSB0cnVlKSBubyBuZWVkIHRvIHJlbmRlclxuICAgICAgICAvLyBJZiBpdCBpcyBub3QgdmlzaWJsZSBubyBuZWVkIHRvIHJlbmRlclxuICAgICAgICBpZiAodGhpcy5kYXRhLmhkIHx8IHRoaXMuaGlkZGVuKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgICAgdGhpcy5yZW5kZXJSZW5kZXJhYmxlKCk7XG4gICAgICAgIHRoaXMucmVuZGVyTG9jYWxUcmFuc2Zvcm0oKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFbGVtZW50KCk7XG4gICAgICAgIHRoaXMucmVuZGVySW5uZXJDb250ZW50KCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzRmlyc3RGcmFtZSkge1xuICAgICAgICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVuZGVySW5uZXJDb250ZW50OiBmdW5jdGlvbiByZW5kZXJJbm5lckNvbnRlbnQoKSB7fSxcbiAgICAgIHByZXBhcmVGcmFtZTogZnVuY3Rpb24gcHJlcGFyZUZyYW1lKG51bSkge1xuICAgICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcmVwYXJlUmVuZGVyYWJsZUZyYW1lKG51bSk7XG4gICAgICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0aGlzLmlzSW5SYW5nZSk7XG4gICAgICAgIHRoaXMuY2hlY2tUcmFuc3BhcmVuY3koKTtcbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmlubmVyRWxlbSA9IG51bGw7XG4gICAgICAgIHRoaXMuZGVzdHJveUJhc2VFbGVtZW50KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBleHRlbmRQcm90b3R5cGUoW1JlbmRlcmFibGVFbGVtZW50LCBjcmVhdGVQcm94eUZ1bmN0aW9uKF9wcm90b3R5cGUpXSwgUmVuZGVyYWJsZURPTUVsZW1lbnQpO1xuICB9KSgpO1xuXG4gIGZ1bmN0aW9uIElJbWFnZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuYXNzZXREYXRhID0gZ2xvYmFsRGF0YS5nZXRBc3NldERhdGEoZGF0YS5yZWZJZCk7XG5cbiAgICBpZiAodGhpcy5hc3NldERhdGEgJiYgdGhpcy5hc3NldERhdGEuc2lkKSB7XG4gICAgICB0aGlzLmFzc2V0RGF0YSA9IGdsb2JhbERhdGEuc2xvdE1hbmFnZXIuZ2V0UHJvcCh0aGlzLmFzc2V0RGF0YSk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLnNvdXJjZVJlY3QgPSB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgd2lkdGg6IHRoaXMuYXNzZXREYXRhLncsXG4gICAgICBoZWlnaHQ6IHRoaXMuYXNzZXREYXRhLmhcbiAgICB9O1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgU1ZHQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnRdLCBJSW1hZ2VFbGVtZW50KTtcblxuICBJSW1hZ2VFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhc3NldFBhdGggPSB0aGlzLmdsb2JhbERhdGEuZ2V0QXNzZXRzUGF0aCh0aGlzLmFzc2V0RGF0YSk7XG4gICAgdGhpcy5pbm5lckVsZW0gPSBjcmVhdGVOUygnaW1hZ2UnKTtcbiAgICB0aGlzLmlubmVyRWxlbS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5hc3NldERhdGEudyArICdweCcpO1xuICAgIHRoaXMuaW5uZXJFbGVtLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5hc3NldERhdGEuaCArICdweCcpO1xuICAgIHRoaXMuaW5uZXJFbGVtLnNldEF0dHJpYnV0ZSgncHJlc2VydmVBc3BlY3RSYXRpbycsIHRoaXMuYXNzZXREYXRhLnByIHx8IHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvKTtcbiAgICB0aGlzLmlubmVyRWxlbS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsICdocmVmJywgYXNzZXRQYXRoKTtcbiAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmlubmVyRWxlbSk7XG4gIH07XG5cbiAgSUltYWdlRWxlbWVudC5wcm90b3R5cGUuc291cmNlUmVjdEF0VGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2VSZWN0O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFByb2Nlc3NlZEVsZW1lbnQoZWxlbWVudCwgcG9zaXRpb24pIHtcbiAgICB0aGlzLmVsZW0gPSBlbGVtZW50O1xuICAgIHRoaXMucG9zID0gcG9zaXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBJU2hhcGVFbGVtZW50KCkge31cblxuICBJU2hhcGVFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICBhZGRTaGFwZVRvTW9kaWZpZXJzOiBmdW5jdGlvbiBhZGRTaGFwZVRvTW9kaWZpZXJzKGRhdGEpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuc2hhcGVNb2RpZmllcnMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5zaGFwZU1vZGlmaWVyc1tpXS5hZGRTaGFwZShkYXRhKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGlzU2hhcGVJbkFuaW1hdGVkTW9kaWZpZXJzOiBmdW5jdGlvbiBpc1NoYXBlSW5BbmltYXRlZE1vZGlmaWVycyhkYXRhKSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gdGhpcy5zaGFwZU1vZGlmaWVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmICh0aGlzLnNoYXBlTW9kaWZpZXJzW2ldLmlzQW5pbWF0ZWRXaXRoU2hhcGUoZGF0YSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICByZW5kZXJNb2RpZmllcnM6IGZ1bmN0aW9uIHJlbmRlck1vZGlmaWVycygpIHtcbiAgICAgIGlmICghdGhpcy5zaGFwZU1vZGlmaWVycy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlcy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnNoYXBlc1tpXS5zaC5yZXNldCgpO1xuICAgICAgfVxuXG4gICAgICBsZW4gPSB0aGlzLnNoYXBlTW9kaWZpZXJzLmxlbmd0aDtcbiAgICAgIHZhciBzaG91bGRCcmVha1Byb2Nlc3M7XG5cbiAgICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIHNob3VsZEJyZWFrUHJvY2VzcyA9IHRoaXMuc2hhcGVNb2RpZmllcnNbaV0ucHJvY2Vzc1NoYXBlcyh0aGlzLl9pc0ZpcnN0RnJhbWUpOyAvLyB3b3JrYXJvdW5kIHRvIGZpeCBjYXNlcyB3aGVyZSBhIHJlcGVhdGVyIHJlc2V0cyB0aGUgc2hhcGUgc28gdGhlIGZvbGxvd2luZyBwcm9jZXNzZXMgZ2V0IGNhbGxlZCB0d2ljZVxuICAgICAgICAvLyBUT0RPOiBmaW5kIGEgYmV0dGVyIHNvbHV0aW9uIGZvciB0aGlzXG5cbiAgICAgICAgaWYgKHNob3VsZEJyZWFrUHJvY2Vzcykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzZWFyY2hQcm9jZXNzZWRFbGVtZW50OiBmdW5jdGlvbiBzZWFyY2hQcm9jZXNzZWRFbGVtZW50KGVsZW0pIHtcbiAgICAgIHZhciBlbGVtZW50cyA9IHRoaXMucHJvY2Vzc2VkRWxlbWVudHM7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBpZiAoZWxlbWVudHNbaV0uZWxlbSA9PT0gZWxlbSkge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50c1tpXS5wb3M7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAgYWRkUHJvY2Vzc2VkRWxlbWVudDogZnVuY3Rpb24gYWRkUHJvY2Vzc2VkRWxlbWVudChlbGVtLCBwb3MpIHtcbiAgICAgIHZhciBlbGVtZW50cyA9IHRoaXMucHJvY2Vzc2VkRWxlbWVudHM7XG4gICAgICB2YXIgaSA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGkpIHtcbiAgICAgICAgaSAtPSAxO1xuXG4gICAgICAgIGlmIChlbGVtZW50c1tpXS5lbGVtID09PSBlbGVtKSB7XG4gICAgICAgICAgZWxlbWVudHNbaV0ucG9zID0gcG9zO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlbGVtZW50cy5wdXNoKG5ldyBQcm9jZXNzZWRFbGVtZW50KGVsZW0sIHBvcykpO1xuICAgIH0sXG4gICAgcHJlcGFyZUZyYW1lOiBmdW5jdGlvbiBwcmVwYXJlRnJhbWUobnVtKSB7XG4gICAgICB0aGlzLnByZXBhcmVSZW5kZXJhYmxlRnJhbWUobnVtKTtcbiAgICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0aGlzLmlzSW5SYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaW5lQ2FwRW51bSA9IHtcbiAgICAxOiAnYnV0dCcsXG4gICAgMjogJ3JvdW5kJyxcbiAgICAzOiAnc3F1YXJlJ1xuICB9O1xuICB2YXIgbGluZUpvaW5FbnVtID0ge1xuICAgIDE6ICdtaXRlcicsXG4gICAgMjogJ3JvdW5kJyxcbiAgICAzOiAnYmV2ZWwnXG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHU2hhcGVEYXRhKHRyYW5zZm9ybWVycywgbGV2ZWwsIHNoYXBlKSB7XG4gICAgdGhpcy5jYWNoZXMgPSBbXTtcbiAgICB0aGlzLnN0eWxlcyA9IFtdO1xuICAgIHRoaXMudHJhbnNmb3JtZXJzID0gdHJhbnNmb3JtZXJzO1xuICAgIHRoaXMubFN0ciA9ICcnO1xuICAgIHRoaXMuc2ggPSBzaGFwZTtcbiAgICB0aGlzLmx2bCA9IGxldmVsOyAvLyBUT0RPIGZpbmQgaWYgdGhlcmUgYXJlIHNvbWUgY2FzZXMgd2hlcmUgX2lzQW5pbWF0ZWQgY2FuIGJlIGZhbHNlLlxuICAgIC8vIEZvciBub3csIHNpbmNlIHNoYXBlcyBhZGQgdXAgd2l0aCBvdGhlciBzaGFwZXMuIFRoZXkgaGF2ZSB0byBiZSBjYWxjdWxhdGVkIGV2ZXJ5IHRpbWUuXG4gICAgLy8gT25lIHdheSBvZiBmaW5kaW5nIG91dCBpcyBjaGVja2luZyBpZiBhbGwgc3R5bGVzIGFzc29jaWF0ZWQgdG8gdGhpcyBzaGFwZSBkZXBlbmQgb25seSBvZiB0aGlzIHNoYXBlXG5cbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISFzaGFwZS5rOyAvLyBUT0RPOiBjb21tZW50aW5nIHRoaXMgZm9yIG5vdyBzaW5jZSBhbGwgc2hhcGVzIGFyZSBhbmltYXRlZFxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0cmFuc2Zvcm1lcnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmICh0cmFuc2Zvcm1lcnNbaV0ubVByb3BzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9pc0FuaW1hdGVkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG4gIH1cblxuICBTVkdTaGFwZURhdGEucHJvdG90eXBlLnNldEFzQW5pbWF0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5faXNBbmltYXRlZCA9IHRydWU7XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHU3R5bGVEYXRhKGRhdGEsIGxldmVsKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLnR5cGUgPSBkYXRhLnR5O1xuICAgIHRoaXMuZCA9ICcnO1xuICAgIHRoaXMubHZsID0gbGV2ZWw7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgdGhpcy5jbG9zZWQgPSBkYXRhLmhkID09PSB0cnVlO1xuICAgIHRoaXMucEVsZW0gPSBjcmVhdGVOUygncGF0aCcpO1xuICAgIHRoaXMubXNFbGVtID0gbnVsbDtcbiAgfVxuXG4gIFNWR1N0eWxlRGF0YS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kID0gJyc7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gIH07XG5cbiAgZnVuY3Rpb24gRGFzaFByb3BlcnR5KGVsZW0sIGRhdGEsIHJlbmRlcmVyLCBjb250YWluZXIpIHtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMuZnJhbWVJZCA9IC0xO1xuICAgIHRoaXMuZGF0YVByb3BzID0gY3JlYXRlU2l6ZWRBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuayA9IGZhbHNlO1xuICAgIHRoaXMuZGFzaFN0ciA9ICcnO1xuICAgIHRoaXMuZGFzaEFycmF5ID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGRhdGEubGVuZ3RoID8gZGF0YS5sZW5ndGggLSAxIDogMCk7XG4gICAgdGhpcy5kYXNob2Zmc2V0ID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIDEpO1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBkYXRhLmxlbmd0aCB8fCAwO1xuICAgIHZhciBwcm9wO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBwcm9wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YVtpXS52LCAwLCAwLCB0aGlzKTtcbiAgICAgIHRoaXMuayA9IHByb3AuayB8fCB0aGlzLms7XG4gICAgICB0aGlzLmRhdGFQcm9wc1tpXSA9IHtcbiAgICAgICAgbjogZGF0YVtpXS5uLFxuICAgICAgICBwOiBwcm9wXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghdGhpcy5rKSB7XG4gICAgICB0aGlzLmdldFZhbHVlKHRydWUpO1xuICAgIH1cblxuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSB0aGlzLms7XG4gIH1cblxuICBEYXNoUHJvcGVydHkucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgPT09IHRoaXMuZnJhbWVJZCAmJiAhZm9yY2VSZW5kZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG4gICAgdGhpcy5fbWRmID0gdGhpcy5fbWRmIHx8IGZvcmNlUmVuZGVyO1xuXG4gICAgaWYgKHRoaXMuX21kZikge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZGF0YVByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKHRoaXMucmVuZGVyZXIgPT09ICdzdmcnKSB7XG4gICAgICAgIHRoaXMuZGFzaFN0ciA9ICcnO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVByb3BzW2ldLm4gIT09ICdvJykge1xuICAgICAgICAgIGlmICh0aGlzLnJlbmRlcmVyID09PSAnc3ZnJykge1xuICAgICAgICAgICAgdGhpcy5kYXNoU3RyICs9ICcgJyArIHRoaXMuZGF0YVByb3BzW2ldLnAudjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXNoQXJyYXlbaV0gPSB0aGlzLmRhdGFQcm9wc1tpXS5wLnY7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZGFzaG9mZnNldFswXSA9IHRoaXMuZGF0YVByb3BzW2ldLnAudjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIERhc2hQcm9wZXJ0eSk7XG5cbiAgZnVuY3Rpb24gU1ZHU3Ryb2tlU3R5bGVEYXRhKGVsZW0sIGRhdGEsIHN0eWxlT2IpIHtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzO1xuICAgIHRoaXMubyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEubywgMCwgMC4wMSwgdGhpcyk7XG4gICAgdGhpcy53ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS53LCAwLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLmQgPSBuZXcgRGFzaFByb3BlcnR5KGVsZW0sIGRhdGEuZCB8fCB7fSwgJ3N2ZycsIHRoaXMpO1xuICAgIHRoaXMuYyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYywgMSwgMjU1LCB0aGlzKTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGVPYjtcbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISF0aGlzLl9pc0FuaW1hdGVkO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBTVkdTdHJva2VTdHlsZURhdGEpO1xuXG4gIGZ1bmN0aW9uIFNWR0ZpbGxTdHlsZURhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYikge1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM7XG4gICAgdGhpcy5vID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vLCAwLCAwLjAxLCB0aGlzKTtcbiAgICB0aGlzLmMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmMsIDEsIDI1NSwgdGhpcyk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlT2I7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFNWR0ZpbGxTdHlsZURhdGEpO1xuXG4gIGZ1bmN0aW9uIFNWR05vU3R5bGVEYXRhKGVsZW0sIGRhdGEsIHN0eWxlT2IpIHtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZU9iO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBTVkdOb1N0eWxlRGF0YSk7XG5cbiAgZnVuY3Rpb24gR3JhZGllbnRQcm9wZXJ0eShlbGVtLCBkYXRhLCBjb250YWluZXIpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuYyA9IGNyZWF0ZVR5cGVkQXJyYXkoJ3VpbnQ4YycsIGRhdGEucCAqIDQpO1xuICAgIHZhciBjTGVuZ3RoID0gZGF0YS5rLmtbMF0ucyA/IGRhdGEuay5rWzBdLnMubGVuZ3RoIC0gZGF0YS5wICogNCA6IGRhdGEuay5rLmxlbmd0aCAtIGRhdGEucCAqIDQ7XG4gICAgdGhpcy5vID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGNMZW5ndGgpO1xuICAgIHRoaXMuX2NtZGYgPSBmYWxzZTtcbiAgICB0aGlzLl9vbWRmID0gZmFsc2U7XG4gICAgdGhpcy5fY29sbGFwc2FibGUgPSB0aGlzLmNoZWNrQ29sbGFwc2FibGUoKTtcbiAgICB0aGlzLl9oYXNPcGFjaXR5ID0gY0xlbmd0aDtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoY29udGFpbmVyKTtcbiAgICB0aGlzLnByb3AgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmssIDEsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMuayA9IHRoaXMucHJvcC5rO1xuICAgIHRoaXMuZ2V0VmFsdWUodHJ1ZSk7XG4gIH1cblxuICBHcmFkaWVudFByb3BlcnR5LnByb3RvdHlwZS5jb21wYXJlUG9pbnRzID0gZnVuY3Rpb24gKHZhbHVlcywgcG9pbnRzKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0aGlzLm8ubGVuZ3RoIC8gMjtcbiAgICB2YXIgZGlmZjtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBkaWZmID0gTWF0aC5hYnModmFsdWVzW2kgKiA0XSAtIHZhbHVlc1twb2ludHMgKiA0ICsgaSAqIDJdKTtcblxuICAgICAgaWYgKGRpZmYgPiAwLjAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIEdyYWRpZW50UHJvcGVydHkucHJvdG90eXBlLmNoZWNrQ29sbGFwc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuby5sZW5ndGggLyAyICE9PSB0aGlzLmMubGVuZ3RoIC8gNCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGEuay5rWzBdLnMpIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmRhdGEuay5rLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbXBhcmVQb2ludHModGhpcy5kYXRhLmsua1tpXS5zLCB0aGlzLmRhdGEucCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghdGhpcy5jb21wYXJlUG9pbnRzKHRoaXMuZGF0YS5rLmssIHRoaXMuZGF0YS5wKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIEdyYWRpZW50UHJvcGVydHkucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgdGhpcy5wcm9wLmdldFZhbHVlKCk7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgdGhpcy5fY21kZiA9IGZhbHNlO1xuICAgIHRoaXMuX29tZGYgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLnByb3AuX21kZiB8fCBmb3JjZVJlbmRlcikge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5kYXRhLnAgKiA0O1xuICAgICAgdmFyIG11bHQ7XG4gICAgICB2YXIgdmFsO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgbXVsdCA9IGkgJSA0ID09PSAwID8gMTAwIDogMjU1O1xuICAgICAgICB2YWwgPSBNYXRoLnJvdW5kKHRoaXMucHJvcC52W2ldICogbXVsdCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY1tpXSAhPT0gdmFsKSB7XG4gICAgICAgICAgdGhpcy5jW2ldID0gdmFsO1xuICAgICAgICAgIHRoaXMuX2NtZGYgPSAhZm9yY2VSZW5kZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuby5sZW5ndGgpIHtcbiAgICAgICAgbGVuID0gdGhpcy5wcm9wLnYubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IHRoaXMuZGF0YS5wICogNDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgbXVsdCA9IGkgJSAyID09PSAwID8gMTAwIDogMTtcbiAgICAgICAgICB2YWwgPSBpICUgMiA9PT0gMCA/IE1hdGgucm91bmQodGhpcy5wcm9wLnZbaV0gKiAxMDApIDogdGhpcy5wcm9wLnZbaV07XG5cbiAgICAgICAgICBpZiAodGhpcy5vW2kgLSB0aGlzLmRhdGEucCAqIDRdICE9PSB2YWwpIHtcbiAgICAgICAgICAgIHRoaXMub1tpIC0gdGhpcy5kYXRhLnAgKiA0XSA9IHZhbDtcbiAgICAgICAgICAgIHRoaXMuX29tZGYgPSAhZm9yY2VSZW5kZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX21kZiA9ICFmb3JjZVJlbmRlcjtcbiAgICB9XG4gIH07XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBHcmFkaWVudFByb3BlcnR5KTtcblxuICBmdW5jdGlvbiBTVkdHcmFkaWVudEZpbGxTdHlsZURhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYikge1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM7XG4gICAgdGhpcy5pbml0R3JhZGllbnREYXRhKGVsZW0sIGRhdGEsIHN0eWxlT2IpO1xuICB9XG5cbiAgU1ZHR3JhZGllbnRGaWxsU3R5bGVEYXRhLnByb3RvdHlwZS5pbml0R3JhZGllbnREYXRhID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEsIHN0eWxlT2IpIHtcbiAgICB0aGlzLm8gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm8sIDAsIDAuMDEsIHRoaXMpO1xuICAgIHRoaXMucyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucywgMSwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5lID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5lLCAxLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLmggPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmggfHwge1xuICAgICAgazogMFxuICAgIH0sIDAsIDAuMDEsIHRoaXMpO1xuICAgIHRoaXMuYSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYSB8fCB7XG4gICAgICBrOiAwXG4gICAgfSwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICB0aGlzLmcgPSBuZXcgR3JhZGllbnRQcm9wZXJ0eShlbGVtLCBkYXRhLmcsIHRoaXMpO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZU9iO1xuICAgIHRoaXMuc3RvcHMgPSBbXTtcbiAgICB0aGlzLnNldEdyYWRpZW50RGF0YShzdHlsZU9iLnBFbGVtLCBkYXRhKTtcbiAgICB0aGlzLnNldEdyYWRpZW50T3BhY2l0eShkYXRhLCBzdHlsZU9iKTtcbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISF0aGlzLl9pc0FuaW1hdGVkO1xuICB9O1xuXG4gIFNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YS5wcm90b3R5cGUuc2V0R3JhZGllbnREYXRhID0gZnVuY3Rpb24gKHBhdGhFbGVtZW50LCBkYXRhKSB7XG4gICAgdmFyIGdyYWRpZW50SWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICB2YXIgZ2ZpbGwgPSBjcmVhdGVOUyhkYXRhLnQgPT09IDEgPyAnbGluZWFyR3JhZGllbnQnIDogJ3JhZGlhbEdyYWRpZW50Jyk7XG4gICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCdpZCcsIGdyYWRpZW50SWQpO1xuICAgIGdmaWxsLnNldEF0dHJpYnV0ZSgnc3ByZWFkTWV0aG9kJywgJ3BhZCcpO1xuICAgIGdmaWxsLnNldEF0dHJpYnV0ZSgnZ3JhZGllbnRVbml0cycsICd1c2VyU3BhY2VPblVzZScpO1xuICAgIHZhciBzdG9wcyA9IFtdO1xuICAgIHZhciBzdG9wO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIGpMZW4gPSBkYXRhLmcucCAqIDQ7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSA0KSB7XG4gICAgICBzdG9wID0gY3JlYXRlTlMoJ3N0b3AnKTtcbiAgICAgIGdmaWxsLmFwcGVuZENoaWxkKHN0b3ApO1xuICAgICAgc3RvcHMucHVzaChzdG9wKTtcbiAgICB9XG5cbiAgICBwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoZGF0YS50eSA9PT0gJ2dmJyA/ICdmaWxsJyA6ICdzdHJva2UnLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGdyYWRpZW50SWQgKyAnKScpO1xuICAgIHRoaXMuZ2YgPSBnZmlsbDtcbiAgICB0aGlzLmNzdCA9IHN0b3BzO1xuICB9O1xuXG4gIFNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YS5wcm90b3R5cGUuc2V0R3JhZGllbnRPcGFjaXR5ID0gZnVuY3Rpb24gKGRhdGEsIHN0eWxlT2IpIHtcbiAgICBpZiAodGhpcy5nLl9oYXNPcGFjaXR5ICYmICF0aGlzLmcuX2NvbGxhcHNhYmxlKSB7XG4gICAgICB2YXIgc3RvcDtcbiAgICAgIHZhciBqO1xuICAgICAgdmFyIGpMZW47XG4gICAgICB2YXIgbWFzayA9IGNyZWF0ZU5TKCdtYXNrJyk7XG4gICAgICB2YXIgbWFza0VsZW1lbnQgPSBjcmVhdGVOUygncGF0aCcpO1xuICAgICAgbWFzay5hcHBlbmRDaGlsZChtYXNrRWxlbWVudCk7XG4gICAgICB2YXIgb3BhY2l0eUlkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICB2YXIgbWFza0lkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICBtYXNrLnNldEF0dHJpYnV0ZSgnaWQnLCBtYXNrSWQpO1xuICAgICAgdmFyIG9wRmlsbCA9IGNyZWF0ZU5TKGRhdGEudCA9PT0gMSA/ICdsaW5lYXJHcmFkaWVudCcgOiAncmFkaWFsR3JhZGllbnQnKTtcbiAgICAgIG9wRmlsbC5zZXRBdHRyaWJ1dGUoJ2lkJywgb3BhY2l0eUlkKTtcbiAgICAgIG9wRmlsbC5zZXRBdHRyaWJ1dGUoJ3NwcmVhZE1ldGhvZCcsICdwYWQnKTtcbiAgICAgIG9wRmlsbC5zZXRBdHRyaWJ1dGUoJ2dyYWRpZW50VW5pdHMnLCAndXNlclNwYWNlT25Vc2UnKTtcbiAgICAgIGpMZW4gPSBkYXRhLmcuay5rWzBdLnMgPyBkYXRhLmcuay5rWzBdLnMubGVuZ3RoIDogZGF0YS5nLmsuay5sZW5ndGg7XG4gICAgICB2YXIgc3RvcHMgPSB0aGlzLnN0b3BzO1xuXG4gICAgICBmb3IgKGogPSBkYXRhLmcucCAqIDQ7IGogPCBqTGVuOyBqICs9IDIpIHtcbiAgICAgICAgc3RvcCA9IGNyZWF0ZU5TKCdzdG9wJyk7XG4gICAgICAgIHN0b3Auc2V0QXR0cmlidXRlKCdzdG9wLWNvbG9yJywgJ3JnYigyNTUsMjU1LDI1NSknKTtcbiAgICAgICAgb3BGaWxsLmFwcGVuZENoaWxkKHN0b3ApO1xuICAgICAgICBzdG9wcy5wdXNoKHN0b3ApO1xuICAgICAgfVxuXG4gICAgICBtYXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoZGF0YS50eSA9PT0gJ2dmJyA/ICdmaWxsJyA6ICdzdHJva2UnLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIG9wYWNpdHlJZCArICcpJyk7XG5cbiAgICAgIGlmIChkYXRhLnR5ID09PSAnZ3MnKSB7XG4gICAgICAgIG1hc2tFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVjYXAnLCBsaW5lQ2FwRW51bVtkYXRhLmxjIHx8IDJdKTtcbiAgICAgICAgbWFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWpvaW4nLCBsaW5lSm9pbkVudW1bZGF0YS5saiB8fCAyXSk7XG5cbiAgICAgICAgaWYgKGRhdGEubGogPT09IDEpIHtcbiAgICAgICAgICBtYXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1taXRlcmxpbWl0JywgZGF0YS5tbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5vZiA9IG9wRmlsbDtcbiAgICAgIHRoaXMubXMgPSBtYXNrO1xuICAgICAgdGhpcy5vc3QgPSBzdG9wcztcbiAgICAgIHRoaXMubWFza0lkID0gbWFza0lkO1xuICAgICAgc3R5bGVPYi5tc0VsZW0gPSBtYXNrRWxlbWVudDtcbiAgICB9XG4gIH07XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBTVkdHcmFkaWVudEZpbGxTdHlsZURhdGEpO1xuXG4gIGZ1bmN0aW9uIFNWR0dyYWRpZW50U3Ryb2tlU3R5bGVEYXRhKGVsZW0sIGRhdGEsIHN0eWxlT2IpIHtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzO1xuICAgIHRoaXMudyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudywgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5kID0gbmV3IERhc2hQcm9wZXJ0eShlbGVtLCBkYXRhLmQgfHwge30sICdzdmcnLCB0aGlzKTtcbiAgICB0aGlzLmluaXRHcmFkaWVudERhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYik7XG4gICAgdGhpcy5faXNBbmltYXRlZCA9ICEhdGhpcy5faXNBbmltYXRlZDtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU1ZHR3JhZGllbnRGaWxsU3R5bGVEYXRhLCBEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBTVkdHcmFkaWVudFN0cm9rZVN0eWxlRGF0YSk7XG5cbiAgZnVuY3Rpb24gU2hhcGVHcm91cERhdGEoKSB7XG4gICAgdGhpcy5pdCA9IFtdO1xuICAgIHRoaXMucHJldlZpZXdEYXRhID0gW107XG4gICAgdGhpcy5nciA9IGNyZWF0ZU5TKCdnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBTVkdUcmFuc2Zvcm1EYXRhKG1Qcm9wcywgb3AsIGNvbnRhaW5lcikge1xuICAgIHRoaXMudHJhbnNmb3JtID0ge1xuICAgICAgbVByb3BzOiBtUHJvcHMsXG4gICAgICBvcDogb3AsXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lclxuICAgIH07XG4gICAgdGhpcy5lbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSB0aGlzLnRyYW5zZm9ybS5tUHJvcHMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoIHx8IHRoaXMudHJhbnNmb3JtLm9wLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGg7XG4gIH1cblxuICB2YXIgYnVpbGRTaGFwZVN0cmluZyA9IGZ1bmN0aW9uIGJ1aWxkU2hhcGVTdHJpbmcocGF0aE5vZGVzLCBsZW5ndGgsIGNsb3NlZCwgbWF0KSB7XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHZhciBfbyA9IHBhdGhOb2Rlcy5vO1xuICAgIHZhciBfaSA9IHBhdGhOb2Rlcy5pO1xuICAgIHZhciBfdiA9IHBhdGhOb2Rlcy52O1xuICAgIHZhciBpO1xuICAgIHZhciBzaGFwZVN0cmluZyA9ICcgTScgKyBtYXQuYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoX3ZbMF1bMF0sIF92WzBdWzFdKTtcblxuICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgc2hhcGVTdHJpbmcgKz0gJyBDJyArIG1hdC5hcHBseVRvUG9pbnRTdHJpbmdpZmllZChfb1tpIC0gMV1bMF0sIF9vW2kgLSAxXVsxXSkgKyAnICcgKyBtYXQuYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoX2lbaV1bMF0sIF9pW2ldWzFdKSArICcgJyArIG1hdC5hcHBseVRvUG9pbnRTdHJpbmdpZmllZChfdltpXVswXSwgX3ZbaV1bMV0pO1xuICAgIH1cblxuICAgIGlmIChjbG9zZWQgJiYgbGVuZ3RoKSB7XG4gICAgICBzaGFwZVN0cmluZyArPSAnIEMnICsgbWF0LmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKF9vW2kgLSAxXVswXSwgX29baSAtIDFdWzFdKSArICcgJyArIG1hdC5hcHBseVRvUG9pbnRTdHJpbmdpZmllZChfaVswXVswXSwgX2lbMF1bMV0pICsgJyAnICsgbWF0LmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKF92WzBdWzBdLCBfdlswXVsxXSk7XG4gICAgICBzaGFwZVN0cmluZyArPSAneic7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoYXBlU3RyaW5nO1xuICB9O1xuXG4gIHZhciBTVkdFbGVtZW50c1JlbmRlcmVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfaWRlbnRpdHlNYXRyaXggPSBuZXcgTWF0cml4KCk7XG5cbiAgICB2YXIgX21hdHJpeEhlbHBlciA9IG5ldyBNYXRyaXgoKTtcblxuICAgIHZhciBvYiA9IHtcbiAgICAgIGNyZWF0ZVJlbmRlckZ1bmN0aW9uOiBjcmVhdGVSZW5kZXJGdW5jdGlvblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVSZW5kZXJGdW5jdGlvbihkYXRhKSB7XG4gICAgICBzd2l0Y2ggKGRhdGEudHkpIHtcbiAgICAgICAgY2FzZSAnZmwnOlxuICAgICAgICAgIHJldHVybiByZW5kZXJGaWxsO1xuXG4gICAgICAgIGNhc2UgJ2dmJzpcbiAgICAgICAgICByZXR1cm4gcmVuZGVyR3JhZGllbnQ7XG5cbiAgICAgICAgY2FzZSAnZ3MnOlxuICAgICAgICAgIHJldHVybiByZW5kZXJHcmFkaWVudFN0cm9rZTtcblxuICAgICAgICBjYXNlICdzdCc6XG4gICAgICAgICAgcmV0dXJuIHJlbmRlclN0cm9rZTtcblxuICAgICAgICBjYXNlICdzaCc6XG4gICAgICAgIGNhc2UgJ2VsJzpcbiAgICAgICAgY2FzZSAncmMnOlxuICAgICAgICBjYXNlICdzcic6XG4gICAgICAgICAgcmV0dXJuIHJlbmRlclBhdGg7XG5cbiAgICAgICAgY2FzZSAndHInOlxuICAgICAgICAgIHJldHVybiByZW5kZXJDb250ZW50VHJhbnNmb3JtO1xuXG4gICAgICAgIGNhc2UgJ25vJzpcbiAgICAgICAgICByZXR1cm4gcmVuZGVyTm9vcDtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlckNvbnRlbnRUcmFuc2Zvcm0oc3R5bGVEYXRhLCBpdGVtRGF0YSwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICBpZiAoaXNGaXJzdEZyYW1lIHx8IGl0ZW1EYXRhLnRyYW5zZm9ybS5vcC5fbWRmKSB7XG4gICAgICAgIGl0ZW1EYXRhLnRyYW5zZm9ybS5jb250YWluZXIuc2V0QXR0cmlidXRlKCdvcGFjaXR5JywgaXRlbURhdGEudHJhbnNmb3JtLm9wLnYpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGaXJzdEZyYW1lIHx8IGl0ZW1EYXRhLnRyYW5zZm9ybS5tUHJvcHMuX21kZikge1xuICAgICAgICBpdGVtRGF0YS50cmFuc2Zvcm0uY29udGFpbmVyLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgaXRlbURhdGEudHJhbnNmb3JtLm1Qcm9wcy52LnRvMmRDU1MoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyTm9vcCgpIHt9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJQYXRoKHN0eWxlRGF0YSwgaXRlbURhdGEsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgakxlbjtcbiAgICAgIHZhciBwYXRoU3RyaW5nVHJhbnNmb3JtZWQ7XG4gICAgICB2YXIgcmVkcmF3O1xuICAgICAgdmFyIHBhdGhOb2RlcztcbiAgICAgIHZhciBsO1xuICAgICAgdmFyIGxMZW4gPSBpdGVtRGF0YS5zdHlsZXMubGVuZ3RoO1xuICAgICAgdmFyIGx2bCA9IGl0ZW1EYXRhLmx2bDtcbiAgICAgIHZhciBwYXRocztcbiAgICAgIHZhciBtYXQ7XG4gICAgICB2YXIgaXRlcmF0aW9ucztcbiAgICAgIHZhciBrO1xuXG4gICAgICBmb3IgKGwgPSAwOyBsIDwgbExlbjsgbCArPSAxKSB7XG4gICAgICAgIHJlZHJhdyA9IGl0ZW1EYXRhLnNoLl9tZGYgfHwgaXNGaXJzdEZyYW1lO1xuXG4gICAgICAgIGlmIChpdGVtRGF0YS5zdHlsZXNbbF0ubHZsIDwgbHZsKSB7XG4gICAgICAgICAgbWF0ID0gX21hdHJpeEhlbHBlci5yZXNldCgpO1xuICAgICAgICAgIGl0ZXJhdGlvbnMgPSBsdmwgLSBpdGVtRGF0YS5zdHlsZXNbbF0ubHZsO1xuICAgICAgICAgIGsgPSBpdGVtRGF0YS50cmFuc2Zvcm1lcnMubGVuZ3RoIC0gMTtcblxuICAgICAgICAgIHdoaWxlICghcmVkcmF3ICYmIGl0ZXJhdGlvbnMgPiAwKSB7XG4gICAgICAgICAgICByZWRyYXcgPSBpdGVtRGF0YS50cmFuc2Zvcm1lcnNba10ubVByb3BzLl9tZGYgfHwgcmVkcmF3O1xuICAgICAgICAgICAgaXRlcmF0aW9ucyAtPSAxO1xuICAgICAgICAgICAgayAtPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChyZWRyYXcpIHtcbiAgICAgICAgICAgIGl0ZXJhdGlvbnMgPSBsdmwgLSBpdGVtRGF0YS5zdHlsZXNbbF0ubHZsO1xuICAgICAgICAgICAgayA9IGl0ZW1EYXRhLnRyYW5zZm9ybWVycy5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgICB3aGlsZSAoaXRlcmF0aW9ucyA+IDApIHtcbiAgICAgICAgICAgICAgbWF0Lm11bHRpcGx5KGl0ZW1EYXRhLnRyYW5zZm9ybWVyc1trXS5tUHJvcHMudik7XG4gICAgICAgICAgICAgIGl0ZXJhdGlvbnMgLT0gMTtcbiAgICAgICAgICAgICAgayAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXQgPSBfaWRlbnRpdHlNYXRyaXg7XG4gICAgICAgIH1cblxuICAgICAgICBwYXRocyA9IGl0ZW1EYXRhLnNoLnBhdGhzO1xuICAgICAgICBqTGVuID0gcGF0aHMuX2xlbmd0aDtcblxuICAgICAgICBpZiAocmVkcmF3KSB7XG4gICAgICAgICAgcGF0aFN0cmluZ1RyYW5zZm9ybWVkID0gJyc7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBwYXRoTm9kZXMgPSBwYXRocy5zaGFwZXNbal07XG5cbiAgICAgICAgICAgIGlmIChwYXRoTm9kZXMgJiYgcGF0aE5vZGVzLl9sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcGF0aFN0cmluZ1RyYW5zZm9ybWVkICs9IGJ1aWxkU2hhcGVTdHJpbmcocGF0aE5vZGVzLCBwYXRoTm9kZXMuX2xlbmd0aCwgcGF0aE5vZGVzLmMsIG1hdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXRlbURhdGEuY2FjaGVzW2xdID0gcGF0aFN0cmluZ1RyYW5zZm9ybWVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdGhTdHJpbmdUcmFuc2Zvcm1lZCA9IGl0ZW1EYXRhLmNhY2hlc1tsXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0ZW1EYXRhLnN0eWxlc1tsXS5kICs9IHN0eWxlRGF0YS5oZCA9PT0gdHJ1ZSA/ICcnIDogcGF0aFN0cmluZ1RyYW5zZm9ybWVkO1xuICAgICAgICBpdGVtRGF0YS5zdHlsZXNbbF0uX21kZiA9IHJlZHJhdyB8fCBpdGVtRGF0YS5zdHlsZXNbbF0uX21kZjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJGaWxsKHN0eWxlRGF0YSwgaXRlbURhdGEsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIHN0eWxlRWxlbSA9IGl0ZW1EYXRhLnN0eWxlO1xuXG4gICAgICBpZiAoaXRlbURhdGEuYy5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdmaWxsJywgJ3JnYignICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMF0pICsgJywnICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMV0pICsgJywnICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMl0pICsgJyknKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1EYXRhLm8uX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgc3R5bGVFbGVtLnBFbGVtLnNldEF0dHJpYnV0ZSgnZmlsbC1vcGFjaXR5JywgaXRlbURhdGEuby52KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJHcmFkaWVudFN0cm9rZShzdHlsZURhdGEsIGl0ZW1EYXRhLCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHJlbmRlckdyYWRpZW50KHN0eWxlRGF0YSwgaXRlbURhdGEsIGlzRmlyc3RGcmFtZSk7XG4gICAgICByZW5kZXJTdHJva2Uoc3R5bGVEYXRhLCBpdGVtRGF0YSwgaXNGaXJzdEZyYW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJHcmFkaWVudChzdHlsZURhdGEsIGl0ZW1EYXRhLCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHZhciBnZmlsbCA9IGl0ZW1EYXRhLmdmO1xuICAgICAgdmFyIGhhc09wYWNpdHkgPSBpdGVtRGF0YS5nLl9oYXNPcGFjaXR5O1xuICAgICAgdmFyIHB0MSA9IGl0ZW1EYXRhLnMudjtcbiAgICAgIHZhciBwdDIgPSBpdGVtRGF0YS5lLnY7XG5cbiAgICAgIGlmIChpdGVtRGF0YS5vLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHZhciBhdHRyID0gc3R5bGVEYXRhLnR5ID09PSAnZ2YnID8gJ2ZpbGwtb3BhY2l0eScgOiAnc3Ryb2tlLW9wYWNpdHknO1xuICAgICAgICBpdGVtRGF0YS5zdHlsZS5wRWxlbS5zZXRBdHRyaWJ1dGUoYXR0ciwgaXRlbURhdGEuby52KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1EYXRhLnMuX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgdmFyIGF0dHIxID0gc3R5bGVEYXRhLnQgPT09IDEgPyAneDEnIDogJ2N4JztcbiAgICAgICAgdmFyIGF0dHIyID0gYXR0cjEgPT09ICd4MScgPyAneTEnIDogJ2N5JztcbiAgICAgICAgZ2ZpbGwuc2V0QXR0cmlidXRlKGF0dHIxLCBwdDFbMF0pO1xuICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoYXR0cjIsIHB0MVsxXSk7XG5cbiAgICAgICAgaWYgKGhhc09wYWNpdHkgJiYgIWl0ZW1EYXRhLmcuX2NvbGxhcHNhYmxlKSB7XG4gICAgICAgICAgaXRlbURhdGEub2Yuc2V0QXR0cmlidXRlKGF0dHIxLCBwdDFbMF0pO1xuICAgICAgICAgIGl0ZW1EYXRhLm9mLnNldEF0dHJpYnV0ZShhdHRyMiwgcHQxWzFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3RvcHM7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW47XG4gICAgICB2YXIgc3RvcDtcblxuICAgICAgaWYgKGl0ZW1EYXRhLmcuX2NtZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHN0b3BzID0gaXRlbURhdGEuY3N0O1xuICAgICAgICB2YXIgY1ZhbHVlcyA9IGl0ZW1EYXRhLmcuYztcbiAgICAgICAgbGVuID0gc3RvcHMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHN0b3AgPSBzdG9wc1tpXTtcbiAgICAgICAgICBzdG9wLnNldEF0dHJpYnV0ZSgnb2Zmc2V0JywgY1ZhbHVlc1tpICogNF0gKyAnJScpO1xuICAgICAgICAgIHN0b3Auc2V0QXR0cmlidXRlKCdzdG9wLWNvbG9yJywgJ3JnYignICsgY1ZhbHVlc1tpICogNCArIDFdICsgJywnICsgY1ZhbHVlc1tpICogNCArIDJdICsgJywnICsgY1ZhbHVlc1tpICogNCArIDNdICsgJyknKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3BhY2l0eSAmJiAoaXRlbURhdGEuZy5fb21kZiB8fCBpc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgIHZhciBvVmFsdWVzID0gaXRlbURhdGEuZy5vO1xuXG4gICAgICAgIGlmIChpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSkge1xuICAgICAgICAgIHN0b3BzID0gaXRlbURhdGEuY3N0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0b3BzID0gaXRlbURhdGEub3N0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGVuID0gc3RvcHMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHN0b3AgPSBzdG9wc1tpXTtcblxuICAgICAgICAgIGlmICghaXRlbURhdGEuZy5fY29sbGFwc2FibGUpIHtcbiAgICAgICAgICAgIHN0b3Auc2V0QXR0cmlidXRlKCdvZmZzZXQnLCBvVmFsdWVzW2kgKiAyXSArICclJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3RvcC5zZXRBdHRyaWJ1dGUoJ3N0b3Atb3BhY2l0eScsIG9WYWx1ZXNbaSAqIDIgKyAxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN0eWxlRGF0YS50ID09PSAxKSB7XG4gICAgICAgIGlmIChpdGVtRGF0YS5lLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCd4MicsIHB0MlswXSk7XG4gICAgICAgICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCd5MicsIHB0MlsxXSk7XG5cbiAgICAgICAgICBpZiAoaGFzT3BhY2l0eSAmJiAhaXRlbURhdGEuZy5fY29sbGFwc2FibGUpIHtcbiAgICAgICAgICAgIGl0ZW1EYXRhLm9mLnNldEF0dHJpYnV0ZSgneDInLCBwdDJbMF0pO1xuICAgICAgICAgICAgaXRlbURhdGEub2Yuc2V0QXR0cmlidXRlKCd5MicsIHB0MlsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmFkO1xuXG4gICAgICAgIGlmIChpdGVtRGF0YS5zLl9tZGYgfHwgaXRlbURhdGEuZS5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICAgIHJhZCA9IE1hdGguc3FydChNYXRoLnBvdyhwdDFbMF0gLSBwdDJbMF0sIDIpICsgTWF0aC5wb3cocHQxWzFdIC0gcHQyWzFdLCAyKSk7XG4gICAgICAgICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCdyJywgcmFkKTtcblxuICAgICAgICAgIGlmIChoYXNPcGFjaXR5ICYmICFpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSkge1xuICAgICAgICAgICAgaXRlbURhdGEub2Yuc2V0QXR0cmlidXRlKCdyJywgcmFkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlbURhdGEuZS5fbWRmIHx8IGl0ZW1EYXRhLmguX21kZiB8fCBpdGVtRGF0YS5hLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgICAgaWYgKCFyYWQpIHtcbiAgICAgICAgICAgIHJhZCA9IE1hdGguc3FydChNYXRoLnBvdyhwdDFbMF0gLSBwdDJbMF0sIDIpICsgTWF0aC5wb3cocHQxWzFdIC0gcHQyWzFdLCAyKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGFuZyA9IE1hdGguYXRhbjIocHQyWzFdIC0gcHQxWzFdLCBwdDJbMF0gLSBwdDFbMF0pO1xuICAgICAgICAgIHZhciBwZXJjZW50ID0gaXRlbURhdGEuaC52O1xuXG4gICAgICAgICAgaWYgKHBlcmNlbnQgPj0gMSkge1xuICAgICAgICAgICAgcGVyY2VudCA9IDAuOTk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwZXJjZW50IDw9IC0xKSB7XG4gICAgICAgICAgICBwZXJjZW50ID0gLTAuOTk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGRpc3QgPSByYWQgKiBwZXJjZW50O1xuICAgICAgICAgIHZhciB4ID0gTWF0aC5jb3MoYW5nICsgaXRlbURhdGEuYS52KSAqIGRpc3QgKyBwdDFbMF07XG4gICAgICAgICAgdmFyIHkgPSBNYXRoLnNpbihhbmcgKyBpdGVtRGF0YS5hLnYpICogZGlzdCArIHB0MVsxXTtcbiAgICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoJ2Z4JywgeCk7XG4gICAgICAgICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCdmeScsIHkpO1xuXG4gICAgICAgICAgaWYgKGhhc09wYWNpdHkgJiYgIWl0ZW1EYXRhLmcuX2NvbGxhcHNhYmxlKSB7XG4gICAgICAgICAgICBpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoJ2Z4JywgeCk7XG4gICAgICAgICAgICBpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoJ2Z5JywgeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGdmaWxsLnNldEF0dHJpYnV0ZSgnZnknLCcyMDAnKTtcblxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlclN0cm9rZShzdHlsZURhdGEsIGl0ZW1EYXRhLCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHZhciBzdHlsZUVsZW0gPSBpdGVtRGF0YS5zdHlsZTtcbiAgICAgIHZhciBkID0gaXRlbURhdGEuZDtcblxuICAgICAgaWYgKGQgJiYgKGQuX21kZiB8fCBpc0ZpcnN0RnJhbWUpICYmIGQuZGFzaFN0cikge1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaGFycmF5JywgZC5kYXNoU3RyKTtcbiAgICAgICAgc3R5bGVFbGVtLnBFbGVtLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnLCBkLmRhc2hvZmZzZXRbMF0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbURhdGEuYyAmJiAoaXRlbURhdGEuYy5fbWRmIHx8IGlzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgc3R5bGVFbGVtLnBFbGVtLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ3JnYignICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMF0pICsgJywnICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMV0pICsgJywnICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMl0pICsgJyknKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1EYXRhLm8uX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgc3R5bGVFbGVtLnBFbGVtLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLW9wYWNpdHknLCBpdGVtRGF0YS5vLnYpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbURhdGEudy5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCBpdGVtRGF0YS53LnYpO1xuXG4gICAgICAgIGlmIChzdHlsZUVsZW0ubXNFbGVtKSB7XG4gICAgICAgICAgc3R5bGVFbGVtLm1zRWxlbS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIGl0ZW1EYXRhLncudik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBTVkdTaGFwZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIC8vIExpc3Qgb2YgZHJhd2FibGUgZWxlbWVudHNcbiAgICB0aGlzLnNoYXBlcyA9IFtdOyAvLyBGdWxsIHNoYXBlIGRhdGFcblxuICAgIHRoaXMuc2hhcGVzRGF0YSA9IGRhdGEuc2hhcGVzOyAvLyBMaXN0IG9mIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byBzaGFwZXNcblxuICAgIHRoaXMuc3R5bGVzTGlzdCA9IFtdOyAvLyBMaXN0IG9mIG1vZGlmaWVycyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byBzaGFwZXNcblxuICAgIHRoaXMuc2hhcGVNb2RpZmllcnMgPSBbXTsgLy8gTGlzdCBvZiBpdGVtcyBpbiBzaGFwZSB0cmVlXG5cbiAgICB0aGlzLml0ZW1zRGF0YSA9IFtdOyAvLyBMaXN0IG9mIGl0ZW1zIGluIHByZXZpb3VzIHNoYXBlIHRyZWVcblxuICAgIHRoaXMucHJvY2Vzc2VkRWxlbWVudHMgPSBbXTsgLy8gTGlzdCBvZiBhbmltYXRlZCBjb21wb25lbnRzXG5cbiAgICB0aGlzLmFuaW1hdGVkQ29udGVudHMgPSBbXTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApOyAvLyBNb3ZpbmcgYW55IHByb3BlcnR5IHRoYXQgZG9lc24ndCBnZXQgdG9vIG11Y2ggYWNjZXNzIGFmdGVyIGluaXRpYWxpemF0aW9uIGJlY2F1c2Ugb2Ygdjggd2F5IG9mIGhhbmRsaW5nIG1vcmUgdGhhbiAxMCBwcm9wZXJ0aWVzLlxuICAgIC8vIExpc3Qgb2YgZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZFxuXG4gICAgdGhpcy5wcmV2Vmlld0RhdGEgPSBbXTsgLy8gTW92aW5nIGFueSBwcm9wZXJ0eSB0aGF0IGRvZXNuJ3QgZ2V0IHRvbyBtdWNoIGFjY2VzcyBhZnRlciBpbml0aWFsaXphdGlvbiBiZWNhdXNlIG9mIHY4IHdheSBvZiBoYW5kbGluZyBtb3JlIHRoYW4gMTAgcHJvcGVydGllcy5cbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIFNWR0Jhc2VFbGVtZW50LCBJU2hhcGVFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVET01FbGVtZW50XSwgU1ZHU2hhcGVFbGVtZW50KTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmluaXRTZWNvbmRhcnlFbGVtZW50ID0gZnVuY3Rpb24gKCkge307XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5pZGVudGl0eU1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmJ1aWxkRXhwcmVzc2lvbkludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNlYXJjaFNoYXBlcyh0aGlzLnNoYXBlc0RhdGEsIHRoaXMuaXRlbXNEYXRhLCB0aGlzLnByZXZWaWV3RGF0YSwgdGhpcy5sYXllckVsZW1lbnQsIDAsIFtdLCB0cnVlKTtcbiAgICB0aGlzLmZpbHRlclVuaXF1ZVNoYXBlcygpO1xuICB9O1xuICAvKlxyXG4gIFRoaXMgbWV0aG9kIHNlYXJjaGVzIGZvciBtdWx0aXBsZSBzaGFwZXMgdGhhdCBhZmZlY3QgYSBzaW5nbGUgZWxlbWVudCBhbmQgb25lIG9mIHRoZW0gaXMgYW5pbWF0ZWRcclxuICAqL1xuXG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5maWx0ZXJVbmlxdWVTaGFwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuc2hhcGVzLmxlbmd0aDtcbiAgICB2YXIgc2hhcGU7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW4gPSB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoO1xuICAgIHZhciBzdHlsZTtcbiAgICB2YXIgdGVtcFNoYXBlcyA9IFtdO1xuICAgIHZhciBhcmVBbmltYXRlZCA9IGZhbHNlO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgc3R5bGUgPSB0aGlzLnN0eWxlc0xpc3Rbal07XG4gICAgICBhcmVBbmltYXRlZCA9IGZhbHNlO1xuICAgICAgdGVtcFNoYXBlcy5sZW5ndGggPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgc2hhcGUgPSB0aGlzLnNoYXBlc1tpXTtcblxuICAgICAgICBpZiAoc2hhcGUuc3R5bGVzLmluZGV4T2Yoc3R5bGUpICE9PSAtMSkge1xuICAgICAgICAgIHRlbXBTaGFwZXMucHVzaChzaGFwZSk7XG4gICAgICAgICAgYXJlQW5pbWF0ZWQgPSBzaGFwZS5faXNBbmltYXRlZCB8fCBhcmVBbmltYXRlZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGVtcFNoYXBlcy5sZW5ndGggPiAxICYmIGFyZUFuaW1hdGVkKSB7XG4gICAgICAgIHRoaXMuc2V0U2hhcGVzQXNBbmltYXRlZCh0ZW1wU2hhcGVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5zZXRTaGFwZXNBc0FuaW1hdGVkID0gZnVuY3Rpb24gKHNoYXBlcykge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBzaGFwZXMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBzaGFwZXNbaV0uc2V0QXNBbmltYXRlZCgpO1xuICAgIH1cbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVN0eWxlRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhLCBsZXZlbCkge1xuICAgIC8vIFRPRE86IHByZXZlbnQgZHJhd2luZyBvZiBoaWRkZW4gc3R5bGVzXG4gICAgdmFyIGVsZW1lbnREYXRhO1xuICAgIHZhciBzdHlsZU9iID0gbmV3IFNWR1N0eWxlRGF0YShkYXRhLCBsZXZlbCk7XG4gICAgdmFyIHBhdGhFbGVtZW50ID0gc3R5bGVPYi5wRWxlbTtcblxuICAgIGlmIChkYXRhLnR5ID09PSAnc3QnKSB7XG4gICAgICBlbGVtZW50RGF0YSA9IG5ldyBTVkdTdHJva2VTdHlsZURhdGEodGhpcywgZGF0YSwgc3R5bGVPYik7XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnZmwnKSB7XG4gICAgICBlbGVtZW50RGF0YSA9IG5ldyBTVkdGaWxsU3R5bGVEYXRhKHRoaXMsIGRhdGEsIHN0eWxlT2IpO1xuICAgIH0gZWxzZSBpZiAoZGF0YS50eSA9PT0gJ2dmJyB8fCBkYXRhLnR5ID09PSAnZ3MnKSB7XG4gICAgICB2YXIgR3JhZGllbnRDb25zdHJ1Y3RvciA9IGRhdGEudHkgPT09ICdnZicgPyBTVkdHcmFkaWVudEZpbGxTdHlsZURhdGEgOiBTVkdHcmFkaWVudFN0cm9rZVN0eWxlRGF0YTtcbiAgICAgIGVsZW1lbnREYXRhID0gbmV3IEdyYWRpZW50Q29uc3RydWN0b3IodGhpcywgZGF0YSwgc3R5bGVPYik7XG4gICAgICB0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChlbGVtZW50RGF0YS5nZik7XG5cbiAgICAgIGlmIChlbGVtZW50RGF0YS5tYXNrSWQpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQoZWxlbWVudERhdGEubXMpO1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChlbGVtZW50RGF0YS5vZik7XG4gICAgICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnbWFzaycsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgZWxlbWVudERhdGEubWFza0lkICsgJyknKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRhdGEudHkgPT09ICdubycpIHtcbiAgICAgIGVsZW1lbnREYXRhID0gbmV3IFNWR05vU3R5bGVEYXRhKHRoaXMsIGRhdGEsIHN0eWxlT2IpO1xuICAgIH1cblxuICAgIGlmIChkYXRhLnR5ID09PSAnc3QnIHx8IGRhdGEudHkgPT09ICdncycpIHtcbiAgICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVjYXAnLCBsaW5lQ2FwRW51bVtkYXRhLmxjIHx8IDJdKTtcbiAgICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVqb2luJywgbGluZUpvaW5FbnVtW2RhdGEubGogfHwgMl0pO1xuICAgICAgcGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCAnMCcpO1xuXG4gICAgICBpZiAoZGF0YS5saiA9PT0gMSkge1xuICAgICAgICBwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1taXRlcmxpbWl0JywgZGF0YS5tbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuciA9PT0gMikge1xuICAgICAgcGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWxsLXJ1bGUnLCAnZXZlbm9kZCcpO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmxuKSB7XG4gICAgICBwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgZGF0YS5sbik7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuY2wpIHtcbiAgICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBkYXRhLmNsKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5ibSkge1xuICAgICAgcGF0aEVsZW1lbnQuc3R5bGVbJ21peC1ibGVuZC1tb2RlJ10gPSBnZXRCbGVuZE1vZGUoZGF0YS5ibSk7XG4gICAgfVxuXG4gICAgdGhpcy5zdHlsZXNMaXN0LnB1c2goc3R5bGVPYik7XG4gICAgdGhpcy5hZGRUb0FuaW1hdGVkQ29udGVudHMoZGF0YSwgZWxlbWVudERhdGEpO1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUdyb3VwRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIGVsZW1lbnREYXRhID0gbmV3IFNoYXBlR3JvdXBEYXRhKCk7XG5cbiAgICBpZiAoZGF0YS5sbikge1xuICAgICAgZWxlbWVudERhdGEuZ3Iuc2V0QXR0cmlidXRlKCdpZCcsIGRhdGEubG4pO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmNsKSB7XG4gICAgICBlbGVtZW50RGF0YS5nci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgZGF0YS5jbCk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuYm0pIHtcbiAgICAgIGVsZW1lbnREYXRhLmdyLnN0eWxlWydtaXgtYmxlbmQtbW9kZSddID0gZ2V0QmxlbmRNb2RlKGRhdGEuYm0pO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVRyYW5zZm9ybUVsZW1lbnQgPSBmdW5jdGlvbiAoZGF0YSwgY29udGFpbmVyKSB7XG4gICAgdmFyIHRyYW5zZm9ybVByb3BlcnR5ID0gVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5KHRoaXMsIGRhdGEsIHRoaXMpO1xuICAgIHZhciBlbGVtZW50RGF0YSA9IG5ldyBTVkdUcmFuc2Zvcm1EYXRhKHRyYW5zZm9ybVByb3BlcnR5LCB0cmFuc2Zvcm1Qcm9wZXJ0eS5vLCBjb250YWluZXIpO1xuICAgIHRoaXMuYWRkVG9BbmltYXRlZENvbnRlbnRzKGRhdGEsIGVsZW1lbnREYXRhKTtcbiAgICByZXR1cm4gZWxlbWVudERhdGE7XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTaGFwZUVsZW1lbnQgPSBmdW5jdGlvbiAoZGF0YSwgb3duVHJhbnNmb3JtZXJzLCBsZXZlbCkge1xuICAgIHZhciB0eSA9IDQ7XG5cbiAgICBpZiAoZGF0YS50eSA9PT0gJ3JjJykge1xuICAgICAgdHkgPSA1O1xuICAgIH0gZWxzZSBpZiAoZGF0YS50eSA9PT0gJ2VsJykge1xuICAgICAgdHkgPSA2O1xuICAgIH0gZWxzZSBpZiAoZGF0YS50eSA9PT0gJ3NyJykge1xuICAgICAgdHkgPSA3O1xuICAgIH1cblxuICAgIHZhciBzaGFwZVByb3BlcnR5ID0gU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wKHRoaXMsIGRhdGEsIHR5LCB0aGlzKTtcbiAgICB2YXIgZWxlbWVudERhdGEgPSBuZXcgU1ZHU2hhcGVEYXRhKG93blRyYW5zZm9ybWVycywgbGV2ZWwsIHNoYXBlUHJvcGVydHkpO1xuICAgIHRoaXMuc2hhcGVzLnB1c2goZWxlbWVudERhdGEpO1xuICAgIHRoaXMuYWRkU2hhcGVUb01vZGlmaWVycyhlbGVtZW50RGF0YSk7XG4gICAgdGhpcy5hZGRUb0FuaW1hdGVkQ29udGVudHMoZGF0YSwgZWxlbWVudERhdGEpO1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmFkZFRvQW5pbWF0ZWRDb250ZW50cyA9IGZ1bmN0aW9uIChkYXRhLCBlbGVtZW50KSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0aGlzLmFuaW1hdGVkQ29udGVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmICh0aGlzLmFuaW1hdGVkQ29udGVudHNbaV0uZWxlbWVudCA9PT0gZWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICB0aGlzLmFuaW1hdGVkQ29udGVudHMucHVzaCh7XG4gICAgICBmbjogU1ZHRWxlbWVudHNSZW5kZXJlci5jcmVhdGVSZW5kZXJGdW5jdGlvbihkYXRhKSxcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSk7XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5zZXRFbGVtZW50U3R5bGVzID0gZnVuY3Rpb24gKGVsZW1lbnREYXRhKSB7XG4gICAgdmFyIGFyciA9IGVsZW1lbnREYXRhLnN0eWxlcztcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbiA9IHRoaXMuc3R5bGVzTGlzdC5sZW5ndGg7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICBpZiAoIXRoaXMuc3R5bGVzTGlzdFtqXS5jbG9zZWQpIHtcbiAgICAgICAgYXJyLnB1c2godGhpcy5zdHlsZXNMaXN0W2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZWxvYWRTaGFwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5pdGVtc0RhdGEubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICB0aGlzLnByZXZWaWV3RGF0YVtpXSA9IHRoaXMuaXRlbXNEYXRhW2ldO1xuICAgIH1cblxuICAgIHRoaXMuc2VhcmNoU2hhcGVzKHRoaXMuc2hhcGVzRGF0YSwgdGhpcy5pdGVtc0RhdGEsIHRoaXMucHJldlZpZXdEYXRhLCB0aGlzLmxheWVyRWxlbWVudCwgMCwgW10sIHRydWUpO1xuICAgIHRoaXMuZmlsdGVyVW5pcXVlU2hhcGVzKCk7XG4gICAgbGVuID0gdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMuZHluYW1pY1Byb3BlcnRpZXNbaV0uZ2V0VmFsdWUoKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlck1vZGlmaWVycygpO1xuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuc2VhcmNoU2hhcGVzID0gZnVuY3Rpb24gKGFyciwgaXRlbXNEYXRhLCBwcmV2Vmlld0RhdGEsIGNvbnRhaW5lciwgbGV2ZWwsIHRyYW5zZm9ybWVycywgcmVuZGVyKSB7XG4gICAgdmFyIG93blRyYW5zZm9ybWVycyA9IFtdLmNvbmNhdCh0cmFuc2Zvcm1lcnMpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoIC0gMTtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgb3duU3R5bGVzID0gW107XG4gICAgdmFyIG93bk1vZGlmaWVycyA9IFtdO1xuICAgIHZhciBjdXJyZW50VHJhbnNmb3JtO1xuICAgIHZhciBtb2RpZmllcjtcbiAgICB2YXIgcHJvY2Vzc2VkUG9zO1xuXG4gICAgZm9yIChpID0gbGVuOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgcHJvY2Vzc2VkUG9zID0gdGhpcy5zZWFyY2hQcm9jZXNzZWRFbGVtZW50KGFycltpXSk7XG5cbiAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgIGFycltpXS5fcmVuZGVyID0gcmVuZGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbXNEYXRhW2ldID0gcHJldlZpZXdEYXRhW3Byb2Nlc3NlZFBvcyAtIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJyW2ldLnR5ID09PSAnZmwnIHx8IGFycltpXS50eSA9PT0gJ3N0JyB8fCBhcnJbaV0udHkgPT09ICdnZicgfHwgYXJyW2ldLnR5ID09PSAnZ3MnIHx8IGFycltpXS50eSA9PT0gJ25vJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IHRoaXMuY3JlYXRlU3R5bGVFbGVtZW50KGFycltpXSwgbGV2ZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXS5zdHlsZS5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcnJbaV0uX3JlbmRlcikge1xuICAgICAgICAgIGlmIChpdGVtc0RhdGFbaV0uc3R5bGUucEVsZW0ucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaXRlbXNEYXRhW2ldLnN0eWxlLnBFbGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvd25TdHlsZXMucHVzaChpdGVtc0RhdGFbaV0uc3R5bGUpO1xuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSB0aGlzLmNyZWF0ZUdyb3VwRWxlbWVudChhcnJbaV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGpMZW4gPSBpdGVtc0RhdGFbaV0uaXQubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgaXRlbXNEYXRhW2ldLnByZXZWaWV3RGF0YVtqXSA9IGl0ZW1zRGF0YVtpXS5pdFtqXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlYXJjaFNoYXBlcyhhcnJbaV0uaXQsIGl0ZW1zRGF0YVtpXS5pdCwgaXRlbXNEYXRhW2ldLnByZXZWaWV3RGF0YSwgaXRlbXNEYXRhW2ldLmdyLCBsZXZlbCArIDEsIG93blRyYW5zZm9ybWVycywgcmVuZGVyKTtcblxuICAgICAgICBpZiAoYXJyW2ldLl9yZW5kZXIpIHtcbiAgICAgICAgICBpZiAoaXRlbXNEYXRhW2ldLmdyLnBhcmVudE5vZGUgIT09IGNvbnRhaW5lcikge1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGl0ZW1zRGF0YVtpXS5ncik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3RyJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IHRoaXMuY3JlYXRlVHJhbnNmb3JtRWxlbWVudChhcnJbaV0sIGNvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50VHJhbnNmb3JtID0gaXRlbXNEYXRhW2ldLnRyYW5zZm9ybTtcbiAgICAgICAgb3duVHJhbnNmb3JtZXJzLnB1c2goY3VycmVudFRyYW5zZm9ybSk7XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3NoJyB8fCBhcnJbaV0udHkgPT09ICdyYycgfHwgYXJyW2ldLnR5ID09PSAnZWwnIHx8IGFycltpXS50eSA9PT0gJ3NyJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IHRoaXMuY3JlYXRlU2hhcGVFbGVtZW50KGFycltpXSwgb3duVHJhbnNmb3JtZXJzLCBsZXZlbCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldEVsZW1lbnRTdHlsZXMoaXRlbXNEYXRhW2ldKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAndG0nIHx8IGFycltpXS50eSA9PT0gJ3JkJyB8fCBhcnJbaV0udHkgPT09ICdtcycgfHwgYXJyW2ldLnR5ID09PSAncGInIHx8IGFycltpXS50eSA9PT0gJ3p6JyB8fCBhcnJbaV0udHkgPT09ICdvcCcpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBtb2RpZmllciA9IFNoYXBlTW9kaWZpZXJzLmdldE1vZGlmaWVyKGFycltpXS50eSk7XG4gICAgICAgICAgbW9kaWZpZXIuaW5pdCh0aGlzLCBhcnJbaV0pO1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IG1vZGlmaWVyO1xuICAgICAgICAgIHRoaXMuc2hhcGVNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9kaWZpZXIgPSBpdGVtc0RhdGFbaV07XG4gICAgICAgICAgbW9kaWZpZXIuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBvd25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3JwJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIG1vZGlmaWVyID0gU2hhcGVNb2RpZmllcnMuZ2V0TW9kaWZpZXIoYXJyW2ldLnR5KTtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSBtb2RpZmllcjtcbiAgICAgICAgICBtb2RpZmllci5pbml0KHRoaXMsIGFyciwgaSwgaXRlbXNEYXRhKTtcbiAgICAgICAgICB0aGlzLnNoYXBlTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xuICAgICAgICAgIHJlbmRlciA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZGlmaWVyID0gaXRlbXNEYXRhW2ldO1xuICAgICAgICAgIG1vZGlmaWVyLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBvd25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkUHJvY2Vzc2VkRWxlbWVudChhcnJbaV0sIGkgKyAxKTtcbiAgICB9XG5cbiAgICBsZW4gPSBvd25TdHlsZXMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBvd25TdHlsZXNbaV0uY2xvc2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZW4gPSBvd25Nb2RpZmllcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBvd25Nb2RpZmllcnNbaV0uY2xvc2VkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZW5kZXJNb2RpZmllcnMoKTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5zdHlsZXNMaXN0Lmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5zdHlsZXNMaXN0W2ldLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJTaGFwZSgpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5zdHlsZXNMaXN0W2ldLl9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLnN0eWxlc0xpc3RbaV0ubXNFbGVtKSB7XG4gICAgICAgICAgdGhpcy5zdHlsZXNMaXN0W2ldLm1zRWxlbS5zZXRBdHRyaWJ1dGUoJ2QnLCB0aGlzLnN0eWxlc0xpc3RbaV0uZCk7IC8vIEFkZGluZyBNMCAwIGZpeGVzIHNhbWUgbWFzayBidWcgb24gYWxsIGJyb3dzZXJzXG5cbiAgICAgICAgICB0aGlzLnN0eWxlc0xpc3RbaV0uZCA9ICdNMCAwJyArIHRoaXMuc3R5bGVzTGlzdFtpXS5kO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdHlsZXNMaXN0W2ldLnBFbGVtLnNldEF0dHJpYnV0ZSgnZCcsIHRoaXMuc3R5bGVzTGlzdFtpXS5kIHx8ICdNMCAwJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVyU2hhcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuYW5pbWF0ZWRDb250ZW50cy5sZW5ndGg7XG4gICAgdmFyIGFuaW1hdGVkQ29udGVudDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgYW5pbWF0ZWRDb250ZW50ID0gdGhpcy5hbmltYXRlZENvbnRlbnRzW2ldO1xuXG4gICAgICBpZiAoKHRoaXMuX2lzRmlyc3RGcmFtZSB8fCBhbmltYXRlZENvbnRlbnQuZWxlbWVudC5faXNBbmltYXRlZCkgJiYgYW5pbWF0ZWRDb250ZW50LmRhdGEgIT09IHRydWUpIHtcbiAgICAgICAgYW5pbWF0ZWRDb250ZW50LmZuKGFuaW1hdGVkQ29udGVudC5kYXRhLCBhbmltYXRlZENvbnRlbnQuZWxlbWVudCwgdGhpcy5faXNGaXJzdEZyYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGVzdHJveUJhc2VFbGVtZW50KCk7XG4gICAgdGhpcy5zaGFwZXNEYXRhID0gbnVsbDtcbiAgICB0aGlzLml0ZW1zRGF0YSA9IG51bGw7XG4gIH07XG5cbiAgZnVuY3Rpb24gTGV0dGVyUHJvcHMobywgc3csIHNjLCBmYywgbSwgcCkge1xuICAgIHRoaXMubyA9IG87XG4gICAgdGhpcy5zdyA9IHN3O1xuICAgIHRoaXMuc2MgPSBzYztcbiAgICB0aGlzLmZjID0gZmM7XG4gICAgdGhpcy5tID0gbTtcbiAgICB0aGlzLnAgPSBwO1xuICAgIHRoaXMuX21kZiA9IHtcbiAgICAgIG86IHRydWUsXG4gICAgICBzdzogISFzdyxcbiAgICAgIHNjOiAhIXNjLFxuICAgICAgZmM6ICEhZmMsXG4gICAgICBtOiB0cnVlLFxuICAgICAgcDogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBMZXR0ZXJQcm9wcy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG8sIHN3LCBzYywgZmMsIG0sIHApIHtcbiAgICB0aGlzLl9tZGYubyA9IGZhbHNlO1xuICAgIHRoaXMuX21kZi5zdyA9IGZhbHNlO1xuICAgIHRoaXMuX21kZi5zYyA9IGZhbHNlO1xuICAgIHRoaXMuX21kZi5mYyA9IGZhbHNlO1xuICAgIHRoaXMuX21kZi5tID0gZmFsc2U7XG4gICAgdGhpcy5fbWRmLnAgPSBmYWxzZTtcbiAgICB2YXIgdXBkYXRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMubyAhPT0gbykge1xuICAgICAgdGhpcy5vID0gbztcbiAgICAgIHRoaXMuX21kZi5vID0gdHJ1ZTtcbiAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN3ICE9PSBzdykge1xuICAgICAgdGhpcy5zdyA9IHN3O1xuICAgICAgdGhpcy5fbWRmLnN3ID0gdHJ1ZTtcbiAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNjICE9PSBzYykge1xuICAgICAgdGhpcy5zYyA9IHNjO1xuICAgICAgdGhpcy5fbWRmLnNjID0gdHJ1ZTtcbiAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZjICE9PSBmYykge1xuICAgICAgdGhpcy5mYyA9IGZjO1xuICAgICAgdGhpcy5fbWRmLmZjID0gdHJ1ZTtcbiAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm0gIT09IG0pIHtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLl9tZGYubSA9IHRydWU7XG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocC5sZW5ndGggJiYgKHRoaXMucFswXSAhPT0gcFswXSB8fCB0aGlzLnBbMV0gIT09IHBbMV0gfHwgdGhpcy5wWzRdICE9PSBwWzRdIHx8IHRoaXMucFs1XSAhPT0gcFs1XSB8fCB0aGlzLnBbMTJdICE9PSBwWzEyXSB8fCB0aGlzLnBbMTNdICE9PSBwWzEzXSkpIHtcbiAgICAgIHRoaXMucCA9IHA7XG4gICAgICB0aGlzLl9tZGYucCA9IHRydWU7XG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlZDtcbiAgfTtcblxuICBmdW5jdGlvbiBUZXh0UHJvcGVydHkoZWxlbSwgZGF0YSkge1xuICAgIHRoaXMuX2ZyYW1lSWQgPSBpbml0aWFsRGVmYXVsdEZyYW1lO1xuICAgIHRoaXMucHYgPSAnJztcbiAgICB0aGlzLnYgPSAnJztcbiAgICB0aGlzLmtmID0gZmFsc2U7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcblxuICAgIGlmIChkYXRhLmQgJiYgZGF0YS5kLnNpZCkge1xuICAgICAgZGF0YS5kID0gZWxlbS5nbG9iYWxEYXRhLnNsb3RNYW5hZ2VyLmdldFByb3AoZGF0YS5kKTtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5jb21wID0gdGhpcy5lbGVtLmNvbXA7XG4gICAgdGhpcy5rZXlzSW5kZXggPSAwO1xuICAgIHRoaXMuY2FuUmVzaXplID0gZmFsc2U7XG4gICAgdGhpcy5taW5pbXVtRm9udFNpemUgPSAxO1xuICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW107XG4gICAgdGhpcy5jdXJyZW50RGF0YSA9IHtcbiAgICAgIGFzY2VudDogMCxcbiAgICAgIGJveFdpZHRoOiB0aGlzLmRlZmF1bHRCb3hXaWR0aCxcbiAgICAgIGY6ICcnLFxuICAgICAgZlN0eWxlOiAnJyxcbiAgICAgIGZXZWlnaHQ6ICcnLFxuICAgICAgZmM6ICcnLFxuICAgICAgajogJycsXG4gICAgICBqdXN0aWZ5T2Zmc2V0OiAnJyxcbiAgICAgIGw6IFtdLFxuICAgICAgbGg6IDAsXG4gICAgICBsaW5lV2lkdGhzOiBbXSxcbiAgICAgIGxzOiAnJyxcbiAgICAgIG9mOiAnJyxcbiAgICAgIHM6ICcnLFxuICAgICAgc2M6ICcnLFxuICAgICAgc3c6IDAsXG4gICAgICB0OiAwLFxuICAgICAgdHI6IDAsXG4gICAgICBzejogMCxcbiAgICAgIHBzOiBudWxsLFxuICAgICAgZmlsbENvbG9yQW5pbTogZmFsc2UsXG4gICAgICBzdHJva2VDb2xvckFuaW06IGZhbHNlLFxuICAgICAgc3Ryb2tlV2lkdGhBbmltOiBmYWxzZSxcbiAgICAgIHlPZmZzZXQ6IDAsXG4gICAgICBmaW5hbFNpemU6IDAsXG4gICAgICBmaW5hbFRleHQ6IFtdLFxuICAgICAgZmluYWxMaW5lSGVpZ2h0OiAwLFxuICAgICAgX19jb21wbGV0ZTogZmFsc2VcbiAgICB9O1xuICAgIHRoaXMuY29weURhdGEodGhpcy5jdXJyZW50RGF0YSwgdGhpcy5kYXRhLmQua1swXS5zKTtcblxuICAgIGlmICghdGhpcy5zZWFyY2hQcm9wZXJ0eSgpKSB7XG4gICAgICB0aGlzLmNvbXBsZXRlVGV4dERhdGEodGhpcy5jdXJyZW50RGF0YSk7XG4gICAgfVxuICB9XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5kZWZhdWx0Qm94V2lkdGggPSBbMCwgMF07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5jb3B5RGF0YSA9IGZ1bmN0aW9uIChvYmosIGRhdGEpIHtcbiAgICBmb3IgKHZhciBzIGluIGRhdGEpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGF0YSwgcykpIHtcbiAgICAgICAgb2JqW3NdID0gZGF0YVtzXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuc2V0Q3VycmVudERhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghZGF0YS5fX2NvbXBsZXRlKSB7XG4gICAgICB0aGlzLmNvbXBsZXRlVGV4dERhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50RGF0YSA9IGRhdGE7XG4gICAgdGhpcy5jdXJyZW50RGF0YS5ib3hXaWR0aCA9IHRoaXMuY3VycmVudERhdGEuYm94V2lkdGggfHwgdGhpcy5kZWZhdWx0Qm94V2lkdGg7XG4gICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLnNlYXJjaFByb3BlcnR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNlYXJjaEtleWZyYW1lcygpO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuc2VhcmNoS2V5ZnJhbWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMua2YgPSB0aGlzLmRhdGEuZC5rLmxlbmd0aCA+IDE7XG5cbiAgICBpZiAodGhpcy5rZikge1xuICAgICAgdGhpcy5hZGRFZmZlY3QodGhpcy5nZXRLZXlmcmFtZVZhbHVlLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmtmO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuYWRkRWZmZWN0ID0gZnVuY3Rpb24gKGVmZmVjdEZ1bmN0aW9uKSB7XG4gICAgdGhpcy5lZmZlY3RzU2VxdWVuY2UucHVzaChlZmZlY3RGdW5jdGlvbik7XG4gICAgdGhpcy5lbGVtLmFkZER5bmFtaWNQcm9wZXJ0eSh0aGlzKTtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKF9maW5hbFZhbHVlKSB7XG4gICAgaWYgKCh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQgfHwgIXRoaXMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkgJiYgIV9maW5hbFZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50RGF0YS50ID0gdGhpcy5kYXRhLmQua1t0aGlzLmtleXNJbmRleF0ucy50O1xuICAgIHZhciBjdXJyZW50VmFsdWUgPSB0aGlzLmN1cnJlbnREYXRhO1xuICAgIHZhciBjdXJyZW50SW5kZXggPSB0aGlzLmtleXNJbmRleDtcblxuICAgIGlmICh0aGlzLmxvY2spIHtcbiAgICAgIHRoaXMuc2V0Q3VycmVudERhdGEodGhpcy5jdXJyZW50RGF0YSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5sb2NrID0gdHJ1ZTtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO1xuICAgIHZhciBmaW5hbFZhbHVlID0gX2ZpbmFsVmFsdWUgfHwgdGhpcy5kYXRhLmQua1t0aGlzLmtleXNJbmRleF0ucztcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgLy8gQ2hlY2tpbmcgaWYgaW5kZXggY2hhbmdlZCB0byBwcmV2ZW50IGNyZWF0aW5nIGEgbmV3IG9iamVjdCBldmVyeSB0aW1lIHRoZSBleHByZXNzaW9uIHVwZGF0ZXMuXG4gICAgICBpZiAoY3VycmVudEluZGV4ICE9PSB0aGlzLmtleXNJbmRleCkge1xuICAgICAgICBmaW5hbFZhbHVlID0gdGhpcy5lZmZlY3RzU2VxdWVuY2VbaV0oZmluYWxWYWx1ZSwgZmluYWxWYWx1ZS50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbmFsVmFsdWUgPSB0aGlzLmVmZmVjdHNTZXF1ZW5jZVtpXSh0aGlzLmN1cnJlbnREYXRhLCBmaW5hbFZhbHVlLnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjdXJyZW50VmFsdWUgIT09IGZpbmFsVmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0Q3VycmVudERhdGEoZmluYWxWYWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy52ID0gdGhpcy5jdXJyZW50RGF0YTtcbiAgICB0aGlzLnB2ID0gdGhpcy52O1xuICAgIHRoaXMubG9jayA9IGZhbHNlO1xuICAgIHRoaXMuZnJhbWVJZCA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5nZXRLZXlmcmFtZVZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXh0S2V5cyA9IHRoaXMuZGF0YS5kLms7XG4gICAgdmFyIGZyYW1lTnVtID0gdGhpcy5lbGVtLmNvbXAucmVuZGVyZWRGcmFtZTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRleHRLZXlzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDw9IGxlbiAtIDEpIHtcbiAgICAgIGlmIChpID09PSBsZW4gLSAxIHx8IHRleHRLZXlzW2kgKyAxXS50ID4gZnJhbWVOdW0pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5rZXlzSW5kZXggIT09IGkpIHtcbiAgICAgIHRoaXMua2V5c0luZGV4ID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhLmQua1t0aGlzLmtleXNJbmRleF0ucztcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmJ1aWxkRmluYWxUZXh0ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICB2YXIgY2hhcmFjdGVyc0FycmF5ID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0ZXh0Lmxlbmd0aDtcbiAgICB2YXIgY2hhckNvZGU7XG4gICAgdmFyIHNlY29uZENoYXJDb2RlO1xuICAgIHZhciBzaG91bGRDb21iaW5lID0gZmFsc2U7XG4gICAgdmFyIHNob3VsZENvbWJpbmVOZXh0ID0gZmFsc2U7XG4gICAgdmFyIGN1cnJlbnRDaGFycyA9ICcnO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHNob3VsZENvbWJpbmUgPSBzaG91bGRDb21iaW5lTmV4dDtcbiAgICAgIHNob3VsZENvbWJpbmVOZXh0ID0gZmFsc2U7XG4gICAgICBjaGFyQ29kZSA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICAgIGN1cnJlbnRDaGFycyA9IHRleHQuY2hhckF0KGkpO1xuXG4gICAgICBpZiAoRm9udE1hbmFnZXIuaXNDb21iaW5lZENoYXJhY3RlcihjaGFyQ29kZSkpIHtcbiAgICAgICAgc2hvdWxkQ29tYmluZSA9IHRydWU7IC8vIEl0J3MgYSBwb3RlbnRpYWwgc3Vycm9nYXRlIHBhaXIgKHRoaXMgaXMgdGhlIEhpZ2ggc3Vycm9nYXRlKVxuICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZSA+PSAweEQ4MDAgJiYgY2hhckNvZGUgPD0gMHhEQkZGKSB7XG4gICAgICAgIGlmIChGb250TWFuYWdlci5pc1JlZ2lvbmFsRmxhZyh0ZXh0LCBpKSkge1xuICAgICAgICAgIGN1cnJlbnRDaGFycyA9IHRleHQuc3Vic3RyKGksIDE0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWNvbmRDaGFyQ29kZSA9IHRleHQuY2hhckNvZGVBdChpICsgMSk7IC8vIEl0J3MgYSBzdXJyb2dhdGUgcGFpciAodGhpcyBpcyB0aGUgTG93IHN1cnJvZ2F0ZSlcblxuICAgICAgICAgIGlmIChzZWNvbmRDaGFyQ29kZSA+PSAweERDMDAgJiYgc2Vjb25kQ2hhckNvZGUgPD0gMHhERkZGKSB7XG4gICAgICAgICAgICBpZiAoRm9udE1hbmFnZXIuaXNNb2RpZmllcihjaGFyQ29kZSwgc2Vjb25kQ2hhckNvZGUpKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRDaGFycyA9IHRleHQuc3Vic3RyKGksIDIpO1xuICAgICAgICAgICAgICBzaG91bGRDb21iaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoRm9udE1hbmFnZXIuaXNGbGFnRW1vamkodGV4dC5zdWJzdHIoaSwgNCkpKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRDaGFycyA9IHRleHQuc3Vic3RyKGksIDQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3VycmVudENoYXJzID0gdGV4dC5zdWJzdHIoaSwgMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlID4gMHhEQkZGKSB7XG4gICAgICAgIHNlY29uZENoYXJDb2RlID0gdGV4dC5jaGFyQ29kZUF0KGkgKyAxKTtcblxuICAgICAgICBpZiAoRm9udE1hbmFnZXIuaXNWYXJpYXRpb25TZWxlY3RvcihjaGFyQ29kZSkpIHtcbiAgICAgICAgICBzaG91bGRDb21iaW5lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChGb250TWFuYWdlci5pc1plcm9XaWR0aEpvaW5lcihjaGFyQ29kZSkpIHtcbiAgICAgICAgc2hvdWxkQ29tYmluZSA9IHRydWU7XG4gICAgICAgIHNob3VsZENvbWJpbmVOZXh0ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNob3VsZENvbWJpbmUpIHtcbiAgICAgICAgY2hhcmFjdGVyc0FycmF5W2NoYXJhY3RlcnNBcnJheS5sZW5ndGggLSAxXSArPSBjdXJyZW50Q2hhcnM7XG4gICAgICAgIHNob3VsZENvbWJpbmUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYXJhY3RlcnNBcnJheS5wdXNoKGN1cnJlbnRDaGFycyk7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gY3VycmVudENoYXJzLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hhcmFjdGVyc0FycmF5O1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuY29tcGxldGVUZXh0RGF0YSA9IGZ1bmN0aW9uIChkb2N1bWVudERhdGEpIHtcbiAgICBkb2N1bWVudERhdGEuX19jb21wbGV0ZSA9IHRydWU7XG4gICAgdmFyIGZvbnRNYW5hZ2VyID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZm9udE1hbmFnZXI7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgdmFyIGxldHRlcnMgPSBbXTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuICAgIHZhciBuZXdMaW5lRmxhZztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciB2YWw7XG4gICAgdmFyIGFuY2hvckdyb3VwaW5nID0gZGF0YS5tLmc7XG4gICAgdmFyIGN1cnJlbnRTaXplID0gMDtcbiAgICB2YXIgY3VycmVudFBvcyA9IDA7XG4gICAgdmFyIGN1cnJlbnRMaW5lID0gMDtcbiAgICB2YXIgbGluZVdpZHRocyA9IFtdO1xuICAgIHZhciBsaW5lV2lkdGggPSAwO1xuICAgIHZhciBtYXhMaW5lV2lkdGggPSAwO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBmb250RGF0YSA9IGZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpO1xuICAgIHZhciBjaGFyRGF0YTtcbiAgICB2YXIgY0xlbmd0aCA9IDA7XG4gICAgdmFyIGZvbnRQcm9wcyA9IGdldEZvbnRQcm9wZXJ0aWVzKGZvbnREYXRhKTtcbiAgICBkb2N1bWVudERhdGEuZldlaWdodCA9IGZvbnRQcm9wcy53ZWlnaHQ7XG4gICAgZG9jdW1lbnREYXRhLmZTdHlsZSA9IGZvbnRQcm9wcy5zdHlsZTtcbiAgICBkb2N1bWVudERhdGEuZmluYWxTaXplID0gZG9jdW1lbnREYXRhLnM7XG4gICAgZG9jdW1lbnREYXRhLmZpbmFsVGV4dCA9IHRoaXMuYnVpbGRGaW5hbFRleHQoZG9jdW1lbnREYXRhLnQpO1xuICAgIGxlbiA9IGRvY3VtZW50RGF0YS5maW5hbFRleHQubGVuZ3RoO1xuICAgIGRvY3VtZW50RGF0YS5maW5hbExpbmVIZWlnaHQgPSBkb2N1bWVudERhdGEubGg7XG4gICAgdmFyIHRyYWNraW5nT2Zmc2V0ID0gZG9jdW1lbnREYXRhLnRyIC8gMTAwMCAqIGRvY3VtZW50RGF0YS5maW5hbFNpemU7XG4gICAgdmFyIGNoYXJDb2RlO1xuXG4gICAgaWYgKGRvY3VtZW50RGF0YS5zeikge1xuICAgICAgdmFyIGZsYWcgPSB0cnVlO1xuICAgICAgdmFyIGJveFdpZHRoID0gZG9jdW1lbnREYXRhLnN6WzBdO1xuICAgICAgdmFyIGJveEhlaWdodCA9IGRvY3VtZW50RGF0YS5zelsxXTtcbiAgICAgIHZhciBjdXJyZW50SGVpZ2h0O1xuICAgICAgdmFyIGZpbmFsVGV4dDtcblxuICAgICAgd2hpbGUgKGZsYWcpIHtcbiAgICAgICAgZmluYWxUZXh0ID0gdGhpcy5idWlsZEZpbmFsVGV4dChkb2N1bWVudERhdGEudCk7XG4gICAgICAgIGN1cnJlbnRIZWlnaHQgPSAwO1xuICAgICAgICBsaW5lV2lkdGggPSAwO1xuICAgICAgICBsZW4gPSBmaW5hbFRleHQubGVuZ3RoO1xuICAgICAgICB0cmFja2luZ09mZnNldCA9IGRvY3VtZW50RGF0YS50ciAvIDEwMDAgKiBkb2N1bWVudERhdGEuZmluYWxTaXplO1xuICAgICAgICB2YXIgbGFzdFNwYWNlSW5kZXggPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBjaGFyQ29kZSA9IGZpbmFsVGV4dFtpXS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgIG5ld0xpbmVGbGFnID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAoZmluYWxUZXh0W2ldID09PSAnICcpIHtcbiAgICAgICAgICAgIGxhc3RTcGFjZUluZGV4ID0gaTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlID09PSAxMyB8fCBjaGFyQ29kZSA9PT0gMykge1xuICAgICAgICAgICAgbGluZVdpZHRoID0gMDtcbiAgICAgICAgICAgIG5ld0xpbmVGbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIGN1cnJlbnRIZWlnaHQgKz0gZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodCB8fCBkb2N1bWVudERhdGEuZmluYWxTaXplICogMS4yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmb250TWFuYWdlci5jaGFycykge1xuICAgICAgICAgICAgY2hhckRhdGEgPSBmb250TWFuYWdlci5nZXRDaGFyRGF0YShmaW5hbFRleHRbaV0sIGZvbnREYXRhLmZTdHlsZSwgZm9udERhdGEuZkZhbWlseSk7XG4gICAgICAgICAgICBjTGVuZ3RoID0gbmV3TGluZUZsYWcgPyAwIDogY2hhckRhdGEudyAqIGRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxMDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRDYW52YXNIZWxwZXIuZm9udCA9IGRvY3VtZW50RGF0YS5zICsgJ3B4ICcrIGZvbnREYXRhLmZGYW1pbHk7XG4gICAgICAgICAgICBjTGVuZ3RoID0gZm9udE1hbmFnZXIubWVhc3VyZVRleHQoZmluYWxUZXh0W2ldLCBkb2N1bWVudERhdGEuZiwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGxpbmVXaWR0aCArIGNMZW5ndGggPiBib3hXaWR0aCAmJiBmaW5hbFRleHRbaV0gIT09ICcgJykge1xuICAgICAgICAgICAgaWYgKGxhc3RTcGFjZUluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICBsZW4gKz0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGkgPSBsYXN0U3BhY2VJbmRleDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VycmVudEhlaWdodCArPSBkb2N1bWVudERhdGEuZmluYWxMaW5lSGVpZ2h0IHx8IGRvY3VtZW50RGF0YS5maW5hbFNpemUgKiAxLjI7XG4gICAgICAgICAgICBmaW5hbFRleHQuc3BsaWNlKGksIGxhc3RTcGFjZUluZGV4ID09PSBpID8gMSA6IDAsICdcXHInKTsgLy8gZmluYWxUZXh0ID0gZmluYWxUZXh0LnN1YnN0cigwLGkpICsgXCJcXHJcIiArIGZpbmFsVGV4dC5zdWJzdHIoaSA9PT0gbGFzdFNwYWNlSW5kZXggPyBpICsgMSA6IGkpO1xuXG4gICAgICAgICAgICBsYXN0U3BhY2VJbmRleCA9IC0xO1xuICAgICAgICAgICAgbGluZVdpZHRoID0gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGluZVdpZHRoICs9IGNMZW5ndGg7XG4gICAgICAgICAgICBsaW5lV2lkdGggKz0gdHJhY2tpbmdPZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEhlaWdodCArPSBmb250RGF0YS5hc2NlbnQgKiBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwO1xuXG4gICAgICAgIGlmICh0aGlzLmNhblJlc2l6ZSAmJiBkb2N1bWVudERhdGEuZmluYWxTaXplID4gdGhpcy5taW5pbXVtRm9udFNpemUgJiYgYm94SGVpZ2h0IDwgY3VycmVudEhlaWdodCkge1xuICAgICAgICAgIGRvY3VtZW50RGF0YS5maW5hbFNpemUgLT0gMTtcbiAgICAgICAgICBkb2N1bWVudERhdGEuZmluYWxMaW5lSGVpZ2h0ID0gZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAqIGRvY3VtZW50RGF0YS5saCAvIGRvY3VtZW50RGF0YS5zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRvY3VtZW50RGF0YS5maW5hbFRleHQgPSBmaW5hbFRleHQ7XG4gICAgICAgICAgbGVuID0gZG9jdW1lbnREYXRhLmZpbmFsVGV4dC5sZW5ndGg7XG4gICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGluZVdpZHRoID0gLXRyYWNraW5nT2Zmc2V0O1xuICAgIGNMZW5ndGggPSAwO1xuICAgIHZhciB1bmNvbGxhcHNlZFNwYWNlcyA9IDA7XG4gICAgdmFyIGN1cnJlbnRDaGFyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBuZXdMaW5lRmxhZyA9IGZhbHNlO1xuICAgICAgY3VycmVudENoYXIgPSBkb2N1bWVudERhdGEuZmluYWxUZXh0W2ldO1xuICAgICAgY2hhckNvZGUgPSBjdXJyZW50Q2hhci5jaGFyQ29kZUF0KDApO1xuXG4gICAgICBpZiAoY2hhckNvZGUgPT09IDEzIHx8IGNoYXJDb2RlID09PSAzKSB7XG4gICAgICAgIHVuY29sbGFwc2VkU3BhY2VzID0gMDtcbiAgICAgICAgbGluZVdpZHRocy5wdXNoKGxpbmVXaWR0aCk7XG4gICAgICAgIG1heExpbmVXaWR0aCA9IGxpbmVXaWR0aCA+IG1heExpbmVXaWR0aCA/IGxpbmVXaWR0aCA6IG1heExpbmVXaWR0aDtcbiAgICAgICAgbGluZVdpZHRoID0gLTIgKiB0cmFja2luZ09mZnNldDtcbiAgICAgICAgdmFsID0gJyc7XG4gICAgICAgIG5ld0xpbmVGbGFnID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudExpbmUgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IGN1cnJlbnRDaGFyO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9udE1hbmFnZXIuY2hhcnMpIHtcbiAgICAgICAgY2hhckRhdGEgPSBmb250TWFuYWdlci5nZXRDaGFyRGF0YShjdXJyZW50Q2hhciwgZm9udERhdGEuZlN0eWxlLCBmb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKS5mRmFtaWx5KTtcbiAgICAgICAgY0xlbmd0aCA9IG5ld0xpbmVGbGFnID8gMCA6IGNoYXJEYXRhLncgKiBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdmFyIGNoYXJXaWR0aCA9IGZvbnRNYW5hZ2VyLm1lYXN1cmVUZXh0KHZhbCwgZG9jdW1lbnREYXRhLmYsIGRvY3VtZW50RGF0YS5maW5hbFNpemUpO1xuICAgICAgICAvLyB0Q2FudmFzSGVscGVyLmZvbnQgPSBkb2N1bWVudERhdGEuZmluYWxTaXplICsgJ3B4ICcrIGZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHk7XG4gICAgICAgIGNMZW5ndGggPSBmb250TWFuYWdlci5tZWFzdXJlVGV4dCh2YWwsIGRvY3VtZW50RGF0YS5mLCBkb2N1bWVudERhdGEuZmluYWxTaXplKTtcbiAgICAgIH0gLy9cblxuXG4gICAgICBpZiAoY3VycmVudENoYXIgPT09ICcgJykge1xuICAgICAgICB1bmNvbGxhcHNlZFNwYWNlcyArPSBjTGVuZ3RoICsgdHJhY2tpbmdPZmZzZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaW5lV2lkdGggKz0gY0xlbmd0aCArIHRyYWNraW5nT2Zmc2V0ICsgdW5jb2xsYXBzZWRTcGFjZXM7XG4gICAgICAgIHVuY29sbGFwc2VkU3BhY2VzID0gMDtcbiAgICAgIH1cblxuICAgICAgbGV0dGVycy5wdXNoKHtcbiAgICAgICAgbDogY0xlbmd0aCxcbiAgICAgICAgYW46IGNMZW5ndGgsXG4gICAgICAgIGFkZDogY3VycmVudFNpemUsXG4gICAgICAgIG46IG5ld0xpbmVGbGFnLFxuICAgICAgICBhbkluZGV4ZXM6IFtdLFxuICAgICAgICB2YWw6IHZhbCxcbiAgICAgICAgbGluZTogY3VycmVudExpbmUsXG4gICAgICAgIGFuaW1hdG9ySnVzdGlmeU9mZnNldDogMFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChhbmNob3JHcm91cGluZyA9PSAyKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgIGN1cnJlbnRTaXplICs9IGNMZW5ndGg7XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gJycgfHwgdmFsID09PSAnICcgfHwgaSA9PT0gbGVuIC0gMSkge1xuICAgICAgICAgIGlmICh2YWwgPT09ICcnIHx8IHZhbCA9PT0gJyAnKSB7XG4gICAgICAgICAgICBjdXJyZW50U2l6ZSAtPSBjTGVuZ3RoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdoaWxlIChjdXJyZW50UG9zIDw9IGkpIHtcbiAgICAgICAgICAgIGxldHRlcnNbY3VycmVudFBvc10uYW4gPSBjdXJyZW50U2l6ZTtcbiAgICAgICAgICAgIGxldHRlcnNbY3VycmVudFBvc10uaW5kID0gaW5kZXg7XG4gICAgICAgICAgICBsZXR0ZXJzW2N1cnJlbnRQb3NdLmV4dHJhID0gY0xlbmd0aDtcbiAgICAgICAgICAgIGN1cnJlbnRQb3MgKz0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICAgIGN1cnJlbnRTaXplID0gMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhbmNob3JHcm91cGluZyA9PSAzKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgIGN1cnJlbnRTaXplICs9IGNMZW5ndGg7XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gJycgfHwgaSA9PT0gbGVuIC0gMSkge1xuICAgICAgICAgIGlmICh2YWwgPT09ICcnKSB7XG4gICAgICAgICAgICBjdXJyZW50U2l6ZSAtPSBjTGVuZ3RoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdoaWxlIChjdXJyZW50UG9zIDw9IGkpIHtcbiAgICAgICAgICAgIGxldHRlcnNbY3VycmVudFBvc10uYW4gPSBjdXJyZW50U2l6ZTtcbiAgICAgICAgICAgIGxldHRlcnNbY3VycmVudFBvc10uaW5kID0gaW5kZXg7XG4gICAgICAgICAgICBsZXR0ZXJzW2N1cnJlbnRQb3NdLmV4dHJhID0gY0xlbmd0aDtcbiAgICAgICAgICAgIGN1cnJlbnRQb3MgKz0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJyZW50U2l6ZSA9IDA7XG4gICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0dGVyc1tpbmRleF0uaW5kID0gaW5kZXg7XG4gICAgICAgIGxldHRlcnNbaW5kZXhdLmV4dHJhID0gMDtcbiAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkb2N1bWVudERhdGEubCA9IGxldHRlcnM7XG4gICAgbWF4TGluZVdpZHRoID0gbGluZVdpZHRoID4gbWF4TGluZVdpZHRoID8gbGluZVdpZHRoIDogbWF4TGluZVdpZHRoO1xuICAgIGxpbmVXaWR0aHMucHVzaChsaW5lV2lkdGgpO1xuXG4gICAgaWYgKGRvY3VtZW50RGF0YS5zeikge1xuICAgICAgZG9jdW1lbnREYXRhLmJveFdpZHRoID0gZG9jdW1lbnREYXRhLnN6WzBdO1xuICAgICAgZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudERhdGEuYm94V2lkdGggPSBtYXhMaW5lV2lkdGg7XG5cbiAgICAgIHN3aXRjaCAoZG9jdW1lbnREYXRhLmopIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ID0gLWRvY3VtZW50RGF0YS5ib3hXaWR0aDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQgPSAtZG9jdW1lbnREYXRhLmJveFdpZHRoIC8gMjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkb2N1bWVudERhdGEubGluZVdpZHRocyA9IGxpbmVXaWR0aHM7XG4gICAgdmFyIGFuaW1hdG9ycyA9IGRhdGEuYTtcbiAgICB2YXIgYW5pbWF0b3JEYXRhO1xuICAgIHZhciBsZXR0ZXJEYXRhO1xuICAgIGpMZW4gPSBhbmltYXRvcnMubGVuZ3RoO1xuICAgIHZhciBiYXNlZDtcbiAgICB2YXIgaW5kO1xuICAgIHZhciBpbmRleGVzID0gW107XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICBhbmltYXRvckRhdGEgPSBhbmltYXRvcnNbal07XG5cbiAgICAgIGlmIChhbmltYXRvckRhdGEuYS5zYykge1xuICAgICAgICBkb2N1bWVudERhdGEuc3Ryb2tlQ29sb3JBbmltID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdG9yRGF0YS5hLnN3KSB7XG4gICAgICAgIGRvY3VtZW50RGF0YS5zdHJva2VXaWR0aEFuaW0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0b3JEYXRhLmEuZmMgfHwgYW5pbWF0b3JEYXRhLmEuZmggfHwgYW5pbWF0b3JEYXRhLmEuZnMgfHwgYW5pbWF0b3JEYXRhLmEuZmIpIHtcbiAgICAgICAgZG9jdW1lbnREYXRhLmZpbGxDb2xvckFuaW0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpbmQgPSAwO1xuICAgICAgYmFzZWQgPSBhbmltYXRvckRhdGEucy5iO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgbGV0dGVyRGF0YSA9IGxldHRlcnNbaV07XG4gICAgICAgIGxldHRlckRhdGEuYW5JbmRleGVzW2pdID0gaW5kO1xuXG4gICAgICAgIGlmIChiYXNlZCA9PSAxICYmIGxldHRlckRhdGEudmFsICE9PSAnJyB8fCBiYXNlZCA9PSAyICYmIGxldHRlckRhdGEudmFsICE9PSAnJyAmJiBsZXR0ZXJEYXRhLnZhbCAhPT0gJyAnIHx8IGJhc2VkID09IDMgJiYgKGxldHRlckRhdGEubiB8fCBsZXR0ZXJEYXRhLnZhbCA9PSAnICcgfHwgaSA9PSBsZW4gLSAxKSB8fCBiYXNlZCA9PSA0ICYmIChsZXR0ZXJEYXRhLm4gfHwgaSA9PSBsZW4gLSAxKSkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgICAgaWYgKGFuaW1hdG9yRGF0YS5zLnJuID09PSAxKSB7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goaW5kKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbmQgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkYXRhLmFbal0ucy50b3RhbENoYXJzID0gaW5kO1xuICAgICAgdmFyIGN1cnJlbnRJbmQgPSAtMTtcbiAgICAgIHZhciBuZXdJbmQ7XG5cbiAgICAgIGlmIChhbmltYXRvckRhdGEucy5ybiA9PT0gMSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBsZXR0ZXJEYXRhID0gbGV0dGVyc1tpXTtcblxuICAgICAgICAgIGlmIChjdXJyZW50SW5kICE9IGxldHRlckRhdGEuYW5JbmRleGVzW2pdKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICAgICAgY3VycmVudEluZCA9IGxldHRlckRhdGEuYW5JbmRleGVzW2pdO1xuICAgICAgICAgICAgbmV3SW5kID0gaW5kZXhlcy5zcGxpY2UoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaW5kZXhlcy5sZW5ndGgpLCAxKVswXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXR0ZXJEYXRhLmFuSW5kZXhlc1tqXSA9IG5ld0luZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGRvY3VtZW50RGF0YS55T2Zmc2V0ID0gZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodCB8fCBkb2N1bWVudERhdGEuZmluYWxTaXplICogMS4yO1xuICAgIGRvY3VtZW50RGF0YS5scyA9IGRvY3VtZW50RGF0YS5scyB8fCAwO1xuICAgIGRvY3VtZW50RGF0YS5hc2NlbnQgPSBmb250RGF0YS5hc2NlbnQgKiBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUudXBkYXRlRG9jdW1lbnREYXRhID0gZnVuY3Rpb24gKG5ld0RhdGEsIGluZGV4KSB7XG4gICAgaW5kZXggPSBpbmRleCA9PT0gdW5kZWZpbmVkID8gdGhpcy5rZXlzSW5kZXggOiBpbmRleDtcbiAgICB2YXIgZERhdGEgPSB0aGlzLmNvcHlEYXRhKHt9LCB0aGlzLmRhdGEuZC5rW2luZGV4XS5zKTtcbiAgICBkRGF0YSA9IHRoaXMuY29weURhdGEoZERhdGEsIG5ld0RhdGEpO1xuICAgIHRoaXMuZGF0YS5kLmtbaW5kZXhdLnMgPSBkRGF0YTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlKGluZGV4KTtcbiAgICB0aGlzLnNldEN1cnJlbnREYXRhKGREYXRhKTtcbiAgICB0aGlzLmVsZW0uYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUucmVjYWxjdWxhdGUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICB2YXIgZERhdGEgPSB0aGlzLmRhdGEuZC5rW2luZGV4XS5zO1xuICAgIGREYXRhLl9fY29tcGxldGUgPSBmYWxzZTtcbiAgICB0aGlzLmtleXNJbmRleCA9IDA7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB0aGlzLmdldFZhbHVlKGREYXRhKTtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmNhblJlc2l6ZUZvbnQgPSBmdW5jdGlvbiAoX2NhblJlc2l6ZSkge1xuICAgIHRoaXMuY2FuUmVzaXplID0gX2NhblJlc2l6ZTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlKHRoaXMua2V5c0luZGV4KTtcbiAgICB0aGlzLmVsZW0uYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuc2V0TWluaW11bUZvbnRTaXplID0gZnVuY3Rpb24gKF9mb250VmFsdWUpIHtcbiAgICB0aGlzLm1pbmltdW1Gb250U2l6ZSA9IE1hdGguZmxvb3IoX2ZvbnRWYWx1ZSkgfHwgMTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlKHRoaXMua2V5c0luZGV4KTtcbiAgICB0aGlzLmVsZW0uYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO1xuICB9O1xuXG4gIHZhciBUZXh0U2VsZWN0b3JQcm9wID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtYXggPSBNYXRoLm1heDtcbiAgICB2YXIgbWluID0gTWF0aC5taW47XG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuICAgIGZ1bmN0aW9uIFRleHRTZWxlY3RvclByb3BGYWN0b3J5KGVsZW0sIGRhdGEpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRUZXh0TGVuZ3RoID0gLTE7XG4gICAgICB0aGlzLmsgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgICAgdGhpcy5maW5hbFMgPSAwO1xuICAgICAgdGhpcy5maW5hbEUgPSAwO1xuICAgICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICAgICAgdGhpcy5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zIHx8IHtcbiAgICAgICAgazogMFxuICAgICAgfSwgMCwgMCwgdGhpcyk7XG5cbiAgICAgIGlmICgnZScgaW4gZGF0YSkge1xuICAgICAgICB0aGlzLmUgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmUsIDAsIDAsIHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lID0ge1xuICAgICAgICAgIHY6IDEwMFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLm8gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm8gfHwge1xuICAgICAgICBrOiAwXG4gICAgICB9LCAwLCAwLCB0aGlzKTtcbiAgICAgIHRoaXMueGUgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnhlIHx8IHtcbiAgICAgICAgazogMFxuICAgICAgfSwgMCwgMCwgdGhpcyk7XG4gICAgICB0aGlzLm5lID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5uZSB8fCB7XG4gICAgICAgIGs6IDBcbiAgICAgIH0sIDAsIDAsIHRoaXMpO1xuICAgICAgdGhpcy5zbSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuc20gfHwge1xuICAgICAgICBrOiAxMDBcbiAgICAgIH0sIDAsIDAsIHRoaXMpO1xuICAgICAgdGhpcy5hID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5hLCAwLCAwLjAxLCB0aGlzKTtcblxuICAgICAgaWYgKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmdldFZhbHVlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgVGV4dFNlbGVjdG9yUHJvcEZhY3RvcnkucHJvdG90eXBlID0ge1xuICAgICAgZ2V0TXVsdDogZnVuY3Rpb24gZ2V0TXVsdChpbmQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRUZXh0TGVuZ3RoICE9PSB0aGlzLmVsZW0udGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLmwubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHgxID0gMDtcbiAgICAgICAgdmFyIHkxID0gMDtcbiAgICAgICAgdmFyIHgyID0gMTtcbiAgICAgICAgdmFyIHkyID0gMTtcblxuICAgICAgICBpZiAodGhpcy5uZS52ID4gMCkge1xuICAgICAgICAgIHgxID0gdGhpcy5uZS52IC8gMTAwLjA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeTEgPSAtdGhpcy5uZS52IC8gMTAwLjA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy54ZS52ID4gMCkge1xuICAgICAgICAgIHgyID0gMS4wIC0gdGhpcy54ZS52IC8gMTAwLjA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeTIgPSAxLjAgKyB0aGlzLnhlLnYgLyAxMDAuMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlYXNlciA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKHgxLCB5MSwgeDIsIHkyKS5nZXQ7XG4gICAgICAgIHZhciBtdWx0ID0gMDtcbiAgICAgICAgdmFyIHMgPSB0aGlzLmZpbmFsUztcbiAgICAgICAgdmFyIGUgPSB0aGlzLmZpbmFsRTtcbiAgICAgICAgdmFyIHR5cGUgPSB0aGlzLmRhdGEuc2g7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IDIpIHtcbiAgICAgICAgICBpZiAoZSA9PT0gcykge1xuICAgICAgICAgICAgbXVsdCA9IGluZCA+PSBlID8gMSA6IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG11bHQgPSBtYXgoMCwgbWluKDAuNSAvIChlIC0gcykgKyAoaW5kIC0gcykgLyAoZSAtIHMpLCAxKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbXVsdCA9IGVhc2VyKG11bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDMpIHtcbiAgICAgICAgICBpZiAoZSA9PT0gcykge1xuICAgICAgICAgICAgbXVsdCA9IGluZCA+PSBlID8gMCA6IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG11bHQgPSAxIC0gbWF4KDAsIG1pbigwLjUgLyAoZSAtIHMpICsgKGluZCAtIHMpIC8gKGUgLSBzKSwgMSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG11bHQgPSBlYXNlcihtdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSA0KSB7XG4gICAgICAgICAgaWYgKGUgPT09IHMpIHtcbiAgICAgICAgICAgIG11bHQgPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtdWx0ID0gbWF4KDAsIG1pbigwLjUgLyAoZSAtIHMpICsgKGluZCAtIHMpIC8gKGUgLSBzKSwgMSkpO1xuXG4gICAgICAgICAgICBpZiAobXVsdCA8IDAuNSkge1xuICAgICAgICAgICAgICBtdWx0ICo9IDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtdWx0ID0gMSAtIDIgKiAobXVsdCAtIDAuNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbXVsdCA9IGVhc2VyKG11bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDUpIHtcbiAgICAgICAgICBpZiAoZSA9PT0gcykge1xuICAgICAgICAgICAgbXVsdCA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0b3QgPSBlIC0gcztcbiAgICAgICAgICAgIC8qIGluZCArPSAwLjU7XHJcbiAgICAgICAgICAgICAgICAgICAgICBtdWx0ID0gLTQvKHRvdCp0b3QpKihpbmQqaW5kKSsoNC90b3QpKmluZDsgKi9cblxuICAgICAgICAgICAgaW5kID0gbWluKG1heCgwLCBpbmQgKyAwLjUgLSBzKSwgZSAtIHMpO1xuICAgICAgICAgICAgdmFyIHggPSAtdG90IC8gMiArIGluZDtcbiAgICAgICAgICAgIHZhciBhID0gdG90IC8gMjtcbiAgICAgICAgICAgIG11bHQgPSBNYXRoLnNxcnQoMSAtIHggKiB4IC8gKGEgKiBhKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbXVsdCA9IGVhc2VyKG11bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDYpIHtcbiAgICAgICAgICBpZiAoZSA9PT0gcykge1xuICAgICAgICAgICAgbXVsdCA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZCA9IG1pbihtYXgoMCwgaW5kICsgMC41IC0gcyksIGUgLSBzKTtcbiAgICAgICAgICAgIG11bHQgPSAoMSArIE1hdGguY29zKE1hdGguUEkgKyBNYXRoLlBJICogMiAqIGluZCAvIChlIC0gcykpKSAvIDI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtdWx0ID0gZWFzZXIobXVsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGluZCA+PSBmbG9vcihzKSkge1xuICAgICAgICAgICAgaWYgKGluZCAtIHMgPCAwKSB7XG4gICAgICAgICAgICAgIG11bHQgPSBtYXgoMCwgbWluKG1pbihlLCAxKSAtIChzIC0gaW5kKSwgMSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbXVsdCA9IG1heCgwLCBtaW4oZSAtIGluZCwgMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG11bHQgPSBlYXNlcihtdWx0KTtcbiAgICAgICAgfSAvLyBTbW9vdGhuZXNzIGltcGxlbWVudGF0aW9uLlxuICAgICAgICAvLyBUaGUgc21vb3RobmVzcyByZXByZXNlbnRzIGEgcmVkdWNlZCByYW5nZSBvZiB0aGUgb3JpZ2luYWwgWzA7IDFdIHJhbmdlLlxuICAgICAgICAvLyBpZiBzbW9vdGhuZXNzIGlzIDI1JSwgdGhlIG5ldyByYW5nZSB3aWxsIGJlIFswLjM3NTsgMC42MjVdXG4gICAgICAgIC8vIFN0ZXBzIGFyZTpcbiAgICAgICAgLy8gLSBmaW5kIHRoZSBsb3dlciB2YWx1ZSBvZiB0aGUgbmV3IHJhbmdlICh0aHJlc2hvbGQpXG4gICAgICAgIC8vIC0gaWYgbXVsdGlwbGllciBpcyBzbWFsbGVyIHRoYW4gdGhhdCB2YWx1ZSwgZmxvb3IgaXQgdG8gMFxuICAgICAgICAvLyAtIGlmIGl0IGlzIGxhcmdlcixcbiAgICAgICAgLy8gICAgIC0gc3VidHJhY3QgdGhlIHRocmVzaG9sZFxuICAgICAgICAvLyAgICAgLSBkaXZpZGUgaXQgYnkgdGhlIHNtb290aG5lc3MgKHRoaXMgd2lsbCByZXR1cm4gdGhlIHJhbmdlIHRvIFswOyAxXSlcbiAgICAgICAgLy8gTm90ZTogSWYgaXQgZG9lc24ndCB3b3JrIG9uIHNvbWUgc2NlbmFyaW9zLCBjb25zaWRlciBhcHBseWluZyBpdCBiZWZvcmUgdGhlIGVhc2VyLlxuXG5cbiAgICAgICAgaWYgKHRoaXMuc20udiAhPT0gMTAwKSB7XG4gICAgICAgICAgdmFyIHNtb290aG5lc3MgPSB0aGlzLnNtLnYgKiAwLjAxO1xuXG4gICAgICAgICAgaWYgKHNtb290aG5lc3MgPT09IDApIHtcbiAgICAgICAgICAgIHNtb290aG5lc3MgPSAwLjAwMDAwMDAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB0aHJlc2hvbGQgPSAwLjUgLSBzbW9vdGhuZXNzICogMC41O1xuXG4gICAgICAgICAgaWYgKG11bHQgPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgICAgIG11bHQgPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtdWx0ID0gKG11bHQgLSB0aHJlc2hvbGQpIC8gc21vb3RobmVzcztcblxuICAgICAgICAgICAgaWYgKG11bHQgPiAxKSB7XG4gICAgICAgICAgICAgIG11bHQgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtdWx0ICogdGhpcy5hLnY7XG4gICAgICB9LFxuICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKG5ld0NoYXJzRmxhZykge1xuICAgICAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuICAgICAgICB0aGlzLl9tZGYgPSBuZXdDaGFyc0ZsYWcgfHwgdGhpcy5fbWRmO1xuICAgICAgICB0aGlzLl9jdXJyZW50VGV4dExlbmd0aCA9IHRoaXMuZWxlbS50ZXh0UHJvcGVydHkuY3VycmVudERhdGEubC5sZW5ndGggfHwgMDtcblxuICAgICAgICBpZiAobmV3Q2hhcnNGbGFnICYmIHRoaXMuZGF0YS5yID09PSAyKSB7XG4gICAgICAgICAgdGhpcy5lLnYgPSB0aGlzLl9jdXJyZW50VGV4dExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaXZpc29yID0gdGhpcy5kYXRhLnIgPT09IDIgPyAxIDogMTAwIC8gdGhpcy5kYXRhLnRvdGFsQ2hhcnM7XG4gICAgICAgIHZhciBvID0gdGhpcy5vLnYgLyBkaXZpc29yO1xuICAgICAgICB2YXIgcyA9IHRoaXMucy52IC8gZGl2aXNvciArIG87XG4gICAgICAgIHZhciBlID0gdGhpcy5lLnYgLyBkaXZpc29yICsgbztcblxuICAgICAgICBpZiAocyA+IGUpIHtcbiAgICAgICAgICB2YXIgX3MgPSBzO1xuICAgICAgICAgIHMgPSBlO1xuICAgICAgICAgIGUgPSBfcztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmluYWxTID0gcztcbiAgICAgICAgdGhpcy5maW5hbEUgPSBlO1xuICAgICAgfVxuICAgIH07XG4gICAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBUZXh0U2VsZWN0b3JQcm9wRmFjdG9yeSk7XG5cbiAgICBmdW5jdGlvbiBnZXRUZXh0U2VsZWN0b3JQcm9wKGVsZW0sIGRhdGEsIGFycikge1xuICAgICAgcmV0dXJuIG5ldyBUZXh0U2VsZWN0b3JQcm9wRmFjdG9yeShlbGVtLCBkYXRhLCBhcnIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBnZXRUZXh0U2VsZWN0b3JQcm9wOiBnZXRUZXh0U2VsZWN0b3JQcm9wXG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFRleHRBbmltYXRvckRhdGFQcm9wZXJ0eShlbGVtLCBhbmltYXRvclByb3BzLCBjb250YWluZXIpIHtcbiAgICB2YXIgZGVmYXVsdERhdGEgPSB7XG4gICAgICBwcm9wVHlwZTogZmFsc2VcbiAgICB9O1xuICAgIHZhciBnZXRQcm9wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3A7XG4gICAgdmFyIHRleHRBbmltYXRvckFuaW1hdGFibGVzID0gYW5pbWF0b3JQcm9wcy5hO1xuICAgIHRoaXMuYSA9IHtcbiAgICAgIHI6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnIgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnIsIDAsIGRlZ1RvUmFkcywgY29udGFpbmVyKSA6IGRlZmF1bHREYXRhLFxuICAgICAgcng6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnJ4ID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5yeCwgMCwgZGVnVG9SYWRzLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICByeTogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMucnkgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnJ5LCAwLCBkZWdUb1JhZHMsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHNrOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zayA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc2ssIDAsIGRlZ1RvUmFkcywgY29udGFpbmVyKSA6IGRlZmF1bHREYXRhLFxuICAgICAgc2E6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnNhID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zYSwgMCwgZGVnVG9SYWRzLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBzOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zLCAxLCAwLjAxLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBhOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5hID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5hLCAxLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBvOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5vID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5vLCAwLCAwLjAxLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBwOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5wID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5wLCAxLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBzdzogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc3cgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnN3LCAwLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBzYzogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc2MgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnNjLCAxLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBmYzogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmMgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLmZjLCAxLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBmaDogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmggPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLmZoLCAwLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBmczogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZnMgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLmZzLCAwLCAwLjAxLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBmYjogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmIgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLmZiLCAwLCAwLjAxLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICB0OiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy50ID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy50LCAwLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGFcbiAgICB9O1xuICAgIHRoaXMucyA9IFRleHRTZWxlY3RvclByb3AuZ2V0VGV4dFNlbGVjdG9yUHJvcChlbGVtLCBhbmltYXRvclByb3BzLnMsIGNvbnRhaW5lcik7XG4gICAgdGhpcy5zLnQgPSBhbmltYXRvclByb3BzLnMudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRleHRBbmltYXRvclByb3BlcnR5KHRleHREYXRhLCByZW5kZXJUeXBlLCBlbGVtKSB7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB0aGlzLl9oYXNNYXNrZWRQYXRoID0gZmFsc2U7XG4gICAgdGhpcy5fZnJhbWVJZCA9IC0xO1xuICAgIHRoaXMuX3RleHREYXRhID0gdGV4dERhdGE7XG4gICAgdGhpcy5fcmVuZGVyVHlwZSA9IHJlbmRlclR5cGU7XG4gICAgdGhpcy5fZWxlbSA9IGVsZW07XG4gICAgdGhpcy5fYW5pbWF0b3JzRGF0YSA9IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fdGV4dERhdGEuYS5sZW5ndGgpO1xuICAgIHRoaXMuX3BhdGhEYXRhID0ge307XG4gICAgdGhpcy5fbW9yZU9wdGlvbnMgPSB7XG4gICAgICBhbGlnbm1lbnQ6IHt9XG4gICAgfTtcbiAgICB0aGlzLnJlbmRlcmVkTGV0dGVycyA9IFtdO1xuICAgIHRoaXMubGV0dGVyc0NoYW5nZWRGbGFnID0gZmFsc2U7XG4gICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICB9XG5cbiAgVGV4dEFuaW1hdG9yUHJvcGVydHkucHJvdG90eXBlLnNlYXJjaFByb3BlcnRpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuX3RleHREYXRhLmEubGVuZ3RoO1xuICAgIHZhciBhbmltYXRvclByb3BzO1xuICAgIHZhciBnZXRQcm9wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3A7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGFuaW1hdG9yUHJvcHMgPSB0aGlzLl90ZXh0RGF0YS5hW2ldO1xuICAgICAgdGhpcy5fYW5pbWF0b3JzRGF0YVtpXSA9IG5ldyBUZXh0QW5pbWF0b3JEYXRhUHJvcGVydHkodGhpcy5fZWxlbSwgYW5pbWF0b3JQcm9wcywgdGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RleHREYXRhLnAgJiYgJ20nIGluIHRoaXMuX3RleHREYXRhLnApIHtcbiAgICAgIHRoaXMuX3BhdGhEYXRhID0ge1xuICAgICAgICBhOiBnZXRQcm9wKHRoaXMuX2VsZW0sIHRoaXMuX3RleHREYXRhLnAuYSwgMCwgMCwgdGhpcyksXG4gICAgICAgIGY6IGdldFByb3AodGhpcy5fZWxlbSwgdGhpcy5fdGV4dERhdGEucC5mLCAwLCAwLCB0aGlzKSxcbiAgICAgICAgbDogZ2V0UHJvcCh0aGlzLl9lbGVtLCB0aGlzLl90ZXh0RGF0YS5wLmwsIDAsIDAsIHRoaXMpLFxuICAgICAgICByOiBnZXRQcm9wKHRoaXMuX2VsZW0sIHRoaXMuX3RleHREYXRhLnAuciwgMCwgMCwgdGhpcyksXG4gICAgICAgIHA6IGdldFByb3AodGhpcy5fZWxlbSwgdGhpcy5fdGV4dERhdGEucC5wLCAwLCAwLCB0aGlzKSxcbiAgICAgICAgbTogdGhpcy5fZWxlbS5tYXNrTWFuYWdlci5nZXRNYXNrUHJvcGVydHkodGhpcy5fdGV4dERhdGEucC5tKVxuICAgICAgfTtcbiAgICAgIHRoaXMuX2hhc01hc2tlZFBhdGggPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oYXNNYXNrZWRQYXRoID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fbW9yZU9wdGlvbnMuYWxpZ25tZW50ID0gZ2V0UHJvcCh0aGlzLl9lbGVtLCB0aGlzLl90ZXh0RGF0YS5tLmEsIDEsIDAsIHRoaXMpO1xuICB9O1xuXG4gIFRleHRBbmltYXRvclByb3BlcnR5LnByb3RvdHlwZS5nZXRNZWFzdXJlcyA9IGZ1bmN0aW9uIChkb2N1bWVudERhdGEsIGxldHRlcnNDaGFuZ2VkRmxhZykge1xuICAgIHRoaXMubGV0dGVyc0NoYW5nZWRGbGFnID0gbGV0dGVyc0NoYW5nZWRGbGFnO1xuXG4gICAgaWYgKCF0aGlzLl9tZGYgJiYgIXRoaXMuX2lzRmlyc3RGcmFtZSAmJiAhbGV0dGVyc0NoYW5nZWRGbGFnICYmICghdGhpcy5faGFzTWFza2VkUGF0aCB8fCAhdGhpcy5fcGF0aERhdGEubS5fbWRmKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IGZhbHNlO1xuICAgIHZhciBhbGlnbm1lbnQgPSB0aGlzLl9tb3JlT3B0aW9ucy5hbGlnbm1lbnQudjtcbiAgICB2YXIgYW5pbWF0b3JzID0gdGhpcy5fYW5pbWF0b3JzRGF0YTtcbiAgICB2YXIgdGV4dERhdGEgPSB0aGlzLl90ZXh0RGF0YTtcbiAgICB2YXIgbWF0cml4SGVscGVyID0gdGhpcy5tSGVscGVyO1xuICAgIHZhciByZW5kZXJUeXBlID0gdGhpcy5fcmVuZGVyVHlwZTtcbiAgICB2YXIgcmVuZGVyZWRMZXR0ZXJzQ291bnQgPSB0aGlzLnJlbmRlcmVkTGV0dGVycy5sZW5ndGg7XG4gICAgdmFyIHhQb3M7XG4gICAgdmFyIHlQb3M7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcbiAgICB2YXIgbGV0dGVycyA9IGRvY3VtZW50RGF0YS5sO1xuICAgIHZhciBwYXRoSW5mbztcbiAgICB2YXIgY3VycmVudExlbmd0aDtcbiAgICB2YXIgY3VycmVudFBvaW50O1xuICAgIHZhciBzZWdtZW50TGVuZ3RoO1xuICAgIHZhciBmbGFnO1xuICAgIHZhciBwb2ludEluZDtcbiAgICB2YXIgc2VnbWVudEluZDtcbiAgICB2YXIgcHJldlBvaW50O1xuICAgIHZhciBwb2ludHM7XG4gICAgdmFyIHNlZ21lbnRzO1xuICAgIHZhciBwYXJ0aWFsTGVuZ3RoO1xuICAgIHZhciB0b3RhbExlbmd0aDtcbiAgICB2YXIgcGVyYztcbiAgICB2YXIgdGFuQW5nbGU7XG4gICAgdmFyIG1hc2s7XG5cbiAgICBpZiAodGhpcy5faGFzTWFza2VkUGF0aCkge1xuICAgICAgbWFzayA9IHRoaXMuX3BhdGhEYXRhLm07XG5cbiAgICAgIGlmICghdGhpcy5fcGF0aERhdGEubiB8fCB0aGlzLl9wYXRoRGF0YS5fbWRmKSB7XG4gICAgICAgIHZhciBwYXRocyA9IG1hc2sudjtcblxuICAgICAgICBpZiAodGhpcy5fcGF0aERhdGEuci52KSB7XG4gICAgICAgICAgcGF0aHMgPSBwYXRocy5yZXZlcnNlKCk7XG4gICAgICAgIH0gLy8gVE9ETzogcmVsZWFzZSBiZXppZXIgZGF0YSBjYWNoZWQgZnJvbSBwcmV2aW91cyBwYXRoSW5mbzogdGhpcy5fcGF0aERhdGEucGlcblxuXG4gICAgICAgIHBhdGhJbmZvID0ge1xuICAgICAgICAgIHRMZW5ndGg6IDAsXG4gICAgICAgICAgc2VnbWVudHM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIGxlbiA9IHBhdGhzLl9sZW5ndGggLSAxO1xuICAgICAgICB2YXIgYmV6aWVyRGF0YTtcbiAgICAgICAgdG90YWxMZW5ndGggPSAwO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGJlemllckRhdGEgPSBiZXouYnVpbGRCZXppZXJEYXRhKHBhdGhzLnZbaV0sIHBhdGhzLnZbaSArIDFdLCBbcGF0aHMub1tpXVswXSAtIHBhdGhzLnZbaV1bMF0sIHBhdGhzLm9baV1bMV0gLSBwYXRocy52W2ldWzFdXSwgW3BhdGhzLmlbaSArIDFdWzBdIC0gcGF0aHMudltpICsgMV1bMF0sIHBhdGhzLmlbaSArIDFdWzFdIC0gcGF0aHMudltpICsgMV1bMV1dKTtcbiAgICAgICAgICBwYXRoSW5mby50TGVuZ3RoICs9IGJlemllckRhdGEuc2VnbWVudExlbmd0aDtcbiAgICAgICAgICBwYXRoSW5mby5zZWdtZW50cy5wdXNoKGJlemllckRhdGEpO1xuICAgICAgICAgIHRvdGFsTGVuZ3RoICs9IGJlemllckRhdGEuc2VnbWVudExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgPSBsZW47XG5cbiAgICAgICAgaWYgKG1hc2sudi5jKSB7XG4gICAgICAgICAgYmV6aWVyRGF0YSA9IGJlei5idWlsZEJlemllckRhdGEocGF0aHMudltpXSwgcGF0aHMudlswXSwgW3BhdGhzLm9baV1bMF0gLSBwYXRocy52W2ldWzBdLCBwYXRocy5vW2ldWzFdIC0gcGF0aHMudltpXVsxXV0sIFtwYXRocy5pWzBdWzBdIC0gcGF0aHMudlswXVswXSwgcGF0aHMuaVswXVsxXSAtIHBhdGhzLnZbMF1bMV1dKTtcbiAgICAgICAgICBwYXRoSW5mby50TGVuZ3RoICs9IGJlemllckRhdGEuc2VnbWVudExlbmd0aDtcbiAgICAgICAgICBwYXRoSW5mby5zZWdtZW50cy5wdXNoKGJlemllckRhdGEpO1xuICAgICAgICAgIHRvdGFsTGVuZ3RoICs9IGJlemllckRhdGEuc2VnbWVudExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BhdGhEYXRhLnBpID0gcGF0aEluZm87XG4gICAgICB9XG5cbiAgICAgIHBhdGhJbmZvID0gdGhpcy5fcGF0aERhdGEucGk7XG4gICAgICBjdXJyZW50TGVuZ3RoID0gdGhpcy5fcGF0aERhdGEuZi52O1xuICAgICAgc2VnbWVudEluZCA9IDA7XG4gICAgICBwb2ludEluZCA9IDE7XG4gICAgICBzZWdtZW50TGVuZ3RoID0gMDtcbiAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgc2VnbWVudHMgPSBwYXRoSW5mby5zZWdtZW50cztcblxuICAgICAgaWYgKGN1cnJlbnRMZW5ndGggPCAwICYmIG1hc2sudi5jKSB7XG4gICAgICAgIGlmIChwYXRoSW5mby50TGVuZ3RoIDwgTWF0aC5hYnMoY3VycmVudExlbmd0aCkpIHtcbiAgICAgICAgICBjdXJyZW50TGVuZ3RoID0gLU1hdGguYWJzKGN1cnJlbnRMZW5ndGgpICUgcGF0aEluZm8udExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlZ21lbnRJbmQgPSBzZWdtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICBwb2ludHMgPSBzZWdtZW50c1tzZWdtZW50SW5kXS5wb2ludHM7XG4gICAgICAgIHBvaW50SW5kID0gcG9pbnRzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgd2hpbGUgKGN1cnJlbnRMZW5ndGggPCAwKSB7XG4gICAgICAgICAgY3VycmVudExlbmd0aCArPSBwb2ludHNbcG9pbnRJbmRdLnBhcnRpYWxMZW5ndGg7XG4gICAgICAgICAgcG9pbnRJbmQgLT0gMTtcblxuICAgICAgICAgIGlmIChwb2ludEluZCA8IDApIHtcbiAgICAgICAgICAgIHNlZ21lbnRJbmQgLT0gMTtcbiAgICAgICAgICAgIHBvaW50cyA9IHNlZ21lbnRzW3NlZ21lbnRJbmRdLnBvaW50cztcbiAgICAgICAgICAgIHBvaW50SW5kID0gcG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHBvaW50cyA9IHNlZ21lbnRzW3NlZ21lbnRJbmRdLnBvaW50cztcbiAgICAgIHByZXZQb2ludCA9IHBvaW50c1twb2ludEluZCAtIDFdO1xuICAgICAgY3VycmVudFBvaW50ID0gcG9pbnRzW3BvaW50SW5kXTtcbiAgICAgIHBhcnRpYWxMZW5ndGggPSBjdXJyZW50UG9pbnQucGFydGlhbExlbmd0aDtcbiAgICB9XG5cbiAgICBsZW4gPSBsZXR0ZXJzLmxlbmd0aDtcbiAgICB4UG9zID0gMDtcbiAgICB5UG9zID0gMDtcbiAgICB2YXIgeU9mZiA9IGRvY3VtZW50RGF0YS5maW5hbFNpemUgKiAxLjIgKiAwLjcxNDtcbiAgICB2YXIgZmlyc3RMaW5lID0gdHJ1ZTtcbiAgICB2YXIgYW5pbWF0b3JQcm9wcztcbiAgICB2YXIgYW5pbWF0b3JTZWxlY3RvcjtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgbGV0dGVyVmFsdWU7XG4gICAgakxlbiA9IGFuaW1hdG9ycy5sZW5ndGg7XG4gICAgdmFyIG11bHQ7XG4gICAgdmFyIGluZCA9IC0xO1xuICAgIHZhciBvZmZmO1xuICAgIHZhciB4UGF0aFBvcztcbiAgICB2YXIgeVBhdGhQb3M7XG4gICAgdmFyIGluaXRQYXRoUG9zID0gY3VycmVudExlbmd0aDtcbiAgICB2YXIgaW5pdFNlZ21lbnRJbmQgPSBzZWdtZW50SW5kO1xuICAgIHZhciBpbml0UG9pbnRJbmQgPSBwb2ludEluZDtcbiAgICB2YXIgY3VycmVudExpbmUgPSAtMTtcbiAgICB2YXIgZWxlbU9wYWNpdHk7XG4gICAgdmFyIHNjO1xuICAgIHZhciBzdztcbiAgICB2YXIgZmM7XG4gICAgdmFyIGs7XG4gICAgdmFyIGxldHRlclN3O1xuICAgIHZhciBsZXR0ZXJTYztcbiAgICB2YXIgbGV0dGVyRmM7XG4gICAgdmFyIGxldHRlck0gPSAnJztcbiAgICB2YXIgbGV0dGVyUCA9IHRoaXMuZGVmYXVsdFByb3BzQXJyYXk7XG4gICAgdmFyIGxldHRlck87IC8vXG5cbiAgICBpZiAoZG9jdW1lbnREYXRhLmogPT09IDIgfHwgZG9jdW1lbnREYXRhLmogPT09IDEpIHtcbiAgICAgIHZhciBhbmltYXRvckp1c3RpZnlPZmZzZXQgPSAwO1xuICAgICAgdmFyIGFuaW1hdG9yRmlyc3RDaGFyT2Zmc2V0ID0gMDtcbiAgICAgIHZhciBqdXN0aWZ5T2Zmc2V0TXVsdCA9IGRvY3VtZW50RGF0YS5qID09PSAyID8gLTAuNSA6IC0xO1xuICAgICAgdmFyIGxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgaXNOZXdMaW5lID0gdHJ1ZTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmIChsZXR0ZXJzW2ldLm4pIHtcbiAgICAgICAgICBpZiAoYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0KSB7XG4gICAgICAgICAgICBhbmltYXRvckp1c3RpZnlPZmZzZXQgKz0gYW5pbWF0b3JGaXJzdENoYXJPZmZzZXQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgd2hpbGUgKGxhc3RJbmRleCA8IGkpIHtcbiAgICAgICAgICAgIGxldHRlcnNbbGFzdEluZGV4XS5hbmltYXRvckp1c3RpZnlPZmZzZXQgPSBhbmltYXRvckp1c3RpZnlPZmZzZXQ7XG4gICAgICAgICAgICBsYXN0SW5kZXggKz0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhbmltYXRvckp1c3RpZnlPZmZzZXQgPSAwO1xuICAgICAgICAgIGlzTmV3TGluZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgYW5pbWF0b3JQcm9wcyA9IGFuaW1hdG9yc1tqXS5hO1xuXG4gICAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy50LnByb3BUeXBlKSB7XG4gICAgICAgICAgICAgIGlmIChpc05ld0xpbmUgJiYgZG9jdW1lbnREYXRhLmogPT09IDIpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvckZpcnN0Q2hhck9mZnNldCArPSBhbmltYXRvclByb3BzLnQudiAqIGp1c3RpZnlPZmZzZXRNdWx0O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYW5pbWF0b3JTZWxlY3RvciA9IGFuaW1hdG9yc1tqXS5zO1xuICAgICAgICAgICAgICBtdWx0ID0gYW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLCB0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7XG5cbiAgICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0ICs9IGFuaW1hdG9yUHJvcHMudC52ICogbXVsdFswXSAqIGp1c3RpZnlPZmZzZXRNdWx0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1hdG9ySnVzdGlmeU9mZnNldCArPSBhbmltYXRvclByb3BzLnQudiAqIG11bHQgKiBqdXN0aWZ5T2Zmc2V0TXVsdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlzTmV3TGluZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRvckp1c3RpZnlPZmZzZXQpIHtcbiAgICAgICAgYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0ICs9IGFuaW1hdG9yRmlyc3RDaGFyT2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAobGFzdEluZGV4IDwgaSkge1xuICAgICAgICBsZXR0ZXJzW2xhc3RJbmRleF0uYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0ID0gYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0O1xuICAgICAgICBsYXN0SW5kZXggKz0gMTtcbiAgICAgIH1cbiAgICB9IC8vXG5cblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgbWF0cml4SGVscGVyLnJlc2V0KCk7XG4gICAgICBlbGVtT3BhY2l0eSA9IDE7XG5cbiAgICAgIGlmIChsZXR0ZXJzW2ldLm4pIHtcbiAgICAgICAgeFBvcyA9IDA7XG4gICAgICAgIHlQb3MgKz0gZG9jdW1lbnREYXRhLnlPZmZzZXQ7XG4gICAgICAgIHlQb3MgKz0gZmlyc3RMaW5lID8gMSA6IDA7XG4gICAgICAgIGN1cnJlbnRMZW5ndGggPSBpbml0UGF0aFBvcztcbiAgICAgICAgZmlyc3RMaW5lID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHRoaXMuX2hhc01hc2tlZFBhdGgpIHtcbiAgICAgICAgICBzZWdtZW50SW5kID0gaW5pdFNlZ21lbnRJbmQ7XG4gICAgICAgICAgcG9pbnRJbmQgPSBpbml0UG9pbnRJbmQ7XG4gICAgICAgICAgcG9pbnRzID0gc2VnbWVudHNbc2VnbWVudEluZF0ucG9pbnRzO1xuICAgICAgICAgIHByZXZQb2ludCA9IHBvaW50c1twb2ludEluZCAtIDFdO1xuICAgICAgICAgIGN1cnJlbnRQb2ludCA9IHBvaW50c1twb2ludEluZF07XG4gICAgICAgICAgcGFydGlhbExlbmd0aCA9IGN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICAgIHNlZ21lbnRMZW5ndGggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0dGVyTSA9ICcnO1xuICAgICAgICBsZXR0ZXJGYyA9ICcnO1xuICAgICAgICBsZXR0ZXJTdyA9ICcnO1xuICAgICAgICBsZXR0ZXJPID0gJyc7XG4gICAgICAgIGxldHRlclAgPSB0aGlzLmRlZmF1bHRQcm9wc0FycmF5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc01hc2tlZFBhdGgpIHtcbiAgICAgICAgICBpZiAoY3VycmVudExpbmUgIT09IGxldHRlcnNbaV0ubGluZSkge1xuICAgICAgICAgICAgc3dpdGNoIChkb2N1bWVudERhdGEuaikge1xuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSB0b3RhbExlbmd0aCAtIGRvY3VtZW50RGF0YS5saW5lV2lkdGhzW2xldHRlcnNbaV0ubGluZV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggKz0gKHRvdGFsTGVuZ3RoIC0gZG9jdW1lbnREYXRhLmxpbmVXaWR0aHNbbGV0dGVyc1tpXS5saW5lXSkgLyAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRMaW5lID0gbGV0dGVyc1tpXS5saW5lO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbmQgIT09IGxldHRlcnNbaV0uaW5kKSB7XG4gICAgICAgICAgICBpZiAobGV0dGVyc1tpbmRdKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggKz0gbGV0dGVyc1tpbmRdLmV4dHJhO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdXJyZW50TGVuZ3RoICs9IGxldHRlcnNbaV0uYW4gLyAyO1xuICAgICAgICAgICAgaW5kID0gbGV0dGVyc1tpXS5pbmQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudExlbmd0aCArPSBhbGlnbm1lbnRbMF0gKiBsZXR0ZXJzW2ldLmFuICogMC4wMDU7XG4gICAgICAgICAgdmFyIGFuaW1hdG9yT2Zmc2V0ID0gMDtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGFuaW1hdG9yUHJvcHMgPSBhbmltYXRvcnNbal0uYTtcblxuICAgICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMucC5wcm9wVHlwZSkge1xuICAgICAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgICAgIG11bHQgPSBhbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sIHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtcblxuICAgICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvck9mZnNldCArPSBhbmltYXRvclByb3BzLnAudlswXSAqIG11bHRbMF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0b3JPZmZzZXQgKz0gYW5pbWF0b3JQcm9wcy5wLnZbMF0gKiBtdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLmEucHJvcFR5cGUpIHtcbiAgICAgICAgICAgICAgYW5pbWF0b3JTZWxlY3RvciA9IGFuaW1hdG9yc1tqXS5zO1xuICAgICAgICAgICAgICBtdWx0ID0gYW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLCB0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7XG5cbiAgICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0b3JPZmZzZXQgKz0gYW5pbWF0b3JQcm9wcy5hLnZbMF0gKiBtdWx0WzBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1hdG9yT2Zmc2V0ICs9IGFuaW1hdG9yUHJvcHMuYS52WzBdICogbXVsdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZsYWcgPSB0cnVlOyAvLyBGb3JjZSBhbGlnbm1lbnQgb25seSB3b3JrcyB3aXRoIGEgc2luZ2xlIGxpbmUgZm9yIG5vd1xuXG4gICAgICAgICAgaWYgKHRoaXMuX3BhdGhEYXRhLmEudikge1xuICAgICAgICAgICAgY3VycmVudExlbmd0aCA9IGxldHRlcnNbMF0uYW4gKiAwLjUgKyAodG90YWxMZW5ndGggLSB0aGlzLl9wYXRoRGF0YS5mLnYgLSBsZXR0ZXJzWzBdLmFuICogMC41IC0gbGV0dGVyc1tsZXR0ZXJzLmxlbmd0aCAtIDFdLmFuICogMC41KSAqIGluZCAvIChsZW4gLSAxKTtcbiAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggKz0gdGhpcy5fcGF0aERhdGEuZi52O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdoaWxlIChmbGFnKSB7XG4gICAgICAgICAgICBpZiAoc2VnbWVudExlbmd0aCArIHBhcnRpYWxMZW5ndGggPj0gY3VycmVudExlbmd0aCArIGFuaW1hdG9yT2Zmc2V0IHx8ICFwb2ludHMpIHtcbiAgICAgICAgICAgICAgcGVyYyA9IChjdXJyZW50TGVuZ3RoICsgYW5pbWF0b3JPZmZzZXQgLSBzZWdtZW50TGVuZ3RoKSAvIGN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICAgICAgICB4UGF0aFBvcyA9IHByZXZQb2ludC5wb2ludFswXSArIChjdXJyZW50UG9pbnQucG9pbnRbMF0gLSBwcmV2UG9pbnQucG9pbnRbMF0pICogcGVyYztcbiAgICAgICAgICAgICAgeVBhdGhQb3MgPSBwcmV2UG9pbnQucG9pbnRbMV0gKyAoY3VycmVudFBvaW50LnBvaW50WzFdIC0gcHJldlBvaW50LnBvaW50WzFdKSAqIHBlcmM7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoLWFsaWdubWVudFswXSAqIGxldHRlcnNbaV0uYW4gKiAwLjAwNSwgLShhbGlnbm1lbnRbMV0gKiB5T2ZmKSAqIDAuMDEpO1xuICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvaW50cykge1xuICAgICAgICAgICAgICBzZWdtZW50TGVuZ3RoICs9IGN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICAgICAgICBwb2ludEluZCArPSAxO1xuXG4gICAgICAgICAgICAgIGlmIChwb2ludEluZCA+PSBwb2ludHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRJbmQgPSAwO1xuICAgICAgICAgICAgICAgIHNlZ21lbnRJbmQgKz0gMTtcblxuICAgICAgICAgICAgICAgIGlmICghc2VnbWVudHNbc2VnbWVudEluZF0pIHtcbiAgICAgICAgICAgICAgICAgIGlmIChtYXNrLnYuYykge1xuICAgICAgICAgICAgICAgICAgICBwb2ludEluZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRJbmQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSBzZWdtZW50c1tzZWdtZW50SW5kXS5wb2ludHM7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWdtZW50TGVuZ3RoIC09IGN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwb2ludHMgPSBzZWdtZW50c1tzZWdtZW50SW5kXS5wb2ludHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHBvaW50cykge1xuICAgICAgICAgICAgICAgIHByZXZQb2ludCA9IGN1cnJlbnRQb2ludDtcbiAgICAgICAgICAgICAgICBjdXJyZW50UG9pbnQgPSBwb2ludHNbcG9pbnRJbmRdO1xuICAgICAgICAgICAgICAgIHBhcnRpYWxMZW5ndGggPSBjdXJyZW50UG9pbnQucGFydGlhbExlbmd0aDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG9mZmYgPSBsZXR0ZXJzW2ldLmFuIC8gMiAtIGxldHRlcnNbaV0uYWRkO1xuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoLW9mZmYsIDAsIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZmYgPSBsZXR0ZXJzW2ldLmFuIC8gMiAtIGxldHRlcnNbaV0uYWRkO1xuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoLW9mZmYsIDAsIDApOyAvLyBHcm91cGluZyBhbGlnbm1lbnRcblxuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoLWFsaWdubWVudFswXSAqIGxldHRlcnNbaV0uYW4gKiAwLjAwNSwgLWFsaWdubWVudFsxXSAqIHlPZmYgKiAwLjAxLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICBhbmltYXRvclByb3BzID0gYW5pbWF0b3JzW2pdLmE7XG5cbiAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy50LnByb3BUeXBlKSB7XG4gICAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgICBtdWx0ID0gYW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLCB0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7IC8vIFRoaXMgY29uZGl0aW9uIGlzIHRvIHByZXZlbnQgYXBwbHlpbmcgdHJhY2tpbmcgdG8gZmlyc3QgY2hhcmFjdGVyIGluIGVhY2ggbGluZS4gTWlnaHQgYmUgYmV0dGVyIHRvIHVzZSBhIGJvb2xlYW4gXCJpc05ld0xpbmVcIlxuXG4gICAgICAgICAgICBpZiAoeFBvcyAhPT0gMCB8fCBkb2N1bWVudERhdGEuaiAhPT0gMCkge1xuICAgICAgICAgICAgICBpZiAodGhpcy5faGFzTWFza2VkUGF0aCkge1xuICAgICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSBhbmltYXRvclByb3BzLnQudiAqIG11bHRbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggKz0gYW5pbWF0b3JQcm9wcy50LnYgKiBtdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHhQb3MgKz0gYW5pbWF0b3JQcm9wcy50LnYgKiBtdWx0WzBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHhQb3MgKz0gYW5pbWF0b3JQcm9wcy50LnYgKiBtdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5zdHJva2VXaWR0aEFuaW0pIHtcbiAgICAgICAgICBzdyA9IGRvY3VtZW50RGF0YS5zdyB8fCAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5zdHJva2VDb2xvckFuaW0pIHtcbiAgICAgICAgICBpZiAoZG9jdW1lbnREYXRhLnNjKSB7XG4gICAgICAgICAgICBzYyA9IFtkb2N1bWVudERhdGEuc2NbMF0sIGRvY3VtZW50RGF0YS5zY1sxXSwgZG9jdW1lbnREYXRhLnNjWzJdXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2MgPSBbMCwgMCwgMF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5maWxsQ29sb3JBbmltICYmIGRvY3VtZW50RGF0YS5mYykge1xuICAgICAgICAgIGZjID0gW2RvY3VtZW50RGF0YS5mY1swXSwgZG9jdW1lbnREYXRhLmZjWzFdLCBkb2N1bWVudERhdGEuZmNbMl1dO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgIGFuaW1hdG9yUHJvcHMgPSBhbmltYXRvcnNbal0uYTtcblxuICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLmEucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGFuaW1hdG9yU2VsZWN0b3IgPSBhbmltYXRvcnNbal0ucztcbiAgICAgICAgICAgIG11bHQgPSBhbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sIHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtcblxuICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoLWFuaW1hdG9yUHJvcHMuYS52WzBdICogbXVsdFswXSwgLWFuaW1hdG9yUHJvcHMuYS52WzFdICogbXVsdFsxXSwgYW5pbWF0b3JQcm9wcy5hLnZbMl0gKiBtdWx0WzJdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoLWFuaW1hdG9yUHJvcHMuYS52WzBdICogbXVsdCwgLWFuaW1hdG9yUHJvcHMuYS52WzFdICogbXVsdCwgYW5pbWF0b3JQcm9wcy5hLnZbMl0gKiBtdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgYW5pbWF0b3JQcm9wcyA9IGFuaW1hdG9yc1tqXS5hO1xuXG4gICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMucy5wcm9wVHlwZSkge1xuICAgICAgICAgICAgYW5pbWF0b3JTZWxlY3RvciA9IGFuaW1hdG9yc1tqXS5zO1xuICAgICAgICAgICAgbXVsdCA9IGFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSwgdGV4dERhdGEuYVtqXS5zLnRvdGFsQ2hhcnMpO1xuXG4gICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnNjYWxlKDEgKyAoYW5pbWF0b3JQcm9wcy5zLnZbMF0gLSAxKSAqIG11bHRbMF0sIDEgKyAoYW5pbWF0b3JQcm9wcy5zLnZbMV0gLSAxKSAqIG11bHRbMV0sIDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnNjYWxlKDEgKyAoYW5pbWF0b3JQcm9wcy5zLnZbMF0gLSAxKSAqIG11bHQsIDEgKyAoYW5pbWF0b3JQcm9wcy5zLnZbMV0gLSAxKSAqIG11bHQsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICBhbmltYXRvclByb3BzID0gYW5pbWF0b3JzW2pdLmE7XG4gICAgICAgICAgYW5pbWF0b3JTZWxlY3RvciA9IGFuaW1hdG9yc1tqXS5zO1xuICAgICAgICAgIG11bHQgPSBhbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sIHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtcblxuICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLnNrLnByb3BUeXBlKSB7XG4gICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnNrZXdGcm9tQXhpcygtYW5pbWF0b3JQcm9wcy5zay52ICogbXVsdFswXSwgYW5pbWF0b3JQcm9wcy5zYS52ICogbXVsdFsxXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIuc2tld0Zyb21BeGlzKC1hbmltYXRvclByb3BzLnNrLnYgKiBtdWx0LCBhbmltYXRvclByb3BzLnNhLnYgKiBtdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5yLnByb3BUeXBlKSB7XG4gICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnJvdGF0ZVooLWFuaW1hdG9yUHJvcHMuci52ICogbXVsdFsyXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIucm90YXRlWigtYW5pbWF0b3JQcm9wcy5yLnYgKiBtdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5yeS5wcm9wVHlwZSkge1xuICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci5yb3RhdGVZKGFuaW1hdG9yUHJvcHMucnkudiAqIG11bHRbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnJvdGF0ZVkoYW5pbWF0b3JQcm9wcy5yeS52ICogbXVsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMucngucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIucm90YXRlWChhbmltYXRvclByb3BzLnJ4LnYgKiBtdWx0WzBdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci5yb3RhdGVYKGFuaW1hdG9yUHJvcHMucngudiAqIG11bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLm8ucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBlbGVtT3BhY2l0eSArPSAoYW5pbWF0b3JQcm9wcy5vLnYgKiBtdWx0WzBdIC0gZWxlbU9wYWNpdHkpICogbXVsdFswXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVsZW1PcGFjaXR5ICs9IChhbmltYXRvclByb3BzLm8udiAqIG11bHQgLSBlbGVtT3BhY2l0eSkgKiBtdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkb2N1bWVudERhdGEuc3Ryb2tlV2lkdGhBbmltICYmIGFuaW1hdG9yUHJvcHMuc3cucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBzdyArPSBhbmltYXRvclByb3BzLnN3LnYgKiBtdWx0WzBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3cgKz0gYW5pbWF0b3JQcm9wcy5zdy52ICogbXVsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZG9jdW1lbnREYXRhLnN0cm9rZUNvbG9yQW5pbSAmJiBhbmltYXRvclByb3BzLnNjLnByb3BUeXBlKSB7XG4gICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgMzsgayArPSAxKSB7XG4gICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNjW2tdICs9IChhbmltYXRvclByb3BzLnNjLnZba10gLSBzY1trXSkgKiBtdWx0WzBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjW2tdICs9IChhbmltYXRvclByb3BzLnNjLnZba10gLSBzY1trXSkgKiBtdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5maWxsQ29sb3JBbmltICYmIGRvY3VtZW50RGF0YS5mYykge1xuICAgICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMuZmMucHJvcFR5cGUpIHtcbiAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IDM7IGsgKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgZmNba10gKz0gKGFuaW1hdG9yUHJvcHMuZmMudltrXSAtIGZjW2tdKSAqIG11bHRbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZjW2tdICs9IChhbmltYXRvclByb3BzLmZjLnZba10gLSBmY1trXSkgKiBtdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5maC5wcm9wVHlwZSkge1xuICAgICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmYyA9IGFkZEh1ZVRvUkdCKGZjLCBhbmltYXRvclByb3BzLmZoLnYgKiBtdWx0WzBdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmYyA9IGFkZEh1ZVRvUkdCKGZjLCBhbmltYXRvclByb3BzLmZoLnYgKiBtdWx0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5mcy5wcm9wVHlwZSkge1xuICAgICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmYyA9IGFkZFNhdHVyYXRpb25Ub1JHQihmYywgYW5pbWF0b3JQcm9wcy5mcy52ICogbXVsdFswXSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmMgPSBhZGRTYXR1cmF0aW9uVG9SR0IoZmMsIGFuaW1hdG9yUHJvcHMuZnMudiAqIG11bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLmZiLnByb3BUeXBlKSB7XG4gICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZjID0gYWRkQnJpZ2h0bmVzc1RvUkdCKGZjLCBhbmltYXRvclByb3BzLmZiLnYgKiBtdWx0WzBdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmYyA9IGFkZEJyaWdodG5lc3NUb1JHQihmYywgYW5pbWF0b3JQcm9wcy5mYi52ICogbXVsdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgYW5pbWF0b3JQcm9wcyA9IGFuaW1hdG9yc1tqXS5hO1xuXG4gICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMucC5wcm9wVHlwZSkge1xuICAgICAgICAgICAgYW5pbWF0b3JTZWxlY3RvciA9IGFuaW1hdG9yc1tqXS5zO1xuICAgICAgICAgICAgbXVsdCA9IGFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSwgdGV4dERhdGEuYVtqXS5zLnRvdGFsQ2hhcnMpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5faGFzTWFza2VkUGF0aCkge1xuICAgICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsIGFuaW1hdG9yUHJvcHMucC52WzFdICogbXVsdFswXSwgLWFuaW1hdG9yUHJvcHMucC52WzJdICogbXVsdFsxXSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgwLCBhbmltYXRvclByb3BzLnAudlsxXSAqIG11bHQsIC1hbmltYXRvclByb3BzLnAudlsyXSAqIG11bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoYW5pbWF0b3JQcm9wcy5wLnZbMF0gKiBtdWx0WzBdLCBhbmltYXRvclByb3BzLnAudlsxXSAqIG11bHRbMV0sIC1hbmltYXRvclByb3BzLnAudlsyXSAqIG11bHRbMl0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShhbmltYXRvclByb3BzLnAudlswXSAqIG11bHQsIGFuaW1hdG9yUHJvcHMucC52WzFdICogbXVsdCwgLWFuaW1hdG9yUHJvcHMucC52WzJdICogbXVsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5zdHJva2VXaWR0aEFuaW0pIHtcbiAgICAgICAgICBsZXR0ZXJTdyA9IHN3IDwgMCA/IDAgOiBzdztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb2N1bWVudERhdGEuc3Ryb2tlQ29sb3JBbmltKSB7XG4gICAgICAgICAgbGV0dGVyU2MgPSAncmdiKCcgKyBNYXRoLnJvdW5kKHNjWzBdICogMjU1KSArICcsJyArIE1hdGgucm91bmQoc2NbMV0gKiAyNTUpICsgJywnICsgTWF0aC5yb3VuZChzY1syXSAqIDI1NSkgKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9jdW1lbnREYXRhLmZpbGxDb2xvckFuaW0gJiYgZG9jdW1lbnREYXRhLmZjKSB7XG4gICAgICAgICAgbGV0dGVyRmMgPSAncmdiKCcgKyBNYXRoLnJvdW5kKGZjWzBdICogMjU1KSArICcsJyArIE1hdGgucm91bmQoZmNbMV0gKiAyNTUpICsgJywnICsgTWF0aC5yb3VuZChmY1syXSAqIDI1NSkgKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faGFzTWFza2VkUGF0aCkge1xuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoMCwgLWRvY3VtZW50RGF0YS5scyk7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgwLCBhbGlnbm1lbnRbMV0gKiB5T2ZmICogMC4wMSArIHlQb3MsIDApO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX3BhdGhEYXRhLnAudikge1xuICAgICAgICAgICAgdGFuQW5nbGUgPSAoY3VycmVudFBvaW50LnBvaW50WzFdIC0gcHJldlBvaW50LnBvaW50WzFdKSAvIChjdXJyZW50UG9pbnQucG9pbnRbMF0gLSBwcmV2UG9pbnQucG9pbnRbMF0pO1xuICAgICAgICAgICAgdmFyIHJvdCA9IE1hdGguYXRhbih0YW5BbmdsZSkgKiAxODAgLyBNYXRoLlBJO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFBvaW50LnBvaW50WzBdIDwgcHJldlBvaW50LnBvaW50WzBdKSB7XG4gICAgICAgICAgICAgIHJvdCArPSAxODA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1hdHJpeEhlbHBlci5yb3RhdGUoLXJvdCAqIE1hdGguUEkgLyAxODApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoeFBhdGhQb3MsIHlQYXRoUG9zLCAwKTtcbiAgICAgICAgICBjdXJyZW50TGVuZ3RoIC09IGFsaWdubWVudFswXSAqIGxldHRlcnNbaV0uYW4gKiAwLjAwNTtcblxuICAgICAgICAgIGlmIChsZXR0ZXJzW2kgKyAxXSAmJiBpbmQgIT09IGxldHRlcnNbaSArIDFdLmluZCkge1xuICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSBsZXR0ZXJzW2ldLmFuIC8gMjtcbiAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggKz0gZG9jdW1lbnREYXRhLnRyICogMC4wMDEgKiBkb2N1bWVudERhdGEuZmluYWxTaXplO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKHhQb3MsIHlQb3MsIDApO1xuXG4gICAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5wcykge1xuICAgICAgICAgICAgLy8gbWF0cml4SGVscGVyLnRyYW5zbGF0ZShkb2N1bWVudERhdGEucHNbMF0sZG9jdW1lbnREYXRhLnBzWzFdLDApO1xuICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShkb2N1bWVudERhdGEucHNbMF0sIGRvY3VtZW50RGF0YS5wc1sxXSArIGRvY3VtZW50RGF0YS5hc2NlbnQsIDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN3aXRjaCAoZG9jdW1lbnREYXRhLmopIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShsZXR0ZXJzW2ldLmFuaW1hdG9ySnVzdGlmeU9mZnNldCArIGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ICsgKGRvY3VtZW50RGF0YS5ib3hXaWR0aCAtIGRvY3VtZW50RGF0YS5saW5lV2lkdGhzW2xldHRlcnNbaV0ubGluZV0pLCAwLCAwKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShsZXR0ZXJzW2ldLmFuaW1hdG9ySnVzdGlmeU9mZnNldCArIGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ICsgKGRvY3VtZW50RGF0YS5ib3hXaWR0aCAtIGRvY3VtZW50RGF0YS5saW5lV2lkdGhzW2xldHRlcnNbaV0ubGluZV0pIC8gMiwgMCwgMCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsIC1kb2N1bWVudERhdGEubHMpO1xuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUob2ZmZiwgMCwgMCk7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShhbGlnbm1lbnRbMF0gKiBsZXR0ZXJzW2ldLmFuICogMC4wMDUsIGFsaWdubWVudFsxXSAqIHlPZmYgKiAwLjAxLCAwKTtcbiAgICAgICAgICB4UG9zICs9IGxldHRlcnNbaV0ubCArIGRvY3VtZW50RGF0YS50ciAqIDAuMDAxICogZG9jdW1lbnREYXRhLmZpbmFsU2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXJUeXBlID09PSAnaHRtbCcpIHtcbiAgICAgICAgICBsZXR0ZXJNID0gbWF0cml4SGVscGVyLnRvQ1NTKCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVuZGVyVHlwZSA9PT0gJ3N2ZycpIHtcbiAgICAgICAgICBsZXR0ZXJNID0gbWF0cml4SGVscGVyLnRvMmRDU1MoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXR0ZXJQID0gW21hdHJpeEhlbHBlci5wcm9wc1swXSwgbWF0cml4SGVscGVyLnByb3BzWzFdLCBtYXRyaXhIZWxwZXIucHJvcHNbMl0sIG1hdHJpeEhlbHBlci5wcm9wc1szXSwgbWF0cml4SGVscGVyLnByb3BzWzRdLCBtYXRyaXhIZWxwZXIucHJvcHNbNV0sIG1hdHJpeEhlbHBlci5wcm9wc1s2XSwgbWF0cml4SGVscGVyLnByb3BzWzddLCBtYXRyaXhIZWxwZXIucHJvcHNbOF0sIG1hdHJpeEhlbHBlci5wcm9wc1s5XSwgbWF0cml4SGVscGVyLnByb3BzWzEwXSwgbWF0cml4SGVscGVyLnByb3BzWzExXSwgbWF0cml4SGVscGVyLnByb3BzWzEyXSwgbWF0cml4SGVscGVyLnByb3BzWzEzXSwgbWF0cml4SGVscGVyLnByb3BzWzE0XSwgbWF0cml4SGVscGVyLnByb3BzWzE1XV07XG4gICAgICAgIH1cblxuICAgICAgICBsZXR0ZXJPID0gZWxlbU9wYWNpdHk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJlZExldHRlcnNDb3VudCA8PSBpKSB7XG4gICAgICAgIGxldHRlclZhbHVlID0gbmV3IExldHRlclByb3BzKGxldHRlck8sIGxldHRlclN3LCBsZXR0ZXJTYywgbGV0dGVyRmMsIGxldHRlck0sIGxldHRlclApO1xuICAgICAgICB0aGlzLnJlbmRlcmVkTGV0dGVycy5wdXNoKGxldHRlclZhbHVlKTtcbiAgICAgICAgcmVuZGVyZWRMZXR0ZXJzQ291bnQgKz0gMTtcbiAgICAgICAgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0dGVyVmFsdWUgPSB0aGlzLnJlbmRlcmVkTGV0dGVyc1tpXTtcbiAgICAgICAgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgPSBsZXR0ZXJWYWx1ZS51cGRhdGUobGV0dGVyTywgbGV0dGVyU3csIGxldHRlclNjLCBsZXR0ZXJGYywgbGV0dGVyTSwgbGV0dGVyUCkgfHwgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWc7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFRleHRBbmltYXRvclByb3BlcnR5LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgPT09IHRoaXMuX2ZyYW1lSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9mcmFtZUlkID0gdGhpcy5fZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7XG4gICAgdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKTtcbiAgfTtcblxuICBUZXh0QW5pbWF0b3JQcm9wZXJ0eS5wcm90b3R5cGUubUhlbHBlciA9IG5ldyBNYXRyaXgoKTtcbiAgVGV4dEFuaW1hdG9yUHJvcGVydHkucHJvdG90eXBlLmRlZmF1bHRQcm9wc0FycmF5ID0gW107XG4gIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgVGV4dEFuaW1hdG9yUHJvcGVydHkpO1xuXG4gIGZ1bmN0aW9uIElUZXh0RWxlbWVudCgpIHt9XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS5pbml0RWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgPSB0cnVlO1xuICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgdGhpcy5pbml0QmFzZURhdGEoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy50ZXh0UHJvcGVydHkgPSBuZXcgVGV4dFByb3BlcnR5KHRoaXMsIGRhdGEudCwgdGhpcy5keW5hbWljUHJvcGVydGllcyk7XG4gICAgdGhpcy50ZXh0QW5pbWF0b3IgPSBuZXcgVGV4dEFuaW1hdG9yUHJvcGVydHkoZGF0YS50LCB0aGlzLnJlbmRlclR5cGUsIHRoaXMpO1xuICAgIHRoaXMuaW5pdFRyYW5zZm9ybShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLmluaXRIaWVyYXJjaHkoKTtcbiAgICB0aGlzLmluaXRSZW5kZXJhYmxlKCk7XG4gICAgdGhpcy5pbml0UmVuZGVyZXJFbGVtZW50KCk7XG4gICAgdGhpcy5jcmVhdGVDb250YWluZXJFbGVtZW50cygpO1xuICAgIHRoaXMuY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMoKTtcbiAgICB0aGlzLmNyZWF0ZUNvbnRlbnQoKTtcbiAgICB0aGlzLmhpZGUoKTtcbiAgICB0aGlzLnRleHRBbmltYXRvci5zZWFyY2hQcm9wZXJ0aWVzKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMpO1xuICB9O1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIHRoaXMucHJlcGFyZVJlbmRlcmFibGVGcmFtZShudW0pO1xuICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0aGlzLmlzSW5SYW5nZSk7XG4gIH07XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVQYXRoU2hhcGUgPSBmdW5jdGlvbiAobWF0cml4SGVscGVyLCBzaGFwZXMpIHtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbiA9IHNoYXBlcy5sZW5ndGg7XG4gICAgdmFyIHBhdGhOb2RlcztcbiAgICB2YXIgc2hhcGVTdHIgPSAnJztcblxuICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgIGlmIChzaGFwZXNbal0udHkgPT09ICdzaCcpIHtcbiAgICAgICAgcGF0aE5vZGVzID0gc2hhcGVzW2pdLmtzLms7XG4gICAgICAgIHNoYXBlU3RyICs9IGJ1aWxkU2hhcGVTdHJpbmcocGF0aE5vZGVzLCBwYXRoTm9kZXMuaS5sZW5ndGgsIHRydWUsIG1hdHJpeEhlbHBlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoYXBlU3RyO1xuICB9O1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUudXBkYXRlRG9jdW1lbnREYXRhID0gZnVuY3Rpb24gKG5ld0RhdGEsIGluZGV4KSB7XG4gICAgdGhpcy50ZXh0UHJvcGVydHkudXBkYXRlRG9jdW1lbnREYXRhKG5ld0RhdGEsIGluZGV4KTtcbiAgfTtcblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLmNhblJlc2l6ZUZvbnQgPSBmdW5jdGlvbiAoX2NhblJlc2l6ZSkge1xuICAgIHRoaXMudGV4dFByb3BlcnR5LmNhblJlc2l6ZUZvbnQoX2NhblJlc2l6ZSk7XG4gIH07XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS5zZXRNaW5pbXVtRm9udFNpemUgPSBmdW5jdGlvbiAoX2ZvbnRTaXplKSB7XG4gICAgdGhpcy50ZXh0UHJvcGVydHkuc2V0TWluaW11bUZvbnRTaXplKF9mb250U2l6ZSk7XG4gIH07XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS5hcHBseVRleHRQcm9wZXJ0aWVzVG9NYXRyaXggPSBmdW5jdGlvbiAoZG9jdW1lbnREYXRhLCBtYXRyaXhIZWxwZXIsIGxpbmVOdW1iZXIsIHhQb3MsIHlQb3MpIHtcbiAgICBpZiAoZG9jdW1lbnREYXRhLnBzKSB7XG4gICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5wc1swXSwgZG9jdW1lbnREYXRhLnBzWzFdICsgZG9jdW1lbnREYXRhLmFzY2VudCwgMCk7XG4gICAgfVxuXG4gICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgwLCAtZG9jdW1lbnREYXRhLmxzLCAwKTtcblxuICAgIHN3aXRjaCAoZG9jdW1lbnREYXRhLmopIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShkb2N1bWVudERhdGEuanVzdGlmeU9mZnNldCArIChkb2N1bWVudERhdGEuYm94V2lkdGggLSBkb2N1bWVudERhdGEubGluZVdpZHRoc1tsaW5lTnVtYmVyXSksIDAsIDApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ICsgKGRvY3VtZW50RGF0YS5ib3hXaWR0aCAtIGRvY3VtZW50RGF0YS5saW5lV2lkdGhzW2xpbmVOdW1iZXJdKSAvIDIsIDAsIDApO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSh4UG9zLCB5UG9zLCAwKTtcbiAgfTtcblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLmJ1aWxkQ29sb3IgPSBmdW5jdGlvbiAoY29sb3JEYXRhKSB7XG4gICAgcmV0dXJuICdyZ2IoJyArIE1hdGgucm91bmQoY29sb3JEYXRhWzBdICogMjU1KSArICcsJyArIE1hdGgucm91bmQoY29sb3JEYXRhWzFdICogMjU1KSArICcsJyArIE1hdGgucm91bmQoY29sb3JEYXRhWzJdICogMjU1KSArICcpJztcbiAgfTtcblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLmVtcHR5UHJvcCA9IG5ldyBMZXR0ZXJQcm9wcygpO1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUudmFsaWRhdGVUZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnRleHRQcm9wZXJ0eS5fbWRmIHx8IHRoaXMudGV4dFByb3BlcnR5Ll9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHRoaXMuYnVpbGROZXdUZXh0KCk7XG4gICAgICB0aGlzLnRleHRQcm9wZXJ0eS5faXNGaXJzdEZyYW1lID0gZmFsc2U7XG4gICAgICB0aGlzLnRleHRQcm9wZXJ0eS5fbWRmID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHZhciBlbXB0eVNoYXBlRGF0YSA9IHtcbiAgICBzaGFwZXM6IFtdXG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHVGV4dExvdHRpZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMudGV4dFNwYW5zID0gW107XG4gICAgdGhpcy5yZW5kZXJUeXBlID0gJ3N2Zyc7XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIFNWR0Jhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVET01FbGVtZW50LCBJVGV4dEVsZW1lbnRdLCBTVkdUZXh0TG90dGllRWxlbWVudCk7XG5cbiAgU1ZHVGV4dExvdHRpZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5zaW5nbGVTaGFwZSAmJiAhdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmNoYXJzKSB7XG4gICAgICB0aGlzLnRleHRDb250YWluZXIgPSBjcmVhdGVOUygndGV4dCcpO1xuICAgIH1cbiAgfTtcblxuICBTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUuYnVpbGRUZXh0Q29udGVudHMgPSBmdW5jdGlvbiAodGV4dEFycmF5KSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0ZXh0QXJyYXkubGVuZ3RoO1xuICAgIHZhciB0ZXh0Q29udGVudHMgPSBbXTtcbiAgICB2YXIgY3VycmVudFRleHRDb250ZW50ID0gJyc7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgaWYgKHRleHRBcnJheVtpXSA9PT0gU3RyaW5nLmZyb21DaGFyQ29kZSgxMykgfHwgdGV4dEFycmF5W2ldID09PSBTdHJpbmcuZnJvbUNoYXJDb2RlKDMpKSB7XG4gICAgICAgIHRleHRDb250ZW50cy5wdXNoKGN1cnJlbnRUZXh0Q29udGVudCk7XG4gICAgICAgIGN1cnJlbnRUZXh0Q29udGVudCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudFRleHRDb250ZW50ICs9IHRleHRBcnJheVtpXTtcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHRleHRDb250ZW50cy5wdXNoKGN1cnJlbnRUZXh0Q29udGVudCk7XG4gICAgcmV0dXJuIHRleHRDb250ZW50cztcbiAgfTtcblxuICBTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUuYnVpbGRTaGFwZURhdGEgPSBmdW5jdGlvbiAoZGF0YSwgc2NhbGUpIHtcbiAgICAvLyBkYXRhIHNob3VsZCBwcm9iYWJseSBiZSBjbG9uZWQgdG8gYXBwbHkgc2NhbGUgc2VwYXJhdGVseSB0byBlYWNoIGluc3RhbmNlIG9mIGEgdGV4dCBvbiBkaWZmZXJlbnQgbGF5ZXJzXG4gICAgLy8gYnV0IHNpbmNlIHRleHQgaW50ZXJuYWwgY29udGVudCBnZXRzIG9ubHkgcmVuZGVyZWQgb25jZSBhbmQgdGhlbiBpdCdzIG5ldmVyIHJlcmVuZGVyZWQsXG4gICAgLy8gaXQncyBwcm9iYWJseSBzYWZlIG5vdCB0byBjbG9uZSBkYXRhIGFuZCByZXVzZSBhbHdheXMgdGhlIHNhbWUgaW5zdGFuY2UgZXZlbiBpZiB0aGUgb2JqZWN0IGlzIG11dGF0ZWQuXG4gICAgLy8gQXZvaWRpbmcgY2xvbmluZyBpcyBwcmVmZXJyZWQgc2luY2UgY2xvbmluZyBlYWNoIGNoYXJhY3RlciBzaGFwZSBkYXRhIGlzIGV4cGVuc2l2ZVxuICAgIGlmIChkYXRhLnNoYXBlcyAmJiBkYXRhLnNoYXBlcy5sZW5ndGgpIHtcbiAgICAgIHZhciBzaGFwZSA9IGRhdGEuc2hhcGVzWzBdO1xuXG4gICAgICBpZiAoc2hhcGUuaXQpIHtcbiAgICAgICAgdmFyIHNoYXBlSXRlbSA9IHNoYXBlLml0W3NoYXBlLml0Lmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGlmIChzaGFwZUl0ZW0ucykge1xuICAgICAgICAgIHNoYXBlSXRlbS5zLmtbMF0gPSBzY2FsZTtcbiAgICAgICAgICBzaGFwZUl0ZW0ucy5rWzFdID0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICBTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUuYnVpbGROZXdUZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG4gICAgdmFyIGRvY3VtZW50RGF0YSA9IHRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhO1xuICAgIHRoaXMucmVuZGVyZWRMZXR0ZXJzID0gY3JlYXRlU2l6ZWRBcnJheShkb2N1bWVudERhdGEgPyBkb2N1bWVudERhdGEubC5sZW5ndGggOiAwKTtcblxuICAgIGlmIChkb2N1bWVudERhdGEuZmMpIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnZmlsbCcsIHRoaXMuYnVpbGRDb2xvcihkb2N1bWVudERhdGEuZmMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWxsJywgJ3JnYmEoMCwwLDAsMCknKTtcbiAgICB9XG5cbiAgICBpZiAoZG9jdW1lbnREYXRhLnNjKSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIHRoaXMuYnVpbGRDb2xvcihkb2N1bWVudERhdGEuc2MpKTtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgZG9jdW1lbnREYXRhLnN3KTtcbiAgICB9XG5cbiAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc2l6ZScsIGRvY3VtZW50RGF0YS5maW5hbFNpemUpO1xuICAgIHZhciBmb250RGF0YSA9IHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKTtcblxuICAgIGlmIChmb250RGF0YS5mQ2xhc3MpIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBmb250RGF0YS5mQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtZmFtaWx5JywgZm9udERhdGEuZkZhbWlseSk7XG4gICAgICB2YXIgZldlaWdodCA9IGRvY3VtZW50RGF0YS5mV2VpZ2h0O1xuICAgICAgdmFyIGZTdHlsZSA9IGRvY3VtZW50RGF0YS5mU3R5bGU7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc3R5bGUnLCBmU3R5bGUpO1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdmb250LXdlaWdodCcsIGZXZWlnaHQpO1xuICAgIH1cblxuICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGRvY3VtZW50RGF0YS50KTtcbiAgICB2YXIgbGV0dGVycyA9IGRvY3VtZW50RGF0YS5sIHx8IFtdO1xuICAgIHZhciB1c2VzR2x5cGhzID0gISF0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuY2hhcnM7XG4gICAgbGVuID0gbGV0dGVycy5sZW5ndGg7XG4gICAgdmFyIHRTcGFuO1xuICAgIHZhciBtYXRyaXhIZWxwZXIgPSB0aGlzLm1IZWxwZXI7XG4gICAgdmFyIHNoYXBlU3RyID0gJyc7XG4gICAgdmFyIHNpbmdsZVNoYXBlID0gdGhpcy5kYXRhLnNpbmdsZVNoYXBlO1xuICAgIHZhciB4UG9zID0gMDtcbiAgICB2YXIgeVBvcyA9IDA7XG4gICAgdmFyIGZpcnN0TGluZSA9IHRydWU7XG4gICAgdmFyIHRyYWNraW5nT2Zmc2V0ID0gZG9jdW1lbnREYXRhLnRyICogMC4wMDEgKiBkb2N1bWVudERhdGEuZmluYWxTaXplO1xuXG4gICAgaWYgKHNpbmdsZVNoYXBlICYmICF1c2VzR2x5cGhzICYmICFkb2N1bWVudERhdGEuc3opIHtcbiAgICAgIHZhciB0RWxlbWVudCA9IHRoaXMudGV4dENvbnRhaW5lcjtcbiAgICAgIHZhciBqdXN0aWZ5ID0gJ3N0YXJ0JztcblxuICAgICAgc3dpdGNoIChkb2N1bWVudERhdGEuaikge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAganVzdGlmeSA9ICdlbmQnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBqdXN0aWZ5ID0gJ21pZGRsZSc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBqdXN0aWZ5ID0gJ3N0YXJ0JztcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdEVsZW1lbnQuc2V0QXR0cmlidXRlKCd0ZXh0LWFuY2hvcicsIGp1c3RpZnkpO1xuICAgICAgdEVsZW1lbnQuc2V0QXR0cmlidXRlKCdsZXR0ZXItc3BhY2luZycsIHRyYWNraW5nT2Zmc2V0KTtcbiAgICAgIHZhciB0ZXh0Q29udGVudCA9IHRoaXMuYnVpbGRUZXh0Q29udGVudHMoZG9jdW1lbnREYXRhLmZpbmFsVGV4dCk7XG4gICAgICBsZW4gPSB0ZXh0Q29udGVudC5sZW5ndGg7XG4gICAgICB5UG9zID0gZG9jdW1lbnREYXRhLnBzID8gZG9jdW1lbnREYXRhLnBzWzFdICsgZG9jdW1lbnREYXRhLmFzY2VudCA6IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0U3BhbiA9IHRoaXMudGV4dFNwYW5zW2ldLnNwYW4gfHwgY3JlYXRlTlMoJ3RzcGFuJyk7XG4gICAgICAgIHRTcGFuLnRleHRDb250ZW50ID0gdGV4dENvbnRlbnRbaV07XG4gICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgneCcsIDApO1xuICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3knLCB5UG9zKTtcbiAgICAgICAgdFNwYW4uc3R5bGUuZGlzcGxheSA9ICdpbmhlcml0JztcbiAgICAgICAgdEVsZW1lbnQuYXBwZW5kQ2hpbGQodFNwYW4pO1xuXG4gICAgICAgIGlmICghdGhpcy50ZXh0U3BhbnNbaV0pIHtcbiAgICAgICAgICB0aGlzLnRleHRTcGFuc1tpXSA9IHtcbiAgICAgICAgICAgIHNwYW46IG51bGwsXG4gICAgICAgICAgICBnbHlwaDogbnVsbFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRleHRTcGFuc1tpXS5zcGFuID0gdFNwYW47XG4gICAgICAgIHlQb3MgKz0gZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQodEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2FjaGVkU3BhbnNMZW5ndGggPSB0aGlzLnRleHRTcGFucy5sZW5ndGg7XG4gICAgICB2YXIgY2hhckRhdGE7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoIXRoaXMudGV4dFNwYW5zW2ldKSB7XG4gICAgICAgICAgdGhpcy50ZXh0U3BhbnNbaV0gPSB7XG4gICAgICAgICAgICBzcGFuOiBudWxsLFxuICAgICAgICAgICAgY2hpbGRTcGFuOiBudWxsLFxuICAgICAgICAgICAgZ2x5cGg6IG51bGxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1c2VzR2x5cGhzIHx8ICFzaW5nbGVTaGFwZSB8fCBpID09PSAwKSB7XG4gICAgICAgICAgdFNwYW4gPSBjYWNoZWRTcGFuc0xlbmd0aCA+IGkgPyB0aGlzLnRleHRTcGFuc1tpXS5zcGFuIDogY3JlYXRlTlModXNlc0dseXBocyA/ICdnJyA6ICd0ZXh0Jyk7XG5cbiAgICAgICAgICBpZiAoY2FjaGVkU3BhbnNMZW5ndGggPD0gaSkge1xuICAgICAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsICdidXR0Jyk7XG4gICAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lam9pbicsICdyb3VuZCcpO1xuICAgICAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2UtbWl0ZXJsaW1pdCcsICc0Jyk7XG4gICAgICAgICAgICB0aGlzLnRleHRTcGFuc1tpXS5zcGFuID0gdFNwYW47XG5cbiAgICAgICAgICAgIGlmICh1c2VzR2x5cGhzKSB7XG4gICAgICAgICAgICAgIHZhciBjaGlsZFNwYW4gPSBjcmVhdGVOUygnZycpO1xuICAgICAgICAgICAgICB0U3Bhbi5hcHBlbmRDaGlsZChjaGlsZFNwYW4pO1xuICAgICAgICAgICAgICB0aGlzLnRleHRTcGFuc1tpXS5jaGlsZFNwYW4gPSBjaGlsZFNwYW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudGV4dFNwYW5zW2ldLnNwYW4gPSB0U3BhbjtcbiAgICAgICAgICAgIHRoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKHRTcGFuKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0U3Bhbi5zdHlsZS5kaXNwbGF5ID0gJ2luaGVyaXQnO1xuICAgICAgICB9XG5cbiAgICAgICAgbWF0cml4SGVscGVyLnJlc2V0KCk7XG5cbiAgICAgICAgaWYgKHNpbmdsZVNoYXBlKSB7XG4gICAgICAgICAgaWYgKGxldHRlcnNbaV0ubikge1xuICAgICAgICAgICAgeFBvcyA9IC10cmFja2luZ09mZnNldDtcbiAgICAgICAgICAgIHlQb3MgKz0gZG9jdW1lbnREYXRhLnlPZmZzZXQ7XG4gICAgICAgICAgICB5UG9zICs9IGZpcnN0TGluZSA/IDEgOiAwO1xuICAgICAgICAgICAgZmlyc3RMaW5lID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5hcHBseVRleHRQcm9wZXJ0aWVzVG9NYXRyaXgoZG9jdW1lbnREYXRhLCBtYXRyaXhIZWxwZXIsIGxldHRlcnNbaV0ubGluZSwgeFBvcywgeVBvcyk7XG4gICAgICAgICAgeFBvcyArPSBsZXR0ZXJzW2ldLmwgfHwgMDsgLy8geFBvcyArPSBsZXR0ZXJzW2ldLnZhbCA9PT0gJyAnID8gMCA6IHRyYWNraW5nT2Zmc2V0O1xuXG4gICAgICAgICAgeFBvcyArPSB0cmFja2luZ09mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VzR2x5cGhzKSB7XG4gICAgICAgICAgY2hhckRhdGEgPSB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Q2hhckRhdGEoZG9jdW1lbnREYXRhLmZpbmFsVGV4dFtpXSwgZm9udERhdGEuZlN0eWxlLCB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Rm9udEJ5TmFtZShkb2N1bWVudERhdGEuZikuZkZhbWlseSk7XG4gICAgICAgICAgdmFyIGdseXBoRWxlbWVudDsgLy8gdCA9PT0gMSBtZWFucyB0aGUgY2hhcmFjdGVyIGhhcyBiZWVuIHJlcGxhY2VkIHdpdGggYW4gYW5pbWF0ZWQgc2hhcGVkXG5cbiAgICAgICAgICBpZiAoY2hhckRhdGEudCA9PT0gMSkge1xuICAgICAgICAgICAgZ2x5cGhFbGVtZW50ID0gbmV3IFNWR0NvbXBFbGVtZW50KGNoYXJEYXRhLmRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gZW1wdHlTaGFwZURhdGE7XG5cbiAgICAgICAgICAgIGlmIChjaGFyRGF0YS5kYXRhICYmIGNoYXJEYXRhLmRhdGEuc2hhcGVzKSB7XG4gICAgICAgICAgICAgIGRhdGEgPSB0aGlzLmJ1aWxkU2hhcGVEYXRhKGNoYXJEYXRhLmRhdGEsIGRvY3VtZW50RGF0YS5maW5hbFNpemUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnbHlwaEVsZW1lbnQgPSBuZXcgU1ZHU2hhcGVFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMudGV4dFNwYW5zW2ldLmdseXBoKSB7XG4gICAgICAgICAgICB2YXIgZ2x5cGggPSB0aGlzLnRleHRTcGFuc1tpXS5nbHlwaDtcbiAgICAgICAgICAgIHRoaXMudGV4dFNwYW5zW2ldLmNoaWxkU3Bhbi5yZW1vdmVDaGlsZChnbHlwaC5sYXllckVsZW1lbnQpO1xuICAgICAgICAgICAgZ2x5cGguZGVzdHJveSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMudGV4dFNwYW5zW2ldLmdseXBoID0gZ2x5cGhFbGVtZW50O1xuICAgICAgICAgIGdseXBoRWxlbWVudC5fZGVidWcgPSB0cnVlO1xuICAgICAgICAgIGdseXBoRWxlbWVudC5wcmVwYXJlRnJhbWUoMCk7XG4gICAgICAgICAgZ2x5cGhFbGVtZW50LnJlbmRlckZyYW1lKCk7XG4gICAgICAgICAgdGhpcy50ZXh0U3BhbnNbaV0uY2hpbGRTcGFuLmFwcGVuZENoaWxkKGdseXBoRWxlbWVudC5sYXllckVsZW1lbnQpOyAvLyB3aGVuIHVzaW5nIGFuaW1hdGVkIHNoYXBlcywgdGhlIGxheWVyIHdpbGwgYmUgc2NhbGVkIGluc3RlYWQgb2YgcmVwbGFjaW5nIHRoZSBpbnRlcm5hbCBzY2FsZVxuICAgICAgICAgIC8vIHRoaXMgbWlnaHQgaGF2ZSBpc3N1ZXMgd2l0aCBzdHJva2VzIGFuZCBtaWdodCBuZWVkIGEgZGlmZmVyZW50IHNvbHV0aW9uXG5cbiAgICAgICAgICBpZiAoY2hhckRhdGEudCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0U3BhbnNbaV0uY2hpbGRTcGFuLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3NjYWxlKCcgKyBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwICsgJywnICsgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMCArICcpJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzaW5nbGVTaGFwZSkge1xuICAgICAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBtYXRyaXhIZWxwZXIucHJvcHNbMTJdICsgJywnICsgbWF0cml4SGVscGVyLnByb3BzWzEzXSArICcpJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdFNwYW4udGV4dENvbnRlbnQgPSBsZXR0ZXJzW2ldLnZhbDtcbiAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJywgJ3htbDpzcGFjZScsICdwcmVzZXJ2ZScpO1xuICAgICAgICB9IC8vXG5cbiAgICAgIH1cblxuICAgICAgaWYgKHNpbmdsZVNoYXBlICYmIHRTcGFuKSB7XG4gICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgnZCcsIHNoYXBlU3RyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aGlsZSAoaSA8IHRoaXMudGV4dFNwYW5zLmxlbmd0aCkge1xuICAgICAgdGhpcy50ZXh0U3BhbnNbaV0uc3Bhbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHRoaXMuX3NpemVDaGFuZ2VkID0gdHJ1ZTtcbiAgfTtcblxuICBTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUuc291cmNlUmVjdEF0VGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnByZXBhcmVGcmFtZSh0aGlzLmNvbXAucmVuZGVyZWRGcmFtZSAtIHRoaXMuZGF0YS5zdCk7XG4gICAgdGhpcy5yZW5kZXJJbm5lckNvbnRlbnQoKTtcblxuICAgIGlmICh0aGlzLl9zaXplQ2hhbmdlZCkge1xuICAgICAgdGhpcy5fc2l6ZUNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHZhciB0ZXh0Qm94ID0gdGhpcy5sYXllckVsZW1lbnQuZ2V0QkJveCgpO1xuICAgICAgdGhpcy5iYm94ID0ge1xuICAgICAgICB0b3A6IHRleHRCb3gueSxcbiAgICAgICAgbGVmdDogdGV4dEJveC54LFxuICAgICAgICB3aWR0aDogdGV4dEJveC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiB0ZXh0Qm94LmhlaWdodFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5iYm94O1xuICB9O1xuXG4gIFNWR1RleHRMb3R0aWVFbGVtZW50LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy50ZXh0U3BhbnMubGVuZ3RoO1xuICAgIHZhciBnbHlwaEVsZW1lbnQ7XG4gICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gdGhpcy5jb21wLnJlbmRlcmVkRnJhbWU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGdseXBoRWxlbWVudCA9IHRoaXMudGV4dFNwYW5zW2ldLmdseXBoO1xuXG4gICAgICBpZiAoZ2x5cGhFbGVtZW50KSB7XG4gICAgICAgIGdseXBoRWxlbWVudC5wcmVwYXJlRnJhbWUodGhpcy5jb21wLnJlbmRlcmVkRnJhbWUgLSB0aGlzLmRhdGEuc3QpO1xuXG4gICAgICAgIGlmIChnbHlwaEVsZW1lbnQuX21kZikge1xuICAgICAgICAgIHRoaXMuX21kZiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHVGV4dExvdHRpZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnZhbGlkYXRlVGV4dCgpO1xuXG4gICAgaWYgKCF0aGlzLmRhdGEuc2luZ2xlU2hhcGUgfHwgdGhpcy5fbWRmKSB7XG4gICAgICB0aGlzLnRleHRBbmltYXRvci5nZXRNZWFzdXJlcyh0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YSwgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcpO1xuXG4gICAgICBpZiAodGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgfHwgdGhpcy50ZXh0QW5pbWF0b3IubGV0dGVyc0NoYW5nZWRGbGFnKSB7XG4gICAgICAgIHRoaXMuX3NpemVDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW47XG4gICAgICAgIHZhciByZW5kZXJlZExldHRlcnMgPSB0aGlzLnRleHRBbmltYXRvci5yZW5kZXJlZExldHRlcnM7XG4gICAgICAgIHZhciBsZXR0ZXJzID0gdGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGEubDtcbiAgICAgICAgbGVuID0gbGV0dGVycy5sZW5ndGg7XG4gICAgICAgIHZhciByZW5kZXJlZExldHRlcjtcbiAgICAgICAgdmFyIHRleHRTcGFuO1xuICAgICAgICB2YXIgZ2x5cGhFbGVtZW50O1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGlmICghbGV0dGVyc1tpXS5uKSB7XG4gICAgICAgICAgICByZW5kZXJlZExldHRlciA9IHJlbmRlcmVkTGV0dGVyc1tpXTtcbiAgICAgICAgICAgIHRleHRTcGFuID0gdGhpcy50ZXh0U3BhbnNbaV0uc3BhbjtcbiAgICAgICAgICAgIGdseXBoRWxlbWVudCA9IHRoaXMudGV4dFNwYW5zW2ldLmdseXBoO1xuXG4gICAgICAgICAgICBpZiAoZ2x5cGhFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGdseXBoRWxlbWVudC5yZW5kZXJGcmFtZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIuX21kZi5tKSB7XG4gICAgICAgICAgICAgIHRleHRTcGFuLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgcmVuZGVyZWRMZXR0ZXIubSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJlZExldHRlci5fbWRmLm8pIHtcbiAgICAgICAgICAgICAgdGV4dFNwYW4uc2V0QXR0cmlidXRlKCdvcGFjaXR5JywgcmVuZGVyZWRMZXR0ZXIubyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJlZExldHRlci5fbWRmLnN3KSB7XG4gICAgICAgICAgICAgIHRleHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgcmVuZGVyZWRMZXR0ZXIuc3cpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIuX21kZi5zYykge1xuICAgICAgICAgICAgICB0ZXh0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIHJlbmRlcmVkTGV0dGVyLnNjKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyLl9tZGYuZmMpIHtcbiAgICAgICAgICAgICAgdGV4dFNwYW4uc2V0QXR0cmlidXRlKCdmaWxsJywgcmVuZGVyZWRMZXR0ZXIuZmMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBJU29saWRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtJSW1hZ2VFbGVtZW50XSwgSVNvbGlkRWxlbWVudCk7XG5cbiAgSVNvbGlkRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVjdCA9IGNyZWF0ZU5TKCdyZWN0Jyk7IC8vLyAvcmVjdC5zdHlsZS53aWR0aCA9IHRoaXMuZGF0YS5zdztcbiAgICAvLy8gL3JlY3Quc3R5bGUuaGVpZ2h0ID0gdGhpcy5kYXRhLnNoO1xuICAgIC8vLyAvcmVjdC5zdHlsZS5maWxsID0gdGhpcy5kYXRhLnNjO1xuXG4gICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5kYXRhLnN3KTtcbiAgICByZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5kYXRhLnNoKTtcbiAgICByZWN0LnNldEF0dHJpYnV0ZSgnZmlsbCcsIHRoaXMuZGF0YS5zYyk7XG4gICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQocmVjdCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTnVsbEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgdGhpcy5pbml0QmFzZURhdGEoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICB0aGlzLmluaXRUcmFuc2Zvcm0oZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy5pbml0SGllcmFyY2h5KCk7XG4gIH1cblxuICBOdWxsRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0cnVlKTtcbiAgfTtcblxuICBOdWxsRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBOdWxsRWxlbWVudC5wcm90b3R5cGUuZ2V0QmFzZUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgTnVsbEVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBOdWxsRWxlbWVudC5wcm90b3R5cGUuc291cmNlUmVjdEF0VGltZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIE51bGxFbGVtZW50LnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge307XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50XSwgTnVsbEVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIFNWR1JlbmRlcmVyQmFzZSgpIHt9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlUmVuZGVyZXJdLCBTVkdSZW5kZXJlckJhc2UpO1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlTnVsbCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBOdWxsRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlU2hhcGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgU1ZHU2hhcGVFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFNWR1RleHRMb3R0aWVFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVJbWFnZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBJSW1hZ2VFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVTb2xpZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBJU29saWRFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jb25maWdBbmltYXRpb24gPSBmdW5jdGlvbiAoYW5pbURhdGEpIHtcbiAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd4bWxucycsICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3htbG5zOnhsaW5rJywgJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnKTtcblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy52aWV3Qm94U2l6ZSkge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgndmlld0JveCcsIHRoaXMucmVuZGVyQ29uZmlnLnZpZXdCb3hTaXplKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgJyArIGFuaW1EYXRhLncgKyAnICcgKyBhbmltRGF0YS5oKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucmVuZGVyQ29uZmlnLnZpZXdCb3hPbmx5KSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIGFuaW1EYXRhLncpO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgYW5pbURhdGEuaCk7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwLDAsMCknO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnN0eWxlLmNvbnRlbnRWaXNpYmlsaXR5ID0gdGhpcy5yZW5kZXJDb25maWcuY29udGVudFZpc2liaWxpdHk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLndpZHRoKSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMucmVuZGVyQ29uZmlnLndpZHRoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuaGVpZ2h0KSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLnJlbmRlckNvbmZpZy5oZWlnaHQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdGhpcy5yZW5kZXJDb25maWcuY2xhc3NOYW1lKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuaWQpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5yZW5kZXJDb25maWcuaWQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5mb2N1c2FibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9jdXNhYmxlJywgdGhpcy5yZW5kZXJDb25maWcuZm9jdXNhYmxlKTtcbiAgICB9XG5cbiAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgdGhpcy5yZW5kZXJDb25maWcucHJlc2VydmVBc3BlY3RSYXRpbyk7IC8vIHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwLDAsMCknO1xuICAgIC8vIHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLm1velRyYW5zZm9ybU9yaWdpbiA9IHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLndlYmtpdFRyYW5zZm9ybU9yaWdpbiA9IHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlWyctd2Via2l0LXRyYW5zZm9ybSddID0gXCIwcHggMHB4IDBweFwiO1xuXG4gICAgdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5zdmdFbGVtZW50KTsgLy8gTWFzayBhbmltYXRpb25cblxuICAgIHZhciBkZWZzID0gdGhpcy5nbG9iYWxEYXRhLmRlZnM7XG4gICAgdGhpcy5zZXR1cEdsb2JhbERhdGEoYW5pbURhdGEsIGRlZnMpO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5wcm9ncmVzc2l2ZUxvYWQgPSB0aGlzLnJlbmRlckNvbmZpZy5wcm9ncmVzc2l2ZUxvYWQ7XG4gICAgdGhpcy5kYXRhID0gYW5pbURhdGE7XG4gICAgdmFyIG1hc2tFbGVtZW50ID0gY3JlYXRlTlMoJ2NsaXBQYXRoJyk7XG4gICAgdmFyIHJlY3QgPSBjcmVhdGVOUygncmVjdCcpO1xuICAgIHJlY3Quc2V0QXR0cmlidXRlKCd3aWR0aCcsIGFuaW1EYXRhLncpO1xuICAgIHJlY3Quc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBhbmltRGF0YS5oKTtcbiAgICByZWN0LnNldEF0dHJpYnV0ZSgneCcsIDApO1xuICAgIHJlY3Quc2V0QXR0cmlidXRlKCd5JywgMCk7XG4gICAgdmFyIG1hc2tJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgIG1hc2tFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCBtYXNrSWQpO1xuICAgIG1hc2tFbGVtZW50LmFwcGVuZENoaWxkKHJlY3QpO1xuICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xpcC1wYXRoJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBtYXNrSWQgKyAnKScpO1xuICAgIGRlZnMuYXBwZW5kQ2hpbGQobWFza0VsZW1lbnQpO1xuICAgIHRoaXMubGF5ZXJzID0gYW5pbURhdGEubGF5ZXJzO1xuICAgIHRoaXMuZWxlbWVudHMgPSBjcmVhdGVTaXplZEFycmF5KGFuaW1EYXRhLmxheWVycy5sZW5ndGgpO1xuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyLmlubmVyVGV4dCA9ICcnO1xuICAgIH1cblxuICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLmdsb2JhbERhdGEuZGVmcyA9IG51bGw7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzID8gdGhpcy5sYXllcnMubGVuZ3RoIDogMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0gJiYgdGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0uZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtID0gbnVsbDtcbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLnVwZGF0ZUNvbnRhaW5lclNpemUgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLmZpbmRJbmRleEJ5SW5kID0gZnVuY3Rpb24gKGluZCkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5sYXllcnNbaV0uaW5kID09PSBpbmQpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuYnVpbGRJdGVtID0gZnVuY3Rpb24gKHBvcykge1xuICAgIHZhciBlbGVtZW50cyA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBpZiAoZWxlbWVudHNbcG9zXSB8fCB0aGlzLmxheWVyc1twb3NdLnR5ID09PSA5OSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVsZW1lbnRzW3Bvc10gPSB0cnVlO1xuICAgIHZhciBlbGVtZW50ID0gdGhpcy5jcmVhdGVJdGVtKHRoaXMubGF5ZXJzW3Bvc10pO1xuICAgIGVsZW1lbnRzW3Bvc10gPSBlbGVtZW50O1xuXG4gICAgaWYgKGdldEV4cHJlc3Npb25zUGx1Z2luKCkpIHtcbiAgICAgIGlmICh0aGlzLmxheWVyc1twb3NdLnR5ID09PSAwKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlLnJlZ2lzdGVyQ29tcG9zaXRpb24oZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuaW5pdEV4cHJlc3Npb25zKCk7XG4gICAgfVxuXG4gICAgdGhpcy5hcHBlbmRFbGVtZW50SW5Qb3MoZWxlbWVudCwgcG9zKTtcblxuICAgIGlmICh0aGlzLmxheWVyc1twb3NdLnR0KSB7XG4gICAgICB2YXIgZWxlbWVudEluZGV4ID0gJ3RwJyBpbiB0aGlzLmxheWVyc1twb3NdID8gdGhpcy5maW5kSW5kZXhCeUluZCh0aGlzLmxheWVyc1twb3NdLnRwKSA6IHBvcyAtIDE7XG5cbiAgICAgIGlmIChlbGVtZW50SW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmVsZW1lbnRzW2VsZW1lbnRJbmRleF0gfHwgdGhpcy5lbGVtZW50c1tlbGVtZW50SW5kZXhdID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuYnVpbGRJdGVtKGVsZW1lbnRJbmRleCk7XG4gICAgICAgIHRoaXMuYWRkUGVuZGluZ0VsZW1lbnQoZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF0dGVFbGVtZW50ID0gZWxlbWVudHNbZWxlbWVudEluZGV4XTtcbiAgICAgICAgdmFyIG1hdHRlTWFzayA9IG1hdHRlRWxlbWVudC5nZXRNYXR0ZSh0aGlzLmxheWVyc1twb3NdLnR0KTtcbiAgICAgICAgZWxlbWVudC5zZXRNYXR0ZShtYXR0ZU1hc2spO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLmNoZWNrUGVuZGluZ0VsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHdoaWxlICh0aGlzLnBlbmRpbmdFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5wZW5kaW5nRWxlbWVudHMucG9wKCk7XG4gICAgICBlbGVtZW50LmNoZWNrUGFyZW50aW5nKCk7XG5cbiAgICAgIGlmIChlbGVtZW50LmRhdGEudHQpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAodGhpcy5lbGVtZW50c1tpXSA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRJbmRleCA9ICd0cCcgaW4gZWxlbWVudC5kYXRhID8gdGhpcy5maW5kSW5kZXhCeUluZChlbGVtZW50LmRhdGEudHApIDogaSAtIDE7XG4gICAgICAgICAgICB2YXIgbWF0dGVFbGVtZW50ID0gdGhpcy5lbGVtZW50c1tlbGVtZW50SW5kZXhdO1xuICAgICAgICAgICAgdmFyIG1hdHRlTWFzayA9IG1hdHRlRWxlbWVudC5nZXRNYXR0ZSh0aGlzLmxheWVyc1tpXS50dCk7XG4gICAgICAgICAgICBlbGVtZW50LnNldE1hdHRlKG1hdHRlTWFzayk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICBpZiAodGhpcy5yZW5kZXJlZEZyYW1lID09PSBudW0gfHwgdGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobnVtID09PSBudWxsKSB7XG4gICAgICBudW0gPSB0aGlzLnJlbmRlcmVkRnJhbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IG51bTtcbiAgICB9IC8vIGNvbnNvbGUubG9nKCctLS0tLS0tJyk7XG4gICAgLy8gY29uc29sZS5sb2coJ0ZSQU1FICcsbnVtKTtcblxuXG4gICAgdGhpcy5nbG9iYWxEYXRhLmZyYW1lTnVtID0gbnVtO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5mcmFtZUlkICs9IDE7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UuY3VycmVudEZyYW1lID0gbnVtO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5fbWRmID0gZmFsc2U7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcblxuICAgIGlmICghdGhpcy5jb21wbGV0ZUxheWVycykge1xuICAgICAgdGhpcy5jaGVja0xheWVycyhudW0pO1xuICAgIH1cblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucHJlcGFyZUZyYW1lKG51bSAtIHRoaXMubGF5ZXJzW2ldLnN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5nbG9iYWxEYXRhLl9tZGYpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5yZW5kZXJGcmFtZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuYXBwZW5kRWxlbWVudEluUG9zID0gZnVuY3Rpb24gKGVsZW1lbnQsIHBvcykge1xuICAgIHZhciBuZXdFbGVtZW50ID0gZWxlbWVudC5nZXRCYXNlRWxlbWVudCgpO1xuXG4gICAgaWYgKCFuZXdFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBuZXh0RWxlbWVudDtcblxuICAgIHdoaWxlIChpIDwgcG9zKSB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50c1tpXSAmJiB0aGlzLmVsZW1lbnRzW2ldICE9PSB0cnVlICYmIHRoaXMuZWxlbWVudHNbaV0uZ2V0QmFzZUVsZW1lbnQoKSkge1xuICAgICAgICBuZXh0RWxlbWVudCA9IHRoaXMuZWxlbWVudHNbaV0uZ2V0QmFzZUVsZW1lbnQoKTtcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIGlmIChuZXh0RWxlbWVudCkge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuaW5zZXJ0QmVmb3JlKG5ld0VsZW1lbnQsIG5leHRFbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3RWxlbWVudCk7XG4gICAgfVxuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxheWVyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxheWVyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgfTtcblxuICBmdW5jdGlvbiBJQ29tcEVsZW1lbnQoKSB7fVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnRdLCBJQ29tcEVsZW1lbnQpO1xuXG4gIElDb21wRWxlbWVudC5wcm90b3R5cGUuaW5pdEVsZW1lbnQgPSBmdW5jdGlvbiAoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgdGhpcy5pbml0QmFzZURhdGEoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy5pbml0VHJhbnNmb3JtKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMuaW5pdFJlbmRlcmFibGUoKTtcbiAgICB0aGlzLmluaXRIaWVyYXJjaHkoKTtcbiAgICB0aGlzLmluaXRSZW5kZXJlckVsZW1lbnQoKTtcbiAgICB0aGlzLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCk7XG4gICAgdGhpcy5jcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50cygpO1xuXG4gICAgaWYgKHRoaXMuZGF0YS54dCB8fCAhZ2xvYmFsRGF0YS5wcm9ncmVzc2l2ZUxvYWQpIHtcbiAgICAgIHRoaXMuYnVpbGRBbGxJdGVtcygpO1xuICAgIH1cblxuICAgIHRoaXMuaGlkZSgpO1xuICB9O1xuICAvKiBJQ29tcEVsZW1lbnQucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbigpe1xyXG4gICAgICBpZighdGhpcy5oaWRkZW4pe1xyXG4gICAgICAgICAgdGhpcy5oaWRlRWxlbWVudCgpO1xyXG4gICAgICAgICAgdmFyIGksbGVuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7XHJcbiAgICAgICAgICBmb3IoIGkgPSAwOyBpIDwgbGVuOyBpKz0xICl7XHJcbiAgICAgICAgICAgICAgaWYodGhpcy5lbGVtZW50c1tpXSl7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNbaV0uaGlkZSgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gIH07ICovXG5cblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZSA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB0aGlzLnByZXBhcmVSZW5kZXJhYmxlRnJhbWUobnVtKTtcbiAgICB0aGlzLnByZXBhcmVQcm9wZXJ0aWVzKG51bSwgdGhpcy5pc0luUmFuZ2UpO1xuXG4gICAgaWYgKCF0aGlzLmlzSW5SYW5nZSAmJiAhdGhpcy5kYXRhLnh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnRtLl9wbGFjZWhvbGRlcikge1xuICAgICAgdmFyIHRpbWVSZW1hcHBlZCA9IHRoaXMudG0udjtcblxuICAgICAgaWYgKHRpbWVSZW1hcHBlZCA9PT0gdGhpcy5kYXRhLm9wKSB7XG4gICAgICAgIHRpbWVSZW1hcHBlZCA9IHRoaXMuZGF0YS5vcCAtIDE7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IHRpbWVSZW1hcHBlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gbnVtIC8gdGhpcy5kYXRhLnNyO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcblxuICAgIGlmICghdGhpcy5jb21wbGV0ZUxheWVycykge1xuICAgICAgdGhpcy5jaGVja0xheWVycyh0aGlzLnJlbmRlcmVkRnJhbWUpO1xuICAgIH0gLy8gVGhpcyBpdGVyYXRpb24gbmVlZHMgdG8gYmUgYmFja3dhcmRzIGJlY2F1c2Ugb2YgaG93IGV4cHJlc3Npb25zIGNvbm5lY3QgYmV0d2VlbiBlYWNoIG90aGVyXG5cblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucHJlcGFyZUZyYW1lKHRoaXMucmVuZGVyZWRGcmFtZSAtIHRoaXMubGF5ZXJzW2ldLnN0KTtcblxuICAgICAgICBpZiAodGhpcy5lbGVtZW50c1tpXS5fbWRmKSB7XG4gICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucmVuZGVyRnJhbWUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgSUNvbXBFbGVtZW50LnByb3RvdHlwZS5zZXRFbGVtZW50cyA9IGZ1bmN0aW9uIChlbGVtcykge1xuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtcztcbiAgfTtcblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzO1xuICB9O1xuXG4gIElDb21wRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveUVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0uZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kZXN0cm95RWxlbWVudHMoKTtcbiAgICB0aGlzLmRlc3Ryb3lCYXNlRWxlbWVudCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR0NvbXBFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmxheWVycyA9IGRhdGEubGF5ZXJzO1xuICAgIHRoaXMuc3VwcG9ydHMzZCA9IHRydWU7XG4gICAgdGhpcy5jb21wbGV0ZUxheWVycyA9IGZhbHNlO1xuICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzID0gW107XG4gICAgdGhpcy5lbGVtZW50cyA9IHRoaXMubGF5ZXJzID8gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLmxheWVycy5sZW5ndGgpIDogW107XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLnRtID0gZGF0YS50bSA/IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEudG0sIDAsIGdsb2JhbERhdGEuZnJhbWVSYXRlLCB0aGlzKSA6IHtcbiAgICAgIF9wbGFjZWhvbGRlcjogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW1NWR1JlbmRlcmVyQmFzZSwgSUNvbXBFbGVtZW50LCBTVkdCYXNlRWxlbWVudF0sIFNWR0NvbXBFbGVtZW50KTtcblxuICBTVkdDb21wRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29tcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBTVkdDb21wRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR1JlbmRlcmVyKGFuaW1hdGlvbkl0ZW0sIGNvbmZpZykge1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbSA9IGFuaW1hdGlvbkl0ZW07XG4gICAgdGhpcy5sYXllcnMgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IC0xO1xuICAgIHRoaXMuc3ZnRWxlbWVudCA9IGNyZWF0ZU5TKCdzdmcnKTtcbiAgICB2YXIgYXJpYUxhYmVsID0gJyc7XG5cbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy50aXRsZSkge1xuICAgICAgdmFyIHRpdGxlRWxlbWVudCA9IGNyZWF0ZU5TKCd0aXRsZScpO1xuICAgICAgdmFyIHRpdGxlSWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgIHRpdGxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGl0bGVJZCk7XG4gICAgICB0aXRsZUVsZW1lbnQudGV4dENvbnRlbnQgPSBjb25maWcudGl0bGU7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuYXBwZW5kQ2hpbGQodGl0bGVFbGVtZW50KTtcbiAgICAgIGFyaWFMYWJlbCArPSB0aXRsZUlkO1xuICAgIH1cblxuICAgIGlmIChjb25maWcgJiYgY29uZmlnLmRlc2NyaXB0aW9uKSB7XG4gICAgICB2YXIgZGVzY0VsZW1lbnQgPSBjcmVhdGVOUygnZGVzYycpO1xuICAgICAgdmFyIGRlc2NJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgZGVzY0VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIGRlc2NJZCk7XG4gICAgICBkZXNjRWxlbWVudC50ZXh0Q29udGVudCA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZChkZXNjRWxlbWVudCk7XG4gICAgICBhcmlhTGFiZWwgKz0gJyAnICsgZGVzY0lkO1xuICAgIH1cblxuICAgIGlmIChhcmlhTGFiZWwpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScsIGFyaWFMYWJlbCk7XG4gICAgfVxuXG4gICAgdmFyIGRlZnMgPSBjcmVhdGVOUygnZGVmcycpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZChkZWZzKTtcbiAgICB2YXIgbWFza0VsZW1lbnQgPSBjcmVhdGVOUygnZycpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZChtYXNrRWxlbWVudCk7XG4gICAgdGhpcy5sYXllckVsZW1lbnQgPSBtYXNrRWxlbWVudDtcbiAgICB0aGlzLnJlbmRlckNvbmZpZyA9IHtcbiAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW86IGNvbmZpZyAmJiBjb25maWcucHJlc2VydmVBc3BlY3RSYXRpbyB8fCAneE1pZFlNaWQgbWVldCcsXG4gICAgICBpbWFnZVByZXNlcnZlQXNwZWN0UmF0aW86IGNvbmZpZyAmJiBjb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvIHx8ICd4TWlkWU1pZCBzbGljZScsXG4gICAgICBjb250ZW50VmlzaWJpbGl0eTogY29uZmlnICYmIGNvbmZpZy5jb250ZW50VmlzaWJpbGl0eSB8fCAndmlzaWJsZScsXG4gICAgICBwcm9ncmVzc2l2ZUxvYWQ6IGNvbmZpZyAmJiBjb25maWcucHJvZ3Jlc3NpdmVMb2FkIHx8IGZhbHNlLFxuICAgICAgaGlkZU9uVHJhbnNwYXJlbnQ6ICEoY29uZmlnICYmIGNvbmZpZy5oaWRlT25UcmFuc3BhcmVudCA9PT0gZmFsc2UpLFxuICAgICAgdmlld0JveE9ubHk6IGNvbmZpZyAmJiBjb25maWcudmlld0JveE9ubHkgfHwgZmFsc2UsXG4gICAgICB2aWV3Qm94U2l6ZTogY29uZmlnICYmIGNvbmZpZy52aWV3Qm94U2l6ZSB8fCBmYWxzZSxcbiAgICAgIGNsYXNzTmFtZTogY29uZmlnICYmIGNvbmZpZy5jbGFzc05hbWUgfHwgJycsXG4gICAgICBpZDogY29uZmlnICYmIGNvbmZpZy5pZCB8fCAnJyxcbiAgICAgIGZvY3VzYWJsZTogY29uZmlnICYmIGNvbmZpZy5mb2N1c2FibGUsXG4gICAgICBmaWx0ZXJTaXplOiB7XG4gICAgICAgIHdpZHRoOiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUud2lkdGggfHwgJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS5oZWlnaHQgfHwgJzEwMCUnLFxuICAgICAgICB4OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUueCB8fCAnMCUnLFxuICAgICAgICB5OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUueSB8fCAnMCUnXG4gICAgICB9LFxuICAgICAgd2lkdGg6IGNvbmZpZyAmJiBjb25maWcud2lkdGgsXG4gICAgICBoZWlnaHQ6IGNvbmZpZyAmJiBjb25maWcuaGVpZ2h0LFxuICAgICAgcnVuRXhwcmVzc2lvbnM6ICFjb25maWcgfHwgY29uZmlnLnJ1bkV4cHJlc3Npb25zID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnJ1bkV4cHJlc3Npb25zXG4gICAgfTtcbiAgICB0aGlzLmdsb2JhbERhdGEgPSB7XG4gICAgICBfbWRmOiBmYWxzZSxcbiAgICAgIGZyYW1lTnVtOiAtMSxcbiAgICAgIGRlZnM6IGRlZnMsXG4gICAgICByZW5kZXJDb25maWc6IHRoaXMucmVuZGVyQ29uZmlnXG4gICAgfTtcbiAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgdGhpcy5wZW5kaW5nRWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyZXJUeXBlID0gJ3N2Zyc7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW1NWR1JlbmRlcmVyQmFzZV0sIFNWR1JlbmRlcmVyKTtcblxuICBTVkdSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlQ29tcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBTVkdDb21wRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFNoYXBlVHJhbnNmb3JtTWFuYWdlcigpIHtcbiAgICB0aGlzLnNlcXVlbmNlcyA9IHt9O1xuICAgIHRoaXMuc2VxdWVuY2VMaXN0ID0gW107XG4gICAgdGhpcy50cmFuc2Zvcm1fa2V5X2NvdW50ID0gMDtcbiAgfVxuXG4gIFNoYXBlVHJhbnNmb3JtTWFuYWdlci5wcm90b3R5cGUgPSB7XG4gICAgYWRkVHJhbnNmb3JtU2VxdWVuY2U6IGZ1bmN0aW9uIGFkZFRyYW5zZm9ybVNlcXVlbmNlKHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgdmFyIGtleSA9ICdfJztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGtleSArPSB0cmFuc2Zvcm1zW2ldLnRyYW5zZm9ybS5rZXkgKyAnXyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXF1ZW5jZSA9IHRoaXMuc2VxdWVuY2VzW2tleV07XG5cbiAgICAgIGlmICghc2VxdWVuY2UpIHtcbiAgICAgICAgc2VxdWVuY2UgPSB7XG4gICAgICAgICAgdHJhbnNmb3JtczogW10uY29uY2F0KHRyYW5zZm9ybXMpLFxuICAgICAgICAgIGZpbmFsVHJhbnNmb3JtOiBuZXcgTWF0cml4KCksXG4gICAgICAgICAgX21kZjogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXF1ZW5jZXNba2V5XSA9IHNlcXVlbmNlO1xuICAgICAgICB0aGlzLnNlcXVlbmNlTGlzdC5wdXNoKHNlcXVlbmNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlcXVlbmNlO1xuICAgIH0sXG4gICAgcHJvY2Vzc1NlcXVlbmNlOiBmdW5jdGlvbiBwcm9jZXNzU2VxdWVuY2Uoc2VxdWVuY2UsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHNlcXVlbmNlLnRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgdmFyIF9tZGYgPSBpc0ZpcnN0RnJhbWU7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuICYmICFpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgaWYgKHNlcXVlbmNlLnRyYW5zZm9ybXNbaV0udHJhbnNmb3JtLm1Qcm9wcy5fbWRmKSB7XG4gICAgICAgICAgX21kZiA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChfbWRmKSB7XG4gICAgICAgIHNlcXVlbmNlLmZpbmFsVHJhbnNmb3JtLnJlc2V0KCk7XG5cbiAgICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBzZXF1ZW5jZS5maW5hbFRyYW5zZm9ybS5tdWx0aXBseShzZXF1ZW5jZS50cmFuc2Zvcm1zW2ldLnRyYW5zZm9ybS5tUHJvcHMudik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VxdWVuY2UuX21kZiA9IF9tZGY7XG4gICAgfSxcbiAgICBwcm9jZXNzU2VxdWVuY2VzOiBmdW5jdGlvbiBwcm9jZXNzU2VxdWVuY2VzKGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5zZXF1ZW5jZUxpc3QubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzU2VxdWVuY2UodGhpcy5zZXF1ZW5jZUxpc3RbaV0sIGlzRmlyc3RGcmFtZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXROZXdLZXk6IGZ1bmN0aW9uIGdldE5ld0tleSgpIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtX2tleV9jb3VudCArPSAxO1xuICAgICAgcmV0dXJuICdfJyArIHRoaXMudHJhbnNmb3JtX2tleV9jb3VudDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGx1bWFMb2FkZXIgPSBmdW5jdGlvbiBsdW1hTG9hZGVyKCkge1xuICAgIHZhciBpZCA9ICdfX2xvdHRpZV9lbGVtZW50X2x1bWFfYnVmZmVyJztcbiAgICB2YXIgbHVtYUJ1ZmZlciA9IG51bGw7XG4gICAgdmFyIGx1bWFCdWZmZXJDdHggPSBudWxsO1xuICAgIHZhciBzdmcgPSBudWxsOyAvLyBUaGlzIGFsdGVybmF0ZSBzb2x1dGlvbiBoYXMgYSBzbGlnaHQgZGVsYXkgYmVmb3JlIHRoZSBmaWx0ZXIgaXMgYXBwbGllZCwgcmVzdWx0aW5nIGluIGEgZmxpY2tlciBvbiB0aGUgZmlyc3QgZnJhbWUuXG4gICAgLy8gS2VlcGluZyB0aGlzIGhlcmUgZm9yIHJlZmVyZW5jZSwgYW5kIGluIHRoZSBmdXR1cmUsIGlmIG9mZnNjcmVlbiBjYW52YXMgc3VwcG9ydHMgdXJsIGZpbHRlcnMsIHRoaXMgY2FuIGJlIHVzZWQuXG4gICAgLy8gRm9yIG5vdywgbmVpdGhlciBvZiB0aGVtIHdvcmsgZm9yIG9mZnNjcmVlbiBjYW52YXMsIHNvIGNhbnZhcyB3b3JrZXJzIGNhbid0IHN1cHBvcnQgdGhlIGx1bWEgdHJhY2sgbWF0dGUgbWFzay5cbiAgICAvLyBOYW1pbmcgaXQgc29sdXRpb24gMiB0byBtYXJrIHRoZSBleHRyYSBjb21tZW50IGxpbmVzLlxuXG4gICAgLypcclxuICAgIHZhciBzdmdTdHJpbmcgPSBbXHJcbiAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4nLFxyXG4gICAgICAnPGZpbHRlciBpZD1cIicgKyBpZCArICdcIj4nLFxyXG4gICAgICAnPGZlQ29sb3JNYXRyaXggdHlwZT1cIm1hdHJpeFwiIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycz1cInNSR0JcIiB2YWx1ZXM9XCInLFxyXG4gICAgICAnMC4zLCAwLjMsIDAuMywgMCwgMCwgJyxcclxuICAgICAgJzAuMywgMC4zLCAwLjMsIDAsIDAsICcsXHJcbiAgICAgICcwLjMsIDAuMywgMC4zLCAwLCAwLCAnLFxyXG4gICAgICAnMC4zLCAwLjMsIDAuMywgMCwgMCcsXHJcbiAgICAgICdcIi8+JyxcclxuICAgICAgJzwvZmlsdGVyPicsXHJcbiAgICAgICc8L3N2Zz4nLFxyXG4gICAgXS5qb2luKCcnKTtcclxuICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3N2Z1N0cmluZ10sIHsgdHlwZTogJ2ltYWdlL3N2Zyt4bWwnIH0pO1xyXG4gICAgdmFyIHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlTHVtYVN2Z0ZpbHRlcigpIHtcbiAgICAgIHZhciBfc3ZnID0gY3JlYXRlTlMoJ3N2ZycpO1xuXG4gICAgICB2YXIgZmlsID0gY3JlYXRlTlMoJ2ZpbHRlcicpO1xuICAgICAgdmFyIG1hdHJpeCA9IGNyZWF0ZU5TKCdmZUNvbG9yTWF0cml4Jyk7XG4gICAgICBmaWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgIG1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnbWF0cml4Jyk7XG4gICAgICBtYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnc1JHQicpO1xuICAgICAgbWF0cml4LnNldEF0dHJpYnV0ZSgndmFsdWVzJywgJzAuMywgMC4zLCAwLjMsIDAsIDAsIDAuMywgMC4zLCAwLjMsIDAsIDAsIDAuMywgMC4zLCAwLjMsIDAsIDAsIDAuMywgMC4zLCAwLjMsIDAsIDAnKTtcbiAgICAgIGZpbC5hcHBlbmRDaGlsZChtYXRyaXgpO1xuXG4gICAgICBfc3ZnLmFwcGVuZENoaWxkKGZpbCk7XG5cbiAgICAgIF9zdmcuc2V0QXR0cmlidXRlKCdpZCcsIGlkICsgJ19zdmcnKTtcblxuICAgICAgaWYgKGZlYXR1cmVTdXBwb3J0LnN2Z0x1bWFIaWRkZW4pIHtcbiAgICAgICAgX3N2Zy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3N2ZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkTHVtYSgpIHtcbiAgICAgIGlmICghbHVtYUJ1ZmZlcikge1xuICAgICAgICBzdmcgPSBjcmVhdGVMdW1hU3ZnRmlsdGVyKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3ZnKTtcbiAgICAgICAgbHVtYUJ1ZmZlciA9IGNyZWF0ZVRhZygnY2FudmFzJyk7XG4gICAgICAgIGx1bWFCdWZmZXJDdHggPSBsdW1hQnVmZmVyLmdldENvbnRleHQoJzJkJyk7IC8vIGx1bWFCdWZmZXJDdHguZmlsdGVyID0gYHVybCgnJHt1cmx9I19fbG90dGllX2VsZW1lbnRfbHVtYV9idWZmZXInKWA7IC8vIHBhcnQgb2Ygc29sdXRpb24gMlxuXG4gICAgICAgIGx1bWFCdWZmZXJDdHguZmlsdGVyID0gJ3VybCgjJyArIGlkICsgJyknO1xuICAgICAgICBsdW1hQnVmZmVyQ3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDAsMCwwLDApJztcbiAgICAgICAgbHVtYUJ1ZmZlckN0eC5maWxsUmVjdCgwLCAwLCAxLCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRMdW1hKGNhbnZhcykge1xuICAgICAgaWYgKCFsdW1hQnVmZmVyKSB7XG4gICAgICAgIGxvYWRMdW1hKCk7XG4gICAgICB9XG5cbiAgICAgIGx1bWFCdWZmZXIud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICBsdW1hQnVmZmVyLmhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7IC8vIGx1bWFCdWZmZXJDdHguZmlsdGVyID0gYHVybCgnJHt1cmx9I19fbG90dGllX2VsZW1lbnRfbHVtYV9idWZmZXInKWA7IC8vIHBhcnQgb2Ygc29sdXRpb24gMlxuXG4gICAgICBsdW1hQnVmZmVyQ3R4LmZpbHRlciA9ICd1cmwoIycgKyBpZCArICcpJztcbiAgICAgIHJldHVybiBsdW1hQnVmZmVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsb2FkOiBsb2FkTHVtYSxcbiAgICAgIGdldDogZ2V0THVtYVxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBpZiAoZmVhdHVyZVN1cHBvcnQub2Zmc2NyZWVuQ2FudmFzKSB7XG4gICAgICByZXR1cm4gbmV3IE9mZnNjcmVlbkNhbnZhcyh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICB2YXIgY2FudmFzID0gY3JlYXRlVGFnKCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHJldHVybiBjYW52YXM7XG4gIH1cblxuICB2YXIgYXNzZXRMb2FkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvYWRMdW1hQ2FudmFzOiBsdW1hTG9hZGVyLmxvYWQsXG4gICAgICBnZXRMdW1hQ2FudmFzOiBsdW1hTG9hZGVyLmdldCxcbiAgICAgIGNyZWF0ZUNhbnZhczogY3JlYXRlQ2FudmFzXG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciByZWdpc3RlcmVkRWZmZWN0cyA9IHt9O1xuXG4gIGZ1bmN0aW9uIENWRWZmZWN0cyhlbGVtKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGVsZW0uZGF0YS5lZiA/IGVsZW0uZGF0YS5lZi5sZW5ndGggOiAwO1xuICAgIHRoaXMuZmlsdGVycyA9IFtdO1xuICAgIHZhciBmaWx0ZXJNYW5hZ2VyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBmaWx0ZXJNYW5hZ2VyID0gbnVsbDtcbiAgICAgIHZhciB0eXBlID0gZWxlbS5kYXRhLmVmW2ldLnR5O1xuXG4gICAgICBpZiAocmVnaXN0ZXJlZEVmZmVjdHNbdHlwZV0pIHtcbiAgICAgICAgdmFyIEVmZmVjdCA9IHJlZ2lzdGVyZWRFZmZlY3RzW3R5cGVdLmVmZmVjdDtcbiAgICAgICAgZmlsdGVyTWFuYWdlciA9IG5ldyBFZmZlY3QoZWxlbS5lZmZlY3RzTWFuYWdlci5lZmZlY3RFbGVtZW50c1tpXSwgZWxlbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWx0ZXJNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuZmlsdGVycy5wdXNoKGZpbHRlck1hbmFnZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmZpbHRlcnMubGVuZ3RoKSB7XG4gICAgICBlbGVtLmFkZFJlbmRlcmFibGVDb21wb25lbnQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgQ1ZFZmZlY3RzLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChfaXNGaXJzdEZyYW1lKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuZmlsdGVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMuZmlsdGVyc1tpXS5yZW5kZXJGcmFtZShfaXNGaXJzdEZyYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZFZmZlY3RzLnByb3RvdHlwZS5nZXRFZmZlY3RzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5maWx0ZXJzLmxlbmd0aDtcbiAgICB2YXIgZWZmZWN0cyA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5maWx0ZXJzW2ldLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgZWZmZWN0cy5wdXNoKHRoaXMuZmlsdGVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVmZmVjdHM7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoaWQsIGVmZmVjdCkge1xuICAgIHJlZ2lzdGVyZWRFZmZlY3RzW2lkXSA9IHtcbiAgICAgIGVmZmVjdDogZWZmZWN0XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENWTWFza0VsZW1lbnQoZGF0YSwgZWxlbWVudCkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm1hc2tzUHJvcGVydGllcyA9IHRoaXMuZGF0YS5tYXNrc1Byb3BlcnRpZXMgfHwgW107XG4gICAgdGhpcy52aWV3RGF0YSA9IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoKTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoO1xuICAgIHZhciBoYXNNYXNrcyA9IGZhbHNlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5tYXNrc1Byb3BlcnRpZXNbaV0ubW9kZSAhPT0gJ24nKSB7XG4gICAgICAgIGhhc01hc2tzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy52aWV3RGF0YVtpXSA9IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcCh0aGlzLmVsZW1lbnQsIHRoaXMubWFza3NQcm9wZXJ0aWVzW2ldLCAzKTtcbiAgICB9XG5cbiAgICB0aGlzLmhhc01hc2tzID0gaGFzTWFza3M7XG5cbiAgICBpZiAoaGFzTWFza3MpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5hZGRSZW5kZXJhYmxlQ29tcG9uZW50KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIENWTWFza0VsZW1lbnQucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5oYXNNYXNrcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLmVsZW1lbnQuZmluYWxUcmFuc2Zvcm0ubWF0O1xuICAgIHZhciBjdHggPSB0aGlzLmVsZW1lbnQuY2FudmFzQ29udGV4dDtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoO1xuICAgIHZhciBwdDtcbiAgICB2YXIgcHRzO1xuICAgIHZhciBkYXRhO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMubWFza3NQcm9wZXJ0aWVzW2ldLm1vZGUgIT09ICduJykge1xuICAgICAgICBpZiAodGhpcy5tYXNrc1Byb3BlcnRpZXNbaV0uaW52KSB7XG4gICAgICAgICAgY3R4Lm1vdmVUbygwLCAwKTtcbiAgICAgICAgICBjdHgubGluZVRvKHRoaXMuZWxlbWVudC5nbG9iYWxEYXRhLmNvbXBTaXplLncsIDApO1xuICAgICAgICAgIGN0eC5saW5lVG8odGhpcy5lbGVtZW50Lmdsb2JhbERhdGEuY29tcFNpemUudywgdGhpcy5lbGVtZW50Lmdsb2JhbERhdGEuY29tcFNpemUuaCk7XG4gICAgICAgICAgY3R4LmxpbmVUbygwLCB0aGlzLmVsZW1lbnQuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oKTtcbiAgICAgICAgICBjdHgubGluZVRvKDAsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YSA9IHRoaXMudmlld0RhdGFbaV0udjtcbiAgICAgICAgcHQgPSB0cmFuc2Zvcm0uYXBwbHlUb1BvaW50QXJyYXkoZGF0YS52WzBdWzBdLCBkYXRhLnZbMF1bMV0sIDApO1xuICAgICAgICBjdHgubW92ZVRvKHB0WzBdLCBwdFsxXSk7XG4gICAgICAgIHZhciBqO1xuICAgICAgICB2YXIgakxlbiA9IGRhdGEuX2xlbmd0aDtcblxuICAgICAgICBmb3IgKGogPSAxOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgcHRzID0gdHJhbnNmb3JtLmFwcGx5VG9UcmlwbGVQb2ludHMoZGF0YS5vW2ogLSAxXSwgZGF0YS5pW2pdLCBkYXRhLnZbal0pO1xuICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHB0c1swXSwgcHRzWzFdLCBwdHNbMl0sIHB0c1szXSwgcHRzWzRdLCBwdHNbNV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHRzID0gdHJhbnNmb3JtLmFwcGx5VG9UcmlwbGVQb2ludHMoZGF0YS5vW2ogLSAxXSwgZGF0YS5pWzBdLCBkYXRhLnZbMF0pO1xuICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhwdHNbMF0sIHB0c1sxXSwgcHRzWzJdLCBwdHNbM10sIHB0c1s0XSwgcHRzWzVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQuZ2xvYmFsRGF0YS5yZW5kZXJlci5zYXZlKHRydWUpO1xuICAgIGN0eC5jbGlwKCk7XG4gIH07XG5cbiAgQ1ZNYXNrRWxlbWVudC5wcm90b3R5cGUuZ2V0TWFza1Byb3BlcnR5ID0gTWFza0VsZW1lbnQucHJvdG90eXBlLmdldE1hc2tQcm9wZXJ0eTtcblxuICBDVk1hc2tFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ1ZCYXNlRWxlbWVudCgpIHt9XG5cbiAgdmFyIG9wZXJhdGlvbnNNYXAgPSB7XG4gICAgMTogJ3NvdXJjZS1pbicsXG4gICAgMjogJ3NvdXJjZS1vdXQnLFxuICAgIDM6ICdzb3VyY2UtaW4nLFxuICAgIDQ6ICdzb3VyY2Utb3V0J1xuICB9O1xuICBDVkJhc2VFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICBjcmVhdGVFbGVtZW50czogZnVuY3Rpb24gY3JlYXRlRWxlbWVudHMoKSB7fSxcbiAgICBpbml0UmVuZGVyZXJFbGVtZW50OiBmdW5jdGlvbiBpbml0UmVuZGVyZXJFbGVtZW50KCkge30sXG4gICAgY3JlYXRlQ29udGFpbmVyRWxlbWVudHM6IGZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCkge1xuICAgICAgLy8gSWYgdGhlIGxheWVyIGlzIG1hc2tlZCB3ZSB3aWxsIHVzZSB0d28gYnVmZmVycyB0byBzdG9yZSBlYWNoIGRpZmZlcmVudCBzdGF0ZXMgb2YgdGhlIGRyYXdpbmdcbiAgICAgIC8vIFRoaXMgc29sdXRpb24gaXMgbm90IGlkZWFsIGZvciBzZXZlcmFsIHJlYXNvbi4gQnV0IHVuZm9ydHVuYXRlbHksIGJlY2F1c2Ugb2YgdGhlIHJlY3Vyc2l2ZVxuICAgICAgLy8gbmF0dXJlIG9mIHRoZSByZW5kZXIgdHJlZSwgaXQncyB0aGUgb25seSBzaW1wbGUgd2F5IHRvIG1ha2Ugc3VyZSBvbmUgaW5uZXIgbWFzayBkb2Vzbid0IG92ZXJyaWRlIGFuIG91dGVyIG1hc2suXG4gICAgICAvLyBUT0RPOiB0cnkgdG8gcmVkdWNlIHRoZSBzaXplIG9mIHRoZXNlIGJ1ZmZlcnMgdG8gdGhlIHNpemUgb2YgdGhlIGNvbXBvc2l0aW9uIGNvbnRhbmluZyB0aGUgbGF5ZXJcbiAgICAgIC8vIEl0IG1pZ2h0IGJlIGNoYWxsZW5naW5nIGJlY2F1c2UgdGhlIGxheWVyIG1vc3QgbGlrZWx5IGlzIHRyYW5zZm9ybWVkIGluIHNvbWUgd2F5XG4gICAgICBpZiAodGhpcy5kYXRhLnR0ID49IDEpIHtcbiAgICAgICAgdGhpcy5idWZmZXJzID0gW107XG4gICAgICAgIHZhciBjYW52YXNDb250ZXh0ID0gdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQ7XG4gICAgICAgIHZhciBidWZmZXJDYW52YXMgPSBhc3NldExvYWRlci5jcmVhdGVDYW52YXMoY2FudmFzQ29udGV4dC5jYW52YXMud2lkdGgsIGNhbnZhc0NvbnRleHQuY2FudmFzLmhlaWdodCk7XG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1ZmZlckNhbnZhcyk7XG4gICAgICAgIHZhciBidWZmZXJDYW52YXMyID0gYXNzZXRMb2FkZXIuY3JlYXRlQ2FudmFzKGNhbnZhc0NvbnRleHQuY2FudmFzLndpZHRoLCBjYW52YXNDb250ZXh0LmNhbnZhcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChidWZmZXJDYW52YXMyKTtcblxuICAgICAgICBpZiAodGhpcy5kYXRhLnR0ID49IDMgJiYgIWRvY3VtZW50Ll9pc1Byb3h5KSB7XG4gICAgICAgICAgYXNzZXRMb2FkZXIubG9hZEx1bWFDYW52YXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQgPSB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dDtcbiAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzID0gdGhpcy5nbG9iYWxEYXRhLnRyYW5zZm9ybUNhbnZhcztcbiAgICAgIHRoaXMucmVuZGVyYWJsZUVmZmVjdHNNYW5hZ2VyID0gbmV3IENWRWZmZWN0cyh0aGlzKTtcbiAgICAgIHRoaXMuc2VhcmNoRWZmZWN0VHJhbnNmb3JtcygpO1xuICAgIH0sXG4gICAgY3JlYXRlQ29udGVudDogZnVuY3Rpb24gY3JlYXRlQ29udGVudCgpIHt9LFxuICAgIHNldEJsZW5kTW9kZTogZnVuY3Rpb24gc2V0QmxlbmRNb2RlKCkge1xuICAgICAgdmFyIGdsb2JhbERhdGEgPSB0aGlzLmdsb2JhbERhdGE7XG5cbiAgICAgIGlmIChnbG9iYWxEYXRhLmJsZW5kTW9kZSAhPT0gdGhpcy5kYXRhLmJtKSB7XG4gICAgICAgIGdsb2JhbERhdGEuYmxlbmRNb2RlID0gdGhpcy5kYXRhLmJtO1xuICAgICAgICB2YXIgYmxlbmRNb2RlVmFsdWUgPSBnZXRCbGVuZE1vZGUodGhpcy5kYXRhLmJtKTtcbiAgICAgICAgZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IGJsZW5kTW9kZVZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHM6IGZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzKCkge1xuICAgICAgdGhpcy5tYXNrTWFuYWdlciA9IG5ldyBDVk1hc2tFbGVtZW50KHRoaXMuZGF0YSwgdGhpcyk7XG4gICAgICB0aGlzLnRyYW5zZm9ybUVmZmVjdHMgPSB0aGlzLnJlbmRlcmFibGVFZmZlY3RzTWFuYWdlci5nZXRFZmZlY3RzKGVmZmVjdFR5cGVzLlRSQU5TRk9STV9FRkZFQ1QpO1xuICAgIH0sXG4gICAgaGlkZUVsZW1lbnQ6IGZ1bmN0aW9uIGhpZGVFbGVtZW50KCkge1xuICAgICAgaWYgKCF0aGlzLmhpZGRlbiAmJiAoIXRoaXMuaXNJblJhbmdlIHx8IHRoaXMuaXNUcmFuc3BhcmVudCkpIHtcbiAgICAgICAgdGhpcy5oaWRkZW4gPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd0VsZW1lbnQ6IGZ1bmN0aW9uIHNob3dFbGVtZW50KCkge1xuICAgICAgaWYgKHRoaXMuaXNJblJhbmdlICYmICF0aGlzLmlzVHJhbnNwYXJlbnQpIHtcbiAgICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tYXNrTWFuYWdlci5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNsZWFyQ2FudmFzOiBmdW5jdGlvbiBjbGVhckNhbnZhcyhjYW52YXNDb250ZXh0KSB7XG4gICAgICBjYW52YXNDb250ZXh0LmNsZWFyUmVjdCh0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCwgdGhpcy50cmFuc2Zvcm1DYW52YXMudHksIHRoaXMudHJhbnNmb3JtQ2FudmFzLncgKiB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeCwgdGhpcy50cmFuc2Zvcm1DYW52YXMuaCAqIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN5KTtcbiAgICB9LFxuICAgIHByZXBhcmVMYXllcjogZnVuY3Rpb24gcHJlcGFyZUxheWVyKCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS50dCA+PSAxKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcnNbMF07XG4gICAgICAgIHZhciBidWZmZXJDdHggPSBidWZmZXIuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgdGhpcy5jbGVhckNhbnZhcyhidWZmZXJDdHgpOyAvLyBvbiB0aGUgZmlyc3QgYnVmZmVyIHdlIHN0b3JlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBnbG9iYWwgZHJhd2luZ1xuXG4gICAgICAgIGJ1ZmZlckN0eC5kcmF3SW1hZ2UodGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcywgMCwgMCk7IC8vIFRoZSBuZXh0IGZvdXIgbGluZXMgYXJlIHRvIGNsZWFyIHRoZSBjYW52YXNcbiAgICAgICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhlcmUgaXMgYSB3YXkgdG8gY2xlYXIgdGhlIGNhbnZhcyB3aXRob3V0IHJlc2V0dGluZyB0aGUgdHJhbnNmb3JtXG5cbiAgICAgICAgdGhpcy5jdXJyZW50VHJhbnNmb3JtID0gdGhpcy5jYW52YXNDb250ZXh0LmdldFRyYW5zZm9ybSgpO1xuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICB0aGlzLmNsZWFyQ2FudmFzKHRoaXMuY2FudmFzQ29udGV4dCk7XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5zZXRUcmFuc2Zvcm0odGhpcy5jdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4aXRMYXllcjogZnVuY3Rpb24gZXhpdExheWVyKCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS50dCA+PSAxKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcnNbMV07IC8vIE9uIHRoZSBzZWNvbmQgYnVmZmVyIHdlIHN0b3JlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBnbG9iYWwgZHJhd2luZ1xuICAgICAgICAvLyB0aGF0IG9ubHkgY29udGFpbnMgdGhlIGNvbnRlbnQgb2YgdGhpcyBsYXllclxuICAgICAgICAvLyAoaWYgaXQgaXMgYSBjb21wb3NpdGlvbiwgaXQgYWxzbyBpbmNsdWRlcyB0aGUgbmVzdGVkIGxheWVycylcblxuICAgICAgICB2YXIgYnVmZmVyQ3R4ID0gYnVmZmVyLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIHRoaXMuY2xlYXJDYW52YXMoYnVmZmVyQ3R4KTtcbiAgICAgICAgYnVmZmVyQ3R4LmRyYXdJbWFnZSh0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLCAwLCAwKTsgLy8gV2UgY2xlYXIgdGhlIGNhbnZhcyBhZ2FpblxuXG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgICAgIHRoaXMuY2xlYXJDYW52YXModGhpcy5jYW52YXNDb250ZXh0KTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LnNldFRyYW5zZm9ybSh0aGlzLmN1cnJlbnRUcmFuc2Zvcm0pOyAvLyBXZSBkcmF3IHRoZSBtYXNrXG5cbiAgICAgICAgdmFyIG1hc2sgPSB0aGlzLmNvbXAuZ2V0RWxlbWVudEJ5SWQoJ3RwJyBpbiB0aGlzLmRhdGEgPyB0aGlzLmRhdGEudHAgOiB0aGlzLmRhdGEuaW5kIC0gMSk7XG4gICAgICAgIG1hc2sucmVuZGVyRnJhbWUodHJ1ZSk7IC8vIFdlIGRyYXcgdGhlIHNlY29uZCBidWZmZXIgKHRoYXQgY29udGFpbnMgdGhlIGNvbnRlbnQgb2YgdGhpcyBsYXllcilcblxuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApOyAvLyBJZiB0aGUgbWFzayBpcyBhIEx1bWEgbWF0dGUsIHdlIG5lZWQgdG8gZG8gdHdvIGV4dHJhIHBhaW50aW5nIG9wZXJhdGlvbnNcbiAgICAgICAgLy8gdGhlIF9pc1Byb3h5IGNoZWNrIGlzIHRvIGF2b2lkIGRyYXdpbmcgYSBmYWtlIGNhbnZhcyBpbiB3b3JrZXJzIHRoYXQgd2lsbCB0aHJvdyBhbiBlcnJvclxuXG4gICAgICAgIGlmICh0aGlzLmRhdGEudHQgPj0gMyAmJiAhZG9jdW1lbnQuX2lzUHJveHkpIHtcbiAgICAgICAgICAvLyBXZSBjb3B5IHRoZSBwYWludGVkIG1hc2sgdG8gYSBidWZmZXIgdGhhdCBoYXMgYSBjb2xvciBtYXRyaXggZmlsdGVyIGFwcGxpZWQgdG8gaXRcbiAgICAgICAgICAvLyB0aGF0IGFwcGxpZXMgdGhlIHJnYiB2YWx1ZXMgdG8gdGhlIGFscGhhIGNoYW5uZWxcbiAgICAgICAgICB2YXIgbHVtYUJ1ZmZlciA9IGFzc2V0TG9hZGVyLmdldEx1bWFDYW52YXModGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcyk7XG4gICAgICAgICAgdmFyIGx1bWFCdWZmZXJDdHggPSBsdW1hQnVmZmVyLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgICAgbHVtYUJ1ZmZlckN0eC5kcmF3SW1hZ2UodGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcywgMCwgMCk7XG4gICAgICAgICAgdGhpcy5jbGVhckNhbnZhcyh0aGlzLmNhbnZhc0NvbnRleHQpOyAvLyB3ZSByZXBhaW50IHRoZSBjb250ZXh0IHdpdGggdGhlIG1hc2sgYXBwbGllZCB0byBpdFxuXG4gICAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LmRyYXdJbWFnZShsdW1hQnVmZmVyLCAwLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBvcGVyYXRpb25zTWFwW3RoaXMuZGF0YS50dF07XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5kcmF3SW1hZ2UoYnVmZmVyLCAwLCAwKTsgLy8gV2UgZmluYWxseSBkcmF3IHRoZSBmaXJzdCBidWZmZXIgKHRoYXQgY29udGFpbnMgdGhlIGNvbnRlbnQgb2YgdGhlIGdsb2JhbCBkcmF3aW5nKVxuICAgICAgICAvLyBXZSB1c2UgZGVzdGluYXRpb24tb3ZlciB0byBkcmF3IHRoZSBnbG9iYWwgZHJhd2luZyBiZWxvdyB0aGUgY3VycmVudCBsYXllclxuXG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnZGVzdGluYXRpb24tb3Zlcic7XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5kcmF3SW1hZ2UodGhpcy5idWZmZXJzWzBdLCAwLCAwKTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LnNldFRyYW5zZm9ybSh0aGlzLmN1cnJlbnRUcmFuc2Zvcm0pOyAvLyBXZSByZXNldCB0aGUgZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIHRvIHNvdXJjZS1vdmVyLCB0aGUgc3RhbmRhcmQgdHlwZSBvZiBvcGVyYXRpb25cblxuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1vdmVyJztcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlckZyYW1lOiBmdW5jdGlvbiByZW5kZXJGcmFtZShmb3JjZVJlbmRlcikge1xuICAgICAgaWYgKHRoaXMuaGlkZGVuIHx8IHRoaXMuZGF0YS5oZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEudGQgPT09IDEgJiYgIWZvcmNlUmVuZGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIHRoaXMucmVuZGVyUmVuZGVyYWJsZSgpO1xuICAgICAgdGhpcy5yZW5kZXJMb2NhbFRyYW5zZm9ybSgpO1xuICAgICAgdGhpcy5zZXRCbGVuZE1vZGUoKTtcbiAgICAgIHZhciBmb3JjZVJlYWxTdGFjayA9IHRoaXMuZGF0YS50eSA9PT0gMDtcbiAgICAgIHRoaXMucHJlcGFyZUxheWVyKCk7XG4gICAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuc2F2ZShmb3JjZVJlYWxTdGFjayk7XG4gICAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4VHJhbnNmb3JtKHRoaXMuZmluYWxUcmFuc2Zvcm0ubG9jYWxNYXQucHJvcHMpO1xuICAgICAgdGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyLmN0eE9wYWNpdHkodGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE9wYWNpdHkpO1xuICAgICAgdGhpcy5yZW5kZXJJbm5lckNvbnRlbnQoKTtcbiAgICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5yZXN0b3JlKGZvcmNlUmVhbFN0YWNrKTtcbiAgICAgIHRoaXMuZXhpdExheWVyKCk7XG5cbiAgICAgIGlmICh0aGlzLm1hc2tNYW5hZ2VyLmhhc01hc2tzKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5yZXN0b3JlKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dCA9IG51bGw7XG4gICAgICB0aGlzLmRhdGEgPSBudWxsO1xuICAgICAgdGhpcy5nbG9iYWxEYXRhID0gbnVsbDtcbiAgICAgIHRoaXMubWFza01hbmFnZXIuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgbUhlbHBlcjogbmV3IE1hdHJpeCgpXG4gIH07XG4gIENWQmFzZUVsZW1lbnQucHJvdG90eXBlLmhpZGUgPSBDVkJhc2VFbGVtZW50LnByb3RvdHlwZS5oaWRlRWxlbWVudDtcbiAgQ1ZCYXNlRWxlbWVudC5wcm90b3R5cGUuc2hvdyA9IENWQmFzZUVsZW1lbnQucHJvdG90eXBlLnNob3dFbGVtZW50O1xuXG4gIGZ1bmN0aW9uIENWU2hhcGVEYXRhKGVsZW1lbnQsIGRhdGEsIHN0eWxlcywgdHJhbnNmb3Jtc01hbmFnZXIpIHtcbiAgICB0aGlzLnN0eWxlZFNoYXBlcyA9IFtdO1xuICAgIHRoaXMudHIgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgdmFyIHR5ID0gNDtcblxuICAgIGlmIChkYXRhLnR5ID09PSAncmMnKSB7XG4gICAgICB0eSA9IDU7XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnZWwnKSB7XG4gICAgICB0eSA9IDY7XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnc3InKSB7XG4gICAgICB0eSA9IDc7XG4gICAgfVxuXG4gICAgdGhpcy5zaCA9IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcChlbGVtZW50LCBkYXRhLCB0eSwgZWxlbWVudCk7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHN0eWxlcy5sZW5ndGg7XG4gICAgdmFyIHN0eWxlZFNoYXBlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAoIXN0eWxlc1tpXS5jbG9zZWQpIHtcbiAgICAgICAgc3R5bGVkU2hhcGUgPSB7XG4gICAgICAgICAgdHJhbnNmb3JtczogdHJhbnNmb3Jtc01hbmFnZXIuYWRkVHJhbnNmb3JtU2VxdWVuY2Uoc3R5bGVzW2ldLnRyYW5zZm9ybXMpLFxuICAgICAgICAgIHRyTm9kZXM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3R5bGVkU2hhcGVzLnB1c2goc3R5bGVkU2hhcGUpO1xuICAgICAgICBzdHlsZXNbaV0uZWxlbWVudHMucHVzaChzdHlsZWRTaGFwZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQ1ZTaGFwZURhdGEucHJvdG90eXBlLnNldEFzQW5pbWF0ZWQgPSBTVkdTaGFwZURhdGEucHJvdG90eXBlLnNldEFzQW5pbWF0ZWQ7XG5cbiAgZnVuY3Rpb24gQ1ZTaGFwZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuc2hhcGVzID0gW107XG4gICAgdGhpcy5zaGFwZXNEYXRhID0gZGF0YS5zaGFwZXM7XG4gICAgdGhpcy5zdHlsZXNMaXN0ID0gW107XG4gICAgdGhpcy5pdGVtc0RhdGEgPSBbXTtcbiAgICB0aGlzLnByZXZWaWV3RGF0YSA9IFtdO1xuICAgIHRoaXMuc2hhcGVNb2RpZmllcnMgPSBbXTtcbiAgICB0aGlzLnByb2Nlc3NlZEVsZW1lbnRzID0gW107XG4gICAgdGhpcy50cmFuc2Zvcm1zTWFuYWdlciA9IG5ldyBTaGFwZVRyYW5zZm9ybU1hbmFnZXIoKTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgQ1ZCYXNlRWxlbWVudCwgSVNoYXBlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRWxlbWVudF0sIENWU2hhcGVFbGVtZW50KTtcbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50ID0gUmVuZGVyYWJsZURPTUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50O1xuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUudHJhbnNmb3JtSGVscGVyID0ge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgX29wTWRmOiBmYWxzZVxuICB9O1xuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuZGFzaFJlc2V0dGVyID0gW107XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZWFyY2hTaGFwZXModGhpcy5zaGFwZXNEYXRhLCB0aGlzLml0ZW1zRGF0YSwgdGhpcy5wcmV2Vmlld0RhdGEsIHRydWUsIFtdKTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU3R5bGVFbGVtZW50ID0gZnVuY3Rpb24gKGRhdGEsIHRyYW5zZm9ybXMpIHtcbiAgICB2YXIgc3R5bGVFbGVtID0ge1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIHR5cGU6IGRhdGEudHksXG4gICAgICBwcmVUcmFuc2Zvcm1zOiB0aGlzLnRyYW5zZm9ybXNNYW5hZ2VyLmFkZFRyYW5zZm9ybVNlcXVlbmNlKHRyYW5zZm9ybXMpLFxuICAgICAgdHJhbnNmb3JtczogW10sXG4gICAgICBlbGVtZW50czogW10sXG4gICAgICBjbG9zZWQ6IGRhdGEuaGQgPT09IHRydWVcbiAgICB9O1xuICAgIHZhciBlbGVtZW50RGF0YSA9IHt9O1xuXG4gICAgaWYgKGRhdGEudHkgPT09ICdmbCcgfHwgZGF0YS50eSA9PT0gJ3N0Jykge1xuICAgICAgZWxlbWVudERhdGEuYyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEuYywgMSwgMjU1LCB0aGlzKTtcblxuICAgICAgaWYgKCFlbGVtZW50RGF0YS5jLmspIHtcbiAgICAgICAgc3R5bGVFbGVtLmNvID0gJ3JnYignICsgYm1GbG9vcihlbGVtZW50RGF0YS5jLnZbMF0pICsgJywnICsgYm1GbG9vcihlbGVtZW50RGF0YS5jLnZbMV0pICsgJywnICsgYm1GbG9vcihlbGVtZW50RGF0YS5jLnZbMl0pICsgJyknO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGF0YS50eSA9PT0gJ2dmJyB8fCBkYXRhLnR5ID09PSAnZ3MnKSB7XG4gICAgICBlbGVtZW50RGF0YS5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS5zLCAxLCBudWxsLCB0aGlzKTtcbiAgICAgIGVsZW1lbnREYXRhLmUgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLmUsIDEsIG51bGwsIHRoaXMpO1xuICAgICAgZWxlbWVudERhdGEuaCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEuaCB8fCB7XG4gICAgICAgIGs6IDBcbiAgICAgIH0sIDAsIDAuMDEsIHRoaXMpO1xuICAgICAgZWxlbWVudERhdGEuYSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEuYSB8fCB7XG4gICAgICAgIGs6IDBcbiAgICAgIH0sIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgICBlbGVtZW50RGF0YS5nID0gbmV3IEdyYWRpZW50UHJvcGVydHkodGhpcywgZGF0YS5nLCB0aGlzKTtcbiAgICB9XG5cbiAgICBlbGVtZW50RGF0YS5vID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS5vLCAwLCAwLjAxLCB0aGlzKTtcblxuICAgIGlmIChkYXRhLnR5ID09PSAnc3QnIHx8IGRhdGEudHkgPT09ICdncycpIHtcbiAgICAgIHN0eWxlRWxlbS5sYyA9IGxpbmVDYXBFbnVtW2RhdGEubGMgfHwgMl07XG4gICAgICBzdHlsZUVsZW0ubGogPSBsaW5lSm9pbkVudW1bZGF0YS5saiB8fCAyXTtcblxuICAgICAgaWYgKGRhdGEubGogPT0gMSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICBzdHlsZUVsZW0ubWwgPSBkYXRhLm1sO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50RGF0YS53ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS53LCAwLCBudWxsLCB0aGlzKTtcblxuICAgICAgaWYgKCFlbGVtZW50RGF0YS53LmspIHtcbiAgICAgICAgc3R5bGVFbGVtLndpID0gZWxlbWVudERhdGEudy52O1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5kKSB7XG4gICAgICAgIHZhciBkID0gbmV3IERhc2hQcm9wZXJ0eSh0aGlzLCBkYXRhLmQsICdjYW52YXMnLCB0aGlzKTtcbiAgICAgICAgZWxlbWVudERhdGEuZCA9IGQ7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50RGF0YS5kLmspIHtcbiAgICAgICAgICBzdHlsZUVsZW0uZGEgPSBlbGVtZW50RGF0YS5kLmRhc2hBcnJheTtcbiAgICAgICAgICBzdHlsZUVsZW1bXCJkb1wiXSA9IGVsZW1lbnREYXRhLmQuZGFzaG9mZnNldFswXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZUVsZW0uciA9IGRhdGEuciA9PT0gMiA/ICdldmVub2RkJyA6ICdub256ZXJvJztcbiAgICB9XG5cbiAgICB0aGlzLnN0eWxlc0xpc3QucHVzaChzdHlsZUVsZW0pO1xuICAgIGVsZW1lbnREYXRhLnN0eWxlID0gc3R5bGVFbGVtO1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlR3JvdXBFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbGVtZW50RGF0YSA9IHtcbiAgICAgIGl0OiBbXSxcbiAgICAgIHByZXZWaWV3RGF0YTogW11cbiAgICB9O1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlVHJhbnNmb3JtRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIGVsZW1lbnREYXRhID0ge1xuICAgICAgdHJhbnNmb3JtOiB7XG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIF9vcE1kZjogZmFsc2UsXG4gICAgICAgIGtleTogdGhpcy50cmFuc2Zvcm1zTWFuYWdlci5nZXROZXdLZXkoKSxcbiAgICAgICAgb3A6IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEubywgMCwgMC4wMSwgdGhpcyksXG4gICAgICAgIG1Qcm9wczogVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5KHRoaXMsIGRhdGEsIHRoaXMpXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZWxlbWVudERhdGE7XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNoYXBlRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIGVsZW1lbnREYXRhID0gbmV3IENWU2hhcGVEYXRhKHRoaXMsIGRhdGEsIHRoaXMuc3R5bGVzTGlzdCwgdGhpcy50cmFuc2Zvcm1zTWFuYWdlcik7XG4gICAgdGhpcy5zaGFwZXMucHVzaChlbGVtZW50RGF0YSk7XG4gICAgdGhpcy5hZGRTaGFwZVRvTW9kaWZpZXJzKGVsZW1lbnREYXRhKTtcbiAgICByZXR1cm4gZWxlbWVudERhdGE7XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbG9hZFNoYXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLml0ZW1zRGF0YS5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMucHJldlZpZXdEYXRhW2ldID0gdGhpcy5pdGVtc0RhdGFbaV07XG4gICAgfVxuXG4gICAgdGhpcy5zZWFyY2hTaGFwZXModGhpcy5zaGFwZXNEYXRhLCB0aGlzLml0ZW1zRGF0YSwgdGhpcy5wcmV2Vmlld0RhdGEsIHRydWUsIFtdKTtcbiAgICBsZW4gPSB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5nZXRWYWx1ZSgpO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyTW9kaWZpZXJzKCk7XG4gICAgdGhpcy50cmFuc2Zvcm1zTWFuYWdlci5wcm9jZXNzU2VxdWVuY2VzKHRoaXMuX2lzRmlyc3RGcmFtZSk7XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmFkZFRyYW5zZm9ybVRvU3R5bGVMaXN0ID0gZnVuY3Rpb24gKHRyYW5zZm9ybSkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAoIXRoaXMuc3R5bGVzTGlzdFtpXS5jbG9zZWQpIHtcbiAgICAgICAgdGhpcy5zdHlsZXNMaXN0W2ldLnRyYW5zZm9ybXMucHVzaCh0cmFuc2Zvcm0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlVHJhbnNmb3JtRnJvbVN0eWxlTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5zdHlsZXNMaXN0Lmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKCF0aGlzLnN0eWxlc0xpc3RbaV0uY2xvc2VkKSB7XG4gICAgICAgIHRoaXMuc3R5bGVzTGlzdFtpXS50cmFuc2Zvcm1zLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY2xvc2VTdHlsZXMgPSBmdW5jdGlvbiAoc3R5bGVzKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHN0eWxlcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHN0eWxlc1tpXS5jbG9zZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuc2VhcmNoU2hhcGVzID0gZnVuY3Rpb24gKGFyciwgaXRlbXNEYXRhLCBwcmV2Vmlld0RhdGEsIHNob3VsZFJlbmRlciwgdHJhbnNmb3Jtcykge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoIC0gMTtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgb3duU3R5bGVzID0gW107XG4gICAgdmFyIG93bk1vZGlmaWVycyA9IFtdO1xuICAgIHZhciBwcm9jZXNzZWRQb3M7XG4gICAgdmFyIG1vZGlmaWVyO1xuICAgIHZhciBjdXJyZW50VHJhbnNmb3JtO1xuICAgIHZhciBvd25UcmFuc2Zvcm1zID0gW10uY29uY2F0KHRyYW5zZm9ybXMpO1xuXG4gICAgZm9yIChpID0gbGVuOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgcHJvY2Vzc2VkUG9zID0gdGhpcy5zZWFyY2hQcm9jZXNzZWRFbGVtZW50KGFycltpXSk7XG5cbiAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgIGFycltpXS5fc2hvdWxkUmVuZGVyID0gc2hvdWxkUmVuZGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbXNEYXRhW2ldID0gcHJldlZpZXdEYXRhW3Byb2Nlc3NlZFBvcyAtIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJyW2ldLnR5ID09PSAnZmwnIHx8IGFycltpXS50eSA9PT0gJ3N0JyB8fCBhcnJbaV0udHkgPT09ICdnZicgfHwgYXJyW2ldLnR5ID09PSAnZ3MnKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgaXRlbXNEYXRhW2ldID0gdGhpcy5jcmVhdGVTdHlsZUVsZW1lbnQoYXJyW2ldLCBvd25UcmFuc2Zvcm1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0uc3R5bGUuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBvd25TdHlsZXMucHVzaChpdGVtc0RhdGFbaV0uc3R5bGUpO1xuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSB0aGlzLmNyZWF0ZUdyb3VwRWxlbWVudChhcnJbaV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGpMZW4gPSBpdGVtc0RhdGFbaV0uaXQubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgaXRlbXNEYXRhW2ldLnByZXZWaWV3RGF0YVtqXSA9IGl0ZW1zRGF0YVtpXS5pdFtqXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlYXJjaFNoYXBlcyhhcnJbaV0uaXQsIGl0ZW1zRGF0YVtpXS5pdCwgaXRlbXNEYXRhW2ldLnByZXZWaWV3RGF0YSwgc2hvdWxkUmVuZGVyLCBvd25UcmFuc2Zvcm1zKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAndHInKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgY3VycmVudFRyYW5zZm9ybSA9IHRoaXMuY3JlYXRlVHJhbnNmb3JtRWxlbWVudChhcnJbaV0pO1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IGN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICAgIH1cblxuICAgICAgICBvd25UcmFuc2Zvcm1zLnB1c2goaXRlbXNEYXRhW2ldKTtcbiAgICAgICAgdGhpcy5hZGRUcmFuc2Zvcm1Ub1N0eWxlTGlzdChpdGVtc0RhdGFbaV0pO1xuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICdzaCcgfHwgYXJyW2ldLnR5ID09PSAncmMnIHx8IGFycltpXS50eSA9PT0gJ2VsJyB8fCBhcnJbaV0udHkgPT09ICdzcicpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSB0aGlzLmNyZWF0ZVNoYXBlRWxlbWVudChhcnJbaV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3RtJyB8fCBhcnJbaV0udHkgPT09ICdyZCcgfHwgYXJyW2ldLnR5ID09PSAncGInIHx8IGFycltpXS50eSA9PT0gJ3p6JyB8fCBhcnJbaV0udHkgPT09ICdvcCcpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBtb2RpZmllciA9IFNoYXBlTW9kaWZpZXJzLmdldE1vZGlmaWVyKGFycltpXS50eSk7XG4gICAgICAgICAgbW9kaWZpZXIuaW5pdCh0aGlzLCBhcnJbaV0pO1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IG1vZGlmaWVyO1xuICAgICAgICAgIHRoaXMuc2hhcGVNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9kaWZpZXIgPSBpdGVtc0RhdGFbaV07XG4gICAgICAgICAgbW9kaWZpZXIuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBvd25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3JwJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIG1vZGlmaWVyID0gU2hhcGVNb2RpZmllcnMuZ2V0TW9kaWZpZXIoYXJyW2ldLnR5KTtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSBtb2RpZmllcjtcbiAgICAgICAgICBtb2RpZmllci5pbml0KHRoaXMsIGFyciwgaSwgaXRlbXNEYXRhKTtcbiAgICAgICAgICB0aGlzLnNoYXBlTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xuICAgICAgICAgIHNob3VsZFJlbmRlciA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZGlmaWVyID0gaXRlbXNEYXRhW2ldO1xuICAgICAgICAgIG1vZGlmaWVyLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBvd25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkUHJvY2Vzc2VkRWxlbWVudChhcnJbaV0sIGkgKyAxKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbW92ZVRyYW5zZm9ybUZyb21TdHlsZUxpc3QoKTtcbiAgICB0aGlzLmNsb3NlU3R5bGVzKG93blN0eWxlcyk7XG4gICAgbGVuID0gb3duTW9kaWZpZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgb3duTW9kaWZpZXJzW2ldLmNsb3NlZCA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50cmFuc2Zvcm1IZWxwZXIub3BhY2l0eSA9IDE7XG4gICAgdGhpcy50cmFuc2Zvcm1IZWxwZXIuX29wTWRmID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJNb2RpZmllcnMoKTtcbiAgICB0aGlzLnRyYW5zZm9ybXNNYW5hZ2VyLnByb2Nlc3NTZXF1ZW5jZXModGhpcy5faXNGaXJzdEZyYW1lKTtcbiAgICB0aGlzLnJlbmRlclNoYXBlKHRoaXMudHJhbnNmb3JtSGVscGVyLCB0aGlzLnNoYXBlc0RhdGEsIHRoaXMuaXRlbXNEYXRhLCB0cnVlKTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVyU2hhcGVUcmFuc2Zvcm0gPSBmdW5jdGlvbiAocGFyZW50VHJhbnNmb3JtLCBncm91cFRyYW5zZm9ybSkge1xuICAgIGlmIChwYXJlbnRUcmFuc2Zvcm0uX29wTWRmIHx8IGdyb3VwVHJhbnNmb3JtLm9wLl9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICBncm91cFRyYW5zZm9ybS5vcGFjaXR5ID0gcGFyZW50VHJhbnNmb3JtLm9wYWNpdHk7XG4gICAgICBncm91cFRyYW5zZm9ybS5vcGFjaXR5ICo9IGdyb3VwVHJhbnNmb3JtLm9wLnY7XG4gICAgICBncm91cFRyYW5zZm9ybS5fb3BNZGYgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuZHJhd0xheWVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBrO1xuICAgIHZhciBrTGVuO1xuICAgIHZhciBlbGVtcztcbiAgICB2YXIgbm9kZXM7XG4gICAgdmFyIHJlbmRlcmVyID0gdGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyO1xuICAgIHZhciBjdHggPSB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dDtcbiAgICB2YXIgdHlwZTtcbiAgICB2YXIgY3VycmVudFN0eWxlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBjdXJyZW50U3R5bGUgPSB0aGlzLnN0eWxlc0xpc3RbaV07XG4gICAgICB0eXBlID0gY3VycmVudFN0eWxlLnR5cGU7IC8vIFNraXBwaW5nIHN0eWxlIHdoZW5cbiAgICAgIC8vIFN0cm9rZSB3aWR0aCBlcXVhbHMgMFxuICAgICAgLy8gc3R5bGUgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCAoZXh0cmEgdW51c2VkIHJlcGVhdGVycylcbiAgICAgIC8vIGN1cnJlbnQgb3BhY2l0eSBlcXVhbHMgMFxuICAgICAgLy8gZ2xvYmFsIG9wYWNpdHkgZXF1YWxzIDBcblxuICAgICAgaWYgKCEoKHR5cGUgPT09ICdzdCcgfHwgdHlwZSA9PT0gJ2dzJykgJiYgY3VycmVudFN0eWxlLndpID09PSAwIHx8ICFjdXJyZW50U3R5bGUuZGF0YS5fc2hvdWxkUmVuZGVyIHx8IGN1cnJlbnRTdHlsZS5jb09wID09PSAwIHx8IHRoaXMuZ2xvYmFsRGF0YS5jdXJyZW50R2xvYmFsQWxwaGEgPT09IDApKSB7XG4gICAgICAgIHJlbmRlcmVyLnNhdmUoKTtcbiAgICAgICAgZWxlbXMgPSBjdXJyZW50U3R5bGUuZWxlbWVudHM7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdCcgfHwgdHlwZSA9PT0gJ2dzJykge1xuICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZVN0eWxlKHR5cGUgPT09ICdzdCcgPyBjdXJyZW50U3R5bGUuY28gOiBjdXJyZW50U3R5bGUuZ3JkKTsgLy8gY3R4LnN0cm9rZVN0eWxlID0gdHlwZSA9PT0gJ3N0JyA/IGN1cnJlbnRTdHlsZS5jbyA6IGN1cnJlbnRTdHlsZS5ncmQ7XG5cbiAgICAgICAgICByZW5kZXJlci5jdHhMaW5lV2lkdGgoY3VycmVudFN0eWxlLndpKTsgLy8gY3R4LmxpbmVXaWR0aCA9IGN1cnJlbnRTdHlsZS53aTtcblxuICAgICAgICAgIHJlbmRlcmVyLmN0eExpbmVDYXAoY3VycmVudFN0eWxlLmxjKTsgLy8gY3R4LmxpbmVDYXAgPSBjdXJyZW50U3R5bGUubGM7XG5cbiAgICAgICAgICByZW5kZXJlci5jdHhMaW5lSm9pbihjdXJyZW50U3R5bGUubGopOyAvLyBjdHgubGluZUpvaW4gPSBjdXJyZW50U3R5bGUubGo7XG5cbiAgICAgICAgICByZW5kZXJlci5jdHhNaXRlckxpbWl0KGN1cnJlbnRTdHlsZS5tbCB8fCAwKTsgLy8gY3R4Lm1pdGVyTGltaXQgPSBjdXJyZW50U3R5bGUubWwgfHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW5kZXJlci5jdHhGaWxsU3R5bGUodHlwZSA9PT0gJ2ZsJyA/IGN1cnJlbnRTdHlsZS5jbyA6IGN1cnJlbnRTdHlsZS5ncmQpOyAvLyBjdHguZmlsbFN0eWxlID0gdHlwZSA9PT0gJ2ZsJyA/IGN1cnJlbnRTdHlsZS5jbyA6IGN1cnJlbnRTdHlsZS5ncmQ7XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJlci5jdHhPcGFjaXR5KGN1cnJlbnRTdHlsZS5jb09wKTtcblxuICAgICAgICBpZiAodHlwZSAhPT0gJ3N0JyAmJiB0eXBlICE9PSAnZ3MnKSB7XG4gICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyZXIuY3R4VHJhbnNmb3JtKGN1cnJlbnRTdHlsZS5wcmVUcmFuc2Zvcm1zLmZpbmFsVHJhbnNmb3JtLnByb3BzKTtcbiAgICAgICAgakxlbiA9IGVsZW1zLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdzdCcgfHwgdHlwZSA9PT0gJ2dzJykge1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFN0eWxlLmRhKSB7XG4gICAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChjdXJyZW50U3R5bGUuZGEpO1xuICAgICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBjdXJyZW50U3R5bGVbXCJkb1wiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBub2RlcyA9IGVsZW1zW2pdLnRyTm9kZXM7XG4gICAgICAgICAga0xlbiA9IG5vZGVzLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBrTGVuOyBrICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChub2Rlc1trXS50ID09PSAnbScpIHtcbiAgICAgICAgICAgICAgY3R4Lm1vdmVUbyhub2Rlc1trXS5wWzBdLCBub2Rlc1trXS5wWzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZXNba10udCA9PT0gJ2MnKSB7XG4gICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKG5vZGVzW2tdLnB0c1swXSwgbm9kZXNba10ucHRzWzFdLCBub2Rlc1trXS5wdHNbMl0sIG5vZGVzW2tdLnB0c1szXSwgbm9kZXNba10ucHRzWzRdLCBub2Rlc1trXS5wdHNbNV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlID09PSAnc3QnIHx8IHR5cGUgPT09ICdncycpIHtcbiAgICAgICAgICAgIC8vIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZSgpO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFN0eWxlLmRhKSB7XG4gICAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaCh0aGlzLmRhc2hSZXNldHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgIT09ICdzdCcgJiYgdHlwZSAhPT0gJ2dzJykge1xuICAgICAgICAgIC8vIGN0eC5maWxsKGN1cnJlbnRTdHlsZS5yKTtcbiAgICAgICAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4RmlsbChjdXJyZW50U3R5bGUucik7XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJlci5yZXN0b3JlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJTaGFwZSA9IGZ1bmN0aW9uIChwYXJlbnRUcmFuc2Zvcm0sIGl0ZW1zLCBkYXRhLCBpc01haW4pIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICB2YXIgZ3JvdXBUcmFuc2Zvcm07XG4gICAgZ3JvdXBUcmFuc2Zvcm0gPSBwYXJlbnRUcmFuc2Zvcm07XG5cbiAgICBmb3IgKGkgPSBsZW47IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAoaXRlbXNbaV0udHkgPT09ICd0cicpIHtcbiAgICAgICAgZ3JvdXBUcmFuc2Zvcm0gPSBkYXRhW2ldLnRyYW5zZm9ybTtcbiAgICAgICAgdGhpcy5yZW5kZXJTaGFwZVRyYW5zZm9ybShwYXJlbnRUcmFuc2Zvcm0sIGdyb3VwVHJhbnNmb3JtKTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNbaV0udHkgPT09ICdzaCcgfHwgaXRlbXNbaV0udHkgPT09ICdlbCcgfHwgaXRlbXNbaV0udHkgPT09ICdyYycgfHwgaXRlbXNbaV0udHkgPT09ICdzcicpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJQYXRoKGl0ZW1zW2ldLCBkYXRhW2ldKTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNbaV0udHkgPT09ICdmbCcpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJGaWxsKGl0ZW1zW2ldLCBkYXRhW2ldLCBncm91cFRyYW5zZm9ybSk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zW2ldLnR5ID09PSAnc3QnKSB7XG4gICAgICAgIHRoaXMucmVuZGVyU3Ryb2tlKGl0ZW1zW2ldLCBkYXRhW2ldLCBncm91cFRyYW5zZm9ybSk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zW2ldLnR5ID09PSAnZ2YnIHx8IGl0ZW1zW2ldLnR5ID09PSAnZ3MnKSB7XG4gICAgICAgIHRoaXMucmVuZGVyR3JhZGllbnRGaWxsKGl0ZW1zW2ldLCBkYXRhW2ldLCBncm91cFRyYW5zZm9ybSk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgIHRoaXMucmVuZGVyU2hhcGUoZ3JvdXBUcmFuc2Zvcm0sIGl0ZW1zW2ldLml0LCBkYXRhW2ldLml0KTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNbaV0udHkgPT09ICd0bScpIHsvL1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc01haW4pIHtcbiAgICAgIHRoaXMuZHJhd0xheWVyKCk7XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJTdHlsZWRTaGFwZSA9IGZ1bmN0aW9uIChzdHlsZWRTaGFwZSwgc2hhcGUpIHtcbiAgICBpZiAodGhpcy5faXNGaXJzdEZyYW1lIHx8IHNoYXBlLl9tZGYgfHwgc3R5bGVkU2hhcGUudHJhbnNmb3Jtcy5fbWRmKSB7XG4gICAgICB2YXIgc2hhcGVOb2RlcyA9IHN0eWxlZFNoYXBlLnRyTm9kZXM7XG4gICAgICB2YXIgcGF0aHMgPSBzaGFwZS5wYXRocztcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbjtcbiAgICAgIHZhciBqO1xuICAgICAgdmFyIGpMZW4gPSBwYXRocy5fbGVuZ3RoO1xuICAgICAgc2hhcGVOb2Rlcy5sZW5ndGggPSAwO1xuICAgICAgdmFyIGdyb3VwVHJhbnNmb3JtTWF0ID0gc3R5bGVkU2hhcGUudHJhbnNmb3Jtcy5maW5hbFRyYW5zZm9ybTtcblxuICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICB2YXIgcGF0aE5vZGVzID0gcGF0aHMuc2hhcGVzW2pdO1xuXG4gICAgICAgIGlmIChwYXRoTm9kZXMgJiYgcGF0aE5vZGVzLnYpIHtcbiAgICAgICAgICBsZW4gPSBwYXRoTm9kZXMuX2xlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGkgPT09IDEpIHtcbiAgICAgICAgICAgICAgc2hhcGVOb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0OiAnbScsXG4gICAgICAgICAgICAgICAgcDogZ3JvdXBUcmFuc2Zvcm1NYXQuYXBwbHlUb1BvaW50QXJyYXkocGF0aE5vZGVzLnZbMF1bMF0sIHBhdGhOb2Rlcy52WzBdWzFdLCAwKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2hhcGVOb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgdDogJ2MnLFxuICAgICAgICAgICAgICBwdHM6IGdyb3VwVHJhbnNmb3JtTWF0LmFwcGx5VG9UcmlwbGVQb2ludHMocGF0aE5vZGVzLm9baSAtIDFdLCBwYXRoTm9kZXMuaVtpXSwgcGF0aE5vZGVzLnZbaV0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGVuID09PSAxKSB7XG4gICAgICAgICAgICBzaGFwZU5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICB0OiAnbScsXG4gICAgICAgICAgICAgIHA6IGdyb3VwVHJhbnNmb3JtTWF0LmFwcGx5VG9Qb2ludEFycmF5KHBhdGhOb2Rlcy52WzBdWzBdLCBwYXRoTm9kZXMudlswXVsxXSwgMClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwYXRoTm9kZXMuYyAmJiBsZW4pIHtcbiAgICAgICAgICAgIHNoYXBlTm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgIHQ6ICdjJyxcbiAgICAgICAgICAgICAgcHRzOiBncm91cFRyYW5zZm9ybU1hdC5hcHBseVRvVHJpcGxlUG9pbnRzKHBhdGhOb2Rlcy5vW2kgLSAxXSwgcGF0aE5vZGVzLmlbMF0sIHBhdGhOb2Rlcy52WzBdKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzaGFwZU5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICB0OiAneidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHlsZWRTaGFwZS50ck5vZGVzID0gc2hhcGVOb2RlcztcbiAgICB9XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlclBhdGggPSBmdW5jdGlvbiAocGF0aERhdGEsIGl0ZW1EYXRhKSB7XG4gICAgaWYgKHBhdGhEYXRhLmhkICE9PSB0cnVlICYmIHBhdGhEYXRhLl9zaG91bGRSZW5kZXIpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGl0ZW1EYXRhLnN0eWxlZFNoYXBlcy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnJlbmRlclN0eWxlZFNoYXBlKGl0ZW1EYXRhLnN0eWxlZFNoYXBlc1tpXSwgaXRlbURhdGEuc2gpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRmlsbCA9IGZ1bmN0aW9uIChzdHlsZURhdGEsIGl0ZW1EYXRhLCBncm91cFRyYW5zZm9ybSkge1xuICAgIHZhciBzdHlsZUVsZW0gPSBpdGVtRGF0YS5zdHlsZTtcblxuICAgIGlmIChpdGVtRGF0YS5jLl9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICBzdHlsZUVsZW0uY28gPSAncmdiKCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlswXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsxXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsyXSkgKyAnKSc7XG4gICAgfVxuXG4gICAgaWYgKGl0ZW1EYXRhLm8uX21kZiB8fCBncm91cFRyYW5zZm9ybS5fb3BNZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICBzdHlsZUVsZW0uY29PcCA9IGl0ZW1EYXRhLm8udiAqIGdyb3VwVHJhbnNmb3JtLm9wYWNpdHk7XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJHcmFkaWVudEZpbGwgPSBmdW5jdGlvbiAoc3R5bGVEYXRhLCBpdGVtRGF0YSwgZ3JvdXBUcmFuc2Zvcm0pIHtcbiAgICB2YXIgc3R5bGVFbGVtID0gaXRlbURhdGEuc3R5bGU7XG4gICAgdmFyIGdyZDtcblxuICAgIGlmICghc3R5bGVFbGVtLmdyZCB8fCBpdGVtRGF0YS5nLl9tZGYgfHwgaXRlbURhdGEucy5fbWRmIHx8IGl0ZW1EYXRhLmUuX21kZiB8fCBzdHlsZURhdGEudCAhPT0gMSAmJiAoaXRlbURhdGEuaC5fbWRmIHx8IGl0ZW1EYXRhLmEuX21kZikpIHtcbiAgICAgIHZhciBjdHggPSB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dDtcbiAgICAgIHZhciBwdDEgPSBpdGVtRGF0YS5zLnY7XG4gICAgICB2YXIgcHQyID0gaXRlbURhdGEuZS52O1xuXG4gICAgICBpZiAoc3R5bGVEYXRhLnQgPT09IDEpIHtcbiAgICAgICAgZ3JkID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KHB0MVswXSwgcHQxWzFdLCBwdDJbMF0sIHB0MlsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmFkID0gTWF0aC5zcXJ0KE1hdGgucG93KHB0MVswXSAtIHB0MlswXSwgMikgKyBNYXRoLnBvdyhwdDFbMV0gLSBwdDJbMV0sIDIpKTtcbiAgICAgICAgdmFyIGFuZyA9IE1hdGguYXRhbjIocHQyWzFdIC0gcHQxWzFdLCBwdDJbMF0gLSBwdDFbMF0pO1xuICAgICAgICB2YXIgcGVyY2VudCA9IGl0ZW1EYXRhLmgudjtcblxuICAgICAgICBpZiAocGVyY2VudCA+PSAxKSB7XG4gICAgICAgICAgcGVyY2VudCA9IDAuOTk7XG4gICAgICAgIH0gZWxzZSBpZiAocGVyY2VudCA8PSAtMSkge1xuICAgICAgICAgIHBlcmNlbnQgPSAtMC45OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaXN0ID0gcmFkICogcGVyY2VudDtcbiAgICAgICAgdmFyIHggPSBNYXRoLmNvcyhhbmcgKyBpdGVtRGF0YS5hLnYpICogZGlzdCArIHB0MVswXTtcbiAgICAgICAgdmFyIHkgPSBNYXRoLnNpbihhbmcgKyBpdGVtRGF0YS5hLnYpICogZGlzdCArIHB0MVsxXTtcbiAgICAgICAgZ3JkID0gY3R4LmNyZWF0ZVJhZGlhbEdyYWRpZW50KHgsIHksIDAsIHB0MVswXSwgcHQxWzFdLCByYWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzdHlsZURhdGEuZy5wO1xuICAgICAgdmFyIGNWYWx1ZXMgPSBpdGVtRGF0YS5nLmM7XG4gICAgICB2YXIgb3BhY2l0eSA9IDE7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoaXRlbURhdGEuZy5faGFzT3BhY2l0eSAmJiBpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSkge1xuICAgICAgICAgIG9wYWNpdHkgPSBpdGVtRGF0YS5nLm9baSAqIDIgKyAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdyZC5hZGRDb2xvclN0b3AoY1ZhbHVlc1tpICogNF0gLyAxMDAsICdyZ2JhKCcgKyBjVmFsdWVzW2kgKiA0ICsgMV0gKyAnLCcgKyBjVmFsdWVzW2kgKiA0ICsgMl0gKyAnLCcgKyBjVmFsdWVzW2kgKiA0ICsgM10gKyAnLCcgKyBvcGFjaXR5ICsgJyknKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVFbGVtLmdyZCA9IGdyZDtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW0uY29PcCA9IGl0ZW1EYXRhLm8udiAqIGdyb3VwVHJhbnNmb3JtLm9wYWNpdHk7XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlclN0cm9rZSA9IGZ1bmN0aW9uIChzdHlsZURhdGEsIGl0ZW1EYXRhLCBncm91cFRyYW5zZm9ybSkge1xuICAgIHZhciBzdHlsZUVsZW0gPSBpdGVtRGF0YS5zdHlsZTtcbiAgICB2YXIgZCA9IGl0ZW1EYXRhLmQ7XG5cbiAgICBpZiAoZCAmJiAoZC5fbWRmIHx8IHRoaXMuX2lzRmlyc3RGcmFtZSkpIHtcbiAgICAgIHN0eWxlRWxlbS5kYSA9IGQuZGFzaEFycmF5O1xuICAgICAgc3R5bGVFbGVtW1wiZG9cIl0gPSBkLmRhc2hvZmZzZXRbMF07XG4gICAgfVxuXG4gICAgaWYgKGl0ZW1EYXRhLmMuX21kZiB8fCB0aGlzLl9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHN0eWxlRWxlbS5jbyA9ICdyZ2IoJyArIGJtRmxvb3IoaXRlbURhdGEuYy52WzBdKSArICcsJyArIGJtRmxvb3IoaXRlbURhdGEuYy52WzFdKSArICcsJyArIGJtRmxvb3IoaXRlbURhdGEuYy52WzJdKSArICcpJztcbiAgICB9XG5cbiAgICBpZiAoaXRlbURhdGEuby5fbWRmIHx8IGdyb3VwVHJhbnNmb3JtLl9vcE1kZiB8fCB0aGlzLl9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHN0eWxlRWxlbS5jb09wID0gaXRlbURhdGEuby52ICogZ3JvdXBUcmFuc2Zvcm0ub3BhY2l0eTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbURhdGEudy5fbWRmIHx8IHRoaXMuX2lzRmlyc3RGcmFtZSkge1xuICAgICAgc3R5bGVFbGVtLndpID0gaXRlbURhdGEudy52O1xuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNoYXBlc0RhdGEgPSBudWxsO1xuICAgIHRoaXMuZ2xvYmFsRGF0YSA9IG51bGw7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoID0gMDtcbiAgICB0aGlzLml0ZW1zRGF0YS5sZW5ndGggPSAwO1xuICB9O1xuXG4gIGZ1bmN0aW9uIENWVGV4dEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMudGV4dFNwYW5zID0gW107XG4gICAgdGhpcy55T2Zmc2V0ID0gMDtcbiAgICB0aGlzLmZpbGxDb2xvckFuaW0gPSBmYWxzZTtcbiAgICB0aGlzLnN0cm9rZUNvbG9yQW5pbSA9IGZhbHNlO1xuICAgIHRoaXMuc3Ryb2tlV2lkdGhBbmltID0gZmFsc2U7XG4gICAgdGhpcy5zdHJva2UgPSBmYWxzZTtcbiAgICB0aGlzLmZpbGwgPSBmYWxzZTtcbiAgICB0aGlzLmp1c3RpZnlPZmZzZXQgPSAwO1xuICAgIHRoaXMuY3VycmVudFJlbmRlciA9IG51bGw7XG4gICAgdGhpcy5yZW5kZXJUeXBlID0gJ2NhbnZhcyc7XG4gICAgdGhpcy52YWx1ZXMgPSB7XG4gICAgICBmaWxsOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICBzdHJva2U6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgIHNXaWR0aDogMCxcbiAgICAgIGZWYWx1ZTogJydcbiAgICB9O1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBDVkJhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVFbGVtZW50LCBJVGV4dEVsZW1lbnRdLCBDVlRleHRFbGVtZW50KTtcbiAgQ1ZUZXh0RWxlbWVudC5wcm90b3R5cGUudEhlbHBlciA9IGNyZWF0ZVRhZygnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKTtcblxuICBDVlRleHRFbGVtZW50LnByb3RvdHlwZS5idWlsZE5ld1RleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRvY3VtZW50RGF0YSA9IHRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhO1xuICAgIHRoaXMucmVuZGVyZWRMZXR0ZXJzID0gY3JlYXRlU2l6ZWRBcnJheShkb2N1bWVudERhdGEubCA/IGRvY3VtZW50RGF0YS5sLmxlbmd0aCA6IDApO1xuICAgIHZhciBoYXNGaWxsID0gZmFsc2U7XG5cbiAgICBpZiAoZG9jdW1lbnREYXRhLmZjKSB7XG4gICAgICBoYXNGaWxsID0gdHJ1ZTtcbiAgICAgIHRoaXMudmFsdWVzLmZpbGwgPSB0aGlzLmJ1aWxkQ29sb3IoZG9jdW1lbnREYXRhLmZjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52YWx1ZXMuZmlsbCA9ICdyZ2JhKDAsMCwwLDApJztcbiAgICB9XG5cbiAgICB0aGlzLmZpbGwgPSBoYXNGaWxsO1xuICAgIHZhciBoYXNTdHJva2UgPSBmYWxzZTtcblxuICAgIGlmIChkb2N1bWVudERhdGEuc2MpIHtcbiAgICAgIGhhc1N0cm9rZSA9IHRydWU7XG4gICAgICB0aGlzLnZhbHVlcy5zdHJva2UgPSB0aGlzLmJ1aWxkQ29sb3IoZG9jdW1lbnREYXRhLnNjKTtcbiAgICAgIHRoaXMudmFsdWVzLnNXaWR0aCA9IGRvY3VtZW50RGF0YS5zdztcbiAgICB9XG5cbiAgICB2YXIgZm9udERhdGEgPSB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Rm9udEJ5TmFtZShkb2N1bWVudERhdGEuZik7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcbiAgICB2YXIgbGV0dGVycyA9IGRvY3VtZW50RGF0YS5sO1xuICAgIHZhciBtYXRyaXhIZWxwZXIgPSB0aGlzLm1IZWxwZXI7XG4gICAgdGhpcy5zdHJva2UgPSBoYXNTdHJva2U7XG4gICAgdGhpcy52YWx1ZXMuZlZhbHVlID0gZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSArICdweCAnICsgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHk7XG4gICAgbGVuID0gZG9jdW1lbnREYXRhLmZpbmFsVGV4dC5sZW5ndGg7IC8vIHRoaXMudEhlbHBlci5mb250ID0gdGhpcy52YWx1ZXMuZlZhbHVlO1xuXG4gICAgdmFyIGNoYXJEYXRhO1xuICAgIHZhciBzaGFwZURhdGE7XG4gICAgdmFyIGs7XG4gICAgdmFyIGtMZW47XG4gICAgdmFyIHNoYXBlcztcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgcGF0aE5vZGVzO1xuICAgIHZhciBjb21tYW5kcztcbiAgICB2YXIgcGF0aEFycjtcbiAgICB2YXIgc2luZ2xlU2hhcGUgPSB0aGlzLmRhdGEuc2luZ2xlU2hhcGU7XG4gICAgdmFyIHRyYWNraW5nT2Zmc2V0ID0gZG9jdW1lbnREYXRhLnRyICogMC4wMDEgKiBkb2N1bWVudERhdGEuZmluYWxTaXplO1xuICAgIHZhciB4UG9zID0gMDtcbiAgICB2YXIgeVBvcyA9IDA7XG4gICAgdmFyIGZpcnN0TGluZSA9IHRydWU7XG4gICAgdmFyIGNudCA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGNoYXJEYXRhID0gdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldENoYXJEYXRhKGRvY3VtZW50RGF0YS5maW5hbFRleHRbaV0sIGZvbnREYXRhLmZTdHlsZSwgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHkpO1xuICAgICAgc2hhcGVEYXRhID0gY2hhckRhdGEgJiYgY2hhckRhdGEuZGF0YSB8fCB7fTtcbiAgICAgIG1hdHJpeEhlbHBlci5yZXNldCgpO1xuXG4gICAgICBpZiAoc2luZ2xlU2hhcGUgJiYgbGV0dGVyc1tpXS5uKSB7XG4gICAgICAgIHhQb3MgPSAtdHJhY2tpbmdPZmZzZXQ7XG4gICAgICAgIHlQb3MgKz0gZG9jdW1lbnREYXRhLnlPZmZzZXQ7XG4gICAgICAgIHlQb3MgKz0gZmlyc3RMaW5lID8gMSA6IDA7XG4gICAgICAgIGZpcnN0TGluZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBzaGFwZXMgPSBzaGFwZURhdGEuc2hhcGVzID8gc2hhcGVEYXRhLnNoYXBlc1swXS5pdCA6IFtdO1xuICAgICAgakxlbiA9IHNoYXBlcy5sZW5ndGg7XG4gICAgICBtYXRyaXhIZWxwZXIuc2NhbGUoZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMCwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMCk7XG5cbiAgICAgIGlmIChzaW5nbGVTaGFwZSkge1xuICAgICAgICB0aGlzLmFwcGx5VGV4dFByb3BlcnRpZXNUb01hdHJpeChkb2N1bWVudERhdGEsIG1hdHJpeEhlbHBlciwgbGV0dGVyc1tpXS5saW5lLCB4UG9zLCB5UG9zKTtcbiAgICAgIH1cblxuICAgICAgY29tbWFuZHMgPSBjcmVhdGVTaXplZEFycmF5KGpMZW4gLSAxKTtcbiAgICAgIHZhciBjb21tYW5kc0NvdW50ZXIgPSAwO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgIGlmIChzaGFwZXNbal0udHkgPT09ICdzaCcpIHtcbiAgICAgICAgICBrTGVuID0gc2hhcGVzW2pdLmtzLmsuaS5sZW5ndGg7XG4gICAgICAgICAgcGF0aE5vZGVzID0gc2hhcGVzW2pdLmtzLms7XG4gICAgICAgICAgcGF0aEFyciA9IFtdO1xuXG4gICAgICAgICAgZm9yIChrID0gMTsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGsgPT09IDEpIHtcbiAgICAgICAgICAgICAgcGF0aEFyci5wdXNoKG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMudlswXVswXSwgcGF0aE5vZGVzLnZbMF1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLnZbMF1bMF0sIHBhdGhOb2Rlcy52WzBdWzFdLCAwKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhdGhBcnIucHVzaChtYXRyaXhIZWxwZXIuYXBwbHlUb1gocGF0aE5vZGVzLm9bayAtIDFdWzBdLCBwYXRoTm9kZXMub1trIC0gMV1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLm9bayAtIDFdWzBdLCBwYXRoTm9kZXMub1trIC0gMV1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1gocGF0aE5vZGVzLmlba11bMF0sIHBhdGhOb2Rlcy5pW2tdWzFdLCAwKSwgbWF0cml4SGVscGVyLmFwcGx5VG9ZKHBhdGhOb2Rlcy5pW2tdWzBdLCBwYXRoTm9kZXMuaVtrXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMudltrXVswXSwgcGF0aE5vZGVzLnZba11bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLnZba11bMF0sIHBhdGhOb2Rlcy52W2tdWzFdLCAwKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aEFyci5wdXNoKG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMub1trIC0gMV1bMF0sIHBhdGhOb2Rlcy5vW2sgLSAxXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMub1trIC0gMV1bMF0sIHBhdGhOb2Rlcy5vW2sgLSAxXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMuaVswXVswXSwgcGF0aE5vZGVzLmlbMF1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLmlbMF1bMF0sIHBhdGhOb2Rlcy5pWzBdWzFdLCAwKSwgbWF0cml4SGVscGVyLmFwcGx5VG9YKHBhdGhOb2Rlcy52WzBdWzBdLCBwYXRoTm9kZXMudlswXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMudlswXVswXSwgcGF0aE5vZGVzLnZbMF1bMV0sIDApKTtcbiAgICAgICAgICBjb21tYW5kc1tjb21tYW5kc0NvdW50ZXJdID0gcGF0aEFycjtcbiAgICAgICAgICBjb21tYW5kc0NvdW50ZXIgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2luZ2xlU2hhcGUpIHtcbiAgICAgICAgeFBvcyArPSBsZXR0ZXJzW2ldLmw7XG4gICAgICAgIHhQb3MgKz0gdHJhY2tpbmdPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnRleHRTcGFuc1tjbnRdKSB7XG4gICAgICAgIHRoaXMudGV4dFNwYW5zW2NudF0uZWxlbSA9IGNvbW1hbmRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50ZXh0U3BhbnNbY250XSA9IHtcbiAgICAgICAgICBlbGVtOiBjb21tYW5kc1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBjbnQgKz0gMTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZUZXh0RWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudmFsaWRhdGVUZXh0KCk7XG4gICAgdmFyIGN0eCA9IHRoaXMuY2FudmFzQ29udGV4dDtcbiAgICBjdHguZm9udCA9IHRoaXMudmFsdWVzLmZWYWx1ZTtcbiAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4TGluZUNhcCgnYnV0dCcpOyAvLyBjdHgubGluZUNhcCA9ICdidXR0JztcblxuICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5jdHhMaW5lSm9pbignbWl0ZXInKTsgLy8gY3R4LmxpbmVKb2luID0gJ21pdGVyJztcblxuICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5jdHhNaXRlckxpbWl0KDQpOyAvLyBjdHgubWl0ZXJMaW1pdCA9IDQ7XG5cbiAgICBpZiAoIXRoaXMuZGF0YS5zaW5nbGVTaGFwZSkge1xuICAgICAgdGhpcy50ZXh0QW5pbWF0b3IuZ2V0TWVhc3VyZXModGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGEsIHRoaXMubGV0dGVyc0NoYW5nZWRGbGFnKTtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBrO1xuICAgIHZhciBrTGVuO1xuICAgIHZhciByZW5kZXJlZExldHRlcnMgPSB0aGlzLnRleHRBbmltYXRvci5yZW5kZXJlZExldHRlcnM7XG4gICAgdmFyIGxldHRlcnMgPSB0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sO1xuICAgIGxlbiA9IGxldHRlcnMubGVuZ3RoO1xuICAgIHZhciByZW5kZXJlZExldHRlcjtcbiAgICB2YXIgbGFzdEZpbGwgPSBudWxsO1xuICAgIHZhciBsYXN0U3Ryb2tlID0gbnVsbDtcbiAgICB2YXIgbGFzdFN0cm9rZVcgPSBudWxsO1xuICAgIHZhciBjb21tYW5kcztcbiAgICB2YXIgcGF0aEFycjtcbiAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICghbGV0dGVyc1tpXS5uKSB7XG4gICAgICAgIHJlbmRlcmVkTGV0dGVyID0gcmVuZGVyZWRMZXR0ZXJzW2ldO1xuXG4gICAgICAgIGlmIChyZW5kZXJlZExldHRlcikge1xuICAgICAgICAgIHJlbmRlcmVyLnNhdmUoKTtcbiAgICAgICAgICByZW5kZXJlci5jdHhUcmFuc2Zvcm0ocmVuZGVyZWRMZXR0ZXIucCk7XG4gICAgICAgICAgcmVuZGVyZXIuY3R4T3BhY2l0eShyZW5kZXJlZExldHRlci5vKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmZpbGwpIHtcbiAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIgJiYgcmVuZGVyZWRMZXR0ZXIuZmMpIHtcbiAgICAgICAgICAgIGlmIChsYXN0RmlsbCAhPT0gcmVuZGVyZWRMZXR0ZXIuZmMpIHtcbiAgICAgICAgICAgICAgcmVuZGVyZXIuY3R4RmlsbFN0eWxlKHJlbmRlcmVkTGV0dGVyLmZjKTtcbiAgICAgICAgICAgICAgbGFzdEZpbGwgPSByZW5kZXJlZExldHRlci5mYzsgLy8gY3R4LmZpbGxTdHlsZSA9IHJlbmRlcmVkTGV0dGVyLmZjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAobGFzdEZpbGwgIT09IHRoaXMudmFsdWVzLmZpbGwpIHtcbiAgICAgICAgICAgIGxhc3RGaWxsID0gdGhpcy52YWx1ZXMuZmlsbDtcbiAgICAgICAgICAgIHJlbmRlcmVyLmN0eEZpbGxTdHlsZSh0aGlzLnZhbHVlcy5maWxsKTsgLy8gY3R4LmZpbGxTdHlsZSA9IHRoaXMudmFsdWVzLmZpbGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29tbWFuZHMgPSB0aGlzLnRleHRTcGFuc1tpXS5lbGVtO1xuICAgICAgICAgIGpMZW4gPSBjb21tYW5kcy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBwYXRoQXJyID0gY29tbWFuZHNbal07XG4gICAgICAgICAgICBrTGVuID0gcGF0aEFyci5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5tb3ZlVG8ocGF0aEFyclswXSwgcGF0aEFyclsxXSk7XG5cbiAgICAgICAgICAgIGZvciAoayA9IDI7IGsgPCBrTGVuOyBrICs9IDYpIHtcbiAgICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmV6aWVyQ3VydmVUbyhwYXRoQXJyW2tdLCBwYXRoQXJyW2sgKyAxXSwgcGF0aEFycltrICsgMl0sIHBhdGhBcnJbayArIDNdLCBwYXRoQXJyW2sgKyA0XSwgcGF0aEFycltrICsgNV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIHJlbmRlcmVyLmN0eEZpbGwoKTsgLy8gdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuZmlsbCgpO1xuICAgICAgICAgIC8vLyBjdHguZmlsbFRleHQodGhpcy50ZXh0U3BhbnNbaV0udmFsLDAsMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdHJva2UpIHtcbiAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIgJiYgcmVuZGVyZWRMZXR0ZXIuc3cpIHtcbiAgICAgICAgICAgIGlmIChsYXN0U3Ryb2tlVyAhPT0gcmVuZGVyZWRMZXR0ZXIuc3cpIHtcbiAgICAgICAgICAgICAgbGFzdFN0cm9rZVcgPSByZW5kZXJlZExldHRlci5zdztcbiAgICAgICAgICAgICAgcmVuZGVyZXIuY3R4TGluZVdpZHRoKHJlbmRlcmVkTGV0dGVyLnN3KTsgLy8gY3R4LmxpbmVXaWR0aCA9IHJlbmRlcmVkTGV0dGVyLnN3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAobGFzdFN0cm9rZVcgIT09IHRoaXMudmFsdWVzLnNXaWR0aCkge1xuICAgICAgICAgICAgbGFzdFN0cm9rZVcgPSB0aGlzLnZhbHVlcy5zV2lkdGg7XG4gICAgICAgICAgICByZW5kZXJlci5jdHhMaW5lV2lkdGgodGhpcy52YWx1ZXMuc1dpZHRoKTsgLy8gY3R4LmxpbmVXaWR0aCA9IHRoaXMudmFsdWVzLnNXaWR0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIgJiYgcmVuZGVyZWRMZXR0ZXIuc2MpIHtcbiAgICAgICAgICAgIGlmIChsYXN0U3Ryb2tlICE9PSByZW5kZXJlZExldHRlci5zYykge1xuICAgICAgICAgICAgICBsYXN0U3Ryb2tlID0gcmVuZGVyZWRMZXR0ZXIuc2M7XG4gICAgICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZVN0eWxlKHJlbmRlcmVkTGV0dGVyLnNjKTsgLy8gY3R4LnN0cm9rZVN0eWxlID0gcmVuZGVyZWRMZXR0ZXIuc2M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChsYXN0U3Ryb2tlICE9PSB0aGlzLnZhbHVlcy5zdHJva2UpIHtcbiAgICAgICAgICAgIGxhc3RTdHJva2UgPSB0aGlzLnZhbHVlcy5zdHJva2U7XG4gICAgICAgICAgICByZW5kZXJlci5jdHhTdHJva2VTdHlsZSh0aGlzLnZhbHVlcy5zdHJva2UpOyAvLyBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnZhbHVlcy5zdHJva2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29tbWFuZHMgPSB0aGlzLnRleHRTcGFuc1tpXS5lbGVtO1xuICAgICAgICAgIGpMZW4gPSBjb21tYW5kcy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBwYXRoQXJyID0gY29tbWFuZHNbal07XG4gICAgICAgICAgICBrTGVuID0gcGF0aEFyci5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5tb3ZlVG8ocGF0aEFyclswXSwgcGF0aEFyclsxXSk7XG5cbiAgICAgICAgICAgIGZvciAoayA9IDI7IGsgPCBrTGVuOyBrICs9IDYpIHtcbiAgICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmV6aWVyQ3VydmVUbyhwYXRoQXJyW2tdLCBwYXRoQXJyW2sgKyAxXSwgcGF0aEFycltrICsgMl0sIHBhdGhBcnJbayArIDNdLCBwYXRoQXJyW2sgKyA0XSwgcGF0aEFycltrICsgNV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZSgpOyAvLyB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICAvLy8gY3R4LnN0cm9rZVRleHQobGV0dGVyc1tpXS52YWwsMCwwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXJlZExldHRlcikge1xuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gQ1ZJbWFnZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuYXNzZXREYXRhID0gZ2xvYmFsRGF0YS5nZXRBc3NldERhdGEoZGF0YS5yZWZJZCk7XG4gICAgdGhpcy5pbWcgPSBnbG9iYWxEYXRhLmltYWdlTG9hZGVyLmdldEFzc2V0KHRoaXMuYXNzZXREYXRhKTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgQ1ZCYXNlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRWxlbWVudF0sIENWSW1hZ2VFbGVtZW50KTtcbiAgQ1ZJbWFnZUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50ID0gU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5pbml0RWxlbWVudDtcbiAgQ1ZJbWFnZUVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZSA9IElJbWFnZUVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZTtcblxuICBDVkltYWdlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pbWcud2lkdGggJiYgKHRoaXMuYXNzZXREYXRhLncgIT09IHRoaXMuaW1nLndpZHRoIHx8IHRoaXMuYXNzZXREYXRhLmggIT09IHRoaXMuaW1nLmhlaWdodCkpIHtcbiAgICAgIHZhciBjYW52YXMgPSBjcmVhdGVUYWcoJ2NhbnZhcycpO1xuICAgICAgY2FudmFzLndpZHRoID0gdGhpcy5hc3NldERhdGEudztcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSB0aGlzLmFzc2V0RGF0YS5oO1xuICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgdmFyIGltZ1cgPSB0aGlzLmltZy53aWR0aDtcbiAgICAgIHZhciBpbWdIID0gdGhpcy5pbWcuaGVpZ2h0O1xuICAgICAgdmFyIGltZ1JlbCA9IGltZ1cgLyBpbWdIO1xuICAgICAgdmFyIGNhbnZhc1JlbCA9IHRoaXMuYXNzZXREYXRhLncgLyB0aGlzLmFzc2V0RGF0YS5oO1xuICAgICAgdmFyIHdpZHRoQ3JvcDtcbiAgICAgIHZhciBoZWlnaHRDcm9wO1xuICAgICAgdmFyIHBhciA9IHRoaXMuYXNzZXREYXRhLnByIHx8IHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvO1xuXG4gICAgICBpZiAoaW1nUmVsID4gY2FudmFzUmVsICYmIHBhciA9PT0gJ3hNaWRZTWlkIHNsaWNlJyB8fCBpbWdSZWwgPCBjYW52YXNSZWwgJiYgcGFyICE9PSAneE1pZFlNaWQgc2xpY2UnKSB7XG4gICAgICAgIGhlaWdodENyb3AgPSBpbWdIO1xuICAgICAgICB3aWR0aENyb3AgPSBoZWlnaHRDcm9wICogY2FudmFzUmVsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2lkdGhDcm9wID0gaW1nVztcbiAgICAgICAgaGVpZ2h0Q3JvcCA9IHdpZHRoQ3JvcCAvIGNhbnZhc1JlbDtcbiAgICAgIH1cblxuICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmltZywgKGltZ1cgLSB3aWR0aENyb3ApIC8gMiwgKGltZ0ggLSBoZWlnaHRDcm9wKSAvIDIsIHdpZHRoQ3JvcCwgaGVpZ2h0Q3JvcCwgMCwgMCwgdGhpcy5hc3NldERhdGEudywgdGhpcy5hc3NldERhdGEuaCk7XG4gICAgICB0aGlzLmltZyA9IGNhbnZhcztcbiAgICB9XG4gIH07XG5cbiAgQ1ZJbWFnZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuZHJhd0ltYWdlKHRoaXMuaW1nLCAwLCAwKTtcbiAgfTtcblxuICBDVkltYWdlRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmltZyA9IG51bGw7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ1ZTb2xpZEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBDVkJhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVFbGVtZW50XSwgQ1ZTb2xpZEVsZW1lbnQpO1xuICBDVlNvbGlkRWxlbWVudC5wcm90b3R5cGUuaW5pdEVsZW1lbnQgPSBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50O1xuICBDVlNvbGlkRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gSUltYWdlRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lO1xuXG4gIENWU29saWRFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gdmFyIGN0eCA9IHRoaXMuY2FudmFzQ29udGV4dDtcbiAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4RmlsbFN0eWxlKHRoaXMuZGF0YS5zYyk7IC8vIGN0eC5maWxsU3R5bGUgPSB0aGlzLmRhdGEuc2M7XG5cbiAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4RmlsbFJlY3QoMCwgMCwgdGhpcy5kYXRhLnN3LCB0aGlzLmRhdGEuc2gpOyAvLyBjdHguZmlsbFJlY3QoMCwgMCwgdGhpcy5kYXRhLnN3LCB0aGlzLmRhdGEuc2gpO1xuICAgIC8vXG4gIH07XG5cbiAgZnVuY3Rpb24gQ2FudmFzUmVuZGVyZXJCYXNlKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VSZW5kZXJlcl0sIENhbnZhc1JlbmRlcmVyQmFzZSk7XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVTaGFwZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVlNoYXBlRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlVGV4dCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVlRleHRFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVJbWFnZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVkltYWdlRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlU29saWQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgQ1ZTb2xpZEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZU51bGwgPSBTVkdSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlTnVsbDtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmN0eFRyYW5zZm9ybSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9wc1swXSA9PT0gMSAmJiBwcm9wc1sxXSA9PT0gMCAmJiBwcm9wc1s0XSA9PT0gMCAmJiBwcm9wc1s1XSA9PT0gMSAmJiBwcm9wc1sxMl0gPT09IDAgJiYgcHJvcHNbMTNdID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jYW52YXNDb250ZXh0LnRyYW5zZm9ybShwcm9wc1swXSwgcHJvcHNbMV0sIHByb3BzWzRdLCBwcm9wc1s1XSwgcHJvcHNbMTJdLCBwcm9wc1sxM10pO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4T3BhY2l0eSA9IGZ1bmN0aW9uIChvcCkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5nbG9iYWxBbHBoYSAqPSBvcCA8IDAgPyAwIDogb3A7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhGaWxsU3R5bGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuZmlsbFN0eWxlID0gdmFsdWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhTdHJva2VTdHlsZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5zdHJva2VTdHlsZSA9IHZhbHVlO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4TGluZVdpZHRoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LmxpbmVXaWR0aCA9IHZhbHVlO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4TGluZUNhcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5saW5lQ2FwID0gdmFsdWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhMaW5lSm9pbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5saW5lSm9pbiA9IHZhbHVlO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4TWl0ZXJMaW1pdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5taXRlckxpbWl0ID0gdmFsdWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhGaWxsID0gZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuZmlsbChydWxlKTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmN0eEZpbGxSZWN0ID0gZnVuY3Rpb24gKHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuZmlsbFJlY3QoeCwgeSwgdywgaCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhTdHJva2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LnN0cm9rZSgpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnJlbmRlckNvbmZpZy5jbGVhckNhbnZhcykge1xuICAgICAgdGhpcy5jYW52YXNDb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRleHREYXRhLnJlc2V0KCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5zYXZlKCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gKGFjdGlvbkZsYWcpIHtcbiAgICBpZiAoIXRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQucmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChhY3Rpb25GbGFnKSB7XG4gICAgICB0aGlzLmdsb2JhbERhdGEuYmxlbmRNb2RlID0gJ3NvdXJjZS1vdmVyJztcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRleHREYXRhLnJlc3RvcmUoYWN0aW9uRmxhZyk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jb25maWdBbmltYXRpb24gPSBmdW5jdGlvbiAoYW5pbURhdGEpIHtcbiAgICBpZiAodGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIgPSBjcmVhdGVUYWcoJ2NhbnZhcycpO1xuICAgICAgdmFyIGNvbnRhaW5lclN0eWxlID0gdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5zdHlsZTtcbiAgICAgIGNvbnRhaW5lclN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgY29udGFpbmVyU3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgdmFyIG9yaWdpbiA9ICcwcHggMHB4IDBweCc7XG4gICAgICBjb250YWluZXJTdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICBjb250YWluZXJTdHlsZS5tb3pUcmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICBjb250YWluZXJTdHlsZS53ZWJraXRUcmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICBjb250YWluZXJTdHlsZVsnLXdlYmtpdC10cmFuc2Zvcm0nXSA9IG9yaWdpbjtcbiAgICAgIGNvbnRhaW5lclN0eWxlLmNvbnRlbnRWaXNpYmlsaXR5ID0gdGhpcy5yZW5kZXJDb25maWcuY29udGVudFZpc2liaWxpdHk7XG4gICAgICB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyKTtcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dCA9IHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmNsYXNzTmFtZSkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuaWQpIHtcbiAgICAgICAgdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5yZW5kZXJDb25maWcuaWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQgPSB0aGlzLnJlbmRlckNvbmZpZy5jb250ZXh0O1xuICAgIH1cblxuICAgIHRoaXMuY29udGV4dERhdGEuc2V0Q29udGV4dCh0aGlzLmNhbnZhc0NvbnRleHQpO1xuICAgIHRoaXMuZGF0YSA9IGFuaW1EYXRhO1xuICAgIHRoaXMubGF5ZXJzID0gYW5pbURhdGEubGF5ZXJzO1xuICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzID0ge1xuICAgICAgdzogYW5pbURhdGEudyxcbiAgICAgIGg6IGFuaW1EYXRhLmgsXG4gICAgICBzeDogMCxcbiAgICAgIHN5OiAwLFxuICAgICAgdHg6IDAsXG4gICAgICB0eTogMFxuICAgIH07XG4gICAgdGhpcy5zZXR1cEdsb2JhbERhdGEoYW5pbURhdGEsIGRvY3VtZW50LmJvZHkpO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0ID0gdGhpcy5jYW52YXNDb250ZXh0O1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlciA9IHRoaXM7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmlzRGFzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnByb2dyZXNzaXZlTG9hZCA9IHRoaXMucmVuZGVyQ29uZmlnLnByb2dyZXNzaXZlTG9hZDtcbiAgICB0aGlzLmdsb2JhbERhdGEudHJhbnNmb3JtQ2FudmFzID0gdGhpcy50cmFuc2Zvcm1DYW52YXM7XG4gICAgdGhpcy5lbGVtZW50cyA9IGNyZWF0ZVNpemVkQXJyYXkoYW5pbURhdGEubGF5ZXJzLmxlbmd0aCk7XG4gICAgdGhpcy51cGRhdGVDb250YWluZXJTaXplKCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS51cGRhdGVDb250YWluZXJTaXplID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdmFyIGVsZW1lbnRXaWR0aDtcbiAgICB2YXIgZWxlbWVudEhlaWdodDtcblxuICAgIGlmICh3aWR0aCkge1xuICAgICAgZWxlbWVudFdpZHRoID0gd2lkdGg7XG4gICAgICBlbGVtZW50SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgdGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcy53aWR0aCA9IGVsZW1lbnRXaWR0aDtcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5jYW52YXMuaGVpZ2h0ID0gZWxlbWVudEhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyICYmIHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIpIHtcbiAgICAgICAgZWxlbWVudFdpZHRoID0gdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgIGVsZW1lbnRIZWlnaHQgPSB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5vZmZzZXRIZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50V2lkdGggPSB0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLndpZHRoO1xuICAgICAgICBlbGVtZW50SGVpZ2h0ID0gdGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcy5oZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5jYW52YXMud2lkdGggPSBlbGVtZW50V2lkdGggKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLmhlaWdodCA9IGVsZW1lbnRIZWlnaHQgKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnRSZWw7XG4gICAgdmFyIGFuaW1hdGlvblJlbDtcblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvLmluZGV4T2YoJ21lZXQnKSAhPT0gLTEgfHwgdGhpcy5yZW5kZXJDb25maWcucHJlc2VydmVBc3BlY3RSYXRpby5pbmRleE9mKCdzbGljZScpICE9PSAtMSkge1xuICAgICAgdmFyIHBhciA9IHRoaXMucmVuZGVyQ29uZmlnLnByZXNlcnZlQXNwZWN0UmF0aW8uc3BsaXQoJyAnKTtcbiAgICAgIHZhciBmaWxsVHlwZSA9IHBhclsxXSB8fCAnbWVldCc7XG4gICAgICB2YXIgcG9zID0gcGFyWzBdIHx8ICd4TWlkWU1pZCc7XG4gICAgICB2YXIgeFBvcyA9IHBvcy5zdWJzdHIoMCwgNCk7XG4gICAgICB2YXIgeVBvcyA9IHBvcy5zdWJzdHIoNCk7XG4gICAgICBlbGVtZW50UmVsID0gZWxlbWVudFdpZHRoIC8gZWxlbWVudEhlaWdodDtcbiAgICAgIGFuaW1hdGlvblJlbCA9IHRoaXMudHJhbnNmb3JtQ2FudmFzLncgLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oO1xuXG4gICAgICBpZiAoYW5pbWF0aW9uUmVsID4gZWxlbWVudFJlbCAmJiBmaWxsVHlwZSA9PT0gJ21lZXQnIHx8IGFuaW1hdGlvblJlbCA8IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdzbGljZScpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMuc3ggPSBlbGVtZW50V2lkdGggLyAodGhpcy50cmFuc2Zvcm1DYW52YXMudyAvIHRoaXMucmVuZGVyQ29uZmlnLmRwcik7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN5ID0gZWxlbWVudFdpZHRoIC8gKHRoaXMudHJhbnNmb3JtQ2FudmFzLncgLyB0aGlzLnJlbmRlckNvbmZpZy5kcHIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMuc3ggPSBlbGVtZW50SGVpZ2h0IC8gKHRoaXMudHJhbnNmb3JtQ2FudmFzLmggLyB0aGlzLnJlbmRlckNvbmZpZy5kcHIpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeSA9IGVsZW1lbnRIZWlnaHQgLyAodGhpcy50cmFuc2Zvcm1DYW52YXMuaCAvIHRoaXMucmVuZGVyQ29uZmlnLmRwcik7XG4gICAgICB9XG5cbiAgICAgIGlmICh4UG9zID09PSAneE1pZCcgJiYgKGFuaW1hdGlvblJlbCA8IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdtZWV0JyB8fCBhbmltYXRpb25SZWwgPiBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnc2xpY2UnKSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCA9IChlbGVtZW50V2lkdGggLSB0aGlzLnRyYW5zZm9ybUNhbnZhcy53ICogKGVsZW1lbnRIZWlnaHQgLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oKSkgLyAyICogdGhpcy5yZW5kZXJDb25maWcuZHByO1xuICAgICAgfSBlbHNlIGlmICh4UG9zID09PSAneE1heCcgJiYgKGFuaW1hdGlvblJlbCA8IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdtZWV0JyB8fCBhbmltYXRpb25SZWwgPiBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnc2xpY2UnKSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCA9IChlbGVtZW50V2lkdGggLSB0aGlzLnRyYW5zZm9ybUNhbnZhcy53ICogKGVsZW1lbnRIZWlnaHQgLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oKSkgKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmICh5UG9zID09PSAnWU1pZCcgJiYgKGFuaW1hdGlvblJlbCA+IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdtZWV0JyB8fCBhbmltYXRpb25SZWwgPCBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnc2xpY2UnKSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSA9IChlbGVtZW50SGVpZ2h0IC0gdGhpcy50cmFuc2Zvcm1DYW52YXMuaCAqIChlbGVtZW50V2lkdGggLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy53KSkgLyAyICogdGhpcy5yZW5kZXJDb25maWcuZHByO1xuICAgICAgfSBlbHNlIGlmICh5UG9zID09PSAnWU1heCcgJiYgKGFuaW1hdGlvblJlbCA+IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdtZWV0JyB8fCBhbmltYXRpb25SZWwgPCBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnc2xpY2UnKSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSA9IChlbGVtZW50SGVpZ2h0IC0gdGhpcy50cmFuc2Zvcm1DYW52YXMuaCAqIChlbGVtZW50V2lkdGggLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy53KSkgKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnJlbmRlckNvbmZpZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvID09PSAnbm9uZScpIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN4ID0gZWxlbWVudFdpZHRoIC8gKHRoaXMudHJhbnNmb3JtQ2FudmFzLncgLyB0aGlzLnJlbmRlckNvbmZpZy5kcHIpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMuc3kgPSBlbGVtZW50SGVpZ2h0IC8gKHRoaXMudHJhbnNmb3JtQ2FudmFzLmggLyB0aGlzLnJlbmRlckNvbmZpZy5kcHIpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMudHggPSAwO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMudHkgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeCA9IHRoaXMucmVuZGVyQ29uZmlnLmRwcjtcbiAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN5ID0gdGhpcy5yZW5kZXJDb25maWcuZHByO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMudHggPSAwO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMudHkgPSAwO1xuICAgIH1cblxuICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnByb3BzID0gW3RoaXMudHJhbnNmb3JtQ2FudmFzLnN4LCAwLCAwLCAwLCAwLCB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeSwgMCwgMCwgMCwgMCwgMSwgMCwgdGhpcy50cmFuc2Zvcm1DYW52YXMudHgsIHRoaXMudHJhbnNmb3JtQ2FudmFzLnR5LCAwLCAxXTtcbiAgICAvKiB2YXIgaSwgbGVuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7XHJcbiAgICAgIGZvcihpPTA7aTxsZW47aSs9MSl7XHJcbiAgICAgICAgICBpZih0aGlzLmVsZW1lbnRzW2ldICYmIHRoaXMuZWxlbWVudHNbaV0uZGF0YS50eSA9PT0gMCl7XHJcbiAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5yZXNpemUodGhpcy5nbG9iYWxEYXRhLnRyYW5zZm9ybUNhbnZhcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0gKi9cblxuICAgIHRoaXMuY3R4VHJhbnNmb3JtKHRoaXMudHJhbnNmb3JtQ2FudmFzLnByb3BzKTtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LnJlY3QoMCwgMCwgdGhpcy50cmFuc2Zvcm1DYW52YXMudywgdGhpcy50cmFuc2Zvcm1DYW52YXMuaCk7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5jbGlwKCk7XG4gICAgdGhpcy5yZW5kZXJGcmFtZSh0aGlzLnJlbmRlcmVkRnJhbWUsIHRydWUpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXMgJiYgdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyLmlubmVyVGV4dCA9ICcnO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycyA/IHRoaXMubGF5ZXJzLmxlbmd0aCA6IDA7XG5cbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0gJiYgdGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0uZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dCA9IG51bGw7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lciA9IG51bGw7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAobnVtLCBmb3JjZVJlbmRlcikge1xuICAgIGlmICh0aGlzLnJlbmRlcmVkRnJhbWUgPT09IG51bSAmJiB0aGlzLnJlbmRlckNvbmZpZy5jbGVhckNhbnZhcyA9PT0gdHJ1ZSAmJiAhZm9yY2VSZW5kZXIgfHwgdGhpcy5kZXN0cm95ZWQgfHwgbnVtID09PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IG51bTtcbiAgICB0aGlzLmdsb2JhbERhdGEuZnJhbWVOdW0gPSBudW0gLSB0aGlzLmFuaW1hdGlvbkl0ZW0uX2lzRmlyc3RGcmFtZTtcbiAgICB0aGlzLmdsb2JhbERhdGEuZnJhbWVJZCArPSAxO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5fbWRmID0gIXRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzIHx8IGZvcmNlUmVuZGVyO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlLmN1cnJlbnRGcmFtZSA9IG51bTsgLy8gY29uc29sZS5sb2coJy0tLS0tLS0tJyk7XG4gICAgLy8gY29uc29sZS5sb2coJ05FVzogJyxudW0pO1xuXG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcblxuICAgIGlmICghdGhpcy5jb21wbGV0ZUxheWVycykge1xuICAgICAgdGhpcy5jaGVja0xheWVycyhudW0pO1xuICAgIH1cblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucHJlcGFyZUZyYW1lKG51bSAtIHRoaXMubGF5ZXJzW2ldLnN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5nbG9iYWxEYXRhLl9tZGYpIHtcbiAgICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5jbGVhckNhbnZhcyA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMudHJhbnNmb3JtQ2FudmFzLncsIHRoaXMudHJhbnNmb3JtQ2FudmFzLmgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBsZXRlTGF5ZXJzIHx8IHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLnJlbmRlckZyYW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzICE9PSB0cnVlKSB7XG4gICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmJ1aWxkSXRlbSA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICB2YXIgZWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgaWYgKGVsZW1lbnRzW3Bvc10gfHwgdGhpcy5sYXllcnNbcG9zXS50eSA9PT0gOTkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuY3JlYXRlSXRlbSh0aGlzLmxheWVyc1twb3NdLCB0aGlzLCB0aGlzLmdsb2JhbERhdGEpO1xuICAgIGVsZW1lbnRzW3Bvc10gPSBlbGVtZW50O1xuICAgIGVsZW1lbnQuaW5pdEV4cHJlc3Npb25zKCk7XG4gICAgLyogaWYodGhpcy5sYXllcnNbcG9zXS50eSA9PT0gMCl7XHJcbiAgICAgICAgICBlbGVtZW50LnJlc2l6ZSh0aGlzLmdsb2JhbERhdGEudHJhbnNmb3JtQ2FudmFzKTtcclxuICAgICAgfSAqL1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY2hlY2tQZW5kaW5nRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgd2hpbGUgKHRoaXMucGVuZGluZ0VsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnBlbmRpbmdFbGVtZW50cy5wb3AoKTtcbiAgICAgIGVsZW1lbnQuY2hlY2tQYXJlbnRpbmcoKTtcbiAgICB9XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgfTtcblxuICBmdW5jdGlvbiBDYW52YXNDb250ZXh0KCkge1xuICAgIHRoaXMub3BhY2l0eSA9IC0xO1xuICAgIHRoaXMudHJhbnNmb3JtID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIDE2KTtcbiAgICB0aGlzLmZpbGxTdHlsZSA9ICcnO1xuICAgIHRoaXMuc3Ryb2tlU3R5bGUgPSAnJztcbiAgICB0aGlzLmxpbmVXaWR0aCA9ICcnO1xuICAgIHRoaXMubGluZUNhcCA9ICcnO1xuICAgIHRoaXMubGluZUpvaW4gPSAnJztcbiAgICB0aGlzLm1pdGVyTGltaXQgPSAnJztcbiAgICB0aGlzLmlkID0gTWF0aC5yYW5kb20oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENWQ29udGV4dERhdGEoKSB7XG4gICAgdGhpcy5zdGFjayA9IFtdO1xuICAgIHRoaXMuY0FyclBvcyA9IDA7XG4gICAgdGhpcy5jVHIgPSBuZXcgTWF0cml4KCk7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IDE1O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICB2YXIgY2FudmFzQ29udGV4dCA9IG5ldyBDYW52YXNDb250ZXh0KCk7XG4gICAgICB0aGlzLnN0YWNrW2ldID0gY2FudmFzQ29udGV4dDtcbiAgICB9XG5cbiAgICB0aGlzLl9sZW5ndGggPSBsZW47XG4gICAgdGhpcy5uYXRpdmVDb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLnRyYW5zZm9ybU1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLmN1cnJlbnRPcGFjaXR5ID0gMTsgLy9cblxuICAgIHRoaXMuY3VycmVudEZpbGxTdHlsZSA9ICcnO1xuICAgIHRoaXMuYXBwbGllZEZpbGxTdHlsZSA9ICcnOyAvL1xuXG4gICAgdGhpcy5jdXJyZW50U3Ryb2tlU3R5bGUgPSAnJztcbiAgICB0aGlzLmFwcGxpZWRTdHJva2VTdHlsZSA9ICcnOyAvL1xuXG4gICAgdGhpcy5jdXJyZW50TGluZVdpZHRoID0gJyc7XG4gICAgdGhpcy5hcHBsaWVkTGluZVdpZHRoID0gJyc7IC8vXG5cbiAgICB0aGlzLmN1cnJlbnRMaW5lQ2FwID0gJyc7XG4gICAgdGhpcy5hcHBsaWVkTGluZUNhcCA9ICcnOyAvL1xuXG4gICAgdGhpcy5jdXJyZW50TGluZUpvaW4gPSAnJztcbiAgICB0aGlzLmFwcGxpZWRMaW5lSm9pbiA9ICcnOyAvL1xuXG4gICAgdGhpcy5hcHBsaWVkTWl0ZXJMaW1pdCA9ICcnO1xuICAgIHRoaXMuY3VycmVudE1pdGVyTGltaXQgPSAnJztcbiAgfVxuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLmR1cGxpY2F0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmV3TGVuZ3RoID0gdGhpcy5fbGVuZ3RoICogMjtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICBmb3IgKGkgPSB0aGlzLl9sZW5ndGg7IGkgPCBuZXdMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdGhpcy5zdGFja1tpXSA9IG5ldyBDYW52YXNDb250ZXh0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbGVuZ3RoID0gbmV3TGVuZ3RoO1xuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY0FyclBvcyA9IDA7XG4gICAgdGhpcy5jVHIucmVzZXQoKTtcbiAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ub3BhY2l0eSA9IDE7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIChmb3JjZVJlc3RvcmUpIHtcbiAgICB0aGlzLmNBcnJQb3MgLT0gMTtcbiAgICB2YXIgY3VycmVudENvbnRleHQgPSB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc107XG4gICAgdmFyIHRyYW5zZm9ybSA9IGN1cnJlbnRDb250ZXh0LnRyYW5zZm9ybTtcbiAgICB2YXIgaTtcbiAgICB2YXIgYXJyID0gdGhpcy5jVHIucHJvcHM7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkgKz0gMSkge1xuICAgICAgYXJyW2ldID0gdHJhbnNmb3JtW2ldO1xuICAgIH1cblxuICAgIGlmIChmb3JjZVJlc3RvcmUpIHtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5yZXN0b3JlKCk7XG4gICAgICB2YXIgcHJldlN0YWNrID0gdGhpcy5zdGFja1t0aGlzLmNBcnJQb3MgKyAxXTtcbiAgICAgIHRoaXMuYXBwbGllZEZpbGxTdHlsZSA9IHByZXZTdGFjay5maWxsU3R5bGU7XG4gICAgICB0aGlzLmFwcGxpZWRTdHJva2VTdHlsZSA9IHByZXZTdGFjay5zdHJva2VTdHlsZTtcbiAgICAgIHRoaXMuYXBwbGllZExpbmVXaWR0aCA9IHByZXZTdGFjay5saW5lV2lkdGg7XG4gICAgICB0aGlzLmFwcGxpZWRMaW5lQ2FwID0gcHJldlN0YWNrLmxpbmVDYXA7XG4gICAgICB0aGlzLmFwcGxpZWRMaW5lSm9pbiA9IHByZXZTdGFjay5saW5lSm9pbjtcbiAgICAgIHRoaXMuYXBwbGllZE1pdGVyTGltaXQgPSBwcmV2U3RhY2subWl0ZXJMaW1pdDtcbiAgICB9XG5cbiAgICB0aGlzLm5hdGl2ZUNvbnRleHQuc2V0VHJhbnNmb3JtKHRyYW5zZm9ybVswXSwgdHJhbnNmb3JtWzFdLCB0cmFuc2Zvcm1bNF0sIHRyYW5zZm9ybVs1XSwgdHJhbnNmb3JtWzEyXSwgdHJhbnNmb3JtWzEzXSk7XG5cbiAgICBpZiAoZm9yY2VSZXN0b3JlIHx8IGN1cnJlbnRDb250ZXh0Lm9wYWNpdHkgIT09IC0xICYmIHRoaXMuY3VycmVudE9wYWNpdHkgIT09IGN1cnJlbnRDb250ZXh0Lm9wYWNpdHkpIHtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5nbG9iYWxBbHBoYSA9IGN1cnJlbnRDb250ZXh0Lm9wYWNpdHk7XG4gICAgICB0aGlzLmN1cnJlbnRPcGFjaXR5ID0gY3VycmVudENvbnRleHQub3BhY2l0eTtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRGaWxsU3R5bGUgPSBjdXJyZW50Q29udGV4dC5maWxsU3R5bGU7XG4gICAgdGhpcy5jdXJyZW50U3Ryb2tlU3R5bGUgPSBjdXJyZW50Q29udGV4dC5zdHJva2VTdHlsZTtcbiAgICB0aGlzLmN1cnJlbnRMaW5lV2lkdGggPSBjdXJyZW50Q29udGV4dC5saW5lV2lkdGg7XG4gICAgdGhpcy5jdXJyZW50TGluZUNhcCA9IGN1cnJlbnRDb250ZXh0LmxpbmVDYXA7XG4gICAgdGhpcy5jdXJyZW50TGluZUpvaW4gPSBjdXJyZW50Q29udGV4dC5saW5lSm9pbjtcbiAgICB0aGlzLmN1cnJlbnRNaXRlckxpbWl0ID0gY3VycmVudENvbnRleHQubWl0ZXJMaW1pdDtcbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKHNhdmVPbk5hdGl2ZUZsYWcpIHtcbiAgICBpZiAoc2F2ZU9uTmF0aXZlRmxhZykge1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0LnNhdmUoKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcHMgPSB0aGlzLmNUci5wcm9wcztcblxuICAgIGlmICh0aGlzLl9sZW5ndGggPD0gdGhpcy5jQXJyUG9zKSB7XG4gICAgICB0aGlzLmR1cGxpY2F0ZSgpO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50U3RhY2sgPSB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc107XG4gICAgdmFyIGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkgKz0gMSkge1xuICAgICAgY3VycmVudFN0YWNrLnRyYW5zZm9ybVtpXSA9IHByb3BzW2ldO1xuICAgIH1cblxuICAgIHRoaXMuY0FyclBvcyArPSAxO1xuICAgIHZhciBuZXdTdGFjayA9IHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXTtcbiAgICBuZXdTdGFjay5vcGFjaXR5ID0gY3VycmVudFN0YWNrLm9wYWNpdHk7XG4gICAgbmV3U3RhY2suZmlsbFN0eWxlID0gY3VycmVudFN0YWNrLmZpbGxTdHlsZTtcbiAgICBuZXdTdGFjay5zdHJva2VTdHlsZSA9IGN1cnJlbnRTdGFjay5zdHJva2VTdHlsZTtcbiAgICBuZXdTdGFjay5saW5lV2lkdGggPSBjdXJyZW50U3RhY2subGluZVdpZHRoO1xuICAgIG5ld1N0YWNrLmxpbmVDYXAgPSBjdXJyZW50U3RhY2subGluZUNhcDtcbiAgICBuZXdTdGFjay5saW5lSm9pbiA9IGN1cnJlbnRTdGFjay5saW5lSm9pbjtcbiAgICBuZXdTdGFjay5taXRlckxpbWl0ID0gY3VycmVudFN0YWNrLm1pdGVyTGltaXQ7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuc2V0T3BhY2l0eSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5vcGFjaXR5ID0gdmFsdWU7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuc2V0Q29udGV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMubmF0aXZlQ29udGV4dCA9IHZhbHVlO1xuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLmZpbGxTdHlsZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10uZmlsbFN0eWxlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5jdXJyZW50RmlsbFN0eWxlID0gdmFsdWU7XG4gICAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10uZmlsbFN0eWxlID0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLnN0cm9rZVN0eWxlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5zdHJva2VTdHlsZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuY3VycmVudFN0cm9rZVN0eWxlID0gdmFsdWU7XG4gICAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10uc3Ryb2tlU3R5bGUgPSB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUubGluZVdpZHRoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5saW5lV2lkdGggIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmN1cnJlbnRMaW5lV2lkdGggPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5saW5lV2lkdGggPSB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUubGluZUNhcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ubGluZUNhcCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuY3VycmVudExpbmVDYXAgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5saW5lQ2FwID0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLmxpbmVKb2luID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5saW5lSm9pbiAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuY3VycmVudExpbmVKb2luID0gdmFsdWU7XG4gICAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ubGluZUpvaW4gPSB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUubWl0ZXJMaW1pdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ubWl0ZXJMaW1pdCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuY3VycmVudE1pdGVyTGltaXQgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5taXRlckxpbWl0ID0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHRoaXMudHJhbnNmb3JtTWF0LmNsb25lRnJvbVByb3BzKHByb3BzKTsgLy8gVGFraW5nIHRoZSBsYXN0IHRyYW5zZm9ybSB2YWx1ZSBmcm9tIHRoZSBzdG9yZWQgc3RhY2sgb2YgdHJhbnNmb3Jtc1xuXG4gICAgdmFyIGN1cnJlbnRUcmFuc2Zvcm0gPSB0aGlzLmNUcjsgLy8gQXBwbHlpbmcgdGhlIGxhc3QgdHJhbnNmb3JtIHZhbHVlIGFmdGVyIHRoZSBuZXcgdHJhbnNmb3JtIHRvIHJlc3BlY3QgdGhlIG9yZGVyIG9mIHRyYW5zZm9ybWF0aW9uc1xuXG4gICAgdGhpcy50cmFuc2Zvcm1NYXQubXVsdGlwbHkoY3VycmVudFRyYW5zZm9ybSk7IC8vIFN0b3JpbmcgdGhlIG5ldyB0cmFuc2Zvcm1lZCB2YWx1ZSBpbiB0aGUgc3RvcmVkIHRyYW5zZm9ybVxuXG4gICAgY3VycmVudFRyYW5zZm9ybS5jbG9uZUZyb21Qcm9wcyh0aGlzLnRyYW5zZm9ybU1hdC5wcm9wcyk7XG4gICAgdmFyIHRyUHJvcHMgPSBjdXJyZW50VHJhbnNmb3JtLnByb3BzOyAvLyBBcHBseWluZyB0aGUgbmV3IHRyYW5zZm9ybSB0byB0aGUgY2FudmFzXG5cbiAgICB0aGlzLm5hdGl2ZUNvbnRleHQuc2V0VHJhbnNmb3JtKHRyUHJvcHNbMF0sIHRyUHJvcHNbMV0sIHRyUHJvcHNbNF0sIHRyUHJvcHNbNV0sIHRyUHJvcHNbMTJdLCB0clByb3BzWzEzXSk7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUub3BhY2l0eSA9IGZ1bmN0aW9uIChvcCkge1xuICAgIHZhciBjdXJyZW50T3BhY2l0eSA9IHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5vcGFjaXR5O1xuICAgIGN1cnJlbnRPcGFjaXR5ICo9IG9wIDwgMCA/IDAgOiBvcDtcblxuICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ub3BhY2l0eSAhPT0gY3VycmVudE9wYWNpdHkpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRPcGFjaXR5ICE9PSBvcCkge1xuICAgICAgICB0aGlzLm5hdGl2ZUNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvcDtcbiAgICAgICAgdGhpcy5jdXJyZW50T3BhY2l0eSA9IG9wO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ub3BhY2l0eSA9IGN1cnJlbnRPcGFjaXR5O1xuICAgIH1cbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICBpZiAodGhpcy5hcHBsaWVkRmlsbFN0eWxlICE9PSB0aGlzLmN1cnJlbnRGaWxsU3R5bGUpIHtcbiAgICAgIHRoaXMuYXBwbGllZEZpbGxTdHlsZSA9IHRoaXMuY3VycmVudEZpbGxTdHlsZTtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmFwcGxpZWRGaWxsU3R5bGU7XG4gICAgfVxuXG4gICAgdGhpcy5uYXRpdmVDb250ZXh0LmZpbGwocnVsZSk7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuZmlsbFJlY3QgPSBmdW5jdGlvbiAoeCwgeSwgdywgaCkge1xuICAgIGlmICh0aGlzLmFwcGxpZWRGaWxsU3R5bGUgIT09IHRoaXMuY3VycmVudEZpbGxTdHlsZSkge1xuICAgICAgdGhpcy5hcHBsaWVkRmlsbFN0eWxlID0gdGhpcy5jdXJyZW50RmlsbFN0eWxlO1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuYXBwbGllZEZpbGxTdHlsZTtcbiAgICB9XG5cbiAgICB0aGlzLm5hdGl2ZUNvbnRleHQuZmlsbFJlY3QoeCwgeSwgdywgaCk7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuc3Ryb2tlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmFwcGxpZWRTdHJva2VTdHlsZSAhPT0gdGhpcy5jdXJyZW50U3Ryb2tlU3R5bGUpIHtcbiAgICAgIHRoaXMuYXBwbGllZFN0cm9rZVN0eWxlID0gdGhpcy5jdXJyZW50U3Ryb2tlU3R5bGU7XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLmFwcGxpZWRTdHJva2VTdHlsZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hcHBsaWVkTGluZVdpZHRoICE9PSB0aGlzLmN1cnJlbnRMaW5lV2lkdGgpIHtcbiAgICAgIHRoaXMuYXBwbGllZExpbmVXaWR0aCA9IHRoaXMuY3VycmVudExpbmVXaWR0aDtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5saW5lV2lkdGggPSB0aGlzLmFwcGxpZWRMaW5lV2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXBwbGllZExpbmVDYXAgIT09IHRoaXMuY3VycmVudExpbmVDYXApIHtcbiAgICAgIHRoaXMuYXBwbGllZExpbmVDYXAgPSB0aGlzLmN1cnJlbnRMaW5lQ2FwO1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0LmxpbmVDYXAgPSB0aGlzLmFwcGxpZWRMaW5lQ2FwO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFwcGxpZWRMaW5lSm9pbiAhPT0gdGhpcy5jdXJyZW50TGluZUpvaW4pIHtcbiAgICAgIHRoaXMuYXBwbGllZExpbmVKb2luID0gdGhpcy5jdXJyZW50TGluZUpvaW47XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQubGluZUpvaW4gPSB0aGlzLmFwcGxpZWRMaW5lSm9pbjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hcHBsaWVkTWl0ZXJMaW1pdCAhPT0gdGhpcy5jdXJyZW50TWl0ZXJMaW1pdCkge1xuICAgICAgdGhpcy5hcHBsaWVkTWl0ZXJMaW1pdCA9IHRoaXMuY3VycmVudE1pdGVyTGltaXQ7XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQubWl0ZXJMaW1pdCA9IHRoaXMuYXBwbGllZE1pdGVyTGltaXQ7XG4gICAgfVxuXG4gICAgdGhpcy5uYXRpdmVDb250ZXh0LnN0cm9rZSgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIENWQ29tcEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuY29tcGxldGVMYXllcnMgPSBmYWxzZTtcbiAgICB0aGlzLmxheWVycyA9IGRhdGEubGF5ZXJzO1xuICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzID0gW107XG4gICAgdGhpcy5lbGVtZW50cyA9IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5sYXllcnMubGVuZ3RoKTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMudG0gPSBkYXRhLnRtID8gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS50bSwgMCwgZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIHRoaXMpIDoge1xuICAgICAgX3BsYWNlaG9sZGVyOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQ2FudmFzUmVuZGVyZXJCYXNlLCBJQ29tcEVsZW1lbnQsIENWQmFzZUVsZW1lbnRdLCBDVkNvbXBFbGVtZW50KTtcblxuICBDVkNvbXBFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN0eCA9IHRoaXMuY2FudmFzQ29udGV4dDtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4Lm1vdmVUbygwLCAwKTtcbiAgICBjdHgubGluZVRvKHRoaXMuZGF0YS53LCAwKTtcbiAgICBjdHgubGluZVRvKHRoaXMuZGF0YS53LCB0aGlzLmRhdGEuaCk7XG4gICAgY3R4LmxpbmVUbygwLCB0aGlzLmRhdGEuaCk7XG4gICAgY3R4LmxpbmVUbygwLCAwKTtcbiAgICBjdHguY2xpcCgpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgaWYgKHRoaXMuY29tcGxldGVMYXllcnMgfHwgdGhpcy5lbGVtZW50c1tpXSkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLnJlbmRlckZyYW1lKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIENWQ29tcEVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50c1tpXSkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxheWVycyA9IG51bGw7XG4gICAgdGhpcy5lbGVtZW50cyA9IG51bGw7XG4gIH07XG5cbiAgQ1ZDb21wRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29tcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVkNvbXBFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ2FudmFzUmVuZGVyZXIoYW5pbWF0aW9uSXRlbSwgY29uZmlnKSB7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtID0gYW5pbWF0aW9uSXRlbTtcbiAgICB0aGlzLnJlbmRlckNvbmZpZyA9IHtcbiAgICAgIGNsZWFyQ2FudmFzOiBjb25maWcgJiYgY29uZmlnLmNsZWFyQ2FudmFzICE9PSB1bmRlZmluZWQgPyBjb25maWcuY2xlYXJDYW52YXMgOiB0cnVlLFxuICAgICAgY29udGV4dDogY29uZmlnICYmIGNvbmZpZy5jb250ZXh0IHx8IG51bGwsXG4gICAgICBwcm9ncmVzc2l2ZUxvYWQ6IGNvbmZpZyAmJiBjb25maWcucHJvZ3Jlc3NpdmVMb2FkIHx8IGZhbHNlLFxuICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbzogY29uZmlnICYmIGNvbmZpZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvIHx8ICd4TWlkWU1pZCBtZWV0JyxcbiAgICAgIGltYWdlUHJlc2VydmVBc3BlY3RSYXRpbzogY29uZmlnICYmIGNvbmZpZy5pbWFnZVByZXNlcnZlQXNwZWN0UmF0aW8gfHwgJ3hNaWRZTWlkIHNsaWNlJyxcbiAgICAgIGNvbnRlbnRWaXNpYmlsaXR5OiBjb25maWcgJiYgY29uZmlnLmNvbnRlbnRWaXNpYmlsaXR5IHx8ICd2aXNpYmxlJyxcbiAgICAgIGNsYXNzTmFtZTogY29uZmlnICYmIGNvbmZpZy5jbGFzc05hbWUgfHwgJycsXG4gICAgICBpZDogY29uZmlnICYmIGNvbmZpZy5pZCB8fCAnJyxcbiAgICAgIHJ1bkV4cHJlc3Npb25zOiAhY29uZmlnIHx8IGNvbmZpZy5ydW5FeHByZXNzaW9ucyA9PT0gdW5kZWZpbmVkIHx8IGNvbmZpZy5ydW5FeHByZXNzaW9uc1xuICAgIH07XG4gICAgdGhpcy5yZW5kZXJDb25maWcuZHByID0gY29uZmlnICYmIGNvbmZpZy5kcHIgfHwgMTtcblxuICAgIGlmICh0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlcikge1xuICAgICAgdGhpcy5yZW5kZXJDb25maWcuZHByID0gY29uZmlnICYmIGNvbmZpZy5kcHIgfHwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcmVkRnJhbWUgPSAtMTtcbiAgICB0aGlzLmdsb2JhbERhdGEgPSB7XG4gICAgICBmcmFtZU51bTogLTEsXG4gICAgICBfbWRmOiBmYWxzZSxcbiAgICAgIHJlbmRlckNvbmZpZzogdGhpcy5yZW5kZXJDb25maWcsXG4gICAgICBjdXJyZW50R2xvYmFsQWxwaGE6IC0xXG4gICAgfTtcbiAgICB0aGlzLmNvbnRleHREYXRhID0gbmV3IENWQ29udGV4dERhdGEoKTtcbiAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgdGhpcy5wZW5kaW5nRWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLnRyYW5zZm9ybU1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLmNvbXBsZXRlTGF5ZXJzID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJlclR5cGUgPSAnY2FudmFzJztcblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5jbGVhckNhbnZhcykge1xuICAgICAgdGhpcy5jdHhUcmFuc2Zvcm0gPSB0aGlzLmNvbnRleHREYXRhLnRyYW5zZm9ybS5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhPcGFjaXR5ID0gdGhpcy5jb250ZXh0RGF0YS5vcGFjaXR5LmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eEZpbGxTdHlsZSA9IHRoaXMuY29udGV4dERhdGEuZmlsbFN0eWxlLmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eFN0cm9rZVN0eWxlID0gdGhpcy5jb250ZXh0RGF0YS5zdHJva2VTdHlsZS5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhMaW5lV2lkdGggPSB0aGlzLmNvbnRleHREYXRhLmxpbmVXaWR0aC5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhMaW5lQ2FwID0gdGhpcy5jb250ZXh0RGF0YS5saW5lQ2FwLmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eExpbmVKb2luID0gdGhpcy5jb250ZXh0RGF0YS5saW5lSm9pbi5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhNaXRlckxpbWl0ID0gdGhpcy5jb250ZXh0RGF0YS5taXRlckxpbWl0LmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eEZpbGwgPSB0aGlzLmNvbnRleHREYXRhLmZpbGwuYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICAgIHRoaXMuY3R4RmlsbFJlY3QgPSB0aGlzLmNvbnRleHREYXRhLmZpbGxSZWN0LmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eFN0cm9rZSA9IHRoaXMuY29udGV4dERhdGEuc3Ryb2tlLmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLnNhdmUgPSB0aGlzLmNvbnRleHREYXRhLnNhdmUuYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICB9XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0NhbnZhc1JlbmRlcmVyQmFzZV0sIENhbnZhc1JlbmRlcmVyKTtcblxuICBDYW52YXNSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlQ29tcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVkNvbXBFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSEJhc2VFbGVtZW50KCkge31cblxuICBIQmFzZUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIGNoZWNrQmxlbmRNb2RlOiBmdW5jdGlvbiBjaGVja0JsZW5kTW9kZSgpIHt9LFxuICAgIGluaXRSZW5kZXJlckVsZW1lbnQ6IGZ1bmN0aW9uIGluaXRSZW5kZXJlckVsZW1lbnQoKSB7XG4gICAgICB0aGlzLmJhc2VFbGVtZW50ID0gY3JlYXRlVGFnKHRoaXMuZGF0YS50ZyB8fCAnZGl2Jyk7XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuaGFzTWFzaykge1xuICAgICAgICB0aGlzLnN2Z0VsZW1lbnQgPSBjcmVhdGVOUygnc3ZnJyk7XG4gICAgICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgICAgdGhpcy5tYXNrZWRFbGVtZW50ID0gdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmxheWVyRWxlbWVudCk7XG4gICAgICAgIHRoaXMuYmFzZUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5zdmdFbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gdGhpcy5iYXNlRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgc3R5bGVEaXYodGhpcy5iYXNlRWxlbWVudCk7XG4gICAgfSxcbiAgICBjcmVhdGVDb250YWluZXJFbGVtZW50czogZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyRWxlbWVudHMoKSB7XG4gICAgICB0aGlzLnJlbmRlcmFibGVFZmZlY3RzTWFuYWdlciA9IG5ldyBDVkVmZmVjdHModGhpcyk7XG4gICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudCA9IHRoaXMuYmFzZUVsZW1lbnQ7XG4gICAgICB0aGlzLm1hc2tlZEVsZW1lbnQgPSB0aGlzLmxheWVyRWxlbWVudDtcblxuICAgICAgaWYgKHRoaXMuZGF0YS5sbikge1xuICAgICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5kYXRhLmxuKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5jbCkge1xuICAgICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdGhpcy5kYXRhLmNsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5ibSAhPT0gMCkge1xuICAgICAgICB0aGlzLnNldEJsZW5kTW9kZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyRWxlbWVudDogZnVuY3Rpb24gcmVuZGVyRWxlbWVudCgpIHtcbiAgICAgIHZhciB0cmFuc2Zvcm1lZEVsZW1lbnRTdHlsZSA9IHRoaXMudHJhbnNmb3JtZWRFbGVtZW50ID8gdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQuc3R5bGUgOiB7fTtcblxuICAgICAgaWYgKHRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZikge1xuICAgICAgICB2YXIgbWF0cml4VmFsdWUgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLm1hdC50b0NTUygpO1xuICAgICAgICB0cmFuc2Zvcm1lZEVsZW1lbnRTdHlsZS50cmFuc2Zvcm0gPSBtYXRyaXhWYWx1ZTtcbiAgICAgICAgdHJhbnNmb3JtZWRFbGVtZW50U3R5bGUud2Via2l0VHJhbnNmb3JtID0gbWF0cml4VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZikge1xuICAgICAgICB0cmFuc2Zvcm1lZEVsZW1lbnRTdHlsZS5vcGFjaXR5ID0gdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5vLnY7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJGcmFtZTogZnVuY3Rpb24gcmVuZGVyRnJhbWUoKSB7XG4gICAgICAvLyBJZiBpdCBpcyBleHBvcnRlZCBhcyBoaWRkZW4gKGRhdGEuaGQgPT09IHRydWUpIG5vIG5lZWQgdG8gcmVuZGVyXG4gICAgICAvLyBJZiBpdCBpcyBub3QgdmlzaWJsZSBubyBuZWVkIHRvIHJlbmRlclxuICAgICAgaWYgKHRoaXMuZGF0YS5oZCB8fCB0aGlzLmhpZGRlbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVuZGVyVHJhbnNmb3JtKCk7XG4gICAgICB0aGlzLnJlbmRlclJlbmRlcmFibGUoKTtcbiAgICAgIHRoaXMucmVuZGVyRWxlbWVudCgpO1xuICAgICAgdGhpcy5yZW5kZXJJbm5lckNvbnRlbnQoKTtcblxuICAgICAgaWYgKHRoaXMuX2lzRmlyc3RGcmFtZSkge1xuICAgICAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudCA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLm1hdHRlRWxlbWVudCkge1xuICAgICAgICB0aGlzLm1hdHRlRWxlbWVudCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm1hc2tNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMubWFza01hbmFnZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLm1hc2tNYW5hZ2VyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzOiBmdW5jdGlvbiBjcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50cygpIHtcbiAgICAgIHRoaXMubWFza01hbmFnZXIgPSBuZXcgTWFza0VsZW1lbnQodGhpcy5kYXRhLCB0aGlzLCB0aGlzLmdsb2JhbERhdGEpO1xuICAgIH0sXG4gICAgYWRkRWZmZWN0czogZnVuY3Rpb24gYWRkRWZmZWN0cygpIHt9LFxuICAgIHNldE1hdHRlOiBmdW5jdGlvbiBzZXRNYXR0ZSgpIHt9XG4gIH07XG4gIEhCYXNlRWxlbWVudC5wcm90b3R5cGUuZ2V0QmFzZUVsZW1lbnQgPSBTVkdCYXNlRWxlbWVudC5wcm90b3R5cGUuZ2V0QmFzZUVsZW1lbnQ7XG4gIEhCYXNlRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveUJhc2VFbGVtZW50ID0gSEJhc2VFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95O1xuICBIQmFzZUVsZW1lbnQucHJvdG90eXBlLmJ1aWxkRWxlbWVudFBhcmVudGluZyA9IEJhc2VSZW5kZXJlci5wcm90b3R5cGUuYnVpbGRFbGVtZW50UGFyZW50aW5nO1xuXG4gIGZ1bmN0aW9uIEhTb2xpZEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBIQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnRdLCBIU29saWRFbGVtZW50KTtcblxuICBIU29saWRFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWN0O1xuXG4gICAgaWYgKHRoaXMuZGF0YS5oYXNNYXNrKSB7XG4gICAgICByZWN0ID0gY3JlYXRlTlMoJ3JlY3QnKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMuZGF0YS5zdyk7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5kYXRhLnNoKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlKCdmaWxsJywgdGhpcy5kYXRhLnNjKTtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5kYXRhLnN3KTtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuZGF0YS5zaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY3QgPSBjcmVhdGVUYWcoJ2RpdicpO1xuICAgICAgcmVjdC5zdHlsZS53aWR0aCA9IHRoaXMuZGF0YS5zdyArICdweCc7XG4gICAgICByZWN0LnN0eWxlLmhlaWdodCA9IHRoaXMuZGF0YS5zaCArICdweCc7XG4gICAgICByZWN0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHRoaXMuZGF0YS5zYztcbiAgICB9XG5cbiAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChyZWN0KTtcbiAgfTtcblxuICBmdW5jdGlvbiBIU2hhcGVFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICAvLyBMaXN0IG9mIGRyYXdhYmxlIGVsZW1lbnRzXG4gICAgdGhpcy5zaGFwZXMgPSBbXTsgLy8gRnVsbCBzaGFwZSBkYXRhXG5cbiAgICB0aGlzLnNoYXBlc0RhdGEgPSBkYXRhLnNoYXBlczsgLy8gTGlzdCBvZiBzdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gc2hhcGVzXG5cbiAgICB0aGlzLnN0eWxlc0xpc3QgPSBbXTsgLy8gTGlzdCBvZiBtb2RpZmllcnMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gc2hhcGVzXG5cbiAgICB0aGlzLnNoYXBlTW9kaWZpZXJzID0gW107IC8vIExpc3Qgb2YgaXRlbXMgaW4gc2hhcGUgdHJlZVxuXG4gICAgdGhpcy5pdGVtc0RhdGEgPSBbXTsgLy8gTGlzdCBvZiBpdGVtcyBpbiBwcmV2aW91cyBzaGFwZSB0cmVlXG5cbiAgICB0aGlzLnByb2Nlc3NlZEVsZW1lbnRzID0gW107IC8vIExpc3Qgb2YgYW5pbWF0ZWQgY29tcG9uZW50c1xuXG4gICAgdGhpcy5hbmltYXRlZENvbnRlbnRzID0gW107XG4gICAgdGhpcy5zaGFwZXNDb250YWluZXIgPSBjcmVhdGVOUygnZycpO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7IC8vIE1vdmluZyBhbnkgcHJvcGVydHkgdGhhdCBkb2Vzbid0IGdldCB0b28gbXVjaCBhY2Nlc3MgYWZ0ZXIgaW5pdGlhbGl6YXRpb24gYmVjYXVzZSBvZiB2OCB3YXkgb2YgaGFuZGxpbmcgbW9yZSB0aGFuIDEwIHByb3BlcnRpZXMuXG4gICAgLy8gTGlzdCBvZiBlbGVtZW50cyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkXG5cbiAgICB0aGlzLnByZXZWaWV3RGF0YSA9IFtdO1xuICAgIHRoaXMuY3VycmVudEJCb3ggPSB7XG4gICAgICB4OiA5OTk5OTksXG4gICAgICB5OiAtOTk5OTk5LFxuICAgICAgaDogMCxcbiAgICAgIHc6IDBcbiAgICB9O1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgSFNvbGlkRWxlbWVudCwgU1ZHU2hhcGVFbGVtZW50LCBIQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZUVsZW1lbnRdLCBIU2hhcGVFbGVtZW50KTtcbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuX3JlbmRlclNoYXBlRnJhbWUgPSBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQ7XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29udDtcbiAgICB0aGlzLmJhc2VFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gMDtcblxuICAgIGlmICh0aGlzLmRhdGEuaGFzTWFzaykge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5zaGFwZXNDb250YWluZXIpO1xuICAgICAgY29udCA9IHRoaXMuc3ZnRWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udCA9IGNyZWF0ZU5TKCdzdmcnKTtcbiAgICAgIHZhciBzaXplID0gdGhpcy5jb21wLmRhdGEgPyB0aGlzLmNvbXAuZGF0YSA6IHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZTtcbiAgICAgIGNvbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHNpemUudyk7XG4gICAgICBjb250LnNldEF0dHJpYnV0ZSgnaGVpZ2h0Jywgc2l6ZS5oKTtcbiAgICAgIGNvbnQuYXBwZW5kQ2hpbGQodGhpcy5zaGFwZXNDb250YWluZXIpO1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZWFyY2hTaGFwZXModGhpcy5zaGFwZXNEYXRhLCB0aGlzLml0ZW1zRGF0YSwgdGhpcy5wcmV2Vmlld0RhdGEsIHRoaXMuc2hhcGVzQ29udGFpbmVyLCAwLCBbXSwgdHJ1ZSk7XG4gICAgdGhpcy5maWx0ZXJVbmlxdWVTaGFwZXMoKTtcbiAgICB0aGlzLnNoYXBlQ29udCA9IGNvbnQ7XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuZ2V0VHJhbnNmb3JtZWRQb2ludCA9IGZ1bmN0aW9uICh0cmFuc2Zvcm1lcnMsIHBvaW50KSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRyYW5zZm9ybWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHBvaW50ID0gdHJhbnNmb3JtZXJzW2ldLm1Qcm9wcy52LmFwcGx5VG9Qb2ludEFycmF5KHBvaW50WzBdLCBwb2ludFsxXSwgMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvaW50O1xuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNhbGN1bGF0ZVNoYXBlQm91bmRpbmdCb3ggPSBmdW5jdGlvbiAoaXRlbSwgYm91bmRpbmdCb3gpIHtcbiAgICB2YXIgc2hhcGUgPSBpdGVtLnNoLnY7XG4gICAgdmFyIHRyYW5zZm9ybWVycyA9IGl0ZW0udHJhbnNmb3JtZXJzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBzaGFwZS5fbGVuZ3RoO1xuICAgIHZhciB2UG9pbnQ7XG4gICAgdmFyIG9Qb2ludDtcbiAgICB2YXIgbmV4dElQb2ludDtcbiAgICB2YXIgbmV4dFZQb2ludDtcblxuICAgIGlmIChsZW4gPD0gMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW4gLSAxOyBpICs9IDEpIHtcbiAgICAgIHZQb2ludCA9IHRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsIHNoYXBlLnZbaV0pO1xuICAgICAgb1BvaW50ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycywgc2hhcGUub1tpXSk7XG4gICAgICBuZXh0SVBvaW50ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycywgc2hhcGUuaVtpICsgMV0pO1xuICAgICAgbmV4dFZQb2ludCA9IHRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsIHNoYXBlLnZbaSArIDFdKTtcbiAgICAgIHRoaXMuY2hlY2tCb3VuZHModlBvaW50LCBvUG9pbnQsIG5leHRJUG9pbnQsIG5leHRWUG9pbnQsIGJvdW5kaW5nQm94KTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGUuYykge1xuICAgICAgdlBvaW50ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycywgc2hhcGUudltpXSk7XG4gICAgICBvUG9pbnQgPSB0aGlzLmdldFRyYW5zZm9ybWVkUG9pbnQodHJhbnNmb3JtZXJzLCBzaGFwZS5vW2ldKTtcbiAgICAgIG5leHRJUG9pbnQgPSB0aGlzLmdldFRyYW5zZm9ybWVkUG9pbnQodHJhbnNmb3JtZXJzLCBzaGFwZS5pWzBdKTtcbiAgICAgIG5leHRWUG9pbnQgPSB0aGlzLmdldFRyYW5zZm9ybWVkUG9pbnQodHJhbnNmb3JtZXJzLCBzaGFwZS52WzBdKTtcbiAgICAgIHRoaXMuY2hlY2tCb3VuZHModlBvaW50LCBvUG9pbnQsIG5leHRJUG9pbnQsIG5leHRWUG9pbnQsIGJvdW5kaW5nQm94KTtcbiAgICB9XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuY2hlY2tCb3VuZHMgPSBmdW5jdGlvbiAodlBvaW50LCBvUG9pbnQsIG5leHRJUG9pbnQsIG5leHRWUG9pbnQsIGJvdW5kaW5nQm94KSB7XG4gICAgdGhpcy5nZXRCb3VuZHNPZkN1cnZlKHZQb2ludCwgb1BvaW50LCBuZXh0SVBvaW50LCBuZXh0VlBvaW50KTtcbiAgICB2YXIgYm91bmRzID0gdGhpcy5zaGFwZUJvdW5kaW5nQm94O1xuICAgIGJvdW5kaW5nQm94LnggPSBibU1pbihib3VuZHMubGVmdCwgYm91bmRpbmdCb3gueCk7XG4gICAgYm91bmRpbmdCb3gueE1heCA9IGJtTWF4KGJvdW5kcy5yaWdodCwgYm91bmRpbmdCb3gueE1heCk7XG4gICAgYm91bmRpbmdCb3gueSA9IGJtTWluKGJvdW5kcy50b3AsIGJvdW5kaW5nQm94LnkpO1xuICAgIGJvdW5kaW5nQm94LnlNYXggPSBibU1heChib3VuZHMuYm90dG9tLCBib3VuZGluZ0JveC55TWF4KTtcbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5zaGFwZUJvdW5kaW5nQm94ID0ge1xuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIGJvdHRvbTogMFxuICB9O1xuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS50ZW1wQm91bmRpbmdCb3ggPSB7XG4gICAgeDogMCxcbiAgICB4TWF4OiAwLFxuICAgIHk6IDAsXG4gICAgeU1heDogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5nZXRCb3VuZHNPZkN1cnZlID0gZnVuY3Rpb24gKHAwLCBwMSwgcDIsIHAzKSB7XG4gICAgdmFyIGJvdW5kcyA9IFtbcDBbMF0sIHAzWzBdXSwgW3AwWzFdLCBwM1sxXV1dO1xuXG4gICAgZm9yICh2YXIgYSwgYiwgYywgdCwgYjJhYywgdDEsIHQyLCBpID0gMDsgaSA8IDI7ICsraSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wbHVzcGx1c1xuICAgICAgYiA9IDYgKiBwMFtpXSAtIDEyICogcDFbaV0gKyA2ICogcDJbaV07XG4gICAgICBhID0gLTMgKiBwMFtpXSArIDkgKiBwMVtpXSAtIDkgKiBwMltpXSArIDMgKiBwM1tpXTtcbiAgICAgIGMgPSAzICogcDFbaV0gLSAzICogcDBbaV07XG4gICAgICBiIHw9IDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYml0d2lzZVxuXG4gICAgICBhIHw9IDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYml0d2lzZVxuXG4gICAgICBjIHw9IDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYml0d2lzZVxuXG4gICAgICBpZiAoYSA9PT0gMCAmJiBiID09PSAwKSB7Ly9cbiAgICAgIH0gZWxzZSBpZiAoYSA9PT0gMCkge1xuICAgICAgICB0ID0gLWMgLyBiO1xuXG4gICAgICAgIGlmICh0ID4gMCAmJiB0IDwgMSkge1xuICAgICAgICAgIGJvdW5kc1tpXS5wdXNoKHRoaXMuY2FsY3VsYXRlRih0LCBwMCwgcDEsIHAyLCBwMywgaSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiMmFjID0gYiAqIGIgLSA0ICogYyAqIGE7XG5cbiAgICAgICAgaWYgKGIyYWMgPj0gMCkge1xuICAgICAgICAgIHQxID0gKC1iICsgYm1TcXJ0KGIyYWMpKSAvICgyICogYSk7XG4gICAgICAgICAgaWYgKHQxID4gMCAmJiB0MSA8IDEpIGJvdW5kc1tpXS5wdXNoKHRoaXMuY2FsY3VsYXRlRih0MSwgcDAsIHAxLCBwMiwgcDMsIGkpKTtcbiAgICAgICAgICB0MiA9ICgtYiAtIGJtU3FydChiMmFjKSkgLyAoMiAqIGEpO1xuICAgICAgICAgIGlmICh0MiA+IDAgJiYgdDIgPCAxKSBib3VuZHNbaV0ucHVzaCh0aGlzLmNhbGN1bGF0ZUYodDIsIHAwLCBwMSwgcDIsIHAzLCBpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNoYXBlQm91bmRpbmdCb3gubGVmdCA9IGJtTWluLmFwcGx5KG51bGwsIGJvdW5kc1swXSk7XG4gICAgdGhpcy5zaGFwZUJvdW5kaW5nQm94LnRvcCA9IGJtTWluLmFwcGx5KG51bGwsIGJvdW5kc1sxXSk7XG4gICAgdGhpcy5zaGFwZUJvdW5kaW5nQm94LnJpZ2h0ID0gYm1NYXguYXBwbHkobnVsbCwgYm91bmRzWzBdKTtcbiAgICB0aGlzLnNoYXBlQm91bmRpbmdCb3guYm90dG9tID0gYm1NYXguYXBwbHkobnVsbCwgYm91bmRzWzFdKTtcbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jYWxjdWxhdGVGID0gZnVuY3Rpb24gKHQsIHAwLCBwMSwgcDIsIHAzLCBpKSB7XG4gICAgcmV0dXJuIGJtUG93KDEgLSB0LCAzKSAqIHAwW2ldICsgMyAqIGJtUG93KDEgLSB0LCAyKSAqIHQgKiBwMVtpXSArIDMgKiAoMSAtIHQpICogYm1Qb3codCwgMikgKiBwMltpXSArIGJtUG93KHQsIDMpICogcDNbaV07XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuY2FsY3VsYXRlQm91bmRpbmdCb3ggPSBmdW5jdGlvbiAoaXRlbXNEYXRhLCBib3VuZGluZ0JveCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBpdGVtc0RhdGEubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAoaXRlbXNEYXRhW2ldICYmIGl0ZW1zRGF0YVtpXS5zaCkge1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZVNoYXBlQm91bmRpbmdCb3goaXRlbXNEYXRhW2ldLCBib3VuZGluZ0JveCk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zRGF0YVtpXSAmJiBpdGVtc0RhdGFbaV0uaXQpIHtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVCb3VuZGluZ0JveChpdGVtc0RhdGFbaV0uaXQsIGJvdW5kaW5nQm94KTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNEYXRhW2ldICYmIGl0ZW1zRGF0YVtpXS5zdHlsZSAmJiBpdGVtc0RhdGFbaV0udykge1xuICAgICAgICB0aGlzLmV4cGFuZFN0cm9rZUJvdW5kaW5nQm94KGl0ZW1zRGF0YVtpXS53LCBib3VuZGluZ0JveCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLmV4cGFuZFN0cm9rZUJvdW5kaW5nQm94ID0gZnVuY3Rpb24gKHdpZHRoUHJvcGVydHksIGJvdW5kaW5nQm94KSB7XG4gICAgdmFyIHdpZHRoID0gMDtcblxuICAgIGlmICh3aWR0aFByb3BlcnR5LmtleWZyYW1lcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aWR0aFByb3BlcnR5LmtleWZyYW1lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIga2Z3ID0gd2lkdGhQcm9wZXJ0eS5rZXlmcmFtZXNbaV0ucztcblxuICAgICAgICBpZiAoa2Z3ID4gd2lkdGgpIHtcbiAgICAgICAgICB3aWR0aCA9IGtmdztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB3aWR0aCAqPSB3aWR0aFByb3BlcnR5Lm11bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpZHRoID0gd2lkdGhQcm9wZXJ0eS52ICogd2lkdGhQcm9wZXJ0eS5tdWx0O1xuICAgIH1cblxuICAgIGJvdW5kaW5nQm94LnggLT0gd2lkdGg7XG4gICAgYm91bmRpbmdCb3gueE1heCArPSB3aWR0aDtcbiAgICBib3VuZGluZ0JveC55IC09IHdpZHRoO1xuICAgIGJvdW5kaW5nQm94LnlNYXggKz0gd2lkdGg7XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3VycmVudEJveENvbnRhaW5zID0gZnVuY3Rpb24gKGJveCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRCQm94LnggPD0gYm94LnggJiYgdGhpcy5jdXJyZW50QkJveC55IDw9IGJveC55ICYmIHRoaXMuY3VycmVudEJCb3gud2lkdGggKyB0aGlzLmN1cnJlbnRCQm94LnggPj0gYm94LnggKyBib3gud2lkdGggJiYgdGhpcy5jdXJyZW50QkJveC5oZWlnaHQgKyB0aGlzLmN1cnJlbnRCQm94LnkgPj0gYm94LnkgKyBib3guaGVpZ2h0O1xuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9yZW5kZXJTaGFwZUZyYW1lKCk7XG5cbiAgICBpZiAoIXRoaXMuaGlkZGVuICYmICh0aGlzLl9pc0ZpcnN0RnJhbWUgfHwgdGhpcy5fbWRmKSkge1xuICAgICAgdmFyIHRlbXBCb3VuZGluZ0JveCA9IHRoaXMudGVtcEJvdW5kaW5nQm94O1xuICAgICAgdmFyIG1heCA9IDk5OTk5OTtcbiAgICAgIHRlbXBCb3VuZGluZ0JveC54ID0gbWF4O1xuICAgICAgdGVtcEJvdW5kaW5nQm94LnhNYXggPSAtbWF4O1xuICAgICAgdGVtcEJvdW5kaW5nQm94LnkgPSBtYXg7XG4gICAgICB0ZW1wQm91bmRpbmdCb3gueU1heCA9IC1tYXg7XG4gICAgICB0aGlzLmNhbGN1bGF0ZUJvdW5kaW5nQm94KHRoaXMuaXRlbXNEYXRhLCB0ZW1wQm91bmRpbmdCb3gpO1xuICAgICAgdGVtcEJvdW5kaW5nQm94LndpZHRoID0gdGVtcEJvdW5kaW5nQm94LnhNYXggPCB0ZW1wQm91bmRpbmdCb3gueCA/IDAgOiB0ZW1wQm91bmRpbmdCb3gueE1heCAtIHRlbXBCb3VuZGluZ0JveC54O1xuICAgICAgdGVtcEJvdW5kaW5nQm94LmhlaWdodCA9IHRlbXBCb3VuZGluZ0JveC55TWF4IDwgdGVtcEJvdW5kaW5nQm94LnkgPyAwIDogdGVtcEJvdW5kaW5nQm94LnlNYXggLSB0ZW1wQm91bmRpbmdCb3gueTsgLy8gdmFyIHRlbXBCb3VuZGluZ0JveCA9IHRoaXMuc2hhcGVDb250LmdldEJCb3goKTtcblxuICAgICAgaWYgKHRoaXMuY3VycmVudEJveENvbnRhaW5zKHRlbXBCb3VuZGluZ0JveCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAodGhpcy5jdXJyZW50QkJveC53ICE9PSB0ZW1wQm91bmRpbmdCb3gud2lkdGgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC53ID0gdGVtcEJvdW5kaW5nQm94LndpZHRoO1xuICAgICAgICB0aGlzLnNoYXBlQ29udC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGVtcEJvdW5kaW5nQm94LndpZHRoKTtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRCQm94LmggIT09IHRlbXBCb3VuZGluZ0JveC5oZWlnaHQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC5oID0gdGVtcEJvdW5kaW5nQm94LmhlaWdodDtcbiAgICAgICAgdGhpcy5zaGFwZUNvbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0ZW1wQm91bmRpbmdCb3guaGVpZ2h0KTtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VkIHx8IHRoaXMuY3VycmVudEJCb3gueCAhPT0gdGVtcEJvdW5kaW5nQm94LnggfHwgdGhpcy5jdXJyZW50QkJveC55ICE9PSB0ZW1wQm91bmRpbmdCb3gueSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LncgPSB0ZW1wQm91bmRpbmdCb3gud2lkdGg7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3guaCA9IHRlbXBCb3VuZGluZ0JveC5oZWlnaHQ7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3gueCA9IHRlbXBCb3VuZGluZ0JveC54O1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LnkgPSB0ZW1wQm91bmRpbmdCb3gueTtcbiAgICAgICAgdGhpcy5zaGFwZUNvbnQuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgdGhpcy5jdXJyZW50QkJveC54ICsgJyAnICsgdGhpcy5jdXJyZW50QkJveC55ICsgJyAnICsgdGhpcy5jdXJyZW50QkJveC53ICsgJyAnICsgdGhpcy5jdXJyZW50QkJveC5oKTtcbiAgICAgICAgdmFyIHNoYXBlU3R5bGUgPSB0aGlzLnNoYXBlQ29udC5zdHlsZTtcbiAgICAgICAgdmFyIHNoYXBlVHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgnICsgdGhpcy5jdXJyZW50QkJveC54ICsgJ3B4LCcgKyB0aGlzLmN1cnJlbnRCQm94LnkgKyAncHgpJztcbiAgICAgICAgc2hhcGVTdHlsZS50cmFuc2Zvcm0gPSBzaGFwZVRyYW5zZm9ybTtcbiAgICAgICAgc2hhcGVTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBzaGFwZVRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gSFRleHRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLnRleHRTcGFucyA9IFtdO1xuICAgIHRoaXMudGV4dFBhdGhzID0gW107XG4gICAgdGhpcy5jdXJyZW50QkJveCA9IHtcbiAgICAgIHg6IDk5OTk5OSxcbiAgICAgIHk6IC05OTk5OTksXG4gICAgICBoOiAwLFxuICAgICAgdzogMFxuICAgIH07XG4gICAgdGhpcy5yZW5kZXJUeXBlID0gJ3N2Zyc7XG4gICAgdGhpcy5pc01hc2tlZCA9IGZhbHNlO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBIQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnQsIElUZXh0RWxlbWVudF0sIEhUZXh0RWxlbWVudCk7XG5cbiAgSFRleHRFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaXNNYXNrZWQgPSB0aGlzLmNoZWNrTWFza3MoKTtcblxuICAgIGlmICh0aGlzLmlzTWFza2VkKSB7XG4gICAgICB0aGlzLnJlbmRlclR5cGUgPSAnc3ZnJztcbiAgICAgIHRoaXMuY29tcFcgPSB0aGlzLmNvbXAuZGF0YS53O1xuICAgICAgdGhpcy5jb21wSCA9IHRoaXMuY29tcC5kYXRhLmg7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMuY29tcFcpO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5jb21wSCk7XG4gICAgICB2YXIgZyA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICB0aGlzLm1hc2tlZEVsZW1lbnQuYXBwZW5kQ2hpbGQoZyk7XG4gICAgICB0aGlzLmlubmVyRWxlbSA9IGc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyVHlwZSA9ICdodG1sJztcbiAgICAgIHRoaXMuaW5uZXJFbGVtID0gdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgfVxuXG4gICAgdGhpcy5jaGVja1BhcmVudGluZygpO1xuICB9O1xuXG4gIEhUZXh0RWxlbWVudC5wcm90b3R5cGUuYnVpbGROZXdUZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkb2N1bWVudERhdGEgPSB0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YTtcbiAgICB0aGlzLnJlbmRlcmVkTGV0dGVycyA9IGNyZWF0ZVNpemVkQXJyYXkoZG9jdW1lbnREYXRhLmwgPyBkb2N1bWVudERhdGEubC5sZW5ndGggOiAwKTtcbiAgICB2YXIgaW5uZXJFbGVtU3R5bGUgPSB0aGlzLmlubmVyRWxlbS5zdHlsZTtcbiAgICB2YXIgdGV4dENvbG9yID0gZG9jdW1lbnREYXRhLmZjID8gdGhpcy5idWlsZENvbG9yKGRvY3VtZW50RGF0YS5mYykgOiAncmdiYSgwLDAsMCwwKSc7XG4gICAgaW5uZXJFbGVtU3R5bGUuZmlsbCA9IHRleHRDb2xvcjtcbiAgICBpbm5lckVsZW1TdHlsZS5jb2xvciA9IHRleHRDb2xvcjtcblxuICAgIGlmIChkb2N1bWVudERhdGEuc2MpIHtcbiAgICAgIGlubmVyRWxlbVN0eWxlLnN0cm9rZSA9IHRoaXMuYnVpbGRDb2xvcihkb2N1bWVudERhdGEuc2MpO1xuICAgICAgaW5uZXJFbGVtU3R5bGUuc3Ryb2tlV2lkdGggPSBkb2N1bWVudERhdGEuc3cgKyAncHgnO1xuICAgIH1cblxuICAgIHZhciBmb250RGF0YSA9IHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKTtcblxuICAgIGlmICghdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmNoYXJzKSB7XG4gICAgICBpbm5lckVsZW1TdHlsZS5mb250U2l6ZSA9IGRvY3VtZW50RGF0YS5maW5hbFNpemUgKyAncHgnO1xuICAgICAgaW5uZXJFbGVtU3R5bGUubGluZUhlaWdodCA9IGRvY3VtZW50RGF0YS5maW5hbFNpemUgKyAncHgnO1xuXG4gICAgICBpZiAoZm9udERhdGEuZkNsYXNzKSB7XG4gICAgICAgIHRoaXMuaW5uZXJFbGVtLmNsYXNzTmFtZSA9IGZvbnREYXRhLmZDbGFzcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlubmVyRWxlbVN0eWxlLmZvbnRGYW1pbHkgPSBmb250RGF0YS5mRmFtaWx5O1xuICAgICAgICB2YXIgZldlaWdodCA9IGRvY3VtZW50RGF0YS5mV2VpZ2h0O1xuICAgICAgICB2YXIgZlN0eWxlID0gZG9jdW1lbnREYXRhLmZTdHlsZTtcbiAgICAgICAgaW5uZXJFbGVtU3R5bGUuZm9udFN0eWxlID0gZlN0eWxlO1xuICAgICAgICBpbm5lckVsZW1TdHlsZS5mb250V2VpZ2h0ID0gZldlaWdodDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuICAgIHZhciBsZXR0ZXJzID0gZG9jdW1lbnREYXRhLmw7XG4gICAgbGVuID0gbGV0dGVycy5sZW5ndGg7XG4gICAgdmFyIHRTcGFuO1xuICAgIHZhciB0UGFyZW50O1xuICAgIHZhciB0Q29udDtcbiAgICB2YXIgbWF0cml4SGVscGVyID0gdGhpcy5tSGVscGVyO1xuICAgIHZhciBzaGFwZXM7XG4gICAgdmFyIHNoYXBlU3RyID0gJyc7XG4gICAgdmFyIGNudCA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuY2hhcnMpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRleHRQYXRoc1tjbnRdKSB7XG4gICAgICAgICAgdFNwYW4gPSBjcmVhdGVOUygncGF0aCcpO1xuICAgICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVjYXAnLCBsaW5lQ2FwRW51bVsxXSk7XG4gICAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWpvaW4nLCBsaW5lSm9pbkVudW1bMl0pO1xuICAgICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLW1pdGVybGltaXQnLCAnNCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRTcGFuID0gdGhpcy50ZXh0UGF0aHNbY250XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5pc01hc2tlZCkge1xuICAgICAgICAgIGlmICh0aGlzLnRleHRTcGFuc1tjbnRdKSB7XG4gICAgICAgICAgICB0UGFyZW50ID0gdGhpcy50ZXh0U3BhbnNbY250XTtcbiAgICAgICAgICAgIHRDb250ID0gdFBhcmVudC5jaGlsZHJlblswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdFBhcmVudCA9IGNyZWF0ZVRhZygnZGl2Jyk7XG4gICAgICAgICAgICB0UGFyZW50LnN0eWxlLmxpbmVIZWlnaHQgPSAwO1xuICAgICAgICAgICAgdENvbnQgPSBjcmVhdGVOUygnc3ZnJyk7XG4gICAgICAgICAgICB0Q29udC5hcHBlbmRDaGlsZCh0U3Bhbik7XG4gICAgICAgICAgICBzdHlsZURpdih0UGFyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNNYXNrZWQpIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dFNwYW5zW2NudF0pIHtcbiAgICAgICAgICB0UGFyZW50ID0gdGhpcy50ZXh0U3BhbnNbY250XTtcbiAgICAgICAgICB0U3BhbiA9IHRoaXMudGV4dFBhdGhzW2NudF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdFBhcmVudCA9IGNyZWF0ZVRhZygnc3BhbicpO1xuICAgICAgICAgIHN0eWxlRGl2KHRQYXJlbnQpO1xuICAgICAgICAgIHRTcGFuID0gY3JlYXRlVGFnKCdzcGFuJyk7XG4gICAgICAgICAgc3R5bGVEaXYodFNwYW4pO1xuICAgICAgICAgIHRQYXJlbnQuYXBwZW5kQ2hpbGQodFNwYW4pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0U3BhbiA9IHRoaXMudGV4dFBhdGhzW2NudF0gPyB0aGlzLnRleHRQYXRoc1tjbnRdIDogY3JlYXRlTlMoJ3RleHQnKTtcbiAgICAgIH0gLy8gdFNwYW4uc2V0QXR0cmlidXRlKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cbiAgICAgIGlmICh0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuY2hhcnMpIHtcbiAgICAgICAgdmFyIGNoYXJEYXRhID0gdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldENoYXJEYXRhKGRvY3VtZW50RGF0YS5maW5hbFRleHRbaV0sIGZvbnREYXRhLmZTdHlsZSwgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHkpO1xuICAgICAgICB2YXIgc2hhcGVEYXRhO1xuXG4gICAgICAgIGlmIChjaGFyRGF0YSkge1xuICAgICAgICAgIHNoYXBlRGF0YSA9IGNoYXJEYXRhLmRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hhcGVEYXRhID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hdHJpeEhlbHBlci5yZXNldCgpO1xuXG4gICAgICAgIGlmIChzaGFwZURhdGEgJiYgc2hhcGVEYXRhLnNoYXBlcyAmJiBzaGFwZURhdGEuc2hhcGVzLmxlbmd0aCkge1xuICAgICAgICAgIHNoYXBlcyA9IHNoYXBlRGF0YS5zaGFwZXNbMF0uaXQ7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnNjYWxlKGRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxMDAsIGRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxMDApO1xuICAgICAgICAgIHNoYXBlU3RyID0gdGhpcy5jcmVhdGVQYXRoU2hhcGUobWF0cml4SGVscGVyLCBzaGFwZXMpO1xuICAgICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgnZCcsIHNoYXBlU3RyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5pc01hc2tlZCkge1xuICAgICAgICAgIHRoaXMuaW5uZXJFbGVtLmFwcGVuZENoaWxkKHRQYXJlbnQpO1xuXG4gICAgICAgICAgaWYgKHNoYXBlRGF0YSAmJiBzaGFwZURhdGEuc2hhcGVzKSB7XG4gICAgICAgICAgICAvLyBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIGlzIG5lZWRlZCB0byBnZXQgZXhhY3QgbWVhc3VyZSBvZiBzaGFwZVxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0Q29udCk7XG4gICAgICAgICAgICB2YXIgYm91bmRpbmdCb3ggPSB0Q29udC5nZXRCQm94KCk7XG4gICAgICAgICAgICB0Q29udC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYm91bmRpbmdCb3gud2lkdGggKyAyKTtcbiAgICAgICAgICAgIHRDb250LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgYm91bmRpbmdCb3guaGVpZ2h0ICsgMik7XG4gICAgICAgICAgICB0Q29udC5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCBib3VuZGluZ0JveC54IC0gMSArICcgJyArIChib3VuZGluZ0JveC55IC0gMSkgKyAnICcgKyAoYm91bmRpbmdCb3gud2lkdGggKyAyKSArICcgJyArIChib3VuZGluZ0JveC5oZWlnaHQgKyAyKSk7XG4gICAgICAgICAgICB2YXIgdENvbnRTdHlsZSA9IHRDb250LnN0eWxlO1xuICAgICAgICAgICAgdmFyIHRDb250VHJhbnNsYXRpb24gPSAndHJhbnNsYXRlKCcgKyAoYm91bmRpbmdCb3gueCAtIDEpICsgJ3B4LCcgKyAoYm91bmRpbmdCb3gueSAtIDEpICsgJ3B4KSc7XG4gICAgICAgICAgICB0Q29udFN0eWxlLnRyYW5zZm9ybSA9IHRDb250VHJhbnNsYXRpb247XG4gICAgICAgICAgICB0Q29udFN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRDb250VHJhbnNsYXRpb247XG4gICAgICAgICAgICBsZXR0ZXJzW2ldLnlPZmZzZXQgPSBib3VuZGluZ0JveC55IC0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdENvbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIDEpO1xuICAgICAgICAgICAgdENvbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAxKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0UGFyZW50LmFwcGVuZENoaWxkKHRDb250KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmlubmVyRWxlbS5hcHBlbmRDaGlsZCh0U3Bhbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRTcGFuLnRleHRDb250ZW50ID0gbGV0dGVyc1tpXS52YWw7XG4gICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnLCAneG1sOnNwYWNlJywgJ3ByZXNlcnZlJyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzTWFza2VkKSB7XG4gICAgICAgICAgdGhpcy5pbm5lckVsZW0uYXBwZW5kQ2hpbGQodFBhcmVudCk7IC8vXG5cbiAgICAgICAgICB2YXIgdFN0eWxlID0gdFNwYW4uc3R5bGU7XG4gICAgICAgICAgdmFyIHRTcGFuVHJhbnNsYXRpb24gPSAndHJhbnNsYXRlM2QoMCwnICsgLWRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxLjIgKyAncHgsMCknO1xuICAgICAgICAgIHRTdHlsZS50cmFuc2Zvcm0gPSB0U3BhblRyYW5zbGF0aW9uO1xuICAgICAgICAgIHRTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0U3BhblRyYW5zbGF0aW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaW5uZXJFbGVtLmFwcGVuZENoaWxkKHRTcGFuKTtcbiAgICAgICAgfVxuICAgICAgfSAvL1xuXG5cbiAgICAgIGlmICghdGhpcy5pc01hc2tlZCkge1xuICAgICAgICB0aGlzLnRleHRTcGFuc1tjbnRdID0gdFBhcmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGV4dFNwYW5zW2NudF0gPSB0U3BhbjtcbiAgICAgIH1cblxuICAgICAgdGhpcy50ZXh0U3BhbnNbY250XS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIHRoaXMudGV4dFBhdGhzW2NudF0gPSB0U3BhbjtcbiAgICAgIGNudCArPSAxO1xuICAgIH1cblxuICAgIHdoaWxlIChjbnQgPCB0aGlzLnRleHRTcGFucy5sZW5ndGgpIHtcbiAgICAgIHRoaXMudGV4dFNwYW5zW2NudF0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIGNudCArPSAxO1xuICAgIH1cbiAgfTtcblxuICBIVGV4dEVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnZhbGlkYXRlVGV4dCgpO1xuICAgIHZhciBzdmdTdHlsZTtcblxuICAgIGlmICh0aGlzLmRhdGEuc2luZ2xlU2hhcGUpIHtcbiAgICAgIGlmICghdGhpcy5faXNGaXJzdEZyYW1lICYmICF0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzTWFza2VkICYmIHRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZikge1xuICAgICAgICAvLyBUb2RvIEJlbmNobWFyayBpZiB1c2luZyB0aGlzIGlzIGJldHRlciB0aGFuIGdldEJCb3hcbiAgICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgndmlld0JveCcsIC10aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnAudlswXSArICcgJyArIC10aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnAudlsxXSArICcgJyArIHRoaXMuY29tcFcgKyAnICcgKyB0aGlzLmNvbXBIKTtcbiAgICAgICAgc3ZnU3R5bGUgPSB0aGlzLnN2Z0VsZW1lbnQuc3R5bGU7XG4gICAgICAgIHZhciB0cmFuc2xhdGlvbiA9ICd0cmFuc2xhdGUoJyArIC10aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnAudlswXSArICdweCwnICsgLXRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3AucC52WzFdICsgJ3B4KSc7XG4gICAgICAgIHN2Z1N0eWxlLnRyYW5zZm9ybSA9IHRyYW5zbGF0aW9uO1xuICAgICAgICBzdmdTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2xhdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRleHRBbmltYXRvci5nZXRNZWFzdXJlcyh0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YSwgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcpO1xuXG4gICAgaWYgKCF0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyAmJiAhdGhpcy50ZXh0QW5pbWF0b3IubGV0dGVyc0NoYW5nZWRGbGFnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciByZW5kZXJlZExldHRlcnMgPSB0aGlzLnRleHRBbmltYXRvci5yZW5kZXJlZExldHRlcnM7XG4gICAgdmFyIGxldHRlcnMgPSB0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sO1xuICAgIGxlbiA9IGxldHRlcnMubGVuZ3RoO1xuICAgIHZhciByZW5kZXJlZExldHRlcjtcbiAgICB2YXIgdGV4dFNwYW47XG4gICAgdmFyIHRleHRQYXRoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAobGV0dGVyc1tpXS5uKSB7XG4gICAgICAgIGNvdW50ICs9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0U3BhbiA9IHRoaXMudGV4dFNwYW5zW2ldO1xuICAgICAgICB0ZXh0UGF0aCA9IHRoaXMudGV4dFBhdGhzW2ldO1xuICAgICAgICByZW5kZXJlZExldHRlciA9IHJlbmRlcmVkTGV0dGVyc1tjb3VudF07XG4gICAgICAgIGNvdW50ICs9IDE7XG5cbiAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyLl9tZGYubSkge1xuICAgICAgICAgIGlmICghdGhpcy5pc01hc2tlZCkge1xuICAgICAgICAgICAgdGV4dFNwYW4uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gcmVuZGVyZWRMZXR0ZXIubTtcbiAgICAgICAgICAgIHRleHRTcGFuLnN0eWxlLnRyYW5zZm9ybSA9IHJlbmRlcmVkTGV0dGVyLm07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHRTcGFuLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgcmVuZGVyZWRMZXR0ZXIubSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vLyAvdGV4dFNwYW4uc2V0QXR0cmlidXRlKCdvcGFjaXR5JyxyZW5kZXJlZExldHRlci5vKTtcblxuXG4gICAgICAgIHRleHRTcGFuLnN0eWxlLm9wYWNpdHkgPSByZW5kZXJlZExldHRlci5vO1xuXG4gICAgICAgIGlmIChyZW5kZXJlZExldHRlci5zdyAmJiByZW5kZXJlZExldHRlci5fbWRmLnN3KSB7XG4gICAgICAgICAgdGV4dFBhdGguc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCByZW5kZXJlZExldHRlci5zdyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIuc2MgJiYgcmVuZGVyZWRMZXR0ZXIuX21kZi5zYykge1xuICAgICAgICAgIHRleHRQYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgcmVuZGVyZWRMZXR0ZXIuc2MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyLmZjICYmIHJlbmRlcmVkTGV0dGVyLl9tZGYuZmMpIHtcbiAgICAgICAgICB0ZXh0UGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCByZW5kZXJlZExldHRlci5mYyk7XG4gICAgICAgICAgdGV4dFBhdGguc3R5bGUuY29sb3IgPSByZW5kZXJlZExldHRlci5mYztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmlubmVyRWxlbS5nZXRCQm94ICYmICF0aGlzLmhpZGRlbiAmJiAodGhpcy5faXNGaXJzdEZyYW1lIHx8IHRoaXMuX21kZikpIHtcbiAgICAgIHZhciBib3VuZGluZ0JveCA9IHRoaXMuaW5uZXJFbGVtLmdldEJCb3goKTtcblxuICAgICAgaWYgKHRoaXMuY3VycmVudEJCb3gudyAhPT0gYm91bmRpbmdCb3gud2lkdGgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC53ID0gYm91bmRpbmdCb3gud2lkdGg7XG4gICAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYm91bmRpbmdCb3gud2lkdGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jdXJyZW50QkJveC5oICE9PSBib3VuZGluZ0JveC5oZWlnaHQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC5oID0gYm91bmRpbmdCb3guaGVpZ2h0O1xuICAgICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBib3VuZGluZ0JveC5oZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWFyZ2luID0gMTtcblxuICAgICAgaWYgKHRoaXMuY3VycmVudEJCb3gudyAhPT0gYm91bmRpbmdCb3gud2lkdGggKyBtYXJnaW4gKiAyIHx8IHRoaXMuY3VycmVudEJCb3guaCAhPT0gYm91bmRpbmdCb3guaGVpZ2h0ICsgbWFyZ2luICogMiB8fCB0aGlzLmN1cnJlbnRCQm94LnggIT09IGJvdW5kaW5nQm94LnggLSBtYXJnaW4gfHwgdGhpcy5jdXJyZW50QkJveC55ICE9PSBib3VuZGluZ0JveC55IC0gbWFyZ2luKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3gudyA9IGJvdW5kaW5nQm94LndpZHRoICsgbWFyZ2luICogMjtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC5oID0gYm91bmRpbmdCb3guaGVpZ2h0ICsgbWFyZ2luICogMjtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC54ID0gYm91bmRpbmdCb3gueCAtIG1hcmdpbjtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC55ID0gYm91bmRpbmdCb3gueSAtIG1hcmdpbjtcbiAgICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgndmlld0JveCcsIHRoaXMuY3VycmVudEJCb3gueCArICcgJyArIHRoaXMuY3VycmVudEJCb3gueSArICcgJyArIHRoaXMuY3VycmVudEJCb3gudyArICcgJyArIHRoaXMuY3VycmVudEJCb3guaCk7XG4gICAgICAgIHN2Z1N0eWxlID0gdGhpcy5zdmdFbGVtZW50LnN0eWxlO1xuICAgICAgICB2YXIgc3ZnVHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgnICsgdGhpcy5jdXJyZW50QkJveC54ICsgJ3B4LCcgKyB0aGlzLmN1cnJlbnRCQm94LnkgKyAncHgpJztcbiAgICAgICAgc3ZnU3R5bGUudHJhbnNmb3JtID0gc3ZnVHJhbnNmb3JtO1xuICAgICAgICBzdmdTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBzdmdUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIEhDYW1lcmFFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmluaXRGcmFtZSgpO1xuICAgIHRoaXMuaW5pdEJhc2VEYXRhKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMuaW5pdEhpZXJhcmNoeSgpO1xuICAgIHZhciBnZXRQcm9wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3A7XG4gICAgdGhpcy5wZSA9IGdldFByb3AodGhpcywgZGF0YS5wZSwgMCwgMCwgdGhpcyk7XG5cbiAgICBpZiAoZGF0YS5rcy5wLnMpIHtcbiAgICAgIHRoaXMucHggPSBnZXRQcm9wKHRoaXMsIGRhdGEua3MucC54LCAxLCAwLCB0aGlzKTtcbiAgICAgIHRoaXMucHkgPSBnZXRQcm9wKHRoaXMsIGRhdGEua3MucC55LCAxLCAwLCB0aGlzKTtcbiAgICAgIHRoaXMucHogPSBnZXRQcm9wKHRoaXMsIGRhdGEua3MucC56LCAxLCAwLCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wID0gZ2V0UHJvcCh0aGlzLCBkYXRhLmtzLnAsIDEsIDAsIHRoaXMpO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmtzLmEpIHtcbiAgICAgIHRoaXMuYSA9IGdldFByb3AodGhpcywgZGF0YS5rcy5hLCAxLCAwLCB0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5rcy5vci5rLmxlbmd0aCAmJiBkYXRhLmtzLm9yLmtbMF0udG8pIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGRhdGEua3Mub3Iuay5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBkYXRhLmtzLm9yLmtbaV0udG8gPSBudWxsO1xuICAgICAgICBkYXRhLmtzLm9yLmtbaV0udGkgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3IgPSBnZXRQcm9wKHRoaXMsIGRhdGEua3Mub3IsIDEsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgdGhpcy5vci5zaCA9IHRydWU7XG4gICAgdGhpcy5yeCA9IGdldFByb3AodGhpcywgZGF0YS5rcy5yeCwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICB0aGlzLnJ5ID0gZ2V0UHJvcCh0aGlzLCBkYXRhLmtzLnJ5LCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgIHRoaXMucnogPSBnZXRQcm9wKHRoaXMsIGRhdGEua3MucnosIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgdGhpcy5tYXQgPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5fcHJldk1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlOyAvLyBUT0RPOiBmaW5kIGEgYmV0dGVyIHdheSB0byBtYWtlIHRoZSBIQ2FtZXJhIGVsZW1lbnQgdG8gYmUgY29tcGF0aWJsZSB3aXRoIHRoZSBMYXllckludGVyZmFjZSBhbmQgVHJhbnNmb3JtSW50ZXJmYWNlLlxuXG4gICAgdGhpcy5maW5hbFRyYW5zZm9ybSA9IHtcbiAgICAgIG1Qcm9wOiB0aGlzXG4gICAgfTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudF0sIEhDYW1lcmFFbGVtZW50KTtcblxuICBIQ2FtZXJhRWxlbWVudC5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuY29tcC50aHJlZURFbGVtZW50cy5sZW5ndGg7XG4gICAgdmFyIGNvbXA7XG4gICAgdmFyIHBlcnNwZWN0aXZlU3R5bGU7XG4gICAgdmFyIGNvbnRhaW5lclN0eWxlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAvLyBbcGVyc3BlY3RpdmVFbGVtLGNvbnRhaW5lcl1cbiAgICAgIGNvbXAgPSB0aGlzLmNvbXAudGhyZWVERWxlbWVudHNbaV07XG5cbiAgICAgIGlmIChjb21wLnR5cGUgPT09ICczZCcpIHtcbiAgICAgICAgcGVyc3BlY3RpdmVTdHlsZSA9IGNvbXAucGVyc3BlY3RpdmVFbGVtLnN0eWxlO1xuICAgICAgICBjb250YWluZXJTdHlsZSA9IGNvbXAuY29udGFpbmVyLnN0eWxlO1xuICAgICAgICB2YXIgcGVyc3BlY3RpdmUgPSB0aGlzLnBlLnYgKyAncHgnO1xuICAgICAgICB2YXIgb3JpZ2luID0gJzBweCAwcHggMHB4JztcbiAgICAgICAgdmFyIG1hdHJpeCA9ICdtYXRyaXgzZCgxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCwwLDAsMCwxKSc7XG4gICAgICAgIHBlcnNwZWN0aXZlU3R5bGUucGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZTtcbiAgICAgICAgcGVyc3BlY3RpdmVTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9IHBlcnNwZWN0aXZlO1xuICAgICAgICBjb250YWluZXJTdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICAgIGNvbnRhaW5lclN0eWxlLm1velRyYW5zZm9ybU9yaWdpbiA9IG9yaWdpbjtcbiAgICAgICAgY29udGFpbmVyU3R5bGUud2Via2l0VHJhbnNmb3JtT3JpZ2luID0gb3JpZ2luO1xuICAgICAgICBwZXJzcGVjdGl2ZVN0eWxlLnRyYW5zZm9ybSA9IG1hdHJpeDtcbiAgICAgICAgcGVyc3BlY3RpdmVTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBtYXRyaXg7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEhDYW1lcmFFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50cyA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIEhDYW1lcmFFbGVtZW50LnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge307XG5cbiAgSENhbWVyYUVsZW1lbnQucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfbWRmID0gdGhpcy5faXNGaXJzdEZyYW1lO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG5cbiAgICBpZiAodGhpcy5oaWVyYXJjaHkpIHtcbiAgICAgIGxlbiA9IHRoaXMuaGllcmFyY2h5Lmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIF9tZGYgPSB0aGlzLmhpZXJhcmNoeVtpXS5maW5hbFRyYW5zZm9ybS5tUHJvcC5fbWRmIHx8IF9tZGY7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKF9tZGYgfHwgdGhpcy5wZS5fbWRmIHx8IHRoaXMucCAmJiB0aGlzLnAuX21kZiB8fCB0aGlzLnB4ICYmICh0aGlzLnB4Ll9tZGYgfHwgdGhpcy5weS5fbWRmIHx8IHRoaXMucHouX21kZikgfHwgdGhpcy5yeC5fbWRmIHx8IHRoaXMucnkuX21kZiB8fCB0aGlzLnJ6Ll9tZGYgfHwgdGhpcy5vci5fbWRmIHx8IHRoaXMuYSAmJiB0aGlzLmEuX21kZikge1xuICAgICAgdGhpcy5tYXQucmVzZXQoKTtcblxuICAgICAgaWYgKHRoaXMuaGllcmFyY2h5KSB7XG4gICAgICAgIGxlbiA9IHRoaXMuaGllcmFyY2h5Lmxlbmd0aCAtIDE7XG5cbiAgICAgICAgZm9yIChpID0gbGVuOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIHZhciBtVHJhbnNmID0gdGhpcy5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3A7XG4gICAgICAgICAgdGhpcy5tYXQudHJhbnNsYXRlKC1tVHJhbnNmLnAudlswXSwgLW1UcmFuc2YucC52WzFdLCBtVHJhbnNmLnAudlsyXSk7XG4gICAgICAgICAgdGhpcy5tYXQucm90YXRlWCgtbVRyYW5zZi5vci52WzBdKS5yb3RhdGVZKC1tVHJhbnNmLm9yLnZbMV0pLnJvdGF0ZVoobVRyYW5zZi5vci52WzJdKTtcbiAgICAgICAgICB0aGlzLm1hdC5yb3RhdGVYKC1tVHJhbnNmLnJ4LnYpLnJvdGF0ZVkoLW1UcmFuc2Yucnkudikucm90YXRlWihtVHJhbnNmLnJ6LnYpO1xuICAgICAgICAgIHRoaXMubWF0LnNjYWxlKDEgLyBtVHJhbnNmLnMudlswXSwgMSAvIG1UcmFuc2Yucy52WzFdLCAxIC8gbVRyYW5zZi5zLnZbMl0pO1xuICAgICAgICAgIHRoaXMubWF0LnRyYW5zbGF0ZShtVHJhbnNmLmEudlswXSwgbVRyYW5zZi5hLnZbMV0sIG1UcmFuc2YuYS52WzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wKSB7XG4gICAgICAgIHRoaXMubWF0LnRyYW5zbGF0ZSgtdGhpcy5wLnZbMF0sIC10aGlzLnAudlsxXSwgdGhpcy5wLnZbMl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tYXQudHJhbnNsYXRlKC10aGlzLnB4LnYsIC10aGlzLnB5LnYsIHRoaXMucHoudik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmEpIHtcbiAgICAgICAgdmFyIGRpZmZWZWN0b3I7XG5cbiAgICAgICAgaWYgKHRoaXMucCkge1xuICAgICAgICAgIGRpZmZWZWN0b3IgPSBbdGhpcy5wLnZbMF0gLSB0aGlzLmEudlswXSwgdGhpcy5wLnZbMV0gLSB0aGlzLmEudlsxXSwgdGhpcy5wLnZbMl0gLSB0aGlzLmEudlsyXV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlmZlZlY3RvciA9IFt0aGlzLnB4LnYgLSB0aGlzLmEudlswXSwgdGhpcy5weS52IC0gdGhpcy5hLnZbMV0sIHRoaXMucHoudiAtIHRoaXMuYS52WzJdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYWcgPSBNYXRoLnNxcnQoTWF0aC5wb3coZGlmZlZlY3RvclswXSwgMikgKyBNYXRoLnBvdyhkaWZmVmVjdG9yWzFdLCAyKSArIE1hdGgucG93KGRpZmZWZWN0b3JbMl0sIDIpKTsgLy8gdmFyIGxvb2tEaXIgPSBnZXROb3JtYWxpemVkUG9pbnQoZ2V0RGlmZlZlY3Rvcih0aGlzLmEudix0aGlzLnAudikpO1xuXG4gICAgICAgIHZhciBsb29rRGlyID0gW2RpZmZWZWN0b3JbMF0gLyBtYWcsIGRpZmZWZWN0b3JbMV0gLyBtYWcsIGRpZmZWZWN0b3JbMl0gLyBtYWddO1xuICAgICAgICB2YXIgbG9va0xlbmd0aE9uWFogPSBNYXRoLnNxcnQobG9va0RpclsyXSAqIGxvb2tEaXJbMl0gKyBsb29rRGlyWzBdICogbG9va0RpclswXSk7XG4gICAgICAgIHZhciBtUm90YXRpb25YID0gTWF0aC5hdGFuMihsb29rRGlyWzFdLCBsb29rTGVuZ3RoT25YWik7XG4gICAgICAgIHZhciBtUm90YXRpb25ZID0gTWF0aC5hdGFuMihsb29rRGlyWzBdLCAtbG9va0RpclsyXSk7XG4gICAgICAgIHRoaXMubWF0LnJvdGF0ZVkobVJvdGF0aW9uWSkucm90YXRlWCgtbVJvdGF0aW9uWCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubWF0LnJvdGF0ZVgoLXRoaXMucngudikucm90YXRlWSgtdGhpcy5yeS52KS5yb3RhdGVaKHRoaXMucnoudik7XG4gICAgICB0aGlzLm1hdC5yb3RhdGVYKC10aGlzLm9yLnZbMF0pLnJvdGF0ZVkoLXRoaXMub3IudlsxXSkucm90YXRlWih0aGlzLm9yLnZbMl0pO1xuICAgICAgdGhpcy5tYXQudHJhbnNsYXRlKHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53IC8gMiwgdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmggLyAyLCAwKTtcbiAgICAgIHRoaXMubWF0LnRyYW5zbGF0ZSgwLCAwLCB0aGlzLnBlLnYpO1xuICAgICAgdmFyIGhhc01hdHJpeENoYW5nZWQgPSAhdGhpcy5fcHJldk1hdC5lcXVhbHModGhpcy5tYXQpO1xuXG4gICAgICBpZiAoKGhhc01hdHJpeENoYW5nZWQgfHwgdGhpcy5wZS5fbWRmKSAmJiB0aGlzLmNvbXAudGhyZWVERWxlbWVudHMpIHtcbiAgICAgICAgbGVuID0gdGhpcy5jb21wLnRocmVlREVsZW1lbnRzLmxlbmd0aDtcbiAgICAgICAgdmFyIGNvbXA7XG4gICAgICAgIHZhciBwZXJzcGVjdGl2ZVN0eWxlO1xuICAgICAgICB2YXIgY29udGFpbmVyU3R5bGU7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgY29tcCA9IHRoaXMuY29tcC50aHJlZURFbGVtZW50c1tpXTtcblxuICAgICAgICAgIGlmIChjb21wLnR5cGUgPT09ICczZCcpIHtcbiAgICAgICAgICAgIGlmIChoYXNNYXRyaXhDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgIHZhciBtYXRWYWx1ZSA9IHRoaXMubWF0LnRvQ1NTKCk7XG4gICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlID0gY29tcC5jb250YWluZXIuc3R5bGU7XG4gICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLnRyYW5zZm9ybSA9IG1hdFZhbHVlO1xuICAgICAgICAgICAgICBjb250YWluZXJTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBtYXRWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMucGUuX21kZikge1xuICAgICAgICAgICAgICBwZXJzcGVjdGl2ZVN0eWxlID0gY29tcC5wZXJzcGVjdGl2ZUVsZW0uc3R5bGU7XG4gICAgICAgICAgICAgIHBlcnNwZWN0aXZlU3R5bGUucGVyc3BlY3RpdmUgPSB0aGlzLnBlLnYgKyAncHgnO1xuICAgICAgICAgICAgICBwZXJzcGVjdGl2ZVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID0gdGhpcy5wZS52ICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hdC5jbG9uZSh0aGlzLl9wcmV2TWF0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSBmYWxzZTtcbiAgfTtcblxuICBIQ2FtZXJhRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0cnVlKTtcbiAgfTtcblxuICBIQ2FtZXJhRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIEhDYW1lcmFFbGVtZW50LnByb3RvdHlwZS5nZXRCYXNlRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBmdW5jdGlvbiBISW1hZ2VFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmFzc2V0RGF0YSA9IGdsb2JhbERhdGEuZ2V0QXNzZXREYXRhKGRhdGEucmVmSWQpO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBIQmFzZUVsZW1lbnQsIEhTb2xpZEVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZUVsZW1lbnRdLCBISW1hZ2VFbGVtZW50KTtcblxuICBISW1hZ2VFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhc3NldFBhdGggPSB0aGlzLmdsb2JhbERhdGEuZ2V0QXNzZXRzUGF0aCh0aGlzLmFzc2V0RGF0YSk7XG4gICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuXG4gICAgaWYgKHRoaXMuZGF0YS5oYXNNYXNrKSB7XG4gICAgICB0aGlzLmltYWdlRWxlbSA9IGNyZWF0ZU5TKCdpbWFnZScpO1xuICAgICAgdGhpcy5pbWFnZUVsZW0uc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMuYXNzZXREYXRhLncgKyAncHgnKTtcbiAgICAgIHRoaXMuaW1hZ2VFbGVtLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5hc3NldERhdGEuaCArICdweCcpO1xuICAgICAgdGhpcy5pbWFnZUVsZW0uc2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCAnaHJlZicsIGFzc2V0UGF0aCk7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmltYWdlRWxlbSk7XG4gICAgICB0aGlzLmJhc2VFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmFzc2V0RGF0YS53KTtcbiAgICAgIHRoaXMuYmFzZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmFzc2V0RGF0YS5oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQoaW1nKTtcbiAgICB9XG5cbiAgICBpbWcuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcbiAgICBpbWcuc3JjID0gYXNzZXRQYXRoO1xuXG4gICAgaWYgKHRoaXMuZGF0YS5sbikge1xuICAgICAgdGhpcy5iYXNlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5kYXRhLmxuKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gSHlicmlkUmVuZGVyZXJCYXNlKGFuaW1hdGlvbkl0ZW0sIGNvbmZpZykge1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbSA9IGFuaW1hdGlvbkl0ZW07XG4gICAgdGhpcy5sYXllcnMgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IC0xO1xuICAgIHRoaXMucmVuZGVyQ29uZmlnID0ge1xuICAgICAgY2xhc3NOYW1lOiBjb25maWcgJiYgY29uZmlnLmNsYXNzTmFtZSB8fCAnJyxcbiAgICAgIGltYWdlUHJlc2VydmVBc3BlY3RSYXRpbzogY29uZmlnICYmIGNvbmZpZy5pbWFnZVByZXNlcnZlQXNwZWN0UmF0aW8gfHwgJ3hNaWRZTWlkIHNsaWNlJyxcbiAgICAgIGhpZGVPblRyYW5zcGFyZW50OiAhKGNvbmZpZyAmJiBjb25maWcuaGlkZU9uVHJhbnNwYXJlbnQgPT09IGZhbHNlKSxcbiAgICAgIGZpbHRlclNpemU6IHtcbiAgICAgICAgd2lkdGg6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS53aWR0aCB8fCAnNDAwJScsXG4gICAgICAgIGhlaWdodDogY29uZmlnICYmIGNvbmZpZy5maWx0ZXJTaXplICYmIGNvbmZpZy5maWx0ZXJTaXplLmhlaWdodCB8fCAnNDAwJScsXG4gICAgICAgIHg6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS54IHx8ICctMTAwJScsXG4gICAgICAgIHk6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS55IHx8ICctMTAwJSdcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuZ2xvYmFsRGF0YSA9IHtcbiAgICAgIF9tZGY6IGZhbHNlLFxuICAgICAgZnJhbWVOdW06IC0xLFxuICAgICAgcmVuZGVyQ29uZmlnOiB0aGlzLnJlbmRlckNvbmZpZ1xuICAgIH07XG4gICAgdGhpcy5wZW5kaW5nRWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgdGhpcy50aHJlZURFbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5jYW1lcmEgPSBudWxsO1xuICAgIHRoaXMuc3VwcG9ydHMzZCA9IHRydWU7XG4gICAgdGhpcy5yZW5kZXJlclR5cGUgPSAnaHRtbCc7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VSZW5kZXJlcl0sIEh5YnJpZFJlbmRlcmVyQmFzZSk7XG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuYnVpbGRJdGVtID0gU1ZHUmVuZGVyZXIucHJvdG90eXBlLmJ1aWxkSXRlbTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmNoZWNrUGVuZGluZ0VsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHdoaWxlICh0aGlzLnBlbmRpbmdFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5wZW5kaW5nRWxlbWVudHMucG9wKCk7XG4gICAgICBlbGVtZW50LmNoZWNrUGFyZW50aW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuYXBwZW5kRWxlbWVudEluUG9zID0gZnVuY3Rpb24gKGVsZW1lbnQsIHBvcykge1xuICAgIHZhciBuZXdET01FbGVtZW50ID0gZWxlbWVudC5nZXRCYXNlRWxlbWVudCgpO1xuXG4gICAgaWYgKCFuZXdET01FbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxheWVyID0gdGhpcy5sYXllcnNbcG9zXTtcblxuICAgIGlmICghbGF5ZXIuZGRkIHx8ICF0aGlzLnN1cHBvcnRzM2QpIHtcbiAgICAgIGlmICh0aGlzLnRocmVlREVsZW1lbnRzKSB7XG4gICAgICAgIHRoaXMuYWRkVG8zZENvbnRhaW5lcihuZXdET01FbGVtZW50LCBwb3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbmV4dERPTUVsZW1lbnQ7XG4gICAgICAgIHZhciBuZXh0TGF5ZXI7XG4gICAgICAgIHZhciB0bXBET01FbGVtZW50O1xuXG4gICAgICAgIHdoaWxlIChpIDwgcG9zKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0gJiYgdGhpcy5lbGVtZW50c1tpXSAhPT0gdHJ1ZSAmJiB0aGlzLmVsZW1lbnRzW2ldLmdldEJhc2VFbGVtZW50KSB7XG4gICAgICAgICAgICBuZXh0TGF5ZXIgPSB0aGlzLmVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgdG1wRE9NRWxlbWVudCA9IHRoaXMubGF5ZXJzW2ldLmRkZCA/IHRoaXMuZ2V0VGhyZWVEQ29udGFpbmVyQnlQb3MoaSkgOiBuZXh0TGF5ZXIuZ2V0QmFzZUVsZW1lbnQoKTtcbiAgICAgICAgICAgIG5leHRET01FbGVtZW50ID0gdG1wRE9NRWxlbWVudCB8fCBuZXh0RE9NRWxlbWVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dERPTUVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAoIWxheWVyLmRkZCB8fCAhdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVyRWxlbWVudC5pbnNlcnRCZWZvcmUobmV3RE9NRWxlbWVudCwgbmV4dERPTUVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghbGF5ZXIuZGRkIHx8ICF0aGlzLnN1cHBvcnRzM2QpIHtcbiAgICAgICAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChuZXdET01FbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkZFRvM2RDb250YWluZXIobmV3RE9NRWxlbWVudCwgcG9zKTtcbiAgICB9XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVTaGFwZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKCF0aGlzLnN1cHBvcnRzM2QpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHU2hhcGVFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBIU2hhcGVFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuc3VwcG9ydHMzZCkge1xuICAgICAgcmV0dXJuIG5ldyBTVkdUZXh0TG90dGllRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgSFRleHRFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVDYW1lcmEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHRoaXMuY2FtZXJhID0gbmV3IEhDYW1lcmFFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXMuY2FtZXJhO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlSW1hZ2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICByZXR1cm4gbmV3IElJbWFnZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEhJbWFnZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZVNvbGlkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuc3VwcG9ydHMzZCkge1xuICAgICAgcmV0dXJuIG5ldyBJU29saWRFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBIU29saWRFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVOdWxsID0gU1ZHUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZU51bGw7XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5nZXRUaHJlZURDb250YWluZXJCeVBvcyA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRoaXMudGhyZWVERWxlbWVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmICh0aGlzLnRocmVlREVsZW1lbnRzW2ldLnN0YXJ0UG9zIDw9IHBvcyAmJiB0aGlzLnRocmVlREVsZW1lbnRzW2ldLmVuZFBvcyA+PSBwb3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhyZWVERWxlbWVudHNbaV0ucGVyc3BlY3RpdmVFbGVtO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVUaHJlZURDb250YWluZXIgPSBmdW5jdGlvbiAocG9zLCB0eXBlKSB7XG4gICAgdmFyIHBlcnNwZWN0aXZlRWxlbSA9IGNyZWF0ZVRhZygnZGl2Jyk7XG4gICAgdmFyIHN0eWxlO1xuICAgIHZhciBjb250YWluZXJTdHlsZTtcbiAgICBzdHlsZURpdihwZXJzcGVjdGl2ZUVsZW0pO1xuICAgIHZhciBjb250YWluZXIgPSBjcmVhdGVUYWcoJ2RpdicpO1xuICAgIHN0eWxlRGl2KGNvbnRhaW5lcik7XG5cbiAgICBpZiAodHlwZSA9PT0gJzNkJykge1xuICAgICAgc3R5bGUgPSBwZXJzcGVjdGl2ZUVsZW0uc3R5bGU7XG4gICAgICBzdHlsZS53aWR0aCA9IHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53ICsgJ3B4JztcbiAgICAgIHN0eWxlLmhlaWdodCA9IHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oICsgJ3B4JztcbiAgICAgIHZhciBjZW50ZXIgPSAnNTAlIDUwJSc7XG4gICAgICBzdHlsZS53ZWJraXRUcmFuc2Zvcm1PcmlnaW4gPSBjZW50ZXI7XG4gICAgICBzdHlsZS5tb3pUcmFuc2Zvcm1PcmlnaW4gPSBjZW50ZXI7XG4gICAgICBzdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBjZW50ZXI7XG4gICAgICBjb250YWluZXJTdHlsZSA9IGNvbnRhaW5lci5zdHlsZTtcbiAgICAgIHZhciBtYXRyaXggPSAnbWF0cml4M2QoMSwwLDAsMCwwLDEsMCwwLDAsMCwxLDAsMCwwLDAsMSknO1xuICAgICAgY29udGFpbmVyU3R5bGUudHJhbnNmb3JtID0gbWF0cml4O1xuICAgICAgY29udGFpbmVyU3R5bGUud2Via2l0VHJhbnNmb3JtID0gbWF0cml4O1xuICAgIH1cblxuICAgIHBlcnNwZWN0aXZlRWxlbS5hcHBlbmRDaGlsZChjb250YWluZXIpOyAvLyB0aGlzLnJlc2l6ZXJFbGVtLmFwcGVuZENoaWxkKHBlcnNwZWN0aXZlRWxlbSk7XG5cbiAgICB2YXIgdGhyZWVEQ29udGFpbmVyRGF0YSA9IHtcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgcGVyc3BlY3RpdmVFbGVtOiBwZXJzcGVjdGl2ZUVsZW0sXG4gICAgICBzdGFydFBvczogcG9zLFxuICAgICAgZW5kUG9zOiBwb3MsXG4gICAgICB0eXBlOiB0eXBlXG4gICAgfTtcbiAgICB0aGlzLnRocmVlREVsZW1lbnRzLnB1c2godGhyZWVEQ29udGFpbmVyRGF0YSk7XG4gICAgcmV0dXJuIHRocmVlRENvbnRhaW5lckRhdGE7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5idWlsZDNkQ29udGFpbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuICAgIHZhciBsYXN0VGhyZWVEQ29udGFpbmVyRGF0YTtcbiAgICB2YXIgY3VycmVudENvbnRhaW5lciA9ICcnO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5sYXllcnNbaV0uZGRkICYmIHRoaXMubGF5ZXJzW2ldLnR5ICE9PSAzKSB7XG4gICAgICAgIGlmIChjdXJyZW50Q29udGFpbmVyICE9PSAnM2QnKSB7XG4gICAgICAgICAgY3VycmVudENvbnRhaW5lciA9ICczZCc7XG4gICAgICAgICAgbGFzdFRocmVlRENvbnRhaW5lckRhdGEgPSB0aGlzLmNyZWF0ZVRocmVlRENvbnRhaW5lcihpLCAnM2QnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RUaHJlZURDb250YWluZXJEYXRhLmVuZFBvcyA9IE1hdGgubWF4KGxhc3RUaHJlZURDb250YWluZXJEYXRhLmVuZFBvcywgaSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudENvbnRhaW5lciAhPT0gJzJkJykge1xuICAgICAgICAgIGN1cnJlbnRDb250YWluZXIgPSAnMmQnO1xuICAgICAgICAgIGxhc3RUaHJlZURDb250YWluZXJEYXRhID0gdGhpcy5jcmVhdGVUaHJlZURDb250YWluZXIoaSwgJzJkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0VGhyZWVEQ29udGFpbmVyRGF0YS5lbmRQb3MgPSBNYXRoLm1heChsYXN0VGhyZWVEQ29udGFpbmVyRGF0YS5lbmRQb3MsIGkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxlbiA9IHRoaXMudGhyZWVERWxlbWVudHMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIHRoaXMucmVzaXplckVsZW0uYXBwZW5kQ2hpbGQodGhpcy50aHJlZURFbGVtZW50c1tpXS5wZXJzcGVjdGl2ZUVsZW0pO1xuICAgIH1cbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmFkZFRvM2RDb250YWluZXIgPSBmdW5jdGlvbiAoZWxlbSwgcG9zKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0aGlzLnRocmVlREVsZW1lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBpZiAocG9zIDw9IHRoaXMudGhyZWVERWxlbWVudHNbaV0uZW5kUG9zKSB7XG4gICAgICAgIHZhciBqID0gdGhpcy50aHJlZURFbGVtZW50c1tpXS5zdGFydFBvcztcbiAgICAgICAgdmFyIG5leHRFbGVtZW50O1xuXG4gICAgICAgIHdoaWxlIChqIDwgcG9zKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbal0gJiYgdGhpcy5lbGVtZW50c1tqXS5nZXRCYXNlRWxlbWVudCkge1xuICAgICAgICAgICAgbmV4dEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzW2pdLmdldEJhc2VFbGVtZW50KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaiArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRFbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy50aHJlZURFbGVtZW50c1tpXS5jb250YWluZXIuaW5zZXJ0QmVmb3JlKGVsZW0sIG5leHRFbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRocmVlREVsZW1lbnRzW2ldLmNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuY29uZmlnQW5pbWF0aW9uID0gZnVuY3Rpb24gKGFuaW1EYXRhKSB7XG4gICAgdmFyIHJlc2l6ZXJFbGVtID0gY3JlYXRlVGFnKCdkaXYnKTtcbiAgICB2YXIgd3JhcHBlciA9IHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyO1xuICAgIHZhciBzdHlsZSA9IHJlc2l6ZXJFbGVtLnN0eWxlO1xuICAgIHN0eWxlLndpZHRoID0gYW5pbURhdGEudyArICdweCc7XG4gICAgc3R5bGUuaGVpZ2h0ID0gYW5pbURhdGEuaCArICdweCc7XG4gICAgdGhpcy5yZXNpemVyRWxlbSA9IHJlc2l6ZXJFbGVtO1xuICAgIHN0eWxlRGl2KHJlc2l6ZXJFbGVtKTtcbiAgICBzdHlsZS50cmFuc2Zvcm1TdHlsZSA9ICdmbGF0JztcbiAgICBzdHlsZS5tb3pUcmFuc2Zvcm1TdHlsZSA9ICdmbGF0JztcbiAgICBzdHlsZS53ZWJraXRUcmFuc2Zvcm1TdHlsZSA9ICdmbGF0JztcblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpIHtcbiAgICAgIHJlc2l6ZXJFbGVtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpO1xuICAgIH1cblxuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQocmVzaXplckVsZW0pO1xuICAgIHN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgdmFyIHN2ZyA9IGNyZWF0ZU5TKCdzdmcnKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlKCd3aWR0aCcsICcxJyk7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgJzEnKTtcbiAgICBzdHlsZURpdihzdmcpO1xuICAgIHRoaXMucmVzaXplckVsZW0uYXBwZW5kQ2hpbGQoc3ZnKTtcbiAgICB2YXIgZGVmcyA9IGNyZWF0ZU5TKCdkZWZzJyk7XG4gICAgc3ZnLmFwcGVuZENoaWxkKGRlZnMpO1xuICAgIHRoaXMuZGF0YSA9IGFuaW1EYXRhOyAvLyBNYXNrIGFuaW1hdGlvblxuXG4gICAgdGhpcy5zZXR1cEdsb2JhbERhdGEoYW5pbURhdGEsIHN2Zyk7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMgPSBkZWZzO1xuICAgIHRoaXMubGF5ZXJzID0gYW5pbURhdGEubGF5ZXJzO1xuICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gdGhpcy5yZXNpemVyRWxlbTtcbiAgICB0aGlzLmJ1aWxkM2RDb250YWluZXJzKCk7XG4gICAgdGhpcy51cGRhdGVDb250YWluZXJTaXplKCk7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlcikge1xuICAgICAgdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIuaW5uZXJUZXh0ID0gJyc7XG4gICAgfVxuXG4gICAgdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lciA9IG51bGw7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMgPSBudWxsO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycyA/IHRoaXMubGF5ZXJzLmxlbmd0aCA6IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldICYmIHRoaXMuZWxlbWVudHNbaV0uZGVzdHJveSkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbSA9IG51bGw7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS51cGRhdGVDb250YWluZXJTaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbGVtZW50V2lkdGggPSB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5vZmZzZXRXaWR0aDtcbiAgICB2YXIgZWxlbWVudEhlaWdodCA9IHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyLm9mZnNldEhlaWdodDtcbiAgICB2YXIgZWxlbWVudFJlbCA9IGVsZW1lbnRXaWR0aCAvIGVsZW1lbnRIZWlnaHQ7XG4gICAgdmFyIGFuaW1hdGlvblJlbCA9IHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53IC8gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmg7XG4gICAgdmFyIHN4O1xuICAgIHZhciBzeTtcbiAgICB2YXIgdHg7XG4gICAgdmFyIHR5O1xuXG4gICAgaWYgKGFuaW1hdGlvblJlbCA+IGVsZW1lbnRSZWwpIHtcbiAgICAgIHN4ID0gZWxlbWVudFdpZHRoIC8gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLnc7XG4gICAgICBzeSA9IGVsZW1lbnRXaWR0aCAvIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53O1xuICAgICAgdHggPSAwO1xuICAgICAgdHkgPSAoZWxlbWVudEhlaWdodCAtIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oICogKGVsZW1lbnRXaWR0aCAvIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53KSkgLyAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzeCA9IGVsZW1lbnRIZWlnaHQgLyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaDtcbiAgICAgIHN5ID0gZWxlbWVudEhlaWdodCAvIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oO1xuICAgICAgdHggPSAoZWxlbWVudFdpZHRoIC0gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLncgKiAoZWxlbWVudEhlaWdodCAvIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oKSkgLyAyO1xuICAgICAgdHkgPSAwO1xuICAgIH1cblxuICAgIHZhciBzdHlsZSA9IHRoaXMucmVzaXplckVsZW0uc3R5bGU7XG4gICAgc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ21hdHJpeDNkKCcgKyBzeCArICcsMCwwLDAsMCwnICsgc3kgKyAnLDAsMCwwLDAsMSwwLCcgKyB0eCArICcsJyArIHR5ICsgJywwLDEpJztcbiAgICBzdHlsZS50cmFuc2Zvcm0gPSBzdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IFNWR1JlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJGcmFtZTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZXNpemVyRWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlc2l6ZXJFbGVtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuaW5pdEl0ZW1zID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYnVpbGRBbGxJdGVtcygpO1xuXG4gICAgaWYgKHRoaXMuY2FtZXJhKSB7XG4gICAgICB0aGlzLmNhbWVyYS5zZXR1cCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY1dpZHRoID0gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLnc7XG4gICAgICB2YXIgY0hlaWdodCA9IHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy50aHJlZURFbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLnRocmVlREVsZW1lbnRzW2ldLnBlcnNwZWN0aXZlRWxlbS5zdHlsZTtcbiAgICAgICAgc3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPSBNYXRoLnNxcnQoTWF0aC5wb3coY1dpZHRoLCAyKSArIE1hdGgucG93KGNIZWlnaHQsIDIpKSArICdweCc7XG4gICAgICAgIHN0eWxlLnBlcnNwZWN0aXZlID0gc3R5bGUud2Via2l0UGVyc3BlY3RpdmU7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuc2VhcmNoRXh0cmFDb21wb3NpdGlvbnMgPSBmdW5jdGlvbiAoYXNzZXRzKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGFzc2V0cy5sZW5ndGg7XG4gICAgdmFyIGZsb2F0aW5nQ29udGFpbmVyID0gY3JlYXRlVGFnKCdkaXYnKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKGFzc2V0c1tpXS54dCkge1xuICAgICAgICB2YXIgY29tcCA9IHRoaXMuY3JlYXRlQ29tcChhc3NldHNbaV0sIGZsb2F0aW5nQ29udGFpbmVyLCB0aGlzLmdsb2JhbERhdGEuY29tcCwgbnVsbCk7XG4gICAgICAgIGNvbXAuaW5pdEV4cHJlc3Npb25zKCk7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlLnJlZ2lzdGVyQ29tcG9zaXRpb24oY29tcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIEhDb21wRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5sYXllcnMgPSBkYXRhLmxheWVycztcbiAgICB0aGlzLnN1cHBvcnRzM2QgPSAhZGF0YS5oYXNNYXNrO1xuICAgIHRoaXMuY29tcGxldGVMYXllcnMgPSBmYWxzZTtcbiAgICB0aGlzLnBlbmRpbmdFbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLmxheWVycyA/IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5sYXllcnMubGVuZ3RoKSA6IFtdO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy50bSA9IGRhdGEudG0gPyBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLnRtLCAwLCBnbG9iYWxEYXRhLmZyYW1lUmF0ZSwgdGhpcykgOiB7XG4gICAgICBfcGxhY2Vob2xkZXI6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtIeWJyaWRSZW5kZXJlckJhc2UsIElDb21wRWxlbWVudCwgSEJhc2VFbGVtZW50XSwgSENvbXBFbGVtZW50KTtcbiAgSENvbXBFbGVtZW50LnByb3RvdHlwZS5fY3JlYXRlQmFzZUNvbnRhaW5lckVsZW1lbnRzID0gSENvbXBFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250YWluZXJFbGVtZW50cztcblxuICBIQ29tcEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2NyZWF0ZUJhc2VDb250YWluZXJFbGVtZW50cygpOyAvLyBkaXZFbGVtZW50LnN0eWxlLmNsaXAgPSAncmVjdCgwcHgsICcrdGhpcy5kYXRhLncrJ3B4LCAnK3RoaXMuZGF0YS5oKydweCwgMHB4KSc7XG5cblxuICAgIGlmICh0aGlzLmRhdGEuaGFzTWFzaykge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmRhdGEudyk7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmRhdGEuaCk7XG4gICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudCA9IHRoaXMuYmFzZUVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtZWRFbGVtZW50ID0gdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgfVxuICB9O1xuXG4gIEhDb21wRWxlbWVudC5wcm90b3R5cGUuYWRkVG8zZENvbnRhaW5lciA9IGZ1bmN0aW9uIChlbGVtLCBwb3MpIHtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIG5leHRFbGVtZW50O1xuXG4gICAgd2hpbGUgKGogPCBwb3MpIHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2pdICYmIHRoaXMuZWxlbWVudHNbal0uZ2V0QmFzZUVsZW1lbnQpIHtcbiAgICAgICAgbmV4dEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzW2pdLmdldEJhc2VFbGVtZW50KCk7XG4gICAgICB9XG5cbiAgICAgIGogKz0gMTtcbiAgICB9XG5cbiAgICBpZiAobmV4dEVsZW1lbnQpIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50Lmluc2VydEJlZm9yZShlbGVtLCBuZXh0RWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKGVsZW0pO1xuICAgIH1cbiAgfTtcblxuICBIQ29tcEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbXAgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICByZXR1cm4gbmV3IFNWR0NvbXBFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBIQ29tcEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBmdW5jdGlvbiBIeWJyaWRSZW5kZXJlcihhbmltYXRpb25JdGVtLCBjb25maWcpIHtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0gPSBhbmltYXRpb25JdGVtO1xuICAgIHRoaXMubGF5ZXJzID0gbnVsbDtcbiAgICB0aGlzLnJlbmRlcmVkRnJhbWUgPSAtMTtcbiAgICB0aGlzLnJlbmRlckNvbmZpZyA9IHtcbiAgICAgIGNsYXNzTmFtZTogY29uZmlnICYmIGNvbmZpZy5jbGFzc05hbWUgfHwgJycsXG4gICAgICBpbWFnZVByZXNlcnZlQXNwZWN0UmF0aW86IGNvbmZpZyAmJiBjb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvIHx8ICd4TWlkWU1pZCBzbGljZScsXG4gICAgICBoaWRlT25UcmFuc3BhcmVudDogIShjb25maWcgJiYgY29uZmlnLmhpZGVPblRyYW5zcGFyZW50ID09PSBmYWxzZSksXG4gICAgICBmaWx0ZXJTaXplOiB7XG4gICAgICAgIHdpZHRoOiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUud2lkdGggfHwgJzQwMCUnLFxuICAgICAgICBoZWlnaHQ6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS5oZWlnaHQgfHwgJzQwMCUnLFxuICAgICAgICB4OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUueCB8fCAnLTEwMCUnLFxuICAgICAgICB5OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUueSB8fCAnLTEwMCUnXG4gICAgICB9LFxuICAgICAgcnVuRXhwcmVzc2lvbnM6ICFjb25maWcgfHwgY29uZmlnLnJ1bkV4cHJlc3Npb25zID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnJ1bkV4cHJlc3Npb25zXG4gICAgfTtcbiAgICB0aGlzLmdsb2JhbERhdGEgPSB7XG4gICAgICBfbWRmOiBmYWxzZSxcbiAgICAgIGZyYW1lTnVtOiAtMSxcbiAgICAgIHJlbmRlckNvbmZpZzogdGhpcy5yZW5kZXJDb25maWdcbiAgICB9O1xuICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzID0gW107XG4gICAgdGhpcy5lbGVtZW50cyA9IFtdO1xuICAgIHRoaXMudGhyZWVERWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuY2FtZXJhID0gbnVsbDtcbiAgICB0aGlzLnN1cHBvcnRzM2QgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyZXJUeXBlID0gJ2h0bWwnO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtIeWJyaWRSZW5kZXJlckJhc2VdLCBIeWJyaWRSZW5kZXJlcik7XG5cbiAgSHlicmlkUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUNvbXAgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICByZXR1cm4gbmV3IFNWR0NvbXBFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBIQ29tcEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICB2YXIgQ29tcEV4cHJlc3Npb25JbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjb21wKSB7XG4gICAgICBmdW5jdGlvbiBfdGhpc0xheWVyRnVuY3Rpb24obmFtZSkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSBjb21wLmxheWVycy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAoY29tcC5sYXllcnNbaV0ubm0gPT09IG5hbWUgfHwgY29tcC5sYXllcnNbaV0uaW5kID09PSBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcC5lbGVtZW50c1tpXS5sYXllckludGVyZmFjZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDsgLy8gcmV0dXJuIHthY3RpdmU6ZmFsc2V9O1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNMYXllckZ1bmN0aW9uLCAnX25hbWUnLCB7XG4gICAgICAgIHZhbHVlOiBjb21wLmRhdGEubm1cbiAgICAgIH0pO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmxheWVyID0gX3RoaXNMYXllckZ1bmN0aW9uO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnBpeGVsQXNwZWN0ID0gMTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5oZWlnaHQgPSBjb21wLmRhdGEuaCB8fCBjb21wLmdsb2JhbERhdGEuY29tcFNpemUuaDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi53aWR0aCA9IGNvbXAuZGF0YS53IHx8IGNvbXAuZ2xvYmFsRGF0YS5jb21wU2l6ZS53O1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnBpeGVsQXNwZWN0ID0gMTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5mcmFtZUR1cmF0aW9uID0gMSAvIGNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uZGlzcGxheVN0YXJ0VGltZSA9IDA7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24ubnVtTGF5ZXJzID0gY29tcC5sYXllcnMubGVuZ3RoO1xuICAgICAgcmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3R5cGVvZiQyKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDIgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQyID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkMihvYmopOyB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUgKi9cblxuICAvKlxyXG4gICBDb3B5cmlnaHQgMjAxNCBEYXZpZCBCYXUuXHJcblxyXG4gICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcclxuICAgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXHJcbiAgIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xyXG4gICB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXHJcbiAgIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xyXG4gICBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cclxuICAgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG5cclxuICAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcclxuICAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcblxyXG4gICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxyXG4gICBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcclxuICAgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxyXG4gICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxyXG4gICBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxyXG4gICBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxyXG4gICBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuXHJcbiAgICovXG4gIGZ1bmN0aW9uIHNlZWRSYW5kb20ocG9vbCwgbWF0aCkge1xuICAgIC8vXG4gICAgLy8gVGhlIGZvbGxvd2luZyBjb25zdGFudHMgYXJlIHJlbGF0ZWQgdG8gSUVFRSA3NTQgbGltaXRzLlxuICAgIC8vXG4gICAgdmFyIGdsb2JhbCA9IHRoaXMsXG4gICAgICAgIHdpZHRoID0gMjU2LFxuICAgICAgICAvLyBlYWNoIFJDNCBvdXRwdXQgaXMgMCA8PSB4IDwgMjU2XG4gICAgY2h1bmtzID0gNixcbiAgICAgICAgLy8gYXQgbGVhc3Qgc2l4IFJDNCBvdXRwdXRzIGZvciBlYWNoIGRvdWJsZVxuICAgIGRpZ2l0cyA9IDUyLFxuICAgICAgICAvLyB0aGVyZSBhcmUgNTIgc2lnbmlmaWNhbnQgZGlnaXRzIGluIGEgZG91YmxlXG4gICAgcm5nbmFtZSA9ICdyYW5kb20nLFxuICAgICAgICAvLyBybmduYW1lOiBuYW1lIGZvciBNYXRoLnJhbmRvbSBhbmQgTWF0aC5zZWVkcmFuZG9tXG4gICAgc3RhcnRkZW5vbSA9IG1hdGgucG93KHdpZHRoLCBjaHVua3MpLFxuICAgICAgICBzaWduaWZpY2FuY2UgPSBtYXRoLnBvdygyLCBkaWdpdHMpLFxuICAgICAgICBvdmVyZmxvdyA9IHNpZ25pZmljYW5jZSAqIDIsXG4gICAgICAgIG1hc2sgPSB3aWR0aCAtIDEsXG4gICAgICAgIG5vZGVjcnlwdG87IC8vIG5vZGUuanMgY3J5cHRvIG1vZHVsZSwgaW5pdGlhbGl6ZWQgYXQgdGhlIGJvdHRvbS5cbiAgICAvL1xuICAgIC8vIHNlZWRyYW5kb20oKVxuICAgIC8vIFRoaXMgaXMgdGhlIHNlZWRyYW5kb20gZnVuY3Rpb24gZGVzY3JpYmVkIGFib3ZlLlxuICAgIC8vXG5cbiAgICBmdW5jdGlvbiBzZWVkcmFuZG9tKHNlZWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIga2V5ID0gW107XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyA9PT0gdHJ1ZSA/IHtcbiAgICAgICAgZW50cm9weTogdHJ1ZVxuICAgICAgfSA6IG9wdGlvbnMgfHwge307IC8vIEZsYXR0ZW4gdGhlIHNlZWQgc3RyaW5nIG9yIGJ1aWxkIG9uZSBmcm9tIGxvY2FsIGVudHJvcHkgaWYgbmVlZGVkLlxuXG4gICAgICB2YXIgc2hvcnRzZWVkID0gbWl4a2V5KGZsYXR0ZW4ob3B0aW9ucy5lbnRyb3B5ID8gW3NlZWQsIHRvc3RyaW5nKHBvb2wpXSA6IHNlZWQgPT09IG51bGwgPyBhdXRvc2VlZCgpIDogc2VlZCwgMyksIGtleSk7IC8vIFVzZSB0aGUgc2VlZCB0byBpbml0aWFsaXplIGFuIEFSQzQgZ2VuZXJhdG9yLlxuXG4gICAgICB2YXIgYXJjNCA9IG5ldyBBUkM0KGtleSk7IC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHJhbmRvbSBkb3VibGUgaW4gWzAsIDEpIHRoYXQgY29udGFpbnNcbiAgICAgIC8vIHJhbmRvbW5lc3MgaW4gZXZlcnkgYml0IG9mIHRoZSBtYW50aXNzYSBvZiB0aGUgSUVFRSA3NTQgdmFsdWUuXG5cbiAgICAgIHZhciBwcm5nID0gZnVuY3Rpb24gcHJuZygpIHtcbiAgICAgICAgdmFyIG4gPSBhcmM0LmcoY2h1bmtzKSxcbiAgICAgICAgICAgIC8vIFN0YXJ0IHdpdGggYSBudW1lcmF0b3IgbiA8IDIgXiA0OFxuICAgICAgICBkID0gc3RhcnRkZW5vbSxcbiAgICAgICAgICAgIC8vICAgYW5kIGRlbm9taW5hdG9yIGQgPSAyIF4gNDguXG4gICAgICAgIHggPSAwOyAvLyAgIGFuZCBubyAnZXh0cmEgbGFzdCBieXRlJy5cblxuICAgICAgICB3aGlsZSAobiA8IHNpZ25pZmljYW5jZSkge1xuICAgICAgICAgIC8vIEZpbGwgdXAgYWxsIHNpZ25pZmljYW50IGRpZ2l0cyBieVxuICAgICAgICAgIG4gPSAobiArIHgpICogd2lkdGg7IC8vICAgc2hpZnRpbmcgbnVtZXJhdG9yIGFuZFxuXG4gICAgICAgICAgZCAqPSB3aWR0aDsgLy8gICBkZW5vbWluYXRvciBhbmQgZ2VuZXJhdGluZyBhXG5cbiAgICAgICAgICB4ID0gYXJjNC5nKDEpOyAvLyAgIG5ldyBsZWFzdC1zaWduaWZpY2FudC1ieXRlLlxuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKG4gPj0gb3ZlcmZsb3cpIHtcbiAgICAgICAgICAvLyBUbyBhdm9pZCByb3VuZGluZyB1cCwgYmVmb3JlIGFkZGluZ1xuICAgICAgICAgIG4gLz0gMjsgLy8gICBsYXN0IGJ5dGUsIHNoaWZ0IGV2ZXJ5dGhpbmdcblxuICAgICAgICAgIGQgLz0gMjsgLy8gICByaWdodCB1c2luZyBpbnRlZ2VyIG1hdGggdW50aWxcblxuICAgICAgICAgIHggPj4+PSAxOyAvLyAgIHdlIGhhdmUgZXhhY3RseSB0aGUgZGVzaXJlZCBiaXRzLlxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChuICsgeCkgLyBkOyAvLyBGb3JtIHRoZSBudW1iZXIgd2l0aGluIFswLCAxKS5cbiAgICAgIH07XG5cbiAgICAgIHBybmcuaW50MzIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmM0LmcoNCkgfCAwO1xuICAgICAgfTtcblxuICAgICAgcHJuZy5xdWljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyYzQuZyg0KSAvIDB4MTAwMDAwMDAwO1xuICAgICAgfTtcblxuICAgICAgcHJuZ1tcImRvdWJsZVwiXSA9IHBybmc7IC8vIE1peCB0aGUgcmFuZG9tbmVzcyBpbnRvIGFjY3VtdWxhdGVkIGVudHJvcHkuXG5cbiAgICAgIG1peGtleSh0b3N0cmluZyhhcmM0LlMpLCBwb29sKTsgLy8gQ2FsbGluZyBjb252ZW50aW9uOiB3aGF0IHRvIHJldHVybiBhcyBhIGZ1bmN0aW9uIG9mIHBybmcsIHNlZWQsIGlzX21hdGguXG5cbiAgICAgIHJldHVybiAob3B0aW9ucy5wYXNzIHx8IGNhbGxiYWNrIHx8IGZ1bmN0aW9uIChwcm5nLCBzZWVkLCBpc19tYXRoX2NhbGwsIHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgIC8vIExvYWQgdGhlIGFyYzQgc3RhdGUgZnJvbSB0aGUgZ2l2ZW4gc3RhdGUgaWYgaXQgaGFzIGFuIFMgYXJyYXkuXG4gICAgICAgICAgaWYgKHN0YXRlLlMpIHtcbiAgICAgICAgICAgIGNvcHkoc3RhdGUsIGFyYzQpO1xuICAgICAgICAgIH0gLy8gT25seSBwcm92aWRlIHRoZSAuc3RhdGUgbWV0aG9kIGlmIHJlcXVlc3RlZCB2aWEgb3B0aW9ucy5zdGF0ZS5cblxuXG4gICAgICAgICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb3B5KGFyYzQsIHt9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9IC8vIElmIGNhbGxlZCBhcyBhIG1ldGhvZCBvZiBNYXRoIChNYXRoLnNlZWRyYW5kb20oKSksIG11dGF0ZVxuICAgICAgICAvLyBNYXRoLnJhbmRvbSBiZWNhdXNlIHRoYXQgaXMgaG93IHNlZWRyYW5kb20uanMgaGFzIHdvcmtlZCBzaW5jZSB2MS4wLlxuXG5cbiAgICAgICAgaWYgKGlzX21hdGhfY2FsbCkge1xuICAgICAgICAgIG1hdGhbcm5nbmFtZV0gPSBwcm5nO1xuICAgICAgICAgIHJldHVybiBzZWVkO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgaXQgaXMgYSBuZXdlciBjYWxsaW5nIGNvbnZlbnRpb24sIHNvIHJldHVybiB0aGVcbiAgICAgICAgLy8gcHJuZyBkaXJlY3RseS5cbiAgICAgICAgZWxzZSByZXR1cm4gcHJuZztcbiAgICAgIH0pKHBybmcsIHNob3J0c2VlZCwgJ2dsb2JhbCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuZ2xvYmFsIDogdGhpcyA9PSBtYXRoLCBvcHRpb25zLnN0YXRlKTtcbiAgICB9XG5cbiAgICBtYXRoWydzZWVkJyArIHJuZ25hbWVdID0gc2VlZHJhbmRvbTsgLy9cbiAgICAvLyBBUkM0XG4gICAgLy9cbiAgICAvLyBBbiBBUkM0IGltcGxlbWVudGF0aW9uLiAgVGhlIGNvbnN0cnVjdG9yIHRha2VzIGEga2V5IGluIHRoZSBmb3JtIG9mXG4gICAgLy8gYW4gYXJyYXkgb2YgYXQgbW9zdCAod2lkdGgpIGludGVnZXJzIHRoYXQgc2hvdWxkIGJlIDAgPD0geCA8ICh3aWR0aCkuXG4gICAgLy9cbiAgICAvLyBUaGUgZyhjb3VudCkgbWV0aG9kIHJldHVybnMgYSBwc2V1ZG9yYW5kb20gaW50ZWdlciB0aGF0IGNvbmNhdGVuYXRlc1xuICAgIC8vIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBmcm9tIEFSQzQuICBJdHMgcmV0dXJuIHZhbHVlIGlzIGEgbnVtYmVyIHhcbiAgICAvLyB0aGF0IGlzIGluIHRoZSByYW5nZSAwIDw9IHggPCAod2lkdGggXiBjb3VudCkuXG4gICAgLy9cblxuICAgIGZ1bmN0aW9uIEFSQzQoa2V5KSB7XG4gICAgICB2YXIgdCxcbiAgICAgICAgICBrZXlsZW4gPSBrZXkubGVuZ3RoLFxuICAgICAgICAgIG1lID0gdGhpcyxcbiAgICAgICAgICBpID0gMCxcbiAgICAgICAgICBqID0gbWUuaSA9IG1lLmogPSAwLFxuICAgICAgICAgIHMgPSBtZS5TID0gW107IC8vIFRoZSBlbXB0eSBrZXkgW10gaXMgdHJlYXRlZCBhcyBbMF0uXG5cbiAgICAgIGlmICgha2V5bGVuKSB7XG4gICAgICAgIGtleSA9IFtrZXlsZW4rK107XG4gICAgICB9IC8vIFNldCB1cCBTIHVzaW5nIHRoZSBzdGFuZGFyZCBrZXkgc2NoZWR1bGluZyBhbGdvcml0aG0uXG5cblxuICAgICAgd2hpbGUgKGkgPCB3aWR0aCkge1xuICAgICAgICBzW2ldID0gaSsrO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgd2lkdGg7IGkrKykge1xuICAgICAgICBzW2ldID0gc1tqID0gbWFzayAmIGogKyBrZXlbaSAlIGtleWxlbl0gKyAodCA9IHNbaV0pXTtcbiAgICAgICAgc1tqXSA9IHQ7XG4gICAgICB9IC8vIFRoZSBcImdcIiBtZXRob2QgcmV0dXJucyB0aGUgbmV4dCAoY291bnQpIG91dHB1dHMgYXMgb25lIG51bWJlci5cblxuXG4gICAgICBtZS5nID0gZnVuY3Rpb24gKGNvdW50KSB7XG4gICAgICAgIC8vIFVzaW5nIGluc3RhbmNlIG1lbWJlcnMgaW5zdGVhZCBvZiBjbG9zdXJlIHN0YXRlIG5lYXJseSBkb3VibGVzIHNwZWVkLlxuICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgIHIgPSAwLFxuICAgICAgICAgICAgaSA9IG1lLmksXG4gICAgICAgICAgICBqID0gbWUuaixcbiAgICAgICAgICAgIHMgPSBtZS5TO1xuXG4gICAgICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICAgICAgdCA9IHNbaSA9IG1hc2sgJiBpICsgMV07XG4gICAgICAgICAgciA9IHIgKiB3aWR0aCArIHNbbWFzayAmIChzW2ldID0gc1tqID0gbWFzayAmIGogKyB0XSkgKyAoc1tqXSA9IHQpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lLmkgPSBpO1xuICAgICAgICBtZS5qID0gajtcbiAgICAgICAgcmV0dXJuIHI7IC8vIEZvciByb2J1c3QgdW5wcmVkaWN0YWJpbGl0eSwgdGhlIGZ1bmN0aW9uIGNhbGwgYmVsb3cgYXV0b21hdGljYWxseVxuICAgICAgICAvLyBkaXNjYXJkcyBhbiBpbml0aWFsIGJhdGNoIG9mIHZhbHVlcy4gIFRoaXMgaXMgY2FsbGVkIFJDNC1kcm9wWzI1Nl0uXG4gICAgICAgIC8vIFNlZSBodHRwOi8vZ29vZ2xlLmNvbS9zZWFyY2g/cT1yc2ErZmx1aHJlcityZXNwb25zZSZidG5JXG4gICAgICB9O1xuICAgIH0gLy9cbiAgICAvLyBjb3B5KClcbiAgICAvLyBDb3BpZXMgaW50ZXJuYWwgc3RhdGUgb2YgQVJDNCB0byBvciBmcm9tIGEgcGxhaW4gb2JqZWN0LlxuICAgIC8vXG5cblxuICAgIGZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICAgICAgdC5pID0gZi5pO1xuICAgICAgdC5qID0gZi5qO1xuICAgICAgdC5TID0gZi5TLnNsaWNlKCk7XG4gICAgICByZXR1cm4gdDtcbiAgICB9IC8vXG4gICAgLy8gZmxhdHRlbigpXG4gICAgLy8gQ29udmVydHMgYW4gb2JqZWN0IHRyZWUgdG8gbmVzdGVkIGFycmF5cyBvZiBzdHJpbmdzLlxuICAgIC8vXG5cblxuICAgIGZ1bmN0aW9uIGZsYXR0ZW4ob2JqLCBkZXB0aCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHR5cCA9IF90eXBlb2YkMihvYmopLFxuICAgICAgICAgIHByb3A7XG5cbiAgICAgIGlmIChkZXB0aCAmJiB0eXAgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yIChwcm9wIGluIG9iaikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChmbGF0dGVuKG9ialtwcm9wXSwgZGVwdGggLSAxKSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA/IHJlc3VsdCA6IHR5cCA9PSAnc3RyaW5nJyA/IG9iaiA6IG9iaiArICdcXDAnO1xuICAgIH0gLy9cbiAgICAvLyBtaXhrZXkoKVxuICAgIC8vIE1peGVzIGEgc3RyaW5nIHNlZWQgaW50byBhIGtleSB0aGF0IGlzIGFuIGFycmF5IG9mIGludGVnZXJzLCBhbmRcbiAgICAvLyByZXR1cm5zIGEgc2hvcnRlbmVkIHN0cmluZyBzZWVkIHRoYXQgaXMgZXF1aXZhbGVudCB0byB0aGUgcmVzdWx0IGtleS5cbiAgICAvL1xuXG5cbiAgICBmdW5jdGlvbiBtaXhrZXkoc2VlZCwga2V5KSB7XG4gICAgICB2YXIgc3RyaW5nc2VlZCA9IHNlZWQgKyAnJyxcbiAgICAgICAgICBzbWVhcixcbiAgICAgICAgICBqID0gMDtcblxuICAgICAgd2hpbGUgKGogPCBzdHJpbmdzZWVkLmxlbmd0aCkge1xuICAgICAgICBrZXlbbWFzayAmIGpdID0gbWFzayAmIChzbWVhciBePSBrZXlbbWFzayAmIGpdICogMTkpICsgc3RyaW5nc2VlZC5jaGFyQ29kZUF0KGorKyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0b3N0cmluZyhrZXkpO1xuICAgIH0gLy9cbiAgICAvLyBhdXRvc2VlZCgpXG4gICAgLy8gUmV0dXJucyBhbiBvYmplY3QgZm9yIGF1dG9zZWVkaW5nLCB1c2luZyB3aW5kb3cuY3J5cHRvIGFuZCBOb2RlIGNyeXB0b1xuICAgIC8vIG1vZHVsZSBpZiBhdmFpbGFibGUuXG4gICAgLy9cblxuXG4gICAgZnVuY3Rpb24gYXV0b3NlZWQoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAobm9kZWNyeXB0bykge1xuICAgICAgICAgIHJldHVybiB0b3N0cmluZyhub2RlY3J5cHRvLnJhbmRvbUJ5dGVzKHdpZHRoKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkod2lkdGgpO1xuICAgICAgICAoZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG8pLmdldFJhbmRvbVZhbHVlcyhvdXQpO1xuICAgICAgICByZXR1cm4gdG9zdHJpbmcob3V0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdmFyIGJyb3dzZXIgPSBnbG9iYWwubmF2aWdhdG9yLFxuICAgICAgICAgICAgcGx1Z2lucyA9IGJyb3dzZXIgJiYgYnJvd3Nlci5wbHVnaW5zO1xuICAgICAgICByZXR1cm4gWytuZXcgRGF0ZSgpLCBnbG9iYWwsIHBsdWdpbnMsIGdsb2JhbC5zY3JlZW4sIHRvc3RyaW5nKHBvb2wpXTtcbiAgICAgIH1cbiAgICB9IC8vXG4gICAgLy8gdG9zdHJpbmcoKVxuICAgIC8vIENvbnZlcnRzIGFuIGFycmF5IG9mIGNoYXJjb2RlcyB0byBhIHN0cmluZ1xuICAgIC8vXG5cblxuICAgIGZ1bmN0aW9uIHRvc3RyaW5nKGEpIHtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KDAsIGEpO1xuICAgIH0gLy9cbiAgICAvLyBXaGVuIHNlZWRyYW5kb20uanMgaXMgbG9hZGVkLCB3ZSBpbW1lZGlhdGVseSBtaXggYSBmZXcgYml0c1xuICAgIC8vIGZyb20gdGhlIGJ1aWx0LWluIFJORyBpbnRvIHRoZSBlbnRyb3B5IHBvb2wuICBCZWNhdXNlIHdlIGRvXG4gICAgLy8gbm90IHdhbnQgdG8gaW50ZXJmZXJlIHdpdGggZGV0ZXJtaW5pc3RpYyBQUk5HIHN0YXRlIGxhdGVyLFxuICAgIC8vIHNlZWRyYW5kb20gd2lsbCBub3QgY2FsbCBtYXRoLnJhbmRvbSBvbiBpdHMgb3duIGFnYWluIGFmdGVyXG4gICAgLy8gaW5pdGlhbGl6YXRpb24uXG4gICAgLy9cblxuXG4gICAgbWl4a2V5KG1hdGgucmFuZG9tKCksIHBvb2wpOyAvL1xuICAgIC8vIE5vZGVqcyBhbmQgQU1EIHN1cHBvcnQ6IGV4cG9ydCB0aGUgaW1wbGVtZW50YXRpb24gYXMgYSBtb2R1bGUgdXNpbmdcbiAgICAvLyBlaXRoZXIgY29udmVudGlvbi5cbiAgICAvL1xuICAgIC8vIEVuZCBhbm9ueW1vdXMgc2NvcGUsIGFuZCBwYXNzIGluaXRpYWwgdmFsdWVzLlxuICB9XG5cbiAgO1xuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUkMihCTU1hdGgpIHtcbiAgICBzZWVkUmFuZG9tKFtdLCBCTU1hdGgpO1xuICB9XG5cbiAgdmFyIHByb3BUeXBlcyA9IHtcbiAgICBTSEFQRTogJ3NoYXBlJ1xuICB9O1xuXG4gIGZ1bmN0aW9uIF90eXBlb2YkMShvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiQxID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YkMSA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mJDEob2JqKTsgfVxuXG4gIHZhciBFeHByZXNzaW9uTWFuYWdlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgb2IgPSB7fTtcbiAgICB2YXIgTWF0aCA9IEJNTWF0aDtcbiAgICB2YXIgd2luZG93ID0gbnVsbDtcbiAgICB2YXIgZG9jdW1lbnQgPSBudWxsO1xuICAgIHZhciBYTUxIdHRwUmVxdWVzdCA9IG51bGw7XG4gICAgdmFyIGZldGNoID0gbnVsbDtcbiAgICB2YXIgZnJhbWVzID0gbnVsbDtcbiAgICB2YXIgX2xvdHRpZUdsb2JhbCA9IHt9O1xuICAgIGluaXRpYWxpemUkMihCTU1hdGgpO1xuXG4gICAgZnVuY3Rpb24gcmVzZXRGcmFtZSgpIHtcbiAgICAgIF9sb3R0aWVHbG9iYWwgPSB7fTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYXJyKSB7XG4gICAgICByZXR1cm4gYXJyLmNvbnN0cnVjdG9yID09PSBBcnJheSB8fCBhcnIuY29uc3RydWN0b3IgPT09IEZsb2F0MzJBcnJheTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWVyYWJsZSh0T2ZWLCB2KSB7XG4gICAgICByZXR1cm4gdE9mViA9PT0gJ251bWJlcicgfHwgdiBpbnN0YW5jZW9mIE51bWJlciB8fCB0T2ZWID09PSAnYm9vbGVhbicgfHwgdE9mViA9PT0gJ3N0cmluZyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJGJtX25lZyhhKSB7XG4gICAgICB2YXIgdE9mQSA9IF90eXBlb2YkMShhKTtcblxuICAgICAgaWYgKHRPZkEgPT09ICdudW1iZXInIHx8IGEgaW5zdGFuY2VvZiBOdW1iZXIgfHwgdE9mQSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiAtYTtcbiAgICAgIH1cblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbkEgPSBhLmxlbmd0aDtcbiAgICAgICAgdmFyIHJldEFyciA9IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5BOyBpICs9IDEpIHtcbiAgICAgICAgICByZXRBcnJbaV0gPSAtYVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXRBcnI7XG4gICAgICB9XG5cbiAgICAgIGlmIChhLnByb3BUeXBlKSB7XG4gICAgICAgIHJldHVybiBhLnY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAtYTtcbiAgICB9XG5cbiAgICB2YXIgZWFzZUluQmV6ID0gQmV6aWVyRmFjdG9yeS5nZXRCZXppZXJFYXNpbmcoMC4zMzMsIDAsIDAuODMzLCAwLjgzMywgJ2Vhc2VJbicpLmdldDtcbiAgICB2YXIgZWFzZU91dEJleiA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKDAuMTY3LCAwLjE2NywgMC42NjcsIDEsICdlYXNlT3V0JykuZ2V0O1xuICAgIHZhciBlYXNlSW5PdXRCZXogPSBCZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZygwLjMzLCAwLCAwLjY2NywgMSwgJ2Vhc2VJbk91dCcpLmdldDtcblxuICAgIGZ1bmN0aW9uIHN1bShhLCBiKSB7XG4gICAgICB2YXIgdE9mQSA9IF90eXBlb2YkMShhKTtcblxuICAgICAgdmFyIHRPZkIgPSBfdHlwZW9mJDEoYik7XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSB8fCB0T2ZBID09PSAnc3RyaW5nJyB8fCB0T2ZCID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYSArIGI7XG4gICAgICB9XG5cbiAgICAgIGlmICgkYm1faXNJbnN0YW5jZU9mQXJyYXkoYSkgJiYgaXNOdW1lcmFibGUodE9mQiwgYikpIHtcbiAgICAgICAgYSA9IGEuc2xpY2UoMCk7XG4gICAgICAgIGFbMF0gKz0gYjtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpIHtcbiAgICAgICAgYiA9IGIuc2xpY2UoMCk7XG4gICAgICAgIGJbMF0gPSBhICsgYlswXTtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgICB9XG5cbiAgICAgIGlmICgkYm1faXNJbnN0YW5jZU9mQXJyYXkoYSkgJiYgJGJtX2lzSW5zdGFuY2VPZkFycmF5KGIpKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbkEgPSBhLmxlbmd0aDtcbiAgICAgICAgdmFyIGxlbkIgPSBiLmxlbmd0aDtcbiAgICAgICAgdmFyIHJldEFyciA9IFtdO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuQSB8fCBpIDwgbGVuQikge1xuICAgICAgICAgIGlmICgodHlwZW9mIGFbaV0gPT09ICdudW1iZXInIHx8IGFbaV0gaW5zdGFuY2VvZiBOdW1iZXIpICYmICh0eXBlb2YgYltpXSA9PT0gJ251bWJlcicgfHwgYltpXSBpbnN0YW5jZW9mIE51bWJlcikpIHtcbiAgICAgICAgICAgIHJldEFycltpXSA9IGFbaV0gKyBiW2ldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXRBcnJbaV0gPSBiW2ldID09PSB1bmRlZmluZWQgPyBhW2ldIDogYVtpXSB8fCBiW2ldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXRBcnI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBhZGQgPSBzdW07XG5cbiAgICBmdW5jdGlvbiBzdWIoYSwgYikge1xuICAgICAgdmFyIHRPZkEgPSBfdHlwZW9mJDEoYSk7XG5cbiAgICAgIHZhciB0T2ZCID0gX3R5cGVvZiQxKGIpO1xuXG4gICAgICBpZiAoaXNOdW1lcmFibGUodE9mQSwgYSkgJiYgaXNOdW1lcmFibGUodE9mQiwgYikpIHtcbiAgICAgICAgaWYgKHRPZkEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYSA9IHBhcnNlSW50KGEsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0T2ZCID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGIgPSBwYXJzZUludChiLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICB9XG5cbiAgICAgIGlmICgkYm1faXNJbnN0YW5jZU9mQXJyYXkoYSkgJiYgaXNOdW1lcmFibGUodE9mQiwgYikpIHtcbiAgICAgICAgYSA9IGEuc2xpY2UoMCk7XG4gICAgICAgIGFbMF0gLT0gYjtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpIHtcbiAgICAgICAgYiA9IGIuc2xpY2UoMCk7XG4gICAgICAgIGJbMF0gPSBhIC0gYlswXTtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgICB9XG5cbiAgICAgIGlmICgkYm1faXNJbnN0YW5jZU9mQXJyYXkoYSkgJiYgJGJtX2lzSW5zdGFuY2VPZkFycmF5KGIpKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbkEgPSBhLmxlbmd0aDtcbiAgICAgICAgdmFyIGxlbkIgPSBiLmxlbmd0aDtcbiAgICAgICAgdmFyIHJldEFyciA9IFtdO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuQSB8fCBpIDwgbGVuQikge1xuICAgICAgICAgIGlmICgodHlwZW9mIGFbaV0gPT09ICdudW1iZXInIHx8IGFbaV0gaW5zdGFuY2VvZiBOdW1iZXIpICYmICh0eXBlb2YgYltpXSA9PT0gJ251bWJlcicgfHwgYltpXSBpbnN0YW5jZW9mIE51bWJlcikpIHtcbiAgICAgICAgICAgIHJldEFycltpXSA9IGFbaV0gLSBiW2ldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXRBcnJbaV0gPSBiW2ldID09PSB1bmRlZmluZWQgPyBhW2ldIDogYVtpXSB8fCBiW2ldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXRBcnI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG11bChhLCBiKSB7XG4gICAgICB2YXIgdE9mQSA9IF90eXBlb2YkMShhKTtcblxuICAgICAgdmFyIHRPZkIgPSBfdHlwZW9mJDEoYik7XG5cbiAgICAgIHZhciBhcnI7XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICByZXR1cm4gYSAqIGI7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbjtcblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICBsZW4gPSBhLmxlbmd0aDtcbiAgICAgICAgYXJyID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgYXJyW2ldID0gYVtpXSAqIGI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNOdW1lcmFibGUodE9mQSwgYSkgJiYgJGJtX2lzSW5zdGFuY2VPZkFycmF5KGIpKSB7XG4gICAgICAgIGxlbiA9IGIubGVuZ3RoO1xuICAgICAgICBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnJbaV0gPSBhICogYltpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpdihhLCBiKSB7XG4gICAgICB2YXIgdE9mQSA9IF90eXBlb2YkMShhKTtcblxuICAgICAgdmFyIHRPZkIgPSBfdHlwZW9mJDEoYik7XG5cbiAgICAgIHZhciBhcnI7XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICByZXR1cm4gYSAvIGI7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbjtcblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICBsZW4gPSBhLmxlbmd0aDtcbiAgICAgICAgYXJyID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgYXJyW2ldID0gYVtpXSAvIGI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNOdW1lcmFibGUodE9mQSwgYSkgJiYgJGJtX2lzSW5zdGFuY2VPZkFycmF5KGIpKSB7XG4gICAgICAgIGxlbiA9IGIubGVuZ3RoO1xuICAgICAgICBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnJbaV0gPSBhIC8gYltpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vZChhLCBiKSB7XG4gICAgICBpZiAodHlwZW9mIGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGEgPSBwYXJzZUludChhLCAxMCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgYiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYiA9IHBhcnNlSW50KGIsIDEwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGEgJSBiO1xuICAgIH1cblxuICAgIHZhciAkYm1fc3VtID0gc3VtO1xuICAgIHZhciAkYm1fc3ViID0gc3ViO1xuICAgIHZhciAkYm1fbXVsID0gbXVsO1xuICAgIHZhciAkYm1fZGl2ID0gZGl2O1xuICAgIHZhciAkYm1fbW9kID0gbW9kO1xuXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtLCBtaW4sIG1heCkge1xuICAgICAgaWYgKG1pbiA+IG1heCkge1xuICAgICAgICB2YXIgbW0gPSBtYXg7XG4gICAgICAgIG1heCA9IG1pbjtcbiAgICAgICAgbWluID0gbW07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChudW0sIG1pbiksIG1heCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmFkaWFuc1RvRGVncmVlcyh2YWwpIHtcbiAgICAgIHJldHVybiB2YWwgLyBkZWdUb1JhZHM7XG4gICAgfVxuXG4gICAgdmFyIHJhZGlhbnNfdG9fZGVncmVlcyA9IHJhZGlhbnNUb0RlZ3JlZXM7XG5cbiAgICBmdW5jdGlvbiBkZWdyZWVzVG9SYWRpYW5zKHZhbCkge1xuICAgICAgcmV0dXJuIHZhbCAqIGRlZ1RvUmFkcztcbiAgICB9XG5cbiAgICB2YXIgZGVncmVlc190b19yYWRpYW5zID0gcmFkaWFuc1RvRGVncmVlcztcbiAgICB2YXIgaGVscGVyTGVuZ3RoQXJyYXkgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG5cbiAgICBmdW5jdGlvbiBsZW5ndGgoYXJyMSwgYXJyMikge1xuICAgICAgaWYgKHR5cGVvZiBhcnIxID09PSAnbnVtYmVyJyB8fCBhcnIxIGluc3RhbmNlb2YgTnVtYmVyKSB7XG4gICAgICAgIGFycjIgPSBhcnIyIHx8IDA7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhhcnIxIC0gYXJyMik7XG4gICAgICB9XG5cbiAgICAgIGlmICghYXJyMikge1xuICAgICAgICBhcnIyID0gaGVscGVyTGVuZ3RoQXJyYXk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IE1hdGgubWluKGFycjEubGVuZ3RoLCBhcnIyLmxlbmd0aCk7XG4gICAgICB2YXIgYWRkZWRMZW5ndGggPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgYWRkZWRMZW5ndGggKz0gTWF0aC5wb3coYXJyMltpXSAtIGFycjFbaV0sIDIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KGFkZGVkTGVuZ3RoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemUodmVjKSB7XG4gICAgICByZXR1cm4gZGl2KHZlYywgbGVuZ3RoKHZlYykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJnYlRvSHNsKHZhbCkge1xuICAgICAgdmFyIHIgPSB2YWxbMF07XG4gICAgICB2YXIgZyA9IHZhbFsxXTtcbiAgICAgIHZhciBiID0gdmFsWzJdO1xuICAgICAgdmFyIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgICAgdmFyIGg7XG4gICAgICB2YXIgcztcbiAgICAgIHZhciBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgICAgaCA9IDA7IC8vIGFjaHJvbWF0aWNcblxuICAgICAgICBzID0gMDsgLy8gYWNocm9tYXRpY1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGQgPSBtYXggLSBtaW47XG4gICAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcblxuICAgICAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgICAgIGNhc2UgcjpcbiAgICAgICAgICAgIGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBnOlxuICAgICAgICAgICAgaCA9IChiIC0gcikgLyBkICsgMjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBiOlxuICAgICAgICAgICAgaCA9IChyIC0gZykgLyBkICsgNDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaCAvPSA2O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW2gsIHMsIGwsIHZhbFszXV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgICBpZiAodCA8IDApIHQgKz0gMTtcbiAgICAgIGlmICh0ID4gMSkgdCAtPSAxO1xuICAgICAgaWYgKHQgPCAxIC8gNikgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gICAgICBpZiAodCA8IDEgLyAyKSByZXR1cm4gcTtcbiAgICAgIGlmICh0IDwgMiAvIDMpIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhzbFRvUmdiKHZhbCkge1xuICAgICAgdmFyIGggPSB2YWxbMF07XG4gICAgICB2YXIgcyA9IHZhbFsxXTtcbiAgICAgIHZhciBsID0gdmFsWzJdO1xuICAgICAgdmFyIHI7XG4gICAgICB2YXIgZztcbiAgICAgIHZhciBiO1xuXG4gICAgICBpZiAocyA9PT0gMCkge1xuICAgICAgICByID0gbDsgLy8gYWNocm9tYXRpY1xuXG4gICAgICAgIGIgPSBsOyAvLyBhY2hyb21hdGljXG5cbiAgICAgICAgZyA9IGw7IC8vIGFjaHJvbWF0aWNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgdmFyIHAgPSAyICogbCAtIHE7XG4gICAgICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxIC8gMyk7XG4gICAgICAgIGcgPSBodWUycmdiKHAsIHEsIGgpO1xuICAgICAgICBiID0gaHVlMnJnYihwLCBxLCBoIC0gMSAvIDMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW3IsIGcsIGIsIHZhbFszXV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZWFyKHQsIHRNaW4sIHRNYXgsIHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICBpZiAodmFsdWUxID09PSB1bmRlZmluZWQgfHwgdmFsdWUyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFsdWUxID0gdE1pbjtcbiAgICAgICAgdmFsdWUyID0gdE1heDtcbiAgICAgICAgdE1pbiA9IDA7XG4gICAgICAgIHRNYXggPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAodE1heCA8IHRNaW4pIHtcbiAgICAgICAgdmFyIF90TWluID0gdE1heDtcbiAgICAgICAgdE1heCA9IHRNaW47XG4gICAgICAgIHRNaW4gPSBfdE1pbjtcbiAgICAgIH1cblxuICAgICAgaWYgKHQgPD0gdE1pbikge1xuICAgICAgICByZXR1cm4gdmFsdWUxO1xuICAgICAgfVxuXG4gICAgICBpZiAodCA+PSB0TWF4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTI7XG4gICAgICB9XG5cbiAgICAgIHZhciBwZXJjID0gdE1heCA9PT0gdE1pbiA/IDAgOiAodCAtIHRNaW4pIC8gKHRNYXggLSB0TWluKTtcblxuICAgICAgaWYgKCF2YWx1ZTEubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTEgKyAodmFsdWUyIC0gdmFsdWUxKSAqIHBlcmM7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHZhbHVlMS5sZW5ndGg7XG4gICAgICB2YXIgYXJyID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBhcnJbaV0gPSB2YWx1ZTFbaV0gKyAodmFsdWUyW2ldIC0gdmFsdWUxW2ldKSAqIHBlcmM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4KSB7XG4gICAgICBpZiAobWF4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbWluID0gMDtcbiAgICAgICAgICBtYXggPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1heCA9IG1pbjtcbiAgICAgICAgICBtaW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1heC5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSBtYXgubGVuZ3RoO1xuXG4gICAgICAgIGlmICghbWluKSB7XG4gICAgICAgICAgbWluID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYXJyID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG4gICAgICAgIHZhciBybmQgPSBCTU1hdGgucmFuZG9tKCk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgYXJyW2ldID0gbWluW2ldICsgcm5kICogKG1heFtpXSAtIG1pbltpXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfVxuXG4gICAgICBpZiAobWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWluID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJuZG0gPSBCTU1hdGgucmFuZG9tKCk7XG4gICAgICByZXR1cm4gbWluICsgcm5kbSAqIChtYXggLSBtaW4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhdGgocG9pbnRzLCBpblRhbmdlbnRzLCBvdXRUYW5nZW50cywgY2xvc2VkKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBwb2ludHMubGVuZ3RoO1xuICAgICAgdmFyIHBhdGggPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgcGF0aC5zZXRQYXRoRGF0YSghIWNsb3NlZCwgbGVuKTtcbiAgICAgIHZhciBhcnJQbGFjZWhvbGRlciA9IFswLCAwXTtcbiAgICAgIHZhciBpblZlcnRleFBvaW50O1xuICAgICAgdmFyIG91dFZlcnRleFBvaW50O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaW5WZXJ0ZXhQb2ludCA9IGluVGFuZ2VudHMgJiYgaW5UYW5nZW50c1tpXSA/IGluVGFuZ2VudHNbaV0gOiBhcnJQbGFjZWhvbGRlcjtcbiAgICAgICAgb3V0VmVydGV4UG9pbnQgPSBvdXRUYW5nZW50cyAmJiBvdXRUYW5nZW50c1tpXSA/IG91dFRhbmdlbnRzW2ldIDogYXJyUGxhY2Vob2xkZXI7XG4gICAgICAgIHBhdGguc2V0VHJpcGxlQXQocG9pbnRzW2ldWzBdLCBwb2ludHNbaV1bMV0sIG91dFZlcnRleFBvaW50WzBdICsgcG9pbnRzW2ldWzBdLCBvdXRWZXJ0ZXhQb2ludFsxXSArIHBvaW50c1tpXVsxXSwgaW5WZXJ0ZXhQb2ludFswXSArIHBvaW50c1tpXVswXSwgaW5WZXJ0ZXhQb2ludFsxXSArIHBvaW50c1tpXVsxXSwgaSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYXRlRXhwcmVzc2lvbihlbGVtLCBkYXRhLCBwcm9wZXJ0eSkge1xuICAgICAgLy8gQmFpbCBvdXQgaWYgd2UgZG9uJ3Qgd2FudCBleHByZXNzaW9uc1xuICAgICAgZnVuY3Rpb24gbm9PcChfdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFlbGVtLmdsb2JhbERhdGEucmVuZGVyQ29uZmlnLnJ1bkV4cHJlc3Npb25zKSB7XG4gICAgICAgIHJldHVybiBub09wO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmFsID0gZGF0YS54O1xuICAgICAgdmFyIG5lZWRzVmVsb2NpdHkgPSAvdmVsb2NpdHkoPyFbXFx3XFxkXSkvLnRlc3QodmFsKTtcblxuICAgICAgdmFyIF9uZWVkc1JhbmRvbSA9IHZhbC5pbmRleE9mKCdyYW5kb20nKSAhPT0gLTE7XG5cbiAgICAgIHZhciBlbGVtVHlwZSA9IGVsZW0uZGF0YS50eTtcbiAgICAgIHZhciB0cmFuc2Zvcm07XG4gICAgICB2YXIgJGJtX3RyYW5zZm9ybTtcbiAgICAgIHZhciBjb250ZW50O1xuICAgICAgdmFyIGVmZmVjdDtcbiAgICAgIHZhciB0aGlzUHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICAgIHRoaXNQcm9wZXJ0eS52YWx1ZUF0VGltZSA9IHRoaXNQcm9wZXJ0eS5nZXRWYWx1ZUF0VGltZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzUHJvcGVydHksICd2YWx1ZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNQcm9wZXJ0eS52O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGVsZW0uY29tcC5mcmFtZUR1cmF0aW9uID0gMSAvIGVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgIGVsZW0uY29tcC5kaXNwbGF5U3RhcnRUaW1lID0gMDtcbiAgICAgIHZhciBpblBvaW50ID0gZWxlbS5kYXRhLmlwIC8gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgdmFyIG91dFBvaW50ID0gZWxlbS5kYXRhLm9wIC8gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgdmFyIHdpZHRoID0gZWxlbS5kYXRhLnN3ID8gZWxlbS5kYXRhLnN3IDogMDtcbiAgICAgIHZhciBoZWlnaHQgPSBlbGVtLmRhdGEuc2ggPyBlbGVtLmRhdGEuc2ggOiAwO1xuICAgICAgdmFyIG5hbWUgPSBlbGVtLmRhdGEubm07XG4gICAgICB2YXIgbG9vcEluO1xuICAgICAgdmFyIGxvb3BfaW47XG4gICAgICB2YXIgbG9vcE91dDtcbiAgICAgIHZhciBsb29wX291dDtcbiAgICAgIHZhciBzbW9vdGg7XG4gICAgICB2YXIgdG9Xb3JsZDtcbiAgICAgIHZhciBmcm9tV29ybGQ7XG4gICAgICB2YXIgZnJvbUNvbXA7XG4gICAgICB2YXIgdG9Db21wO1xuICAgICAgdmFyIGZyb21Db21wVG9TdXJmYWNlO1xuICAgICAgdmFyIHBvc2l0aW9uO1xuICAgICAgdmFyIHJvdGF0aW9uO1xuICAgICAgdmFyIGFuY2hvclBvaW50O1xuICAgICAgdmFyIHNjYWxlO1xuICAgICAgdmFyIHRoaXNMYXllcjtcbiAgICAgIHZhciB0aGlzQ29tcDtcbiAgICAgIHZhciBtYXNrO1xuICAgICAgdmFyIHZhbHVlQXRUaW1lO1xuICAgICAgdmFyIHZlbG9jaXR5QXRUaW1lO1xuICAgICAgdmFyIHNjb3BlZF9ibV9ydDsgLy8gdmFsID0gdmFsLnJlcGxhY2UoLyhcXFxcP1wifCcpKChodHRwKShzKT8oOlxcLykpP1xcLy4qPyhcXFxcP1wifCcpL2csIFwiXFxcIlxcXCJcIik7IC8vIGRldGVyIHBvdGVudGlhbCBuZXR3b3JrIGNhbGxzXG5cbiAgICAgIHZhciBleHByZXNzaW9uX2Z1bmN0aW9uID0gZXZhbCgnW2Z1bmN0aW9uIF9leHByZXNzaW9uX2Z1bmN0aW9uKCl7JyArIHZhbCArICc7c2NvcGVkX2JtX3J0PSRibV9ydH1dJylbMF07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXG4gICAgICB2YXIgbnVtS2V5cyA9IHByb3BlcnR5LmtmID8gZGF0YS5rLmxlbmd0aCA6IDA7XG4gICAgICB2YXIgYWN0aXZlID0gIXRoaXMuZGF0YSB8fCB0aGlzLmRhdGEuaGQgIT09IHRydWU7XG5cbiAgICAgIHZhciB3aWdnbGUgPSBmdW5jdGlvbiB3aWdnbGUoZnJlcSwgYW1wKSB7XG4gICAgICAgIHZhciBpV2lnZ2xlO1xuICAgICAgICB2YXIgajtcbiAgICAgICAgdmFyIGxlbldpZ2dsZSA9IHRoaXMucHYubGVuZ3RoID8gdGhpcy5wdi5sZW5ndGggOiAxO1xuICAgICAgICB2YXIgYWRkZWRBbXBzID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbldpZ2dsZSk7XG4gICAgICAgIGZyZXEgPSA1O1xuICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IE1hdGguZmxvb3IodGltZSAqIGZyZXEpO1xuICAgICAgICBpV2lnZ2xlID0gMDtcbiAgICAgICAgaiA9IDA7XG5cbiAgICAgICAgd2hpbGUgKGlXaWdnbGUgPCBpdGVyYXRpb25zKSB7XG4gICAgICAgICAgLy8gdmFyIHJuZCA9IEJNTWF0aC5yYW5kb20oKTtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbGVuV2lnZ2xlOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGFkZGVkQW1wc1tqXSArPSAtYW1wICsgYW1wICogMiAqIEJNTWF0aC5yYW5kb20oKTsgLy8gYWRkZWRBbXBzW2pdICs9IC1hbXAgKyBhbXAqMipybmQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaVdpZ2dsZSArPSAxO1xuICAgICAgICB9IC8vIHZhciBybmQyID0gQk1NYXRoLnJhbmRvbSgpO1xuXG5cbiAgICAgICAgdmFyIHBlcmlvZHMgPSB0aW1lICogZnJlcTtcbiAgICAgICAgdmFyIHBlcmMgPSBwZXJpb2RzIC0gTWF0aC5mbG9vcihwZXJpb2RzKTtcbiAgICAgICAgdmFyIGFyciA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW5XaWdnbGUpO1xuXG4gICAgICAgIGlmIChsZW5XaWdnbGUgPiAxKSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGxlbldpZ2dsZTsgaiArPSAxKSB7XG4gICAgICAgICAgICBhcnJbal0gPSB0aGlzLnB2W2pdICsgYWRkZWRBbXBzW2pdICsgKC1hbXAgKyBhbXAgKiAyICogQk1NYXRoLnJhbmRvbSgpKSAqIHBlcmM7IC8vIGFycltqXSA9IHRoaXMucHZbal0gKyBhZGRlZEFtcHNbal0gKyAoLWFtcCArIGFtcCoyKnJuZCkqcGVyYztcbiAgICAgICAgICAgIC8vIGFycltpXSA9IHRoaXMucHZbaV0gKyBhZGRlZEFtcCArIGFtcDEqcGVyYyArIGFtcDIqKDEtcGVyYyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnB2ICsgYWRkZWRBbXBzWzBdICsgKC1hbXAgKyBhbXAgKiAyICogQk1NYXRoLnJhbmRvbSgpKSAqIHBlcmM7XG4gICAgICB9LmJpbmQodGhpcyk7XG5cbiAgICAgIGlmICh0aGlzUHJvcGVydHkubG9vcEluKSB7XG4gICAgICAgIGxvb3BJbiA9IHRoaXNQcm9wZXJ0eS5sb29wSW4uYmluZCh0aGlzUHJvcGVydHkpO1xuICAgICAgICBsb29wX2luID0gbG9vcEluO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpc1Byb3BlcnR5Lmxvb3BPdXQpIHtcbiAgICAgICAgbG9vcE91dCA9IHRoaXNQcm9wZXJ0eS5sb29wT3V0LmJpbmQodGhpc1Byb3BlcnR5KTtcbiAgICAgICAgbG9vcF9vdXQgPSBsb29wT3V0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpc1Byb3BlcnR5LnNtb290aCkge1xuICAgICAgICBzbW9vdGggPSB0aGlzUHJvcGVydHkuc21vb3RoLmJpbmQodGhpc1Byb3BlcnR5KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbG9vcEluRHVyYXRpb24odHlwZSwgZHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGxvb3BJbih0eXBlLCBkdXJhdGlvbiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxvb3BPdXREdXJhdGlvbih0eXBlLCBkdXJhdGlvbikge1xuICAgICAgICByZXR1cm4gbG9vcE91dCh0eXBlLCBkdXJhdGlvbiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmdldFZhbHVlQXRUaW1lKSB7XG4gICAgICAgIHZhbHVlQXRUaW1lID0gdGhpcy5nZXRWYWx1ZUF0VGltZS5iaW5kKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5nZXRWZWxvY2l0eUF0VGltZSkge1xuICAgICAgICB2ZWxvY2l0eUF0VGltZSA9IHRoaXMuZ2V0VmVsb2NpdHlBdFRpbWUuYmluZCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbXAgPSBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlLmJpbmQoZWxlbS5jb21wLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZSk7XG5cbiAgICAgIGZ1bmN0aW9uIGxvb2tBdChlbGVtMSwgZWxlbTIpIHtcbiAgICAgICAgdmFyIGZWZWMgPSBbZWxlbTJbMF0gLSBlbGVtMVswXSwgZWxlbTJbMV0gLSBlbGVtMVsxXSwgZWxlbTJbMl0gLSBlbGVtMVsyXV07XG4gICAgICAgIHZhciBwaXRjaCA9IE1hdGguYXRhbjIoZlZlY1swXSwgTWF0aC5zcXJ0KGZWZWNbMV0gKiBmVmVjWzFdICsgZlZlY1syXSAqIGZWZWNbMl0pKSAvIGRlZ1RvUmFkcztcbiAgICAgICAgdmFyIHlhdyA9IC1NYXRoLmF0YW4yKGZWZWNbMV0sIGZWZWNbMl0pIC8gZGVnVG9SYWRzO1xuICAgICAgICByZXR1cm4gW3lhdywgcGl0Y2gsIDBdO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlYXNlT3V0KHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5RWFzZShlYXNlT3V0QmV6LCB0LCB0TWluLCB0TWF4LCB2YWwxLCB2YWwyKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZWFzZUluKHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5RWFzZShlYXNlSW5CZXosIHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlYXNlKHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5RWFzZShlYXNlSW5PdXRCZXosIHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhcHBseUVhc2UoZm4sIHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpIHtcbiAgICAgICAgaWYgKHZhbDEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhbDEgPSB0TWluO1xuICAgICAgICAgIHZhbDIgPSB0TWF4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHQgPSAodCAtIHRNaW4pIC8gKHRNYXggLSB0TWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0ID4gMSkge1xuICAgICAgICAgIHQgPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKHQgPCAwKSB7XG4gICAgICAgICAgdCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbXVsdCA9IGZuKHQpO1xuXG4gICAgICAgIGlmICgkYm1faXNJbnN0YW5jZU9mQXJyYXkodmFsMSkpIHtcbiAgICAgICAgICB2YXIgaUtleTtcbiAgICAgICAgICB2YXIgbGVuS2V5ID0gdmFsMS5sZW5ndGg7XG4gICAgICAgICAgdmFyIGFyciA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW5LZXkpO1xuXG4gICAgICAgICAgZm9yIChpS2V5ID0gMDsgaUtleSA8IGxlbktleTsgaUtleSArPSAxKSB7XG4gICAgICAgICAgICBhcnJbaUtleV0gPSAodmFsMltpS2V5XSAtIHZhbDFbaUtleV0pICogbXVsdCArIHZhbDFbaUtleV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAodmFsMiAtIHZhbDEpICogbXVsdCArIHZhbDE7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG5lYXJlc3RLZXkodGltZSkge1xuICAgICAgICB2YXIgaUtleTtcbiAgICAgICAgdmFyIGxlbktleSA9IGRhdGEuay5sZW5ndGg7XG4gICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgdmFyIGtleVRpbWU7XG5cbiAgICAgICAgaWYgKCFkYXRhLmsubGVuZ3RoIHx8IHR5cGVvZiBkYXRhLmtbMF0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAgIGtleVRpbWUgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgICAgdGltZSAqPSBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG5cbiAgICAgICAgICBpZiAodGltZSA8IGRhdGEua1swXS50KSB7XG4gICAgICAgICAgICBpbmRleCA9IDE7XG4gICAgICAgICAgICBrZXlUaW1lID0gZGF0YS5rWzBdLnQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoaUtleSA9IDA7IGlLZXkgPCBsZW5LZXkgLSAxOyBpS2V5ICs9IDEpIHtcbiAgICAgICAgICAgICAgaWYgKHRpbWUgPT09IGRhdGEua1tpS2V5XS50KSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpS2V5ICsgMTtcbiAgICAgICAgICAgICAgICBrZXlUaW1lID0gZGF0YS5rW2lLZXldLnQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGltZSA+IGRhdGEua1tpS2V5XS50ICYmIHRpbWUgPCBkYXRhLmtbaUtleSArIDFdLnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGltZSAtIGRhdGEua1tpS2V5XS50ID4gZGF0YS5rW2lLZXkgKyAxXS50IC0gdGltZSkge1xuICAgICAgICAgICAgICAgICAgaW5kZXggPSBpS2V5ICsgMjtcbiAgICAgICAgICAgICAgICAgIGtleVRpbWUgPSBkYXRhLmtbaUtleSArIDFdLnQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGluZGV4ID0gaUtleSArIDE7XG4gICAgICAgICAgICAgICAgICBrZXlUaW1lID0gZGF0YS5rW2lLZXldLnQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICBpbmRleCA9IGlLZXkgKyAxO1xuICAgICAgICAgICAgICBrZXlUaW1lID0gZGF0YS5rW2lLZXldLnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9iS2V5ID0ge307XG4gICAgICAgIG9iS2V5LmluZGV4ID0gaW5kZXg7XG4gICAgICAgIG9iS2V5LnRpbWUgPSBrZXlUaW1lIC8gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgICByZXR1cm4gb2JLZXk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGtleShpbmQpIHtcbiAgICAgICAgdmFyIG9iS2V5O1xuICAgICAgICB2YXIgaUtleTtcbiAgICAgICAgdmFyIGxlbktleTtcblxuICAgICAgICBpZiAoIWRhdGEuay5sZW5ndGggfHwgdHlwZW9mIGRhdGEua1swXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm9wZXJ0eSBoYXMgbm8ga2V5ZnJhbWUgYXQgaW5kZXggJyArIGluZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbmQgLT0gMTtcbiAgICAgICAgb2JLZXkgPSB7XG4gICAgICAgICAgdGltZTogZGF0YS5rW2luZF0udCAvIGVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSxcbiAgICAgICAgICB2YWx1ZTogW11cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGFyciA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLmtbaW5kXSwgJ3MnKSA/IGRhdGEua1tpbmRdLnMgOiBkYXRhLmtbaW5kIC0gMV0uZTtcbiAgICAgICAgbGVuS2V5ID0gYXJyLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGlLZXkgPSAwOyBpS2V5IDwgbGVuS2V5OyBpS2V5ICs9IDEpIHtcbiAgICAgICAgICBvYktleVtpS2V5XSA9IGFycltpS2V5XTtcbiAgICAgICAgICBvYktleS52YWx1ZVtpS2V5XSA9IGFycltpS2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYktleTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZnJhbWVzVG9UaW1lKGZyLCBmcHMpIHtcbiAgICAgICAgaWYgKCFmcHMpIHtcbiAgICAgICAgICBmcHMgPSBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnIgLyBmcHM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVUb0ZyYW1lcyh0LCBmcHMpIHtcbiAgICAgICAgaWYgKCF0ICYmIHQgIT09IDApIHtcbiAgICAgICAgICB0ID0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZnBzKSB7XG4gICAgICAgICAgZnBzID0gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHQgKiBmcHM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNlZWRSYW5kb20oc2VlZCkge1xuICAgICAgICBCTU1hdGguc2VlZHJhbmRvbShyYW5kU2VlZCArIHNlZWQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzb3VyY2VSZWN0QXRUaW1lKCkge1xuICAgICAgICByZXR1cm4gZWxlbS5zb3VyY2VSZWN0QXRUaW1lKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHN1YnN0cmluZyhpbml0LCBlbmQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoaW5pdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhpbml0LCBlbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzdWJzdHIoaW5pdCwgZW5kKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuc3Vic3RyKGluaXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHIoaW5pdCwgZW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcG9zdGVyaXplVGltZShmcmFtZXNQZXJTZWNvbmQpIHtcbiAgICAgICAgdGltZSA9IGZyYW1lc1BlclNlY29uZCA9PT0gMCA/IDAgOiBNYXRoLmZsb29yKHRpbWUgKiBmcmFtZXNQZXJTZWNvbmQpIC8gZnJhbWVzUGVyU2Vjb25kO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZTtcbiAgICAgIHZhciB2ZWxvY2l0eTtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHZhciB0ZXh0O1xuICAgICAgdmFyIHRleHRJbmRleDtcbiAgICAgIHZhciB0ZXh0VG90YWw7XG4gICAgICB2YXIgc2VsZWN0b3JWYWx1ZTtcbiAgICAgIHZhciBpbmRleCA9IGVsZW0uZGF0YS5pbmQ7XG4gICAgICB2YXIgaGFzUGFyZW50ID0gISEoZWxlbS5oaWVyYXJjaHkgJiYgZWxlbS5oaWVyYXJjaHkubGVuZ3RoKTtcbiAgICAgIHZhciBwYXJlbnQ7XG4gICAgICB2YXIgcmFuZFNlZWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKTtcbiAgICAgIHZhciBnbG9iYWxEYXRhID0gZWxlbS5nbG9iYWxEYXRhO1xuXG4gICAgICBmdW5jdGlvbiBleGVjdXRlRXhwcmVzc2lvbihfdmFsdWUpIHtcbiAgICAgICAgLy8gZ2xvYmFsRGF0YS5wdXNoRXhwcmVzc2lvbigpO1xuICAgICAgICB2YWx1ZSA9IF92YWx1ZTtcblxuICAgICAgICBpZiAodGhpcy5mcmFtZUV4cHJlc3Npb25JZCA9PT0gZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgJiYgdGhpcy5wcm9wVHlwZSAhPT0gJ3RleHRTZWxlY3RvcicpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcm9wVHlwZSA9PT0gJ3RleHRTZWxlY3RvcicpIHtcbiAgICAgICAgICB0ZXh0SW5kZXggPSB0aGlzLnRleHRJbmRleDtcbiAgICAgICAgICB0ZXh0VG90YWwgPSB0aGlzLnRleHRUb3RhbDtcbiAgICAgICAgICBzZWxlY3RvclZhbHVlID0gdGhpcy5zZWxlY3RvclZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzTGF5ZXIpIHtcbiAgICAgICAgICB0ZXh0ID0gZWxlbS5sYXllckludGVyZmFjZS50ZXh0O1xuICAgICAgICAgIHRoaXNMYXllciA9IGVsZW0ubGF5ZXJJbnRlcmZhY2U7XG4gICAgICAgICAgdGhpc0NvbXAgPSBlbGVtLmNvbXAuY29tcEludGVyZmFjZTtcbiAgICAgICAgICB0b1dvcmxkID0gdGhpc0xheWVyLnRvV29ybGQuYmluZCh0aGlzTGF5ZXIpO1xuICAgICAgICAgIGZyb21Xb3JsZCA9IHRoaXNMYXllci5mcm9tV29ybGQuYmluZCh0aGlzTGF5ZXIpO1xuICAgICAgICAgIGZyb21Db21wID0gdGhpc0xheWVyLmZyb21Db21wLmJpbmQodGhpc0xheWVyKTtcbiAgICAgICAgICB0b0NvbXAgPSB0aGlzTGF5ZXIudG9Db21wLmJpbmQodGhpc0xheWVyKTtcbiAgICAgICAgICBtYXNrID0gdGhpc0xheWVyLm1hc2sgPyB0aGlzTGF5ZXIubWFzay5iaW5kKHRoaXNMYXllcikgOiBudWxsO1xuICAgICAgICAgIGZyb21Db21wVG9TdXJmYWNlID0gZnJvbUNvbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRyYW5zZm9ybSkge1xuICAgICAgICAgIHRyYW5zZm9ybSA9IGVsZW0ubGF5ZXJJbnRlcmZhY2UoJ0FEQkUgVHJhbnNmb3JtIEdyb3VwJyk7XG4gICAgICAgICAgJGJtX3RyYW5zZm9ybSA9IHRyYW5zZm9ybTtcblxuICAgICAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIGFuY2hvclBvaW50ID0gdHJhbnNmb3JtLmFuY2hvclBvaW50O1xuICAgICAgICAgICAgLyogcG9zaXRpb24gPSB0cmFuc2Zvcm0ucG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IHRyYW5zZm9ybS5yb3RhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgIHNjYWxlID0gdHJhbnNmb3JtLnNjYWxlOyAqL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbGVtVHlwZSA9PT0gNCAmJiAhY29udGVudCkge1xuICAgICAgICAgIGNvbnRlbnQgPSB0aGlzTGF5ZXIoJ0FEQkUgUm9vdCBWZWN0b3JzIEdyb3VwJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWVmZmVjdCkge1xuICAgICAgICAgIGVmZmVjdCA9IHRoaXNMYXllcig0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhhc1BhcmVudCA9ICEhKGVsZW0uaGllcmFyY2h5ICYmIGVsZW0uaGllcmFyY2h5Lmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKGhhc1BhcmVudCAmJiAhcGFyZW50KSB7XG4gICAgICAgICAgcGFyZW50ID0gZWxlbS5oaWVyYXJjaHlbMF0ubGF5ZXJJbnRlcmZhY2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gdGhpcy5jb21wLnJlbmRlcmVkRnJhbWUgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG5cbiAgICAgICAgaWYgKF9uZWVkc1JhbmRvbSkge1xuICAgICAgICAgIHNlZWRSYW5kb20ocmFuZFNlZWQgKyB0aW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZWVkc1ZlbG9jaXR5KSB7XG4gICAgICAgICAgdmVsb2NpdHkgPSB2ZWxvY2l0eUF0VGltZSh0aW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cHJlc3Npb25fZnVuY3Rpb24oKTtcbiAgICAgICAgdGhpcy5mcmFtZUV4cHJlc3Npb25JZCA9IGVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkOyAvLyBUT0RPOiBDaGVjayBpZiBpdCdzIHBvc3NpYmxlIHRvIHJldHVybiBvbiBTaGFwZUludGVyZmFjZSB0aGUgLnYgdmFsdWVcbiAgICAgICAgLy8gQ2hhbmdlZCB0aGlzIHRvIGEgdGVybmFyeSBvcGVyYXRpb24gYmVjYXVzZSBSb2xsdXAgZmFpbGVkIGNvbXBpbGluZyBpdCBjb3JyZWN0bHlcblxuICAgICAgICBzY29wZWRfYm1fcnQgPSBzY29wZWRfYm1fcnQucHJvcFR5cGUgPT09IHByb3BUeXBlcy5TSEFQRSA/IHNjb3BlZF9ibV9ydC52IDogc2NvcGVkX2JtX3J0O1xuICAgICAgICByZXR1cm4gc2NvcGVkX2JtX3J0O1xuICAgICAgfSAvLyBCdW5kbGVycyB3aWxsIHNlZSB0aGVzZSBhcyBkZWFkIGNvZGUgYW5kIHVubGVzcyB3ZSByZWZlcmVuY2UgdGhlbVxuXG5cbiAgICAgIGV4ZWN1dGVFeHByZXNzaW9uLl9fcHJldmVudERlYWRDb2RlUmVtb3ZhbCA9IFskYm1fdHJhbnNmb3JtLCBhbmNob3JQb2ludCwgdGltZSwgdmVsb2NpdHksIGluUG9pbnQsIG91dFBvaW50LCB3aWR0aCwgaGVpZ2h0LCBuYW1lLCBsb29wX2luLCBsb29wX291dCwgc21vb3RoLCB0b0NvbXAsIGZyb21Db21wVG9TdXJmYWNlLCB0b1dvcmxkLCBmcm9tV29ybGQsIG1hc2ssIHBvc2l0aW9uLCByb3RhdGlvbiwgc2NhbGUsIHRoaXNDb21wLCBudW1LZXlzLCBhY3RpdmUsIHdpZ2dsZSwgbG9vcEluRHVyYXRpb24sIGxvb3BPdXREdXJhdGlvbiwgY29tcCwgbG9va0F0LCBlYXNlT3V0LCBlYXNlSW4sIGVhc2UsIG5lYXJlc3RLZXksIGtleSwgdGV4dCwgdGV4dEluZGV4LCB0ZXh0VG90YWwsIHNlbGVjdG9yVmFsdWUsIGZyYW1lc1RvVGltZSwgdGltZVRvRnJhbWVzLCBzb3VyY2VSZWN0QXRUaW1lLCBzdWJzdHJpbmcsIHN1YnN0ciwgcG9zdGVyaXplVGltZSwgaW5kZXgsIGdsb2JhbERhdGFdO1xuICAgICAgcmV0dXJuIGV4ZWN1dGVFeHByZXNzaW9uO1xuICAgIH1cblxuICAgIG9iLmluaXRpYXRlRXhwcmVzc2lvbiA9IGluaXRpYXRlRXhwcmVzc2lvbjtcbiAgICBvYi5fX3ByZXZlbnREZWFkQ29kZVJlbW92YWwgPSBbd2luZG93LCBkb2N1bWVudCwgWE1MSHR0cFJlcXVlc3QsIGZldGNoLCBmcmFtZXMsICRibV9uZWcsIGFkZCwgJGJtX3N1bSwgJGJtX3N1YiwgJGJtX211bCwgJGJtX2RpdiwgJGJtX21vZCwgY2xhbXAsIHJhZGlhbnNfdG9fZGVncmVlcywgZGVncmVlc1RvUmFkaWFucywgZGVncmVlc190b19yYWRpYW5zLCBub3JtYWxpemUsIHJnYlRvSHNsLCBoc2xUb1JnYiwgbGluZWFyLCByYW5kb20sIGNyZWF0ZVBhdGgsIF9sb3R0aWVHbG9iYWxdO1xuICAgIG9iLnJlc2V0RnJhbWUgPSByZXNldEZyYW1lO1xuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIHZhciBFeHByZXNzaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2IgPSB7fTtcbiAgICBvYi5pbml0RXhwcmVzc2lvbnMgPSBpbml0RXhwcmVzc2lvbnM7XG4gICAgb2IucmVzZXRGcmFtZSA9IEV4cHJlc3Npb25NYW5hZ2VyLnJlc2V0RnJhbWU7XG5cbiAgICBmdW5jdGlvbiBpbml0RXhwcmVzc2lvbnMoYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgc3RhY2tDb3VudCA9IDA7XG4gICAgICB2YXIgcmVnaXN0ZXJzID0gW107XG5cbiAgICAgIGZ1bmN0aW9uIHB1c2hFeHByZXNzaW9uKCkge1xuICAgICAgICBzdGFja0NvdW50ICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBvcEV4cHJlc3Npb24oKSB7XG4gICAgICAgIHN0YWNrQ291bnQgLT0gMTtcblxuICAgICAgICBpZiAoc3RhY2tDb3VudCA9PT0gMCkge1xuICAgICAgICAgIHJlbGVhc2VJbnN0YW5jZXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZWdpc3RlckV4cHJlc3Npb25Qcm9wZXJ0eShleHByZXNzaW9uKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcnMuaW5kZXhPZihleHByZXNzaW9uKSA9PT0gLTEpIHtcbiAgICAgICAgICByZWdpc3RlcnMucHVzaChleHByZXNzaW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZWxlYXNlSW5zdGFuY2VzKCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHJlZ2lzdGVycy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgcmVnaXN0ZXJzW2ldLnJlbGVhc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuXG4gICAgICBhbmltYXRpb24ucmVuZGVyZXIuY29tcEludGVyZmFjZSA9IENvbXBFeHByZXNzaW9uSW50ZXJmYWNlKGFuaW1hdGlvbi5yZW5kZXJlcik7XG4gICAgICBhbmltYXRpb24ucmVuZGVyZXIuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlLnJlZ2lzdGVyQ29tcG9zaXRpb24oYW5pbWF0aW9uLnJlbmRlcmVyKTtcbiAgICAgIGFuaW1hdGlvbi5yZW5kZXJlci5nbG9iYWxEYXRhLnB1c2hFeHByZXNzaW9uID0gcHVzaEV4cHJlc3Npb247XG4gICAgICBhbmltYXRpb24ucmVuZGVyZXIuZ2xvYmFsRGF0YS5wb3BFeHByZXNzaW9uID0gcG9wRXhwcmVzc2lvbjtcbiAgICAgIGFuaW1hdGlvbi5yZW5kZXJlci5nbG9iYWxEYXRhLnJlZ2lzdGVyRXhwcmVzc2lvblByb3BlcnR5ID0gcmVnaXN0ZXJFeHByZXNzaW9uUHJvcGVydHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgdmFyIE1hc2tNYW5hZ2VySW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hc2tJbnRlcmZhY2UobWFzaywgZGF0YSkge1xuICAgICAgdGhpcy5fbWFzayA9IG1hc2s7XG4gICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWFza0ludGVyZmFjZS5wcm90b3R5cGUsICdtYXNrUGF0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fbWFzay5wcm9wLmspIHtcbiAgICAgICAgICB0aGlzLl9tYXNrLnByb3AuZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXNrLnByb3A7XG4gICAgICB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hc2tJbnRlcmZhY2UucHJvdG90eXBlLCAnbWFza09wYWNpdHknLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX21hc2sub3Auaykge1xuICAgICAgICAgIHRoaXMuX21hc2sub3AuZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXNrLm9wLnYgKiAxMDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgTWFza01hbmFnZXIgPSBmdW5jdGlvbiBNYXNrTWFuYWdlcihtYXNrTWFuYWdlcikge1xuICAgICAgdmFyIF9tYXNrc0ludGVyZmFjZXMgPSBjcmVhdGVTaXplZEFycmF5KG1hc2tNYW5hZ2VyLnZpZXdEYXRhLmxlbmd0aCk7XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IG1hc2tNYW5hZ2VyLnZpZXdEYXRhLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIF9tYXNrc0ludGVyZmFjZXNbaV0gPSBuZXcgTWFza0ludGVyZmFjZShtYXNrTWFuYWdlci52aWV3RGF0YVtpXSwgbWFza01hbmFnZXIubWFza3NQcm9wZXJ0aWVzW2ldKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG1hc2tGdW5jdGlvbiA9IGZ1bmN0aW9uIG1hc2tGdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIGkgPSAwO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgaWYgKG1hc2tNYW5hZ2VyLm1hc2tzUHJvcGVydGllc1tpXS5ubSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9tYXNrc0ludGVyZmFjZXNbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gbWFza0Z1bmN0aW9uO1xuICAgIH07XG5cbiAgICByZXR1cm4gTWFza01hbmFnZXI7XG4gIH0oKTtcblxuICB2YXIgRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkZWZhdWx0VW5pZGltZW5zaW9uYWxWYWx1ZSA9IHtcbiAgICAgIHB2OiAwLFxuICAgICAgdjogMCxcbiAgICAgIG11bHQ6IDFcbiAgICB9O1xuICAgIHZhciBkZWZhdWx0TXVsdGlkaW1lbnNpb25hbFZhbHVlID0ge1xuICAgICAgcHY6IFswLCAwLCAwXSxcbiAgICAgIHY6IFswLCAwLCAwXSxcbiAgICAgIG11bHQ6IDFcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY29tcGxldGVQcm9wZXJ0eShleHByZXNzaW9uVmFsdWUsIHByb3BlcnR5LCB0eXBlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwcmVzc2lvblZhbHVlLCAndmVsb2NpdHknLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBwcm9wZXJ0eS5nZXRWZWxvY2l0eUF0VGltZShwcm9wZXJ0eS5jb21wLmN1cnJlbnRGcmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZXhwcmVzc2lvblZhbHVlLm51bUtleXMgPSBwcm9wZXJ0eS5rZXlmcmFtZXMgPyBwcm9wZXJ0eS5rZXlmcmFtZXMubGVuZ3RoIDogMDtcblxuICAgICAgZXhwcmVzc2lvblZhbHVlLmtleSA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgICAgaWYgKCFleHByZXNzaW9uVmFsdWUubnVtS2V5cykge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZhbHVlID0gJyc7XG5cbiAgICAgICAgaWYgKCdzJyBpbiBwcm9wZXJ0eS5rZXlmcmFtZXNbcG9zIC0gMV0pIHtcbiAgICAgICAgICB2YWx1ZSA9IHByb3BlcnR5LmtleWZyYW1lc1twb3MgLSAxXS5zO1xuICAgICAgICB9IGVsc2UgaWYgKCdlJyBpbiBwcm9wZXJ0eS5rZXlmcmFtZXNbcG9zIC0gMl0pIHtcbiAgICAgICAgICB2YWx1ZSA9IHByb3BlcnR5LmtleWZyYW1lc1twb3MgLSAyXS5lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gcHJvcGVydHkua2V5ZnJhbWVzW3BvcyAtIDJdLnM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmFsdWVQcm9wID0gdHlwZSA9PT0gJ3VuaWRpbWVuc2lvbmFsJyA/IG5ldyBOdW1iZXIodmFsdWUpIDogT2JqZWN0LmFzc2lnbih7fSwgdmFsdWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXG4gICAgICAgIHZhbHVlUHJvcC50aW1lID0gcHJvcGVydHkua2V5ZnJhbWVzW3BvcyAtIDFdLnQgLyBwcm9wZXJ0eS5lbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICAgIHZhbHVlUHJvcC52YWx1ZSA9IHR5cGUgPT09ICd1bmlkaW1lbnNpb25hbCcgPyB2YWx1ZVswXSA6IHZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWVQcm9wO1xuICAgICAgfTtcblxuICAgICAgZXhwcmVzc2lvblZhbHVlLnZhbHVlQXRUaW1lID0gcHJvcGVydHkuZ2V0VmFsdWVBdFRpbWU7XG4gICAgICBleHByZXNzaW9uVmFsdWUuc3BlZWRBdFRpbWUgPSBwcm9wZXJ0eS5nZXRTcGVlZEF0VGltZTtcbiAgICAgIGV4cHJlc3Npb25WYWx1ZS52ZWxvY2l0eUF0VGltZSA9IHByb3BlcnR5LmdldFZlbG9jaXR5QXRUaW1lO1xuICAgICAgZXhwcmVzc2lvblZhbHVlLnByb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eS5wcm9wZXJ0eUdyb3VwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFVuaWRpbWVuc2lvbmFsUHJvcGVydHlJbnRlcmZhY2UocHJvcGVydHkpIHtcbiAgICAgIGlmICghcHJvcGVydHkgfHwgISgncHYnIGluIHByb3BlcnR5KSkge1xuICAgICAgICBwcm9wZXJ0eSA9IGRlZmF1bHRVbmlkaW1lbnNpb25hbFZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgbXVsdCA9IDEgLyBwcm9wZXJ0eS5tdWx0O1xuICAgICAgdmFyIHZhbCA9IHByb3BlcnR5LnB2ICogbXVsdDtcbiAgICAgIHZhciBleHByZXNzaW9uVmFsdWUgPSBuZXcgTnVtYmVyKHZhbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cbiAgICAgIGV4cHJlc3Npb25WYWx1ZS52YWx1ZSA9IHZhbDtcbiAgICAgIGNvbXBsZXRlUHJvcGVydHkoZXhwcmVzc2lvblZhbHVlLCBwcm9wZXJ0eSwgJ3VuaWRpbWVuc2lvbmFsJyk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocHJvcGVydHkuaykge1xuICAgICAgICAgIHByb3BlcnR5LmdldFZhbHVlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YWwgPSBwcm9wZXJ0eS52ICogbXVsdDtcblxuICAgICAgICBpZiAoZXhwcmVzc2lvblZhbHVlLnZhbHVlICE9PSB2YWwpIHtcbiAgICAgICAgICBleHByZXNzaW9uVmFsdWUgPSBuZXcgTnVtYmVyKHZhbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cbiAgICAgICAgICBleHByZXNzaW9uVmFsdWUudmFsdWUgPSB2YWw7XG4gICAgICAgICAgY29tcGxldGVQcm9wZXJ0eShleHByZXNzaW9uVmFsdWUsIHByb3BlcnR5LCAndW5pZGltZW5zaW9uYWwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHByZXNzaW9uVmFsdWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIE11bHRpZGltZW5zaW9uYWxQcm9wZXJ0eUludGVyZmFjZShwcm9wZXJ0eSkge1xuICAgICAgaWYgKCFwcm9wZXJ0eSB8fCAhKCdwdicgaW4gcHJvcGVydHkpKSB7XG4gICAgICAgIHByb3BlcnR5ID0gZGVmYXVsdE11bHRpZGltZW5zaW9uYWxWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIG11bHQgPSAxIC8gcHJvcGVydHkubXVsdDtcbiAgICAgIHZhciBsZW4gPSBwcm9wZXJ0eS5kYXRhICYmIHByb3BlcnR5LmRhdGEubCB8fCBwcm9wZXJ0eS5wdi5sZW5ndGg7XG4gICAgICB2YXIgZXhwcmVzc2lvblZhbHVlID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG4gICAgICB2YXIgYXJyVmFsdWUgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcbiAgICAgIGV4cHJlc3Npb25WYWx1ZS52YWx1ZSA9IGFyclZhbHVlO1xuICAgICAgY29tcGxldGVQcm9wZXJ0eShleHByZXNzaW9uVmFsdWUsIHByb3BlcnR5LCAnbXVsdGlkaW1lbnNpb25hbCcpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5LmspIHtcbiAgICAgICAgICBwcm9wZXJ0eS5nZXRWYWx1ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGFyclZhbHVlW2ldID0gcHJvcGVydHkudltpXSAqIG11bHQ7XG4gICAgICAgICAgZXhwcmVzc2lvblZhbHVlW2ldID0gYXJyVmFsdWVbaV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXhwcmVzc2lvblZhbHVlO1xuICAgICAgfTtcbiAgICB9IC8vIFRPRE86IHRyeSB0byBhdm9pZCB1c2luZyB0aGlzIGdldHRlclxuXG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0R2V0dGVyKCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRVbmlkaW1lbnNpb25hbFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRHZXR0ZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wZXJ0eS5wcm9wVHlwZSA9PT0gJ3VuaWRpbWVuc2lvbmFsJykge1xuICAgICAgICByZXR1cm4gVW5pZGltZW5zaW9uYWxQcm9wZXJ0eUludGVyZmFjZShwcm9wZXJ0eSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBNdWx0aWRpbWVuc2lvbmFsUHJvcGVydHlJbnRlcmZhY2UocHJvcGVydHkpO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgVHJhbnNmb3JtRXhwcmVzc2lvbkludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRyYW5zZm9ybSkge1xuICAgICAgZnVuY3Rpb24gX3RoaXNGdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgIGNhc2UgJ3NjYWxlJzpcbiAgICAgICAgICBjYXNlICdTY2FsZSc6XG4gICAgICAgICAgY2FzZSAnQURCRSBTY2FsZSc6XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24uc2NhbGU7XG5cbiAgICAgICAgICBjYXNlICdyb3RhdGlvbic6XG4gICAgICAgICAgY2FzZSAnUm90YXRpb24nOlxuICAgICAgICAgIGNhc2UgJ0FEQkUgUm90YXRpb24nOlxuICAgICAgICAgIGNhc2UgJ0FEQkUgUm90YXRlIFonOlxuICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi5yb3RhdGlvbjtcblxuICAgICAgICAgIGNhc2UgJ0FEQkUgUm90YXRlIFgnOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24ueFJvdGF0aW9uO1xuXG4gICAgICAgICAgY2FzZSAnQURCRSBSb3RhdGUgWSc6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi55Um90YXRpb247XG5cbiAgICAgICAgICBjYXNlICdwb3NpdGlvbic6XG4gICAgICAgICAgY2FzZSAnUG9zaXRpb24nOlxuICAgICAgICAgIGNhc2UgJ0FEQkUgUG9zaXRpb24nOlxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLnBvc2l0aW9uO1xuXG4gICAgICAgICAgY2FzZSAnQURCRSBQb3NpdGlvbl8wJzpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLnhQb3NpdGlvbjtcblxuICAgICAgICAgIGNhc2UgJ0FEQkUgUG9zaXRpb25fMSc6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi55UG9zaXRpb247XG5cbiAgICAgICAgICBjYXNlICdBREJFIFBvc2l0aW9uXzInOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24uelBvc2l0aW9uO1xuXG4gICAgICAgICAgY2FzZSAnYW5jaG9yUG9pbnQnOlxuICAgICAgICAgIGNhc2UgJ0FuY2hvclBvaW50JzpcbiAgICAgICAgICBjYXNlICdBbmNob3IgUG9pbnQnOlxuICAgICAgICAgIGNhc2UgJ0FEQkUgQW5jaG9yUG9pbnQnOlxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLmFuY2hvclBvaW50O1xuXG4gICAgICAgICAgY2FzZSAnb3BhY2l0eSc6XG4gICAgICAgICAgY2FzZSAnT3BhY2l0eSc6XG4gICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLm9wYWNpdHk7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICdyb3RhdGlvbicsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnIgfHwgdHJhbnNmb3JtLnJ6KVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3pSb3RhdGlvbicsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnJ6IHx8IHRyYW5zZm9ybS5yKVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3hSb3RhdGlvbicsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnJ4KVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3lSb3RhdGlvbicsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnJ5KVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3NjYWxlJywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucylcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3B4O1xuXG4gICAgICB2YXIgX3B5O1xuXG4gICAgICB2YXIgX3B6O1xuXG4gICAgICB2YXIgX3RyYW5zZm9ybUZhY3Rvcnk7XG5cbiAgICAgIGlmICh0cmFuc2Zvcm0ucCkge1xuICAgICAgICBfdHJhbnNmb3JtRmFjdG9yeSA9IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcHggPSBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnB4KTtcbiAgICAgICAgX3B5ID0gRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weSk7XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybS5weikge1xuICAgICAgICAgIF9weiA9IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucHopO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAncG9zaXRpb24nLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIGlmICh0cmFuc2Zvcm0ucCkge1xuICAgICAgICAgICAgcmV0dXJuIF90cmFuc2Zvcm1GYWN0b3J5KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFtfcHgoKSwgX3B5KCksIF9weiA/IF9weigpIDogMF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICd4UG9zaXRpb24nLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weClcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICd5UG9zaXRpb24nLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weSlcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICd6UG9zaXRpb24nLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weilcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICdhbmNob3JQb2ludCcsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLmEpXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAnb3BhY2l0eScsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLm8pXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAnc2tldycsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnNrKVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3NrZXdBeGlzJywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0uc2EpXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAnb3JpZW50YXRpb24nLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5vcilcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb247XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBMYXllckV4cHJlc3Npb25JbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZ2V0TWF0cml4KHRpbWUpIHtcbiAgICAgIHZhciB0b1dvcmxkTWF0ID0gbmV3IE1hdHJpeCgpO1xuXG4gICAgICBpZiAodGltZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBwcm9wTWF0cml4ID0gdGhpcy5fZWxlbS5maW5hbFRyYW5zZm9ybS5tUHJvcC5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcblxuICAgICAgICBwcm9wTWF0cml4LmNsb25lKHRvV29ybGRNYXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybU1hdCA9IHRoaXMuX2VsZW0uZmluYWxUcmFuc2Zvcm0ubVByb3A7XG4gICAgICAgIHRyYW5zZm9ybU1hdC5hcHBseVRvTWF0cml4KHRvV29ybGRNYXQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdG9Xb3JsZE1hdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b1dvcmxkVmVjKGFyciwgdGltZSkge1xuICAgICAgdmFyIHRvV29ybGRNYXQgPSB0aGlzLmdldE1hdHJpeCh0aW1lKTtcbiAgICAgIHRvV29ybGRNYXQucHJvcHNbMTJdID0gMDtcbiAgICAgIHRvV29ybGRNYXQucHJvcHNbMTNdID0gMDtcbiAgICAgIHRvV29ybGRNYXQucHJvcHNbMTRdID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmFwcGx5UG9pbnQodG9Xb3JsZE1hdCwgYXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b1dvcmxkKGFyciwgdGltZSkge1xuICAgICAgdmFyIHRvV29ybGRNYXQgPSB0aGlzLmdldE1hdHJpeCh0aW1lKTtcbiAgICAgIHJldHVybiB0aGlzLmFwcGx5UG9pbnQodG9Xb3JsZE1hdCwgYXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tV29ybGRWZWMoYXJyLCB0aW1lKSB7XG4gICAgICB2YXIgdG9Xb3JsZE1hdCA9IHRoaXMuZ2V0TWF0cml4KHRpbWUpO1xuICAgICAgdG9Xb3JsZE1hdC5wcm9wc1sxMl0gPSAwO1xuICAgICAgdG9Xb3JsZE1hdC5wcm9wc1sxM10gPSAwO1xuICAgICAgdG9Xb3JsZE1hdC5wcm9wc1sxNF0gPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW52ZXJ0UG9pbnQodG9Xb3JsZE1hdCwgYXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tV29ybGQoYXJyLCB0aW1lKSB7XG4gICAgICB2YXIgdG9Xb3JsZE1hdCA9IHRoaXMuZ2V0TWF0cml4KHRpbWUpO1xuICAgICAgcmV0dXJuIHRoaXMuaW52ZXJ0UG9pbnQodG9Xb3JsZE1hdCwgYXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVBvaW50KG1hdHJpeCwgYXJyKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbS5oaWVyYXJjaHkgJiYgdGhpcy5fZWxlbS5oaWVyYXJjaHkubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5fZWxlbS5oaWVyYXJjaHkubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHRoaXMuX2VsZW0uaGllcmFyY2h5W2ldLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLmFwcGx5VG9NYXRyaXgobWF0cml4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF0cml4LmFwcGx5VG9Qb2ludEFycmF5KGFyclswXSwgYXJyWzFdLCBhcnJbMl0gfHwgMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52ZXJ0UG9pbnQobWF0cml4LCBhcnIpIHtcbiAgICAgIGlmICh0aGlzLl9lbGVtLmhpZXJhcmNoeSAmJiB0aGlzLl9lbGVtLmhpZXJhcmNoeS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLl9lbGVtLmhpZXJhcmNoeS5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgdGhpcy5fZWxlbS5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3AuYXBwbHlUb01hdHJpeChtYXRyaXgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRyaXguaW52ZXJzZVBvaW50KGFycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbUNvbXAoYXJyKSB7XG4gICAgICB2YXIgdG9Xb3JsZE1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgIHRvV29ybGRNYXQucmVzZXQoKTtcblxuICAgICAgdGhpcy5fZWxlbS5maW5hbFRyYW5zZm9ybS5tUHJvcC5hcHBseVRvTWF0cml4KHRvV29ybGRNYXQpO1xuXG4gICAgICBpZiAodGhpcy5fZWxlbS5oaWVyYXJjaHkgJiYgdGhpcy5fZWxlbS5oaWVyYXJjaHkubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5fZWxlbS5oaWVyYXJjaHkubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHRoaXMuX2VsZW0uaGllcmFyY2h5W2ldLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLmFwcGx5VG9NYXRyaXgodG9Xb3JsZE1hdCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9Xb3JsZE1hdC5pbnZlcnNlUG9pbnQoYXJyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRvV29ybGRNYXQuaW52ZXJzZVBvaW50KGFycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2FtcGxlSW1hZ2UoKSB7XG4gICAgICByZXR1cm4gWzEsIDEsIDEsIDFdO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgdmFyIHRyYW5zZm9ybUludGVyZmFjZTtcblxuICAgICAgZnVuY3Rpb24gX3JlZ2lzdGVyTWFza0ludGVyZmFjZShtYXNrTWFuYWdlcikge1xuICAgICAgICBfdGhpc0xheWVyRnVuY3Rpb24ubWFzayA9IG5ldyBNYXNrTWFuYWdlckludGVyZmFjZShtYXNrTWFuYWdlciwgZWxlbSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF9yZWdpc3RlckVmZmVjdHNJbnRlcmZhY2UoZWZmZWN0cykge1xuICAgICAgICBfdGhpc0xheWVyRnVuY3Rpb24uZWZmZWN0ID0gZWZmZWN0cztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3RoaXNMYXllckZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgY2FzZSAnQURCRSBSb290IFZlY3RvcnMgR3JvdXAnOlxuICAgICAgICAgIGNhc2UgJ0NvbnRlbnRzJzpcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNMYXllckZ1bmN0aW9uLnNoYXBlSW50ZXJmYWNlO1xuXG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICBjYXNlICdUcmFuc2Zvcm0nOlxuICAgICAgICAgIGNhc2UgJ3RyYW5zZm9ybSc6XG4gICAgICAgICAgY2FzZSAnQURCRSBUcmFuc2Zvcm0gR3JvdXAnOlxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybUludGVyZmFjZTtcblxuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBjYXNlICdBREJFIEVmZmVjdCBQYXJhZGUnOlxuICAgICAgICAgIGNhc2UgJ2VmZmVjdHMnOlxuICAgICAgICAgIGNhc2UgJ0VmZmVjdHMnOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbi5lZmZlY3Q7XG5cbiAgICAgICAgICBjYXNlICdBREJFIFRleHQgUHJvcGVydGllcyc6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNMYXllckZ1bmN0aW9uLnRleHRJbnRlcmZhY2U7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmdldE1hdHJpeCA9IGdldE1hdHJpeDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5pbnZlcnRQb2ludCA9IGludmVydFBvaW50O1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmFwcGx5UG9pbnQgPSBhcHBseVBvaW50O1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnRvV29ybGQgPSB0b1dvcmxkO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnRvV29ybGRWZWMgPSB0b1dvcmxkVmVjO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmZyb21Xb3JsZCA9IGZyb21Xb3JsZDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5mcm9tV29ybGRWZWMgPSBmcm9tV29ybGRWZWM7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24udG9Db21wID0gdG9Xb3JsZDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5mcm9tQ29tcCA9IGZyb21Db21wO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnNhbXBsZUltYWdlID0gc2FtcGxlSW1hZ2U7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uc291cmNlUmVjdEF0VGltZSA9IGVsZW0uc291cmNlUmVjdEF0VGltZS5iaW5kKGVsZW0pO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLl9lbGVtID0gZWxlbTtcbiAgICAgIHRyYW5zZm9ybUludGVyZmFjZSA9IFRyYW5zZm9ybUV4cHJlc3Npb25JbnRlcmZhY2UoZWxlbS5maW5hbFRyYW5zZm9ybS5tUHJvcCk7XG4gICAgICB2YXIgYW5jaG9yUG9pbnREZXNjcmlwdG9yID0gZ2V0RGVzY3JpcHRvcih0cmFuc2Zvcm1JbnRlcmZhY2UsICdhbmNob3JQb2ludCcpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX3RoaXNMYXllckZ1bmN0aW9uLCB7XG4gICAgICAgIGhhc1BhcmVudDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uaGllcmFyY2h5Lmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHBhcmVudDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uaGllcmFyY2h5WzBdLmxheWVySW50ZXJmYWNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcm90YXRpb246IGdldERlc2NyaXB0b3IodHJhbnNmb3JtSW50ZXJmYWNlLCAncm90YXRpb24nKSxcbiAgICAgICAgc2NhbGU6IGdldERlc2NyaXB0b3IodHJhbnNmb3JtSW50ZXJmYWNlLCAnc2NhbGUnKSxcbiAgICAgICAgcG9zaXRpb246IGdldERlc2NyaXB0b3IodHJhbnNmb3JtSW50ZXJmYWNlLCAncG9zaXRpb24nKSxcbiAgICAgICAgb3BhY2l0eTogZ2V0RGVzY3JpcHRvcih0cmFuc2Zvcm1JbnRlcmZhY2UsICdvcGFjaXR5JyksXG4gICAgICAgIGFuY2hvclBvaW50OiBhbmNob3JQb2ludERlc2NyaXB0b3IsXG4gICAgICAgIGFuY2hvcl9wb2ludDogYW5jaG9yUG9pbnREZXNjcmlwdG9yLFxuICAgICAgICB0cmFuc2Zvcm06IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1JbnRlcmZhY2U7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmlzSW5SYW5nZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnN0YXJ0VGltZSA9IGVsZW0uZGF0YS5zdDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5pbmRleCA9IGVsZW0uZGF0YS5pbmQ7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uc291cmNlID0gZWxlbS5kYXRhLnJlZklkO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmhlaWdodCA9IGVsZW0uZGF0YS50eSA9PT0gMCA/IGVsZW0uZGF0YS5oIDogMTAwO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLndpZHRoID0gZWxlbS5kYXRhLnR5ID09PSAwID8gZWxlbS5kYXRhLncgOiAxMDA7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uaW5Qb2ludCA9IGVsZW0uZGF0YS5pcCAvIGVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5vdXRQb2ludCA9IGVsZW0uZGF0YS5vcCAvIGVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5fbmFtZSA9IGVsZW0uZGF0YS5ubTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5yZWdpc3Rlck1hc2tJbnRlcmZhY2UgPSBfcmVnaXN0ZXJNYXNrSW50ZXJmYWNlO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnJlZ2lzdGVyRWZmZWN0c0ludGVyZmFjZSA9IF9yZWdpc3RlckVmZmVjdHNJbnRlcmZhY2U7XG4gICAgICByZXR1cm4gX3RoaXNMYXllckZ1bmN0aW9uO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgcHJvcGVydHlHcm91cEZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbnRlcmZhY2VGdW5jdGlvbiwgcGFyZW50UHJvcGVydHlHcm91cCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFsID0gdmFsID09PSB1bmRlZmluZWQgPyAxIDogdmFsO1xuXG4gICAgICAgIGlmICh2YWwgPD0gMCkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJlbnRQcm9wZXJ0eUdyb3VwKHZhbCAtIDEpO1xuICAgICAgfTtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIFByb3BlcnR5SW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocHJvcGVydHlOYW1lLCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB2YXIgaW50ZXJmYWNlRnVuY3Rpb24gPSB7XG4gICAgICAgIF9uYW1lOiBwcm9wZXJ0eU5hbWVcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIF9wcm9wZXJ0eUdyb3VwKHZhbCkge1xuICAgICAgICB2YWwgPSB2YWwgPT09IHVuZGVmaW5lZCA/IDEgOiB2YWw7XG5cbiAgICAgICAgaWYgKHZhbCA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByb3BlcnR5R3JvdXAodmFsIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcHJvcGVydHlHcm91cDtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIEVmZmVjdHNFeHByZXNzaW9uSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYiA9IHtcbiAgICAgIGNyZWF0ZUVmZmVjdHNJbnRlcmZhY2U6IGNyZWF0ZUVmZmVjdHNJbnRlcmZhY2VcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRWZmZWN0c0ludGVyZmFjZShlbGVtLCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBpZiAoZWxlbS5lZmZlY3RzTWFuYWdlcikge1xuICAgICAgICB2YXIgZWZmZWN0RWxlbWVudHMgPSBbXTtcbiAgICAgICAgdmFyIGVmZmVjdHNEYXRhID0gZWxlbS5kYXRhLmVmO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IGVsZW0uZWZmZWN0c01hbmFnZXIuZWZmZWN0RWxlbWVudHMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGVmZmVjdEVsZW1lbnRzLnB1c2goY3JlYXRlR3JvdXBJbnRlcmZhY2UoZWZmZWN0c0RhdGFbaV0sIGVsZW0uZWZmZWN0c01hbmFnZXIuZWZmZWN0RWxlbWVudHNbaV0sIHByb3BlcnR5R3JvdXAsIGVsZW0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlZmZlY3RzID0gZWxlbS5kYXRhLmVmIHx8IFtdO1xuXG4gICAgICAgIHZhciBncm91cEludGVyZmFjZSA9IGZ1bmN0aW9uIGdyb3VwSW50ZXJmYWNlKG5hbWUpIHtcbiAgICAgICAgICBpID0gMDtcbiAgICAgICAgICBsZW4gPSBlZmZlY3RzLmxlbmd0aDtcblxuICAgICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gZWZmZWN0c1tpXS5ubSB8fCBuYW1lID09PSBlZmZlY3RzW2ldLm1uIHx8IG5hbWUgPT09IGVmZmVjdHNbaV0uaXgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVmZmVjdEVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdyb3VwSW50ZXJmYWNlLCAnbnVtUHJvcGVydGllcycsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBlZmZlY3RzLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZ3JvdXBJbnRlcmZhY2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUdyb3VwSW50ZXJmYWNlKGRhdGEsIGVsZW1lbnRzLCBwcm9wZXJ0eUdyb3VwLCBlbGVtKSB7XG4gICAgICBmdW5jdGlvbiBncm91cEludGVyZmFjZShuYW1lKSB7XG4gICAgICAgIHZhciBlZmZlY3RzID0gZGF0YS5lZjtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gZWZmZWN0cy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gZWZmZWN0c1tpXS5ubSB8fCBuYW1lID09PSBlZmZlY3RzW2ldLm1uIHx8IG5hbWUgPT09IGVmZmVjdHNbaV0uaXgpIHtcbiAgICAgICAgICAgIGlmIChlZmZlY3RzW2ldLnR5ID09PSA1KSB7XG4gICAgICAgICAgICAgIHJldHVybiBlZmZlY3RFbGVtZW50c1tpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGVmZmVjdEVsZW1lbnRzW2ldKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGdyb3VwSW50ZXJmYWNlLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgdmFyIGVmZmVjdEVsZW1lbnRzID0gW107XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBkYXRhLmVmLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmIChkYXRhLmVmW2ldLnR5ID09PSA1KSB7XG4gICAgICAgICAgZWZmZWN0RWxlbWVudHMucHVzaChjcmVhdGVHcm91cEludGVyZmFjZShkYXRhLmVmW2ldLCBlbGVtZW50cy5lZmZlY3RFbGVtZW50c1tpXSwgZWxlbWVudHMuZWZmZWN0RWxlbWVudHNbaV0ucHJvcGVydHlHcm91cCwgZWxlbSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVmZmVjdEVsZW1lbnRzLnB1c2goY3JlYXRlVmFsdWVJbnRlcmZhY2UoZWxlbWVudHMuZWZmZWN0RWxlbWVudHNbaV0sIGRhdGEuZWZbaV0udHksIGVsZW0sIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEubW4gPT09ICdBREJFIENvbG9yIENvbnRyb2wnKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShncm91cEludGVyZmFjZSwgJ2NvbG9yJywge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGVmZmVjdEVsZW1lbnRzWzBdKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZ3JvdXBJbnRlcmZhY2UsIHtcbiAgICAgICAgbnVtUHJvcGVydGllczoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEubnA7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBkYXRhLm5tXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BlcnR5R3JvdXA6IHtcbiAgICAgICAgICB2YWx1ZTogX3Byb3BlcnR5R3JvdXBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBncm91cEludGVyZmFjZS5lbmFibGVkID0gZGF0YS5lbiAhPT0gMDtcbiAgICAgIGdyb3VwSW50ZXJmYWNlLmFjdGl2ZSA9IGdyb3VwSW50ZXJmYWNlLmVuYWJsZWQ7XG4gICAgICByZXR1cm4gZ3JvdXBJbnRlcmZhY2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVmFsdWVJbnRlcmZhY2UoZWxlbWVudCwgdHlwZSwgZWxlbSwgcHJvcGVydHlHcm91cCkge1xuICAgICAgdmFyIGV4cHJlc3Npb25Qcm9wZXJ0eSA9IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShlbGVtZW50LnApO1xuXG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09IDEwKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW0uY29tcC5jb21wSW50ZXJmYWNlKGVsZW1lbnQucC52KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHByZXNzaW9uUHJvcGVydHkoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQucC5zZXRHcm91cFByb3BlcnR5KSB7XG4gICAgICAgIGVsZW1lbnQucC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCcnLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICB2YXIgU2hhcGVQYXRoSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBwYXRoSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgdmFyIHByb3AgPSB2aWV3LnNoO1xuXG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKHZhbCA9PT0gJ1NoYXBlJyB8fCB2YWwgPT09ICdzaGFwZScgfHwgdmFsID09PSAnUGF0aCcgfHwgdmFsID09PSAncGF0aCcgfHwgdmFsID09PSAnQURCRSBWZWN0b3IgU2hhcGUnIHx8IHZhbCA9PT0gMikge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wYXRoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgcHJvcC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQYXRoJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHBhdGg6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIGlmIChwcm9wLmspIHtcbiAgICAgICAgICAgICAgcHJvcC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNoYXBlOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICBpZiAocHJvcC5rKSB7XG4gICAgICAgICAgICAgIHByb3AuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9LFxuICAgICAgICBpeDoge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5peFxuICAgICAgICB9LFxuICAgICAgICBwcm9wZXJ0eUluZGV4OiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLml4XG4gICAgICAgIH0sXG4gICAgICAgIG1uOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm1uXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BlcnR5R3JvdXA6IHtcbiAgICAgICAgICB2YWx1ZTogcHJvcGVydHlHcm91cFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIFNoYXBlRXhwcmVzc2lvbkludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBpdGVyYXRlRWxlbWVudHMoc2hhcGVzLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB2YXIgYXJyID0gW107XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzaGFwZXMgPyBzaGFwZXMubGVuZ3RoIDogMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzaGFwZXNbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgICBhcnIucHVzaChncm91cEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAnZmwnKSB7XG4gICAgICAgICAgYXJyLnB1c2goZmlsbEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAnc3QnKSB7XG4gICAgICAgICAgYXJyLnB1c2goc3Ryb2tlSW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICd0bScpIHtcbiAgICAgICAgICBhcnIucHVzaCh0cmltSW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICd0cicpIHsvLyBhcnIucHVzaCh0cmFuc2Zvcm1JbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSx2aWV3W2ldLHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdlbCcpIHtcbiAgICAgICAgICBhcnIucHVzaChlbGxpcHNlSW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdzcicpIHtcbiAgICAgICAgICBhcnIucHVzaChzdGFySW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdzaCcpIHtcbiAgICAgICAgICBhcnIucHVzaChTaGFwZVBhdGhJbnRlcmZhY2Uoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAncmMnKSB7XG4gICAgICAgICAgYXJyLnB1c2gocmVjdEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAncmQnKSB7XG4gICAgICAgICAgYXJyLnB1c2gocm91bmRlZEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAncnAnKSB7XG4gICAgICAgICAgYXJyLnB1c2gocmVwZWF0ZXJJbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ2dmJykge1xuICAgICAgICAgIGFyci5wdXNoKGdyYWRpZW50RmlsbEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXJyLnB1c2goZGVmYXVsdEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb250ZW50c0ludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHZhciBpbnRlcmZhY2VzO1xuXG4gICAgICB2YXIgaW50ZXJmYWNlRnVuY3Rpb24gPSBmdW5jdGlvbiBfaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gaW50ZXJmYWNlcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAoaW50ZXJmYWNlc1tpXS5fbmFtZSA9PT0gdmFsdWUgfHwgaW50ZXJmYWNlc1tpXS5tbiA9PT0gdmFsdWUgfHwgaW50ZXJmYWNlc1tpXS5wcm9wZXJ0eUluZGV4ID09PSB2YWx1ZSB8fCBpbnRlcmZhY2VzW2ldLml4ID09PSB2YWx1ZSB8fCBpbnRlcmZhY2VzW2ldLmluZCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VzW2ldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZXNbdmFsdWUgLSAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcblxuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcbiAgICAgIGludGVyZmFjZXMgPSBpdGVyYXRlRWxlbWVudHMoc2hhcGUuaXQsIHZpZXcuaXQsIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXApO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubnVtUHJvcGVydGllcyA9IGludGVyZmFjZXMubGVuZ3RoO1xuICAgICAgdmFyIHRyYW5zZm9ybUludGVyZmFjZSA9IHRyYW5zZm9ybUludGVyZmFjZUZhY3Rvcnkoc2hhcGUuaXRbc2hhcGUuaXQubGVuZ3RoIC0gMV0sIHZpZXcuaXRbdmlldy5pdC5sZW5ndGggLSAxXSwgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1JbnRlcmZhY2U7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuY2l4O1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24uX25hbWUgPSBzaGFwZS5ubTtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBncm91cEludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHZhciBpbnRlcmZhY2VGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgY2FzZSAnQURCRSBWZWN0b3JzIEdyb3VwJzpcbiAgICAgICAgICBjYXNlICdDb250ZW50cyc6XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmNvbnRlbnQ7XG4gICAgICAgICAgLy8gTm90IG5lY2Vzc2FyeSBmb3Igbm93LiBLZWVwaW5nIHRoZW0gaGVyZSBpbiBjYXNlIGEgbmV3IGNhc2UgYXBwZWFyc1xuICAgICAgICAgIC8vIGNhc2UgJ0FEQkUgVmVjdG9yIFRyYW5zZm9ybSBHcm91cCc6XG4gICAgICAgICAgLy8gY2FzZSAzOlxuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi50cmFuc2Zvcm07XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG4gICAgICB2YXIgY29udGVudCA9IGNvbnRlbnRzSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCk7XG4gICAgICB2YXIgdHJhbnNmb3JtSW50ZXJmYWNlID0gdHJhbnNmb3JtSW50ZXJmYWNlRmFjdG9yeShzaGFwZS5pdFtzaGFwZS5pdC5sZW5ndGggLSAxXSwgdmlldy5pdFt2aWV3Lml0Lmxlbmd0aCAtIDFdLCBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwKTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLmNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24udHJhbnNmb3JtID0gdHJhbnNmb3JtSW50ZXJmYWNlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGludGVyZmFjZUZ1bmN0aW9uLCAnX25hbWUnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBzaGFwZS5ubTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIGludGVyZmFjZUZ1bmN0aW9uLmNvbnRlbnQgPSBpbnRlcmZhY2VGdW5jdGlvbjtcblxuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubnVtUHJvcGVydGllcyA9IHNoYXBlLm5wO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleCA9IHNoYXBlLml4O1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubm0gPSBzaGFwZS5ubTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsbEludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBpZiAodmFsID09PSAnQ29sb3InIHx8IHZhbCA9PT0gJ2NvbG9yJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5jb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgPT09ICdPcGFjaXR5JyB8fCB2YWwgPT09ICdvcGFjaXR5Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vcGFjaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5jKVxuICAgICAgICB9LFxuICAgICAgICBvcGFjaXR5OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5vKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9LFxuICAgICAgICBtbjoge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5tblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZpZXcuYy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdDb2xvcicsIHByb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcuby5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPcGFjaXR5JywgcHJvcGVydHlHcm91cCkpO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdyYWRpZW50RmlsbEludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBpZiAodmFsID09PSAnU3RhcnQgUG9pbnQnIHx8IHZhbCA9PT0gJ3N0YXJ0IHBvaW50Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5zdGFydFBvaW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gJ0VuZCBQb2ludCcgfHwgdmFsID09PSAnZW5kIHBvaW50Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5lbmRQb2ludDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgPT09ICdPcGFjaXR5JyB8fCB2YWwgPT09ICdvcGFjaXR5Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vcGFjaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHN0YXJ0UG9pbnQ6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnMpXG4gICAgICAgIH0sXG4gICAgICAgIGVuZFBvaW50OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5lKVxuICAgICAgICB9LFxuICAgICAgICBvcGFjaXR5OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5vKVxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2EnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfSxcbiAgICAgICAgbW46IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubW5cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2aWV3LnMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU3RhcnQgUG9pbnQnLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB2aWV3LmUuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnRW5kIFBvaW50JywgcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy5vLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ09wYWNpdHknLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdEludGVyZmFjZUZhY3RvcnkoKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJva2VJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIHZhciBfZGFzaFByb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShkYXNoT2IsIF9wcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgZnVuY3Rpb24gYWRkUHJvcGVydHlUb0Rhc2hPYihpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXNoT2IsIHNoYXBlLmRbaV0ubm0sIHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LmQuZGF0YVByb3BzW2ldLnApXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzaGFwZS5kID8gc2hhcGUuZC5sZW5ndGggOiAwO1xuICAgICAgdmFyIGRhc2hPYiA9IHt9O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgYWRkUHJvcGVydHlUb0Rhc2hPYihpKTtcbiAgICAgICAgdmlldy5kLmRhdGFQcm9wc1tpXS5wLnNldEdyb3VwUHJvcGVydHkoX2Rhc2hQcm9wZXJ0eUdyb3VwKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT09ICdDb2xvcicgfHwgdmFsID09PSAnY29sb3InKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gJ09wYWNpdHknIHx8IHZhbCA9PT0gJ29wYWNpdHknKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm9wYWNpdHk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsID09PSAnU3Ryb2tlIFdpZHRoJyB8fCB2YWwgPT09ICdzdHJva2Ugd2lkdGgnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnN0cm9rZVdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5jKVxuICAgICAgICB9LFxuICAgICAgICBvcGFjaXR5OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5vKVxuICAgICAgICB9LFxuICAgICAgICBzdHJva2VXaWR0aDoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcudylcbiAgICAgICAgfSxcbiAgICAgICAgZGFzaDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGRhc2hPYjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH0sXG4gICAgICAgIG1uOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm1uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmlldy5jLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0NvbG9yJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcuby5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPcGFjaXR5JywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcudy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdTdHJva2UgV2lkdGgnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyaW1JbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKHZhbCA9PT0gc2hhcGUuZS5peCB8fCB2YWwgPT09ICdFbmQnIHx8IHZhbCA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uZW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gc2hhcGUucy5peCkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5zdGFydDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgPT09IHNoYXBlLm8uaXgpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleCA9IHNoYXBlLml4O1xuICAgICAgdmlldy5zLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1N0YXJ0JywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcuZS5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdFbmQnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy5vLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ09mZnNldCcsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuaXg7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cDtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5zKVxuICAgICAgICB9LFxuICAgICAgICBlbmQ6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LmUpXG4gICAgICAgIH0sXG4gICAgICAgIG9mZnNldDoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcubylcbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5tbiA9IHNoYXBlLm1uO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybUludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChzaGFwZS5hLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ0FuY2hvciBQb2ludCcpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uYW5jaG9yUG9pbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuby5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdPcGFjaXR5Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vcGFjaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnAuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnUG9zaXRpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnBvc2l0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnIuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnUm90YXRpb24nIHx8IHZhbHVlID09PSAnQURCRSBWZWN0b3IgUm90YXRpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnJvdGF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnMuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnU2NhbGUnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnNjYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnNrICYmIHNoYXBlLnNrLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ1NrZXcnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnNrZXc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuc2EgJiYgc2hhcGUuc2EuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnU2tldyBBeGlzJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5za2V3QXhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5vLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ09wYWNpdHknLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy50cmFuc2Zvcm0ubVByb3BzLnAuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUG9zaXRpb24nLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy50cmFuc2Zvcm0ubVByb3BzLmEuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnQW5jaG9yIFBvaW50JywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5zLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1NjYWxlJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5yLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1JvdGF0aW9uJywgX3Byb3BlcnR5R3JvdXApKTtcblxuICAgICAgaWYgKHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5zaykge1xuICAgICAgICB2aWV3LnRyYW5zZm9ybS5tUHJvcHMuc2suc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU2tldycsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5zYS5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdTa2V3IEFuZ2xlJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIH1cblxuICAgICAgdmlldy50cmFuc2Zvcm0ub3Auc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT3BhY2l0eScsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICBvcGFjaXR5OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLm8pXG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLnApXG4gICAgICAgIH0sXG4gICAgICAgIGFuY2hvclBvaW50OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLmEpXG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLnMpXG4gICAgICAgIH0sXG4gICAgICAgIHJvdGF0aW9uOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLnIpXG4gICAgICAgIH0sXG4gICAgICAgIHNrZXc6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnRyYW5zZm9ybS5tUHJvcHMuc2spXG4gICAgICAgIH0sXG4gICAgICAgIHNrZXdBeGlzOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLnNhKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnR5ID0gJ3RyJztcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cDtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbGxpcHNlSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHNoYXBlLnAuaXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnBvc2l0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnMuaXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnNpemU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuXG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuaXg7XG4gICAgICB2YXIgcHJvcCA9IHZpZXcuc2gudHkgPT09ICd0bScgPyB2aWV3LnNoLnByb3AgOiB2aWV3LnNoO1xuICAgICAgcHJvcC5zLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1NpemUnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcHJvcC5wLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1Bvc2l0aW9uJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHNpemU6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnMpXG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5wKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhckludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChzaGFwZS5wLml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wb3NpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5yLml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5yb3RhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5wdC5peCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucG9pbnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLm9yLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ0FEQkUgVmVjdG9yIFN0YXIgT3V0ZXIgUmFkaXVzJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vdXRlclJhZGl1cztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5vcy5peCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub3V0ZXJSb3VuZG5lc3M7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuaXIgJiYgKHNoYXBlLmlyLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ0FEQkUgVmVjdG9yIFN0YXIgSW5uZXIgUmFkaXVzJykpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uaW5uZXJSYWRpdXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuaXMgJiYgc2hhcGUuaXMuaXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmlubmVyUm91bmRuZXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgdmFyIHByb3AgPSB2aWV3LnNoLnR5ID09PSAndG0nID8gdmlldy5zaC5wcm9wIDogdmlldy5zaDtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXggPSBzaGFwZS5peDtcbiAgICAgIHByb3Aub3Iuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT3V0ZXIgUmFkaXVzJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHByb3Aub3Muc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT3V0ZXIgUm91bmRuZXNzJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHByb3AucHQuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUG9pbnRzJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHByb3AucC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQb3NpdGlvbicsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBwcm9wLnIuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUm90YXRpb24nLCBfcHJvcGVydHlHcm91cCkpO1xuXG4gICAgICBpZiAoc2hhcGUuaXIpIHtcbiAgICAgICAgcHJvcC5pci5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdJbm5lciBSYWRpdXMnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgICBwcm9wLmlzLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0lubmVyIFJvdW5kbmVzcycsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5wKVxuICAgICAgICB9LFxuICAgICAgICByb3RhdGlvbjoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AucilcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnRzOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5wdClcbiAgICAgICAgfSxcbiAgICAgICAgb3V0ZXJSYWRpdXM6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLm9yKVxuICAgICAgICB9LFxuICAgICAgICBvdXRlclJvdW5kbmVzczoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3Aub3MpXG4gICAgICAgIH0sXG4gICAgICAgIGlubmVyUmFkaXVzOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5pcilcbiAgICAgICAgfSxcbiAgICAgICAgaW5uZXJSb3VuZG5lc3M6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLmlzKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVjdEludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChzaGFwZS5wLml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wb3NpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5yLml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5yb3VuZG5lc3M7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUucy5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdTaXplJyB8fCB2YWx1ZSA9PT0gJ0FEQkUgVmVjdG9yIFJlY3QgU2l6ZScpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIHZhciBwcm9wID0gdmlldy5zaC50eSA9PT0gJ3RtJyA/IHZpZXcuc2gucHJvcCA6IHZpZXcuc2g7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuaXg7XG4gICAgICBwcm9wLnAuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUG9zaXRpb24nLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcHJvcC5zLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1NpemUnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcHJvcC5yLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1JvdGF0aW9uJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5wKVxuICAgICAgICB9LFxuICAgICAgICByb3VuZG5lc3M6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnIpXG4gICAgICAgIH0sXG4gICAgICAgIHNpemU6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnMpXG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubW4gPSBzaGFwZS5tbjtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3VuZGVkSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHNoYXBlLnIuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnUm91bmQgQ29ybmVycyAxJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5yYWRpdXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuXG4gICAgICB2YXIgcHJvcCA9IHZpZXc7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuaXg7XG4gICAgICBwcm9wLnJkLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1JhZGl1cycsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICByYWRpdXM6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnJkKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVwZWF0ZXJJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoc2hhcGUuYy5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdDb3BpZXMnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmNvcGllcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5vLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ09mZnNldCcpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgdmFyIHByb3AgPSB2aWV3O1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleCA9IHNoYXBlLml4O1xuICAgICAgcHJvcC5jLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0NvcGllcycsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBwcm9wLm8uc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT2Zmc2V0JywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIGNvcGllczoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AuYylcbiAgICAgICAgfSxcbiAgICAgICAgb2Zmc2V0OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5vKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzaGFwZXMsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHZhciBpbnRlcmZhY2VzO1xuXG4gICAgICBmdW5jdGlvbiBfaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSB1bmRlZmluZWQgPyAxIDogdmFsdWU7XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eUdyb3VwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VzW3ZhbHVlIC0gMV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSBpbnRlcmZhY2VzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgIGlmIChpbnRlcmZhY2VzW2ldLl9uYW1lID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGludGVyZmFjZXNbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBhcmVudEdyb3VwV3JhcHBlcigpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5R3JvdXA7XG4gICAgICB9XG5cbiAgICAgIF9pbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoX2ludGVyZmFjZUZ1bmN0aW9uLCBwYXJlbnRHcm91cFdyYXBwZXIpO1xuICAgICAgaW50ZXJmYWNlcyA9IGl0ZXJhdGVFbGVtZW50cyhzaGFwZXMsIHZpZXcsIF9pbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwKTtcbiAgICAgIF9pbnRlcmZhY2VGdW5jdGlvbi5udW1Qcm9wZXJ0aWVzID0gaW50ZXJmYWNlcy5sZW5ndGg7XG4gICAgICBfaW50ZXJmYWNlRnVuY3Rpb24uX25hbWUgPSAnQ29udGVudHMnO1xuICAgICAgcmV0dXJuIF9pbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIFRleHRFeHByZXNzaW9uSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgdmFyIF9zb3VyY2VUZXh0O1xuXG4gICAgICBmdW5jdGlvbiBfdGhpc0xheWVyRnVuY3Rpb24obmFtZSkge1xuICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICBjYXNlICdBREJFIFRleHQgRG9jdW1lbnQnOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbi5zb3VyY2VUZXh0O1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0xheWVyRnVuY3Rpb24sICdzb3VyY2VUZXh0Jywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICBlbGVtLnRleHRQcm9wZXJ0eS5nZXRWYWx1ZSgpO1xuICAgICAgICAgIHZhciBzdHJpbmdWYWx1ZSA9IGVsZW0udGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLnQ7XG5cbiAgICAgICAgICBpZiAoIV9zb3VyY2VUZXh0IHx8IHN0cmluZ1ZhbHVlICE9PSBfc291cmNlVGV4dC52YWx1ZSkge1xuICAgICAgICAgICAgX3NvdXJjZVRleHQgPSBuZXcgU3RyaW5nKHN0cmluZ1ZhbHVlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcbiAgICAgICAgICAgIC8vIElmIHN0cmluZ1ZhbHVlIGlzIGFuIGVtcHR5IHN0cmluZywgZXZhbCByZXR1cm5zIHVuZGVmaW5lZCwgc28gaXQgaGFzIHRvIGJlIHJldHVybmVkIGFzIGEgU3RyaW5nIHByaW1pdGl2ZVxuXG4gICAgICAgICAgICBfc291cmNlVGV4dC52YWx1ZSA9IHN0cmluZ1ZhbHVlIHx8IG5ldyBTdHJpbmcoc3RyaW5nVmFsdWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3NvdXJjZVRleHQsICdzdHlsZScsIHtcbiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogZWxlbS50ZXh0UHJvcGVydHkuY3VycmVudERhdGEuZmNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gX3NvdXJjZVRleHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4gIHZhciBGb290YWdlSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvdXRsaW5lSW50ZXJmYWNlRmFjdG9yeSA9IGZ1bmN0aW9uIG91dGxpbmVJbnRlcmZhY2VGYWN0b3J5KGVsZW0pIHtcbiAgICAgIHZhciBjdXJyZW50UHJvcGVydHlOYW1lID0gJyc7XG4gICAgICB2YXIgY3VycmVudFByb3BlcnR5ID0gZWxlbS5nZXRGb290YWdlRGF0YSgpO1xuXG4gICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICBjdXJyZW50UHJvcGVydHlOYW1lID0gJyc7XG4gICAgICAgIGN1cnJlbnRQcm9wZXJ0eSA9IGVsZW0uZ2V0Rm9vdGFnZURhdGEoKTtcbiAgICAgICAgcmV0dXJuIHNlYXJjaFByb3BlcnR5O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZWFyY2hQcm9wZXJ0eSh2YWx1ZSkge1xuICAgICAgICBpZiAoY3VycmVudFByb3BlcnR5W3ZhbHVlXSkge1xuICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0eU5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICBjdXJyZW50UHJvcGVydHkgPSBjdXJyZW50UHJvcGVydHlbdmFsdWVdO1xuXG4gICAgICAgICAgaWYgKF90eXBlb2YoY3VycmVudFByb3BlcnR5KSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWFyY2hQcm9wZXJ0eTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY3VycmVudFByb3BlcnR5O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb3BlcnR5TmFtZUluZGV4ID0gdmFsdWUuaW5kZXhPZihjdXJyZW50UHJvcGVydHlOYW1lKTtcblxuICAgICAgICBpZiAocHJvcGVydHlOYW1lSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQodmFsdWUuc3Vic3RyKHByb3BlcnR5TmFtZUluZGV4ICsgY3VycmVudFByb3BlcnR5TmFtZS5sZW5ndGgpLCAxMCk7XG4gICAgICAgICAgY3VycmVudFByb3BlcnR5ID0gY3VycmVudFByb3BlcnR5W2luZGV4XTtcblxuICAgICAgICAgIGlmIChfdHlwZW9mKGN1cnJlbnRQcm9wZXJ0eSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VhcmNoUHJvcGVydHk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9wZXJ0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluaXQ7XG4gICAgfTtcblxuICAgIHZhciBkYXRhSW50ZXJmYWNlRmFjdG9yeSA9IGZ1bmN0aW9uIGRhdGFJbnRlcmZhY2VGYWN0b3J5KGVsZW0pIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJ091dGxpbmUnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm91dGxpbmVJbnRlcmZhY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5fbmFtZSA9ICdPdXRsaW5lJztcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm91dGxpbmVJbnRlcmZhY2UgPSBvdXRsaW5lSW50ZXJmYWNlRmFjdG9yeShlbGVtKTtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICBmdW5jdGlvbiBfaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnRGF0YScpIHtcbiAgICAgICAgICByZXR1cm4gX2ludGVyZmFjZUZ1bmN0aW9uLmRhdGFJbnRlcmZhY2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgX2ludGVyZmFjZUZ1bmN0aW9uLl9uYW1lID0gJ0RhdGEnO1xuICAgICAgX2ludGVyZmFjZUZ1bmN0aW9uLmRhdGFJbnRlcmZhY2UgPSBkYXRhSW50ZXJmYWNlRmFjdG9yeShlbGVtKTtcbiAgICAgIHJldHVybiBfaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBpbnRlcmZhY2VzID0ge1xuICAgIGxheWVyOiBMYXllckV4cHJlc3Npb25JbnRlcmZhY2UsXG4gICAgZWZmZWN0czogRWZmZWN0c0V4cHJlc3Npb25JbnRlcmZhY2UsXG4gICAgY29tcDogQ29tcEV4cHJlc3Npb25JbnRlcmZhY2UsXG4gICAgc2hhcGU6IFNoYXBlRXhwcmVzc2lvbkludGVyZmFjZSxcbiAgICB0ZXh0OiBUZXh0RXhwcmVzc2lvbkludGVyZmFjZSxcbiAgICBmb290YWdlOiBGb290YWdlSW50ZXJmYWNlXG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0SW50ZXJmYWNlKHR5cGUpIHtcbiAgICByZXR1cm4gaW50ZXJmYWNlc1t0eXBlXSB8fCBudWxsO1xuICB9XG5cbiAgdmFyIGV4cHJlc3Npb25IZWxwZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHNlYXJjaEV4cHJlc3Npb25zKGVsZW0sIGRhdGEsIHByb3ApIHtcbiAgICAgIGlmIChkYXRhLngpIHtcbiAgICAgICAgcHJvcC5rID0gdHJ1ZTtcbiAgICAgICAgcHJvcC54ID0gdHJ1ZTtcbiAgICAgICAgcHJvcC5pbml0aWF0ZUV4cHJlc3Npb24gPSBFeHByZXNzaW9uTWFuYWdlci5pbml0aWF0ZUV4cHJlc3Npb247XG4gICAgICAgIHByb3AuZWZmZWN0c1NlcXVlbmNlLnB1c2gocHJvcC5pbml0aWF0ZUV4cHJlc3Npb24oZWxlbSwgZGF0YSwgcHJvcCkuYmluZChwcm9wKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VmFsdWVBdFRpbWUoZnJhbWVOdW0pIHtcbiAgICAgIGZyYW1lTnVtICo9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgIGZyYW1lTnVtIC09IHRoaXMub2Zmc2V0VGltZTtcblxuICAgICAgaWYgKGZyYW1lTnVtICE9PSB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RGcmFtZSkge1xuICAgICAgICB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RJbmRleCA9IHRoaXMuX2NhY2hpbmdBdFRpbWUubGFzdEZyYW1lIDwgZnJhbWVOdW0gPyB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RJbmRleCA6IDA7XG4gICAgICAgIHRoaXMuX2NhY2hpbmdBdFRpbWUudmFsdWUgPSB0aGlzLmludGVycG9sYXRlVmFsdWUoZnJhbWVOdW0sIHRoaXMuX2NhY2hpbmdBdFRpbWUpO1xuICAgICAgICB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RGcmFtZSA9IGZyYW1lTnVtO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGluZ0F0VGltZS52YWx1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTcGVlZEF0VGltZShmcmFtZU51bSkge1xuICAgICAgdmFyIGRlbHRhID0gLTAuMDE7XG4gICAgICB2YXIgdjEgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGZyYW1lTnVtKTtcbiAgICAgIHZhciB2MiA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoZnJhbWVOdW0gKyBkZWx0YSk7XG4gICAgICB2YXIgc3BlZWQgPSAwO1xuXG4gICAgICBpZiAodjEubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB2MS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHNwZWVkICs9IE1hdGgucG93KHYyW2ldIC0gdjFbaV0sIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3BlZWQgPSBNYXRoLnNxcnQoc3BlZWQpICogMTAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BlZWQgPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3BlZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VmVsb2NpdHlBdFRpbWUoZnJhbWVOdW0pIHtcbiAgICAgIGlmICh0aGlzLnZlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlbHRhID0gLTAuMDAxOyAvLyBmcmFtZU51bSArPSB0aGlzLmVsZW0uZGF0YS5zdDtcblxuICAgICAgdmFyIHYxID0gdGhpcy5nZXRWYWx1ZUF0VGltZShmcmFtZU51bSk7XG4gICAgICB2YXIgdjIgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGZyYW1lTnVtICsgZGVsdGEpO1xuICAgICAgdmFyIHZlbG9jaXR5O1xuXG4gICAgICBpZiAodjEubGVuZ3RoKSB7XG4gICAgICAgIHZlbG9jaXR5ID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIHYxLmxlbmd0aCk7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB2MS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIC8vIHJlbW92aW5nIGZyYW1lUmF0ZVxuICAgICAgICAgIC8vIGlmIG5lZWRlZCwgZG9uJ3QgYWRkIGl0IGhlcmVcbiAgICAgICAgICAvLyB2ZWxvY2l0eVtpXSA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lUmF0ZSooKHYyW2ldIC0gdjFbaV0pL2RlbHRhKTtcbiAgICAgICAgICB2ZWxvY2l0eVtpXSA9ICh2MltpXSAtIHYxW2ldKSAvIGRlbHRhO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2ZWxvY2l0eSA9ICh2MiAtIHYxKSAvIGRlbHRhO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmVsb2NpdHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3RhdGljVmFsdWVBdFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRHcm91cFByb3BlcnR5KHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHRoaXMucHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNlYXJjaEV4cHJlc3Npb25zOiBzZWFyY2hFeHByZXNzaW9ucyxcbiAgICAgIGdldFNwZWVkQXRUaW1lOiBnZXRTcGVlZEF0VGltZSxcbiAgICAgIGdldFZlbG9jaXR5QXRUaW1lOiBnZXRWZWxvY2l0eUF0VGltZSxcbiAgICAgIGdldFZhbHVlQXRUaW1lOiBnZXRWYWx1ZUF0VGltZSxcbiAgICAgIGdldFN0YXRpY1ZhbHVlQXRUaW1lOiBnZXRTdGF0aWNWYWx1ZUF0VGltZSxcbiAgICAgIHNldEdyb3VwUHJvcGVydHk6IHNldEdyb3VwUHJvcGVydHlcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gYWRkUHJvcGVydHlEZWNvcmF0b3IoKSB7XG4gICAgZnVuY3Rpb24gbG9vcE91dCh0eXBlLCBkdXJhdGlvbiwgZHVyYXRpb25GbGFnKSB7XG4gICAgICBpZiAoIXRoaXMuayB8fCAhdGhpcy5rZXlmcmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHY7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSB0eXBlID8gdHlwZS50b0xvd2VyQ2FzZSgpIDogJyc7XG4gICAgICB2YXIgY3VycmVudEZyYW1lID0gdGhpcy5jb21wLnJlbmRlcmVkRnJhbWU7XG4gICAgICB2YXIga2V5ZnJhbWVzID0gdGhpcy5rZXlmcmFtZXM7XG4gICAgICB2YXIgbGFzdEtleUZyYW1lID0ga2V5ZnJhbWVzW2tleWZyYW1lcy5sZW5ndGggLSAxXS50O1xuXG4gICAgICBpZiAoY3VycmVudEZyYW1lIDw9IGxhc3RLZXlGcmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN5Y2xlRHVyYXRpb247XG4gICAgICB2YXIgZmlyc3RLZXlGcmFtZTtcblxuICAgICAgaWYgKCFkdXJhdGlvbkZsYWcpIHtcbiAgICAgICAgaWYgKCFkdXJhdGlvbiB8fCBkdXJhdGlvbiA+IGtleWZyYW1lcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgZHVyYXRpb24gPSBrZXlmcmFtZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpcnN0S2V5RnJhbWUgPSBrZXlmcmFtZXNba2V5ZnJhbWVzLmxlbmd0aCAtIDEgLSBkdXJhdGlvbl0udDtcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGxhc3RLZXlGcmFtZSAtIGZpcnN0S2V5RnJhbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgICAgY3ljbGVEdXJhdGlvbiA9IE1hdGgubWF4KDAsIGxhc3RLZXlGcmFtZSAtIHRoaXMuZWxlbS5kYXRhLmlwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjeWNsZUR1cmF0aW9uID0gTWF0aC5hYnMobGFzdEtleUZyYW1lIC0gdGhpcy5lbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUgKiBkdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBmaXJzdEtleUZyYW1lID0gbGFzdEtleUZyYW1lIC0gY3ljbGVEdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuO1xuICAgICAgdmFyIHJldDtcblxuICAgICAgaWYgKHR5cGUgPT09ICdwaW5ncG9uZycpIHtcbiAgICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBNYXRoLmZsb29yKChjdXJyZW50RnJhbWUgLSBmaXJzdEtleUZyYW1lKSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgIGlmIChpdGVyYXRpb25zICUgMiAhPT0gMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlQXRUaW1lKChjeWNsZUR1cmF0aW9uIC0gKGN1cnJlbnRGcmFtZSAtIGZpcnN0S2V5RnJhbWUpICUgY3ljbGVEdXJhdGlvbiArIGZpcnN0S2V5RnJhbWUpIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvZmZzZXQnKSB7XG4gICAgICAgIHZhciBpbml0ViA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoZmlyc3RLZXlGcmFtZSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7XG4gICAgICAgIHZhciBlbmRWID0gdGhpcy5nZXRWYWx1ZUF0VGltZShsYXN0S2V5RnJhbWUgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoKChjdXJyZW50RnJhbWUgLSBmaXJzdEtleUZyYW1lKSAlIGN5Y2xlRHVyYXRpb24gKyBmaXJzdEtleUZyYW1lKSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgICB2YXIgcmVwZWF0cyA9IE1hdGguZmxvb3IoKGN1cnJlbnRGcmFtZSAtIGZpcnN0S2V5RnJhbWUpIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKHRoaXMucHYubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0ID0gbmV3IEFycmF5KGluaXRWLmxlbmd0aCk7XG4gICAgICAgICAgbGVuID0gcmV0Lmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgcmV0W2ldID0gKGVuZFZbaV0gLSBpbml0VltpXSkgKiByZXBlYXRzICsgY3VycmVudFtpXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChlbmRWIC0gaW5pdFYpICogcmVwZWF0cyArIGN1cnJlbnQ7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjb250aW51ZScpIHtcbiAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUobGFzdEtleUZyYW1lIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgdmFyIG5leHRMYXN0VmFsdWUgPSB0aGlzLmdldFZhbHVlQXRUaW1lKChsYXN0S2V5RnJhbWUgLSAwLjAwMSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuXG4gICAgICAgIGlmICh0aGlzLnB2Lmxlbmd0aCkge1xuICAgICAgICAgIHJldCA9IG5ldyBBcnJheShsYXN0VmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICBsZW4gPSByZXQubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICByZXRbaV0gPSBsYXN0VmFsdWVbaV0gKyAobGFzdFZhbHVlW2ldIC0gbmV4dExhc3RWYWx1ZVtpXSkgKiAoKGN1cnJlbnRGcmFtZSAtIGxhc3RLZXlGcmFtZSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUpIC8gMC4wMDA1OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYXN0VmFsdWUgKyAobGFzdFZhbHVlIC0gbmV4dExhc3RWYWx1ZSkgKiAoKGN1cnJlbnRGcmFtZSAtIGxhc3RLZXlGcmFtZSkgLyAwLjAwMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlQXRUaW1lKCgoY3VycmVudEZyYW1lIC0gZmlyc3RLZXlGcmFtZSkgJSBjeWNsZUR1cmF0aW9uICsgZmlyc3RLZXlGcmFtZSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9vcEluKHR5cGUsIGR1cmF0aW9uLCBkdXJhdGlvbkZsYWcpIHtcbiAgICAgIGlmICghdGhpcy5rKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB2O1xuICAgICAgfVxuXG4gICAgICB0eXBlID0gdHlwZSA/IHR5cGUudG9Mb3dlckNhc2UoKSA6ICcnO1xuICAgICAgdmFyIGN1cnJlbnRGcmFtZSA9IHRoaXMuY29tcC5yZW5kZXJlZEZyYW1lO1xuICAgICAgdmFyIGtleWZyYW1lcyA9IHRoaXMua2V5ZnJhbWVzO1xuICAgICAgdmFyIGZpcnN0S2V5RnJhbWUgPSBrZXlmcmFtZXNbMF0udDtcblxuICAgICAgaWYgKGN1cnJlbnRGcmFtZSA+PSBmaXJzdEtleUZyYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB2O1xuICAgICAgfVxuXG4gICAgICB2YXIgY3ljbGVEdXJhdGlvbjtcbiAgICAgIHZhciBsYXN0S2V5RnJhbWU7XG5cbiAgICAgIGlmICghZHVyYXRpb25GbGFnKSB7XG4gICAgICAgIGlmICghZHVyYXRpb24gfHwgZHVyYXRpb24gPiBrZXlmcmFtZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGR1cmF0aW9uID0ga2V5ZnJhbWVzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0S2V5RnJhbWUgPSBrZXlmcmFtZXNbZHVyYXRpb25dLnQ7XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBsYXN0S2V5RnJhbWUgLSBmaXJzdEtleUZyYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICAgIGN5Y2xlRHVyYXRpb24gPSBNYXRoLm1heCgwLCB0aGlzLmVsZW0uZGF0YS5vcCAtIGZpcnN0S2V5RnJhbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN5Y2xlRHVyYXRpb24gPSBNYXRoLmFicyh0aGlzLmVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSAqIGR1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RLZXlGcmFtZSA9IGZpcnN0S2V5RnJhbWUgKyBjeWNsZUR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW47XG4gICAgICB2YXIgcmV0O1xuXG4gICAgICBpZiAodHlwZSA9PT0gJ3Bpbmdwb25nJykge1xuICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IE1hdGguZmxvb3IoKGZpcnN0S2V5RnJhbWUgLSBjdXJyZW50RnJhbWUpIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbnMgJSAyID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVBdFRpbWUoKChmaXJzdEtleUZyYW1lIC0gY3VycmVudEZyYW1lKSAlIGN5Y2xlRHVyYXRpb24gKyBmaXJzdEtleUZyYW1lKSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2Zmc2V0Jykge1xuICAgICAgICB2YXIgaW5pdFYgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGZpcnN0S2V5RnJhbWUgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuICAgICAgICB2YXIgZW5kViA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUobGFzdEtleUZyYW1lIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdldFZhbHVlQXRUaW1lKChjeWNsZUR1cmF0aW9uIC0gKGZpcnN0S2V5RnJhbWUgLSBjdXJyZW50RnJhbWUpICUgY3ljbGVEdXJhdGlvbiArIGZpcnN0S2V5RnJhbWUpIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgdmFyIHJlcGVhdHMgPSBNYXRoLmZsb29yKChmaXJzdEtleUZyYW1lIC0gY3VycmVudEZyYW1lKSAvIGN5Y2xlRHVyYXRpb24pICsgMTtcblxuICAgICAgICBpZiAodGhpcy5wdi5sZW5ndGgpIHtcbiAgICAgICAgICByZXQgPSBuZXcgQXJyYXkoaW5pdFYubGVuZ3RoKTtcbiAgICAgICAgICBsZW4gPSByZXQubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICByZXRbaV0gPSBjdXJyZW50W2ldIC0gKGVuZFZbaV0gLSBpbml0VltpXSkgKiByZXBlYXRzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3VycmVudCAtIChlbmRWIC0gaW5pdFYpICogcmVwZWF0cztcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2NvbnRpbnVlJykge1xuICAgICAgICB2YXIgZmlyc3RWYWx1ZSA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoZmlyc3RLZXlGcmFtZSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7XG4gICAgICAgIHZhciBuZXh0Rmlyc3RWYWx1ZSA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoKGZpcnN0S2V5RnJhbWUgKyAwLjAwMSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuXG4gICAgICAgIGlmICh0aGlzLnB2Lmxlbmd0aCkge1xuICAgICAgICAgIHJldCA9IG5ldyBBcnJheShmaXJzdFZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgbGVuID0gcmV0Lmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgcmV0W2ldID0gZmlyc3RWYWx1ZVtpXSArIChmaXJzdFZhbHVlW2ldIC0gbmV4dEZpcnN0VmFsdWVbaV0pICogKGZpcnN0S2V5RnJhbWUgLSBjdXJyZW50RnJhbWUpIC8gMC4wMDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaXJzdFZhbHVlICsgKGZpcnN0VmFsdWUgLSBuZXh0Rmlyc3RWYWx1ZSkgKiAoZmlyc3RLZXlGcmFtZSAtIGN1cnJlbnRGcmFtZSkgLyAwLjAwMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVBdFRpbWUoKGN5Y2xlRHVyYXRpb24gLSAoKGZpcnN0S2V5RnJhbWUgLSBjdXJyZW50RnJhbWUpICUgY3ljbGVEdXJhdGlvbiArIGZpcnN0S2V5RnJhbWUpKSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzbW9vdGgod2lkdGgsIHNhbXBsZXMpIHtcbiAgICAgIGlmICghdGhpcy5rKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB2O1xuICAgICAgfVxuXG4gICAgICB3aWR0aCA9ICh3aWR0aCB8fCAwLjQpICogMC41O1xuICAgICAgc2FtcGxlcyA9IE1hdGguZmxvb3Ioc2FtcGxlcyB8fCA1KTtcblxuICAgICAgaWYgKHNhbXBsZXMgPD0gMSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gdGhpcy5jb21wLnJlbmRlcmVkRnJhbWUgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICB2YXIgaW5pdEZyYW1lID0gY3VycmVudFRpbWUgLSB3aWR0aDtcbiAgICAgIHZhciBlbmRGcmFtZSA9IGN1cnJlbnRUaW1lICsgd2lkdGg7XG4gICAgICB2YXIgc2FtcGxlRnJlcXVlbmN5ID0gc2FtcGxlcyA+IDEgPyAoZW5kRnJhbWUgLSBpbml0RnJhbWUpIC8gKHNhbXBsZXMgLSAxKSA6IDE7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgaiA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIGlmICh0aGlzLnB2Lmxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCB0aGlzLnB2Lmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBzYW1wbGVWYWx1ZTtcblxuICAgICAgd2hpbGUgKGkgPCBzYW1wbGVzKSB7XG4gICAgICAgIHNhbXBsZVZhbHVlID0gdGhpcy5nZXRWYWx1ZUF0VGltZShpbml0RnJhbWUgKyBpICogc2FtcGxlRnJlcXVlbmN5KTtcblxuICAgICAgICBpZiAodGhpcy5wdi5sZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5wdi5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgdmFsdWVbal0gKz0gc2FtcGxlVmFsdWVbal07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlICs9IHNhbXBsZVZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wdi5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IHRoaXMucHYubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICB2YWx1ZVtqXSAvPSBzYW1wbGVzO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSAvPSBzYW1wbGVzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VHJhbnNmb3JtVmFsdWVBdFRpbWUodGltZSkge1xuICAgICAgaWYgKCF0aGlzLl90cmFuc2Zvcm1DYWNoaW5nQXRUaW1lKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zZm9ybUNhY2hpbmdBdFRpbWUgPSB7XG4gICAgICAgICAgdjogbmV3IE1hdHJpeCgpXG4gICAgICAgIH07XG4gICAgICB9IC8vLyAvXG5cblxuICAgICAgdmFyIG1hdHJpeCA9IHRoaXMuX3RyYW5zZm9ybUNhY2hpbmdBdFRpbWUudjtcbiAgICAgIG1hdHJpeC5jbG9uZUZyb21Qcm9wcyh0aGlzLnByZS5wcm9wcyk7XG5cbiAgICAgIGlmICh0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPCAxKSB7XG4gICAgICAgIHZhciBhbmNob3IgPSB0aGlzLmEuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIG1hdHJpeC50cmFuc2xhdGUoLWFuY2hvclswXSAqIHRoaXMuYS5tdWx0LCAtYW5jaG9yWzFdICogdGhpcy5hLm11bHQsIGFuY2hvclsyXSAqIHRoaXMuYS5tdWx0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDIpIHtcbiAgICAgICAgdmFyIHNjYWxlID0gdGhpcy5zLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICBtYXRyaXguc2NhbGUoc2NhbGVbMF0gKiB0aGlzLnMubXVsdCwgc2NhbGVbMV0gKiB0aGlzLnMubXVsdCwgc2NhbGVbMl0gKiB0aGlzLnMubXVsdCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNrICYmIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDMpIHtcbiAgICAgICAgdmFyIHNrZXcgPSB0aGlzLnNrLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICB2YXIgc2tld0F4aXMgPSB0aGlzLnNhLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICBtYXRyaXguc2tld0Zyb21BeGlzKC1za2V3ICogdGhpcy5zay5tdWx0LCBza2V3QXhpcyAqIHRoaXMuc2EubXVsdCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnIgJiYgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgNCkge1xuICAgICAgICB2YXIgcm90YXRpb24gPSB0aGlzLnIuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIG1hdHJpeC5yb3RhdGUoLXJvdGF0aW9uICogdGhpcy5yLm11bHQpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5yICYmIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDQpIHtcbiAgICAgICAgdmFyIHJvdGF0aW9uWiA9IHRoaXMucnouZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIHZhciByb3RhdGlvblkgPSB0aGlzLnJ5LmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICB2YXIgcm90YXRpb25YID0gdGhpcy5yeC5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgdmFyIG9yaWVudGF0aW9uID0gdGhpcy5vci5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgbWF0cml4LnJvdGF0ZVooLXJvdGF0aW9uWiAqIHRoaXMucnoubXVsdCkucm90YXRlWShyb3RhdGlvblkgKiB0aGlzLnJ5Lm11bHQpLnJvdGF0ZVgocm90YXRpb25YICogdGhpcy5yeC5tdWx0KS5yb3RhdGVaKC1vcmllbnRhdGlvblsyXSAqIHRoaXMub3IubXVsdCkucm90YXRlWShvcmllbnRhdGlvblsxXSAqIHRoaXMub3IubXVsdCkucm90YXRlWChvcmllbnRhdGlvblswXSAqIHRoaXMub3IubXVsdCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEucCAmJiB0aGlzLmRhdGEucC5zKSB7XG4gICAgICAgIHZhciBwb3NpdGlvblggPSB0aGlzLnB4LmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICB2YXIgcG9zaXRpb25ZID0gdGhpcy5weS5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcblxuICAgICAgICBpZiAodGhpcy5kYXRhLnAueikge1xuICAgICAgICAgIHZhciBwb3NpdGlvblogPSB0aGlzLnB6LmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICAgIG1hdHJpeC50cmFuc2xhdGUocG9zaXRpb25YICogdGhpcy5weC5tdWx0LCBwb3NpdGlvblkgKiB0aGlzLnB5Lm11bHQsIC1wb3NpdGlvblogKiB0aGlzLnB6Lm11bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdHJpeC50cmFuc2xhdGUocG9zaXRpb25YICogdGhpcy5weC5tdWx0LCBwb3NpdGlvblkgKiB0aGlzLnB5Lm11bHQsIDApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLnAuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIG1hdHJpeC50cmFuc2xhdGUocG9zaXRpb25bMF0gKiB0aGlzLnAubXVsdCwgcG9zaXRpb25bMV0gKiB0aGlzLnAubXVsdCwgLXBvc2l0aW9uWzJdICogdGhpcy5wLm11bHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF0cml4OyAvLy8gL1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFRyYW5zZm9ybVN0YXRpY1ZhbHVlQXRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMudi5jbG9uZShuZXcgTWF0cml4KCkpO1xuICAgIH1cblxuICAgIHZhciBnZXRUcmFuc2Zvcm1Qcm9wZXJ0eSA9IFRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeS5nZXRUcmFuc2Zvcm1Qcm9wZXJ0eTtcblxuICAgIFRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeS5nZXRUcmFuc2Zvcm1Qcm9wZXJ0eSA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhLCBjb250YWluZXIpIHtcbiAgICAgIHZhciBwcm9wID0gZ2V0VHJhbnNmb3JtUHJvcGVydHkoZWxlbSwgZGF0YSwgY29udGFpbmVyKTtcblxuICAgICAgaWYgKHByb3AuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgIHByb3AuZ2V0VmFsdWVBdFRpbWUgPSBnZXRUcmFuc2Zvcm1WYWx1ZUF0VGltZS5iaW5kKHByb3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvcC5nZXRWYWx1ZUF0VGltZSA9IGdldFRyYW5zZm9ybVN0YXRpY1ZhbHVlQXRUaW1lLmJpbmQocHJvcCk7XG4gICAgICB9XG5cbiAgICAgIHByb3Auc2V0R3JvdXBQcm9wZXJ0eSA9IGV4cHJlc3Npb25IZWxwZXJzLnNldEdyb3VwUHJvcGVydHk7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9O1xuXG4gICAgdmFyIHByb3BlcnR5R2V0UHJvcCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wO1xuXG4gICAgUHJvcGVydHlGYWN0b3J5LmdldFByb3AgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSwgdHlwZSwgbXVsdCwgY29udGFpbmVyKSB7XG4gICAgICB2YXIgcHJvcCA9IHByb3BlcnR5R2V0UHJvcChlbGVtLCBkYXRhLCB0eXBlLCBtdWx0LCBjb250YWluZXIpOyAvLyBwcm9wLmdldFZlbG9jaXR5QXRUaW1lID0gZ2V0VmVsb2NpdHlBdFRpbWU7XG4gICAgICAvLyBwcm9wLmxvb3BPdXQgPSBsb29wT3V0O1xuICAgICAgLy8gcHJvcC5sb29wSW4gPSBsb29wSW47XG5cbiAgICAgIGlmIChwcm9wLmtmKSB7XG4gICAgICAgIHByb3AuZ2V0VmFsdWVBdFRpbWUgPSBleHByZXNzaW9uSGVscGVycy5nZXRWYWx1ZUF0VGltZS5iaW5kKHByb3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvcC5nZXRWYWx1ZUF0VGltZSA9IGV4cHJlc3Npb25IZWxwZXJzLmdldFN0YXRpY1ZhbHVlQXRUaW1lLmJpbmQocHJvcCk7XG4gICAgICB9XG5cbiAgICAgIHByb3Auc2V0R3JvdXBQcm9wZXJ0eSA9IGV4cHJlc3Npb25IZWxwZXJzLnNldEdyb3VwUHJvcGVydHk7XG4gICAgICBwcm9wLmxvb3BPdXQgPSBsb29wT3V0O1xuICAgICAgcHJvcC5sb29wSW4gPSBsb29wSW47XG4gICAgICBwcm9wLnNtb290aCA9IHNtb290aDtcbiAgICAgIHByb3AuZ2V0VmVsb2NpdHlBdFRpbWUgPSBleHByZXNzaW9uSGVscGVycy5nZXRWZWxvY2l0eUF0VGltZS5iaW5kKHByb3ApO1xuICAgICAgcHJvcC5nZXRTcGVlZEF0VGltZSA9IGV4cHJlc3Npb25IZWxwZXJzLmdldFNwZWVkQXRUaW1lLmJpbmQocHJvcCk7XG4gICAgICBwcm9wLm51bUtleXMgPSBkYXRhLmEgPT09IDEgPyBkYXRhLmsubGVuZ3RoIDogMDtcbiAgICAgIHByb3AucHJvcGVydHlJbmRleCA9IGRhdGEuaXg7XG4gICAgICB2YXIgdmFsdWUgPSAwO1xuXG4gICAgICBpZiAodHlwZSAhPT0gMCkge1xuICAgICAgICB2YWx1ZSA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBkYXRhLmEgPT09IDEgPyBkYXRhLmtbMF0ucy5sZW5ndGggOiBkYXRhLmsubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgcHJvcC5fY2FjaGluZ0F0VGltZSA9IHtcbiAgICAgICAgbGFzdEZyYW1lOiBpbml0aWFsRGVmYXVsdEZyYW1lLFxuICAgICAgICBsYXN0SW5kZXg6IDAsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfTtcbiAgICAgIGV4cHJlc3Npb25IZWxwZXJzLnNlYXJjaEV4cHJlc3Npb25zKGVsZW0sIGRhdGEsIHByb3ApO1xuXG4gICAgICBpZiAocHJvcC5rKSB7XG4gICAgICAgIGNvbnRhaW5lci5hZGREeW5hbWljUHJvcGVydHkocHJvcCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRTaGFwZVZhbHVlQXRUaW1lKGZyYW1lTnVtKSB7XG4gICAgICAvLyBGb3Igbm93IHRoaXMgY2FjaGluZyBvYmplY3QgaXMgY3JlYXRlZCBvbmx5IHdoZW4gbmVlZGVkIGluc3RlYWQgb2YgY3JlYXRpbmcgaXQgd2hlbiB0aGUgc2hhcGUgaXMgaW5pdGlhbGl6ZWQuXG4gICAgICBpZiAoIXRoaXMuX2NhY2hpbmdBdFRpbWUpIHtcbiAgICAgICAgdGhpcy5fY2FjaGluZ0F0VGltZSA9IHtcbiAgICAgICAgICBzaGFwZVZhbHVlOiBzaGFwZVBvb2wuY2xvbmUodGhpcy5wdiksXG4gICAgICAgICAgbGFzdEluZGV4OiAwLFxuICAgICAgICAgIGxhc3RUaW1lOiBpbml0aWFsRGVmYXVsdEZyYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGZyYW1lTnVtICo9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgIGZyYW1lTnVtIC09IHRoaXMub2Zmc2V0VGltZTtcblxuICAgICAgaWYgKGZyYW1lTnVtICE9PSB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RUaW1lKSB7XG4gICAgICAgIHRoaXMuX2NhY2hpbmdBdFRpbWUubGFzdEluZGV4ID0gdGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0VGltZSA8IGZyYW1lTnVtID8gdGhpcy5fY2FjaGluZy5sYXN0SW5kZXggOiAwO1xuICAgICAgICB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RUaW1lID0gZnJhbWVOdW07XG4gICAgICAgIHRoaXMuaW50ZXJwb2xhdGVTaGFwZShmcmFtZU51bSwgdGhpcy5fY2FjaGluZ0F0VGltZS5zaGFwZVZhbHVlLCB0aGlzLl9jYWNoaW5nQXRUaW1lKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2NhY2hpbmdBdFRpbWUuc2hhcGVWYWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24gPSBTaGFwZVByb3BlcnR5RmFjdG9yeS5nZXRDb25zdHJ1Y3RvckZ1bmN0aW9uKCk7XG4gICAgdmFyIEtleWZyYW1lZFNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uID0gU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0S2V5ZnJhbWVkQ29uc3RydWN0b3JGdW5jdGlvbigpO1xuXG4gICAgZnVuY3Rpb24gU2hhcGVFeHByZXNzaW9ucygpIHt9XG5cbiAgICBTaGFwZUV4cHJlc3Npb25zLnByb3RvdHlwZSA9IHtcbiAgICAgIHZlcnRpY2VzOiBmdW5jdGlvbiB2ZXJ0aWNlcyhwcm9wLCB0aW1lKSB7XG4gICAgICAgIGlmICh0aGlzLmspIHtcbiAgICAgICAgICB0aGlzLmdldFZhbHVlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hhcGVQYXRoID0gdGhpcy52O1xuXG4gICAgICAgIGlmICh0aW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzaGFwZVBhdGggPSB0aGlzLmdldFZhbHVlQXRUaW1lKHRpbWUsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSBzaGFwZVBhdGguX2xlbmd0aDtcbiAgICAgICAgdmFyIHZlcnRpY2VzID0gc2hhcGVQYXRoW3Byb3BdO1xuICAgICAgICB2YXIgcG9pbnRzID0gc2hhcGVQYXRoLnY7XG4gICAgICAgIHZhciBhcnIgPSBjcmVhdGVTaXplZEFycmF5KGxlbik7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHByb3AgPT09ICdpJyB8fCBwcm9wID09PSAnbycpIHtcbiAgICAgICAgICAgIGFycltpXSA9IFt2ZXJ0aWNlc1tpXVswXSAtIHBvaW50c1tpXVswXSwgdmVydGljZXNbaV1bMV0gLSBwb2ludHNbaV1bMV1dO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJbaV0gPSBbdmVydGljZXNbaV1bMF0sIHZlcnRpY2VzW2ldWzFdXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfSxcbiAgICAgIHBvaW50czogZnVuY3Rpb24gcG9pbnRzKHRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVydGljZXMoJ3YnLCB0aW1lKTtcbiAgICAgIH0sXG4gICAgICBpblRhbmdlbnRzOiBmdW5jdGlvbiBpblRhbmdlbnRzKHRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVydGljZXMoJ2knLCB0aW1lKTtcbiAgICAgIH0sXG4gICAgICBvdXRUYW5nZW50czogZnVuY3Rpb24gb3V0VGFuZ2VudHModGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0aWNlcygnbycsIHRpbWUpO1xuICAgICAgfSxcbiAgICAgIGlzQ2xvc2VkOiBmdW5jdGlvbiBpc0Nsb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudi5jO1xuICAgICAgfSxcbiAgICAgIHBvaW50T25QYXRoOiBmdW5jdGlvbiBwb2ludE9uUGF0aChwZXJjLCB0aW1lKSB7XG4gICAgICAgIHZhciBzaGFwZVBhdGggPSB0aGlzLnY7XG5cbiAgICAgICAgaWYgKHRpbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHNoYXBlUGF0aCA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUodGltZSwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX3NlZ21lbnRzTGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5fc2VnbWVudHNMZW5ndGggPSBiZXouZ2V0U2VnbWVudHNMZW5ndGgoc2hhcGVQYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWdtZW50c0xlbmd0aCA9IHRoaXMuX3NlZ21lbnRzTGVuZ3RoO1xuICAgICAgICB2YXIgbGVuZ3RocyA9IHNlZ21lbnRzTGVuZ3RoLmxlbmd0aHM7XG4gICAgICAgIHZhciBsZW5ndGhQb3MgPSBzZWdtZW50c0xlbmd0aC50b3RhbExlbmd0aCAqIHBlcmM7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbiA9IGxlbmd0aHMubGVuZ3RoO1xuICAgICAgICB2YXIgYWNjdW11bGF0ZWRMZW5ndGggPSAwO1xuICAgICAgICB2YXIgcHQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAoYWNjdW11bGF0ZWRMZW5ndGggKyBsZW5ndGhzW2ldLmFkZGVkTGVuZ3RoID4gbGVuZ3RoUG9zKSB7XG4gICAgICAgICAgICB2YXIgaW5pdEluZGV4ID0gaTtcbiAgICAgICAgICAgIHZhciBlbmRJbmRleCA9IHNoYXBlUGF0aC5jICYmIGkgPT09IGxlbiAtIDEgPyAwIDogaSArIDE7XG4gICAgICAgICAgICB2YXIgc2VnbWVudFBlcmMgPSAobGVuZ3RoUG9zIC0gYWNjdW11bGF0ZWRMZW5ndGgpIC8gbGVuZ3Roc1tpXS5hZGRlZExlbmd0aDtcbiAgICAgICAgICAgIHB0ID0gYmV6LmdldFBvaW50SW5TZWdtZW50KHNoYXBlUGF0aC52W2luaXRJbmRleF0sIHNoYXBlUGF0aC52W2VuZEluZGV4XSwgc2hhcGVQYXRoLm9baW5pdEluZGV4XSwgc2hhcGVQYXRoLmlbZW5kSW5kZXhdLCBzZWdtZW50UGVyYywgbGVuZ3Roc1tpXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjdW11bGF0ZWRMZW5ndGggKz0gbGVuZ3Roc1tpXS5hZGRlZExlbmd0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXB0KSB7XG4gICAgICAgICAgcHQgPSBzaGFwZVBhdGguYyA/IFtzaGFwZVBhdGgudlswXVswXSwgc2hhcGVQYXRoLnZbMF1bMV1dIDogW3NoYXBlUGF0aC52W3NoYXBlUGF0aC5fbGVuZ3RoIC0gMV1bMF0sIHNoYXBlUGF0aC52W3NoYXBlUGF0aC5fbGVuZ3RoIC0gMV1bMV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHB0O1xuICAgICAgfSxcbiAgICAgIHZlY3Rvck9uUGF0aDogZnVuY3Rpb24gdmVjdG9yT25QYXRoKHBlcmMsIHRpbWUsIHZlY3RvclR5cGUpIHtcbiAgICAgICAgLy8gcGVyYyBkb2Vzbid0IHVzZSB0cmlwbGUgZXF1YWxpdHkgYmVjYXVzZSBpdCBjYW4gYmUgYSBOdW1iZXIgb2JqZWN0IGFzIHdlbGwgYXMgYSBwcmltaXRpdmUuXG4gICAgICAgIGlmIChwZXJjID09IDEpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICAgIHBlcmMgPSB0aGlzLnYuYztcbiAgICAgICAgfSBlbHNlIGlmIChwZXJjID09IDApIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICAgIHBlcmMgPSAwLjk5OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwdDEgPSB0aGlzLnBvaW50T25QYXRoKHBlcmMsIHRpbWUpO1xuICAgICAgICB2YXIgcHQyID0gdGhpcy5wb2ludE9uUGF0aChwZXJjICsgMC4wMDEsIHRpbWUpO1xuICAgICAgICB2YXIgeExlbmd0aCA9IHB0MlswXSAtIHB0MVswXTtcbiAgICAgICAgdmFyIHlMZW5ndGggPSBwdDJbMV0gLSBwdDFbMV07XG4gICAgICAgIHZhciBtYWduaXR1ZGUgPSBNYXRoLnNxcnQoTWF0aC5wb3coeExlbmd0aCwgMikgKyBNYXRoLnBvdyh5TGVuZ3RoLCAyKSk7XG5cbiAgICAgICAgaWYgKG1hZ25pdHVkZSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBbMCwgMF07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdW5pdFZlY3RvciA9IHZlY3RvclR5cGUgPT09ICd0YW5nZW50JyA/IFt4TGVuZ3RoIC8gbWFnbml0dWRlLCB5TGVuZ3RoIC8gbWFnbml0dWRlXSA6IFsteUxlbmd0aCAvIG1hZ25pdHVkZSwgeExlbmd0aCAvIG1hZ25pdHVkZV07XG4gICAgICAgIHJldHVybiB1bml0VmVjdG9yO1xuICAgICAgfSxcbiAgICAgIHRhbmdlbnRPblBhdGg6IGZ1bmN0aW9uIHRhbmdlbnRPblBhdGgocGVyYywgdGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZWN0b3JPblBhdGgocGVyYywgdGltZSwgJ3RhbmdlbnQnKTtcbiAgICAgIH0sXG4gICAgICBub3JtYWxPblBhdGg6IGZ1bmN0aW9uIG5vcm1hbE9uUGF0aChwZXJjLCB0aW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlY3Rvck9uUGF0aChwZXJjLCB0aW1lLCAnbm9ybWFsJyk7XG4gICAgICB9LFxuICAgICAgc2V0R3JvdXBQcm9wZXJ0eTogZXhwcmVzc2lvbkhlbHBlcnMuc2V0R3JvdXBQcm9wZXJ0eSxcbiAgICAgIGdldFZhbHVlQXRUaW1lOiBleHByZXNzaW9uSGVscGVycy5nZXRTdGF0aWNWYWx1ZUF0VGltZVxuICAgIH07XG4gICAgZXh0ZW5kUHJvdG90eXBlKFtTaGFwZUV4cHJlc3Npb25zXSwgU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24pO1xuICAgIGV4dGVuZFByb3RvdHlwZShbU2hhcGVFeHByZXNzaW9uc10sIEtleWZyYW1lZFNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uKTtcbiAgICBLZXlmcmFtZWRTaGFwZVByb3BlcnR5Q29uc3RydWN0b3JGdW5jdGlvbi5wcm90b3R5cGUuZ2V0VmFsdWVBdFRpbWUgPSBnZXRTaGFwZVZhbHVlQXRUaW1lO1xuICAgIEtleWZyYW1lZFNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uLnByb3RvdHlwZS5pbml0aWF0ZUV4cHJlc3Npb24gPSBFeHByZXNzaW9uTWFuYWdlci5pbml0aWF0ZUV4cHJlc3Npb247XG4gICAgdmFyIHByb3BlcnR5R2V0U2hhcGVQcm9wID0gU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wO1xuXG4gICAgU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEsIHR5cGUsIGFyciwgdHJpbXMpIHtcbiAgICAgIHZhciBwcm9wID0gcHJvcGVydHlHZXRTaGFwZVByb3AoZWxlbSwgZGF0YSwgdHlwZSwgYXJyLCB0cmltcyk7XG4gICAgICBwcm9wLnByb3BlcnR5SW5kZXggPSBkYXRhLml4O1xuICAgICAgcHJvcC5sb2NrID0gZmFsc2U7XG5cbiAgICAgIGlmICh0eXBlID09PSAzKSB7XG4gICAgICAgIGV4cHJlc3Npb25IZWxwZXJzLnNlYXJjaEV4cHJlc3Npb25zKGVsZW0sIGRhdGEucHQsIHByb3ApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSA0KSB7XG4gICAgICAgIGV4cHJlc3Npb25IZWxwZXJzLnNlYXJjaEV4cHJlc3Npb25zKGVsZW0sIGRhdGEua3MsIHByb3ApO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvcC5rKSB7XG4gICAgICAgIGVsZW0uYWRkRHluYW1pY1Byb3BlcnR5KHByb3ApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSQxKCkge1xuICAgIGFkZFByb3BlcnR5RGVjb3JhdG9yKCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGREZWNvcmF0b3IoKSB7XG4gICAgZnVuY3Rpb24gc2VhcmNoRXhwcmVzc2lvbnMoKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLmQueCkge1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZUV4cHJlc3Npb24gPSBFeHByZXNzaW9uTWFuYWdlci5pbml0aWF0ZUV4cHJlc3Npb24uYmluZCh0aGlzKSh0aGlzLmVsZW0sIHRoaXMuZGF0YS5kLCB0aGlzKTtcbiAgICAgICAgdGhpcy5hZGRFZmZlY3QodGhpcy5nZXRFeHByZXNzaW9uVmFsdWUuYmluZCh0aGlzKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmdldEV4cHJlc3Npb25WYWx1ZSA9IGZ1bmN0aW9uIChjdXJyZW50VmFsdWUsIHRleHQpIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IHRoaXMuY2FsY3VsYXRlRXhwcmVzc2lvbih0ZXh0KTtcblxuICAgICAgaWYgKGN1cnJlbnRWYWx1ZS50ICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgbmV3RGF0YSA9IHt9O1xuICAgICAgICB0aGlzLmNvcHlEYXRhKG5ld0RhdGEsIGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgIG5ld0RhdGEudCA9IG5ld1ZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIG5ld0RhdGEuX19jb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZTtcbiAgICB9O1xuXG4gICAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5zZWFyY2hQcm9wZXJ0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpc0tleWZyYW1lZCA9IHRoaXMuc2VhcmNoS2V5ZnJhbWVzKCk7XG4gICAgICB2YXIgaGFzRXhwcmVzc2lvbnMgPSB0aGlzLnNlYXJjaEV4cHJlc3Npb25zKCk7XG4gICAgICB0aGlzLmtmID0gaXNLZXlmcmFtZWQgfHwgaGFzRXhwcmVzc2lvbnM7XG4gICAgICByZXR1cm4gdGhpcy5rZjtcbiAgICB9O1xuXG4gICAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5zZWFyY2hFeHByZXNzaW9ucyA9IHNlYXJjaEV4cHJlc3Npb25zO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBhZGREZWNvcmF0b3IoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFNWR0NvbXBvc2FibGVFZmZlY3QoKSB7fVxuXG4gIFNWR0NvbXBvc2FibGVFZmZlY3QucHJvdG90eXBlID0ge1xuICAgIGNyZWF0ZU1lcmdlTm9kZTogZnVuY3Rpb24gY3JlYXRlTWVyZ2VOb2RlKHJlc3VsdElkLCBpbnMpIHtcbiAgICAgIHZhciBmZU1lcmdlID0gY3JlYXRlTlMoJ2ZlTWVyZ2UnKTtcbiAgICAgIGZlTWVyZ2Uuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCByZXN1bHRJZCk7XG4gICAgICB2YXIgZmVNZXJnZU5vZGU7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGlucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBmZU1lcmdlTm9kZSA9IGNyZWF0ZU5TKCdmZU1lcmdlTm9kZScpO1xuICAgICAgICBmZU1lcmdlTm9kZS5zZXRBdHRyaWJ1dGUoJ2luJywgaW5zW2ldKTtcbiAgICAgICAgZmVNZXJnZS5hcHBlbmRDaGlsZChmZU1lcmdlTm9kZSk7XG4gICAgICAgIGZlTWVyZ2UuYXBwZW5kQ2hpbGQoZmVNZXJnZU5vZGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmVNZXJnZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGxpbmVhckZpbHRlclZhbHVlID0gJzAuMzMzMyAwLjMzMzMgMC4zMzMzIDAgMCAwLjMzMzMgMC4zMzMzIDAuMzMzMyAwIDAgMC4zMzMzIDAuMzMzMyAwLjMzMzMgMCAwIDAgMCAwJztcblxuICBmdW5jdGlvbiBTVkdUaW50RmlsdGVyKGZpbHRlciwgZmlsdGVyTWFuYWdlciwgZWxlbSwgaWQsIHNvdXJjZSkge1xuICAgIHRoaXMuZmlsdGVyTWFuYWdlciA9IGZpbHRlck1hbmFnZXI7XG4gICAgdmFyIGZlQ29sb3JNYXRyaXggPSBjcmVhdGVOUygnZmVDb2xvck1hdHJpeCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd0eXBlJywgJ21hdHJpeCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnbGluZWFyUkdCJyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsIGxpbmVhckZpbHRlclZhbHVlICsgJyAxIDAnKTtcbiAgICB0aGlzLmxpbmVhckZpbHRlciA9IGZlQ29sb3JNYXRyaXg7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkICsgJ190aW50XzEnKTtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb2xvck1hdHJpeCk7XG4gICAgZmVDb2xvck1hdHJpeCA9IGNyZWF0ZU5TKCdmZUNvbG9yTWF0cml4Jyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnbWF0cml4Jyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdzUkdCJyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsICcxIDAgMCAwIDAgMCAxIDAgMCAwIDAgMCAxIDAgMCAwIDAgMCAxIDAnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgncmVzdWx0JywgaWQgKyAnX3RpbnRfMicpO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUNvbG9yTWF0cml4KTtcbiAgICB0aGlzLm1hdHJpeEZpbHRlciA9IGZlQ29sb3JNYXRyaXg7XG4gICAgdmFyIGZlTWVyZ2UgPSB0aGlzLmNyZWF0ZU1lcmdlTm9kZShpZCwgW3NvdXJjZSwgaWQgKyAnX3RpbnRfMScsIGlkICsgJ190aW50XzInXSk7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlTWVyZ2UpO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTVkdDb21wb3NhYmxlRWZmZWN0XSwgU1ZHVGludEZpbHRlcik7XG5cbiAgU1ZHVGludEZpbHRlci5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGYpIHtcbiAgICAgIHZhciBjb2xvckJsYWNrID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudjtcbiAgICAgIHZhciBjb2xvcldoaXRlID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzFdLnAudjtcbiAgICAgIHZhciBvcGFjaXR5ID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAudiAvIDEwMDtcbiAgICAgIHRoaXMubGluZWFyRmlsdGVyLnNldEF0dHJpYnV0ZSgndmFsdWVzJywgbGluZWFyRmlsdGVyVmFsdWUgKyAnICcgKyBvcGFjaXR5ICsgJyAwJyk7XG4gICAgICB0aGlzLm1hdHJpeEZpbHRlci5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsIGNvbG9yV2hpdGVbMF0gLSBjb2xvckJsYWNrWzBdICsgJyAwIDAgMCAnICsgY29sb3JCbGFja1swXSArICcgJyArIChjb2xvcldoaXRlWzFdIC0gY29sb3JCbGFja1sxXSkgKyAnIDAgMCAwICcgKyBjb2xvckJsYWNrWzFdICsgJyAnICsgKGNvbG9yV2hpdGVbMl0gLSBjb2xvckJsYWNrWzJdKSArICcgMCAwIDAgJyArIGNvbG9yQmxhY2tbMl0gKyAnIDAgMCAwIDEgMCcpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBTVkdGaWxsRmlsdGVyKGZpbHRlciwgZmlsdGVyTWFuYWdlciwgZWxlbSwgaWQpIHtcbiAgICB0aGlzLmZpbHRlck1hbmFnZXIgPSBmaWx0ZXJNYW5hZ2VyO1xuICAgIHZhciBmZUNvbG9yTWF0cml4ID0gY3JlYXRlTlMoJ2ZlQ29sb3JNYXRyaXgnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndHlwZScsICdtYXRyaXgnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ3NSR0InKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndmFsdWVzJywgJzEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEgMCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCk7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29sb3JNYXRyaXgpO1xuICAgIHRoaXMubWF0cml4RmlsdGVyID0gZmVDb2xvck1hdHJpeDtcbiAgfVxuXG4gIFNWR0ZpbGxGaWx0ZXIucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5fbWRmKSB7XG4gICAgICB2YXIgY29sb3IgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMl0ucC52O1xuICAgICAgdmFyIG9wYWNpdHkgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNl0ucC52O1xuICAgICAgdGhpcy5tYXRyaXhGaWx0ZXIuc2V0QXR0cmlidXRlKCd2YWx1ZXMnLCAnMCAwIDAgMCAnICsgY29sb3JbMF0gKyAnIDAgMCAwIDAgJyArIGNvbG9yWzFdICsgJyAwIDAgMCAwICcgKyBjb2xvclsyXSArICcgMCAwIDAgJyArIG9wYWNpdHkgKyAnIDAnKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHU3Ryb2tlRWZmZWN0KGZpbCwgZmlsdGVyTWFuYWdlciwgZWxlbSkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpbHRlck1hbmFnZXIgPSBmaWx0ZXJNYW5hZ2VyO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5wYXRocyA9IFtdO1xuICB9XG5cbiAgU1ZHU3Ryb2tlRWZmZWN0LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbGVtQ2hpbGRyZW4gPSB0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LmNoaWxkcmVuIHx8IHRoaXMuZWxlbS5sYXllckVsZW1lbnQuY2hpbGROb2RlcztcbiAgICB2YXIgcGF0aDtcbiAgICB2YXIgZ3JvdXBQYXRoO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG5cbiAgICBpZiAodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzFdLnAudiA9PT0gMSkge1xuICAgICAgbGVuID0gdGhpcy5lbGVtLm1hc2tNYW5hZ2VyLm1hc2tzUHJvcGVydGllcy5sZW5ndGg7XG4gICAgICBpID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaSA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1swXS5wLnYgLSAxO1xuICAgICAgbGVuID0gaSArIDE7XG4gICAgfVxuXG4gICAgZ3JvdXBQYXRoID0gY3JlYXRlTlMoJ2cnKTtcbiAgICBncm91cFBhdGguc2V0QXR0cmlidXRlKCdmaWxsJywgJ25vbmUnKTtcbiAgICBncm91cFBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsICdyb3VuZCcpO1xuICAgIGdyb3VwUGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNob2Zmc2V0JywgMSk7XG5cbiAgICBmb3IgKGk7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgcGF0aCA9IGNyZWF0ZU5TKCdwYXRoJyk7XG4gICAgICBncm91cFBhdGguYXBwZW5kQ2hpbGQocGF0aCk7XG4gICAgICB0aGlzLnBhdGhzLnB1c2goe1xuICAgICAgICBwOiBwYXRoLFxuICAgICAgICBtOiBpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzEwXS5wLnYgPT09IDMpIHtcbiAgICAgIHZhciBtYXNrID0gY3JlYXRlTlMoJ21hc2snKTtcbiAgICAgIHZhciBpZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgbWFzay5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgbWFzay5zZXRBdHRyaWJ1dGUoJ21hc2stdHlwZScsICdhbHBoYScpO1xuICAgICAgbWFzay5hcHBlbmRDaGlsZChncm91cFBhdGgpO1xuICAgICAgdGhpcy5lbGVtLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChtYXNrKTtcbiAgICAgIHZhciBnID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgIGcuc2V0QXR0cmlidXRlKCdtYXNrJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBpZCArICcpJyk7XG5cbiAgICAgIHdoaWxlIChlbGVtQ2hpbGRyZW5bMF0pIHtcbiAgICAgICAgZy5hcHBlbmRDaGlsZChlbGVtQ2hpbGRyZW5bMF0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKGcpO1xuICAgICAgdGhpcy5tYXNrZXIgPSBtYXNrO1xuICAgICAgZ3JvdXBQYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJyNmZmYnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxMF0ucC52ID09PSAxIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxMF0ucC52ID09PSAyKSB7XG4gICAgICBpZiAodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzEwXS5wLnYgPT09IDIpIHtcbiAgICAgICAgZWxlbUNoaWxkcmVuID0gdGhpcy5lbGVtLmxheWVyRWxlbWVudC5jaGlsZHJlbiB8fCB0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LmNoaWxkTm9kZXM7XG5cbiAgICAgICAgd2hpbGUgKGVsZW1DaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1DaGlsZHJlblswXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5lbGVtLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChncm91cFBhdGgpO1xuICAgICAgdGhpcy5lbGVtLmxheWVyRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ21hc2snKTtcbiAgICAgIGdyb3VwUGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICcjZmZmJyk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgdGhpcy5wYXRoTWFza2VyID0gZ3JvdXBQYXRoO1xuICB9O1xuXG4gIFNWR1N0cm9rZUVmZmVjdC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnBhdGhzLmxlbmd0aDtcbiAgICB2YXIgbWFzaztcbiAgICB2YXIgcGF0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMucGF0aHNbaV0ubSAhPT0gLTEpIHtcbiAgICAgICAgbWFzayA9IHRoaXMuZWxlbS5tYXNrTWFuYWdlci52aWV3RGF0YVt0aGlzLnBhdGhzW2ldLm1dO1xuICAgICAgICBwYXRoID0gdGhpcy5wYXRoc1tpXS5wO1xuXG4gICAgICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuX21kZiB8fCBtYXNrLnByb3AuX21kZikge1xuICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdkJywgbWFzay5sYXN0UGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzldLnAuX21kZiB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC5fbWRmIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s3XS5wLl9tZGYgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzhdLnAuX21kZiB8fCBtYXNrLnByb3AuX21kZikge1xuICAgICAgICAgIHZhciBkYXNoYXJyYXlWYWx1ZTtcblxuICAgICAgICAgIGlmICh0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbN10ucC52ICE9PSAwIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s4XS5wLnYgIT09IDEwMCkge1xuICAgICAgICAgICAgdmFyIHMgPSBNYXRoLm1pbih0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbN10ucC52LCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOF0ucC52KSAqIDAuMDE7XG4gICAgICAgICAgICB2YXIgZSA9IE1hdGgubWF4KHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s3XS5wLnYsIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s4XS5wLnYpICogMC4wMTtcbiAgICAgICAgICAgIHZhciBsID0gcGF0aC5nZXRUb3RhbExlbmd0aCgpO1xuICAgICAgICAgICAgZGFzaGFycmF5VmFsdWUgPSAnMCAwIDAgJyArIGwgKiBzICsgJyAnO1xuICAgICAgICAgICAgdmFyIGxpbmVMZW5ndGggPSBsICogKGUgLSBzKTtcbiAgICAgICAgICAgIHZhciBzZWdtZW50ID0gMSArIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s0XS5wLnYgKiAyICogdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzldLnAudiAqIDAuMDE7XG4gICAgICAgICAgICB2YXIgdW5pdHMgPSBNYXRoLmZsb29yKGxpbmVMZW5ndGggLyBzZWdtZW50KTtcbiAgICAgICAgICAgIHZhciBqO1xuXG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgdW5pdHM7IGogKz0gMSkge1xuICAgICAgICAgICAgICBkYXNoYXJyYXlWYWx1ZSArPSAnMSAnICsgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzRdLnAudiAqIDIgKiB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOV0ucC52ICogMC4wMSArICcgJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGFzaGFycmF5VmFsdWUgKz0gJzAgJyArIGwgKiAxMCArICcgMCAwJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGFzaGFycmF5VmFsdWUgPSAnMSAnICsgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzRdLnAudiAqIDIgKiB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOV0ucC52ICogMC4wMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hhcnJheScsIGRhc2hhcnJheVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC5fbWRmKSB7XG4gICAgICB0aGlzLnBhdGhNYXNrZXIuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC52ICogMik7XG4gICAgfVxuXG4gICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s2XS5wLl9tZGYpIHtcbiAgICAgIHRoaXMucGF0aE1hc2tlci5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNl0ucC52KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzEwXS5wLnYgPT09IDEgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzEwXS5wLnYgPT09IDIpIHtcbiAgICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbM10ucC5fbWRmKSB7XG4gICAgICAgIHZhciBjb2xvciA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1szXS5wLnY7XG4gICAgICAgIHRoaXMucGF0aE1hc2tlci5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdyZ2IoJyArIGJtRmxvb3IoY29sb3JbMF0gKiAyNTUpICsgJywnICsgYm1GbG9vcihjb2xvclsxXSAqIDI1NSkgKyAnLCcgKyBibUZsb29yKGNvbG9yWzJdICogMjU1KSArICcpJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR1RyaXRvbmVGaWx0ZXIoZmlsdGVyLCBmaWx0ZXJNYW5hZ2VyLCBlbGVtLCBpZCkge1xuICAgIHRoaXMuZmlsdGVyTWFuYWdlciA9IGZpbHRlck1hbmFnZXI7XG4gICAgdmFyIGZlQ29sb3JNYXRyaXggPSBjcmVhdGVOUygnZmVDb2xvck1hdHJpeCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd0eXBlJywgJ21hdHJpeCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnbGluZWFyUkdCJyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsICcwLjMzMzMgMC4zMzMzIDAuMzMzMyAwIDAgMC4zMzMzIDAuMzMzMyAwLjMzMzMgMCAwIDAuMzMzMyAwLjMzMzMgMC4zMzMzIDAgMCAwIDAgMCAxIDAnKTtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb2xvck1hdHJpeCk7XG4gICAgdmFyIGZlQ29tcG9uZW50VHJhbnNmZXIgPSBjcmVhdGVOUygnZmVDb21wb25lbnRUcmFuc2ZlcicpO1xuICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnc1JHQicpO1xuICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCk7XG4gICAgdGhpcy5tYXRyaXhGaWx0ZXIgPSBmZUNvbXBvbmVudFRyYW5zZmVyO1xuICAgIHZhciBmZUZ1bmNSID0gY3JlYXRlTlMoJ2ZlRnVuY1InKTtcbiAgICBmZUZ1bmNSLnNldEF0dHJpYnV0ZSgndHlwZScsICd0YWJsZScpO1xuICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuYXBwZW5kQ2hpbGQoZmVGdW5jUik7XG4gICAgdGhpcy5mZUZ1bmNSID0gZmVGdW5jUjtcbiAgICB2YXIgZmVGdW5jRyA9IGNyZWF0ZU5TKCdmZUZ1bmNHJyk7XG4gICAgZmVGdW5jRy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGFibGUnKTtcbiAgICBmZUNvbXBvbmVudFRyYW5zZmVyLmFwcGVuZENoaWxkKGZlRnVuY0cpO1xuICAgIHRoaXMuZmVGdW5jRyA9IGZlRnVuY0c7XG4gICAgdmFyIGZlRnVuY0IgPSBjcmVhdGVOUygnZmVGdW5jQicpO1xuICAgIGZlRnVuY0Iuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RhYmxlJyk7XG4gICAgZmVDb21wb25lbnRUcmFuc2Zlci5hcHBlbmRDaGlsZChmZUZ1bmNCKTtcbiAgICB0aGlzLmZlRnVuY0IgPSBmZUZ1bmNCO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUNvbXBvbmVudFRyYW5zZmVyKTtcbiAgfVxuXG4gIFNWR1RyaXRvbmVGaWx0ZXIucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5fbWRmKSB7XG4gICAgICB2YXIgY29sb3IxID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudjtcbiAgICAgIHZhciBjb2xvcjIgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMV0ucC52O1xuICAgICAgdmFyIGNvbG9yMyA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1syXS5wLnY7XG4gICAgICB2YXIgdGFibGVSID0gY29sb3IzWzBdICsgJyAnICsgY29sb3IyWzBdICsgJyAnICsgY29sb3IxWzBdO1xuICAgICAgdmFyIHRhYmxlRyA9IGNvbG9yM1sxXSArICcgJyArIGNvbG9yMlsxXSArICcgJyArIGNvbG9yMVsxXTtcbiAgICAgIHZhciB0YWJsZUIgPSBjb2xvcjNbMl0gKyAnICcgKyBjb2xvcjJbMl0gKyAnICcgKyBjb2xvcjFbMl07XG4gICAgICB0aGlzLmZlRnVuY1Iuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHRhYmxlUik7XG4gICAgICB0aGlzLmZlRnVuY0cuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHRhYmxlRyk7XG4gICAgICB0aGlzLmZlRnVuY0Iuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHRhYmxlQik7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR1Byb0xldmVsc0ZpbHRlcihmaWx0ZXIsIGZpbHRlck1hbmFnZXIsIGVsZW0sIGlkKSB7XG4gICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcbiAgICB2YXIgZWZmZWN0RWxlbWVudHMgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHM7XG4gICAgdmFyIGZlQ29tcG9uZW50VHJhbnNmZXIgPSBjcmVhdGVOUygnZmVDb21wb25lbnRUcmFuc2ZlcicpOyAvLyBSZWRcblxuICAgIGlmIChlZmZlY3RFbGVtZW50c1sxMF0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzEwXS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbMTFdLnAuayB8fCBlZmZlY3RFbGVtZW50c1sxMV0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzEyXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMTJdLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1sxM10ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzEzXS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbMTRdLnAuayB8fCBlZmZlY3RFbGVtZW50c1sxNF0ucC52ICE9PSAxKSB7XG4gICAgICB0aGlzLmZlRnVuY1IgPSB0aGlzLmNyZWF0ZUZlRnVuYygnZmVGdW5jUicsIGZlQ29tcG9uZW50VHJhbnNmZXIpO1xuICAgIH0gLy8gR3JlZW5cblxuXG4gICAgaWYgKGVmZmVjdEVsZW1lbnRzWzE3XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMTddLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1sxOF0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzE4XS5wLnYgIT09IDEgfHwgZWZmZWN0RWxlbWVudHNbMTldLnAuayB8fCBlZmZlY3RFbGVtZW50c1sxOV0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzIwXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMjBdLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1syMV0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzIxXS5wLnYgIT09IDEpIHtcbiAgICAgIHRoaXMuZmVGdW5jRyA9IHRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNHJywgZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgfSAvLyBCbHVlXG5cblxuICAgIGlmIChlZmZlY3RFbGVtZW50c1syNF0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzI0XS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbMjVdLnAuayB8fCBlZmZlY3RFbGVtZW50c1syNV0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzI2XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMjZdLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1syN10ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzI3XS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbMjhdLnAuayB8fCBlZmZlY3RFbGVtZW50c1syOF0ucC52ICE9PSAxKSB7XG4gICAgICB0aGlzLmZlRnVuY0IgPSB0aGlzLmNyZWF0ZUZlRnVuYygnZmVGdW5jQicsIGZlQ29tcG9uZW50VHJhbnNmZXIpO1xuICAgIH0gLy8gQWxwaGFcblxuXG4gICAgaWYgKGVmZmVjdEVsZW1lbnRzWzMxXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMzFdLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1szMl0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzMyXS5wLnYgIT09IDEgfHwgZWZmZWN0RWxlbWVudHNbMzNdLnAuayB8fCBlZmZlY3RFbGVtZW50c1szM10ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzM0XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMzRdLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1szNV0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzM1XS5wLnYgIT09IDEpIHtcbiAgICAgIHRoaXMuZmVGdW5jQSA9IHRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNBJywgZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgfSAvLyBSR0JcblxuXG4gICAgaWYgKHRoaXMuZmVGdW5jUiB8fCB0aGlzLmZlRnVuY0cgfHwgdGhpcy5mZUZ1bmNCIHx8IHRoaXMuZmVGdW5jQSkge1xuICAgICAgZmVDb21wb25lbnRUcmFuc2Zlci5zZXRBdHRyaWJ1dGUoJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdzUkdCJyk7XG4gICAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgfVxuXG4gICAgaWYgKGVmZmVjdEVsZW1lbnRzWzNdLnAuayB8fCBlZmZlY3RFbGVtZW50c1szXS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbNF0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzRdLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1s1XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbNV0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzZdLnAuayB8fCBlZmZlY3RFbGVtZW50c1s2XS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbN10ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzddLnAudiAhPT0gMSkge1xuICAgICAgZmVDb21wb25lbnRUcmFuc2ZlciA9IGNyZWF0ZU5TKCdmZUNvbXBvbmVudFRyYW5zZmVyJyk7XG4gICAgICBmZUNvbXBvbmVudFRyYW5zZmVyLnNldEF0dHJpYnV0ZSgnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ3NSR0InKTtcbiAgICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCk7XG4gICAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgICB0aGlzLmZlRnVuY1JDb21wb3NlZCA9IHRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNSJywgZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgICB0aGlzLmZlRnVuY0dDb21wb3NlZCA9IHRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNHJywgZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgICB0aGlzLmZlRnVuY0JDb21wb3NlZCA9IHRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNCJywgZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgfVxuICB9XG5cbiAgU1ZHUHJvTGV2ZWxzRmlsdGVyLnByb3RvdHlwZS5jcmVhdGVGZUZ1bmMgPSBmdW5jdGlvbiAodHlwZSwgZmVDb21wb25lbnRUcmFuc2Zlcikge1xuICAgIHZhciBmZUZ1bmMgPSBjcmVhdGVOUyh0eXBlKTtcbiAgICBmZUZ1bmMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RhYmxlJyk7XG4gICAgZmVDb21wb25lbnRUcmFuc2Zlci5hcHBlbmRDaGlsZChmZUZ1bmMpO1xuICAgIHJldHVybiBmZUZ1bmM7XG4gIH07XG5cbiAgU1ZHUHJvTGV2ZWxzRmlsdGVyLnByb3RvdHlwZS5nZXRUYWJsZVZhbHVlID0gZnVuY3Rpb24gKGlucHV0QmxhY2ssIGlucHV0V2hpdGUsIGdhbW1hLCBvdXRwdXRCbGFjaywgb3V0cHV0V2hpdGUpIHtcbiAgICB2YXIgY250ID0gMDtcbiAgICB2YXIgc2VnbWVudHMgPSAyNTY7XG4gICAgdmFyIHBlcmM7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluKGlucHV0QmxhY2ssIGlucHV0V2hpdGUpO1xuICAgIHZhciBtYXggPSBNYXRoLm1heChpbnB1dEJsYWNrLCBpbnB1dFdoaXRlKTtcbiAgICB2YXIgdGFibGUgPSBBcnJheS5jYWxsKG51bGwsIHtcbiAgICAgIGxlbmd0aDogc2VnbWVudHNcbiAgICB9KTtcbiAgICB2YXIgY29sb3JWYWx1ZTtcbiAgICB2YXIgcG9zID0gMDtcbiAgICB2YXIgb3V0cHV0RGVsdGEgPSBvdXRwdXRXaGl0ZSAtIG91dHB1dEJsYWNrO1xuICAgIHZhciBpbnB1dERlbHRhID0gaW5wdXRXaGl0ZSAtIGlucHV0QmxhY2s7XG5cbiAgICB3aGlsZSAoY250IDw9IDI1Nikge1xuICAgICAgcGVyYyA9IGNudCAvIDI1NjtcblxuICAgICAgaWYgKHBlcmMgPD0gbWluKSB7XG4gICAgICAgIGNvbG9yVmFsdWUgPSBpbnB1dERlbHRhIDwgMCA/IG91dHB1dFdoaXRlIDogb3V0cHV0QmxhY2s7XG4gICAgICB9IGVsc2UgaWYgKHBlcmMgPj0gbWF4KSB7XG4gICAgICAgIGNvbG9yVmFsdWUgPSBpbnB1dERlbHRhIDwgMCA/IG91dHB1dEJsYWNrIDogb3V0cHV0V2hpdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2xvclZhbHVlID0gb3V0cHV0QmxhY2sgKyBvdXRwdXREZWx0YSAqIE1hdGgucG93KChwZXJjIC0gaW5wdXRCbGFjaykgLyBpbnB1dERlbHRhLCAxIC8gZ2FtbWEpO1xuICAgICAgfVxuXG4gICAgICB0YWJsZVtwb3NdID0gY29sb3JWYWx1ZTtcbiAgICAgIHBvcyArPSAxO1xuICAgICAgY250ICs9IDI1NiAvIChzZWdtZW50cyAtIDEpO1xuICAgIH1cblxuICAgIHJldHVybiB0YWJsZS5qb2luKCcgJyk7XG4gIH07XG5cbiAgU1ZHUHJvTGV2ZWxzRmlsdGVyLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChmb3JjZVJlbmRlcikge1xuICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuX21kZikge1xuICAgICAgdmFyIHZhbDtcbiAgICAgIHZhciBlZmZlY3RFbGVtZW50cyA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50cztcblxuICAgICAgaWYgKHRoaXMuZmVGdW5jUkNvbXBvc2VkICYmIChmb3JjZVJlbmRlciB8fCBlZmZlY3RFbGVtZW50c1szXS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbNF0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzVdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1s2XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbN10ucC5fbWRmKSkge1xuICAgICAgICB2YWwgPSB0aGlzLmdldFRhYmxlVmFsdWUoZWZmZWN0RWxlbWVudHNbM10ucC52LCBlZmZlY3RFbGVtZW50c1s0XS5wLnYsIGVmZmVjdEVsZW1lbnRzWzVdLnAudiwgZWZmZWN0RWxlbWVudHNbNl0ucC52LCBlZmZlY3RFbGVtZW50c1s3XS5wLnYpO1xuICAgICAgICB0aGlzLmZlRnVuY1JDb21wb3NlZC5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgdmFsKTtcbiAgICAgICAgdGhpcy5mZUZ1bmNHQ29tcG9zZWQuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHZhbCk7XG4gICAgICAgIHRoaXMuZmVGdW5jQkNvbXBvc2VkLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB2YWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mZUZ1bmNSICYmIChmb3JjZVJlbmRlciB8fCBlZmZlY3RFbGVtZW50c1sxMF0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzExXS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMTJdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1sxM10ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzE0XS5wLl9tZGYpKSB7XG4gICAgICAgIHZhbCA9IHRoaXMuZ2V0VGFibGVWYWx1ZShlZmZlY3RFbGVtZW50c1sxMF0ucC52LCBlZmZlY3RFbGVtZW50c1sxMV0ucC52LCBlZmZlY3RFbGVtZW50c1sxMl0ucC52LCBlZmZlY3RFbGVtZW50c1sxM10ucC52LCBlZmZlY3RFbGVtZW50c1sxNF0ucC52KTtcbiAgICAgICAgdGhpcy5mZUZ1bmNSLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB2YWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mZUZ1bmNHICYmIChmb3JjZVJlbmRlciB8fCBlZmZlY3RFbGVtZW50c1sxN10ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzE4XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMTldLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1syMF0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzIxXS5wLl9tZGYpKSB7XG4gICAgICAgIHZhbCA9IHRoaXMuZ2V0VGFibGVWYWx1ZShlZmZlY3RFbGVtZW50c1sxN10ucC52LCBlZmZlY3RFbGVtZW50c1sxOF0ucC52LCBlZmZlY3RFbGVtZW50c1sxOV0ucC52LCBlZmZlY3RFbGVtZW50c1syMF0ucC52LCBlZmZlY3RFbGVtZW50c1syMV0ucC52KTtcbiAgICAgICAgdGhpcy5mZUZ1bmNHLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB2YWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mZUZ1bmNCICYmIChmb3JjZVJlbmRlciB8fCBlZmZlY3RFbGVtZW50c1syNF0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzI1XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMjZdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1syN10ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzI4XS5wLl9tZGYpKSB7XG4gICAgICAgIHZhbCA9IHRoaXMuZ2V0VGFibGVWYWx1ZShlZmZlY3RFbGVtZW50c1syNF0ucC52LCBlZmZlY3RFbGVtZW50c1syNV0ucC52LCBlZmZlY3RFbGVtZW50c1syNl0ucC52LCBlZmZlY3RFbGVtZW50c1syN10ucC52LCBlZmZlY3RFbGVtZW50c1syOF0ucC52KTtcbiAgICAgICAgdGhpcy5mZUZ1bmNCLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB2YWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mZUZ1bmNBICYmIChmb3JjZVJlbmRlciB8fCBlZmZlY3RFbGVtZW50c1szMV0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzMyXS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMzNdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1szNF0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzM1XS5wLl9tZGYpKSB7XG4gICAgICAgIHZhbCA9IHRoaXMuZ2V0VGFibGVWYWx1ZShlZmZlY3RFbGVtZW50c1szMV0ucC52LCBlZmZlY3RFbGVtZW50c1szMl0ucC52LCBlZmZlY3RFbGVtZW50c1szM10ucC52LCBlZmZlY3RFbGVtZW50c1szNF0ucC52LCBlZmZlY3RFbGVtZW50c1szNV0ucC52KTtcbiAgICAgICAgdGhpcy5mZUZ1bmNBLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB2YWwpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBTVkdEcm9wU2hhZG93RWZmZWN0KGZpbHRlciwgZmlsdGVyTWFuYWdlciwgZWxlbSwgaWQsIHNvdXJjZSkge1xuICAgIHZhciBnbG9iYWxGaWx0ZXJTaXplID0gZmlsdGVyTWFuYWdlci5jb250YWluZXIuZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcuZmlsdGVyU2l6ZTtcbiAgICB2YXIgZmlsdGVyU2l6ZSA9IGZpbHRlck1hbmFnZXIuZGF0YS5mcyB8fCBnbG9iYWxGaWx0ZXJTaXplO1xuICAgIGZpbHRlci5zZXRBdHRyaWJ1dGUoJ3gnLCBmaWx0ZXJTaXplLnggfHwgZ2xvYmFsRmlsdGVyU2l6ZS54KTtcbiAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKCd5JywgZmlsdGVyU2l6ZS55IHx8IGdsb2JhbEZpbHRlclNpemUueSk7XG4gICAgZmlsdGVyLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBmaWx0ZXJTaXplLndpZHRoIHx8IGdsb2JhbEZpbHRlclNpemUud2lkdGgpO1xuICAgIGZpbHRlci5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGZpbHRlclNpemUuaGVpZ2h0IHx8IGdsb2JhbEZpbHRlclNpemUuaGVpZ2h0KTtcbiAgICB0aGlzLmZpbHRlck1hbmFnZXIgPSBmaWx0ZXJNYW5hZ2VyO1xuICAgIHZhciBmZUdhdXNzaWFuQmx1ciA9IGNyZWF0ZU5TKCdmZUdhdXNzaWFuQmx1cicpO1xuICAgIGZlR2F1c3NpYW5CbHVyLnNldEF0dHJpYnV0ZSgnaW4nLCAnU291cmNlQWxwaGEnKTtcbiAgICBmZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkICsgJ19kcm9wX3NoYWRvd18xJyk7XG4gICAgZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdzdGREZXZpYXRpb24nLCAnMCcpO1xuICAgIHRoaXMuZmVHYXVzc2lhbkJsdXIgPSBmZUdhdXNzaWFuQmx1cjtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVHYXVzc2lhbkJsdXIpO1xuICAgIHZhciBmZU9mZnNldCA9IGNyZWF0ZU5TKCdmZU9mZnNldCcpO1xuICAgIGZlT2Zmc2V0LnNldEF0dHJpYnV0ZSgnZHgnLCAnMjUnKTtcbiAgICBmZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ2R5JywgJzAnKTtcbiAgICBmZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ2luJywgaWQgKyAnX2Ryb3Bfc2hhZG93XzEnKTtcbiAgICBmZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkICsgJ19kcm9wX3NoYWRvd18yJyk7XG4gICAgdGhpcy5mZU9mZnNldCA9IGZlT2Zmc2V0O1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZU9mZnNldCk7XG4gICAgdmFyIGZlRmxvb2QgPSBjcmVhdGVOUygnZmVGbG9vZCcpO1xuICAgIGZlRmxvb2Quc2V0QXR0cmlidXRlKCdmbG9vZC1jb2xvcicsICcjMDBmZjAwJyk7XG4gICAgZmVGbG9vZC5zZXRBdHRyaWJ1dGUoJ2Zsb29kLW9wYWNpdHknLCAnMScpO1xuICAgIGZlRmxvb2Quc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCArICdfZHJvcF9zaGFkb3dfMycpO1xuICAgIHRoaXMuZmVGbG9vZCA9IGZlRmxvb2Q7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlRmxvb2QpO1xuICAgIHZhciBmZUNvbXBvc2l0ZSA9IGNyZWF0ZU5TKCdmZUNvbXBvc2l0ZScpO1xuICAgIGZlQ29tcG9zaXRlLnNldEF0dHJpYnV0ZSgnaW4nLCBpZCArICdfZHJvcF9zaGFkb3dfMycpO1xuICAgIGZlQ29tcG9zaXRlLnNldEF0dHJpYnV0ZSgnaW4yJywgaWQgKyAnX2Ryb3Bfc2hhZG93XzInKTtcbiAgICBmZUNvbXBvc2l0ZS5zZXRBdHRyaWJ1dGUoJ29wZXJhdG9yJywgJ2luJyk7XG4gICAgZmVDb21wb3NpdGUuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCArICdfZHJvcF9zaGFkb3dfNCcpO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUNvbXBvc2l0ZSk7XG4gICAgdmFyIGZlTWVyZ2UgPSB0aGlzLmNyZWF0ZU1lcmdlTm9kZShpZCwgW2lkICsgJ19kcm9wX3NoYWRvd180Jywgc291cmNlXSk7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlTWVyZ2UpOyAvL1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTVkdDb21wb3NhYmxlRWZmZWN0XSwgU1ZHRHJvcFNoYWRvd0VmZmVjdCk7XG5cbiAgU1ZHRHJvcFNoYWRvd0VmZmVjdC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGYpIHtcbiAgICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC5fbWRmKSB7XG4gICAgICAgIHRoaXMuZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdzdGREZXZpYXRpb24nLCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC52IC8gNCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMF0ucC5fbWRmKSB7XG4gICAgICAgIHZhciBjb2wgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMF0ucC52O1xuICAgICAgICB0aGlzLmZlRmxvb2Quc2V0QXR0cmlidXRlKCdmbG9vZC1jb2xvcicsIHJnYlRvSGV4KE1hdGgucm91bmQoY29sWzBdICogMjU1KSwgTWF0aC5yb3VuZChjb2xbMV0gKiAyNTUpLCBNYXRoLnJvdW5kKGNvbFsyXSAqIDI1NSkpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLl9tZGYpIHtcbiAgICAgICAgdGhpcy5mZUZsb29kLnNldEF0dHJpYnV0ZSgnZmxvb2Qtb3BhY2l0eScsIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLnYgLyAyNTUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAuX21kZiB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbM10ucC5fbWRmKSB7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1szXS5wLnY7XG4gICAgICAgIHZhciBhbmdsZSA9ICh0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMl0ucC52IC0gOTApICogZGVnVG9SYWRzO1xuICAgICAgICB2YXIgeCA9IGRpc3RhbmNlICogTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICB2YXIgeSA9IGRpc3RhbmNlICogTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICB0aGlzLmZlT2Zmc2V0LnNldEF0dHJpYnV0ZSgnZHgnLCB4KTtcbiAgICAgICAgdGhpcy5mZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ2R5JywgeSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBfc3ZnTWF0dGVTeW1ib2xzID0gW107XG5cbiAgZnVuY3Rpb24gU1ZHTWF0dGUzRWZmZWN0KGZpbHRlckVsZW0sIGZpbHRlck1hbmFnZXIsIGVsZW0pIHtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcbiAgICB0aGlzLmZpbHRlckVsZW0gPSBmaWx0ZXJFbGVtO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgZWxlbS5tYXR0ZUVsZW1lbnQgPSBjcmVhdGVOUygnZycpO1xuICAgIGVsZW0ubWF0dGVFbGVtZW50LmFwcGVuZENoaWxkKGVsZW0ubGF5ZXJFbGVtZW50KTtcbiAgICBlbGVtLm1hdHRlRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtLnRyYW5zZm9ybWVkRWxlbWVudCk7XG4gICAgZWxlbS5iYXNlRWxlbWVudCA9IGVsZW0ubWF0dGVFbGVtZW50O1xuICB9XG5cbiAgU1ZHTWF0dGUzRWZmZWN0LnByb3RvdHlwZS5maW5kU3ltYm9sID0gZnVuY3Rpb24gKG1hc2spIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IF9zdmdNYXR0ZVN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmIChfc3ZnTWF0dGVTeW1ib2xzW2ldID09PSBtYXNrKSB7XG4gICAgICAgIHJldHVybiBfc3ZnTWF0dGVTeW1ib2xzW2ldO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgU1ZHTWF0dGUzRWZmZWN0LnByb3RvdHlwZS5yZXBsYWNlSW5QYXJlbnQgPSBmdW5jdGlvbiAobWFzaywgc3ltYm9sSWQpIHtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IG1hc2subGF5ZXJFbGVtZW50LnBhcmVudE5vZGU7XG5cbiAgICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW4gPSBwYXJlbnROb2RlLmNoaWxkcmVuO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmIChjaGlsZHJlbltpXSA9PT0gbWFzay5sYXllckVsZW1lbnQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dENoaWxkO1xuXG4gICAgaWYgKGkgPD0gbGVuIC0gMikge1xuICAgICAgbmV4dENoaWxkID0gY2hpbGRyZW5baSArIDFdO1xuICAgIH1cblxuICAgIHZhciB1c2VFbGVtID0gY3JlYXRlTlMoJ3VzZScpO1xuICAgIHVzZUVsZW0uc2V0QXR0cmlidXRlKCdocmVmJywgJyMnICsgc3ltYm9sSWQpO1xuXG4gICAgaWYgKG5leHRDaGlsZCkge1xuICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodXNlRWxlbSwgbmV4dENoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh1c2VFbGVtKTtcbiAgICB9XG4gIH07XG5cbiAgU1ZHTWF0dGUzRWZmZWN0LnByb3RvdHlwZS5zZXRFbGVtZW50QXNNYXNrID0gZnVuY3Rpb24gKGVsZW0sIG1hc2spIHtcbiAgICBpZiAoIXRoaXMuZmluZFN5bWJvbChtYXNrKSkge1xuICAgICAgdmFyIHN5bWJvbElkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICB2YXIgbWFza2VyID0gY3JlYXRlTlMoJ21hc2snKTtcbiAgICAgIG1hc2tlci5zZXRBdHRyaWJ1dGUoJ2lkJywgbWFzay5sYXllcklkKTtcbiAgICAgIG1hc2tlci5zZXRBdHRyaWJ1dGUoJ21hc2stdHlwZScsICdhbHBoYScpO1xuXG4gICAgICBfc3ZnTWF0dGVTeW1ib2xzLnB1c2gobWFzayk7XG5cbiAgICAgIHZhciBkZWZzID0gZWxlbS5nbG9iYWxEYXRhLmRlZnM7XG4gICAgICBkZWZzLmFwcGVuZENoaWxkKG1hc2tlcik7XG4gICAgICB2YXIgc3ltYm9sID0gY3JlYXRlTlMoJ3N5bWJvbCcpO1xuICAgICAgc3ltYm9sLnNldEF0dHJpYnV0ZSgnaWQnLCBzeW1ib2xJZCk7XG4gICAgICB0aGlzLnJlcGxhY2VJblBhcmVudChtYXNrLCBzeW1ib2xJZCk7XG4gICAgICBzeW1ib2wuYXBwZW5kQ2hpbGQobWFzay5sYXllckVsZW1lbnQpO1xuICAgICAgZGVmcy5hcHBlbmRDaGlsZChzeW1ib2wpO1xuICAgICAgdmFyIHVzZUVsZW0gPSBjcmVhdGVOUygndXNlJyk7XG4gICAgICB1c2VFbGVtLnNldEF0dHJpYnV0ZSgnaHJlZicsICcjJyArIHN5bWJvbElkKTtcbiAgICAgIG1hc2tlci5hcHBlbmRDaGlsZCh1c2VFbGVtKTtcbiAgICAgIG1hc2suZGF0YS5oZCA9IGZhbHNlO1xuICAgICAgbWFzay5zaG93KCk7XG4gICAgfVxuXG4gICAgZWxlbS5zZXRNYXR0ZShtYXNrLmxheWVySWQpO1xuICB9O1xuXG4gIFNWR01hdHRlM0VmZmVjdC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5kID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudjtcbiAgICB2YXIgZWxlbWVudHMgPSB0aGlzLmVsZW0uY29tcC5lbGVtZW50cztcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBpZiAoZWxlbWVudHNbaV0gJiYgZWxlbWVudHNbaV0uZGF0YS5pbmQgPT09IGluZCkge1xuICAgICAgICB0aGlzLnNldEVsZW1lbnRBc01hc2sodGhpcy5lbGVtLCBlbGVtZW50c1tpXSk7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfTtcblxuICBTVkdNYXR0ZTNFZmZlY3QucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR0dhdXNzaWFuQmx1ckVmZmVjdChmaWx0ZXIsIGZpbHRlck1hbmFnZXIsIGVsZW0sIGlkKSB7XG4gICAgLy8gT3V0c2V0IHRoZSBmaWx0ZXIgcmVnaW9uIGJ5IDEwMCUgb24gYWxsIHNpZGVzIHRvIGFjY29tbW9kYXRlIGJsdXIgZXhwYW5zaW9uLlxuICAgIGZpbHRlci5zZXRBdHRyaWJ1dGUoJ3gnLCAnLTEwMCUnKTtcbiAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKCd5JywgJy0xMDAlJyk7XG4gICAgZmlsdGVyLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAnMzAwJScpO1xuICAgIGZpbHRlci5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsICczMDAlJyk7XG4gICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcbiAgICB2YXIgZmVHYXVzc2lhbkJsdXIgPSBjcmVhdGVOUygnZmVHYXVzc2lhbkJsdXInKTtcbiAgICBmZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkKTtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVHYXVzc2lhbkJsdXIpO1xuICAgIHRoaXMuZmVHYXVzc2lhbkJsdXIgPSBmZUdhdXNzaWFuQmx1cjtcbiAgfVxuXG4gIFNWR0dhdXNzaWFuQmx1ckVmZmVjdC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGYpIHtcbiAgICAgIC8vIEVtcGlyaWNhbCB2YWx1ZSwgbWF0Y2hpbmcgQUUncyBibHVyIGFwcGVhcmFuY2UuXG4gICAgICB2YXIga0JsdXJyaW5lc3NUb1NpZ21hID0gMC4zO1xuICAgICAgdmFyIHNpZ21hID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudiAqIGtCbHVycmluZXNzVG9TaWdtYTsgLy8gRGltZW5zaW9ucyBtYXBwaW5nOlxuICAgICAgLy9cbiAgICAgIC8vICAgMSAtPiBob3Jpem9udGFsICYgdmVydGljYWxcbiAgICAgIC8vICAgMiAtPiBob3Jpem9udGFsIG9ubHlcbiAgICAgIC8vICAgMyAtPiB2ZXJ0aWNhbCBvbmx5XG4gICAgICAvL1xuXG4gICAgICB2YXIgZGltZW5zaW9ucyA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLnY7XG4gICAgICB2YXIgc2lnbWFYID0gZGltZW5zaW9ucyA9PSAzID8gMCA6IHNpZ21hOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuXG4gICAgICB2YXIgc2lnbWFZID0gZGltZW5zaW9ucyA9PSAyID8gMCA6IHNpZ21hOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuXG4gICAgICB0aGlzLmZlR2F1c3NpYW5CbHVyLnNldEF0dHJpYnV0ZSgnc3RkRGV2aWF0aW9uJywgc2lnbWFYICsgJyAnICsgc2lnbWFZKTsgLy8gUmVwZWF0IGVkZ2VzIG1hcHBpbmc6XG4gICAgICAvL1xuICAgICAgLy8gICAwIC0+IG9mZiAtPiBkdXBsaWNhdGVcbiAgICAgIC8vICAgMSAtPiBvbiAgLT4gd3JhcFxuXG4gICAgICB2YXIgZWRnZU1vZGUgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMl0ucC52ID09IDEgPyAnd3JhcCcgOiAnZHVwbGljYXRlJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcblxuICAgICAgdGhpcy5mZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoJ2VkZ2VNb2RlJywgZWRnZU1vZGUpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBUcmFuc2Zvcm1FZmZlY3QoKSB7fVxuXG4gIFRyYW5zZm9ybUVmZmVjdC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChlZmZlY3RzTWFuYWdlcikge1xuICAgIHRoaXMuZWZmZWN0c01hbmFnZXIgPSBlZmZlY3RzTWFuYWdlcjtcbiAgICB0aGlzLnR5cGUgPSBlZmZlY3RUeXBlcy5UUkFOU0ZPUk1fRUZGRUNUO1xuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMub3BhY2l0eSA9IC0xO1xuICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIHRoaXMuX29wTWRmID0gZmFsc2U7XG4gIH07XG5cbiAgVHJhbnNmb3JtRWZmZWN0LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChmb3JjZUZyYW1lKSB7XG4gICAgdGhpcy5fb3BNZGYgPSBmYWxzZTtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcblxuICAgIGlmIChmb3JjZUZyYW1lIHx8IHRoaXMuZWZmZWN0c01hbmFnZXIuX21kZikge1xuICAgICAgdmFyIGVmZmVjdEVsZW1lbnRzID0gdGhpcy5lZmZlY3RzTWFuYWdlci5lZmZlY3RFbGVtZW50cztcbiAgICAgIHZhciBhbmNob3IgPSBlZmZlY3RFbGVtZW50c1swXS5wLnY7XG4gICAgICB2YXIgcG9zaXRpb24gPSBlZmZlY3RFbGVtZW50c1sxXS5wLnY7XG4gICAgICB2YXIgaXNVbmlmb3JtU2NhbGUgPSBlZmZlY3RFbGVtZW50c1syXS5wLnYgPT09IDE7XG4gICAgICB2YXIgc2NhbGVIZWlnaHQgPSBlZmZlY3RFbGVtZW50c1szXS5wLnY7XG4gICAgICB2YXIgc2NhbGVXaWR0aCA9IGlzVW5pZm9ybVNjYWxlID8gc2NhbGVIZWlnaHQgOiBlZmZlY3RFbGVtZW50c1s0XS5wLnY7XG4gICAgICB2YXIgc2tldyA9IGVmZmVjdEVsZW1lbnRzWzVdLnAudjtcbiAgICAgIHZhciBza2V3QXhpcyA9IGVmZmVjdEVsZW1lbnRzWzZdLnAudjtcbiAgICAgIHZhciByb3RhdGlvbiA9IGVmZmVjdEVsZW1lbnRzWzddLnAudjtcbiAgICAgIHRoaXMubWF0cml4LnJlc2V0KCk7XG4gICAgICB0aGlzLm1hdHJpeC50cmFuc2xhdGUoLWFuY2hvclswXSwgLWFuY2hvclsxXSwgYW5jaG9yWzJdKTtcbiAgICAgIHRoaXMubWF0cml4LnNjYWxlKHNjYWxlV2lkdGggKiAwLjAxLCBzY2FsZUhlaWdodCAqIDAuMDEsIDEpO1xuICAgICAgdGhpcy5tYXRyaXgucm90YXRlKC1yb3RhdGlvbiAqIGRlZ1RvUmFkcyk7XG4gICAgICB0aGlzLm1hdHJpeC5za2V3RnJvbUF4aXMoLXNrZXcgKiBkZWdUb1JhZHMsIChza2V3QXhpcyArIDkwKSAqIGRlZ1RvUmFkcyk7XG4gICAgICB0aGlzLm1hdHJpeC50cmFuc2xhdGUocG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCAwKTtcbiAgICAgIHRoaXMuX21kZiA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLm9wYWNpdHkgIT09IGVmZmVjdEVsZW1lbnRzWzhdLnAudikge1xuICAgICAgICB0aGlzLm9wYWNpdHkgPSBlZmZlY3RFbGVtZW50c1s4XS5wLnY7XG4gICAgICAgIHRoaXMuX29wTWRmID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHVHJhbnNmb3JtRWZmZWN0KF8sIGZpbHRlck1hbmFnZXIpIHtcbiAgICB0aGlzLmluaXQoZmlsdGVyTWFuYWdlcik7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW1RyYW5zZm9ybUVmZmVjdF0sIFNWR1RyYW5zZm9ybUVmZmVjdCk7XG5cbiAgZnVuY3Rpb24gQ1ZUcmFuc2Zvcm1FZmZlY3QoZWZmZWN0c01hbmFnZXIpIHtcbiAgICB0aGlzLmluaXQoZWZmZWN0c01hbmFnZXIpO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtUcmFuc2Zvcm1FZmZlY3RdLCBDVlRyYW5zZm9ybUVmZmVjdCk7XG5cbiAgcmVnaXN0ZXJSZW5kZXJlcignY2FudmFzJywgQ2FudmFzUmVuZGVyZXIpO1xuICByZWdpc3RlclJlbmRlcmVyKCdodG1sJywgSHlicmlkUmVuZGVyZXIpO1xuICByZWdpc3RlclJlbmRlcmVyKCdzdmcnLCBTVkdSZW5kZXJlcik7IC8vIFJlZ2lzdGVyaW5nIHNoYXBlIG1vZGlmaWVyc1xuXG4gIFNoYXBlTW9kaWZpZXJzLnJlZ2lzdGVyTW9kaWZpZXIoJ3RtJywgVHJpbU1vZGlmaWVyKTtcbiAgU2hhcGVNb2RpZmllcnMucmVnaXN0ZXJNb2RpZmllcigncGInLCBQdWNrZXJBbmRCbG9hdE1vZGlmaWVyKTtcbiAgU2hhcGVNb2RpZmllcnMucmVnaXN0ZXJNb2RpZmllcigncnAnLCBSZXBlYXRlck1vZGlmaWVyKTtcbiAgU2hhcGVNb2RpZmllcnMucmVnaXN0ZXJNb2RpZmllcigncmQnLCBSb3VuZENvcm5lcnNNb2RpZmllcik7XG4gIFNoYXBlTW9kaWZpZXJzLnJlZ2lzdGVyTW9kaWZpZXIoJ3p6JywgWmlnWmFnTW9kaWZpZXIpO1xuICBTaGFwZU1vZGlmaWVycy5yZWdpc3Rlck1vZGlmaWVyKCdvcCcsIE9mZnNldFBhdGhNb2RpZmllcik7IC8vIFJlZ2lzdGVyaW5nIGV4cHJlc3Npb24gcGx1Z2luXG5cbiAgc2V0RXhwcmVzc2lvbnNQbHVnaW4oRXhwcmVzc2lvbnMpO1xuICBzZXRFeHByZXNzaW9uSW50ZXJmYWNlcyhnZXRJbnRlcmZhY2UpO1xuICBpbml0aWFsaXplJDEoKTtcbiAgaW5pdGlhbGl6ZSgpOyAvLyBSZWdpc3RlcmluZyBzdmcgZWZmZWN0c1xuXG4gIHJlZ2lzdGVyRWZmZWN0JDEoMjAsIFNWR1RpbnRGaWx0ZXIsIHRydWUpO1xuICByZWdpc3RlckVmZmVjdCQxKDIxLCBTVkdGaWxsRmlsdGVyLCB0cnVlKTtcbiAgcmVnaXN0ZXJFZmZlY3QkMSgyMiwgU1ZHU3Ryb2tlRWZmZWN0LCBmYWxzZSk7XG4gIHJlZ2lzdGVyRWZmZWN0JDEoMjMsIFNWR1RyaXRvbmVGaWx0ZXIsIHRydWUpO1xuICByZWdpc3RlckVmZmVjdCQxKDI0LCBTVkdQcm9MZXZlbHNGaWx0ZXIsIHRydWUpO1xuICByZWdpc3RlckVmZmVjdCQxKDI1LCBTVkdEcm9wU2hhZG93RWZmZWN0LCB0cnVlKTtcbiAgcmVnaXN0ZXJFZmZlY3QkMSgyOCwgU1ZHTWF0dGUzRWZmZWN0LCBmYWxzZSk7XG4gIHJlZ2lzdGVyRWZmZWN0JDEoMjksIFNWR0dhdXNzaWFuQmx1ckVmZmVjdCwgdHJ1ZSk7XG4gIHJlZ2lzdGVyRWZmZWN0JDEoMzUsIFNWR1RyYW5zZm9ybUVmZmVjdCwgZmFsc2UpO1xuICByZWdpc3RlckVmZmVjdCgzNSwgQ1ZUcmFuc2Zvcm1FZmZlY3QpO1xuXG4gIHJldHVybiBsb3R0aWU7XG5cbn0pKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBiaWdpbnQ6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfbG90dGllV2ViID0gcmVxdWlyZSgnbG90dGllLXdlYicpO1xuXG52YXIgX2xvdHRpZVdlYjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb3R0aWVXZWIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTG90dGllID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoTG90dGllLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMb3R0aWUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgTG90dGllKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IExvdHRpZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTG90dGllKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2tUb1BhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVGhlIHBhdXNlKCkgbWV0aG9kIGlzIGZvciBoYW5kbGluZyBwYXVzaW5nIGJ5IHBhc3NpbmcgYSBwcm9wIGlzUGF1c2VkXG4gICAgICAvLyBUaGlzIG1ldGhvZCBpcyBmb3IgaGFuZGxpbmcgdGhlIGFiaWxpdHkgdG8gcGF1c2UgYnkgY2xpY2tpbmcgb24gdGhlIGFuaW1hdGlvblxuICAgICAgaWYgKF90aGlzLmFuaW0uaXNQYXVzZWQpIHtcbiAgICAgICAgX3RoaXMuYW5pbS5wbGF5KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5hbmltLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKExvdHRpZSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb3B0aW9ucyA9IF9wcm9wcy5vcHRpb25zLFxuICAgICAgICAgIGV2ZW50TGlzdGVuZXJzID0gX3Byb3BzLmV2ZW50TGlzdGVuZXJzO1xuICAgICAgdmFyIGxvb3AgPSBvcHRpb25zLmxvb3AsXG4gICAgICAgICAgYXV0b3BsYXkgPSBvcHRpb25zLmF1dG9wbGF5LFxuICAgICAgICAgIGFuaW1hdGlvbkRhdGEgPSBvcHRpb25zLmFuaW1hdGlvbkRhdGEsXG4gICAgICAgICAgcmVuZGVyZXJTZXR0aW5ncyA9IG9wdGlvbnMucmVuZGVyZXJTZXR0aW5ncyxcbiAgICAgICAgICBzZWdtZW50cyA9IG9wdGlvbnMuc2VnbWVudHM7XG5cblxuICAgICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgICBjb250YWluZXI6IHRoaXMuZWwsXG4gICAgICAgIHJlbmRlcmVyOiAnc3ZnJyxcbiAgICAgICAgbG9vcDogbG9vcCAhPT0gZmFsc2UsXG4gICAgICAgIGF1dG9wbGF5OiBhdXRvcGxheSAhPT0gZmFsc2UsXG4gICAgICAgIHNlZ21lbnRzOiBzZWdtZW50cyAhPT0gZmFsc2UsXG4gICAgICAgIGFuaW1hdGlvbkRhdGE6IGFuaW1hdGlvbkRhdGEsXG4gICAgICAgIHJlbmRlcmVyU2V0dGluZ3M6IHJlbmRlcmVyU2V0dGluZ3NcbiAgICAgIH07XG5cbiAgICAgIHRoaXMub3B0aW9ucyA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgIHRoaXMuYW5pbSA9IF9sb3R0aWVXZWIyLmRlZmF1bHQubG9hZEFuaW1hdGlvbih0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy5yZWdpc3RlckV2ZW50cyhldmVudExpc3RlbmVycyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzIC8qICwgbmV4dFN0YXRlICovKSB7XG4gICAgICAvKiBSZWNyZWF0ZSB0aGUgYW5pbWF0aW9uIGhhbmRsZSBpZiB0aGUgZGF0YSBpcyBjaGFuZ2VkICovXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbkRhdGEgIT09IG5leHRQcm9wcy5vcHRpb25zLmFuaW1hdGlvbkRhdGEpIHtcbiAgICAgICAgdGhpcy5kZVJlZ2lzdGVyRXZlbnRzKHRoaXMucHJvcHMuZXZlbnRMaXN0ZW5lcnMpO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgdGhpcy5vcHRpb25zLCBuZXh0UHJvcHMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYW5pbSA9IF9sb3R0aWVXZWIyLmRlZmF1bHQubG9hZEFuaW1hdGlvbih0aGlzLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRzKG5leHRQcm9wcy5ldmVudExpc3RlbmVycyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuaXNTdG9wcGVkKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnNlZ21lbnRzKSB7XG4gICAgICAgIHRoaXMucGxheVNlZ21lbnRzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgdGhpcy5zZXRTcGVlZCgpO1xuICAgICAgdGhpcy5zZXREaXJlY3Rpb24oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5kZVJlZ2lzdGVyRXZlbnRzKHRoaXMucHJvcHMuZXZlbnRMaXN0ZW5lcnMpO1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRGF0YSA9IG51bGw7XG4gICAgICB0aGlzLmFuaW0gPSBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFNwZWVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3BlZWQoKSB7XG4gICAgICB0aGlzLmFuaW0uc2V0U3BlZWQodGhpcy5wcm9wcy5zcGVlZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0RGlyZWN0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGlyZWN0aW9uKCkge1xuICAgICAgdGhpcy5hbmltLnNldERpcmVjdGlvbih0aGlzLnByb3BzLmRpcmVjdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGxheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB0aGlzLmFuaW0ucGxheSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BsYXlTZWdtZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXlTZWdtZW50cygpIHtcbiAgICAgIHRoaXMuYW5pbS5wbGF5U2VnbWVudHModGhpcy5wcm9wcy5zZWdtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLmFuaW0uc3RvcCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5pc1BhdXNlZCAmJiAhdGhpcy5hbmltLmlzUGF1c2VkKSB7XG4gICAgICAgIHRoaXMuYW5pbS5wYXVzZSgpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5wcm9wcy5pc1BhdXNlZCAmJiB0aGlzLmFuaW0uaXNQYXVzZWQpIHtcbiAgICAgICAgdGhpcy5hbmltLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmFuaW0uZGVzdHJveSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlZ2lzdGVyRXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJFdmVudHMoZXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBldmVudExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudExpc3RlbmVyKSB7XG4gICAgICAgIF90aGlzMi5hbmltLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRMaXN0ZW5lci5ldmVudE5hbWUsIGV2ZW50TGlzdGVuZXIuY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVSZWdpc3RlckV2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlUmVnaXN0ZXJFdmVudHMoZXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBldmVudExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudExpc3RlbmVyKSB7XG4gICAgICAgIF90aGlzMy5hbmltLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRMaXN0ZW5lci5ldmVudE5hbWUsIGV2ZW50TGlzdGVuZXIuY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB3aWR0aCA9IF9wcm9wczIud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gX3Byb3BzMi5oZWlnaHQsXG4gICAgICAgICAgYXJpYVJvbGUgPSBfcHJvcHMyLmFyaWFSb2xlLFxuICAgICAgICAgIGFyaWFMYWJlbCA9IF9wcm9wczIuYXJpYUxhYmVsLFxuICAgICAgICAgIGlzQ2xpY2tUb1BhdXNlRGlzYWJsZWQgPSBfcHJvcHMyLmlzQ2xpY2tUb1BhdXNlRGlzYWJsZWQsXG4gICAgICAgICAgdGl0bGUgPSBfcHJvcHMyLnRpdGxlO1xuXG5cbiAgICAgIHZhciBnZXRTaXplID0gZnVuY3Rpb24gZ2V0U2l6ZShpbml0aWFsKSB7XG4gICAgICAgIHZhciBzaXplID0gdm9pZCAwO1xuXG4gICAgICAgIGlmICh0eXBlb2YgaW5pdGlhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBzaXplID0gaW5pdGlhbCArICdweCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2l6ZSA9IGluaXRpYWwgfHwgJzEwMCUnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbG90dGllU3R5bGVzID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgIHdpZHRoOiBnZXRTaXplKHdpZHRoKSxcbiAgICAgICAgaGVpZ2h0OiBnZXRTaXplKGhlaWdodCksXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICAgICAgb3V0bGluZTogJ25vbmUnXG4gICAgICB9LCB0aGlzLnByb3BzLnN0eWxlKTtcblxuICAgICAgdmFyIG9uQ2xpY2tIYW5kbGVyID0gaXNDbGlja1RvUGF1c2VEaXNhYmxlZCA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IDogdGhpcy5oYW5kbGVDbGlja1RvUGF1c2U7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIC8vIEJ1ZyB3aXRoIGVzbGludCBydWxlcyBodHRwczovL2dpdGh1Yi5jb20vYWlyYm5iL2phdmFzY3JpcHQvaXNzdWVzLzEzNzRcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L25vLXN0YXRpYy1lbGVtZW50LWludGVyYWN0aW9uc1xuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGMpIHtcbiAgICAgICAgICAgIF90aGlzNC5lbCA9IGM7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdHlsZTogbG90dGllU3R5bGVzLFxuICAgICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tIYW5kbGVyLFxuICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICByb2xlOiBhcmlhUm9sZSxcbiAgICAgICAgICAnYXJpYS1sYWJlbCc6IGFyaWFMYWJlbCxcbiAgICAgICAgICB0YWJJbmRleDogJzAnXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTG90dGllO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTG90dGllO1xuXG5cbkxvdHRpZS5wcm9wVHlwZXMgPSB7XG4gIGV2ZW50TGlzdGVuZXJzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QpLFxuICBvcHRpb25zOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuICBoZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJdKSxcbiAgd2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJdKSxcbiAgaXNTdG9wcGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGlzUGF1c2VkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNwZWVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgc2VnbWVudHM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlciksXG4gIGRpcmVjdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGFyaWFSb2xlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgYXJpYUxhYmVsOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgaXNDbGlja1RvUGF1c2VEaXNhYmxlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICB0aXRsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufTtcblxuTG90dGllLmRlZmF1bHRQcm9wcyA9IHtcbiAgZXZlbnRMaXN0ZW5lcnM6IFtdLFxuICBpc1N0b3BwZWQ6IGZhbHNlLFxuICBpc1BhdXNlZDogZmFsc2UsXG4gIHNwZWVkOiAxLFxuICBhcmlhUm9sZTogJ2J1dHRvbicsXG4gIGFyaWFMYWJlbDogJ2FuaW1hdGlvbicsXG4gIGlzQ2xpY2tUb1BhdXNlRGlzYWJsZWQ6IGZhbHNlLFxuICB0aXRsZTogJydcbn07IiwibW9kdWxlLmV4cG9ydHMgPSB3aW5kb3dbXCJSZWFjdFwiXTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5hbWRPID0ge307IiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHdpbmRvd1tcIlJlYWN0RE9NXCJdOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSB3aW5kb3dbXCJCbHVlcHJpbnRcIl1bXCJDb3JlXCJdOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSB3aW5kb3dbXCJCbHVlcHJpbnRcIl1bXCJTZWxlY3RcIl07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgeyBtZW1vaXplIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWJicnxhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmNyZW1lbnRhbHxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgeyBpc1Byb3BWYWxpZCBhcyBkZWZhdWx0IH07XG4iLCIvKlxuXG5CYXNlZCBvZmYgZ2xhbW9yJ3MgU3R5bGVTaGVldCwgdGhhbmtzIFN1bmlsIOKdpO+4j1xuXG5oaWdoIHBlcmZvcm1hbmNlIFN0eWxlU2hlZXQgZm9yIGNzcy1pbi1qcyBzeXN0ZW1zXG5cbi0gdXNlcyBtdWx0aXBsZSBzdHlsZSB0YWdzIGJlaGluZCB0aGUgc2NlbmVzIGZvciBtaWxsaW9ucyBvZiBydWxlc1xuLSB1c2VzIGBpbnNlcnRSdWxlYCBmb3IgYXBwZW5kaW5nIGluIHByb2R1Y3Rpb24gZm9yICptdWNoKiBmYXN0ZXIgcGVyZm9ybWFuY2VcblxuLy8gdXNhZ2VcblxuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0J1xuXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KHsga2V5OiAnJywgY29udGFpbmVyOiBkb2N1bWVudC5oZWFkIH0pXG5cbnN0eWxlU2hlZXQuaW5zZXJ0KCcjYm94IHsgYm9yZGVyOiAxcHggc29saWQgcmVkOyB9Jylcbi0gYXBwZW5kcyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXRcblxuc3R5bGVTaGVldC5mbHVzaCgpXG4tIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXQgb2YgYWxsIGl0cyBjb250ZW50c1xuXG4qL1xuLy8gJEZsb3dGaXhNZVxuZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIGlmICh0YWcuc2hlZXQpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ub3duZXJOb2RlID09PSB0YWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIG9wdGlvbnMua2V5KTtcblxuICBpZiAob3B0aW9ucy5ub25jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBvcHRpb25zLm5vbmNlKTtcbiAgfVxuXG4gIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gVXNpbmcgTm9kZSBpbnN0ZWFkIG9mIEhUTUxFbGVtZW50IHNpbmNlIGNvbnRhaW5lciBtYXkgYmUgYSBTaGFkb3dSb290XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9pbnNlcnRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICB2YXIgYmVmb3JlO1xuXG4gICAgICBpZiAoX3RoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKF90aGlzLmluc2VydGlvblBvaW50KSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuaW5zZXJ0aW9uUG9pbnQubmV4dFNpYmxpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucHJlcGVuZCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVmb3JlID0gX3RoaXMudGFnc1tfdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhZywgYmVmb3JlKTtcblxuICAgICAgX3RoaXMudGFncy5wdXNoKHRhZyk7XG4gICAgfTtcblxuICAgIHRoaXMuaXNTcGVlZHkgPSBvcHRpb25zLnNwZWVkeSA9PT0gdW5kZWZpbmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA6IG9wdGlvbnMuc3BlZWR5O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm5vbmNlID0gb3B0aW9ucy5ub25jZTsgLy8ga2V5IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSwgaXQncyB1c2VkIHRvIGlkZW50aWZ5IGRpZmZlcmVudCBzaGVldHNcblxuICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICB0aGlzLnByZXBlbmQgPSBvcHRpb25zLnByZXBlbmQ7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdGhpcy5iZWZvcmUgPSBudWxsO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oeWRyYXRlID0gZnVuY3Rpb24gaHlkcmF0ZShub2Rlcykge1xuICAgIG5vZGVzLmZvckVhY2godGhpcy5faW5zZXJ0VGFnKTtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB0aGlzLl9pbnNlcnRUYWcoY3JlYXRlU3R5bGVFbGVtZW50KHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNJbXBvcnRSdWxlID0gcnVsZS5jaGFyQ29kZUF0KDApID09PSA2NCAmJiBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNTtcblxuICAgICAgaWYgKGlzSW1wb3J0UnVsZSAmJiB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSkge1xuICAgICAgICAvLyB0aGlzIHdvdWxkIG9ubHkgY2F1c2UgcHJvYmxlbSBpbiBzcGVlZHkgbW9kZVxuICAgICAgICAvLyBidXQgd2UgZG9uJ3Qgd2FudCBlbmFibGluZyBzcGVlZHkgdG8gYWZmZWN0IHRoZSBvYnNlcnZhYmxlIGJlaGF2aW9yXG4gICAgICAgIC8vIHNvIHdlIHJlcG9ydCB0aGlzIGVycm9yIGF0IGFsbCB0aW1lc1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91J3JlIGF0dGVtcHRpbmcgdG8gaW5zZXJ0IHRoZSBmb2xsb3dpbmcgcnVsZTpcXG5cIiArIHJ1bGUgKyAnXFxuXFxuYEBpbXBvcnRgIHJ1bGVzIG11c3QgYmUgYmVmb3JlIGFsbCBvdGhlciB0eXBlcyBvZiBydWxlcyBpbiBhIHN0eWxlc2hlZXQgYnV0IG90aGVyIHJ1bGVzIGhhdmUgYWxyZWFkeSBiZWVuIGluc2VydGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgYEBpbXBvcnRgIHJ1bGVzIGFyZSBiZWZvcmUgYWxsIG90aGVyIHJ1bGVzLicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSB8fCAhaXNJbXBvcnRSdWxlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIS86KC1tb3otcGxhY2Vob2xkZXJ8LW1vei1mb2N1cy1pbm5lcnwtbW96LWZvY3VzcmluZ3wtbXMtaW5wdXQtcGxhY2Vob2xkZXJ8LW1vei1yZWFkLXdyaXRlfC1tb3otcmVhZC1vbmx5fC1tcy1jbGVhcnwtbXMtZXhwYW5kfC1tcy1yZXZlYWwpey8udGVzdChydWxlKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluc2VydGluZyB0aGUgZm9sbG93aW5nIHJ1bGU6IFxcXCJcIiArIHJ1bGUgKyBcIlxcXCJcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUgJiYgdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsIi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnNcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBmcm9tID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2ggKHZhbHVlLCBsZW5ndGgpIHtcblx0cmV0dXJuIGNoYXJhdCh2YWx1ZSwgMCkgXiA0NSA/ICgoKCgoKChsZW5ndGggPDwgMikgXiBjaGFyYXQodmFsdWUsIDApKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMSkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAyKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDMpIDogMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpbSAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLnRyaW0oKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtSZWdFeHB9IHBhdHRlcm5cbiAqIEByZXR1cm4ge3N0cmluZz99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaCAodmFsdWUsIHBhdHRlcm4pIHtcblx0cmV0dXJuICh2YWx1ZSA9IHBhdHRlcm4uZXhlYyh2YWx1ZSkpID8gdmFsdWVbMF0gOiB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCl9IHBhdHRlcm5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlbWVudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZSAodmFsdWUsIHBhdHRlcm4sIHJlcGxhY2VtZW50KSB7XG5cdHJldHVybiB2YWx1ZS5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2VtZW50KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhvZiAodmFsdWUsIHNlYXJjaCkge1xuXHRyZXR1cm4gdmFsdWUuaW5kZXhPZihzZWFyY2gpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXJhdCAodmFsdWUsIGluZGV4KSB7XG5cdHJldHVybiB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KSB8IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Vic3RyICh2YWx1ZSwgYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gdmFsdWUuc2xpY2UoYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmxlbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55W119IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplb2YgKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7YW55W119IGFycmF5XG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQgKHZhbHVlLCBhcnJheSkge1xuXHRyZXR1cm4gYXJyYXkucHVzaCh2YWx1ZSksIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJyYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lIChhcnJheSwgY2FsbGJhY2spIHtcblx0cmV0dXJuIGFycmF5Lm1hcChjYWxsYmFjaykuam9pbignJylcbn1cbiIsImltcG9ydCB7ZnJvbSwgdHJpbSwgY2hhcmF0LCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCBhc3NpZ259IGZyb20gJy4vVXRpbGl0eS5qcydcblxuZXhwb3J0IHZhciBsaW5lID0gMVxuZXhwb3J0IHZhciBjb2x1bW4gPSAxXG5leHBvcnQgdmFyIGxlbmd0aCA9IDBcbmV4cG9ydCB2YXIgcG9zaXRpb24gPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlciA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVycyA9ICcnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXSB8IHN0cmluZ30gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0W10gfCBzdHJpbmd9IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub2RlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHRyZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgcm9vdDogcm9vdCwgcGFyZW50OiBwYXJlbnQsIHR5cGU6IHR5cGUsIHByb3BzOiBwcm9wcywgY2hpbGRyZW46IGNoaWxkcmVuLCBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiwgbGVuZ3RoOiBsZW5ndGgsIHJldHVybjogJyd9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weSAocm9vdCwgcHJvcHMpIHtcblx0cmV0dXJuIGFzc2lnbihub2RlKCcnLCBudWxsLCBudWxsLCAnJywgbnVsbCwgbnVsbCwgMCksIHJvb3QsIHtsZW5ndGg6IC1yb290Lmxlbmd0aH0sIHByb3BzKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXIgKCkge1xuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJldiAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uID4gMCA/IGNoYXJhdChjaGFyYWN0ZXJzLCAtLXBvc2l0aW9uKSA6IDBcblxuXHRpZiAoY29sdW1uLS0sIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZS0tXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5leHQgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA8IGxlbmd0aCA/IGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbisrKSA6IDBcblxuXHRpZiAoY29sdW1uKyssIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZSsrXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlZWsgKCkge1xuXHRyZXR1cm4gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcmV0ICgpIHtcblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGljZSAoYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gc3Vic3RyKGNoYXJhY3RlcnMsIGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuICh0eXBlKSB7XG5cdHN3aXRjaCAodHlwZSkge1xuXHRcdC8vIFxcMCBcXHQgXFxuIFxcciBcXHMgd2hpdGVzcGFjZSB0b2tlblxuXHRcdGNhc2UgMDogY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEzOiBjYXNlIDMyOlxuXHRcdFx0cmV0dXJuIDVcblx0XHQvLyAhICsgLCAvID4gQCB+IGlzb2xhdGUgdG9rZW5cblx0XHRjYXNlIDMzOiBjYXNlIDQzOiBjYXNlIDQ0OiBjYXNlIDQ3OiBjYXNlIDYyOiBjYXNlIDY0OiBjYXNlIDEyNjpcblx0XHQvLyA7IHsgfSBicmVha3BvaW50IHRva2VuXG5cdFx0Y2FzZSA1OTogY2FzZSAxMjM6IGNhc2UgMTI1OlxuXHRcdFx0cmV0dXJuIDRcblx0XHQvLyA6IGFjY29tcGFuaWVkIHRva2VuXG5cdFx0Y2FzZSA1ODpcblx0XHRcdHJldHVybiAzXG5cdFx0Ly8gXCIgJyAoIFsgb3BlbmluZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSAzNDogY2FzZSAzOTogY2FzZSA0MDogY2FzZSA5MTpcblx0XHRcdHJldHVybiAyXG5cdFx0Ly8gKSBdIGNsb3NpbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgNDE6IGNhc2UgOTM6XG5cdFx0XHRyZXR1cm4gMVxuXHR9XG5cblx0cmV0dXJuIDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge2FueVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBsaW5lID0gY29sdW1uID0gMSwgbGVuZ3RoID0gc3RybGVuKGNoYXJhY3RlcnMgPSB2YWx1ZSksIHBvc2l0aW9uID0gMCwgW11cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJzID0gJycsIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXQgKHR5cGUpIHtcblx0cmV0dXJuIHRyaW0oc2xpY2UocG9zaXRpb24gLSAxLCBkZWxpbWl0ZXIodHlwZSA9PT0gOTEgPyB0eXBlICsgMiA6IHR5cGUgPT09IDQwID8gdHlwZSArIDEgOiB0eXBlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyh0b2tlbml6ZXIoYWxsb2ModmFsdWUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hpdGVzcGFjZSAodHlwZSkge1xuXHR3aGlsZSAoY2hhcmFjdGVyID0gcGVlaygpKVxuXHRcdGlmIChjaGFyYWN0ZXIgPCAzMylcblx0XHRcdG5leHQoKVxuXHRcdGVsc2Vcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHRva2VuKHR5cGUpID4gMiB8fCB0b2tlbihjaGFyYWN0ZXIpID4gMyA/ICcnIDogJyAnXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemVyIChjaGlsZHJlbikge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuXHRcdFx0Y2FzZSAwOiBhcHBlbmQoaWRlbnRpZmllcihwb3NpdGlvbiAtIDEpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjogYXBwZW5kKGRlbGltaXQoY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRkZWZhdWx0OiBhcHBlbmQoZnJvbShjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHR9XG5cblx0cmV0dXJuIGNoaWxkcmVuXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwaW5nIChpbmRleCwgY291bnQpIHtcblx0d2hpbGUgKC0tY291bnQgJiYgbmV4dCgpKVxuXHRcdC8vIG5vdCAwLTkgQS1GIGEtZlxuXHRcdGlmIChjaGFyYWN0ZXIgPCA0OCB8fCBjaGFyYWN0ZXIgPiAxMDIgfHwgKGNoYXJhY3RlciA+IDU3ICYmIGNoYXJhY3RlciA8IDY1KSB8fCAoY2hhcmFjdGVyID4gNzAgJiYgY2hhcmFjdGVyIDwgOTcpKVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIGNhcmV0KCkgKyAoY291bnQgPCA2ICYmIHBlZWsoKSA9PSAzMiAmJiBuZXh0KCkgPT0gMzIpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ZXIgKHR5cGUpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0Ly8gXSApIFwiICdcblx0XHRcdGNhc2UgdHlwZTpcblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uXG5cdFx0XHQvLyBcIiAnXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OlxuXHRcdFx0XHRpZiAodHlwZSAhPT0gMzQgJiYgdHlwZSAhPT0gMzkpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKGNoYXJhY3Rlcilcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmICh0eXBlID09PSA0MSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIodHlwZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRuZXh0KClcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudGVyICh0eXBlLCBpbmRleCkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdC8vIC8vXG5cdFx0aWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQ3ICsgMTApXG5cdFx0XHRicmVha1xuXHRcdC8vIC8qXG5cdFx0ZWxzZSBpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDIgKyA0MiAmJiBwZWVrKCkgPT09IDQ3KVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gJy8qJyArIHNsaWNlKGluZGV4LCBwb3NpdGlvbiAtIDEpICsgJyonICsgZnJvbSh0eXBlID09PSA0NyA/IHR5cGUgOiBuZXh0KCkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGlmaWVyIChpbmRleCkge1xuXHR3aGlsZSAoIXRva2VuKHBlZWsoKSkpXG5cdFx0bmV4dCgpXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBwb3NpdGlvbilcbn1cbiIsImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbmV4cG9ydCB2YXIgTEFZRVIgPSAnQGxheWVyJ1xuIiwiaW1wb3J0IHtJTVBPUlQsIExBWUVSLCBDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTiwgS0VZRlJBTUVTfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge3N0cmxlbiwgc2l6ZW9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUgKGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHR2YXIgb3V0cHV0ID0gJydcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjaGlsZHJlbilcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdG91dHB1dCArPSBjYWxsYmFjayhjaGlsZHJlbltpXSwgaSwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdHJldHVybiBvdXRwdXRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgTEFZRVI6IGlmIChlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCkgYnJlYWtcblx0XHRjYXNlIElNUE9SVDogY2FzZSBERUNMQVJBVElPTjogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC5yZXR1cm4gfHwgZWxlbWVudC52YWx1ZVxuXHRcdGNhc2UgQ09NTUVOVDogcmV0dXJuICcnXG5cdFx0Y2FzZSBLRVlGUkFNRVM6IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spICsgJ30nXG5cdFx0Y2FzZSBSVUxFU0VUOiBlbGVtZW50LnZhbHVlID0gZWxlbWVudC5wcm9wcy5qb2luKCcsJylcblx0fVxuXG5cdHJldHVybiBzdHJsZW4oY2hpbGRyZW4gPSBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spKSA/IGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIGNoaWxkcmVuICsgJ30nIDogJydcbn1cbiIsImltcG9ydCB7Q09NTUVOVCwgUlVMRVNFVCwgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7YWJzLCBjaGFyYXQsIHRyaW0sIGZyb20sIHNpemVvZiwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgcmVwbGFjZSwgaW5kZXhvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtub2RlLCBjaGFyLCBwcmV2LCBuZXh0LCBwZWVrLCBjYXJldCwgYWxsb2MsIGRlYWxsb2MsIGRlbGltaXQsIHdoaXRlc3BhY2UsIGVzY2FwaW5nLCBpZGVudGlmaWVyLCBjb21tZW50ZXJ9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7b2JqZWN0W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyhwYXJzZSgnJywgbnVsbCwgbnVsbCwgbnVsbCwgWycnXSwgdmFsdWUgPSBhbGxvYyh2YWx1ZSksIDAsIFswXSwgdmFsdWUpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNldHNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBzZXVkb1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBkZWNsYXJhdGlvbnNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBydWxlLCBydWxlcywgcnVsZXNldHMsIHBzZXVkbywgcG9pbnRzLCBkZWNsYXJhdGlvbnMpIHtcblx0dmFyIGluZGV4ID0gMFxuXHR2YXIgb2Zmc2V0ID0gMFxuXHR2YXIgbGVuZ3RoID0gcHNldWRvXG5cdHZhciBhdHJ1bGUgPSAwXG5cdHZhciBwcm9wZXJ0eSA9IDBcblx0dmFyIHByZXZpb3VzID0gMFxuXHR2YXIgdmFyaWFibGUgPSAxXG5cdHZhciBzY2FubmluZyA9IDFcblx0dmFyIGFtcGVyc2FuZCA9IDFcblx0dmFyIGNoYXJhY3RlciA9IDBcblx0dmFyIHR5cGUgPSAnJ1xuXHR2YXIgcHJvcHMgPSBydWxlc1xuXHR2YXIgY2hpbGRyZW4gPSBydWxlc2V0c1xuXHR2YXIgcmVmZXJlbmNlID0gcnVsZVxuXHR2YXIgY2hhcmFjdGVycyA9IHR5cGVcblxuXHR3aGlsZSAoc2Nhbm5pbmcpXG5cdFx0c3dpdGNoIChwcmV2aW91cyA9IGNoYXJhY3RlciwgY2hhcmFjdGVyID0gbmV4dCgpKSB7XG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAocHJldmlvdXMgIT0gMTA4ICYmIGNoYXJhdChjaGFyYWN0ZXJzLCBsZW5ndGggLSAxKSA9PSA1OCkge1xuXHRcdFx0XHRcdGlmIChpbmRleG9mKGNoYXJhY3RlcnMgKz0gcmVwbGFjZShkZWxpbWl0KGNoYXJhY3RlciksICcmJywgJyZcXGYnKSwgJyZcXGYnKSAhPSAtMSlcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IC0xXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0fVxuXHRcdFx0Ly8gXCIgJyBbXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDkxOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFx0IFxcbiBcXHIgXFxzXG5cdFx0XHRjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gd2hpdGVzcGFjZShwcmV2aW91cylcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGVzY2FwaW5nKGNhcmV0KCkgLSAxLCA3KVxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0Ly8gL1xuXHRcdFx0Y2FzZSA0Nzpcblx0XHRcdFx0c3dpdGNoIChwZWVrKCkpIHtcblx0XHRcdFx0XHRjYXNlIDQyOiBjYXNlIDQ3OlxuXHRcdFx0XHRcdFx0YXBwZW5kKGNvbW1lbnQoY29tbWVudGVyKG5leHQoKSwgY2FyZXQoKSksIHJvb3QsIHBhcmVudCksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gJy8nXG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIHtcblx0XHRcdGNhc2UgMTIzICogdmFyaWFibGU6XG5cdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IHN0cmxlbihjaGFyYWN0ZXJzKSAqIGFtcGVyc2FuZFxuXHRcdFx0Ly8gfSA7IFxcMFxuXHRcdFx0Y2FzZSAxMjUgKiB2YXJpYWJsZTogY2FzZSA1OTogY2FzZSAwOlxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0XHRcdC8vIFxcMCB9XG5cdFx0XHRcdFx0Y2FzZSAwOiBjYXNlIDEyNTogc2Nhbm5pbmcgPSAwXG5cdFx0XHRcdFx0Ly8gO1xuXHRcdFx0XHRcdGNhc2UgNTkgKyBvZmZzZXQ6IGlmIChhbXBlcnNhbmQgPT0gLTEpIGNoYXJhY3RlcnMgPSByZXBsYWNlKGNoYXJhY3RlcnMsIC9cXGYvZywgJycpXG5cdFx0XHRcdFx0XHRpZiAocHJvcGVydHkgPiAwICYmIChzdHJsZW4oY2hhcmFjdGVycykgLSBsZW5ndGgpKVxuXHRcdFx0XHRcdFx0XHRhcHBlbmQocHJvcGVydHkgPiAzMiA/IGRlY2xhcmF0aW9uKGNoYXJhY3RlcnMgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMSkgOiBkZWNsYXJhdGlvbihyZXBsYWNlKGNoYXJhY3RlcnMsICcgJywgJycpICsgJzsnLCBydWxlLCBwYXJlbnQsIGxlbmd0aCAtIDIpLCBkZWNsYXJhdGlvbnMpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIEAgO1xuXHRcdFx0XHRcdGNhc2UgNTk6IGNoYXJhY3RlcnMgKz0gJzsnXG5cdFx0XHRcdFx0Ly8geyBydWxlL2F0LXJ1bGVcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0YXBwZW5kKHJlZmVyZW5jZSA9IHJ1bGVzZXQoY2hhcmFjdGVycywgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcyA9IFtdLCBjaGlsZHJlbiA9IFtdLCBsZW5ndGgpLCBydWxlc2V0cylcblxuXHRcdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PT0gMTIzKVxuXHRcdFx0XHRcdFx0XHRpZiAob2Zmc2V0ID09PSAwKVxuXHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJvb3QsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBwcm9wcywgcnVsZXNldHMsIGxlbmd0aCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoYXRydWxlID09PSA5OSAmJiBjaGFyYXQoY2hhcmFjdGVycywgMykgPT09IDExMCA/IDEwMCA6IGF0cnVsZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZCBsIG0gc1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxMDA6IGNhc2UgMTA4OiBjYXNlIDEwOTogY2FzZSAxMTU6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlKHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcnVsZSAmJiBhcHBlbmQocnVsZXNldCh2YWx1ZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIDAsIDAsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHJ1bGVzLCBwcm9wcyA9IFtdLCBsZW5ndGgpLCBjaGlsZHJlbiksIHJ1bGVzLCBjaGlsZHJlbiwgbGVuZ3RoLCBwb2ludHMsIHJ1bGUgPyBwcm9wcyA6IGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgWycnXSwgY2hpbGRyZW4sIDAsIHBvaW50cywgY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW5kZXggPSBvZmZzZXQgPSBwcm9wZXJ0eSA9IDAsIHZhcmlhYmxlID0gYW1wZXJzYW5kID0gMSwgdHlwZSA9IGNoYXJhY3RlcnMgPSAnJywgbGVuZ3RoID0gcHNldWRvXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyA6XG5cdFx0XHRjYXNlIDU4OlxuXHRcdFx0XHRsZW5ndGggPSAxICsgc3RybGVuKGNoYXJhY3RlcnMpLCBwcm9wZXJ0eSA9IHByZXZpb3VzXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZiAodmFyaWFibGUgPCAxKVxuXHRcdFx0XHRcdGlmIChjaGFyYWN0ZXIgPT0gMTIzKVxuXHRcdFx0XHRcdFx0LS12YXJpYWJsZVxuXHRcdFx0XHRcdGVsc2UgaWYgKGNoYXJhY3RlciA9PSAxMjUgJiYgdmFyaWFibGUrKyA9PSAwICYmIHByZXYoKSA9PSAxMjUpXG5cdFx0XHRcdFx0XHRjb250aW51ZVxuXG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVycyArPSBmcm9tKGNoYXJhY3RlciksIGNoYXJhY3RlciAqIHZhcmlhYmxlKSB7XG5cdFx0XHRcdFx0Ly8gJlxuXHRcdFx0XHRcdGNhc2UgMzg6XG5cdFx0XHRcdFx0XHRhbXBlcnNhbmQgPSBvZmZzZXQgPiAwID8gMSA6IChjaGFyYWN0ZXJzICs9ICdcXGYnLCAtMSlcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLFxuXHRcdFx0XHRcdGNhc2UgNDQ6XG5cdFx0XHRcdFx0XHRwb2ludHNbaW5kZXgrK10gPSAoc3RybGVuKGNoYXJhY3RlcnMpIC0gMSkgKiBhbXBlcnNhbmQsIGFtcGVyc2FuZCA9IDFcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQFxuXHRcdFx0XHRcdGNhc2UgNjQ6XG5cdFx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0XHRpZiAocGVlaygpID09PSA0NSlcblx0XHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSBkZWxpbWl0KG5leHQoKSlcblxuXHRcdFx0XHRcdFx0YXRydWxlID0gcGVlaygpLCBvZmZzZXQgPSBsZW5ndGggPSBzdHJsZW4odHlwZSA9IGNoYXJhY3RlcnMgKz0gaWRlbnRpZmllcihjYXJldCgpKSksIGNoYXJhY3RlcisrXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRjYXNlIDQ1OlxuXHRcdFx0XHRcdFx0aWYgKHByZXZpb3VzID09PSA0NSAmJiBzdHJsZW4oY2hhcmFjdGVycykgPT0gMilcblx0XHRcdFx0XHRcdFx0dmFyaWFibGUgPSAwXG5cdFx0XHRcdH1cblx0XHR9XG5cblx0cmV0dXJuIHJ1bGVzZXRzXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBvaW50c1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNldCAodmFsdWUsIHJvb3QsIHBhcmVudCwgaW5kZXgsIG9mZnNldCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpIHtcblx0dmFyIHBvc3QgPSBvZmZzZXQgLSAxXG5cdHZhciBydWxlID0gb2Zmc2V0ID09PSAwID8gcnVsZXMgOiBbJyddXG5cdHZhciBzaXplID0gc2l6ZW9mKHJ1bGUpXG5cblx0Zm9yICh2YXIgaSA9IDAsIGogPSAwLCBrID0gMDsgaSA8IGluZGV4OyArK2kpXG5cdFx0Zm9yICh2YXIgeCA9IDAsIHkgPSBzdWJzdHIodmFsdWUsIHBvc3QgKyAxLCBwb3N0ID0gYWJzKGogPSBwb2ludHNbaV0pKSwgeiA9IHZhbHVlOyB4IDwgc2l6ZTsgKyt4KVxuXHRcdFx0aWYgKHogPSB0cmltKGogPiAwID8gcnVsZVt4XSArICcgJyArIHkgOiByZXBsYWNlKHksIC8mXFxmL2csIHJ1bGVbeF0pKSlcblx0XHRcdFx0cHJvcHNbaysrXSA9IHpcblxuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBvZmZzZXQgPT09IDAgPyBSVUxFU0VUIDogdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnQgKHZhbHVlLCByb290LCBwYXJlbnQpIHtcblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgQ09NTUVOVCwgZnJvbShjaGFyKCkpLCBzdWJzdHIodmFsdWUsIDIsIC0yKSwgMClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyYXRpb24gKHZhbHVlLCByb290LCBwYXJlbnQsIGxlbmd0aCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBERUNMQVJBVElPTiwgc3Vic3RyKHZhbHVlLCAwLCBsZW5ndGgpLCBzdWJzdHIodmFsdWUsIGxlbmd0aCArIDEsIC0xKSwgbGVuZ3RoKVxufVxuIiwiaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0JztcbmltcG9ydCB7IGRlYWxsb2MsIGFsbG9jLCBuZXh0LCB0b2tlbiwgZnJvbSwgcGVlaywgZGVsaW1pdCwgc2xpY2UsIHBvc2l0aW9uLCBSVUxFU0VULCBjb21iaW5lLCBtYXRjaCwgc2VyaWFsaXplLCBjb3B5LCByZXBsYWNlLCBXRUJLSVQsIE1PWiwgTVMsIEtFWUZSQU1FUywgREVDTEFSQVRJT04sIGhhc2gsIGNoYXJhdCwgc3RybGVuLCBpbmRleG9mLCBzdHJpbmdpZnksIENPTU1FTlQsIHJ1bGVzaGVldCwgbWlkZGxld2FyZSwgY29tcGlsZSB9IGZyb20gJ3N0eWxpcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nID0gZnVuY3Rpb24gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKGJlZ2luLCBwb2ludHMsIGluZGV4KSB7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSAwO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgcHJldmlvdXMgPSBjaGFyYWN0ZXI7XG4gICAgY2hhcmFjdGVyID0gcGVlaygpOyAvLyAmXFxmXG5cbiAgICBpZiAocHJldmlvdXMgPT09IDM4ICYmIGNoYXJhY3RlciA9PT0gMTIpIHtcbiAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgIH1cblxuICAgIGlmICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBuZXh0KCk7XG4gIH1cblxuICByZXR1cm4gc2xpY2UoYmVnaW4sIHBvc2l0aW9uKTtcbn07XG5cbnZhciB0b1J1bGVzID0gZnVuY3Rpb24gdG9SdWxlcyhwYXJzZWQsIHBvaW50cykge1xuICAvLyBwcmV0ZW5kIHdlJ3ZlIHN0YXJ0ZWQgd2l0aCBhIGNvbW1hXG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgY2hhcmFjdGVyID0gNDQ7XG5cbiAgZG8ge1xuICAgIHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICAvLyAmXFxmXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDM4ICYmIHBlZWsoKSA9PT0gMTIpIHtcbiAgICAgICAgICAvLyB0aGlzIGlzIG5vdCAxMDAlIGNvcnJlY3QsIHdlIGRvbid0IGFjY291bnQgZm9yIGxpdGVyYWwgc2VxdWVuY2VzIGhlcmUgLSBsaWtlIGZvciBleGFtcGxlIHF1b3RlZCBzdHJpbmdzXG4gICAgICAgICAgLy8gc3R5bGlzIGluc2VydHMgXFxmIGFmdGVyICYgdG8ga25vdyB3aGVuICYgd2hlcmUgaXQgc2hvdWxkIHJlcGxhY2UgdGhpcyBzZXF1ZW5jZSB3aXRoIHRoZSBjb250ZXh0IHNlbGVjdG9yXG4gICAgICAgICAgLy8gYW5kIHdoZW4gaXQgc2hvdWxkIGp1c3QgY29uY2F0ZW5hdGUgdGhlIG91dGVyIGFuZCBpbm5lciBzZWxlY3RvcnNcbiAgICAgICAgICAvLyBpdCdzIHZlcnkgdW5saWtlbHkgZm9yIHRoaXMgc2VxdWVuY2UgdG8gYWN0dWFsbHkgYXBwZWFyIGluIGEgZGlmZmVyZW50IGNvbnRleHQsIHNvIHdlIGp1c3QgbGV2ZXJhZ2UgdGhpcyBmYWN0IGhlcmVcbiAgICAgICAgICBwb2ludHNbaW5kZXhdID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKHBvc2l0aW9uIC0gMSwgcG9pbnRzLCBpbmRleCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZGVsaW1pdChjaGFyYWN0ZXIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA0OlxuICAgICAgICAvLyBjb21tYVxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSA0NCkge1xuICAgICAgICAgIC8vIGNvbG9uXG4gICAgICAgICAgcGFyc2VkWysraW5kZXhdID0gcGVlaygpID09PSA1OCA/ICcmXFxmJyA6ICcnO1xuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSBwYXJzZWRbaW5kZXhdLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxsdGhyb3VnaFxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGZyb20oY2hhcmFjdGVyKTtcbiAgICB9XG4gIH0gd2hpbGUgKGNoYXJhY3RlciA9IG5leHQoKSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbnZhciBnZXRSdWxlcyA9IGZ1bmN0aW9uIGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpIHtcbiAgcmV0dXJuIGRlYWxsb2ModG9SdWxlcyhhbGxvYyh2YWx1ZSksIHBvaW50cykpO1xufTsgLy8gV2Vha1NldCB3b3VsZCBiZSBtb3JlIGFwcHJvcHJpYXRlLCBidXQgb25seSBXZWFrTWFwIGlzIHN1cHBvcnRlZCBpbiBJRTExXG5cblxudmFyIGZpeGVkRWxlbWVudHMgPSAvKiAjX19QVVJFX18gKi9uZXcgV2Vha01hcCgpO1xudmFyIGNvbXBhdCA9IGZ1bmN0aW9uIGNvbXBhdChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgIT09ICdydWxlJyB8fCAhZWxlbWVudC5wYXJlbnQgfHwgLy8gcG9zaXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgY29udGFpbnMgcHNldWRvXG4gIC8vIG5lZ2F0aXZlIC5sZW5ndGggaW5kaWNhdGVzIHRoYXQgdGhpcyBydWxlIGhhcyBiZWVuIGFscmVhZHkgcHJlZml4ZWRcbiAgZWxlbWVudC5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZSxcbiAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50O1xuICB2YXIgaXNJbXBsaWNpdFJ1bGUgPSBlbGVtZW50LmNvbHVtbiA9PT0gcGFyZW50LmNvbHVtbiAmJiBlbGVtZW50LmxpbmUgPT09IHBhcmVudC5saW5lO1xuXG4gIHdoaWxlIChwYXJlbnQudHlwZSAhPT0gJ3J1bGUnKSB7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICBpZiAoIXBhcmVudCkgcmV0dXJuO1xuICB9IC8vIHNob3J0LWNpcmN1aXQgZm9yIHRoZSBzaW1wbGVzdCBjYXNlXG5cblxuICBpZiAoZWxlbWVudC5wcm9wcy5sZW5ndGggPT09IDEgJiYgdmFsdWUuY2hhckNvZGVBdCgwKSAhPT0gNThcbiAgLyogY29sb24gKi9cbiAgJiYgIWZpeGVkRWxlbWVudHMuZ2V0KHBhcmVudCkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gaWYgdGhpcyBpcyBhbiBpbXBsaWNpdGx5IGluc2VydGVkIHJ1bGUgKHRoZSBvbmUgZWFnZXJseSBpbnNlcnRlZCBhdCB0aGUgZWFjaCBuZXcgbmVzdGVkIGxldmVsKVxuICAvLyB0aGVuIHRoZSBwcm9wcyBoYXMgYWxyZWFkeSBiZWVuIG1hbmlwdWxhdGVkIGJlZm9yZWhhbmQgYXMgdGhleSB0aGF0IGFycmF5IGlzIHNoYXJlZCBiZXR3ZWVuIGl0IGFuZCBpdHMgXCJydWxlIHBhcmVudFwiXG5cblxuICBpZiAoaXNJbXBsaWNpdFJ1bGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmaXhlZEVsZW1lbnRzLnNldChlbGVtZW50LCB0cnVlKTtcbiAgdmFyIHBvaW50cyA9IFtdO1xuICB2YXIgcnVsZXMgPSBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKTtcbiAgdmFyIHBhcmVudFJ1bGVzID0gcGFyZW50LnByb3BzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJlbnRSdWxlcy5sZW5ndGg7IGorKywgaysrKSB7XG4gICAgICBlbGVtZW50LnByb3BzW2tdID0gcG9pbnRzW2ldID8gcnVsZXNbaV0ucmVwbGFjZSgvJlxcZi9nLCBwYXJlbnRSdWxlc1tqXSkgOiBwYXJlbnRSdWxlc1tqXSArIFwiIFwiICsgcnVsZXNbaV07XG4gICAgfVxuICB9XG59O1xudmFyIHJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlID09PSAnZGVjbCcpIHtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuXG4gICAgaWYgKCAvLyBjaGFyY29kZSBmb3IgbFxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDEwOCAmJiAvLyBjaGFyY29kZSBmb3IgYlxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMikgPT09IDk4KSB7XG4gICAgICAvLyB0aGlzIGlnbm9yZXMgbGFiZWxcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgICAgIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgICB9XG4gIH1cbn07XG52YXIgaWdub3JlRmxhZyA9ICdlbW90aW9uLWRpc2FibGUtc2VydmVyLXJlbmRlcmluZy11bnNhZmUtc2VsZWN0b3Itd2FybmluZy1wbGVhc2UtZG8tbm90LXVzZS10aGlzLXRoZS13YXJuaW5nLWV4aXN0cy1mb3ItYS1yZWFzb24nO1xuXG52YXIgaXNJZ25vcmluZ0NvbW1lbnQgPSBmdW5jdGlvbiBpc0lnbm9yaW5nQ29tbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUgPT09ICdjb21tJyAmJiBlbGVtZW50LmNoaWxkcmVuLmluZGV4T2YoaWdub3JlRmxhZykgPiAtMTtcbn07XG5cbnZhciBjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSA9IGZ1bmN0aW9uIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKGNhY2hlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuKSB7XG4gICAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnIHx8IGNhY2hlLmNvbXBhdCkgcmV0dXJuO1xuICAgIHZhciB1bnNhZmVQc2V1ZG9DbGFzc2VzID0gZWxlbWVudC52YWx1ZS5tYXRjaCgvKDpmaXJzdHw6bnRofDpudGgtbGFzdCktY2hpbGQvZyk7XG5cbiAgICBpZiAodW5zYWZlUHNldWRvQ2xhc3Nlcykge1xuICAgICAgdmFyIGlzTmVzdGVkID0gISFlbGVtZW50LnBhcmVudDsgLy8gaW4gbmVzdGVkIHJ1bGVzIGNvbW1lbnRzIGJlY29tZSBjaGlsZHJlbiBvZiB0aGUgXCJhdXRvLWluc2VydGVkXCIgcnVsZSBhbmQgdGhhdCdzIGFsd2F5cyB0aGUgYGVsZW1lbnQucGFyZW50YFxuICAgICAgLy9cbiAgICAgIC8vIGNvbnNpZGVyaW5nIHRoaXMgaW5wdXQ6XG4gICAgICAvLyAuYSB7XG4gICAgICAvLyAgIC5iIC8qIGNvbW0gKi8ge31cbiAgICAgIC8vICAgY29sb3I6IGhvdHBpbms7XG4gICAgICAvLyB9XG4gICAgICAvLyB3ZSBnZXQgb3V0cHV0IGNvcnJlc3BvbmRpbmcgdG8gdGhpczpcbiAgICAgIC8vIC5hIHtcbiAgICAgIC8vICAgJiB7XG4gICAgICAvLyAgICAgLyogY29tbSAqL1xuICAgICAgLy8gICAgIGNvbG9yOiBob3RwaW5rO1xuICAgICAgLy8gICB9XG4gICAgICAvLyAgIC5iIHt9XG4gICAgICAvLyB9XG5cbiAgICAgIHZhciBjb21tZW50Q29udGFpbmVyID0gaXNOZXN0ZWQgPyBlbGVtZW50LnBhcmVudC5jaGlsZHJlbiA6IC8vIGdsb2JhbCBydWxlIGF0IHRoZSByb290IGxldmVsXG4gICAgICBjaGlsZHJlbjtcblxuICAgICAgZm9yICh2YXIgaSA9IGNvbW1lbnRDb250YWluZXIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIG5vZGUgPSBjb21tZW50Q29udGFpbmVyW2ldO1xuXG4gICAgICAgIGlmIChub2RlLmxpbmUgPCBlbGVtZW50LmxpbmUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAvLyBpdCBpcyBxdWl0ZSB3ZWlyZCBidXQgY29tbWVudHMgYXJlICp1c3VhbGx5KiBwdXQgYXQgYGNvbHVtbjogZWxlbWVudC5jb2x1bW4gLSAxYFxuICAgICAgICAvLyBzbyB3ZSBzZWVrICpmcm9tIHRoZSBlbmQqIGZvciB0aGUgbm9kZSB0aGF0IGlzIGVhcmxpZXIgdGhhbiB0aGUgcnVsZSdzIGBlbGVtZW50YCBhbmQgY2hlY2sgdGhhdFxuICAgICAgICAvLyB0aGlzIHdpbGwgYWxzbyBtYXRjaCBpbnB1dHMgbGlrZSB0aGlzOlxuICAgICAgICAvLyAuYSB7XG4gICAgICAgIC8vICAgLyogY29tbSAqL1xuICAgICAgICAvLyAgIC5iIHt9XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gYnV0IHRoYXQgaXMgZmluZVxuICAgICAgICAvL1xuICAgICAgICAvLyBpdCB3b3VsZCBiZSB0aGUgZWFzaWVzdCB0byBjaGFuZ2UgdGhlIHBsYWNlbWVudCBvZiB0aGUgY29tbWVudCB0byBiZSB0aGUgZmlyc3QgY2hpbGQgb2YgdGhlIHJ1bGU6XG4gICAgICAgIC8vIC5hIHtcbiAgICAgICAgLy8gICAuYiB7IC8qIGNvbW0gKi8gfVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHdpdGggc3VjaCBpbnB1dHMgd2Ugd291bGRuJ3QgaGF2ZSB0byBzZWFyY2ggZm9yIHRoZSBjb21tZW50IGF0IGFsbFxuICAgICAgICAvLyBUT0RPOiBjb25zaWRlciBjaGFuZ2luZyB0aGlzIGNvbW1lbnQgcGxhY2VtZW50IGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb25cblxuXG4gICAgICAgIGlmIChub2RlLmNvbHVtbiA8IGVsZW1lbnQuY29sdW1uKSB7XG4gICAgICAgICAgaWYgKGlzSWdub3JpbmdDb21tZW50KG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdW5zYWZlUHNldWRvQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh1bnNhZmVQc2V1ZG9DbGFzcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHBzZXVkbyBjbGFzcyBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcyArIFwiXFxcIiBpcyBwb3RlbnRpYWxseSB1bnNhZmUgd2hlbiBkb2luZyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIFRyeSBjaGFuZ2luZyBpdCB0byBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcy5zcGxpdCgnLWNoaWxkJylbMF0gKyBcIi1vZi10eXBlXFxcIi5cIik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgaXNJbXBvcnRSdWxlID0gZnVuY3Rpb24gaXNJbXBvcnRSdWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDEpID09PSAxMDUgJiYgZWxlbWVudC50eXBlLmNoYXJDb2RlQXQoMCkgPT09IDY0O1xufTtcblxudmFyIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyA9IGZ1bmN0aW9uIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoIWlzSW1wb3J0UnVsZShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07IC8vIHVzZSB0aGlzIHRvIHJlbW92ZSBpbmNvcnJlY3QgZWxlbWVudHMgZnJvbSBmdXJ0aGVyIHByb2Nlc3Npbmdcbi8vIHNvIHRoZXkgZG9uJ3QgZ2V0IGhhbmRlZCB0byB0aGUgYHNoZWV0YCAob3IgYW55dGhpbmcgZWxzZSlcbi8vIGFzIHRoYXQgY291bGQgcG90ZW50aWFsbHkgbGVhZCB0byBhZGRpdGlvbmFsIGxvZ3Mgd2hpY2ggaW4gdHVybiBjb3VsZCBiZSBvdmVyaGVsbWluZyB0byB0aGUgdXNlclxuXG5cbnZhciBudWxsaWZ5RWxlbWVudCA9IGZ1bmN0aW9uIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpIHtcbiAgZWxlbWVudC50eXBlID0gJyc7XG4gIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICBlbGVtZW50LmNoaWxkcmVuID0gJyc7XG4gIGVsZW1lbnQucHJvcHMgPSAnJztcbn07XG5cbnZhciBpbmNvcnJlY3RJbXBvcnRBbGFybSA9IGZ1bmN0aW9uIGluY29ycmVjdEltcG9ydEFsYXJtKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbikge1xuICBpZiAoIWlzSW1wb3J0UnVsZShlbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbGVtZW50LnBhcmVudCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgbmVzdGVkIGluc2lkZSBvdGhlciBydWxlcy4gUGxlYXNlIG1vdmUgaXQgdG8gdGhlIHRvcCBsZXZlbCBhbmQgcHV0IGl0IGJlZm9yZSByZWd1bGFyIHJ1bGVzLiBLZWVwIGluIG1pbmQgdGhhdCB0aGV5IGNhbiBvbmx5IGJlIHVzZWQgd2l0aGluIGdsb2JhbCBzdHlsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9IGVsc2UgaWYgKGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pKSB7XG4gICAgY29uc29sZS5lcnJvcihcImBAaW1wb3J0YCBydWxlcyBjYW4ndCBiZSBhZnRlciBvdGhlciBydWxlcy4gUGxlYXNlIHB1dCB5b3VyIGBAaW1wb3J0YCBydWxlcyBiZWZvcmUgeW91ciBvdGhlciBydWxlcy5cIik7XG4gICAgbnVsbGlmeUVsZW1lbnQoZWxlbWVudCk7XG4gIH1cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWZhbGx0aHJvdWdoICovXG5cbmZ1bmN0aW9uIHByZWZpeCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHN3aXRjaCAoaGFzaCh2YWx1ZSwgbGVuZ3RoKSkge1xuICAgIC8vIGNvbG9yLWFkanVzdFxuICAgIGNhc2UgNTEwMzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAncHJpbnQtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYW5pbWF0aW9uLCBhbmltYXRpb24tKGRlbGF5fGRpcmVjdGlvbnxkdXJhdGlvbnxmaWxsLW1vZGV8aXRlcmF0aW9uLWNvdW50fG5hbWV8cGxheS1zdGF0ZXx0aW1pbmctZnVuY3Rpb24pXG5cbiAgICBjYXNlIDU3Mzc6XG4gICAgY2FzZSA0MjAxOlxuICAgIGNhc2UgMzE3NzpcbiAgICBjYXNlIDM0MzM6XG4gICAgY2FzZSAxNjQxOlxuICAgIGNhc2UgNDQ1NzpcbiAgICBjYXNlIDI5MjE6IC8vIHRleHQtZGVjb3JhdGlvbiwgZmlsdGVyLCBjbGlwLXBhdGgsIGJhY2tmYWNlLXZpc2liaWxpdHksIGNvbHVtbiwgYm94LWRlY29yYXRpb24tYnJlYWtcblxuICAgIGNhc2UgNTU3MjpcbiAgICBjYXNlIDYzNTY6XG4gICAgY2FzZSA1ODQ0OlxuICAgIGNhc2UgMzE5MTpcbiAgICBjYXNlIDY2NDU6XG4gICAgY2FzZSAzMDA1OiAvLyBtYXNrLCBtYXNrLWltYWdlLCBtYXNrLShtb2RlfGNsaXB8c2l6ZSksIG1hc2stKHJlcGVhdHxvcmlnaW4pLCBtYXNrLXBvc2l0aW9uLCBtYXNrLWNvbXBvc2l0ZSxcblxuICAgIGNhc2UgNjM5MTpcbiAgICBjYXNlIDU4Nzk6XG4gICAgY2FzZSA1NjIzOlxuICAgIGNhc2UgNjEzNTpcbiAgICBjYXNlIDQ1OTk6XG4gICAgY2FzZSA0ODU1OiAvLyBiYWNrZ3JvdW5kLWNsaXAsIGNvbHVtbnMsIGNvbHVtbi0oY291bnR8ZmlsbHxnYXB8cnVsZXxydWxlLWNvbG9yfHJ1bGUtc3R5bGV8cnVsZS13aWR0aHxzcGFufHdpZHRoKVxuXG4gICAgY2FzZSA0MjE1OlxuICAgIGNhc2UgNjM4OTpcbiAgICBjYXNlIDUxMDk6XG4gICAgY2FzZSA1MzY1OlxuICAgIGNhc2UgNTYyMTpcbiAgICBjYXNlIDM4Mjk6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyBhcHBlYXJhbmNlLCB1c2VyLXNlbGVjdCwgdHJhbnNmb3JtLCBoeXBoZW5zLCB0ZXh0LXNpemUtYWRqdXN0XG5cbiAgICBjYXNlIDUzNDk6XG4gICAgY2FzZSA0MjQ2OlxuICAgIGNhc2UgNDgxMDpcbiAgICBjYXNlIDY5Njg6XG4gICAgY2FzZSAyNzU2OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTU9aICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gZmxleCwgZmxleC1kaXJlY3Rpb25cblxuICAgIGNhc2UgNjgyODpcbiAgICBjYXNlIDQyNjg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gb3JkZXJcblxuICAgIGNhc2UgNjE2NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYWxpZ24taXRlbXNcblxuICAgIGNhc2UgNTE4NzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIHJlcGxhY2UodmFsdWUsIC8oXFx3KykuKyg6W15dKykvLCBXRUJLSVQgKyAnYm94LSQxJDInICsgTVMgKyAnZmxleC0kMSQyJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1zZWxmXG5cbiAgICBjYXNlIDU0NDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWl0ZW0tJyArIHJlcGxhY2UodmFsdWUsIC9mbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWNvbnRlbnRcblxuICAgIGNhc2UgNDY3NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtbGluZS1wYWNrJyArIHJlcGxhY2UodmFsdWUsIC9hbGlnbi1jb250ZW50fGZsZXgtfC1zZWxmLywgJycpICsgdmFsdWU7XG4gICAgLy8gZmxleC1zaHJpbmtcblxuICAgIGNhc2UgNTU0ODpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ3NocmluaycsICduZWdhdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gZmxleC1iYXNpc1xuXG4gICAgY2FzZSA1MjkyOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnYmFzaXMnLCAncHJlZmVycmVkLXNpemUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtZ3Jvd1xuXG4gICAgY2FzZSA2MDYwOlxuICAgICAgcmV0dXJuIFdFQktJVCArICdib3gtJyArIHJlcGxhY2UodmFsdWUsICctZ3JvdycsICcnKSArIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnZ3JvdycsICdwb3NpdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gdHJhbnNpdGlvblxuXG4gICAgY2FzZSA0NTU0OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHJlcGxhY2UodmFsdWUsIC8oW14tXSkodHJhbnNmb3JtKS9nLCAnJDEnICsgV0VCS0lUICsgJyQyJykgKyB2YWx1ZTtcbiAgICAvLyBjdXJzb3JcblxuICAgIGNhc2UgNjE4NzpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyh6b29tLXxncmFiKS8sIFdFQktJVCArICckMScpLCAvKGltYWdlLXNldCkvLCBXRUJLSVQgKyAnJDEnKSwgdmFsdWUsICcnKSArIHZhbHVlO1xuICAgIC8vIGJhY2tncm91bmQsIGJhY2tncm91bmQtaW1hZ2VcblxuICAgIGNhc2UgNTQ5NTpcbiAgICBjYXNlIDM5NTk6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyhpbWFnZS1zZXRcXChbXl0qKS8sIFdFQktJVCArICckMScgKyAnJGAkMScpO1xuICAgIC8vIGp1c3RpZnktY29udGVudFxuXG4gICAgY2FzZSA0OTY4OlxuICAgICAgcmV0dXJuIHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyguKzopKGZsZXgtKT8oLiopLywgV0VCS0lUICsgJ2JveC1wYWNrOiQzJyArIE1TICsgJ2ZsZXgtcGFjazokMycpLCAvcy4rLWJbXjtdKy8sICdqdXN0aWZ5JykgKyBXRUJLSVQgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIChtYXJnaW58cGFkZGluZyktaW5saW5lLShzdGFydHxlbmQpXG5cbiAgICBjYXNlIDQwOTU6XG4gICAgY2FzZSAzNTgzOlxuICAgIGNhc2UgNDA2ODpcbiAgICBjYXNlIDI1MzI6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKyktaW5saW5lKC4rKS8sIFdFQktJVCArICckMSQyJykgKyB2YWx1ZTtcbiAgICAvLyAobWlufG1heCk/KHdpZHRofGhlaWdodHxpbmxpbmUtc2l6ZXxibG9jay1zaXplKVxuXG4gICAgY2FzZSA4MTE2OlxuICAgIGNhc2UgNzA1OTpcbiAgICBjYXNlIDU3NTM6XG4gICAgY2FzZSA1NTM1OlxuICAgIGNhc2UgNTQ0NTpcbiAgICBjYXNlIDU3MDE6XG4gICAgY2FzZSA0OTMzOlxuICAgIGNhc2UgNDY3NzpcbiAgICBjYXNlIDU1MzM6XG4gICAgY2FzZSA1Nzg5OlxuICAgIGNhc2UgNTAyMTpcbiAgICBjYXNlIDQ3NjU6XG4gICAgICAvLyBzdHJldGNoLCBtYXgtY29udGVudCwgbWluLWNvbnRlbnQsIGZpbGwtYXZhaWxhYmxlXG4gICAgICBpZiAoc3RybGVuKHZhbHVlKSAtIDEgLSBsZW5ndGggPiA2KSBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkpIHtcbiAgICAgICAgLy8gKG0pYXgtY29udGVudCwgKG0paW4tY29udGVudFxuICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAvLyAtXG4gICAgICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgNCkgIT09IDQ1KSBicmVhaztcbiAgICAgICAgLy8gKGYpaWxsLWF2YWlsYWJsZSwgKGYpaXQtY29udGVudFxuXG4gICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoLispLShbXl0rKS8sICckMScgKyBXRUJLSVQgKyAnJDItJDMnICsgJyQxJyArIE1PWiArIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDMpID09IDEwOCA/ICckMycgOiAnJDItJDMnKSkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKHMpdHJldGNoXG5cbiAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgcmV0dXJuIH5pbmRleG9mKHZhbHVlLCAnc3RyZXRjaCcpID8gcHJlZml4KHJlcGxhY2UodmFsdWUsICdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGxlbmd0aCkgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgLy8gcG9zaXRpb246IHN0aWNreVxuXG4gICAgY2FzZSA0OTQ5OlxuICAgICAgLy8gKHMpdGlja3k/XG4gICAgICBpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxKSAhPT0gMTE1KSBicmVhaztcbiAgICAvLyBkaXNwbGF5OiAoZmxleHxpbmxpbmUtZmxleClcblxuICAgIGNhc2UgNjQ0NDpcbiAgICAgIHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBzdHJsZW4odmFsdWUpIC0gMyAtICh+aW5kZXhvZih2YWx1ZSwgJyFpbXBvcnRhbnQnKSAmJiAxMCkpKSB7XG4gICAgICAgIC8vIHN0aWMoayl5XG4gICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAnOicsICc6JyArIFdFQktJVCkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKGlubGluZS0pP2ZsKGUpeFxuXG4gICAgICAgIGNhc2UgMTAxOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoW147IV0rKSg7fCEuKyk/LywgJyQxJyArIFdFQktJVCArIChjaGFyYXQodmFsdWUsIDE0KSA9PT0gNDUgPyAnaW5saW5lLScgOiAnJykgKyAnYm94JDMnICsgJyQxJyArIFdFQktJVCArICckMiQzJyArICckMScgKyBNUyArICckMmJveCQzJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgLy8gd3JpdGluZy1tb2RlXG5cbiAgICBjYXNlIDU5MzY6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMTEpKSB7XG4gICAgICAgIC8vIHZlcnRpY2FsLWwocilcbiAgICAgICAgY2FzZSAxMTQ6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0YicpICsgdmFsdWU7XG4gICAgICAgIC8vIHZlcnRpY2FsLXIobClcblxuICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiLXJsJykgKyB2YWx1ZTtcbiAgICAgICAgLy8gaG9yaXpvbnRhbCgtKXRiXG5cbiAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ2xyJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgcHJlZml4ZXIgPSBmdW5jdGlvbiBwcmVmaXhlcihlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG4gIGlmIChlbGVtZW50Lmxlbmd0aCA+IC0xKSBpZiAoIWVsZW1lbnRbXCJyZXR1cm5cIl0pIHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG4gICAgY2FzZSBERUNMQVJBVElPTjpcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSBwcmVmaXgoZWxlbWVudC52YWx1ZSwgZWxlbWVudC5sZW5ndGgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIEtFWUZSQU1FUzpcbiAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICB2YWx1ZTogcmVwbGFjZShlbGVtZW50LnZhbHVlLCAnQCcsICdAJyArIFdFQktJVClcbiAgICAgIH0pXSwgY2FsbGJhY2spO1xuXG4gICAgY2FzZSBSVUxFU0VUOlxuICAgICAgaWYgKGVsZW1lbnQubGVuZ3RoKSByZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgc3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcbiAgICAgICAgICAvLyA6cmVhZC0ob25seXx3cml0ZSlcbiAgICAgICAgICBjYXNlICc6cmVhZC1vbmx5JzpcbiAgICAgICAgICBjYXNlICc6cmVhZC13cml0ZSc6XG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgcHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgICAvLyA6cGxhY2Vob2xkZXJcblxuICAgICAgICAgIGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV1cbiAgICAgICAgICAgIH0pXSwgY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0U3R5bGlzUGx1Z2lucyA9IFtwcmVmaXhlcl07XG5cbnZhciBjcmVhdGVDYWNoZSA9IGZ1bmN0aW9uIGNyZWF0ZUNhY2hlKG9wdGlvbnMpIHtcbiAgdmFyIGtleSA9IG9wdGlvbnMua2V5O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFrZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgaGF2ZSB0byBjb25maWd1cmUgYGtleWAgZm9yIHlvdXIgY2FjaGUuIFBsZWFzZSBtYWtlIHN1cmUgaXQncyB1bmlxdWUgKGFuZCBub3QgZXF1YWwgdG8gJ2NzcycpIGFzIGl0J3MgdXNlZCBmb3IgbGlua2luZyBzdHlsZXMgdG8geW91ciBjYWNoZS5cXG5cIiArIFwiSWYgbXVsdGlwbGUgY2FjaGVzIHNoYXJlIHRoZSBzYW1lIGtleSB0aGV5IG1pZ2h0IFxcXCJmaWdodFxcXCIgZm9yIGVhY2ggb3RoZXIncyBzdHlsZSBlbGVtZW50cy5cIik7XG4gIH1cblxuICBpZiAoa2V5ID09PSAnY3NzJykge1xuICAgIHZhciBzc3JTdHlsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uXTpub3QoW2RhdGEtc10pXCIpOyAvLyBnZXQgU1NSZWQgc3R5bGVzIG91dCBvZiB0aGUgd2F5IG9mIFJlYWN0J3MgaHlkcmF0aW9uXG4gICAgLy8gZG9jdW1lbnQuaGVhZCBpcyBhIHNhZmUgcGxhY2UgdG8gbW92ZSB0aGVtIHRvKHRob3VnaCBub3RlIGRvY3VtZW50LmhlYWQgaXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBsYXN0IHBsYWNlIHRoZXkgd2lsbCBiZSlcbiAgICAvLyBub3RlIHRoaXMgdmVyeSB2ZXJ5IGludGVudGlvbmFsbHkgdGFyZ2V0cyBhbGwgc3R5bGUgZWxlbWVudHMgcmVnYXJkbGVzcyBvZiB0aGUga2V5IHRvIGVuc3VyZVxuICAgIC8vIHRoYXQgY3JlYXRpbmcgYSBjYWNoZSB3b3JrcyBpbnNpZGUgb2YgcmVuZGVyIG9mIGEgUmVhY3QgY29tcG9uZW50XG5cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHNzclN0eWxlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIC8vIHdlIHdhbnQgdG8gb25seSBtb3ZlIGVsZW1lbnRzIHdoaWNoIGhhdmUgYSBzcGFjZSBpbiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgLy8gYmVjYXVzZSB0aGF0IGluZGljYXRlcyB0aGF0IGl0IGlzIGFuIEVtb3Rpb24gMTEgc2VydmVyLXNpZGUgcmVuZGVyZWQgc3R5bGUgZWxlbWVudHNcbiAgICAgIC8vIHdoaWxlIHdlIHdpbGwgYWxyZWFkeSBpZ25vcmUgRW1vdGlvbiAxMSBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgYmVjYXVzZSBvZiB0aGUgOm5vdChbZGF0YS1zXSkgcGFydCBpbiB0aGUgc2VsZWN0b3JcbiAgICAgIC8vIEVtb3Rpb24gMTAgY2xpZW50LXNpZGUgaW5zZXJ0ZWQgc3R5bGVzIGRpZCBub3QgaGF2ZSBkYXRhLXMgKGJ1dCBpbXBvcnRhbnRseSBkaWQgbm90IGhhdmUgYSBzcGFjZSBpbiB0aGVpciBkYXRhLWVtb3Rpb24gYXR0cmlidXRlcylcbiAgICAgIC8vIHNvIGNoZWNraW5nIGZvciB0aGUgc3BhY2UgZW5zdXJlcyB0aGF0IGxvYWRpbmcgRW1vdGlvbiAxMSBhZnRlciBFbW90aW9uIDEwIGhhcyBpbnNlcnRlZCBzb21lIHN0eWxlc1xuICAgICAgLy8gd2lsbCBub3QgcmVzdWx0IGluIHRoZSBFbW90aW9uIDEwIHN0eWxlcyBiZWluZyBkZXN0cm95ZWRcbiAgICAgIHZhciBkYXRhRW1vdGlvbkF0dHJpYnV0ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nKTtcblxuICAgICAgaWYgKGRhdGFFbW90aW9uQXR0cmlidXRlLmluZGV4T2YoJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgc3R5bGlzUGx1Z2lucyA9IG9wdGlvbnMuc3R5bGlzUGx1Z2lucyB8fCBkZWZhdWx0U3R5bGlzUGx1Z2lucztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc2VydGVkID0ge307XG4gIHZhciBjb250YWluZXI7XG4gIHZhciBub2Rlc1RvSHlkcmF0ZSA9IFtdO1xuXG4gIHtcbiAgICBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoIC8vIHRoaXMgbWVhbnMgd2Ugd2lsbCBpZ25vcmUgZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhIHNwYWNlIGluIHRoZW0gd2hpY2hcbiAgICAvLyBtZWFucyB0aGF0IHRoZSBzdHlsZSBlbGVtZW50cyB3ZSdyZSBsb29raW5nIGF0IGFyZSBvbmx5IEVtb3Rpb24gMTEgc2VydmVyLXJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl49XFxcIlwiICsga2V5ICsgXCIgXFxcIl1cIiksIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgYXR0cmliID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWVtb3Rpb25cIikuc3BsaXQoJyAnKTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGF0dHJpYi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnNlcnRlZFthdHRyaWJbaV1dID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgbm9kZXNUb0h5ZHJhdGUucHVzaChub2RlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfaW5zZXJ0O1xuXG4gIHZhciBvbW5pcHJlc2VudFBsdWdpbnMgPSBbY29tcGF0LCByZW1vdmVMYWJlbF07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBvbW5pcHJlc2VudFBsdWdpbnMucHVzaChjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSh7XG4gICAgICBnZXQgY29tcGF0KCkge1xuICAgICAgICByZXR1cm4gY2FjaGUuY29tcGF0O1xuICAgICAgfVxuXG4gICAgfSksIGluY29ycmVjdEltcG9ydEFsYXJtKTtcbiAgfVxuXG4gIHtcbiAgICB2YXIgY3VycmVudFNoZWV0O1xuICAgIHZhciBmaW5hbGl6aW5nUGx1Z2lucyA9IFtzdHJpbmdpZnksIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKCFlbGVtZW50LnJvb3QpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KGVsZW1lbnRbXCJyZXR1cm5cIl0pO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQudmFsdWUgJiYgZWxlbWVudC50eXBlICE9PSBDT01NRU5UKSB7XG4gICAgICAgICAgLy8gaW5zZXJ0IGVtcHR5IHJ1bGUgaW4gbm9uLXByb2R1Y3Rpb24gZW52aXJvbm1lbnRzXG4gICAgICAgICAgLy8gc28gQGVtb3Rpb24vamVzdCBjYW4gZ3JhYiBga2V5YCBmcm9tIHRoZSAoSlMpRE9NIGZvciBjYWNoZXMgd2l0aG91dCBhbnkgcnVsZXMgaW5zZXJ0ZWQgeWV0XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50LnZhbHVlICsgXCJ7fVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gOiBydWxlc2hlZXQoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQocnVsZSk7XG4gICAgfSldO1xuICAgIHZhciBzZXJpYWxpemVyID0gbWlkZGxld2FyZShvbW5pcHJlc2VudFBsdWdpbnMuY29uY2F0KHN0eWxpc1BsdWdpbnMsIGZpbmFsaXppbmdQbHVnaW5zKSk7XG5cbiAgICB2YXIgc3R5bGlzID0gZnVuY3Rpb24gc3R5bGlzKHN0eWxlcykge1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZShjb21waWxlKHN0eWxlcyksIHNlcmlhbGl6ZXIpO1xuICAgIH07XG5cbiAgICBfaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHNlbGVjdG9yLCBzZXJpYWxpemVkLCBzaGVldCwgc2hvdWxkQ2FjaGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldCA9IHNoZWV0O1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXJpYWxpemVkLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGN1cnJlbnRTaGVldCA9IHtcbiAgICAgICAgICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgICAgICAgICBzaGVldC5pbnNlcnQocnVsZSArIHNlcmlhbGl6ZWQubWFwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN0eWxpcyhzZWxlY3RvciA/IHNlbGVjdG9yICsgXCJ7XCIgKyBzZXJpYWxpemVkLnN0eWxlcyArIFwifVwiIDogc2VyaWFsaXplZC5zdHlsZXMpO1xuXG4gICAgICBpZiAoc2hvdWxkQ2FjaGUpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IHtcbiAgICBrZXk6IGtleSxcbiAgICBzaGVldDogbmV3IFN0eWxlU2hlZXQoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgICAgc3BlZWR5OiBvcHRpb25zLnNwZWVkeSxcbiAgICAgIHByZXBlbmQ6IG9wdGlvbnMucHJlcGVuZCxcbiAgICAgIGluc2VydGlvblBvaW50OiBvcHRpb25zLmluc2VydGlvblBvaW50XG4gICAgfSksXG4gICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgaW5zZXJ0ZWQ6IGluc2VydGVkLFxuICAgIHJlZ2lzdGVyZWQ6IHt9LFxuICAgIGluc2VydDogX2luc2VydFxuICB9O1xuICBjYWNoZS5zaGVldC5oeWRyYXRlKG5vZGVzVG9IeWRyYXRlKTtcbiAgcmV0dXJuIGNhY2hlO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlQ2FjaGUgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHtNUywgTU9aLCBXRUJLSVQsIFJVTEVTRVQsIEtFWUZSQU1FUywgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7bWF0Y2gsIGNoYXJhdCwgc3Vic3RyLCBzdHJsZW4sIHNpemVvZiwgcmVwbGFjZSwgY29tYmluZX0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtjb3B5LCB0b2tlbml6ZX0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5pbXBvcnQge3NlcmlhbGl6ZX0gZnJvbSAnLi9TZXJpYWxpemVyLmpzJ1xuaW1wb3J0IHtwcmVmaXh9IGZyb20gJy4vUHJlZml4ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbltdfSBjb2xsZWN0aW9uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUgKGNvbGxlY3Rpb24pIHtcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjb2xsZWN0aW9uKVxuXG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRcdHZhciBvdXRwdXQgPSAnJ1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRcdG91dHB1dCArPSBjb2xsZWN0aW9uW2ldKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2hlZXQgKGNhbGxiYWNrKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdGlmICghZWxlbWVudC5yb290KVxuXHRcdFx0aWYgKGVsZW1lbnQgPSBlbGVtZW50LnJldHVybilcblx0XHRcdFx0Y2FsbGJhY2soZWxlbWVudClcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4ZXIgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0aWYgKGVsZW1lbnQubGVuZ3RoID4gLTEpXG5cdFx0aWYgKCFlbGVtZW50LnJldHVybilcblx0XHRcdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgREVDTEFSQVRJT046IGVsZW1lbnQucmV0dXJuID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoLCBjaGlsZHJlbilcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0Y2FzZSBLRVlGUkFNRVM6XG5cdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7dmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpfSldLCBjYWxsYmFjaylcblx0XHRcdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0XHRcdGlmIChlbGVtZW50Lmxlbmd0aClcblx0XHRcdFx0XHRcdHJldHVybiBjb21iaW5lKGVsZW1lbnQucHJvcHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKG1hdGNoKHZhbHVlLCAvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIDpyZWFkLShvbmx5fHdyaXRlKVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzpyZWFkLW9ubHknOiBjYXNlICc6cmVhZC13cml0ZSc6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHJlYWQtXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV19KV0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHRcdC8vIDpwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV19KVxuXHRcdFx0XHRcdFx0XHRcdFx0XSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gJydcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWVzcGFjZSAoZWxlbWVudCkge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdGVsZW1lbnQucHJvcHMgPSBlbGVtZW50LnByb3BzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIGNvbWJpbmUodG9rZW5pemUodmFsdWUpLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBjaGlsZHJlbikge1xuXHRcdFx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCAwKSkge1xuXHRcdFx0XHRcdFx0Ly8gXFxmXG5cdFx0XHRcdFx0XHRjYXNlIDEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc3Vic3RyKHZhbHVlLCAxLCBzdHJsZW4odmFsdWUpKVxuXHRcdFx0XHRcdFx0Ly8gXFwwICggKyA+IH5cblx0XHRcdFx0XHRcdGNhc2UgMDogY2FzZSA0MDogY2FzZSA0MzogY2FzZSA2MjogY2FzZSAxMjY6XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHRcdFx0Ly8gOlxuXHRcdFx0XHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0XHRcdFx0aWYgKGNoaWxkcmVuWysraW5kZXhdID09PSAnZ2xvYmFsJylcblx0XHRcdFx0XHRcdFx0XHRjaGlsZHJlbltpbmRleF0gPSAnJywgY2hpbGRyZW5bKytpbmRleF0gPSAnXFxmJyArIHN1YnN0cihjaGlsZHJlbltpbmRleF0sIGluZGV4ID0gMSwgLTEpXG5cdFx0XHRcdFx0XHQvLyBcXHNcblx0XHRcdFx0XHRcdGNhc2UgMzI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoaW5kZXgpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIDA6IGVsZW1lbnQgPSB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNpemVvZihjaGlsZHJlbikgPiAxID8gJycgOiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgaW5kZXggPSBzaXplb2YoY2hpbGRyZW4pIC0gMTogY2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGluZGV4ID09PSAyID8gdmFsdWUgKyBlbGVtZW50ICsgZWxlbWVudCA6IHZhbHVlICsgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdH0pXG5cdH1cbn1cbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBhc3BlY3RSYXRpbzogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IHsgdW5pdGxlc3NLZXlzIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xudmFyIFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SID0gXCJZb3UgaGF2ZSBwYXNzZWQgaW4gZmFsc3kgdmFsdWUgYXMgc3R5bGUgb2JqZWN0J3Mga2V5IChjYW4gaGFwcGVuIHdoZW4gaW4gZXhhbXBsZSB5b3UgcGFzcyB1bmV4cG9ydGVkIGNvbXBvbmVudCBhcyBjb21wdXRlZCBrZXkpLlwiO1xudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIGFuaW1hdGlvblJlZ2V4ID0gL19FTU9fKFteX10rPylfKFteXSo/KV9FTU9fL2c7XG5cbnZhciBpc0N1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkuY2hhckNvZGVBdCgxKSA9PT0gNDU7XG59O1xuXG52YXIgaXNQcm9jZXNzYWJsZVZhbHVlID0gZnVuY3Rpb24gaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGlzQ3VzdG9tUHJvcGVydHkoc3R5bGVOYW1lKSA/IHN0eWxlTmFtZSA6IHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgbmFtZTogcDEsXG4gICAgICAgICAgICAgIHN0eWxlczogcDIsXG4gICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwMTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBjb250ZW50VmFsdWVQYXR0ZXJuID0gLyh2YXJ8YXR0cnxjb3VudGVycz98dXJsfGVsZW1lbnR8KCgocmVwZWF0aW5nLSk/KGxpbmVhcnxyYWRpYWwpKXxjb25pYyktZ3JhZGllbnQpXFwofChuby0pPyhvcGVufGNsb3NlKS1xdW90ZS87XG4gIHZhciBjb250ZW50VmFsdWVzID0gWydub3JtYWwnLCAnbm9uZScsICdpbml0aWFsJywgJ2luaGVyaXQnLCAndW5zZXQnXTtcbiAgdmFyIG9sZFByb2Nlc3NTdHlsZVZhbHVlID0gcHJvY2Vzc1N0eWxlVmFsdWU7XG4gIHZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuICB2YXIgaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG4gIHZhciBoeXBoZW5hdGVkQ2FjaGUgPSB7fTtcblxuICBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IGNvbnRlbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xICYmICFjb250ZW50VmFsdWVQYXR0ZXJuLnRlc3QodmFsdWUpICYmICh2YWx1ZS5jaGFyQXQoMCkgIT09IHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSB8fCB2YWx1ZS5jaGFyQXQoMCkgIT09ICdcIicgJiYgdmFsdWUuY2hhckF0KDApICE9PSBcIidcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IHNlZW0gdG8gYmUgdXNpbmcgYSB2YWx1ZSBmb3IgJ2NvbnRlbnQnIHdpdGhvdXQgcXVvdGVzLCB0cnkgcmVwbGFjaW5nIGl0IHdpdGggYGNvbnRlbnQ6ICdcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIidgXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm9jZXNzZWQgPSBvbGRQcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKTtcblxuICAgIGlmIChwcm9jZXNzZWQgIT09ICcnICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYga2V5LmluZGV4T2YoJy0nKSAhPT0gLTEgJiYgaHlwaGVuYXRlZENhY2hlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaHlwaGVuYXRlZENhY2hlW2tleV0gPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihcIlVzaW5nIGtlYmFiLWNhc2UgZm9yIGNzcyBwcm9wZXJ0aWVzIGluIG9iamVjdHMgaXMgbm90IHN1cHBvcnRlZC4gRGlkIHlvdSBtZWFuIFwiICsga2V5LnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykucmVwbGFjZShoeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoc3RyLCBfY2hhcikge1xuICAgICAgICByZXR1cm4gX2NoYXIudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pICsgXCI/XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWQ7XG4gIH07XG59XG5cbnZhciBub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSA9ICdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCAnICsgJ0BlbW90aW9uL2JhYmVsLXBsdWdpbiwgdGhlIHN3YyBFbW90aW9uIHBsdWdpbiwgb3IgYW5vdGhlciBFbW90aW9uLWF3YXJlICcgKyAnY29tcGlsZXIgdHJhbnNmb3JtLic7XG5cbmZ1bmN0aW9uIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pIHtcbiAgaWYgKGludGVycG9sYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChpbnRlcnBvbGF0aW9uLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24udG9TdHJpbmcoKSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiBpbnRlcnBvbGF0aW9uKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICB7XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLmFuaW0gPT09IDEpIHtcbiAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICBuYW1lOiBpbnRlcnBvbGF0aW9uLm5hbWUsXG4gICAgICAgICAgICBzdHlsZXM6IGludGVycG9sYXRpb24uc3R5bGVzLFxuICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGlvbi5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGludGVycG9sYXRpb24ubmV4dDtcblxuICAgICAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG5vdCB0aGUgbW9zdCBlZmZpY2llbnQgdGhpbmcgZXZlciBidXQgdGhpcyBpcyBhIHByZXR0eSByYXJlIGNhc2VcbiAgICAgICAgICAgIC8vIGFuZCB0aGVyZSB3aWxsIGJlIHZlcnkgZmV3IGl0ZXJhdGlvbnMgb2YgdGhpcyBnZW5lcmFsbHlcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5leHQubmFtZSxcbiAgICAgICAgICAgICAgICBzdHlsZXM6IG5leHQuc3R5bGVzLFxuICAgICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZXMgPSBpbnRlcnBvbGF0aW9uLnN0eWxlcyArIFwiO1wiO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3R5bGVzICs9IGludGVycG9sYXRpb24ubWFwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbik7XG4gICAgICB9XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIGlmIChtZXJnZWRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzQ3Vyc29yID0gY3Vyc29yO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBpbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzKTtcbiAgICAgICAgICBjdXJzb3IgPSBwcmV2aW91c0N1cnNvcjtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRnVuY3Rpb25zIHRoYXQgYXJlIGludGVycG9sYXRlZCBpbiBjc3MgY2FsbHMgd2lsbCBiZSBzdHJpbmdpZmllZC5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIGhhdmUgYSBjc3MgY2FsbCBiYXNlZCBvbiBwcm9wcywgY3JlYXRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY3NzIGNhbGwgbGlrZSB0aGlzXFxuJyArICdsZXQgZHluYW1pY1N0eWxlID0gKHByb3BzKSA9PiBjc3NgY29sb3I6ICR7cHJvcHMuY29sb3J9YFxcbicgKyAnSXQgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSB3aXRoIHByb3BzIG9yIGludGVycG9sYXRlZCBpbiBhIHN0eWxlZCBjYWxsIGxpa2UgdGhpc1xcbicgKyBcImxldCBTb21lQ29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKWAke2R5bmFtaWNTdHlsZX1gXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBbXTtcbiAgICAgICAgdmFyIHJlcGxhY2VkID0gaW50ZXJwb2xhdGlvbi5yZXBsYWNlKGFuaW1hdGlvblJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIHAxLCBwMikge1xuICAgICAgICAgIHZhciBmYWtlVmFyTmFtZSA9IFwiYW5pbWF0aW9uXCIgKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgICBtYXRjaGVkLnB1c2goXCJjb25zdCBcIiArIGZha2VWYXJOYW1lICsgXCIgPSBrZXlmcmFtZXNgXCIgKyBwMi5yZXBsYWNlKC9eQGtleWZyYW1lcyBhbmltYXRpb24tXFx3Ky8sICcnKSArIFwiYFwiKTtcbiAgICAgICAgICByZXR1cm4gXCIke1wiICsgZmFrZVZhck5hbWUgKyBcIn1cIjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignYGtleWZyYW1lc2Agb3V0cHV0IGdvdCBpbnRlcnBvbGF0ZWQgaW50byBwbGFpbiBzdHJpbmcsIHBsZWFzZSB3cmFwIGl0IHdpdGggYGNzc2AuXFxuXFxuJyArICdJbnN0ZWFkIG9mIGRvaW5nIHRoaXM6XFxuXFxuJyArIFtdLmNvbmNhdChtYXRjaGVkLCBbXCJgXCIgKyByZXBsYWNlZCArIFwiYFwiXSkuam9pbignXFxuJykgKyAnXFxuXFxuWW91IHNob3VsZCB3cmFwIGl0IHdpdGggYGNzc2AgbGlrZSB0aGlzOlxcblxcbicgKyAoXCJjc3NgXCIgKyByZXBsYWNlZCArIFwiYFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gIH0gLy8gZmluYWxpemUgc3RyaW5nIHZhbHVlcyAocmVndWxhciBzdHJpbmdzIGFuZCBmdW5jdGlvbnMgaW50ZXJwb2xhdGVkIGludG8gY3NzIGNhbGxzKVxuXG5cbiAgaWYgKHJlZ2lzdGVyZWQgPT0gbnVsbCkge1xuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgdmFyIGNhY2hlZCA9IHJlZ2lzdGVyZWRbaW50ZXJwb2xhdGlvbl07XG4gIHJldHVybiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9iaikge1xuICB2YXIgc3RyaW5nID0gJyc7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdHJpbmcgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqW2ldKSArIFwiO1wiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgICAgdmFyIHZhbHVlID0gb2JqW19rZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAocmVnaXN0ZXJlZCAhPSBudWxsICYmIHJlZ2lzdGVyZWRbdmFsdWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgcmVnaXN0ZXJlZFt2YWx1ZV0gKyBcIn1cIjtcbiAgICAgICAgfSBlbHNlIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlKSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX2tleSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlWzBdID09PSAnc3RyaW5nJyAmJiAocmVnaXN0ZXJlZCA9PSBudWxsIHx8IHJlZ2lzdGVyZWRbdmFsdWVbMF1dID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHZhbHVlLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZVtfaV0pKSB7XG4gICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZVtfaV0pICsgXCI7XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbnRlcnBvbGF0ZWQgPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCB2YWx1ZSk7XG5cbiAgICAgICAgICBzd2l0Y2ggKF9rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgX2tleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIn1cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBsYWJlbFBhdHRlcm4gPSAvbGFiZWw6XFxzKihbXlxccztcXG57XSspXFxzKig7fCQpL2c7XG52YXIgc291cmNlTWFwUGF0dGVybjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc291cmNlTWFwUGF0dGVybiA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy9nO1xufSAvLyB0aGlzIGlzIHRoZSBjdXJzb3IgZm9yIGtleWZyYW1lc1xuLy8ga2V5ZnJhbWVzIGFyZSBzdG9yZWQgb24gdGhlIFNlcmlhbGl6ZWRTdHlsZXMgb2JqZWN0IGFzIGEgbGlua2VkIGxpc3RcblxuXG52YXIgY3Vyc29yO1xudmFyIHNlcmlhbGl6ZVN0eWxlcyA9IGZ1bmN0aW9uIHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCByZWdpc3RlcmVkLCBtZXJnZWRQcm9wcykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnICYmIGFyZ3NbMF0gIT09IG51bGwgJiYgYXJnc1swXS5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIGN1cnNvciA9IHVuZGVmaW5lZDtcbiAgdmFyIHN0cmluZ3MgPSBhcmdzWzBdO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgc3RyaW5ncyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICB9XG5cbiAgICBzdHlsZXMgKz0gc3RyaW5nc1swXTtcbiAgfSAvLyB3ZSBzdGFydCBhdCAxIHNpbmNlIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgZmlyc3QgYXJnXG5cblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgYXJnc1tpXSk7XG5cbiAgICBpZiAoc3RyaW5nTW9kZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpXTtcbiAgICB9XG4gIH1cblxuICB2YXIgc291cmNlTWFwO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2Uoc291cmNlTWFwUGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICBzb3VyY2VNYXAgPSBtYXRjaDtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfSAvLyB1c2luZyBhIGdsb2JhbCByZWdleCB3aXRoIC5leGVjIGlzIHN0YXRlZnVsIHNvIGxhc3RJbmRleCBoYXMgdG8gYmUgcmVzZXQgZWFjaCB0aW1lXG5cblxuICBsYWJlbFBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgdmFyIGlkZW50aWZpZXJOYW1lID0gJyc7XG4gIHZhciBtYXRjaDsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YjgwOWMyY2YyOTQ5ODAwYTBmNjFmYjVcblxuICB3aGlsZSAoKG1hdGNoID0gbGFiZWxQYXR0ZXJuLmV4ZWMoc3R5bGVzKSkgIT09IG51bGwpIHtcbiAgICBpZGVudGlmaWVyTmFtZSArPSAnLScgKyAvLyAkRmxvd0ZpeE1lIHdlIGtub3cgaXQncyBub3QgbnVsbFxuICAgIG1hdGNoWzFdO1xuICB9XG5cbiAgdmFyIG5hbWUgPSBoYXNoU3RyaW5nKHN0eWxlcykgKyBpZGVudGlmaWVyTmFtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWUgU2VyaWFsaXplZFN0eWxlcyB0eXBlIGRvZXNuJ3QgaGF2ZSB0b1N0cmluZyBwcm9wZXJ0eSAoYW5kIHdlIGRvbid0IHdhbnQgdG8gYWRkIGl0KVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICBtYXA6IHNvdXJjZU1hcCxcbiAgICAgIG5leHQ6IGN1cnNvcixcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiWW91IGhhdmUgdHJpZWQgdG8gc3RyaW5naWZ5IG9iamVjdCByZXR1cm5lZCBmcm9tIGBjc3NgIGZ1bmN0aW9uLiBJdCBpc24ndCBzdXBwb3NlZCB0byBiZSB1c2VkIGRpcmVjdGx5IChlLmcuIGFzIHZhbHVlIG9mIHRoZSBgY2xhc3NOYW1lYCBwcm9wKSwgYnV0IHJhdGhlciBoYW5kZWQgdG8gZW1vdGlvbiBzbyBpdCBjYW4gaGFuZGxlIGl0IChlLmcuIGFzIHZhbHVlIG9mIGBjc3NgIHByb3ApLlwiO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgbmV4dDogY3Vyc29yXG4gIH07XG59O1xuXG5leHBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudmFyIHN5bmNGYWxsYmFjayA9IGZ1bmN0aW9uIHN5bmNGYWxsYmFjayhjcmVhdGUpIHtcbiAgcmV0dXJuIGNyZWF0ZSgpO1xufTtcblxudmFyIHVzZUluc2VydGlvbkVmZmVjdCA9IFJlYWN0Wyd1c2VJbnNlcnRpb24nICsgJ0VmZmVjdCddID8gUmVhY3RbJ3VzZUluc2VydGlvbicgKyAnRWZmZWN0J10gOiBmYWxzZTtcbnZhciB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrID0gdXNlSW5zZXJ0aW9uRWZmZWN0IHx8IHN5bmNGYWxsYmFjaztcbnZhciB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgPSB1c2VJbnNlcnRpb25FZmZlY3QgfHwgUmVhY3QudXNlTGF5b3V0RWZmZWN0O1xuXG5leHBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrLCB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgfTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUNvbnRleHQsIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHdlYWtNZW1vaXplIGZyb20gJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnLi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayB9IGZyb20gJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnO1xudmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbnZhciBFbW90aW9uQ2FjaGVDb250ZXh0ID0gLyogI19fUFVSRV9fICovUmVhY3QuY3JlYXRlQ29udGV4dCggLy8gd2UncmUgZG9pbmcgdGhpcyB0byBhdm9pZCBwcmVjb25zdHJ1Y3QncyBkZWFkIGNvZGUgZWxpbWluYXRpb24gaW4gdGhpcyBvbmUgY2FzZVxuLy8gYmVjYXVzZSB0aGlzIG1vZHVsZSBpcyBwcmltYXJpbHkgaW50ZW5kZWQgZm9yIHRoZSBicm93c2VyIGFuZCBub2RlXG4vLyBidXQgaXQncyBhbHNvIHJlcXVpcmVkIGluIHJlYWN0IG5hdGl2ZSBhbmQgc2ltaWxhciBlbnZpcm9ubWVudHMgc29tZXRpbWVzXG4vLyBhbmQgd2UgY291bGQgaGF2ZSBhIHNwZWNpYWwgYnVpbGQganVzdCBmb3IgdGhhdFxuLy8gYnV0IHRoaXMgaXMgbXVjaCBlYXNpZXIgYW5kIHRoZSBuYXRpdmUgcGFja2FnZXNcbi8vIG1pZ2h0IHVzZSBhIGRpZmZlcmVudCB0aGVtZSBjb250ZXh0IGluIHRoZSBmdXR1cmUgYW55d2F5XG50eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gLyogI19fUFVSRV9fICovY3JlYXRlQ2FjaGUoe1xuICBrZXk6ICdjc3MnXG59KSA6IG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBFbW90aW9uQ2FjaGVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25DYWNoZUNvbnRleHQnO1xufVxuXG52YXIgQ2FjaGVQcm92aWRlciA9IEVtb3Rpb25DYWNoZUNvbnRleHQuUHJvdmlkZXI7XG52YXIgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gdXNlRW1vdGlvbkNhY2hlKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcbn07XG5cbnZhciB3aXRoRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gd2l0aEVtb3Rpb25DYWNoZShmdW5jKSB7XG4gIC8vICRGbG93Rml4TWVcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgLy8gdGhlIGNhY2hlIHdpbGwgbmV2ZXIgYmUgbnVsbCBpbiB0aGUgYnJvd3NlclxuICAgIHZhciBjYWNoZSA9IHVzZUNvbnRleHQoRW1vdGlvbkNhY2hlQ29udGV4dCk7XG4gICAgcmV0dXJuIGZ1bmMocHJvcHMsIGNhY2hlLCByZWYpO1xuICB9KTtcbn07XG5cbmlmICghaXNCcm93c2VyKSB7XG4gIHdpdGhFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB3aXRoRW1vdGlvbkNhY2hlKGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICB2YXIgY2FjaGUgPSB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xuXG4gICAgICBpZiAoY2FjaGUgPT09IG51bGwpIHtcbiAgICAgICAgLy8geWVzLCB3ZSdyZSBwb3RlbnRpYWxseSBjcmVhdGluZyB0aGlzIG9uIGV2ZXJ5IHJlbmRlclxuICAgICAgICAvLyBpdCBkb2Vzbid0IGFjdHVhbGx5IG1hdHRlciB0aG91Z2ggc2luY2UgaXQncyBvbmx5IG9uIHRoZSBzZXJ2ZXJcbiAgICAgICAgLy8gc28gdGhlcmUgd2lsbCBvbmx5IGV2ZXJ5IGJlIGEgc2luZ2xlIHJlbmRlclxuICAgICAgICAvLyB0aGF0IGNvdWxkIGNoYW5nZSBpbiB0aGUgZnV0dXJlIGJlY2F1c2Ugb2Ygc3VzcGVuc2UgYW5kIGV0Yy4gYnV0IGZvciBub3csXG4gICAgICAgIC8vIHRoaXMgd29ya3MgYW5kIGkgZG9uJ3Qgd2FudCB0byBvcHRpbWlzZSBmb3IgYSBmdXR1cmUgdGhpbmcgdGhhdCB3ZSBhcmVuJ3Qgc3VyZSBhYm91dFxuICAgICAgICBjYWNoZSA9IGNyZWF0ZUNhY2hlKHtcbiAgICAgICAgICBrZXk6ICdjc3MnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRW1vdGlvbkNhY2hlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICAgIHZhbHVlOiBjYWNoZVxuICAgICAgICB9LCBmdW5jKHByb3BzLCBjYWNoZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMocHJvcHMsIGNhY2hlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuXG52YXIgVGhlbWVDb250ZXh0ID0gLyogI19fUFVSRV9fICovUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdFbW90aW9uVGhlbWVDb250ZXh0Jztcbn1cblxudmFyIHVzZVRoZW1lID0gZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG59O1xuXG52YXIgZ2V0VGhlbWUgPSBmdW5jdGlvbiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSkge1xuICBpZiAodHlwZW9mIHRoZW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG1lcmdlZFRoZW1lID0gdGhlbWUob3V0ZXJUaGVtZSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAobWVyZ2VkVGhlbWUgPT0gbnVsbCB8fCB0eXBlb2YgbWVyZ2VkVGhlbWUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkobWVyZ2VkVGhlbWUpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbVGhlbWVQcm92aWRlcl0gUGxlYXNlIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIHRoZW1lIGZ1bmN0aW9uLCBpLmUuIHRoZW1lPXsoKSA9PiAoe30pfSEnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAodGhlbWUgPT0gbnVsbCB8fCB0eXBlb2YgdGhlbWUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkodGhlbWUpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSBtYWtlIHlvdXIgdGhlbWUgcHJvcCBhIHBsYWluIG9iamVjdCcpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCB0aGVtZSk7XG59O1xuXG52YXIgY3JlYXRlQ2FjaGVXaXRoVGhlbWUgPSAvKiAjX19QVVJFX18gKi93ZWFrTWVtb2l6ZShmdW5jdGlvbiAob3V0ZXJUaGVtZSkge1xuICByZXR1cm4gd2Vha01lbW9pemUoZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgcmV0dXJuIGdldFRoZW1lKG91dGVyVGhlbWUsIHRoZW1lKTtcbiAgfSk7XG59KTtcbnZhciBUaGVtZVByb3ZpZGVyID0gZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICB2YXIgdGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG5cbiAgaWYgKHByb3BzLnRoZW1lICE9PSB0aGVtZSkge1xuICAgIHRoZW1lID0gY3JlYXRlQ2FjaGVXaXRoVGhlbWUodGhlbWUpKHByb3BzLnRoZW1lKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGhlbWVcbiAgfSwgcHJvcHMuY2hpbGRyZW4pO1xufTtcbmZ1bmN0aW9uIHdpdGhUaGVtZShDb21wb25lbnQpIHtcbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihwcm9wcywgcmVmKSB7XG4gICAgdmFyIHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMpKTtcbiAgfTsgLy8gJEZsb3dGaXhNZVxuXG5cbiAgdmFyIFdpdGhUaGVtZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKHJlbmRlcik7XG4gIFdpdGhUaGVtZS5kaXNwbGF5TmFtZSA9IFwiV2l0aFRoZW1lKFwiICsgY29tcG9uZW50TmFtZSArIFwiKVwiO1xuICByZXR1cm4gaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFRoZW1lLCBDb21wb25lbnQpO1xufVxuXG52YXIgZ2V0TGFzdFBhcnQgPSBmdW5jdGlvbiBnZXRMYXN0UGFydChmdW5jdGlvbk5hbWUpIHtcbiAgLy8gVGhlIG1hdGNoIG1heSBiZSBzb21ldGhpbmcgbGlrZSAnT2JqZWN0LmNyZWF0ZUVtb3Rpb25Qcm9wcycgb3JcbiAgLy8gJ0xvYWRlci5wcm90b3R5cGUucmVuZGVyJ1xuICB2YXIgcGFydHMgPSBmdW5jdGlvbk5hbWUuc3BsaXQoJy4nKTtcbiAgcmV0dXJuIHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xufTtcblxudmFyIGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZSA9IGZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZShsaW5lKSB7XG4gIC8vIFY4XG4gIHZhciBtYXRjaCA9IC9eXFxzK2F0XFxzKyhbQS1aYS16MC05JC5dKylcXHMvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIGdldExhc3RQYXJ0KG1hdGNoWzFdKTsgLy8gU2FmYXJpIC8gRmlyZWZveFxuXG4gIG1hdGNoID0gL14oW0EtWmEtejAtOSQuXSspQC8uZXhlYyhsaW5lKTtcbiAgaWYgKG1hdGNoKSByZXR1cm4gZ2V0TGFzdFBhcnQobWF0Y2hbMV0pO1xuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIGludGVybmFsUmVhY3RGdW5jdGlvbk5hbWVzID0gLyogI19fUFVSRV9fICovbmV3IFNldChbJ3JlbmRlcldpdGhIb29rcycsICdwcm9jZXNzQ2hpbGQnLCAnZmluaXNoQ2xhc3NDb21wb25lbnQnLCAncmVuZGVyVG9TdHJpbmcnXSk7IC8vIFRoZXNlIGlkZW50aWZpZXJzIGNvbWUgZnJvbSBlcnJvciBzdGFja3MsIHNvIHRoZXkgaGF2ZSB0byBiZSB2YWxpZCBKU1xuLy8gaWRlbnRpZmllcnMsIHRodXMgd2Ugb25seSBuZWVkIHRvIHJlcGxhY2Ugd2hhdCBpcyBhIHZhbGlkIGNoYXJhY3RlciBmb3IgSlMsXG4vLyBidXQgbm90IGZvciBDU1MuXG5cbnZhciBzYW5pdGl6ZUlkZW50aWZpZXIgPSBmdW5jdGlvbiBzYW5pdGl6ZUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICByZXR1cm4gaWRlbnRpZmllci5yZXBsYWNlKC9cXCQvZywgJy0nKTtcbn07XG5cbnZhciBnZXRMYWJlbEZyb21TdGFja1RyYWNlID0gZnVuY3Rpb24gZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZShzdGFja1RyYWNlKSB7XG4gIGlmICghc3RhY2tUcmFjZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgdmFyIGxpbmVzID0gc3RhY2tUcmFjZS5zcGxpdCgnXFxuJyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBmdW5jdGlvbk5hbWUgPSBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZXNbaV0pOyAvLyBUaGUgZmlyc3QgbGluZSBvZiBWOCBzdGFjayB0cmFjZXMgaXMganVzdCBcIkVycm9yXCJcblxuICAgIGlmICghZnVuY3Rpb25OYW1lKSBjb250aW51ZTsgLy8gSWYgd2UgcmVhY2ggb25lIG9mIHRoZXNlLCB3ZSBoYXZlIGdvbmUgdG9vIGZhciBhbmQgc2hvdWxkIHF1aXRcblxuICAgIGlmIChpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcy5oYXMoZnVuY3Rpb25OYW1lKSkgYnJlYWs7IC8vIFRoZSBjb21wb25lbnQgbmFtZSBpcyB0aGUgZmlyc3QgZnVuY3Rpb24gaW4gdGhlIHN0YWNrIHRoYXQgc3RhcnRzIHdpdGggYW5cbiAgICAvLyB1cHBlcmNhc2UgbGV0dGVyXG5cbiAgICBpZiAoL15bQS1aXS8udGVzdChmdW5jdGlvbk5hbWUpKSByZXR1cm4gc2FuaXRpemVJZGVudGlmaWVyKGZ1bmN0aW9uTmFtZSk7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIHR5cGVQcm9wTmFtZSA9ICdfX0VNT1RJT05fVFlQRV9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBsYWJlbFByb3BOYW1lID0gJ19fRU1PVElPTl9MQUJFTF9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBjcmVhdGVFbW90aW9uUHJvcHMgPSBmdW5jdGlvbiBjcmVhdGVFbW90aW9uUHJvcHModHlwZSwgcHJvcHMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHByb3BzLmNzcyA9PT0gJ3N0cmluZycgJiYgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYSBjc3MgZGVjbGFyYXRpb25cbiAgcHJvcHMuY3NzLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmdzIGFyZSBub3QgYWxsb3dlZCBhcyBjc3MgcHJvcCB2YWx1ZXMsIHBsZWFzZSB3cmFwIGl0IGluIGEgY3NzIHRlbXBsYXRlIGxpdGVyYWwgZnJvbSAnQGVtb3Rpb24vcmVhY3QnIGxpa2UgdGhpczogY3NzYFwiICsgcHJvcHMuY3NzICsgXCJgXCIpO1xuICB9XG5cbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzW3R5cGVQcm9wTmFtZV0gPSB0eXBlOyAvLyBGb3IgcGVyZm9ybWFuY2UsIG9ubHkgY2FsbCBnZXRMYWJlbEZyb21TdGFja1RyYWNlIGluIGRldmVsb3BtZW50IGFuZCB3aGVuXG4gIC8vIHRoZSBsYWJlbCBoYXNuJ3QgYWxyZWFkeSBiZWVuIGNvbXB1dGVkXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgISFwcm9wcy5jc3MgJiYgKHR5cGVvZiBwcm9wcy5jc3MgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBwcm9wcy5jc3MubmFtZSAhPT0gJ3N0cmluZycgfHwgcHJvcHMuY3NzLm5hbWUuaW5kZXhPZignLScpID09PSAtMSkpIHtcbiAgICB2YXIgbGFiZWwgPSBnZXRMYWJlbEZyb21TdGFja1RyYWNlKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICBpZiAobGFiZWwpIG5ld1Byb3BzW2xhYmVsUHJvcE5hbWVdID0gbGFiZWw7XG4gIH1cblxuICByZXR1cm4gbmV3UHJvcHM7XG59O1xuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWQgPSBfcmVmLnNlcmlhbGl6ZWQsXG4gICAgICBpc1N0cmluZ1RhZyA9IF9yZWYuaXNTdHJpbmdUYWc7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgRW1vdGlvbiA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSwgcmVmKSB7XG4gIHZhciBjc3NQcm9wID0gcHJvcHMuY3NzOyAvLyBzbyB0aGF0IHVzaW5nIGBjc3NgIGZyb20gYGVtb3Rpb25gIGFuZCBwYXNzaW5nIHRoZSByZXN1bHQgdG8gdGhlIGNzcyBwcm9wIHdvcmtzXG4gIC8vIG5vdCBwYXNzaW5nIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIHNlcmlhbGl6ZVN0eWxlcyBiZWNhdXNlIGl0IHdvdWxkXG4gIC8vIG1ha2UgY2VydGFpbiBiYWJlbCBvcHRpbWlzYXRpb25zIG5vdCBwb3NzaWJsZVxuXG4gIGlmICh0eXBlb2YgY3NzUHJvcCA9PT0gJ3N0cmluZycgJiYgY2FjaGUucmVnaXN0ZXJlZFtjc3NQcm9wXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY3NzUHJvcCA9IGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF07XG4gIH1cblxuICB2YXIgV3JhcHBlZENvbXBvbmVudCA9IHByb3BzW3R5cGVQcm9wTmFtZV07XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW2Nzc1Byb3BdO1xuICB2YXIgY2xhc3NOYW1lID0gJyc7XG5cbiAgaWYgKHR5cGVvZiBwcm9wcy5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgY2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhjYWNoZS5yZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBwcm9wcy5jbGFzc05hbWUpO1xuICB9IGVsc2UgaWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lICsgXCIgXCI7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhyZWdpc3RlcmVkU3R5bGVzLCB1bmRlZmluZWQsIFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5uYW1lLmluZGV4T2YoJy0nKSA9PT0gLTEpIHtcbiAgICB2YXIgbGFiZWxGcm9tU3RhY2sgPSBwcm9wc1tsYWJlbFByb3BOYW1lXTtcblxuICAgIGlmIChsYWJlbEZyb21TdGFjaykge1xuICAgICAgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhbc2VyaWFsaXplZCwgJ2xhYmVsOicgKyBsYWJlbEZyb21TdGFjayArICc7J10pO1xuICAgIH1cbiAgfVxuXG4gIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkgJiYga2V5ICE9PSAnY3NzJyAmJiBrZXkgIT09IHR5cGVQcm9wTmFtZSAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBrZXkgIT09IGxhYmVsUHJvcE5hbWUpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgc2VyaWFsaXplZDogc2VyaWFsaXplZCxcbiAgICBpc1N0cmluZ1RhZzogdHlwZW9mIFdyYXBwZWRDb21wb25lbnQgPT09ICdzdHJpbmcnXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBuZXdQcm9wcykpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb24uZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNzc1Byb3BJbnRlcm5hbCc7XG59XG5cbnZhciBFbW90aW9uJDEgPSBFbW90aW9uO1xuXG5leHBvcnQgeyBDYWNoZVByb3ZpZGVyIGFzIEMsIEVtb3Rpb24kMSBhcyBFLCBUaGVtZUNvbnRleHQgYXMgVCwgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlIGFzIF8sIFRoZW1lUHJvdmlkZXIgYXMgYSwgd2l0aFRoZW1lIGFzIGIsIGNyZWF0ZUVtb3Rpb25Qcm9wcyBhcyBjLCBoYXNPd25Qcm9wZXJ0eSBhcyBoLCBpc0Jyb3dzZXIgYXMgaSwgdXNlVGhlbWUgYXMgdSwgd2l0aEVtb3Rpb25DYWNoZSBhcyB3IH07XG4iLCJ2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7XG5mdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZXMpIHtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9ICcnO1xuICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWdpc3RlcmVkU3R5bGVzLnB1c2gocmVnaXN0ZXJlZFtjbGFzc05hbWVdICsgXCI7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbnZhciByZWdpc3RlclN0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKCAvLyB3ZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgaWYgdGhlXG4gIC8vIGNsYXNzIG5hbWUgY291bGQgYmUgdXNlZCBmdXJ0aGVyIGRvd25cbiAgLy8gdGhlIHRyZWUgYnV0IGlmIGl0J3MgYSBzdHJpbmcgdGFnLCB3ZSBrbm93IGl0IHdvbid0XG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gYWRkIGl0IHRvIHJlZ2lzdGVyZWQgY2FjaGUuXG4gIC8vIHRoaXMgaW1wcm92ZXMgbWVtb3J5IHVzYWdlIHNpbmNlIHdlIGNhbiBhdm9pZCBzdG9yaW5nIHRoZSB3aG9sZSBzdHlsZSBzdHJpbmdcbiAgKGlzU3RyaW5nVGFnID09PSBmYWxzZSB8fCAvLyB3ZSBuZWVkIHRvIGFsd2F5cyBzdG9yZSBpdCBpZiB3ZSdyZSBpbiBjb21wYXQgbW9kZSBhbmRcbiAgLy8gaW4gbm9kZSBzaW5jZSBlbW90aW9uLXNlcnZlciByZWxpZXMgb24gd2hldGhlciBhIHN0eWxlIGlzIGluXG4gIC8vIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIGtub3cgd2hldGhlciBhIHN0eWxlIGlzIGdsb2JhbCBvciBub3RcbiAgLy8gYWxzbywgbm90ZSB0aGF0IHRoaXMgY2hlY2sgd2lsbCBiZSBkZWFkIGNvZGUgZWxpbWluYXRlZCBpbiB0aGUgYnJvd3NlclxuICBpc0Jyb3dzZXIgPT09IGZhbHNlICkgJiYgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPSBzZXJpYWxpemVkLnN0eWxlcztcbiAgfVxufTtcbnZhciBpbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBzZXJpYWxpemVkO1xuXG4gICAgZG8ge1xuICAgICAgY2FjaGUuaW5zZXJ0KHNlcmlhbGl6ZWQgPT09IGN1cnJlbnQgPyBcIi5cIiArIGNsYXNzTmFtZSA6ICcnLCBjdXJyZW50LCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG5cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgfSB3aGlsZSAoY3VycmVudCAhPT0gdW5kZWZpbmVkKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5zZXJ0U3R5bGVzLCByZWdpc3RlclN0eWxlcyB9O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUHJvcFZhbGlkIGZyb20gJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IHsgd2l0aEVtb3Rpb25DYWNoZSwgVGhlbWVDb250ZXh0IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMsIGluc2VydFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrIH0gZnJvbSAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuXG52YXIgdGVzdE9taXRQcm9wc09uU3RyaW5nVGFnID0gaXNQcm9wVmFsaWQ7XG5cbnZhciB0ZXN0T21pdFByb3BzT25Db21wb25lbnQgPSBmdW5jdGlvbiB0ZXN0T21pdFByb3BzT25Db21wb25lbnQoa2V5KSB7XG4gIHJldHVybiBrZXkgIT09ICd0aGVtZSc7XG59O1xuXG52YXIgZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKHRhZykge1xuICByZXR1cm4gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiYgLy8gOTYgaXMgb25lIGxlc3MgdGhhbiB0aGUgY2hhciBjb2RlXG4gIC8vIGZvciBcImFcIiBzbyB0aGlzIGlzIGNoZWNraW5nIHRoYXRcbiAgLy8gaXQncyBhIGxvd2VyY2FzZSBjaGFyYWN0ZXJcbiAgdGFnLmNoYXJDb2RlQXQoMCkgPiA5NiA/IHRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyA6IHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudDtcbn07XG52YXIgY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHModGFnLCBvcHRpb25zLCBpc1JlYWwpIHtcbiAgdmFyIHNob3VsZEZvcndhcmRQcm9wO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCA9IG9wdGlvbnMuc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgc2hvdWxkRm9yd2FyZFByb3AgPSB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wICYmIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCA/IGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgcmV0dXJuIHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AocHJvcE5hbWUpICYmIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcChwcm9wTmFtZSk7XG4gICAgfSA6IG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2hvdWxkRm9yd2FyZFByb3AgIT09ICdmdW5jdGlvbicgJiYgaXNSZWFsKSB7XG4gICAgc2hvdWxkRm9yd2FyZFByb3AgPSB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wO1xuICB9XG5cbiAgcmV0dXJuIHNob3VsZEZvcndhcmRQcm9wO1xufTtcblxudmFyIElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SID0gXCJZb3UgaGF2ZSBpbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZSBpbiB5b3VyIHRlbXBsYXRlIGxpdGVyYWwsIG1vc3QgbGlrZWx5IGluc2lkZSBjb250ZW50J3MgcHJvcGVydHkgdmFsdWUuXFxuQmVjYXVzZSB5b3Ugd3JpdGUgeW91ciBDU1MgaW5zaWRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgeW91IGFjdHVhbGx5IGhhdmUgdG8gZG8gZG91YmxlIGVzY2FwaW5nLCBzbyBmb3IgZXhhbXBsZSBcXFwiY29udGVudDogJ1xcXFwwMGQ3JztcXFwiIHNob3VsZCBiZWNvbWUgXFxcImNvbnRlbnQ6ICdcXFxcXFxcXDAwZDcnO1xcXCIuXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhpcyBoZXJlOlxcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1RlbXBsYXRlX2xpdGVyYWxzI0VTMjAxOF9yZXZpc2lvbl9vZl9pbGxlZ2FsX2VzY2FwZV9zZXF1ZW5jZXNcIjtcblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkID0gX3JlZi5zZXJpYWxpemVkLFxuICAgICAgaXNTdHJpbmdUYWcgPSBfcmVmLmlzU3RyaW5nVGFnO1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIGNyZWF0ZVN0eWxlZCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodGFnID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGFyZSB0cnlpbmcgdG8gY3JlYXRlIGEgc3R5bGVkIGVsZW1lbnQgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LlxcbllvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc1JlYWwgPSB0YWcuX19lbW90aW9uX3JlYWwgPT09IHRhZztcbiAgdmFyIGJhc2VUYWcgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9iYXNlIHx8IHRhZztcbiAgdmFyIGlkZW50aWZpZXJOYW1lO1xuICB2YXIgdGFyZ2V0Q2xhc3NOYW1lO1xuXG4gIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZGVudGlmaWVyTmFtZSA9IG9wdGlvbnMubGFiZWw7XG4gICAgdGFyZ2V0Q2xhc3NOYW1lID0gb3B0aW9ucy50YXJnZXQ7XG4gIH1cblxuICB2YXIgc2hvdWxkRm9yd2FyZFByb3AgPSBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKHRhZywgb3B0aW9ucywgaXNSZWFsKTtcbiAgdmFyIGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wIHx8IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChiYXNlVGFnKTtcbiAgdmFyIHNob3VsZFVzZUFzID0gIWRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCgnYXMnKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgc3R5bGVzID0gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQgPyB0YWcuX19lbW90aW9uX3N0eWxlcy5zbGljZSgwKSA6IFtdO1xuXG4gICAgaWYgKGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoKFwibGFiZWw6XCIgKyBpZGVudGlmaWVyTmFtZSArIFwiO1wiKTtcbiAgICB9XG5cbiAgICBpZiAoYXJnc1swXSA9PSBudWxsIHx8IGFyZ3NbMF0ucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoLmFwcGx5KHN0eWxlcywgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZ3NbMF1bMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzLnB1c2goYXJnc1swXVswXSk7XG4gICAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gICAgICB2YXIgaSA9IDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVtpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXMucHVzaChhcmdzW2ldLCBhcmdzWzBdW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWU6IHdlIG5lZWQgdG8gY2FzdCBTdGF0ZWxlc3NGdW5jdGlvbmFsQ29tcG9uZW50IHRvIG91ciBQcml2YXRlU3R5bGVkQ29tcG9uZW50IGNsYXNzXG5cblxuICAgIHZhciBTdHlsZWQgPSB3aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICAgICAgdmFyIEZpbmFsVGFnID0gc2hvdWxkVXNlQXMgJiYgcHJvcHMuYXMgfHwgYmFzZVRhZztcbiAgICAgIHZhciBjbGFzc05hbWUgPSAnJztcbiAgICAgIHZhciBjbGFzc0ludGVycG9sYXRpb25zID0gW107XG4gICAgICB2YXIgbWVyZ2VkUHJvcHMgPSBwcm9wcztcblxuICAgICAgaWYgKHByb3BzLnRoZW1lID09IG51bGwpIHtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICBtZXJnZWRQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lcmdlZFByb3BzLnRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHByb3BzLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhjYWNoZS5yZWdpc3RlcmVkLCBjbGFzc0ludGVycG9sYXRpb25zLCBwcm9wcy5jbGFzc05hbWUpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyBcIiBcIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoc3R5bGVzLmNvbmNhdChjbGFzc0ludGVycG9sYXRpb25zKSwgY2FjaGUucmVnaXN0ZXJlZCwgbWVyZ2VkUHJvcHMpO1xuICAgICAgY2xhc3NOYW1lICs9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2xhc3NOYW1lICs9IFwiIFwiICsgdGFyZ2V0Q2xhc3NOYW1lO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmluYWxTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZFVzZUFzICYmIHNob3VsZEZvcndhcmRQcm9wID09PSB1bmRlZmluZWQgPyBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoRmluYWxUYWcpIDogZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wO1xuICAgICAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgICAgIGZvciAodmFyIF9rZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKHNob3VsZFVzZUFzICYmIF9rZXkgPT09ICdhcycpIGNvbnRpbnVlO1xuXG4gICAgICAgIGlmICggLy8gJEZsb3dGaXhNZVxuICAgICAgICBmaW5hbFNob3VsZEZvcndhcmRQcm9wKF9rZXkpKSB7XG4gICAgICAgICAgbmV3UHJvcHNbX2tleV0gPSBwcm9wc1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXdQcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEluc2VydGlvbiwge1xuICAgICAgICBjYWNoZTogY2FjaGUsXG4gICAgICAgIHNlcmlhbGl6ZWQ6IHNlcmlhbGl6ZWQsXG4gICAgICAgIGlzU3RyaW5nVGFnOiB0eXBlb2YgRmluYWxUYWcgPT09ICdzdHJpbmcnXG4gICAgICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmluYWxUYWcsIG5ld1Byb3BzKSk7XG4gICAgfSk7XG4gICAgU3R5bGVkLmRpc3BsYXlOYW1lID0gaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCA/IGlkZW50aWZpZXJOYW1lIDogXCJTdHlsZWQoXCIgKyAodHlwZW9mIGJhc2VUYWcgPT09ICdzdHJpbmcnID8gYmFzZVRhZyA6IGJhc2VUYWcuZGlzcGxheU5hbWUgfHwgYmFzZVRhZy5uYW1lIHx8ICdDb21wb25lbnQnKSArIFwiKVwiO1xuICAgIFN0eWxlZC5kZWZhdWx0UHJvcHMgPSB0YWcuZGVmYXVsdFByb3BzO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fcmVhbCA9IFN0eWxlZDtcbiAgICBTdHlsZWQuX19lbW90aW9uX2Jhc2UgPSBiYXNlVGFnO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fc3R5bGVzID0gc3R5bGVzO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3R5bGVkLCAndG9TdHJpbmcnLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICAgIGlmICh0YXJnZXRDbGFzc05hbWUgPT09IHVuZGVmaW5lZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuICdOT19DT01QT05FTlRfU0VMRUNUT1InO1xuICAgICAgICB9IC8vICRGbG93Rml4TWU6IGNvZXJjZSB1bmRlZmluZWQgdG8gc3RyaW5nXG5cblxuICAgICAgICByZXR1cm4gXCIuXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBTdHlsZWQud2l0aENvbXBvbmVudCA9IGZ1bmN0aW9uIChuZXh0VGFnLCBuZXh0T3B0aW9ucykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVN0eWxlZChuZXh0VGFnLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywgbmV4dE9wdGlvbnMsIHtcbiAgICAgICAgc2hvdWxkRm9yd2FyZFByb3A6IGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMoU3R5bGVkLCBuZXh0T3B0aW9ucywgdHJ1ZSlcbiAgICAgIH0pKS5hcHBseSh2b2lkIDAsIHN0eWxlcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBTdHlsZWQ7XG4gIH07XG59O1xuXG5leHBvcnQgeyBjcmVhdGVTdHlsZWQgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IGNyZWF0ZVN0eWxlZCBmcm9tICcuLi9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgJ3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vaXMtcHJvcC12YWxpZCc7XG5pbXBvcnQgJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0ICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0ICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciB0YWdzID0gWydhJywgJ2FiYnInLCAnYWRkcmVzcycsICdhcmVhJywgJ2FydGljbGUnLCAnYXNpZGUnLCAnYXVkaW8nLCAnYicsICdiYXNlJywgJ2JkaScsICdiZG8nLCAnYmlnJywgJ2Jsb2NrcXVvdGUnLCAnYm9keScsICdicicsICdidXR0b24nLCAnY2FudmFzJywgJ2NhcHRpb24nLCAnY2l0ZScsICdjb2RlJywgJ2NvbCcsICdjb2xncm91cCcsICdkYXRhJywgJ2RhdGFsaXN0JywgJ2RkJywgJ2RlbCcsICdkZXRhaWxzJywgJ2RmbicsICdkaWFsb2cnLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VtJywgJ2VtYmVkJywgJ2ZpZWxkc2V0JywgJ2ZpZ2NhcHRpb24nLCAnZmlndXJlJywgJ2Zvb3RlcicsICdmb3JtJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWQnLCAnaGVhZGVyJywgJ2hncm91cCcsICdocicsICdodG1sJywgJ2knLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpbnMnLCAna2JkJywgJ2tleWdlbicsICdsYWJlbCcsICdsZWdlbmQnLCAnbGknLCAnbGluaycsICdtYWluJywgJ21hcCcsICdtYXJrJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ21ldGVyJywgJ25hdicsICdub3NjcmlwdCcsICdvYmplY3QnLCAnb2wnLCAnb3B0Z3JvdXAnLCAnb3B0aW9uJywgJ291dHB1dCcsICdwJywgJ3BhcmFtJywgJ3BpY3R1cmUnLCAncHJlJywgJ3Byb2dyZXNzJywgJ3EnLCAncnAnLCAncnQnLCAncnVieScsICdzJywgJ3NhbXAnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NtYWxsJywgJ3NvdXJjZScsICdzcGFuJywgJ3N0cm9uZycsICdzdHlsZScsICdzdWInLCAnc3VtbWFyeScsICdzdXAnLCAndGFibGUnLCAndGJvZHknLCAndGQnLCAndGV4dGFyZWEnLCAndGZvb3QnLCAndGgnLCAndGhlYWQnLCAndGltZScsICd0aXRsZScsICd0cicsICd0cmFjaycsICd1JywgJ3VsJywgJ3ZhcicsICd2aWRlbycsICd3YnInLCAvLyBTVkdcbidjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2ZvcmVpZ25PYmplY3QnLCAnZycsICdpbWFnZScsICdsaW5lJywgJ2xpbmVhckdyYWRpZW50JywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3N2ZycsICd0ZXh0JywgJ3RzcGFuJ107XG5cbnZhciBuZXdTdHlsZWQgPSBjcmVhdGVTdHlsZWQuYmluZCgpO1xudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWdOYW1lKSB7XG4gIC8vICRGbG93Rml4TWU6IHdlIGNhbiBpZ25vcmUgdGhpcyBiZWNhdXNlIGl0cyBleHBvc2VkIHR5cGUgaXMgZGVmaW5lZCBieSB0aGUgQ3JlYXRlU3R5bGVkIHR5cGVcbiAgbmV3U3R5bGVkW3RhZ05hbWVdID0gbmV3U3R5bGVkKHRhZ05hbWUpO1xufSk7XG5cbmV4cG9ydCB7IG5ld1N0eWxlZCBhcyBkZWZhdWx0IH07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzXG4vLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWFwcGxlYnkvc21oYXNoZXIvYmxvYi82MWEwNTMwZjI4Mjc3ZjJlODUwYmZjMzk2MDBjZTYxZDAyYjUxOGRlL3NyYy9NdXJtdXJIYXNoMi5jcHAjTDM3LUw4NlxuZnVuY3Rpb24gbXVybXVyMihzdHIpIHtcbiAgLy8gJ20nIGFuZCAncicgYXJlIG1peGluZyBjb25zdGFudHMgZ2VuZXJhdGVkIG9mZmxpbmUuXG4gIC8vIFRoZXkncmUgbm90IHJlYWxseSAnbWFnaWMnLCB0aGV5IGp1c3QgaGFwcGVuIHRvIHdvcmsgd2VsbC5cbiAgLy8gY29uc3QgbSA9IDB4NWJkMWU5OTU7XG4gIC8vIGNvbnN0IHIgPSAyNDtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgaGFzaFxuICB2YXIgaCA9IDA7IC8vIE1peCA0IGJ5dGVzIGF0IGEgdGltZSBpbnRvIHRoZSBoYXNoXG5cbiAgdmFyIGssXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgZm9yICg7IGxlbiA+PSA0OyArK2ksIGxlbiAtPSA0KSB7XG4gICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgOCB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMTYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0O1xuICAgIGsgPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICAgIGsgXj1cbiAgICAvKiBrID4+PiByOiAqL1xuICAgIGsgPj4+IDI0O1xuICAgIGggPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpIF5cbiAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBIYW5kbGUgdGhlIGxhc3QgZmV3IGJ5dGVzIG9mIHRoZSBpbnB1dCBhcnJheVxuXG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcblxuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjtcbiAgICAgIGggPVxuICAgICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBEbyBhIGZldyBmaW5hbCBtaXhlcyBvZiB0aGUgaGFzaCB0byBlbnN1cmUgdGhlIGxhc3QgZmV3XG4gIC8vIGJ5dGVzIGFyZSB3ZWxsLWluY29ycG9yYXRlZC5cblxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPVxuICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIHJldHVybiAoKGggXiBoID4+PiAxNSkgPj4+IDApLnRvU3RyaW5nKDM2KTtcbn1cblxuZXhwb3J0IHsgbXVybXVyMiBhcyBkZWZhdWx0IH07XG4iLCJleHBvcnQgY29uc3QgZ2V0U3RyaW5nQmV0d2VlbiA9IChzdHJpbmcsIGZyb20sIHRvKSA9PlxuICBzdHJpbmcuc3Vic3RyaW5nKHN0cmluZy5pbmRleE9mKGZyb20pICsgZnJvbS5sZW5ndGgsIHN0cmluZy5sYXN0SW5kZXhPZih0bykpO1xuXG5leHBvcnQgY29uc3QgcGFyc2VSb2FtRGF0ZVN0cmluZyA9IChyb2FtRGF0ZVN0cmluZzogc3RyaW5nKTogRGF0ZSA9PlxuICB3aW5kb3cucm9hbUFscGhhQVBJLnV0aWwucGFnZVRpdGxlVG9EYXRlKHJvYW1EYXRlU3RyaW5nLnRyaW0oKSk7XG5cbmV4cG9ydCBjb25zdCBkYXRlVG9Sb2FtRGF0ZVN0cmluZyA9IChqc0RhdGVPYmplY3QpID0+XG4gIHdpbmRvdy5yb2FtQWxwaGFBUEkudXRpbC5kYXRlVG9QYWdlVGl0bGUoanNEYXRlT2JqZWN0KTtcblxuZXhwb3J0IGNvbnN0IHRvRGF0ZVN0cmluZyA9IChqc0RhdGVPYmplY3QpID0+IGpzRGF0ZU9iamVjdC50b0xvY2FsZURhdGVTdHJpbmcoJ2VuLVVTJyk7XG5cbmV4cG9ydCBjb25zdCBwYXJzZUNvbmZpZ1N0cmluZyA9IChjb25maWdTdHJpbmcpID0+IGNvbmZpZ1N0cmluZy5zcGxpdCgnOjonKS5tYXAoKHMpID0+IHMudHJpbSgpKTtcblxuZXhwb3J0IGNvbnN0IHBsdXJhbGl6ZSA9ICh2YWx1ZTogbnVtYmVyLCBzaW5ndWxhcjogc3RyaW5nLCBwbHVyYWw6IHN0cmluZykgPT4ge1xuICBpZiAodmFsdWUgPT09IDEpIHJldHVybiBzaW5ndWxhcjtcbiAgcmV0dXJuIHBsdXJhbDtcbn07XG5cbmV4cG9ydCBjb25zdCBpc051bWVyaWMgPSAoc3RyKSA9PiB7XG4gIGlmICh0eXBlb2Ygc3RyICE9ICdzdHJpbmcnKSByZXR1cm4gZmFsc2U7IC8vIHdlIG9ubHkgcHJvY2VzcyBzdHJpbmdzIVxuXG4gIHJldHVybiAoXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciB3ZSBleHBlY3QgZGF0YSB0byBub3QgYmUgbnVtYmVyXG4gICAgIWlzTmFOKHN0cikgJiYgLy8gdXNlIHR5cGUgY29lcmNpb24gdG8gcGFyc2UgdGhlIF9lbnRpcmV0eV8gb2YgdGhlIHN0cmluZyAoYHBhcnNlRmxvYXRgIGFsb25lIGRvZXMgbm90IGRvIHRoaXMpLi4uXG4gICAgIWlzTmFOKHBhcnNlRmxvYXQoc3RyKSlcbiAgKTtcbn07XG4iLCJpbXBvcnQgZGF5anMgZnJvbSAnZGF5anMnO1xuaW1wb3J0IHJlbGF0aXZlVGltZSBmcm9tICdkYXlqcy9wbHVnaW4vcmVsYXRpdmVUaW1lJztcbmRheWpzLmV4dGVuZChyZWxhdGl2ZVRpbWUpO1xuXG5pbXBvcnQgY2FsZW5kYXIgZnJvbSAnZGF5anMvcGx1Z2luL2NhbGVuZGFyJztcbmRheWpzLmV4dGVuZChjYWxlbmRhcik7XG5cbmV4cG9ydCBjb25zdCBhZGREYXlzID0gKGRhdGUsIGRheXMpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IERhdGUoZGF0ZSk7XG4gIHJlc3VsdC5zZXREYXRlKHJlc3VsdC5nZXREYXRlKCkgKyBkYXlzKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBzdWJ0cmFjdERheXMgPSAoZGF0ZSwgZGF5cykgPT4ge1xuICBjb25zdCByZXN1bHQgPSBuZXcgRGF0ZShkYXRlKTtcbiAgcmVzdWx0LnNldERhdGUocmVzdWx0LmdldERhdGUoKSAtIGRheXMpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IGRheXNCZXR3ZWVuID0gKGQxLCBkMikgPT4ge1xuICBjb25zdCBvbmVEYXkgPSAyNCAqIDYwICogNjAgKiAxMDAwO1xuICBjb25zdCBmaXJzdERhdGUgPSBkMTtcbiAgY29uc3Qgc2Vjb25kRGF0ZSA9IGQyO1xuXG4gIGNvbnN0IGRpZmZEYXlzID0gTWF0aC5mbG9vcihNYXRoLmFicygoZmlyc3REYXRlIC0gc2Vjb25kRGF0ZSkgLyBvbmVEYXkpKTtcblxuICByZXR1cm4gZGlmZkRheXM7XG59O1xuXG5leHBvcnQgY29uc3QgZnJvbU5vdyA9IChkYXRlKSA9PiB7XG4gIHJldHVybiBkYXlqcyhkYXRlKS5mcm9tTm93KCk7XG59O1xuXG5leHBvcnQgY29uc3QgY3VzdG9tRnJvbU5vdyA9IChkYXRlKSA9PiB7XG4gIGNvbnN0IGRheXNEaWZmID0gZGF5c0JldHdlZW4obmV3IERhdGUoKSwgZGF0ZSk7XG4gIGlmIChkYXlzRGlmZiA+IC03ICYmIGRheXNEaWZmIDwgNykge1xuICAgIHJldHVybiBkYXlqcyhkYXRlKS5jYWxlbmRhcihudWxsLCB7XG4gICAgICBzYW1lRGF5OiAnW1RvZGF5XScsXG4gICAgICBuZXh0RGF5OiAnW1RvbW9ycm93XScsXG4gICAgICBuZXh0V2VlazogJ2RkZGQnLCAvLyBUdWVzZGF5XG4gICAgICBsYXN0RGF5OiAnW1llc3RlcmRheV0nLFxuICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCcsIC8vIExhc3QgVHVlc2RheVxuICAgICAgLy8gc2FtZUVsc2U6ICcnLCAvLyB3ZSBzd2l0Y2ggdG8gLmZyb21Ob3coKSBhdCB0aGlzIHJhbmdlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZyb21Ob3coZGF0ZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpc1NhbWVEYXkgPSAoZDE6IERhdGUsIGQyOiBEYXRlKSA9PiB7XG4gIGlmICghaXNEYXRlKGQxKSB8fCAhaXNEYXRlKGQyKSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBkMS50b0RhdGVTdHJpbmcoKSA9PT0gZDIudG9EYXRlU3RyaW5nKCk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNEYXRlID0gKGRhdGU6IHVua25vd24pID0+XG4gIC8vIEB0cy1leHBlY3QtZXJyb3Igd2UgZXhwZWN0IGRhdGEgdG8gbm90IGJlIG51bWJlclxuICBkYXRlICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nICYmICFpc05hTihkYXRlKTtcbiIsImltcG9ydCAqIGFzIHN0cmluZ1V0aWxzIGZyb20gJ34vdXRpbHMvc3RyaW5nJztcbmltcG9ydCAqIGFzIGRhdGVVdGlscyBmcm9tICd+L3V0aWxzL2RhdGUnO1xuaW1wb3J0IHtcbiAgY3JlYXRlQ2hpbGRCbG9jayxcbiAgZ2V0Q2hpbGRCbG9jayxcbiAgZ2V0T3JDcmVhdGVCbG9ja09uUGFnZSxcbiAgZ2V0T3JDcmVhdGVDaGlsZEJsb2NrLFxuICBnZXRPckNyZWF0ZVBhZ2UsXG59IGZyb20gJ34vcXVlcmllcyc7XG5cbmV4cG9ydCBjb25zdCBzYXZlQ2FjaGVEYXRhID0gYXN5bmMgKHsgZGF0YVBhZ2VUaXRsZSwgZGF0YSwgc2VsZWN0ZWRUYWcgfSkgPT4ge1xuICBhd2FpdCBnZXRPckNyZWF0ZVBhZ2UoZGF0YVBhZ2VUaXRsZSk7XG4gIGNvbnN0IGRhdGFCbG9ja1VpZCA9IGF3YWl0IGdldE9yQ3JlYXRlQmxvY2tPblBhZ2UoZGF0YVBhZ2VUaXRsZSwgJ2NhY2hlJywgLTEsIHtcbiAgICBvcGVuOiBmYWxzZSxcbiAgICBoZWFkaW5nOiAzLFxuICB9KTtcblxuICAvLyBJbnNlcnQgc2VsZWN0ZWQgdGFnIHBhcmVudCBibG9ja1xuICBjb25zdCBzZWxlY3RlZFRhZ0Jsb2NrVWlkID0gYXdhaXQgZ2V0T3JDcmVhdGVDaGlsZEJsb2NrKGRhdGFCbG9ja1VpZCwgYFtbJHtzZWxlY3RlZFRhZ31dXWAsIC0xLCB7XG4gICAgb3BlbjogZmFsc2UsXG4gIH0pO1xuXG4gIC8vIEluc2VydCBuZXcgYmxvY2sgaW5mb1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhkYXRhKSkge1xuICAgIC8vIERlbGV0ZSBibG9jayB0aGF0IHN0YXJ0cyB3aXRoIGtleSBpZiBhbHJlYWR5IGV4aXN0c1xuICAgIGNvbnN0IGV4aXN0aW5nQmxvY2tVaWQgPSBhd2FpdCBnZXRDaGlsZEJsb2NrKHNlbGVjdGVkVGFnQmxvY2tVaWQsIGAke2tleX06OmAsIHtcbiAgICAgIGV4YWN0TWF0Y2g6IGZhbHNlLFxuICAgIH0pO1xuICAgIGlmIChleGlzdGluZ0Jsb2NrVWlkKSB7XG4gICAgICBhd2FpdCB3aW5kb3cucm9hbUFscGhhQVBJLmRlbGV0ZUJsb2NrKHsgYmxvY2s6IHsgdWlkOiBleGlzdGluZ0Jsb2NrVWlkIH0gfSk7XG4gICAgfVxuXG4gICAgbGV0IHZhbHVlID0gZGF0YVtrZXldO1xuICAgIGlmIChkYXRlVXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSBzdHJpbmdVdGlscy5kYXRlVG9Sb2FtRGF0ZVN0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgYXdhaXQgY3JlYXRlQ2hpbGRCbG9jayhzZWxlY3RlZFRhZ0Jsb2NrVWlkLCBgJHtrZXl9OjogJHt2YWx1ZX1gLCAtMSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBkZWxldGVDYWNoZURhdGFLZXkgPSBhc3luYyAoeyBkYXRhUGFnZVRpdGxlLCBzZWxlY3RlZFRhZywgdG9EZWxldGVLZXlJZCB9KSA9PiB7XG4gIGF3YWl0IGdldE9yQ3JlYXRlUGFnZShkYXRhUGFnZVRpdGxlKTtcbiAgY29uc3QgZGF0YUJsb2NrVWlkID0gYXdhaXQgZ2V0T3JDcmVhdGVCbG9ja09uUGFnZShkYXRhUGFnZVRpdGxlLCAnY2FjaGUnLCAtMSwge1xuICAgIG9wZW46IGZhbHNlLFxuICAgIGhlYWRpbmc6IDMsXG4gIH0pO1xuXG4gIGNvbnN0IHNlbGVjdGVkVGFnQmxvY2tVaWQgPSBhd2FpdCBnZXRPckNyZWF0ZUNoaWxkQmxvY2soZGF0YUJsb2NrVWlkLCBgW1ske3NlbGVjdGVkVGFnfV1dYCwgLTEsIHtcbiAgICBvcGVuOiBmYWxzZSxcbiAgfSk7XG5cbiAgY29uc3QgZXhpc3RpbmdCbG9ja1VpZCA9IGF3YWl0IGdldENoaWxkQmxvY2soc2VsZWN0ZWRUYWdCbG9ja1VpZCwgYCR7dG9EZWxldGVLZXlJZH06OmAsIHtcbiAgICBleGFjdE1hdGNoOiBmYWxzZSxcbiAgfSk7XG5cbiAgaWYgKGV4aXN0aW5nQmxvY2tVaWQpIHtcbiAgICBhd2FpdCB3aW5kb3cucm9hbUFscGhhQVBJLmRlbGV0ZUJsb2NrKHsgYmxvY2s6IHsgdWlkOiBleGlzdGluZ0Jsb2NrVWlkIH0gfSk7XG4gIH1cbn07XG4iLCJcbmV4cG9ydCBlbnVtIFJldmlld01vZGVzIHtcbiAgRml4ZWRJbnRlcnZhbCA9ICdGSVhFRF9JTlRFUlZBTCcsXG4gIERlZmF1bHRTcGFjZWRJbnRlcnZhbCA9ICdTUEFDRURfSU5URVJWQUwnLFxufVxuXG5pbnRlcmZhY2UgU2Vzc2lvbkNvbW1vbiB7XG4gIG5leHREdWVEYXRlPzogRGF0ZTtcbiAgZGF0ZUNyZWF0ZWQ/OiBEYXRlO1xuICBpc1JvYW1Tck9sZFByYWN0aWNlUmVjb3JkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgU2Vzc2lvbiA9IHtcbiAgcmV2aWV3TW9kZTogUmV2aWV3TW9kZXM7XG4gIHJlcGV0aXRpb25zPzogbnVtYmVyO1xuICBpbnRlcnZhbD86IG51bWJlcjtcbiAgZUZhY3Rvcj86IG51bWJlcjtcbiAgZ3JhZGU/OiBudW1iZXI7XG4gIGludGVydmFsTXVsdGlwbGllcj86IG51bWJlcjtcbiAgaW50ZXJ2YWxNdWx0aXBsaWVyVHlwZT86IEludGVydmFsTXVsdGlwbGllclR5cGU7XG4gIGZzcnNTdGF0ZT86IGFueTsgLy8gRlNSU+WGhemDqOeKtuaAgVxufSAmIFNlc3Npb25Db21tb247XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmV3U2Vzc2lvbiBleHRlbmRzIE9taXQ8U2Vzc2lvbiwgJ25leHREdWVEYXRlJyB8ICdncmFkZSc+IHtcbiAgaXNOZXc6IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIFJlY29yZFVpZCA9IHN0cmluZztcblxuZXhwb3J0IGludGVyZmFjZSBSZWNvcmRzIHtcbiAgW2tleTogUmVjb3JkVWlkXTogU2Vzc2lvbiB8IE5ld1Nlc3Npb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmV3UmVjb3JkcyB7XG4gIFtrZXk6IFJlY29yZFVpZF06IE5ld1Nlc3Npb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGVSZWNvcmRzIHtcbiAgW2tleTogUmVjb3JkVWlkXTogU2Vzc2lvbltdO1xufVxuXG5leHBvcnQgZW51bSBJbnRlcnZhbE11bHRpcGxpZXJUeXBlIHtcbiAgRGF5cyA9ICdEYXlzJyxcbiAgV2Vla3MgPSAnV2Vla3MnLFxuICBNb250aHMgPSAnTW9udGhzJyxcbiAgWWVhcnMgPSAnWWVhcnMnLFxufVxuIiwiZXhwb3J0IGNvbnN0IGRlZXBDbG9uZSA9IChvYmo6IG9iamVjdCkgPT4ge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcbn07XG4iLCJpbXBvcnQgeyBSZWNvcmRVaWQgfSBmcm9tICcuL3Nlc3Npb24nO1xuXG5leHBvcnQgZW51bSBDb21wbGV0aW9uU3RhdHVzIHtcbiAgRmluaXNoZWQgPSAnZmluaXNoZWQnLFxuICBQYXJ0aWFsID0gJ3BhcnRpYWwnLFxuICBVbnN0YXJ0ZWQgPSAndW5zdGFydGVkJyxcbn1cblxuZXhwb3J0IGVudW0gUmVuZGVyTW9kZSB7XG4gIE5vcm1hbCA9ICdub3JtYWwnLFxuICBBbnN3ZXJGaXJzdCA9ICdhbnN3ZXJGaXJzdCcsXG59XG5cbmV4cG9ydCB0eXBlIFRvZGF5ID0ge1xuICB0YWdzOiB7XG4gICAgW3RhZzogc3RyaW5nXToge1xuICAgICAgc3RhdHVzOiBDb21wbGV0aW9uU3RhdHVzO1xuICAgICAgZHVlOiBudW1iZXI7XG4gICAgICBuZXc6IG51bWJlcjtcbiAgICAgIGR1ZVVpZHM6IFJlY29yZFVpZFtdO1xuICAgICAgbmV3VWlkczogUmVjb3JkVWlkW107XG4gICAgICBjb21wbGV0ZWQ6IG51bWJlcjtcbiAgICAgIGNvbXBsZXRlZFVpZHM6IFJlY29yZFVpZFtdO1xuICAgICAgY29tcGxldGVkRHVlOiBudW1iZXI7XG4gICAgICBjb21wbGV0ZWROZXc6IG51bWJlcjtcbiAgICAgIGNvbXBsZXRlZER1ZVVpZHM6IFJlY29yZFVpZFtdO1xuICAgICAgY29tcGxldGVkTmV3VWlkczogUmVjb3JkVWlkW107XG4gICAgICByZW5kZXJNb2RlOiBSZW5kZXJNb2RlO1xuICAgIH07XG4gIH07XG4gIGNvbWJpbmVkVG9kYXk6IHtcbiAgICBzdGF0dXM6IENvbXBsZXRpb25TdGF0dXM7XG4gICAgZHVlOiBudW1iZXI7XG4gICAgbmV3OiBudW1iZXI7XG4gICAgZHVlVWlkczogUmVjb3JkVWlkW107XG4gICAgbmV3VWlkczogUmVjb3JkVWlkW107XG4gICAgY29tcGxldGVkOiBudW1iZXI7XG4gICAgY29tcGxldGVkVWlkczogUmVjb3JkVWlkW107XG4gICAgY29tcGxldGVkRHVlOiBudW1iZXI7XG4gICAgY29tcGxldGVkTmV3OiBudW1iZXI7XG4gICAgY29tcGxldGVkRHVlVWlkczogUmVjb3JkVWlkW107XG4gICAgY29tcGxldGVkTmV3VWlkczogUmVjb3JkVWlkW107XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgVG9kYXlJbml0aWFsOiBUb2RheSA9IHtcbiAgdGFnczoge30sXG4gIGNvbWJpbmVkVG9kYXk6IHtcbiAgICBzdGF0dXM6IENvbXBsZXRpb25TdGF0dXMuVW5zdGFydGVkLFxuICAgIGR1ZTogMCxcbiAgICBuZXc6IDAsXG4gICAgZHVlVWlkczogW10sXG4gICAgbmV3VWlkczogW10sXG4gICAgY29tcGxldGVkOiAwLFxuICAgIGNvbXBsZXRlZFVpZHM6IFtdLFxuICAgIGNvbXBsZXRlZER1ZTogMCxcbiAgICBjb21wbGV0ZWREdWVVaWRzOiBbXSxcbiAgICBjb21wbGV0ZWROZXc6IDAsXG4gICAgY29tcGxldGVkTmV3VWlkczogW10sXG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgTmV3U2Vzc2lvbiwgUmV2aWV3TW9kZXMsIEludGVydmFsTXVsdGlwbGllclR5cGUgfSBmcm9tICd+L21vZGVscy9zZXNzaW9uJztcblxuZXhwb3J0IGNvbnN0IHBhcmVudENoYWluSW5mb1F1ZXJ5ID0gYFtcbiAgOmZpbmQgKHB1bGwgP3BhcmVudElkcyBbXG4gICAgOm5vZGUvdGl0bGVcbiAgICA6YmxvY2svc3RyaW5nXG4gICAgOmJsb2NrL3VpZF0pXG4gIDppbiAkID9yZWZJZFxuICA6d2hlcmVcbiAgICBbP2Jsb2NrIDpibG9jay91aWQgP3JlZklkXVxuICAgIFs/YmxvY2sgOmJsb2NrL3BhcmVudHMgP3BhcmVudElkc11cbiAgXWA7XG5cbmNvbnN0IGdldFBhcmVudENoYWluSW5mbyA9IGFzeW5jICh7IHJlZlVpZCB9KSA9PiB7XG4gIGNvbnN0IGRhdGFSZXN1bHRzID0gYXdhaXQgd2luZG93LnJvYW1BbHBoYUFQSS5xKHBhcmVudENoYWluSW5mb1F1ZXJ5LCByZWZVaWQpO1xuXG4gIHJldHVybiBkYXRhUmVzdWx0cy5tYXAoKHIpID0+IHJbMF0pO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBCbG9ja0luZm8ge1xuICBzdHJpbmc6IHN0cmluZztcbiAgY2hpbGRyZW46IGFueVtdO1xuICBjaGlsZHJlblVpZHM/OiBzdHJpbmdbXTtcbiAgYnJlYWRjcnVtYnM6IEJyZWFkY3J1bWJzW107XG5cbiAgcmVmVWlkOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEJyZWFkY3J1bWJzIHtcbiAgW2luZGV4OiBudW1iZXJdOiB7IHVpZDogc3RyaW5nOyB0aXRsZTogc3RyaW5nIH07XG59XG5cbmV4cG9ydCBjb25zdCBibG9ja0luZm9RdWVyeSA9IGBbXG4gIDpmaW5kIChwdWxsID9ibG9jayBbXG4gICAgOmJsb2NrL3N0cmluZ1xuICAgIDpibG9jay9jaGlsZHJlblxuICAgIHs6YmxvY2svY2hpbGRyZW4gWzpibG9jay91aWQgOmJsb2NrL3N0cmluZyA6YmxvY2svb3JkZXJdfV0pXG4gIDppbiAkID9yZWZJZFxuICA6d2hlcmVcbiAgICBbP2Jsb2NrIDpibG9jay91aWQgP3JlZklkXVxuICBdYDtcbmV4cG9ydCBjb25zdCBmZXRjaEJsb2NrSW5mbzogKHJlZlVpZDogYW55KSA9PiBQcm9taXNlPEJsb2NrSW5mbz4gPSBhc3luYyAocmVmVWlkKSA9PiB7XG4gIGNvbnN0IGJsb2NrSW5mbyA9IChhd2FpdCB3aW5kb3cucm9hbUFscGhhQVBJLnEoYmxvY2tJbmZvUXVlcnksIHJlZlVpZCkpWzBdWzBdO1xuICBjb25zdCBwYXJlbnRDaGFpbkluZm8gPSBhd2FpdCBnZXRQYXJlbnRDaGFpbkluZm8oeyByZWZVaWQgfSk7XG5cbiAgY29uc3Qgc29ydGVkQ2hpbGRyZW4gPSBibG9ja0luZm8uY2hpbGRyZW4/LnNvcnQoKGEsIGIpID0+IGEub3JkZXIgLSBiLm9yZGVyKTtcblxuICByZXR1cm4ge1xuICAgIHN0cmluZzogYmxvY2tJbmZvLnN0cmluZyxcbiAgICBjaGlsZHJlbjogc29ydGVkQ2hpbGRyZW4/Lm1hcCgoY2hpbGQpID0+IGNoaWxkLnN0cmluZyksXG4gICAgY2hpbGRyZW5VaWRzOiBzb3J0ZWRDaGlsZHJlbj8ubWFwKChjaGlsZCkgPT4gY2hpbGQudWlkKSxcbiAgICBicmVhZGNydW1iczogcGFyZW50Q2hhaW5JbmZvLFxuICAgIHJlZlVpZCxcbiAgfTtcbn07XG5cbi8qKlxuICogIFNob3V0IG91dCB0byBEYXZpZCBCaWViZXIgZm9yIHRoZXNlIGhlbHBmdWwgZnVuY3Rpb25zIEJsb2c6XG4gKiAgaHR0cHM6Ly9kYXZpZGJpZWJlci5jb20vc25pcHBldHMvMjAyMS0wMi0xMi1qYXZhc2NyaXB0LWZ1bmN0aW9ucy1mb3ItaW5zZXJ0aW5nLWJsb2Nrcy1pbi1yb2FtL1xuICovXG5leHBvcnQgY29uc3QgZ2V0UGFnZVF1ZXJ5ID0gYFtcbiAgOmZpbmQgP3VpZCA6aW4gJCA/dGl0bGVcbiAgOndoZXJlXG4gICAgWz9wYWdlIDpub2RlL3RpdGxlID90aXRsZV1cbiAgICBbP3BhZ2UgOmJsb2NrL3VpZCA/dWlkXVxuXWA7XG5jb25zdCBnZXRQYWdlID0gKHBhZ2UpID0+IHtcbiAgLy8gcmV0dXJucyB0aGUgdWlkIG9mIGEgc3BlY2lmaWMgcGFnZSBpbiB5b3VyIGdyYXBoLiBfcGFnZV86IHRoZSB0aXRsZSBvZiB0aGVcbiAgLy8gcGFnZS5cbiAgY29uc3QgcmVzdWx0cyA9IHdpbmRvdy5yb2FtQWxwaGFBUEkucShnZXRQYWdlUXVlcnksIHBhZ2UpO1xuICBpZiAocmVzdWx0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0c1swXVswXTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldE9yQ3JlYXRlUGFnZSA9IGFzeW5jIChwYWdlVGl0bGUpID0+IHtcbiAgY29uc3QgcGFnZSA9IGdldFBhZ2UocGFnZVRpdGxlKTtcbiAgaWYgKHBhZ2UpIHJldHVybiBwYWdlO1xuICBjb25zdCB1aWQgPSB3aW5kb3cucm9hbUFscGhhQVBJLnV0aWwuZ2VuZXJhdGVVSUQoKTtcbiAgYXdhaXQgd2luZG93LnJvYW1BbHBoYUFQSS5kYXRhLnBhZ2UuY3JlYXRlKHsgcGFnZTogeyB0aXRsZTogcGFnZVRpdGxlLCB1aWQgfSB9KTtcblxuICByZXR1cm4gZ2V0UGFnZShwYWdlVGl0bGUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEJsb2NrT25QYWdlID0gKHBhZ2UsIGJsb2NrKSA9PiB7XG4gIC8vIHJldHVybnMgdGhlIHVpZCBvZiBhIHNwZWNpZmljIGJsb2NrIG9uIGEgc3BlY2lmaWMgcGFnZS4gX3BhZ2VfOiB0aGUgdGl0bGVcbiAgLy8gb2YgdGhlIHBhZ2UuIF9ibG9ja186IHRoZSB0ZXh0IG9mIHRoZSBibG9jay5cbiAgY29uc3QgcmVzdWx0cyA9IHdpbmRvdy5yb2FtQWxwaGFBUEkucShcbiAgICBgXG4gICAgWzpmaW5kID9ibG9ja191aWRcbiAgICAgOmluICQgP3BhZ2VfdGl0bGUgP2Jsb2NrX3N0cmluZ1xuICAgICA6d2hlcmVcbiAgICAgWz9wYWdlIDpub2RlL3RpdGxlID9wYWdlX3RpdGxlXVxuICAgICBbP3BhZ2UgOmJsb2NrL3VpZCA/cGFnZV91aWRdXG4gICAgIFs/YmxvY2sgOmJsb2NrL3BhcmVudHMgP3BhZ2VdXG4gICAgIFs/YmxvY2sgOmJsb2NrL3N0cmluZyA/YmxvY2tfc3RyaW5nXVxuICAgICBbP2Jsb2NrIDpibG9jay91aWQgP2Jsb2NrX3VpZF1cbiAgICBdYCxcbiAgICBwYWdlLFxuICAgIGJsb2NrXG4gICk7XG4gIGlmIChyZXN1bHRzLmxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHRzWzBdWzBdO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q2hpbGRCbG9jayA9IChcbiAgcGFyZW50X3VpZDogc3RyaW5nLFxuICBibG9jazogc3RyaW5nLFxuICBvcHRpb25zOiB7XG4gICAgZXhhY3RNYXRjaD86IGJvb2xlYW47XG4gIH0gPSB7XG4gICAgZXhhY3RNYXRjaDogdHJ1ZSxcbiAgfVxuKSA9PiB7XG4gIC8vIHJldHVybnMgdGhlIHVpZCBvZiBhIHNwZWNpZmljIGNoaWxkIGJsb2NrIHVuZGVybmVhdGggYSBzcGVjaWZpYyBwYXJlbnRcbiAgLy8gYmxvY2suIF9wYXJlbnRfdWlkXzogdGhlIHVpZCBvZiB0aGUgcGFyZW50IGJsb2NrLiBfYmxvY2tfOiB0aGUgdGV4dCBvZiB0aGVcbiAgLy8gY2hpbGQgYmxvY2suXG4gIGNvbnN0IGV4YWN0TWF0Y2hRdWVyeSA9IGBcbiAgICBbOmZpbmQgP2Jsb2NrX3VpZFxuICAgIDppbiAkID9wYXJlbnRfdWlkID9ibG9ja19zdHJpbmdcbiAgICA6d2hlcmVcbiAgICAgIFs/cGFyZW50IDpibG9jay91aWQgP3BhcmVudF91aWRdXG4gICAgICBbP2Jsb2NrIDpibG9jay9wYXJlbnRzID9wYXJlbnRdXG4gICAgICBbP2Jsb2NrIDpibG9jay9zdHJpbmcgP2Jsb2NrX3N0cmluZ11cbiAgICAgIFs/YmxvY2sgOmJsb2NrL3VpZCA/YmxvY2tfdWlkXVxuICAgIF1cbiAgYDtcblxuICBjb25zdCBzdGFydHNXaXRoUXVlcnkgPSBgXG4gICAgWzpmaW5kID9ibG9ja191aWRcbiAgICAgIDppbiAkID9wYXJlbnRfdWlkID9ibG9ja19zdWJfc3RyaW5nXG4gICAgICA6d2hlcmVcbiAgICAgICAgWz9wYXJlbnQgOmJsb2NrL3VpZCA/cGFyZW50X3VpZF1cbiAgICAgICAgWz9ibG9jayA6YmxvY2svcGFyZW50cyA/cGFyZW50XVxuICAgICAgICBbP2Jsb2NrIDpibG9jay9zdHJpbmcgP2Jsb2NrX3N0cmluZ11cbiAgICAgICAgWyhjbG9qdXJlLnN0cmluZy9zdGFydHMtd2l0aD8gP2Jsb2NrX3N0cmluZyA/YmxvY2tfc3ViX3N0cmluZyldXG4gICAgICAgIFs/YmxvY2sgOmJsb2NrL3VpZCA/YmxvY2tfdWlkXVxuICAgIF1cbiAgYDtcblxuICBjb25zdCBxdWVyeSA9IG9wdGlvbnMuZXhhY3RNYXRjaCA/IGV4YWN0TWF0Y2hRdWVyeSA6IHN0YXJ0c1dpdGhRdWVyeTtcblxuICBjb25zdCByZXN1bHRzID0gd2luZG93LnJvYW1BbHBoYUFQSS5xKHF1ZXJ5LCBwYXJlbnRfdWlkLCBibG9jayk7XG4gIGlmIChyZXN1bHRzLmxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHRzWzBdWzBdO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY2hpbGRCbG9ja3NPblBhZ2VRdWVyeSA9IGBbXG4gIDpmaW5kIChwdWxsID90YWdQYWdlIFtcbiAgICA6YmxvY2svdWlkXG4gICAgOmJsb2NrL3N0cmluZ1xuICAgIDpibG9jay9jaGlsZHJlblxuICAgIHs6YmxvY2svY2hpbGRyZW4gLi4ufV0pXG4gIDppbiAkID90YWdcbiAgOndoZXJlXG4gICAgWz90YWdQYWdlIDpub2RlL3RpdGxlID90YWddXG4gICAgWz90YWdQYWdlIDpibG9jay9jaGlsZHJlbiA/dGFnUGFnZUNoaWxkcmVuXVxuICBdYDtcbmV4cG9ydCBjb25zdCBnZXRDaGlsZEJsb2Nrc09uUGFnZSA9IGFzeW5jIChwYWdlKSA9PiB7XG4gIGNvbnN0IHF1ZXJ5UmVzdWx0cyA9IGF3YWl0IHdpbmRvdy5yb2FtQWxwaGFBUEkucShjaGlsZEJsb2Nrc09uUGFnZVF1ZXJ5LCBwYWdlKTtcblxuICBpZiAoIXF1ZXJ5UmVzdWx0cy5sZW5ndGgpIHJldHVybiBbXTtcblxuICByZXR1cm4gcXVlcnlSZXN1bHRzO1xufTtcblxuLy8g8J+OryBORVc6IOiOt+WPluaMh+WummJsb2Nr55qE5a2QYmxvY2tzXG5leHBvcnQgY29uc3QgY2hpbGRCbG9ja3NCeVVpZFF1ZXJ5ID0gYFtcbiAgOmZpbmQgKHB1bGwgP2NoaWxkIFtcbiAgICA6YmxvY2svdWlkXG4gICAgOmJsb2NrL3N0cmluZ1xuICAgIDpibG9jay9vcmRlcl0pXG4gIDppbiAkID9wYXJlbnRfdWlkXG4gIDp3aGVyZVxuICAgIFs/cGFyZW50IDpibG9jay91aWQgP3BhcmVudF91aWRdXG4gICAgWz9wYXJlbnQgOmJsb2NrL2NoaWxkcmVuID9jaGlsZF1cbiAgXWA7XG5cbmV4cG9ydCBjb25zdCBnZXRDaGlsZEJsb2Nrc0J5VWlkID0gYXN5bmMgKHBhcmVudFVpZDogc3RyaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcXVlcnlSZXN1bHRzID0gYXdhaXQgd2luZG93LnJvYW1BbHBoYUFQSS5xKGNoaWxkQmxvY2tzQnlVaWRRdWVyeSwgcGFyZW50VWlkKTtcbiAgICBcbiAgICBpZiAoIXF1ZXJ5UmVzdWx0cy5sZW5ndGgpIHJldHVybiBbXTtcbiAgICBcbiAgICAvLyDov5Tlm57moLzlvI/ljJbnmoTlrZBibG9ja3PvvIzmjIlvcmRlcuaOkuW6j1xuICAgIGNvbnN0IGNoaWxkQmxvY2tzID0gcXVlcnlSZXN1bHRzLm1hcChyZXN1bHQgPT4gcmVzdWx0WzBdKS5zb3J0KChhLCBiKSA9PiBhLm9yZGVyIC0gYi5vcmRlcik7XG4gICAgXG4gICAgY29uc29sZS5sb2coYPCflI0gW1V0aWxzXSBnZXRDaGlsZEJsb2Nrc0J5VWlkKCR7cGFyZW50VWlkfSkg6L+U5ZueICR7Y2hpbGRCbG9ja3MubGVuZ3RofSDkuKrlrZBibG9ja3NgKTtcbiAgICBcbiAgICByZXR1cm4gY2hpbGRCbG9ja3M7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihg8J+UjSBbVXRpbHNdIGdldENoaWxkQmxvY2tzQnlVaWQoJHtwYXJlbnRVaWR9KSDlpLHotKU6YCwgZXJyb3IpO1xuICAgIHJldHVybiBbXTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUNoaWxkQmxvY2sgPSBhc3luYyAocGFyZW50X3VpZCwgYmxvY2ssIG9yZGVyLCBibG9ja1Byb3BzID0ge30pID0+IHtcbiAgLy8gcmV0dXJucyB0aGUgdWlkIG9mIGEgc3BlY2lmaWMgY2hpbGQgYmxvY2sgdW5kZXJuZWF0aCBhIHNwZWNpZmljIHBhcmVudFxuICAvLyBibG9jaywgY3JlYXRpbmcgaXQgZmlyc3QgaWYgaXQncyBub3QgYWxyZWFkeSB0aGVyZS4gX3BhcmVudF91aWRfOiB0aGUgdWlkXG4gIC8vIG9mIHRoZSBwYXJlbnQgYmxvY2suIF9ibG9ja186IHRoZSB0ZXh0IG9mIHRoZSBjaGlsZCBibG9jay4gX29yZGVyXzpcbiAgLy8gKG9wdGlvbmFsKSBjb250cm9scyB3aGVyZSB0byBjcmVhdGUgdGhlIGJsb2NrLCAwIGZvciBpbnNlcnRpbmcgYXQgdGhlIHRvcCxcbiAgLy8gLTEgZm9yIGluc2VydGluZyBhdCB0aGUgYm90dG9tLlxuICBpZiAoIW9yZGVyKSB7XG4gICAgb3JkZXIgPSAwO1xuICB9XG5cbiAgY29uc3QgdWlkID0gd2luZG93LnJvYW1BbHBoYUFQSS51dGlsLmdlbmVyYXRlVUlEKCk7XG4gIGF3YWl0IHdpbmRvdy5yb2FtQWxwaGFBUEkuY3JlYXRlQmxvY2soe1xuICAgIGxvY2F0aW9uOiB7ICdwYXJlbnQtdWlkJzogcGFyZW50X3VpZCwgb3JkZXI6IG9yZGVyIH0sXG4gICAgYmxvY2s6IHsgc3RyaW5nOiBibG9jaywgdWlkLCAuLi5ibG9ja1Byb3BzIH0sXG4gIH0pO1xuXG4gIHJldHVybiB1aWQ7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlQmxvY2tPblBhZ2UgPSBhc3luYyAocGFnZSwgYmxvY2ssIG9yZGVyLCBibG9ja1Byb3BzKSA9PiB7XG4gIC8vIGNyZWF0ZXMgYSBuZXcgdG9wLWxldmVsIGJsb2NrIG9uIGEgc3BlY2lmaWMgcGFnZSwgcmV0dXJuaW5nIHRoZSBuZXcgYmxvY2snc1xuICAvLyB1aWQuIF9wYWdlXzogdGhlIHRpdGxlIG9mIHRoZSBwYWdlLiBfYmxvY2tfOiB0aGUgdGV4dCBvZiB0aGUgYmxvY2suXG4gIC8vIF9vcmRlcl86IChvcHRpb25hbCkgY29udHJvbHMgd2hlcmUgdG8gY3JlYXRlIHRoZSBibG9jaywgMCBmb3IgdG9wIG9mIHBhZ2UsXG4gIC8vIC0xIGZvciBib3R0b20gb2YgcGFnZS5cbiAgY29uc3QgcGFnZV91aWQgPSBnZXRQYWdlKHBhZ2UpO1xuICByZXR1cm4gY3JlYXRlQ2hpbGRCbG9jayhwYWdlX3VpZCwgYmxvY2ssIG9yZGVyLCBibG9ja1Byb3BzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRPckNyZWF0ZUJsb2NrT25QYWdlID0gYXN5bmMgKHBhZ2UsIGJsb2NrLCBvcmRlciwgYmxvY2tQcm9wcykgPT4ge1xuICAvLyByZXR1cm5zIHRoZSB1aWQgb2YgYSBzcGVjaWZpYyBibG9jayBvbiBhIHNwZWNpZmljIHBhZ2UsIGNyZWF0aW5nIGl0IGZpcnN0XG4gIC8vIGFzIGEgdG9wLWxldmVsIGJsb2NrIGlmIGl0J3Mgbm90IGFscmVhZHkgdGhlcmUuIF9wYWdlXzogdGhlIHRpdGxlIG9mIHRoZVxuICAvLyBwYWdlLiBfYmxvY2tfOiB0aGUgdGV4dCBvZiB0aGUgYmxvY2suIF9vcmRlcl86IChvcHRpb25hbCkgY29udHJvbHMgd2hlcmUgdG9cbiAgLy8gY3JlYXRlIHRoZSBibG9jaywgMCBmb3IgdG9wIG9mIHBhZ2UsIC0xIGZvciBib3R0b20gb2YgcGFnZS5cbiAgY29uc3QgYmxvY2tfdWlkID0gZ2V0QmxvY2tPblBhZ2UocGFnZSwgYmxvY2spO1xuICBpZiAoYmxvY2tfdWlkKSByZXR1cm4gYmxvY2tfdWlkO1xuICByZXR1cm4gY3JlYXRlQmxvY2tPblBhZ2UocGFnZSwgYmxvY2ssIG9yZGVyLCBibG9ja1Byb3BzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRPckNyZWF0ZUNoaWxkQmxvY2sgPSBhc3luYyAocGFyZW50X3VpZCwgYmxvY2ssIG9yZGVyLCBibG9ja1Byb3BzKSA9PiB7XG4gIC8vIGNyZWF0ZXMgYSBuZXcgY2hpbGQgYmxvY2sgdW5kZXJuZWF0aCBhIHNwZWNpZmljIHBhcmVudCBibG9jaywgcmV0dXJuaW5nIHRoZVxuICAvLyBuZXcgYmxvY2sncyB1aWQuIF9wYXJlbnRfdWlkXzogdGhlIHVpZCBvZiB0aGUgcGFyZW50IGJsb2NrLiBfYmxvY2tfOiB0aGVcbiAgLy8gdGV4dCBvZiB0aGUgbmV3IGJsb2NrLiBfb3JkZXJfOiAob3B0aW9uYWwpIGNvbnRyb2xzIHdoZXJlIHRvIGNyZWF0ZSB0aGVcbiAgLy8gYmxvY2ssIDAgZm9yIGluc2VydGluZyBhdCB0aGUgdG9wLCAtMSBmb3IgaW5zZXJ0aW5nIGF0IHRoZSBib3R0b20uXG4gIGNvbnN0IGJsb2NrX3VpZCA9IGdldENoaWxkQmxvY2socGFyZW50X3VpZCwgYmxvY2spO1xuICBpZiAoYmxvY2tfdWlkKSByZXR1cm4gYmxvY2tfdWlkO1xuICByZXR1cm4gY3JlYXRlQ2hpbGRCbG9jayhwYXJlbnRfdWlkLCBibG9jaywgb3JkZXIsIGJsb2NrUHJvcHMpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlTmV3U2Vzc2lvbiA9ICh7XG4gIHJldmlld01vZGUgPSBSZXZpZXdNb2Rlcy5GaXhlZEludGVydmFsLCAvLyDpu5jorqTmlLnkuLogRklYIOaooeW8j1xuICBkYXRlQ3JlYXRlZCA9IHVuZGVmaW5lZCxcbiAgaXNOZXcgPSB0cnVlLFxufSA9IHt9KTogTmV3U2Vzc2lvbiA9PiB7XG4gIGlmIChyZXZpZXdNb2RlID09PSBSZXZpZXdNb2Rlcy5EZWZhdWx0U3BhY2VkSW50ZXJ2YWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0ZUNyZWF0ZWQ6IGRhdGVDcmVhdGVkIHx8IG5ldyBEYXRlKCksXG4gICAgICBlRmFjdG9yOiAyLjUsXG4gICAgICBpbnRlcnZhbDogMCxcbiAgICAgIHJlcGV0aXRpb25zOiAwLFxuICAgICAgaXNOZXcsXG4gICAgICByZXZpZXdNb2RlLFxuICAgIH07XG4gIH1cblxuICAvLyBGSVgg5qih5byP77yI5omL5Yqo6Ze06ZqU6YeN5aSN77yJXG4gIHJldHVybiB7XG4gICAgZGF0ZUNyZWF0ZWQ6IGRhdGVDcmVhdGVkIHx8IG5ldyBEYXRlKCksXG4gICAgaW50ZXJ2YWxNdWx0aXBsaWVyOiAzLFxuICAgIGludGVydmFsTXVsdGlwbGllclR5cGU6IEludGVydmFsTXVsdGlwbGllclR5cGUuRGF5cyxcbiAgICBpc05ldyxcbiAgICByZXZpZXdNb2RlLFxuICB9O1xufTtcblxuLy8g8J+agCBORVc6IOagueaNrumhtemdouagh+mimOaJuemHj+iOt+WPllVJRFxuZXhwb3J0IGNvbnN0IGdldFBhZ2VVaWRzRnJvbVRpdGxlcyA9ICh0aXRsZXM6IHN0cmluZ1tdKTogc3RyaW5nW10gPT4ge1xuICBpZiAoIXRpdGxlcyB8fCB0aXRsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIFxuICBjb25zdCBxdWVyeSA9IGBbXG4gICAgOmZpbmQgWz91aWQgLi4uXVxuICAgIDppbiAkIFs/dGl0bGUgLi4uXVxuICAgIDp3aGVyZVxuICAgICAgWz9wYWdlIDpub2RlL3RpdGxlID90aXRsZV1cbiAgICAgIFs/cGFnZSA6YmxvY2svdWlkID91aWRdXG4gIF1gO1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3VsdHMgPSB3aW5kb3cucm9hbUFscGhhQVBJLnEocXVlcnksIHRpdGxlcyk7XG4gICAgcmV0dXJuIHJlc3VsdHMgfHwgW107XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gZ2V0UGFnZVVpZHNGcm9tVGl0bGVzOlwiLCBlKTtcbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5cbi8qKlxuICogR2V0cyBhbGwgdGhlIGNoaWxkIGJsb2NrcyBvbiBhIHBhZ2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYWdlTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwYWdlIHRvIGdldCB0aGUgYmxvY2tzIGZyb21cbiAqL1xuLy8gZXhwb3J0IGNvbnN0IGdldENoaWxkQmxvY2tzT25QYWdlID0gYXN5bmMgKHBhZ2VOYW1lOiBzdHJpbmcpID0+IHtcbi8vICAgY29uc3QgcXVlcnlSZXN1bHRzID0gYXdhaXQgd2luZG93LnJvYW1BbHBoYUFQSS5xKGNoaWxkQmxvY2tzT25QYWdlUXVlcnksIHBhZ2VOYW1lKTtcblxuLy8gICBpZiAoIXF1ZXJ5UmVzdWx0cy5sZW5ndGgpIHJldHVybiBbXTtcblxuLy8gICByZXR1cm4gcXVlcnlSZXN1bHRzO1xuLy8gfTtcbiIsImltcG9ydCAqIGFzIGRhdGVVdGlscyBmcm9tICd+L3V0aWxzL2RhdGUnO1xuaW1wb3J0ICogYXMgb2JqZWN0VXRpbHMgZnJvbSAnfi91dGlscy9vYmplY3QnO1xuaW1wb3J0IHsgQ29tcGxldGVSZWNvcmRzLCBSZWNvcmRVaWQsIFNlc3Npb24gfSBmcm9tICd+L21vZGVscy9zZXNzaW9uJztcbmltcG9ydCB7IENvbXBsZXRpb25TdGF0dXMsIFJlbmRlck1vZGUsIFRvZGF5LCBUb2RheUluaXRpYWwgfSBmcm9tICd+L21vZGVscy9wcmFjdGljZSc7XG5pbXBvcnQgeyBnZW5lcmF0ZU5ld1Nlc3Npb24gfSBmcm9tICd+L3F1ZXJpZXMvdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZVRvZGF5ID0gKHsgdGFnc0xpc3QsIGNhY2hlZERhdGEgfSkgPT4ge1xuICBjb25zdCB0b2RheTogVG9kYXkgPSBvYmplY3RVdGlscy5kZWVwQ2xvbmUoVG9kYXlJbml0aWFsKTtcblxuICBmb3IgKGNvbnN0IHRhZyBvZiB0YWdzTGlzdCkge1xuICAgIGNvbnN0IGNhY2hlZFRhZ0RhdGEgPSBjYWNoZWREYXRhPy5bdGFnXTtcblxuICAgIHRvZGF5LnRhZ3NbdGFnXSA9IHtcbiAgICAgIHN0YXR1czogQ29tcGxldGlvblN0YXR1cy5VbnN0YXJ0ZWQsXG4gICAgICBjb21wbGV0ZWQ6IDAsXG4gICAgICBkdWU6IDAsXG4gICAgICBuZXc6IDAsXG4gICAgICBuZXdVaWRzOiBbXSxcbiAgICAgIGR1ZVVpZHM6IFtdLFxuICAgICAgY29tcGxldGVkVWlkczogW10sXG4gICAgICBjb21wbGV0ZWREdWU6IDAsXG4gICAgICBjb21wbGV0ZWROZXc6IDAsXG4gICAgICBjb21wbGV0ZWREdWVVaWRzOiBbXSxcbiAgICAgIGNvbXBsZXRlZE5ld1VpZHM6IFtdLFxuICAgICAgcmVuZGVyTW9kZTogY2FjaGVkVGFnRGF0YT8ucmVuZGVyTW9kZSB8fCBSZW5kZXJNb2RlLk5vcm1hbCxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHRvZGF5O1xufTtcblxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVRvZGF5U3RhdHVzID0gKHsgdG9kYXksIHRhZ3NMaXN0IH0pID0+IHtcbiAgLy8gQ2FsY3VsYXRlIHRoZSBzdGF0dXMgb2YgZWFjaCB0YWdcbiAgZm9yIChjb25zdCB0YWcgb2YgdGFnc0xpc3QpIHtcbiAgICBjb25zdCBjb21wbGV0ZWQgPSB0b2RheS50YWdzW3RhZ10uY29tcGxldGVkO1xuICAgIGNvbnN0IHJlbWFpbmluZyA9IHRvZGF5LnRhZ3NbdGFnXS5uZXcgKyB0b2RheS50YWdzW3RhZ10uZHVlO1xuXG4gICAgaWYgKHJlbWFpbmluZyA9PT0gMCkge1xuICAgICAgdG9kYXkudGFnc1t0YWddLnN0YXR1cyA9IENvbXBsZXRpb25TdGF0dXMuRmluaXNoZWQ7XG4gICAgfSBlbHNlIGlmIChjb21wbGV0ZWQgPiAwKSB7XG4gICAgICB0b2RheS50YWdzW3RhZ10uc3RhdHVzID0gQ29tcGxldGlvblN0YXR1cy5QYXJ0aWFsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b2RheS50YWdzW3RhZ10uc3RhdHVzID0gQ29tcGxldGlvblN0YXR1cy5VbnN0YXJ0ZWQ7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSBzdGF0dXMgb2YgdGhlIGNvbWJpbmVkIGNvdW50c1xuICBjb25zdCBjb21wbGV0ZWQgPSB0b2RheS5jb21iaW5lZFRvZGF5LmNvbXBsZXRlZDtcbiAgY29uc3QgcmVtYWluaW5nID0gdG9kYXkuY29tYmluZWRUb2RheS5uZXcgKyB0b2RheS5jb21iaW5lZFRvZGF5LmR1ZTtcblxuICBpZiAocmVtYWluaW5nID09PSAwKSB7XG4gICAgdG9kYXkuY29tYmluZWRUb2RheS5zdGF0dXMgPSBDb21wbGV0aW9uU3RhdHVzLkZpbmlzaGVkO1xuICB9IGVsc2UgaWYgKGNvbXBsZXRlZCA+IDApIHtcbiAgICB0b2RheS5jb21iaW5lZFRvZGF5LnN0YXR1cyA9IENvbXBsZXRpb25TdGF0dXMuUGFydGlhbDtcbiAgfSBlbHNlIHtcbiAgICB0b2RheS5jb21iaW5lZFRvZGF5LnN0YXR1cyA9IENvbXBsZXRpb25TdGF0dXMuVW5zdGFydGVkO1xuICB9XG59O1xuXG4vKipcbiAqIEFkZHMgZGF0YSBmb3IgYWxsIHRoZSBjYXJkcyBwcmFjdGlzZWQgdG9kYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUNvbXBsZXRlZFRvZGF5Q291bnRzID0gYXN5bmMgKHsgdG9kYXksIHRhZ3NMaXN0LCBzZXNzaW9uRGF0YSB9KSA9PiB7XG4gIGZvciAoY29uc3QgdGFnIG9mIHRhZ3NMaXN0KSB7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBjb25zdCBjb21wbGV0ZWRVaWRzID0gW107XG4gICAgY29uc3QgY29tcGxldGVkRHVlVWlkcyA9IFtdO1xuICAgIGNvbnN0IGNvbXBsZXRlZE5ld1VpZHMgPSBbXTtcblxuICAgIGNvbnN0IGN1cnJlbnRUYWdTZXNzaW9uRGF0YSA9IHNlc3Npb25EYXRhW3RhZ107XG4gICAgT2JqZWN0LmtleXMoY3VycmVudFRhZ1Nlc3Npb25EYXRhKS5mb3JFYWNoKChjYXJkVWlkKSA9PiB7XG4gICAgICBjb25zdCBjYXJkRGF0YSA9IGN1cnJlbnRUYWdTZXNzaW9uRGF0YVtjYXJkVWlkXTtcbiAgICAgIGNvbnN0IGxhdGVzdFNlc3Npb24gPSBjYXJkRGF0YVtjYXJkRGF0YS5sZW5ndGggLSAxXTtcbiAgICAgIGNvbnN0IGlzQ29tcGxldGVkVG9kYXkgPVxuICAgICAgICBsYXRlc3RTZXNzaW9uICYmIGRhdGVVdGlscy5pc1NhbWVEYXkobGF0ZXN0U2Vzc2lvbi5kYXRlQ3JlYXRlZCwgbmV3IERhdGUoKSk7XG5cbiAgICAgIGlmIChpc0NvbXBsZXRlZFRvZGF5KSB7XG4gICAgICAgIGNvbnN0IGlzRmlyc3RTZXNzaW9uID0gY2FyZERhdGEubGVuZ3RoID09PSAxO1xuICAgICAgICBjb25zdCB3YXNEdWVUb2RheSA9ICFpc0ZpcnN0U2Vzc2lvbjtcbiAgICAgICAgY29uc3Qgd2FzTmV3ID0gaXNGaXJzdFNlc3Npb247XG5cbiAgICAgICAgY291bnQrKztcbiAgICAgICAgY29tcGxldGVkVWlkcy5wdXNoKGNhcmRVaWQpO1xuICAgICAgICBpZiAod2FzRHVlVG9kYXkpIGNvbXBsZXRlZER1ZVVpZHMucHVzaChjYXJkVWlkKTtcbiAgICAgICAgaWYgKHdhc05ldykgY29tcGxldGVkTmV3VWlkcy5wdXNoKGNhcmRVaWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdG9kYXkudGFnc1t0YWddID0ge1xuICAgICAgLi4uKHRvZGF5LnRhZ3NbdGFnXSB8fCB7fSksXG4gICAgICBjb21wbGV0ZWQ6IGNvdW50LFxuICAgICAgY29tcGxldGVkVWlkcyxcbiAgICAgIGNvbXBsZXRlZER1ZVVpZHMsXG4gICAgICBjb21wbGV0ZWROZXdVaWRzLFxuICAgICAgY29tcGxldGVkRHVlOiBjb21wbGV0ZWREdWVVaWRzLmxlbmd0aCxcbiAgICAgIGNvbXBsZXRlZE5ldzogY29tcGxldGVkTmV3VWlkcy5sZW5ndGgsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB0b2RheTtcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVDb21iaW5lZENvdW50cyA9ICh7IHRvZGF5LCB0YWdzTGlzdCB9KSA9PiB7XG4gIC8vIFJlc2V0IGNvbWJpbmVkIGNvdW50c1xuICBjb25zdCB0b2RheUluaXRpYWw6IFRvZGF5ID0gb2JqZWN0VXRpbHMuZGVlcENsb25lKFRvZGF5SW5pdGlhbCk7XG5cbiAgdG9kYXkuY29tYmluZWRUb2RheSA9IHRvZGF5SW5pdGlhbC5jb21iaW5lZFRvZGF5O1xuXG4gIGZvciAoY29uc3QgdGFnIG9mIHRhZ3NMaXN0KSB7XG4gICAgdG9kYXkuY29tYmluZWRUb2RheS5kdWUgKz0gdG9kYXkudGFnc1t0YWddLmR1ZTtcbiAgICB0b2RheS5jb21iaW5lZFRvZGF5Lm5ldyArPSB0b2RheS50YWdzW3RhZ10ubmV3O1xuICAgIHRvZGF5LmNvbWJpbmVkVG9kYXkuZHVlVWlkcyA9IHRvZGF5LmNvbWJpbmVkVG9kYXkuZHVlVWlkcy5jb25jYXQodG9kYXkudGFnc1t0YWddLmR1ZVVpZHMpO1xuICAgIHRvZGF5LmNvbWJpbmVkVG9kYXkubmV3VWlkcyA9IHRvZGF5LmNvbWJpbmVkVG9kYXkubmV3VWlkcy5jb25jYXQodG9kYXkudGFnc1t0YWddLm5ld1VpZHMpO1xuICAgIHRvZGF5LmNvbWJpbmVkVG9kYXkuY29tcGxldGVkICs9IHRvZGF5LnRhZ3NbdGFnXS5jb21wbGV0ZWQ7XG4gICAgdG9kYXkuY29tYmluZWRUb2RheS5jb21wbGV0ZWRVaWRzID0gdG9kYXkuY29tYmluZWRUb2RheS5jb21wbGV0ZWRVaWRzLmNvbmNhdChcbiAgICAgIHRvZGF5LnRhZ3NbdGFnXS5jb21wbGV0ZWRVaWRzXG4gICAgKTtcbiAgICB0b2RheS5jb21iaW5lZFRvZGF5LmNvbXBsZXRlZER1ZSArPSB0b2RheS50YWdzW3RhZ10uY29tcGxldGVkRHVlO1xuICAgIHRvZGF5LmNvbWJpbmVkVG9kYXkuY29tcGxldGVkRHVlVWlkcyA9IHRvZGF5LmNvbWJpbmVkVG9kYXkuY29tcGxldGVkRHVlVWlkcy5jb25jYXQoXG4gICAgICB0b2RheS50YWdzW3RhZ10uY29tcGxldGVkRHVlVWlkc1xuICAgICk7XG4gICAgdG9kYXkuY29tYmluZWRUb2RheS5jb21wbGV0ZWROZXcgKz0gdG9kYXkudGFnc1t0YWddLmNvbXBsZXRlZE5ldztcbiAgICB0b2RheS5jb21iaW5lZFRvZGF5LmNvbXBsZXRlZE5ld1VpZHMgPSB0b2RheS5jb21iaW5lZFRvZGF5LmNvbXBsZXRlZE5ld1VpZHMuY29uY2F0KFxuICAgICAgdG9kYXkudGFnc1t0YWddLmNvbXBsZXRlZE5ld1VpZHNcbiAgICApO1xuICB9XG5cbiAgLy8g8J+agCBGSVhFRDog5a+55ZCI5bm25ZCO55qEVUlE5YiX6KGo6L+b6KGM5Y676YeN77yM5bm25Z+65LqO5Y676YeN5ZCO55qE57uT5p6c6YeN5paw6K6h566X5oC75pWw77yM56Gu5L+d5pWw5o2u5LiA6Ie05oCnXG4gIHRvZGF5LmNvbWJpbmVkVG9kYXkuZHVlVWlkcyA9IFsuLi5uZXcgU2V0KHRvZGF5LmNvbWJpbmVkVG9kYXkuZHVlVWlkcyldO1xuICB0b2RheS5jb21iaW5lZFRvZGF5Lm5ld1VpZHMgPSBbLi4ubmV3IFNldCh0b2RheS5jb21iaW5lZFRvZGF5Lm5ld1VpZHMpXTtcbiAgdG9kYXkuY29tYmluZWRUb2RheS5jb21wbGV0ZWRVaWRzID0gWy4uLm5ldyBTZXQodG9kYXkuY29tYmluZWRUb2RheS5jb21wbGV0ZWRVaWRzKV07XG4gIHRvZGF5LmNvbWJpbmVkVG9kYXkuY29tcGxldGVkRHVlVWlkcyA9IFsuLi5uZXcgU2V0KHRvZGF5LmNvbWJpbmVkVG9kYXkuY29tcGxldGVkRHVlVWlkcyldO1xuICB0b2RheS5jb21iaW5lZFRvZGF5LmNvbXBsZXRlZE5ld1VpZHMgPSBbLi4ubmV3IFNldCh0b2RheS5jb21iaW5lZFRvZGF5LmNvbXBsZXRlZE5ld1VpZHMpXTtcblxuICB0b2RheS5jb21iaW5lZFRvZGF5LmR1ZSA9IHRvZGF5LmNvbWJpbmVkVG9kYXkuZHVlVWlkcy5sZW5ndGg7XG4gIHRvZGF5LmNvbWJpbmVkVG9kYXkubmV3ID0gdG9kYXkuY29tYmluZWRUb2RheS5uZXdVaWRzLmxlbmd0aDtcbiAgdG9kYXkuY29tYmluZWRUb2RheS5jb21wbGV0ZWQgPSB0b2RheS5jb21iaW5lZFRvZGF5LmNvbXBsZXRlZFVpZHMubGVuZ3RoO1xuICB0b2RheS5jb21iaW5lZFRvZGF5LmNvbXBsZXRlZER1ZSA9IHRvZGF5LmNvbWJpbmVkVG9kYXkuY29tcGxldGVkRHVlVWlkcy5sZW5ndGg7XG4gIHRvZGF5LmNvbWJpbmVkVG9kYXkuY29tcGxldGVkTmV3ID0gdG9kYXkuY29tYmluZWRUb2RheS5jb21wbGV0ZWROZXdVaWRzLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQ3JlYXRlIG5ldyBjYXJkcyBmb3IgYWxsIHJlZmVyZW5jZWQgY2FyZHMgd2l0aCBubyBzZXNzaW9uIGRhdGEgeWV0XG4gKi9cbmV4cG9ydCBjb25zdCBhZGROZXdDYXJkcyA9ICh7XG4gIHRvZGF5LFxuICB0YWdzTGlzdCxcbiAgY2FyZFVpZHMsXG4gIHBsdWdpblBhZ2VEYXRhLFxuICBzaHVmZmxlQ2FyZHMsXG4gIHByaW9yaXR5T3JkZXIgPSBbXSxcbn06IHtcbiAgdG9kYXk6IFRvZGF5O1xuICB0YWdzTGlzdDogc3RyaW5nW107XG4gIGNhcmRVaWRzOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmRVaWRbXT47XG4gIHBsdWdpblBhZ2VEYXRhOiBDb21wbGV0ZVJlY29yZHM7XG4gIHNodWZmbGVDYXJkczogYm9vbGVhbjtcbiAgcHJpb3JpdHlPcmRlcj86IHN0cmluZ1tdO1xufSkgPT4ge1xuICBjb25zdCByYW5rTWFwID0gY3JlYXRlUmFua01hcChwcmlvcml0eU9yZGVyKTtcbiAgZm9yIChjb25zdCBjdXJyZW50VGFnIG9mIHRhZ3NMaXN0KSB7XG4gICAgY29uc3QgYWxsU2VsZWN0ZWRUYWdDYXJkc1VpZHMgPSBjYXJkVWlkc1tjdXJyZW50VGFnXTtcbiAgICBjb25zdCBuZXdDYXJkc1VpZHM6IFJlY29yZFVpZFtdID0gW107XG5cbiAgICBhbGxTZWxlY3RlZFRhZ0NhcmRzVWlkcy5mb3JFYWNoKChyZWZlcmVuY2VJZCkgPT4ge1xuICAgICAgaWYgKCFwbHVnaW5QYWdlRGF0YVtyZWZlcmVuY2VJZF0gfHwgIXBsdWdpblBhZ2VEYXRhW3JlZmVyZW5jZUlkXS5sZW5ndGgpIHtcbiAgICAgICAgLy8gTmV3XG4gICAgICAgIG5ld0NhcmRzVWlkcy5wdXNoKHJlZmVyZW5jZUlkKTtcbiAgICAgICAgcGx1Z2luUGFnZURhdGFbcmVmZXJlbmNlSWRdID0gW2dlbmVyYXRlTmV3U2Vzc2lvbigpXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChyYW5rTWFwICYmICFzaHVmZmxlQ2FyZHMpIHtcbiAgICAgIGNvbnN0IGdldFJhbmsgPSAodWlkOiBzdHJpbmcpID0+IHJhbmtNYXAuZ2V0KHVpZCkgPz8gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICBuZXdDYXJkc1VpZHMuc29ydCgoYSwgYikgPT4gZ2V0UmFuayhhKSAtIGdldFJhbmsoYikpO1xuICAgIH0gZWxzZSBpZiAoc2h1ZmZsZUNhcmRzKSB7XG4gICAgICBuZXdDYXJkc1VpZHMuc29ydCgoKSA9PiBNYXRoLnJhbmRvbSgpIC0gMC41KTtcbiAgICB9XG5cbiAgICB0b2RheS50YWdzW2N1cnJlbnRUYWddID0ge1xuICAgICAgLi4udG9kYXkudGFnc1tjdXJyZW50VGFnXSxcbiAgICAgIG5ld1VpZHM6IG5ld0NhcmRzVWlkcyxcbiAgICAgIG5ldzogbmV3Q2FyZHNVaWRzLmxlbmd0aCxcbiAgICB9O1xuICB9XG59O1xuXG5jb25zdCBjcmVhdGVSYW5rTWFwID0gKHByaW9yaXR5T3JkZXI6IHN0cmluZ1tdKTogTWFwPHN0cmluZywgbnVtYmVyPiB8IG51bGwgPT4ge1xuICBpZiAoIXByaW9yaXR5T3JkZXIgfHwgcHJpb3JpdHlPcmRlci5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuICBjb25zdCBtID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcbiAgcHJpb3JpdHlPcmRlci5mb3JFYWNoKCh1aWQsIGkpID0+IG0uc2V0KHVpZCwgaSkpO1xuICByZXR1cm4gbTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXREdWVDYXJkVWlkcyA9IChjdXJyZW50VGFnU2Vzc2lvbkRhdGE6IENvbXBsZXRlUmVjb3JkcywgaXNDcmFtbWluZywgcHJpb3JpdHlPcmRlcjogc3RyaW5nW10gPSBbXSkgPT4ge1xuICBjb25zdCByZXN1bHRzOiBSZWNvcmRVaWRbXSA9IFtdO1xuICBpZiAoIU9iamVjdC5rZXlzKGN1cnJlbnRUYWdTZXNzaW9uRGF0YSkubGVuZ3RoKSByZXR1cm4gcmVzdWx0cztcblxuICBjb25zdCByYW5rTWFwID0gY3JlYXRlUmFua01hcChwcmlvcml0eU9yZGVyKTtcblxuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICBPYmplY3Qua2V5cyhjdXJyZW50VGFnU2Vzc2lvbkRhdGEpLmZvckVhY2goKGNhcmRVaWQpID0+IHtcbiAgICBjb25zdCBjYXJkRGF0YSA9IGN1cnJlbnRUYWdTZXNzaW9uRGF0YVtjYXJkVWlkXSBhcyBTZXNzaW9uW107XG5cbiAgICBjb25zdCBsYXRlc3RTZXNzaW9uID0gY2FyZERhdGFbY2FyZERhdGEubGVuZ3RoIC0gMV07XG4gICAgaWYgKCFsYXRlc3RTZXNzaW9uKSByZXR1cm47XG5cbiAgICBjb25zdCBuZXh0RHVlRGF0ZSA9IGxhdGVzdFNlc3Npb24ubmV4dER1ZURhdGU7XG5cbiAgICBpZiAoaXNDcmFtbWluZyB8fCAobmV4dER1ZURhdGUgJiYgbmV4dER1ZURhdGUgPD0gbm93KSkge1xuICAgICAgcmVzdWx0cy5wdXNoKGNhcmRVaWQgYXMgUmVjb3JkVWlkKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIOaMieaOkuWQjeWIl+ihqOi/m+ihjOaOkuW6j1xuICBpZiAocmFua01hcCkge1xuICAgIGNvbnN0IGdldFJhbmsgPSAodWlkOiBzdHJpbmcpID0+IHJhbmtNYXAuZ2V0KHVpZCkgPz8gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgcmVzdWx0cy5zb3J0KChhLCBiKSA9PiBnZXRSYW5rKGEpIC0gZ2V0UmFuayhiKSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbmV4cG9ydCBjb25zdCBhZGREdWVDYXJkcyA9ICh7IHRvZGF5LCB0YWdzTGlzdCwgc2Vzc2lvbkRhdGEsIGlzQ3JhbW1pbmcsIHNodWZmbGVDYXJkcywgcHJpb3JpdHlPcmRlciA9IFtdIH0pID0+IHtcbiAgY29uc3QgcmFua01hcCA9IGNyZWF0ZVJhbmtNYXAocHJpb3JpdHlPcmRlcik7XG4gIGZvciAoY29uc3QgY3VycmVudFRhZyBvZiB0YWdzTGlzdCkge1xuICAgIGNvbnN0IGN1cnJlbnRUYWdTZXNzaW9uRGF0YSA9IHNlc3Npb25EYXRhW2N1cnJlbnRUYWddO1xuICAgIGNvbnN0IGR1ZUNhcmRzVWlkcyA9IGdldER1ZUNhcmRVaWRzKGN1cnJlbnRUYWdTZXNzaW9uRGF0YSwgaXNDcmFtbWluZywgcHJpb3JpdHlPcmRlcik7XG5cbiAgICBpZiAoc2h1ZmZsZUNhcmRzKSB7XG4gICAgICBkdWVDYXJkc1VpZHMuc29ydCgoKSA9PiBNYXRoLnJhbmRvbSgpIC0gMC41KTtcbiAgICB9IGVsc2UgaWYgKHJhbmtNYXApIHtcbiAgICAgIGNvbnN0IGdldFJhbmsgPSAodWlkOiBzdHJpbmcpID0+IHJhbmtNYXAuZ2V0KHVpZCkgPz8gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICBkdWVDYXJkc1VpZHMuc29ydCgoYSwgYikgPT4gZ2V0UmFuayhhKSAtIGdldFJhbmsoYikpO1xuICAgIH1cblxuICAgIHRvZGF5LnRhZ3NbY3VycmVudFRhZ10gPSB7XG4gICAgICAuLi50b2RheS50YWdzW2N1cnJlbnRUYWddLFxuICAgICAgZHVlVWlkczogZHVlQ2FyZHNVaWRzLFxuICAgICAgZHVlOiBkdWVDYXJkc1VpZHMubGVuZ3RoLFxuICAgIH07XG4gIH1cbn07XG5cbi8qKlxuICogSGVyZSB3ZSdyZSBhZGRpbmcgYmFjayBjb21wbGV0ZWQgY2FyZHMgdG8gY291bnRzLiBUaGlzIGlzIHNvIHdlIGNhbiBjb21wdXRlXG4gKiB0aGUgaW5pdGlhbCBkaXN0cmlidXRpb24gb2YgY2FyZHMgKHRoZSBkaXN0cmlidXRpb24gYmVmb3JlIHdlIGNvbXBsZXRlZFxuICogY2FyZHMpLiBUaGlzIGFsbG93cyB1cyB0byBtYWludGFpbiB0aGUgc2FtZSBkaXN0cmlidXRpb24gb24gcmUtcnVucyAoZW5hYmxpbmdcbiAqIGZlYXR1cmVzIGxpa2UgcGFydGlhbCBjb21wbGV0aW9ucyB0aGF0IGRvbid0IHJlZGlzdHJpYnV0ZSBldmVyeXRpbWUpXG4gKi9cbmV4cG9ydCBjb25zdCByZXN0b3JlQ29tcGxldGVkVWlkcyA9ICh7IHRvZGF5LCB0YWdzTGlzdCB9KSA9PiB7XG4gIGZvciAoY29uc3QgY3VycmVudFRhZyBvZiB0YWdzTGlzdCkge1xuICAgIHRvZGF5LnRhZ3NbY3VycmVudFRhZ10ubmV3VWlkcy5wdXNoKC4uLnRvZGF5LnRhZ3NbY3VycmVudFRhZ10uY29tcGxldGVkTmV3VWlkcyk7XG4gICAgdG9kYXkudGFnc1tjdXJyZW50VGFnXS5kdWVVaWRzLnB1c2goLi4udG9kYXkudGFnc1tjdXJyZW50VGFnXS5jb21wbGV0ZWREdWVVaWRzKTtcbiAgICB0b2RheS50YWdzW2N1cnJlbnRUYWddLm5ldyA9IHRvZGF5LnRhZ3NbY3VycmVudFRhZ10ubmV3VWlkcy5sZW5ndGg7XG4gICAgdG9kYXkudGFnc1tjdXJyZW50VGFnXS5kdWUgPSB0b2RheS50YWdzW2N1cnJlbnRUYWddLmR1ZVVpZHMubGVuZ3RoO1xuICB9XG59O1xuIiwiaW1wb3J0ICogYXMgc3RyaW5nVXRpbHMgZnJvbSAnfi91dGlscy9zdHJpbmcnO1xuaW1wb3J0ICogYXMgZGF0ZVV0aWxzIGZyb20gJ34vdXRpbHMvZGF0ZSc7XG5pbXBvcnQgeyBDb21wbGV0ZVJlY29yZHMgfSBmcm9tICd+L21vZGVscy9zZXNzaW9uJztcbmltcG9ydCB7XG4gIGNyZWF0ZUNoaWxkQmxvY2ssXG4gIGdldENoaWxkQmxvY2ssXG4gIGdldE9yQ3JlYXRlQmxvY2tPblBhZ2UsXG4gIGdldE9yQ3JlYXRlQ2hpbGRCbG9jayxcbiAgZ2V0T3JDcmVhdGVQYWdlLFxuICBnZXRDaGlsZEJsb2Nrc09uUGFnZSxcbiAgZ2V0Q2hpbGRCbG9ja3NCeVVpZCxcbn0gZnJvbSAnfi9xdWVyaWVzL3V0aWxzJztcblxuY29uc3QgZ2V0RW1vamlGcm9tR3JhZGUgPSAoZ3JhZGUpID0+IHtcbiAgc3dpdGNoIChncmFkZSkge1xuICAgIGNhc2UgNTpcbiAgICAgIHJldHVybiAn8J+foic7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuICfwn5S1JztcbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gJ/Cfn6AnO1xuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiAn8J+foCc7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuICfwn5S0JztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICfwn5+iJztcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHNhdmVQcmFjdGljZURhdGEgPSBhc3luYyAoeyByZWZVaWQsIGRhdGFQYWdlVGl0bGUsIGRhdGVDcmVhdGVkLCAuLi5kYXRhIH0pID0+IHtcbiAgYXdhaXQgZ2V0T3JDcmVhdGVQYWdlKGRhdGFQYWdlVGl0bGUpO1xuICBjb25zdCBkYXRhQmxvY2tVaWQgPSBhd2FpdCBnZXRPckNyZWF0ZUJsb2NrT25QYWdlKGRhdGFQYWdlVGl0bGUsICdkYXRhJywgLTEsIHtcbiAgICBvcGVuOiBmYWxzZSxcbiAgICBoZWFkaW5nOiAzLFxuICB9KTtcblxuICAvLyBHZXQgY2hpbGQgdGhhdCBtYXRjaGVzIHJlZlVpZFxuICBjb25zdCBjYXJkRGF0YUJsb2NrVWlkID0gYXdhaXQgZ2V0T3JDcmVhdGVDaGlsZEJsb2NrKGRhdGFCbG9ja1VpZCwgYCgoJHtyZWZVaWR9KSlgLCAwLCB7XG4gICAgb3BlbjogZmFsc2UsXG4gIH0pO1xuXG4gIGNvbnN0IHJlZmVyZW5jZURhdGUgPSBkYXRlQ3JlYXRlZCB8fCBuZXcgRGF0ZSgpO1xuICBjb25zdCBkYXRlQ3JlYXRlZFJvYW1EYXRlU3RyaW5nID0gc3RyaW5nVXRpbHMuZGF0ZVRvUm9hbURhdGVTdHJpbmcocmVmZXJlbmNlRGF0ZSk7XG4gIGNvbnN0IGVtb2ppID0gZ2V0RW1vamlGcm9tR3JhZGUoZGF0YS5ncmFkZSk7XG4gIGNvbnN0IG5ld0RhdGFCbG9ja0lkID0gYXdhaXQgY3JlYXRlQ2hpbGRCbG9jayhcbiAgICBjYXJkRGF0YUJsb2NrVWlkLFxuICAgIGBbWyR7ZGF0ZUNyZWF0ZWRSb2FtRGF0ZVN0cmluZ31dXSAke2Vtb2ppfWAsXG4gICAgMCxcbiAgICB7XG4gICAgICBvcGVuOiBmYWxzZSxcbiAgICB9XG4gICk7XG5cbiAgLy8gSW5zZXJ0IG5ldyBibG9jayBpbmZvXG4gIGNvbnN0IG5leHREdWVEYXRlID0gZGF0YS5uZXh0RHVlRGF0ZSB8fCBkYXRlVXRpbHMuYWRkRGF5cyhyZWZlcmVuY2VEYXRlLCBkYXRhLmludGVydmFsKTtcblxuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhkYXRhKSkge1xuICAgIGxldCB2YWx1ZSA9IGRhdGFba2V5XTtcbiAgICBpZiAoa2V5ID09PSAnbmV4dER1ZURhdGUnKSB7XG4gICAgICB2YWx1ZSA9IGBbWyR7c3RyaW5nVXRpbHMuZGF0ZVRvUm9hbURhdGVTdHJpbmcobmV4dER1ZURhdGUpfV1dYDtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2ZzcnNTdGF0ZScgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgLy8g5bqP5YiX5YyWRlNSU+eKtuaAgeWvueixoeS4ukpTT07lrZfnrKbkuLJcbiAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIH1cblxuICAgIGF3YWl0IGNyZWF0ZUNoaWxkQmxvY2sobmV3RGF0YUJsb2NrSWQsIGAke2tleX06OiAke3ZhbHVlfWAsIC0xKTtcbiAgfVxufTtcblxuaW50ZXJmYWNlIEJ1bGtTYXZlUHJhY3RpY2VEYXRhT3B0aW9ucyB7XG4gIHRva2VuOiBzdHJpbmc7XG4gIHJlY29yZHM6IENvbXBsZXRlUmVjb3JkcztcbiAgc2VsZWN0ZWRVaWRzOiBzdHJpbmdbXTtcbiAgZGF0YVBhZ2VUaXRsZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgYnVsa1NhdmVQcmFjdGljZURhdGEgPSBhc3luYyAoe1xuICB0b2tlbixcbiAgcmVjb3JkcyxcbiAgc2VsZWN0ZWRVaWRzLFxuICBkYXRhUGFnZVRpdGxlLFxufTogQnVsa1NhdmVQcmFjdGljZURhdGFPcHRpb25zKSA9PiB7XG4gIGF3YWl0IGdldE9yQ3JlYXRlUGFnZShkYXRhUGFnZVRpdGxlKTtcbiAgY29uc3QgZGF0YUJsb2NrVWlkID0gYXdhaXQgZ2V0T3JDcmVhdGVCbG9ja09uUGFnZShkYXRhUGFnZVRpdGxlLCAnZGF0YScsIC0xLCB7XG4gICAgb3BlbjogZmFsc2UsXG4gICAgaGVhZGluZzogMyxcbiAgfSk7XG4gIGNvbnN0IGdyYXBoTmFtZSA9IHdpbmRvdy5yb2FtQWxwaGFBUEkuZ3JhcGgubmFtZTtcblxuICBjb25zdCBwYXlsb2FkID0ge1xuICAgIGdyYXBoTmFtZSxcbiAgICBkYXRhOiB7XG4gICAgICBhY3Rpb246ICdiYXRjaC1hY3Rpb25zJyxcbiAgICAgIGFjdGlvbnM6IFtdLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gQ3JlYXRlIHByYWN0aWNlIGVudHJpZXNcbiAgZm9yIChjb25zdCByZWZVaWQgb2Ygc2VsZWN0ZWRVaWRzKSB7XG4gICAgLy8gQ2hlY2sgaWYgZW50cnkgYWxyZWFkeSBleGlzdHMsIGlmIGl0IGRvZXMsIGRlbGV0ZSBpdCBmaXJzdCBzbyB3ZSBkb24ndFxuICAgIC8vIGhhdmUgZHVwbGljYXRlc1xuICAgIGNvbnN0IGV4aXN0aW5nRW50cnlVaWQgPSBnZXRDaGlsZEJsb2NrKGRhdGFCbG9ja1VpZCwgYCgoJHtyZWZVaWR9KSlgKTtcbiAgICBpZiAoZXhpc3RpbmdFbnRyeVVpZCkge1xuICAgICAgcGF5bG9hZC5kYXRhLmFjdGlvbnMucHVzaCh7XG4gICAgICAgIGFjdGlvbjogJ2RlbGV0ZS1ibG9jaycsXG4gICAgICAgIGJsb2NrOiB7XG4gICAgICAgICAgdWlkOiBleGlzdGluZ0VudHJ5VWlkLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgZW50cnlVaWQgPSB3aW5kb3cucm9hbUFscGhhQVBJLnV0aWwuZ2VuZXJhdGVVSUQoKTtcbiAgICBwYXlsb2FkLmRhdGEuYWN0aW9ucy5wdXNoKHtcbiAgICAgIGFjdGlvbjogJ2NyZWF0ZS1ibG9jaycsXG4gICAgICBsb2NhdGlvbjoge1xuICAgICAgICAncGFyZW50LXVpZCc6IGRhdGFCbG9ja1VpZCxcbiAgICAgICAgb3JkZXI6IDAsXG4gICAgICB9LFxuICAgICAgYmxvY2s6IHtcbiAgICAgICAgc3RyaW5nOiBgKCgke3JlZlVpZH0pKWAsXG4gICAgICAgIHVpZDogZW50cnlVaWQsXG4gICAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIEFkZCBzZXNzaW9uc1xuICAgIGNvbnN0IHNlc3Npb25zID0gcmVjb3Jkc1tyZWZVaWRdO1xuICAgIGZvciAoY29uc3Qgc2Vzc2lvbiBvZiBzZXNzaW9ucykge1xuICAgICAgLy8gQWRkIFNlc3Npb24gSGVhZGluZ1xuICAgICAgY29uc3QgZGF0ZUNyZWF0ZWRSb2FtRGF0ZVN0cmluZyA9IHN0cmluZ1V0aWxzLmRhdGVUb1JvYW1EYXRlU3RyaW5nKHNlc3Npb24uZGF0ZUNyZWF0ZWQpO1xuICAgICAgY29uc3QgZW1vamkgPSBnZXRFbW9qaUZyb21HcmFkZShzZXNzaW9uLmdyYWRlKTtcbiAgICAgIGNvbnN0IHNlc3Npb25IZWFkaW5nVWlkID0gd2luZG93LnJvYW1BbHBoYUFQSS51dGlsLmdlbmVyYXRlVUlEKCk7XG4gICAgICBwYXlsb2FkLmRhdGEuYWN0aW9ucy5wdXNoKHtcbiAgICAgICAgYWN0aW9uOiAnY3JlYXRlLWJsb2NrJyxcbiAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICAncGFyZW50LXVpZCc6IGVudHJ5VWlkLFxuICAgICAgICAgIG9yZGVyOiAwLFxuICAgICAgICB9LFxuICAgICAgICBibG9jazoge1xuICAgICAgICAgIHN0cmluZzogYFtbJHtkYXRlQ3JlYXRlZFJvYW1EYXRlU3RyaW5nfV1dICR7ZW1vaml9YCxcbiAgICAgICAgICB1aWQ6IHNlc3Npb25IZWFkaW5nVWlkLFxuICAgICAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIC8vIEFkZCBTZXNzaW9uIERhdGFcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNlc3Npb24pKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHNlc3Npb25ba2V5XTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ2RhdGVDcmVhdGVkJykgY29udGludWU7IC8vIG5vIG5lZWQgdG8gc3RvcmUgdGhpc1xuICAgICAgICBpZiAoa2V5ID09PSAnbmV4dER1ZURhdGUnKSB7XG4gICAgICAgICAgdmFsdWUgPSBgW1ske3N0cmluZ1V0aWxzLmRhdGVUb1JvYW1EYXRlU3RyaW5nKHZhbHVlKX1dXWA7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZnNyc1N0YXRlJyAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8g5bqP5YiX5YyWRlNSU+eKtuaAgeWvueixoeS4ukpTT07lrZfnrKbkuLJcbiAgICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBwYXlsb2FkLmRhdGEuYWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICBhY3Rpb246ICdjcmVhdGUtYmxvY2snLFxuICAgICAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgICAgICAncGFyZW50LXVpZCc6IHNlc3Npb25IZWFkaW5nVWlkLFxuICAgICAgICAgICAgb3JkZXI6IC0xLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmxvY2s6IHtcbiAgICAgICAgICAgIHN0cmluZzogYCR7a2V5fTo6ICR7dmFsdWV9YCxcbiAgICAgICAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBiYXNlVXJsID0gJ2h0dHBzOi8vcm9hbS1tZW1vLXNlcnZlci5vbnJlbmRlci5jb20nO1xuICB0cnkge1xuICAgIGF3YWl0IGZldGNoKGAke2Jhc2VVcmx9L3NhdmUtcm9hbS1zci1kYXRhYCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWAsXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIEJ1bGsgU2F2aW5nJywgZXJyb3IpO1xuICB9XG59O1xuXG4vLyDwn46vIOWNj+WQjOaOkuWQjeezu+e7nyAtIOaguOW/g0FQSeWHveaVsFxuZXhwb3J0IGNvbnN0IGxvYWRDYXJkUmFua2luZ3MgPSBhc3luYyAoeyBcbiAgZGF0YVBhZ2VUaXRsZSBcbn06IHsgXG4gIGRhdGFQYWdlVGl0bGU6IHN0cmluZzsgXG59KTogUHJvbWlzZTxzdHJpbmdbXT4gPT4ge1xuICB0cnkge1xuICAgIGF3YWl0IGdldE9yQ3JlYXRlUGFnZShkYXRhUGFnZVRpdGxlKTtcbiAgICBjb25zdCBkYXRhQmxvY2tVaWQgPSBhd2FpdCBnZXRPckNyZWF0ZUJsb2NrT25QYWdlKGRhdGFQYWdlVGl0bGUsICdkYXRhJywgLTEsIHtcbiAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgaGVhZGluZzogMyxcbiAgICB9KTtcblxuICAgIC8vIOafpeaJvlwiUHJpb3JpdHkgUmFua2luZ3NcIuWuueWZqGJsb2Nr77yI5pSv5oyB5Lik56eN5qC85byP77yJXG4gICAgbGV0IHByaW9yaXR5Q29udGFpbmVyVWlkID0gZ2V0Q2hpbGRCbG9jayhkYXRhQmxvY2tVaWQsICdQcmlvcml0eSBSYW5raW5ncycpO1xuICAgIGlmICghcHJpb3JpdHlDb250YWluZXJVaWQpIHtcbiAgICAgIC8vIOWFvOWuueaXp+eahOeyl+S9k+agvOW8j1xuICAgICAgcHJpb3JpdHlDb250YWluZXJVaWQgPSBnZXRDaGlsZEJsb2NrKGRhdGFCbG9ja1VpZCwgJyoqUHJpb3JpdHkgUmFua2luZ3MqKicpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoIXByaW9yaXR5Q29udGFpbmVyVWlkKSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+OryDljY/lkIzmjpLlkI3ns7vnu58gLSDlrrnlmahibG9ja+S4jeWtmOWcqO+8jOi/lOWbnuepuuWIl+ihqCcpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCfwn46vIOWNj+WQjOaOkuWQjeezu+e7nyAtIOaJvuWIsOWuueWZqGJsb2NrOicsIHByaW9yaXR5Q29udGFpbmVyVWlkKTtcblxuICAgIC8vIOWcqOWuueWZqOS4reafpeaJvnByaW9yaXR5LXJhbmtpbmfmlbDmja5cbiAgICBjb25zdCBjb250YWluZXJCbG9ja3MgPSBhd2FpdCBnZXRDaGlsZEJsb2Nrc0J5VWlkKHByaW9yaXR5Q29udGFpbmVyVWlkKTtcbiAgICBcbiAgICBpZiAoIWNvbnRhaW5lckJsb2NrcyB8fCBjb250YWluZXJCbG9ja3MubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+OryDljY/lkIzmjpLlkI3ns7vnu58gLSDlrrnlmajkuLrnqbrvvIzov5Tlm57nqbrliJfooagnKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygn8J+OryDljY/lkIzmjpLlkI3ns7vnu58gLSDlrrnlmajkuK3ljIXlkKtibG9ja3M6JywgY29udGFpbmVyQmxvY2tzLm1hcChiID0+IGIuc3RyaW5nKSk7XG5cbiAgICBjb25zdCBwcmlvcml0eUJsb2NrID0gY29udGFpbmVyQmxvY2tzPy5maW5kKGJsb2NrID0+IFxuICAgICAgYmxvY2suc3RyaW5nICYmIGJsb2NrLnN0cmluZy5zdGFydHNXaXRoKCdwcmlvcml0eS1yYW5raW5nOjonKVxuICAgICk7XG5cbiAgICBpZiAoIXByaW9yaXR5QmxvY2spIHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn46vIOWNj+WQjOaOkuWQjeezu+e7nyAtIOacquaJvuWIsHByaW9yaXR5LXJhbmtpbmfmlbDmja5ibG9jaycpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnN0IG9yZGVyU3RyaW5nID0gcHJpb3JpdHlCbG9jay5zdHJpbmcucmVwbGFjZSgncHJpb3JpdHktcmFua2luZzo6JywgJycpLnRyaW0oKTtcbiAgICBpZiAoIW9yZGVyU3RyaW5nKSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+OryDljY/lkIzmjpLlkI3ns7vnu58gLSBwcmlvcml0eS1yYW5raW5n5pWw5o2u5Li656m6Jyk7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLy8g5pSv5oyB5Y+M6YeN5ous5Y+35qC85byP55qE6Kej5p6Q77yaKCh1aWQxKSksKCh1aWQyKSksKCh1aWQzKSlcbiAgICBjb25zdCByYW5raW5ncyA9IG9yZGVyU3RyaW5nXG4gICAgICAuc3BsaXQoJywnKVxuICAgICAgLm1hcCh1aWQgPT4gdWlkLnRyaW0oKSlcbiAgICAgIC5tYXAodWlkID0+IHtcbiAgICAgICAgLy8g56e76Zmk5Y+M6YeN5ous5Y+377yM5aaC5p6c5a2Y5Zyo55qE6K+dXG4gICAgICAgIGlmICh1aWQuc3RhcnRzV2l0aCgnKCgnKSAmJiB1aWQuZW5kc1dpdGgoJykpJykpIHtcbiAgICAgICAgICByZXR1cm4gdWlkLnNsaWNlKDIsIC0yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdWlkO1xuICAgICAgfSlcbiAgICAgIC5maWx0ZXIodWlkID0+IHVpZCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ/Cfjq8g5Y2P5ZCM5o6S5ZCN57O757ufIC0g5LuO5a655Zmo5Lit5oiQ5Yqf6K+75Y+W5o6S5ZCN5YiX6KGoOicsIHJhbmtpbmdzLmxlbmd0aCwgJ+S4quWNoeeJhycpO1xuICAgIHJldHVybiByYW5raW5ncztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfljY/lkIzmjpLlkI3ns7vnu58gLSDor7vlj5bmjpLlkI3liJfooajlpLHotKU6JywgZXJyb3IpO1xuICAgIHJldHVybiBbXTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHNhdmVDYXJkUmFua2luZ3MgPSBhc3luYyAoeyBcbiAgZGF0YVBhZ2VUaXRsZSwgXG4gIHJhbmtpbmdzIFxufTogeyBcbiAgZGF0YVBhZ2VUaXRsZTogc3RyaW5nOyBcbiAgcmFua2luZ3M6IHN0cmluZ1tdOyBcbn0pID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoIXdpbmRvdy5yb2FtQWxwaGFBUEkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUm9hbSBBbHBoYSBBUEkg5LiN5Y+v55SoJyk7XG4gICAgfVxuXG4gICAgYXdhaXQgZ2V0T3JDcmVhdGVQYWdlKGRhdGFQYWdlVGl0bGUpO1xuICAgIGNvbnN0IGRhdGFCbG9ja1VpZCA9IGF3YWl0IGdldE9yQ3JlYXRlQmxvY2tPblBhZ2UoZGF0YVBhZ2VUaXRsZSwgJ2RhdGEnLCAtMSwge1xuICAgICAgb3BlbjogZmFsc2UsXG4gICAgICBoZWFkaW5nOiAzLFxuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coJ/Cfjq8g5Y2P5ZCM5o6S5ZCN57O757ufIC0g5YeG5aSH5L+d5a2Y5YiwZGF0YSBibG9jazonLCBkYXRhQmxvY2tVaWQpO1xuXG4gICAgLy8g5qOA5p+l5bm26L+B56e75pen55qEcHJpb3JpdHktcmFua2luZ+aVsOaNru+8iOebtOaOpeWcqGRhdGEgYmxvY2vkuIvnmoTvvIlcbiAgICBjb25zdCBvbGRSYW5raW5nQmxvY2tVaWQgPSBnZXRDaGlsZEJsb2NrKGRhdGFCbG9ja1VpZCwgJ3ByaW9yaXR5LXJhbmtpbmc6OicsIHsgZXhhY3RNYXRjaDogZmFsc2UgfSk7XG4gICAgaWYgKG9sZFJhbmtpbmdCbG9ja1VpZCkge1xuICAgICAgY29uc29sZS5sb2coJ/Cfjq8g5Y2P5ZCM5o6S5ZCN57O757ufIC0g5Y+R546w5pen5pWw5o2u77yM5q2j5Zyo5Yig6ZmkOicsIG9sZFJhbmtpbmdCbG9ja1VpZCk7XG4gICAgICBhd2FpdCB3aW5kb3cucm9hbUFscGhhQVBJLmRlbGV0ZUJsb2NrKHsgYmxvY2s6IHsgdWlkOiBvbGRSYW5raW5nQmxvY2tVaWQgfSB9KTtcbiAgICB9XG5cbiAgICAvLyDmo4Dmn6XlubbliKDpmaTml6fnmoTnspfkvZPmoLzlvI/lrrnlmahcbiAgICBjb25zdCBvbGRCb2xkQ29udGFpbmVyVWlkID0gZ2V0Q2hpbGRCbG9jayhkYXRhQmxvY2tVaWQsICcqKlByaW9yaXR5IFJhbmtpbmdzKionKTtcbiAgICBpZiAob2xkQm9sZENvbnRhaW5lclVpZCkge1xuICAgICAgY29uc29sZS5sb2coJ/Cfjq8g5Y2P5ZCM5o6S5ZCN57O757ufIC0g5Y+R546w5pen57KX5L2T5a655Zmo77yM5q2j5Zyo5Yig6ZmkOicsIG9sZEJvbGRDb250YWluZXJVaWQpO1xuICAgICAgYXdhaXQgd2luZG93LnJvYW1BbHBoYUFQSS5kZWxldGVCbG9jayh7IGJsb2NrOiB7IHVpZDogb2xkQm9sZENvbnRhaW5lclVpZCB9IH0pO1xuICAgIH1cblxuICAgIC8vIOiOt+WPluaIluWIm+W7ulwiUHJpb3JpdHkgUmFua2luZ3NcIuWuueWZqGJsb2NrXG4gICAgY29uc3QgcHJpb3JpdHlDb250YWluZXJVaWQgPSBhd2FpdCBnZXRPckNyZWF0ZUNoaWxkQmxvY2soXG4gICAgICBkYXRhQmxvY2tVaWQsIFxuICAgICAgJ1ByaW9yaXR5IFJhbmtpbmdzJywgLy8g5L2/55So5pmu6YCaYmxvY2vmlofmnKxcbiAgICAgIDAsIC8vIOaUvuWcqGRhdGEgYmxvY2vnmoTmnIDliY3pnaJcbiAgICAgIHsgXG4gICAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgICAvLyDkuI3kvb/nlKhoZWFkaW5n5bGe5oCn77yM5L+d5oyB5Li65pmu6YCaYmxvY2tcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uc29sZS5sb2coJ/Cfjq8g5Y2P5ZCM5o6S5ZCN57O757ufIC0g5a655ZmoYmxvY2sgVUlEOicsIHByaW9yaXR5Q29udGFpbmVyVWlkKTtcblxuICAgIC8vIOWcqOWuueWZqOS4reafpeaJvueOsOacieeahHByaW9yaXR5LXJhbmtpbmfmlbDmja5cbiAgICBjb25zdCBjb250YWluZXJCbG9ja3MgPSBhd2FpdCBnZXRDaGlsZEJsb2Nrc0J5VWlkKHByaW9yaXR5Q29udGFpbmVyVWlkKTtcbiAgICBjb25zb2xlLmxvZygn8J+OryDljY/lkIzmjpLlkI3ns7vnu58gLSDlrrnlmajkuK3njrDmnIlibG9ja3M6JywgY29udGFpbmVyQmxvY2tzPy5tYXAoYiA9PiBiLnN0cmluZykpO1xuXG4gICAgY29uc3QgZXhpc3RpbmdSYW5raW5nQmxvY2sgPSBjb250YWluZXJCbG9ja3M/LmZpbmQoYmxvY2sgPT4gXG4gICAgICBibG9jay5zdHJpbmcgJiYgYmxvY2suc3RyaW5nLnN0YXJ0c1dpdGgoJ3ByaW9yaXR5LXJhbmtpbmc6OicpXG4gICAgKTtcbiAgICBcbiAgICAvLyDkvb/nlKjlj4zph43mi6zlj7fmoLzlvI/vvJooKHVpZDEpKSwoKHVpZDIpKSwoKHVpZDMpKVxuICAgIGNvbnN0IHJhbmtpbmdTdHJpbmcgPSByYW5raW5ncy5tYXAodWlkID0+IGAoKCR7dWlkfSkpYCkuam9pbignLCcpO1xuICAgIGNvbnN0IGZ1bGxTdHJpbmcgPSBgcHJpb3JpdHktcmFua2luZzo6ICR7cmFua2luZ1N0cmluZ31gO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCfwn46vIOWNj+WQjOaOkuWQjeezu+e7nyAtIOWHhuWkh+S/neWtmOaVsOaNru+8jOWNoeeJh+aVsOmHjzonLCByYW5raW5ncy5sZW5ndGgpO1xuICAgIFxuICAgIGlmIChleGlzdGluZ1JhbmtpbmdCbG9jaykge1xuICAgICAgLy8g5pu05paw546w5pyJ55qEcmFua2luZyBibG9ja1xuICAgICAgYXdhaXQgd2luZG93LnJvYW1BbHBoYUFQSS51cGRhdGVCbG9jayh7XG4gICAgICAgIGJsb2NrOiB7XG4gICAgICAgICAgdWlkOiBleGlzdGluZ1JhbmtpbmdCbG9jay51aWQsXG4gICAgICAgICAgc3RyaW5nOiBmdWxsU3RyaW5nXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc29sZS5sb2coJ/Cfjq8g5Y2P5ZCM5o6S5ZCN57O757ufIC0g5Zyo5a655Zmo5Lit5pu05paw5o6S5ZCN5YiX6KGoOicsIHJhbmtpbmdzLmxlbmd0aCwgJ+S4quWNoeeJhycpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyDlnKjlrrnlmajkuK3liJvlu7rmlrDnmoRyYW5raW5nIGJsb2NrXG4gICAgICBjb25zdCBuZXdCbG9ja1VpZCA9IGF3YWl0IGNyZWF0ZUNoaWxkQmxvY2socHJpb3JpdHlDb250YWluZXJVaWQsIGZ1bGxTdHJpbmcsIC0xKTtcbiAgICAgIGNvbnNvbGUubG9nKCfwn46vIOWNj+WQjOaOkuWQjeezu+e7nyAtIOWcqOWuueWZqOS4reWIm+W7uuaOkuWQjeWIl+ihqDonLCByYW5raW5ncy5sZW5ndGgsICfkuKrljaHniYcsIFVJRDonLCBuZXdCbG9ja1VpZCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKCfwn46vIOWNj+WQjOaOkuWQjeezu+e7nyAtIOS/neWtmOaTjeS9nOWujOaIkCcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+WNj+WQjOaOkuWQjeezu+e7nyAtIOS/neWtmOaOkuWQjeWIl+ihqOWksei0pTonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbi8vIPCfjq8g6I635Y+W5Y2h54mH55qE5b2T5YmN5o6S5ZCNXG5leHBvcnQgY29uc3QgZ2V0Q2FyZFJhbmsgPSAoe1xuICByZWZVaWQsXG4gIHByaW9yaXR5T3JkZXIsXG4gIGFsbENhcmRzQ291bnQsXG4gIGRlZmF1bHRQcmlvcml0eSxcbn06IHtcbiAgcmVmVWlkOiBzdHJpbmc7XG4gIHByaW9yaXR5T3JkZXI6IHN0cmluZ1tdO1xuICBhbGxDYXJkc0NvdW50OiBudW1iZXI7XG4gIGRlZmF1bHRQcmlvcml0eTogbnVtYmVyO1xufSk6IG51bWJlciA9PiB7XG4gIC8vIOKchSDpmLLlvqHmgKfnvJbnqIvvvJrnoa7kv51wcmlvcml0eU9yZGVy5piv5LiA5Liq5pWw57uEXG4gIGlmICghcHJpb3JpdHlPcmRlciB8fCBwcmlvcml0eU9yZGVyLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIOWmguaenOaOkuWQjeWIl+ihqOS4uuepuu+8jOWImeagueaNrum7mOiupOS8mOWFiOe6p+S8sOeul+S4gOS4quaOkuWQjVxuICAgIHJldHVybiBNYXRoLm1heCgxLCBNYXRoLmNlaWwoYWxsQ2FyZHNDb3VudCAqICgxIC0gZGVmYXVsdFByaW9yaXR5IC8gMTAwKSkpO1xuICB9XG4gIFxuICBjb25zdCBpbmRleCA9IHByaW9yaXR5T3JkZXIuaW5kZXhPZihyZWZVaWQpO1xuICBcbiAgLy8g5aaC5p6c5Y2h54mH5LiN5Zyo5o6S5ZCN5YiX6KGo5Lit77yI5paw5Y2h54mH77yJ77yM5YiZ5qC55o2u6buY6K6k5LyY5YWI57qn5Lyw566XXG4gIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoMSwgTWF0aC5jZWlsKGFsbENhcmRzQ291bnQgKiAoMSAtIGRlZmF1bHRQcmlvcml0eSAvIDEwMCkpKTtcbiAgfVxuICBcbiAgcmV0dXJuIGluZGV4ICsgMTsgLy8g5o6S5ZCN5LuOMeW8gOWni1xufTtcblxuLy8g8J+OryDmibnph4/kv53lrZjmjpLlkI3lj5jmm7TvvIjljY/lkIzlpITnkIbvvIlcbmV4cG9ydCBjb25zdCBidWxrU2F2ZVJhbmtpbmdDaGFuZ2VzID0gYXN5bmMgKHsgXG4gIHJhbmtpbmdDaGFuZ2VzLFxuICBkYXRhUGFnZVRpdGxlLFxuICBhbGxDYXJkVWlkc1xufTogeyBcbiAgcmFua2luZ0NoYW5nZXM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj47IFxuICBkYXRhUGFnZVRpdGxlOiBzdHJpbmc7XG4gIGFsbENhcmRVaWRzOiBzdHJpbmdbXTtcbn0pID0+IHtcbiAgdHJ5IHtcbiAgICAvLyDinIUg5Y+C5pWw6aqM6K+BXG4gICAgaWYgKCFyYW5raW5nQ2hhbmdlcyB8fCBPYmplY3Qua2V5cyhyYW5raW5nQ2hhbmdlcykubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghZGF0YVBhZ2VUaXRsZT8udHJpbSgpIHx8ICFhbGxDYXJkVWlkcz8ubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGFQYWdlVGl0bGUg5oiWIGFsbENhcmRVaWRzIOS4jeiDveS4uuepuicpO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGDwn46vIOWNj+WQjOaOkuWQjeezu+e7nyAtIOW8gOWni+aJuemHj+S/neWtmOaOkuWQjeWPmOabtDogJHtPYmplY3Qua2V5cyhyYW5raW5nQ2hhbmdlcykubGVuZ3RofSDkuKrlj5jmm7RgKTtcblxuICAgIC8vIDEuIOWKoOi9veW9k+WJjeaOkuWQjVxuICAgIGxldCBjdXJyZW50UmFua2luZ3MgPSBhd2FpdCBsb2FkQ2FyZFJhbmtpbmdzKHsgZGF0YVBhZ2VUaXRsZSB9KTtcbiAgICAvLyDlpoLmnpzmsqHmnInmjpLlkI3vvIzliJnkvb/nlKjmiYDmnInljaHniYfnmoTliJfooajkvZzkuLrln7rnoYBcbiAgICBpZiAoY3VycmVudFJhbmtpbmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY3VycmVudFJhbmtpbmdzID0gWy4uLmFsbENhcmRVaWRzXTtcbiAgICB9XG4gICAgXG4gICAgLy8g8J+akSDng63kv646IOWOu+mHjeW9k+WJjeaOkuWQjeWIl+ihqO+8jOS/neeVmemmluasoeWHuueOsOeahOmhuuW6j++8jOmBv+WFjeWQjue7reaPkuWFpeaXtuaKpVwi5YyF5ZCr6YeN5aSN5Y2h54mHXCLplJnor69cbiAgICBjb25zdCBzZWVuID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgY3VycmVudFJhbmtpbmdzID0gY3VycmVudFJhbmtpbmdzLmZpbHRlcih1aWQgPT4ge1xuICAgICAgaWYgKHNlZW4uaGFzKHVpZCkpIHJldHVybiBmYWxzZTtcbiAgICAgIHNlZW4uYWRkKHVpZCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcblxuICAgIC8vIDIuIOWIm+W7uuS4gOS4quW3suWPmOabtOWNoeeJh+eahFNldO+8jOeUqOS6jk8oMSnlpI3mnYLluqbnmoTlv6vpgJ/mn6Xmib5cbiAgICBjb25zdCBjaGFuZ2VkVWlkcyA9IG5ldyBTZXQoT2JqZWN0LmtleXMocmFua2luZ0NoYW5nZXMpKTtcblxuICAgIC8vIDMuIOWIm+W7uuS4gOS4quWPquWMheWQq+acquWPmOabtOWNoeeJh+eahOeos+WumuWIl+ihqO+8jOS/neaMgeWFtuWOn+acieebuOWvuemhuuW6j1xuICAgIGNvbnN0IHVuY2hhbmdlZENhcmRzID0gY3VycmVudFJhbmtpbmdzLmZpbHRlcih1aWQgPT4gIWNoYW5nZWRVaWRzLmhhcyh1aWQpKTtcblxuICAgIC8vIDQuIOWwhuWPmOabtOaMieebruagh+aOkuWQjeaOkuW6j++8jOeEtuWQjuWwhuWug+S7rOaPkuWFpeWIsOeos+WumuWIl+ihqOS4rVxuICAgIGNvbnN0IHNvcnRlZENoYW5nZXMgPSBPYmplY3QuZW50cmllcyhyYW5raW5nQ2hhbmdlcykuc29ydCgoWyxhXSwgWyxiXSkgPT4gYSAtIGIpO1xuICAgIFxuICAgIGxldCBuZXdSYW5raW5ncyA9IHVuY2hhbmdlZENhcmRzO1xuICAgIGZvciAoY29uc3QgW2NhcmRVaWQsIHRhcmdldFJhbmtdIG9mIHNvcnRlZENoYW5nZXMpIHtcbiAgICAgIC8vIOehruS/neebruagh+aOkuWQjeWcqOacieaViOiMg+WbtOWGhVxuICAgICAgY29uc3QgaW5zZXJ0SW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0YXJnZXRSYW5rIC0gMSwgbmV3UmFua2luZ3MubGVuZ3RoKSk7XG4gICAgICBuZXdSYW5raW5ncy5zcGxpY2UoaW5zZXJ0SW5kZXgsIDAsIGNhcmRVaWQpO1xuICAgIH1cbiAgICBcbiAgICAvLyDinIUg6aqM6K+B57uT5p6c55qE5a6M5pW05oCnXG4gICAgaWYgKG5ldyBTZXQobmV3UmFua2luZ3MpLnNpemUgIT09IG5ld1JhbmtpbmdzLmxlbmd0aCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIuaOkuWQjeWIl+ihqOWMheWQq+mHjeWkjeWNoeeJh++8jOS/neWtmOaTjeS9nOW3suS4reatouOAglwiKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcign5o6S5ZCN5YiX6KGo5YyF5ZCr6YeN5aSN5Y2h54mHJyk7XG4gICAgfVxuXG4gICAgLy8g4pyFIOWOn+WtkOaAp+S/neWtmFxuICAgIGF3YWl0IHNhdmVDYXJkUmFua2luZ3MoeyBkYXRhUGFnZVRpdGxlLCByYW5raW5nczogbmV3UmFua2luZ3MgfSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYPCfjq8g5Y2P5ZCM5o6S5ZCN57O757ufIC0g5om56YeP5L+d5a2Y5o6S5ZCN5Y+Y5pu05a6M5oiQOiAke25ld1JhbmtpbmdzLmxlbmd0aH0g5Liq5Y2h54mHYCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign8J+OryDljY/lkIzmjpLlkI3ns7vnu58gLSDmibnph4/kv53lrZjmjpLlkI3lj5jmm7TlpLHotKU6JywgZXJyb3IpO1xuICAgIFxuICAgIC8vIOKchSDmj5Dkvpvmm7Tor6bnu4bnmoTplJnor6/kv6Hmga9cbiAgICBpZiAoZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ0FQSScpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+e9kee7nOi/nuaOpeWksei0pe+8jOivt+ajgOafpee9kee7nOWQjumHjeivlScpO1xuICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ+adg+mZkCcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+ayoeacieS/ruaUueadg+mZkO+8jOivt+ajgOafpVJvYW0gUmVzZWFyY2jorr7nva4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGDkv53lrZjlpLHotKU6ICR7ZXJyb3IubWVzc2FnZSB8fCAn5pyq55+l6ZSZ6K+vJ31gKTtcbiAgICB9XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBnZXRTdHJpbmdCZXR3ZWVuLCBwYXJzZUNvbmZpZ1N0cmluZywgcGFyc2VSb2FtRGF0ZVN0cmluZyB9IGZyb20gJ34vdXRpbHMvc3RyaW5nJztcbmltcG9ydCAqIGFzIHN0cmluZ1V0aWxzIGZyb20gJ34vdXRpbHMvc3RyaW5nJztcbmltcG9ydCB7IENvbXBsZXRlUmVjb3JkcywgUmVjb3JkcywgUmVjb3JkVWlkLCBSZXZpZXdNb2RlcyB9IGZyb20gJ34vbW9kZWxzL3Nlc3Npb24nO1xuaW1wb3J0IHsgVG9kYXkgfSBmcm9tICd+L21vZGVscy9wcmFjdGljZSc7XG5pbXBvcnQge1xuICBhZGREdWVDYXJkcyxcbiAgYWRkTmV3Q2FyZHMsXG4gIGNhbGN1bGF0ZUNvbWJpbmVkQ291bnRzLFxuICBjYWxjdWxhdGVDb21wbGV0ZWRUb2RheUNvdW50cyxcbiAgY2FsY3VsYXRlVG9kYXlTdGF0dXMsXG4gIGluaXRpYWxpemVUb2RheSxcbiAgcmVzdG9yZUNvbXBsZXRlZFVpZHMsXG59IGZyb20gJ34vcXVlcmllcy90b2RheSc7XG5pbXBvcnQgeyBnZXRDaGlsZEJsb2Nrc09uUGFnZSwgZ2V0UGFnZVVpZHNGcm9tVGl0bGVzIH0gZnJvbSAnLi91dGlscyc7XG4vLyDwn46vIEZJWEVEOiDnm7TmjqXlr7zlhaXljY/lkIzmjpLlkI3ns7vnu5/lh73mlbDvvIzpgb/lhY3liqjmgIHlr7zlhaXpl67pophcbmltcG9ydCB7IGxvYWRDYXJkUmFua2luZ3MsIHNhdmVDYXJkUmFua2luZ3MgfSBmcm9tICd+L3F1ZXJpZXMvc2F2ZSc7XG5cbi8vIPCfjq8g5pS56L+b77ya5L2/55So5oyJZGF0YVBhZ2VUaXRsZeeahOe7hueykuW6pumUgeiAjOmdnuWFqOWxgOmUgVxuY29uc3QgcHJlZmlsbFN0YXRlcyA9IG5ldyBNYXA8c3RyaW5nLCB7XG4gIGlzSW5Qcm9ncmVzczogYm9vbGVhbjtcbiAgbGFzdFRpbWU6IG51bWJlcjtcbiAgZGVib3VuY2VNczogbnVtYmVyO1xufT4oKTtcblxuLy8g6I635Y+W5oiW5Yib5bu654m55a6a6aG16Z2i55qE54q25oCBXG5jb25zdCBnZXRQYWdlU3RhdGUgPSAoZGF0YVBhZ2VUaXRsZTogc3RyaW5nKSA9PiB7XG4gIGlmICghcHJlZmlsbFN0YXRlcy5oYXMoZGF0YVBhZ2VUaXRsZSkpIHtcbiAgICBwcmVmaWxsU3RhdGVzLnNldChkYXRhUGFnZVRpdGxlLCB7XG4gICAgICBpc0luUHJvZ3Jlc3M6IGZhbHNlLFxuICAgICAgbGFzdFRpbWU6IDAsXG4gICAgICBkZWJvdW5jZU1zOiAxMDAwLFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBwcmVmaWxsU3RhdGVzLmdldChkYXRhUGFnZVRpdGxlKSE7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UHJhY3RpY2VEYXRhID0gYXN5bmMgKHtcbiAgdGFnc0xpc3QsXG4gIGRhdGFQYWdlVGl0bGUsXG4gIGRhaWx5TGltaXQsXG4gIGlzQ3JhbW1pbmcsXG4gIHNodWZmbGVDYXJkcyxcbiAgY2FjaGVkRGF0YSxcbiAgZGVmYXVsdFByaW9yaXR5ID0gNzAsXG59KSA9PiB7XG4gIGNvbnN0IHBsdWdpblBhZ2VEYXRhID0gKGF3YWl0IGdldFBsdWdpblBhZ2VEYXRhKHtcbiAgICBkYXRhUGFnZVRpdGxlLFxuICAgIGxpbWl0VG9MYXRlc3Q6IGZhbHNlLFxuICB9KSkgYXMgQ29tcGxldGVSZWNvcmRzO1xuXG4gIGNvbnN0IHRvZGF5ID0gaW5pdGlhbGl6ZVRvZGF5KHsgdGFnc0xpc3QsIGNhY2hlZERhdGEgfSk7XG4gIGNvbnN0IHNlc3Npb25EYXRhID0ge307XG4gIGNvbnN0IGNhcmRVaWRzOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmRVaWRbXT4gPSB7fTtcblxuICBmb3IgKGNvbnN0IHRhZyBvZiB0YWdzTGlzdCkge1xuICAgIGNvbnN0IHsgc2Vzc2lvbkRhdGE6IGN1cnJlbnRTZXNzaW9uRGF0YSwgY2FyZFVpZHM6IGN1cnJlbnRDYXJkVWlkcyB9ID0gYXdhaXQgZ2V0U2Vzc2lvbkRhdGEoe1xuICAgICAgcGx1Z2luUGFnZURhdGEsXG4gICAgICB0YWcsXG4gICAgICBkYXRhUGFnZVRpdGxlLFxuICAgIH0pO1xuXG4gICAgc2Vzc2lvbkRhdGFbdGFnXSA9IGN1cnJlbnRTZXNzaW9uRGF0YTtcbiAgICBjYXJkVWlkc1t0YWddID0gY3VycmVudENhcmRVaWRzO1xuICB9XG4gIFxuICAvLyDorqHnrpfmiYDmnIl0YWdnZWTnmoTljaHniYdcbiAgY29uc3QgYWxsQ2FyZFVpZHMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgZm9yIChjb25zdCB0YWcgb2YgdGFnc0xpc3QpIHtcbiAgICBjYXJkVWlkc1t0YWddLmZvckVhY2godWlkID0+IGFsbENhcmRVaWRzLmFkZCh1aWQpKTtcbiAgfVxuICBjb25zdCBhbGxDYXJkc0NvdW50ID0gTWF0aC5tYXgoMSwgYWxsQ2FyZFVpZHMuc2l6ZSk7XG5cbiAgLy8g8J+agCBGSVhFRDog5YWI5pu05paw5o6S5bqP5YiX6KGo77yM5YaN5Yqg6L29IC0g6K6p55So5oi36K6+572u56uL5Y2z55Sf5pWIXG4gIGF3YWl0IHVwZGF0ZVByaW9yaXR5T3JkZXJXaXRoU2V0dGluZ3MoYWxsQ2FyZFVpZHMsIGRhdGFQYWdlVGl0bGUsIGRlZmF1bHRQcmlvcml0eSk7XG4gIFxuICAvLyDliqDovb3mm7TmlrDlkI7nmoTljaHniYfmjpLlkI3liJfooahcbiAgY29uc3QgcHJpb3JpdHlPcmRlciA9IGF3YWl0IGxvYWRDYXJkUmFua2luZ3MoeyBkYXRhUGFnZVRpdGxlIH0pO1xuXG4gIGF3YWl0IGNhbGN1bGF0ZUNvbXBsZXRlZFRvZGF5Q291bnRzKHtcbiAgICB0b2RheSxcbiAgICB0YWdzTGlzdCxcbiAgICBzZXNzaW9uRGF0YSxcbiAgfSk7XG5cbiAgYWRkTmV3Q2FyZHMoeyB0b2RheSwgdGFnc0xpc3QsIGNhcmRVaWRzLCBwbHVnaW5QYWdlRGF0YSwgc2h1ZmZsZUNhcmRzLCBwcmlvcml0eU9yZGVyIH0pO1xuICBhZGREdWVDYXJkcyh7XG4gICAgdG9kYXksXG4gICAgdGFnc0xpc3QsXG4gICAgc2Vzc2lvbkRhdGEsXG4gICAgaXNDcmFtbWluZyxcbiAgICBzaHVmZmxlQ2FyZHMsXG4gICAgcHJpb3JpdHlPcmRlcixcbiAgfSk7XG4gIFxuICBjYWxjdWxhdGVDb21iaW5lZENvdW50cyh7IHRvZGF5LCB0YWdzTGlzdCB9KTtcbiAgbGltaXRSZW1haW5pbmdQcmFjdGljZURhdGEoeyB0b2RheSwgZGFpbHlMaW1pdCwgdGFnc0xpc3QsIGlzQ3JhbW1pbmcgfSk7XG4gIGNhbGN1bGF0ZUNvbWJpbmVkQ291bnRzKHsgdG9kYXksIHRhZ3NMaXN0IH0pO1xuICBjYWxjdWxhdGVUb2RheVN0YXR1cyh7IHRvZGF5LCB0YWdzTGlzdCB9KTtcblxuICByZXR1cm4ge1xuICAgIHByYWN0aWNlRGF0YTogcGx1Z2luUGFnZURhdGEsXG4gICAgdG9kYXlTdGF0czogdG9kYXksXG4gICAgYWxsQ2FyZHNDb3VudCxcbiAgICBwcmlvcml0eU9yZGVyLFxuICAgIGFsbENhcmRVaWRzOiBBcnJheS5mcm9tKGFsbENhcmRVaWRzKSxcbiAgICBjYXJkVWlkcywgLy8g6L+U5Zue5oyJ5qCH562+5YiG57uE55qEIGNhcmRVaWRzXG4gIH07XG59O1xuXG4vLyDwn5qAIE5FVzog5qC55o2u5b2T5YmN6K6+572u5pu05paw5o6S5bqP5YiX6KGoXG5jb25zdCB1cGRhdGVQcmlvcml0eU9yZGVyV2l0aFNldHRpbmdzID0gYXN5bmMgKFxuICBhbGxDYXJkVWlkczogU2V0PHN0cmluZz4sIFxuICBkYXRhUGFnZVRpdGxlOiBzdHJpbmcsIFxuICBkZWZhdWx0UHJpb3JpdHk6IG51bWJlclxuKSA9PiB7XG4gIC8vIOKchSDkvb/nlKjpobXpnaLnibnlrprnmoTnirbmgIHvvIzpgb/lhY3kuI3lkIzpobXpnaLkupLnm7jpmLvloZ5cbiAgY29uc3QgcGFnZVN0YXRlID0gZ2V0UGFnZVN0YXRlKGRhdGFQYWdlVGl0bGUpO1xuICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICBcbiAgaWYgKHBhZ2VTdGF0ZS5pc0luUHJvZ3Jlc3MgfHwgKG5vdyAtIHBhZ2VTdGF0ZS5sYXN0VGltZSkgPCBwYWdlU3RhdGUuZGVib3VuY2VNcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBhZ2VTdGF0ZS5pc0luUHJvZ3Jlc3MgPSB0cnVlO1xuICBwYWdlU3RhdGUubGFzdFRpbWUgPSBub3c7XG5cbiAgdHJ5IHtcbiAgICAvLyAxLiDliqDovb3njrDmnInmjpLluo/liJfooahcbiAgICBjb25zdCBleGlzdGluZ1ByaW9yaXR5T3JkZXIgPSBhd2FpdCBsb2FkQ2FyZFJhbmtpbmdzKHsgZGF0YVBhZ2VUaXRsZSB9KTtcbiAgICBcbiAgICAvLyAyLiDmib7lh7rnvLrlpLHnmoTmlrDljaHniYdcbiAgICBjb25zdCBtaXNzaW5nQ2FyZHMgPSBBcnJheS5mcm9tKGFsbENhcmRVaWRzKS5maWx0ZXIodWlkID0+ICFleGlzdGluZ1ByaW9yaXR5T3JkZXIuaW5jbHVkZXModWlkKSk7XG4gICAgXG4gICAgaWYgKG1pc3NpbmdDYXJkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyAzLiDmlrDljaHniYflgJLluo/ov5vlhaXmjpLlkI3liJfooahcbiAgICBjb25zdCByZXZlcnNlZE1pc3NpbmdDYXJkcyA9IFsuLi5taXNzaW5nQ2FyZHNdLnJldmVyc2UoKTtcbiAgICBcbiAgICAvLyA0LiDmoLnmja7lvZPliY1kZWZhdWx0UHJpb3JpdHnorqHnrpfmj5LlhaXkvY3nva5cbiAgICBjb25zdCB0b3RhbENhcmRzQWZ0ZXIgPSBleGlzdGluZ1ByaW9yaXR5T3JkZXIubGVuZ3RoICsgcmV2ZXJzZWRNaXNzaW5nQ2FyZHMubGVuZ3RoO1xuICAgIGNvbnN0IGluc2VydFBvc2l0aW9uID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKHRvdGFsQ2FyZHNBZnRlciAqICgxIC0gZGVmYXVsdFByaW9yaXR5IC8gMTAwKSkgLSAxKTtcbiAgICBcbiAgICAvLyA1LiDnlJ/miJDmlrDnmoTmjpLluo/liJfooahcbiAgICBjb25zdCB1cGRhdGVkUHJpb3JpdHlPcmRlciA9IFsuLi5leGlzdGluZ1ByaW9yaXR5T3JkZXJdO1xuICAgIHVwZGF0ZWRQcmlvcml0eU9yZGVyLnNwbGljZShpbnNlcnRQb3NpdGlvbiwgMCwgLi4ucmV2ZXJzZWRNaXNzaW5nQ2FyZHMpO1xuICAgIFxuICAgIC8vIDYuIOS/neWtmOabtOaWsOWQjueahOaOkuW6j+WIl+ihqFxuICAgIGF3YWl0IHNhdmVDYXJkUmFua2luZ3MoeyBcbiAgICAgIGRhdGFQYWdlVGl0bGUsIFxuICAgICAgcmFua2luZ3M6IHVwZGF0ZWRQcmlvcml0eU9yZGVyIFxuICAgIH0pO1xuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ/Cfjq8gW+aOkuW6j+abtOaWsF0g5pu05paw5aSx6LSlOicsIGVycm9yKTtcbiAgICAvLyDinIUg6YeN572u54q25oCB5Lul5YWB6K646YeN6K+VXG4gICAgcGFnZVN0YXRlLmxhc3RUaW1lID0gMDtcbiAgICB0aHJvdyBlcnJvcjsgLy8g6YeN5paw5oqb5Ye66ZSZ6K+v77yM6K6p6LCD55So5pa555+l6YGT5aSx6LSl5LqGXG4gIH0gZmluYWxseSB7XG4gICAgcGFnZVN0YXRlLmlzSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RGF0YVBhZ2VRdWVyeSA9IChkYXRhUGFnZVRpdGxlKSA9PiBgW1xuICA6ZmluZCA/cGFnZVxuICA6d2hlcmVcbiAgICBbP3BhZ2UgOm5vZGUvdGl0bGUgXCIke2RhdGFQYWdlVGl0bGV9XCJdXG5dYDtcblxuZXhwb3J0IGNvbnN0IGRhdGFQYWdlUmVmZXJlbmNlc0lkc1F1ZXJ5ID0gYFtcbiAgOmZpbmQgP3JlZlVpZFxuICA6aW4gJCA/dGFnID9kYXRhUGFnZVxuICA6d2hlcmVcbiAgICBbP3RhZ1BhZ2UgOm5vZGUvdGl0bGUgP3RhZ11cbiAgICBbP3RhZ1JlZnMgOmJsb2NrL3JlZnMgP3RhZ1BhZ2VdXG4gICAgWz90YWdSZWZzIDpibG9jay91aWQgP3JlZlVpZF1cbiAgICBbP3RhZ1JlZnMgOmJsb2NrL3BhZ2UgP2hvbWVQYWdlXVxuICAgIFsoIT0gP2hvbWVQYWdlID9kYXRhUGFnZSldXG4gIF1gO1xuY29uc3QgZ2V0UGFnZVJlZmVyZW5jZUlkcyA9IGFzeW5jICh0YWcsIGRhdGFQYWdlVGl0bGUpOiBQcm9taXNlPHN0cmluZ1tdPiA9PiB7XG4gIC8vIEZpcnN0IHF1ZXJ5IHRoZSBkYXRhIHBhZ2Ugc28gdGhhdCB3ZSBjYW4gZXhjbHVkZSB0aG9zZSByZWZlcmVuY2VzIGZyb20gdGhlIHJlc3VsdHNcbiAgY29uc3QgZGF0YVBhZ2VSZXN1bHQgPSB3aW5kb3cucm9hbUFscGhhQVBJLnEoZ2V0RGF0YVBhZ2VRdWVyeShkYXRhUGFnZVRpdGxlKSk7XG5cbiAgY29uc3QgZGF0YVBhZ2VVaWQgPSBkYXRhUGFnZVJlc3VsdC5sZW5ndGggPyBkYXRhUGFnZVJlc3VsdFswXVswXSA6ICcnO1xuXG4gIGNvbnN0IHJlc3VsdHMgPSB3aW5kb3cucm9hbUFscGhhQVBJLnEoZGF0YVBhZ2VSZWZlcmVuY2VzSWRzUXVlcnksIHRhZywgZGF0YVBhZ2VVaWQpO1xuXG4gIHJldHVybiByZXN1bHRzLm1hcCgoYXJyKSA9PiBhcnJbMF0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkVGFnUGFnZUJsb2Nrc0lkcyA9IGFzeW5jIChzZWxlY3RlZFRhZyk6IFByb21pc2U8c3RyaW5nW10+ID0+IHtcbiAgY29uc3QgcXVlcnlSZXN1bHRzID0gYXdhaXQgZ2V0Q2hpbGRCbG9ja3NPblBhZ2Uoc2VsZWN0ZWRUYWcpO1xuXG4gIGlmICghcXVlcnlSZXN1bHRzLmxlbmd0aCkgcmV0dXJuIFtdO1xuXG4gIGNvbnN0IGNoaWxkcmVuID0gcXVlcnlSZXN1bHRzWzBdWzBdLmNoaWxkcmVuO1xuICBjb25zdCBmaWx0ZXJlZENoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKChjaGlsZCkgPT4gISFjaGlsZC5zdHJpbmcpO1xuXG4gIHJldHVybiBmaWx0ZXJlZENoaWxkcmVuLm1hcCgoYXJyKSA9PiBhcnIudWlkKTtcbn07XG5cbi8vIEVuc3VyZSB0aGF0IHRoZSByZXZpZXdNb2RlIGZpZWxkIGlzIGFsd2F5cyBwcmVzZW50XG5jb25zdCBlbnN1cmVSZXZpZXdNb2RlRmllbGQgPSAocmVjb3JkKSA9PiB7XG4gIGNvbnN0IGhhc1Jldmlld01vZGVGaWVsZCA9IHJlY29yZC5jaGlsZHJlbi5zb21lKChjaGlsZCkgPT4gY2hpbGQuc3RyaW5nLmluY2x1ZGVzKCdyZXZpZXdNb2RlJykpO1xuICBjb25zdCBjaGlsZHJlbiA9IGhhc1Jldmlld01vZGVGaWVsZFxuICAgID8gcmVjb3JkLmNoaWxkcmVuXG4gICAgOiBbXG4gICAgICAgIC4uLnJlY29yZC5jaGlsZHJlbixcbiAgICAgICAge1xuICAgICAgICAgIG9yZGVyOiByZWNvcmQuY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICAgIHN0cmluZzogYHJldmlld01vZGU6OiAke1Jldmlld01vZGVzLkRlZmF1bHRTcGFjZWRJbnRlcnZhbH1gLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICByZXR1cm4ge1xuICAgIC4uLnJlY29yZCxcbiAgICBjaGlsZHJlbixcbiAgfTtcbn07XG5cbmNvbnN0IHBhcnNlRmllbGRWYWx1ZXMgPSAob2JqZWN0LCBub2RlKSA9PiB7XG4gIGZvciAoY29uc3QgZmllbGQgb2YgZW5zdXJlUmV2aWV3TW9kZUZpZWxkKG5vZGUpLmNoaWxkcmVuKSB7XG4gICAgY29uc3QgW2tleSwgdmFsdWVdID0gcGFyc2VDb25maWdTdHJpbmcoZmllbGQuc3RyaW5nKTtcblxuICAgIGlmIChrZXkgPT09ICduZXh0RHVlRGF0ZScpIHtcbiAgICAgIG9iamVjdFtrZXldID0gcGFyc2VSb2FtRGF0ZVN0cmluZyhnZXRTdHJpbmdCZXR3ZWVuKHZhbHVlLCAnW1snLCAnXV0nKSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ3RydWUnIHx8IHZhbHVlID09PSAnZmFsc2UnKSB7XG4gICAgICBvYmplY3Rba2V5XSA9IHZhbHVlID09PSAndHJ1ZSc7XG4gICAgfSBlbHNlIGlmIChzdHJpbmdVdGlscy5pc051bWVyaWModmFsdWUpKSB7XG4gICAgICBvYmplY3Rba2V5XSA9IE51bWJlcih2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBtYXBQbHVnaW5QYWdlRGF0YUxhdGVzdCA9IChxdWVyeVJlc3VsdHNEYXRhKTogUmVjb3JkcyA9PlxuICBxdWVyeVJlc3VsdHNEYXRhXG4gICAgLm1hcCgoYXJyKSA9PiBhcnJbMF0pWzBdXG4gICAgLmNoaWxkcmVuPy5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICBjb25zdCB1aWQgPSBnZXRTdHJpbmdCZXR3ZWVuKGN1ci5zdHJpbmcsICcoKCcsICcpKScpO1xuICAgICAgYWNjW3VpZF0gPSB7fTtcblxuICAgICAgaWYgKCFjdXIuY2hpbGRyZW4pIHJldHVybiBhY2M7XG5cbiAgICAgIGNvbnN0IGxhdGVzdENoaWxkID0gY3VyLmNoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiBjaGlsZC5vcmRlciA9PT0gMCk7XG4gICAgICBhY2NbdWlkXS5kYXRlQ3JlYXRlZCA9IHBhcnNlUm9hbURhdGVTdHJpbmcoZ2V0U3RyaW5nQmV0d2VlbihsYXRlc3RDaGlsZC5zdHJpbmcsICdbWycsICddXScpKTtcblxuICAgICAgaWYgKCFsYXRlc3RDaGlsZC5jaGlsZHJlbikgcmV0dXJuIGFjYztcbiAgICAgIHBhcnNlRmllbGRWYWx1ZXMoYWNjW3VpZF0sIGxhdGVzdENoaWxkKTtcblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSkgfHwge307XG5cbmNvbnN0IG1hcFBsdWdpblBhZ2VEYXRhID0gKHF1ZXJ5UmVzdWx0c0RhdGEpOiBDb21wbGV0ZVJlY29yZHMgPT5cbiAgcXVlcnlSZXN1bHRzRGF0YVxuICAgIC5tYXAoKGFycikgPT4gYXJyWzBdKVswXVxuICAgIC5jaGlsZHJlbj8ucmVkdWNlKChhY2MsIGN1cikgPT4ge1xuICAgICAgY29uc3QgdWlkID0gZ2V0U3RyaW5nQmV0d2VlbihjdXIuc3RyaW5nLCAnKCgnLCAnKSknKTtcbiAgICAgIGFjY1t1aWRdID0gW107XG5cbiAgICAgIC8vIEFkZCBkYXRlXG4gICAgICBpZiAoIWN1ci5jaGlsZHJlbikgcmV0dXJuIGFjYztcblxuICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBjdXIuY2hpbGRyZW4pIHtcbiAgICAgICAgY29uc3QgcmVjb3JkID0ge1xuICAgICAgICAgIHJlZlVpZDogdWlkLFxuICAgICAgICAgIGRhdGVDcmVhdGVkOiBwYXJzZVJvYW1EYXRlU3RyaW5nKGdldFN0cmluZ0JldHdlZW4oY2hpbGQuc3RyaW5nLCAnW1snLCAnXV0nKSksXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFjaGlsZC5jaGlsZHJlbikgcmV0dXJuIGFjYztcblxuICAgICAgICBwYXJzZUZpZWxkVmFsdWVzKHJlY29yZCwgY2hpbGQpO1xuXG4gICAgICAgIGFjY1t1aWRdLnB1c2gocmVjb3JkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSkgfHwge307XG5cbmV4cG9ydCBjb25zdCBnZXRQbHVnaW5QYWdlQmxvY2tEYXRhUXVlcnkgPSBgW1xuICA6ZmluZCAocHVsbCA/cGx1Z2luUGFnZUNoaWxkcmVuIFtcbiAgICA6YmxvY2svc3RyaW5nXG4gICAgOmJsb2NrL2NoaWxkcmVuXG4gICAgOmJsb2NrL29yZGVyXG4gICAgezpibG9jay9jaGlsZHJlbiAuLi59XSlcbiAgICA6aW4gJCA/cGFnZVRpdGxlID9kYXRhQmxvY2tOYW1lXG4gICAgOndoZXJlXG4gICAgWz9wYWdlIDpub2RlL3RpdGxlID9wYWdlVGl0bGVdXG4gICAgWz9wYWdlIDpibG9jay9jaGlsZHJlbiA/cGx1Z2luUGFnZUNoaWxkcmVuXVxuICAgIFs/cGx1Z2luUGFnZUNoaWxkcmVuIDpibG9jay9zdHJpbmcgP2RhdGFCbG9ja05hbWVdXG4gIF1gO1xuXG5jb25zdCBnZXRQbHVnaW5QYWdlQmxvY2tEYXRhID0gYXN5bmMgKHsgZGF0YVBhZ2VUaXRsZSwgYmxvY2tOYW1lIH0pID0+IHtcbiAgcmV0dXJuIGF3YWl0IHdpbmRvdy5yb2FtQWxwaGFBUEkucShnZXRQbHVnaW5QYWdlQmxvY2tEYXRhUXVlcnksIGRhdGFQYWdlVGl0bGUsIGJsb2NrTmFtZSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UGx1Z2luUGFnZURhdGEgPSBhc3luYyAoeyBkYXRhUGFnZVRpdGxlLCBsaW1pdFRvTGF0ZXN0ID0gdHJ1ZSB9KSA9PiB7XG4gIGNvbnN0IHF1ZXJ5UmVzdWx0c0RhdGEgPSBhd2FpdCBnZXRQbHVnaW5QYWdlQmxvY2tEYXRhKHsgZGF0YVBhZ2VUaXRsZSwgYmxvY2tOYW1lOiAnZGF0YScgfSk7XG5cbiAgaWYgKCFxdWVyeVJlc3VsdHNEYXRhLmxlbmd0aCkgcmV0dXJuIHt9O1xuXG4gIHJldHVybiBsaW1pdFRvTGF0ZXN0XG4gICAgPyBtYXBQbHVnaW5QYWdlRGF0YUxhdGVzdChxdWVyeVJlc3VsdHNEYXRhKVxuICAgIDogbWFwUGx1Z2luUGFnZURhdGEocXVlcnlSZXN1bHRzRGF0YSk7XG59O1xuXG5jb25zdCBtYXBQbHVnaW5QYWdlQ2FjaGVkRGF0YSA9IChxdWVyeVJlc3VsdHNEYXRhKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSBxdWVyeVJlc3VsdHNEYXRhLm1hcCgoYXJyKSA9PiBhcnJbMF0pWzBdLmNoaWxkcmVuO1xuICBpZiAoIWRhdGEgfHwgIWRhdGEubGVuZ3RoKSByZXR1cm4ge307XG5cbiAgaWYgKCFkYXRhPy5sZW5ndGgpIHJldHVybiB7fTtcblxuICByZXR1cm4gKFxuICAgIGRhdGEucmVkdWNlKChhY2MsIGN1cikgPT4ge1xuICAgICAgY29uc3QgdGFnID0gZ2V0U3RyaW5nQmV0d2VlbihjdXIuc3RyaW5nLCAnW1snLCAnXV0nKTtcbiAgICAgIGFjY1t0YWddID1cbiAgICAgICAgY3VyLmNoaWxkcmVuPy5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICAgICAgaWYgKCFjdXIuc3RyaW5nKSByZXR1cm4gYWNjO1xuICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGN1ci5zdHJpbmcuc3BsaXQoJzo6JykubWFwKChzOiBzdHJpbmcpID0+IHMudHJpbSgpKTtcblxuICAgICAgICAgIGNvbnN0IGRhdGUgPSBwYXJzZVJvYW1EYXRlU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICBhY2Nba2V5XSA9IGRhdGUgPyBkYXRlIDogdmFsdWU7XG5cbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSkgfHwge307XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KSB8fCB7fVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFBsdWdpblBhZ2VDYWNoZWREYXRhID0gYXN5bmMgKHsgZGF0YVBhZ2VUaXRsZSB9KSA9PiB7XG4gIGNvbnN0IHF1ZXJ5UmVzdWx0c0RhdGEgPSBhd2FpdCBnZXRQbHVnaW5QYWdlQmxvY2tEYXRhKHsgZGF0YVBhZ2VUaXRsZSwgYmxvY2tOYW1lOiAnY2FjaGUnIH0pO1xuXG4gIGlmICghcXVlcnlSZXN1bHRzRGF0YS5sZW5ndGgpIHJldHVybiB7fTtcblxuICByZXR1cm4gbWFwUGx1Z2luUGFnZUNhY2hlZERhdGEocXVlcnlSZXN1bHRzRGF0YSk7XG59O1xuXG4vKipcbiAqIEdldHMgYWxsIHRoZSBjYXJkIHJlZmVyZW5jaW5nIGEgdGFnLCB0aGVuIGZpbmRzIGFsbCB0aGUgcHJhY3RpY2Ugc2Vzc2lvbiBkYXRhIGZvciB0aG9zZSBjYXJkc1xuICovXG5leHBvcnQgY29uc3QgZ2V0U2Vzc2lvbkRhdGEgPSBhc3luYyAoe1xuICBwbHVnaW5QYWdlRGF0YSxcbiAgdGFnLFxuICBkYXRhUGFnZVRpdGxlLFxufToge1xuICBwbHVnaW5QYWdlRGF0YTogQ29tcGxldGVSZWNvcmRzO1xuICB0YWc6IHN0cmluZztcbiAgZGF0YVBhZ2VUaXRsZTogc3RyaW5nO1xufSkgPT4ge1xuICAvLyBHZXQgYWxsIHRoZSBjYXJkcyBmb3IgdGhlIHRhZ1xuICBjb25zdCB0YWdSZWZlcmVuY2VzSWRzID0gYXdhaXQgZ2V0UGFnZVJlZmVyZW5jZUlkcyh0YWcsIGRhdGFQYWdlVGl0bGUpO1xuICBjb25zdCB0YWdQYWdlQmxvY2tzSWRzID0gYXdhaXQgZ2V0U2VsZWN0ZWRUYWdQYWdlQmxvY2tzSWRzKHRhZyk7XG4gIGNvbnN0IGFsbFRhZ0NhcmRzVWlkcyA9IHRhZ1JlZmVyZW5jZXNJZHMuY29uY2F0KHRhZ1BhZ2VCbG9ja3NJZHMpO1xuXG4gIC8vIEZpbHRlciBvdXQgZHVlIGNhcmRzIHRoYXQgYXJlbid0IHJlZmVyZW5jZXMgdG8gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0YWdcbiAgLy8gQFRPRE86IHdlIGNvdWxkIHByb2JhYmx5IGRvIHRoaXMgYXQgZ2V0UGx1Z2luUGFnZURhdGEgcXVlcnkgZm9yIGFcbiAgLy8gcGVyZm9ybWFuY2UgYm9vc3RcbiAgY29uc3Qgc2VsZWN0ZWRUYWdDYXJkc0RhdGEgPSBPYmplY3Qua2V5cyhwbHVnaW5QYWdlRGF0YSkucmVkdWNlKChhY2MsIGN1cikgPT4ge1xuICAgIGlmIChhbGxUYWdDYXJkc1VpZHMuaW5kZXhPZihjdXIpID4gLTEpIHtcbiAgICAgIGFjY1tjdXJdID0gcGx1Z2luUGFnZURhdGFbY3VyXTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4gIHJldHVybiB7XG4gICAgc2Vzc2lvbkRhdGE6IHNlbGVjdGVkVGFnQ2FyZHNEYXRhLFxuICAgIGNhcmRVaWRzOiBhbGxUYWdDYXJkc1VpZHMsXG4gIH07XG59O1xuXG4vKipcbiAqICBMaW1pdCBvZiBjYXJkcyB0byBwcmFjdGljZSBlbnN1cmluZyB0aGF0IGR1ZSBjYXJkcyBhcmUgYWx3YXlzXG4gKiAgZmlyc3QgYnV0IH4yNSUgbmV3IGNhcmRzIGFyZSBzdGlsbCBwcmFjdGljZWQgd2hlbiBsaW1pdCBpcyBsZXNzIHRoYW4gdG90YWwgZHVlXG4gKiAgY2FyZHMuXG4gKi9cbmNvbnN0IGxpbWl0UmVtYWluaW5nUHJhY3RpY2VEYXRhID0gKHtcbiAgdG9kYXksXG4gIGRhaWx5TGltaXQsXG4gIHRhZ3NMaXN0LFxuICBpc0NyYW1taW5nLFxufToge1xuICB0b2RheTogVG9kYXk7XG4gIGRhaWx5TGltaXQ6IG51bWJlcjtcbiAgdGFnc0xpc3Q6IHN0cmluZ1tdO1xuICBpc0NyYW1taW5nOiBib29sZWFuO1xufSkgPT4ge1xuICBjb25zdCB0b3RhbENhcmRzID0gdG9kYXkuY29tYmluZWRUb2RheS5kdWUgKyB0b2RheS5jb21iaW5lZFRvZGF5Lm5ldztcblxuICAvLyBXaGVuIG5vIG5lZWQgdG8gbGltaXQsIHJldHVybjtcbiAgaWYgKCFkYWlseUxpbWl0IHx8ICF0b3RhbENhcmRzIHx8IGlzQ3JhbW1pbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXN0b3JlQ29tcGxldGVkVWlkcyh7IHRvZGF5LCB0YWdzTGlzdCB9KTtcblxuICAvLyBJbml0aWFsaXplIHNlbGVjdGVkIGNhcmRzXG4gIGNvbnN0IHNlbGVjdGVkQ2FyZHMgPSB0YWdzTGlzdC5yZWR1Y2UoXG4gICAgKGFjYywgY3VycmVudFRhZykgPT4gKHtcbiAgICAgIC4uLmFjYyxcbiAgICAgIFtjdXJyZW50VGFnXToge1xuICAgICAgICBuZXdVaWRzOiBbXSxcbiAgICAgICAgZHVlVWlkczogW10sXG4gICAgICB9LFxuICAgIH0pLFxuICAgIHt9XG4gICk7XG5cbiAgLy8gQE1BWUJFOiBDb25zaWRlciBtYWtpbmcgdGhpcyBhIGNvbmZpZyBvcHRpb25cbiAgY29uc3QgdGFyZ2V0TmV3Q2FyZHNSYXRpbyA9IDAuMjU7XG4gIGNvbnN0IHRhcmdldFRvdGFsQ2FyZHMgPSBkYWlseUxpbWl0O1xuICAvLyBXZSB1c2UgTWF0aC5tYXggaGVyZSB0byBlbnN1cmUgd2UgaGF2ZSBhdCBsZWF0cyBvbmUgY2FyZCBldmVuIHdoZW4gdGFyZ2V0VG90YWwgaXMgPCA0LlxuICAvLyBUaGUgZXhjZXB0aW9uIGlzIHdoZW4gdGFyZ2V0VG90YWwgaXMgMSwgaW4gd2hpY2ggY2FzZSB3ZSB3YW50IHRvIHByaW9yaXRpemUgZHVlIGNhcmRzXG4gIGNvbnN0IHRhcmdldE5ld0NhcmRzID1cbiAgICB0YXJnZXRUb3RhbENhcmRzID09PSAxID8gMCA6IE1hdGgubWF4KDEsIE1hdGguZmxvb3IodGFyZ2V0VG90YWxDYXJkcyAqIHRhcmdldE5ld0NhcmRzUmF0aW8pKTtcbiAgY29uc3QgdGFyZ2V0RHVlQ2FyZHMgPSB0YXJnZXRUb3RhbENhcmRzIC0gdGFyZ2V0TmV3Q2FyZHM7XG5cbiAgbGV0IHRvdGFsTmV3QWRkZWQgPSAwO1xuICBsZXQgdG90YWxEdWVBZGRlZCA9IDA7XG4gIGxldCB0b3RhbEFkZGVkID0gdG90YWxOZXdBZGRlZCArIHRvdGFsRHVlQWRkZWQ7XG5cbiAgLy8gQWRkIG9uZSBjYXJkIGF0IGEgdGltZSAoUm91bmQgUm9iaW4gc3R5bGUpIHRvIGV2ZW5seSBzZWxlY3QgY2FyZHMgZnJvbSBlYWNoXG4gIC8vIGRlY2suXG4gIHJvdW5kUm9iaW5Mb29wOiB3aGlsZSAodG90YWxBZGRlZCA8IHRvdGFsQ2FyZHMpIHtcbiAgICBmb3IgKGNvbnN0IGN1cnJlbnRUYWcgb2YgdGFnc0xpc3QpIHtcbiAgICAgIC8vIGlmIChyb3VuZHMgPiA1KSBicmVhayByb3VuZFJvYmluTG9vcDtcbiAgICAgIHRvdGFsQWRkZWQgPSB0b3RhbE5ld0FkZGVkICsgdG90YWxEdWVBZGRlZDtcblxuICAgICAgaWYgKHRvdGFsQWRkZWQgPT09IHRhcmdldFRvdGFsQ2FyZHMpIHtcbiAgICAgICAgYnJlYWsgcm91bmRSb2Jpbkxvb3A7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGN1cnJlbnRDYXJkcyA9IHNlbGVjdGVkQ2FyZHNbY3VycmVudFRhZ107XG4gICAgICBjb25zdCBuZXh0TmV3SW5kZXggPSBjdXJyZW50Q2FyZHMubmV3VWlkcy5sZW5ndGg7XG4gICAgICBjb25zdCBuZXh0TmV3Q2FyZCA9IHRvZGF5LnRhZ3NbY3VycmVudFRhZ10ubmV3VWlkc1tuZXh0TmV3SW5kZXhdO1xuICAgICAgY29uc3QgbmV4dER1ZUluZGV4ID0gY3VycmVudENhcmRzLmR1ZVVpZHMubGVuZ3RoO1xuICAgICAgY29uc3QgbmV4dER1ZUNhcmQgPSB0b2RheS50YWdzW2N1cnJlbnRUYWddLmR1ZVVpZHNbbmV4dER1ZUluZGV4XTtcblxuICAgICAgY29uc3Qgc3RpbGxOZWVkTmV3Q2FyZHMgPSB0b3RhbE5ld0FkZGVkIDwgdGFyZ2V0TmV3Q2FyZHM7XG4gICAgICBjb25zdCBzdGlsbE5lZWREdWVDYXJkcyA9IHRvdGFsRHVlQWRkZWQgPCB0YXJnZXREdWVDYXJkcztcbiAgICAgIGNvbnN0IHN0aWxsSGF2ZUR1ZUNhcmRzID0gISFuZXh0RHVlQ2FyZCB8fCB0b3RhbER1ZUFkZGVkIDwgdG9kYXkuY29tYmluZWRUb2RheS5kdWU7XG4gICAgICBjb25zdCBzdGlsbEhhdmVOZXdDYXJkcyA9ICEhbmV4dE5ld0NhcmQgfHwgdG90YWxOZXdBZGRlZCA8IHRvZGF5LmNvbWJpbmVkVG9kYXkubmV3O1xuXG4gICAgICAvLyBBZGQgbmV3IGNhcmRcbiAgICAgIGlmIChuZXh0TmV3Q2FyZCAmJiAoc3RpbGxOZWVkTmV3Q2FyZHMgfHwgIXN0aWxsSGF2ZUR1ZUNhcmRzKSkge1xuICAgICAgICBzZWxlY3RlZENhcmRzW2N1cnJlbnRUYWddLm5ld1VpZHMucHVzaCh0b2RheS50YWdzW2N1cnJlbnRUYWddLm5ld1VpZHNbbmV4dE5ld0luZGV4XSk7XG4gICAgICAgIHRvdGFsTmV3QWRkZWQrKztcblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIGR1ZSBjYXJkXG4gICAgICBpZiAobmV4dER1ZUNhcmQgJiYgKHN0aWxsTmVlZER1ZUNhcmRzIHx8ICFzdGlsbEhhdmVOZXdDYXJkcykpIHtcbiAgICAgICAgc2VsZWN0ZWRDYXJkc1tjdXJyZW50VGFnXS5kdWVVaWRzLnB1c2godG9kYXkudGFnc1tjdXJyZW50VGFnXS5kdWVVaWRzW25leHREdWVJbmRleF0pO1xuICAgICAgICB0b3RhbER1ZUFkZGVkKys7XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTm93IHRoYXQgd2UndmUgZ2VuZXJhdGVkIHRoZSBvcmlnaW5hbCBkaXN0cmlidXRpb24gd2UgY2FuIHN1YnRyYWN0XG4gIC8vIGNvbXBsZXRlZCBjYXJkcyBmcm9tIHNlbGVjdGVkIGNhcmRzIHdpdGhvdXQgYWZmZWN0aW5nIHRoZSBvcmlnaW5hbFxuICAvLyBkaXN0cmlidXRpb25cbiAgZm9yIChjb25zdCB0YWcgb2YgdGFnc0xpc3QpIHtcbiAgICBjb25zdCB0YWdTdGF0cyA9IHRvZGF5LnRhZ3NbdGFnXTtcbiAgICBjb25zdCBjb21wbGV0ZWREdWVVaWRzID0gdGFnU3RhdHMuY29tcGxldGVkRHVlVWlkcztcbiAgICBjb25zdCBjb21wbGV0ZWROZXdVaWRzID0gdGFnU3RhdHMuY29tcGxldGVkTmV3VWlkcztcbiAgICBjb25zdCByZW1haW5pbmdUYXJnZXREdWUgPSBNYXRoLm1heChcbiAgICAgIHNlbGVjdGVkQ2FyZHNbdGFnXS5kdWVVaWRzLmxlbmd0aCAtIGNvbXBsZXRlZER1ZVVpZHMubGVuZ3RoLFxuICAgICAgMFxuICAgICk7XG4gICAgY29uc3QgcmVtYWluaW5nVGFyZ2V0TmV3ID0gTWF0aC5tYXgoXG4gICAgICBzZWxlY3RlZENhcmRzW3RhZ10ubmV3VWlkcy5sZW5ndGggLSBjb21wbGV0ZWROZXdVaWRzLmxlbmd0aCxcbiAgICAgIDBcbiAgICApO1xuXG4gICAgc2VsZWN0ZWRDYXJkc1t0YWddLmR1ZVVpZHMgPSBzZWxlY3RlZENhcmRzW3RhZ10uZHVlVWlkcy5zbGljZSgwLCByZW1haW5pbmdUYXJnZXREdWUpO1xuICAgIHNlbGVjdGVkQ2FyZHNbdGFnXS5uZXdVaWRzID0gc2VsZWN0ZWRDYXJkc1t0YWddLm5ld1VpZHMuc2xpY2UoMCwgcmVtYWluaW5nVGFyZ2V0TmV3KTtcbiAgfVxuXG4gIC8vIFJlcGxhY2UgdG9kYXkgdmFsdWVzIHdpdGggc2VsZWN0ZWQgY2FyZHNcbiAgZm9yIChjb25zdCB0YWcgb2YgdGFnc0xpc3QpIHtcbiAgICB0b2RheS50YWdzW3RhZ10gPSB7XG4gICAgICAuLi50b2RheS50YWdzW3RhZ10sXG4gICAgICBkdWVVaWRzOiBzZWxlY3RlZENhcmRzW3RhZ10uZHVlVWlkcyxcbiAgICAgIG5ld1VpZHM6IHNlbGVjdGVkQ2FyZHNbdGFnXS5uZXdVaWRzLFxuICAgICAgZHVlOiBzZWxlY3RlZENhcmRzW3RhZ10uZHVlVWlkcy5sZW5ndGgsXG4gICAgICBuZXc6IHNlbGVjdGVkQ2FyZHNbdGFnXS5uZXdVaWRzLmxlbmd0aCxcbiAgICB9O1xuICB9XG59O1xuIiwiaW1wb3J0IHsgQ29tcGxldGVSZWNvcmRzIH0gZnJvbSAnfi9tb2RlbHMvc2Vzc2lvbic7XG5pbXBvcnQgeyBnZW5lcmF0ZU5ld1Nlc3Npb24gfSBmcm9tICd+L3F1ZXJpZXMvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0U3RyaW5nQmV0d2VlbiwgcGFyc2VSb2FtRGF0ZVN0cmluZyB9IGZyb20gJ34vdXRpbHMvc3RyaW5nJztcblxuY29uc3Qgb2xkUm9hbVNyR3JhZGVNYXAgPSB7XG4gIFsnci8xJ106IHtcbiAgICBvbGREaXNwbGF5QnV0dG9uVGV4dDogJ0FnYWluJyxcbiAgICBtZW1vRGlzcGxheUJ1dHRvblRleHQ6ICdGb3Jnb3QnLFxuICAgIG1lbW9HcmFkZTogMCxcbiAgfSxcbiAgWydyLzInXToge1xuICAgIG9sZERpc3BsYXlCdXR0b25UZXh0OiAnSGFyZCcsXG4gICAgbWVtb0Rpc3BsYXlCdXR0b25UZXh0OiAnSGFyZCcsXG4gICAgbWVtb0dyYWRlOiAzLFxuICB9LFxuICBbJ3IvMyddOiB7XG4gICAgb2xkRGlzcGxheUJ1dHRvblRleHQ6ICdHb29kJyxcbiAgICBtZW1vRGlzcGxheUJ1dHRvblRleHQ6ICdHb29kJyxcbiAgICBtZW1vR3JhZGU6IDQsXG4gIH0sXG4gIFsnci80J106IHtcbiAgICBvbGREaXNwbGF5QnV0dG9uVGV4dDogJ0Vhc3knLFxuICAgIG1lbW9EaXNwbGF5QnV0dG9uVGV4dDogJ1BlcmZlY3QnLFxuICAgIG1lbW9HcmFkZTogNSxcbiAgfSxcbn07XG5cbmNvbnN0IG1hcE9sZFJvYW1TclByYWN0aWNlRGF0YSA9IChkYXRhLCBwYWdlVGl0bGUpID0+IHtcbiAgcmV0dXJuIGRhdGEucmVkdWNlKChhY2MsIFtyZXN1bHRdKSA9PiB7XG4gICAgY29uc3QgZGF0ZVN0cmluZyA9IHJlc3VsdC50aXRsZTtcblxuICAgIHJlc3VsdC5jaGlsZHJlblxuICAgICAgLy8gRmlsdGVyIG91dCB1bnJlbGF0ZWQgcm93cyAoY291bGQgcHJvYmFibHkgZG8gdGhpcyBpbiBxdWVyeSBidXQgeWEg8J+kt/Cfj73igI3imYLvuI8pXG4gICAgICAuZmlsdGVyKChyb3cpID0+IHJvdy5zdHJpbmcgPT09IGBbWyR7cGFnZVRpdGxlfV1dYClcbiAgICAgIC8vIEZpbHRlciBvdXQgcm93cyB3aXRoIG5vIHJlY29yZHNcbiAgICAgIC5maWx0ZXIoKHJvdykgPT4gISFyb3cuY2hpbGRyZW4pXG4gICAgICAuZm9yRWFjaCgoeyBjaGlsZHJlbjogcmVjb3JkTGlzdCB9KSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgeyBzdHJpbmc6IHJlY29yZCB9IG9mIHJlY29yZExpc3QpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZXMgPSByZWNvcmQuc3BsaXQoJyAnKTtcbiAgICAgICAgICAvLyBTa2lwIGFsbCBpbnZhbGlkIHJlY29yZHM6IFt1aWQsIGdyYWRlU3RyaW5nXVxuICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoICE9PSAyKSBjb250aW51ZTtcblxuICAgICAgICAgIGNvbnN0IFtyZWZVaWRTdHJpbmcsIGdyYWRlU3RyaW5nXSA9IHZhbHVlcztcblxuICAgICAgICAgIC8vIFNraXAgZW1wdHkgc3RyaW5nIHZhbHVlcyDwn6S38J+PvVxuICAgICAgICAgIGlmICghcmVmVWlkU3RyaW5nIHx8ICFncmFkZVN0cmluZykgY29udGludWU7XG5cbiAgICAgICAgICBjb25zdCByZWZVaWQgPSBnZXRTdHJpbmdCZXR3ZWVuKHJlZlVpZFN0cmluZywgJygoJywgJykpJyk7XG4gICAgICAgICAgaWYgKCFhY2NbcmVmVWlkXSkgYWNjW3JlZlVpZF0gPSBbXTtcbiAgICAgICAgICBhY2NbcmVmVWlkXS5wdXNoKHtcbiAgICAgICAgICAgIHJlZlVpZCxcbiAgICAgICAgICAgIGdyYWRlOiBvbGRSb2FtU3JHcmFkZU1hcFtnZXRTdHJpbmdCZXR3ZWVuKGdyYWRlU3RyaW5nLCAnW1snLCAnXV0nKV0ubWVtb0dyYWRlLFxuICAgICAgICAgICAgZGF0ZUNyZWF0ZWQ6IHBhcnNlUm9hbURhdGVTdHJpbmcoZGF0ZVN0cmluZyksXG4gICAgICAgICAgICBpc1JvYW1Tck9sZFByYWN0aWNlUmVjb3JkOiB0cnVlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn07XG5cbmNvbnN0IHNvcnRPbGRSb2FtU3JQcmFjdGljZURhdGEgPSAobWFwcGVkRGF0YSkgPT4ge1xuICBmb3IgKGNvbnN0IGtleSBpbiBtYXBwZWREYXRhKSB7XG4gICAgbWFwcGVkRGF0YVtrZXldID0gbWFwcGVkRGF0YVtrZXldLnNvcnQoKGEsIGIpID0+IGEuZGF0ZUNyZWF0ZWQgLSBiLmRhdGVDcmVhdGVkKTtcbiAgfVxuICByZXR1cm4gbWFwcGVkRGF0YTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRPbGRSb2FtU3JQcmFjdGljZURhdGEgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHJldmlld1RhZ1BhZ2VOYW1lID0gJ3JvYW0vc3IvcmV2aWV3JztcbiAgY29uc3QgcmV2aWV3UGFnZVJlZmVyZW5jZURhdGEgPSBhd2FpdCB3aW5kb3cucm9hbUFscGhhQVBJLnEoXG4gICAgYFxuICAgIFs6ZmluZCAocHVsbCA/cGFyZW50UGFnZUlkIFtcbiAgICAgIDpub2RlL3RpdGxlXG4gICAgICA6YmxvY2svc3RyaW5nXG4gICAgICA6YmxvY2svY2hpbGRyZW5cbiAgICAgIHs6YmxvY2svY2hpbGRyZW4gLi4ufV0pXG4gICAgIDppbiAkID9yZXZpZXdUYWdQYWdlTmFtZVxuICAgICA6d2hlcmVcbiAgICAgWz9wYWdlSWQgOm5vZGUvdGl0bGUgP3Jldmlld1RhZ1BhZ2VOYW1lXVxuICAgICBbP3JlZklkcyA6YmxvY2svcmVmcyA/cGFnZUlkXVxuICAgICBbP3BhcmVudFBhZ2VJZCA6YmxvY2svY2hpbGRyZW4sID9yZWZJZHNdXG4gICAgXWAsXG4gICAgcmV2aWV3VGFnUGFnZU5hbWVcbiAgKTtcblxuICByZXR1cm4gc29ydE9sZFJvYW1TclByYWN0aWNlRGF0YShcbiAgICBtYXBPbGRSb2FtU3JQcmFjdGljZURhdGEocmV2aWV3UGFnZVJlZmVyZW5jZURhdGEsIHJldmlld1RhZ1BhZ2VOYW1lKVxuICApO1xufTtcblxuY29uc3QgZ2V0TWVyZ2VkT2xkQW5kRXhpc3RpbmdSZWNvcmRzID0gKG9sZFJldmlld1JlY29yZHMsIGV4aXN0aW5nUHJhY3RpY2VEYXRhKSA9PiB7XG4gIGNvbnN0IG1lcmdlZFByYWN0aWNlRGF0YSA9IHsgLi4ub2xkUmV2aWV3UmVjb3JkcyB9O1xuICAvLyBJdGVyYXRlIGV4aXN0aW5nIHByYWN0aWNlIGRhdGFcbiAgZm9yIChjb25zdCByZWZVaWQgaW4gZXhpc3RpbmdQcmFjdGljZURhdGEpIHtcbiAgICBpZiAocmVmVWlkIGluIG9sZFJldmlld1JlY29yZHMpIHtcbiAgICAgIC8vIFRoaXMgbWVhbnMgd2UgaGF2ZSBvbGQgZGF0YSBmb3IgYSBjYXJkIHdlJ3ZlIGFscmVhZHkgc3RhcnRlZCB0cmFpbmluZ1xuXG4gICAgICAvLyBJZiBvbGQgcmVjb3JkIGJlbG9uZ3MgdG8gYSBjYXJkIHdlJ3ZlIGFscmVhZHkgaW1wb3J0ZWQsIGl0IG1lYW5zIHdlJ3ZlXG4gICAgICAvLyBhbHJlYWR5IG1lcmdlZCBiZWZvcmUgYW5kIHdlIGNhbiBrZWVwIHRoZSBleGlzdGluZyBkYXRhIChpbnN0ZWFkIG9mXG4gICAgICAvLyBkdXBsaWNhdGluZyBpdClcbiAgICAgIGlmIChleGlzdGluZ1ByYWN0aWNlRGF0YVtyZWZVaWRdLnNvbWUoKHIpID0+IHIuaXNSb2FtU3JPbGRQcmFjdGljZVJlY29yZCkpIHtcbiAgICAgICAgbWVyZ2VkUHJhY3RpY2VEYXRhW3JlZlVpZF0gPSBbLi4uZXhpc3RpbmdQcmFjdGljZURhdGFbcmVmVWlkXV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXJnZWRQcmFjdGljZURhdGFbcmVmVWlkXSA9IFtcbiAgICAgICAgICAuLi5tZXJnZWRQcmFjdGljZURhdGFbcmVmVWlkXSxcbiAgICAgICAgICAuLi5leGlzdGluZ1ByYWN0aWNlRGF0YVtyZWZVaWRdLFxuICAgICAgICBdO1xuICAgICAgfVxuXG4gICAgICBtZXJnZWRQcmFjdGljZURhdGFbcmVmVWlkXS5zb3J0KChhLCBiKSA9PiBhLmRhdGVDcmVhdGVkIC0gYi5kYXRlQ3JlYXRlZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlZFByYWN0aWNlRGF0YTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVJlY29yZHNGcm9tUm9hbVNyRGF0YSA9IGFzeW5jIChcbiAgb2xkUmV2aWV3UmVjb3JkcyxcbiAgZXhpc3RpbmdQcmFjdGljZURhdGEsXG4gIGRhdGFQYWdlVGl0bGVcbikgPT4ge1xuICBjb25zdCBtZXJnZWRSZWNvcmRzID0gZ2V0TWVyZ2VkT2xkQW5kRXhpc3RpbmdSZWNvcmRzKG9sZFJldmlld1JlY29yZHMsIGV4aXN0aW5nUHJhY3RpY2VEYXRhKTtcbiAgY29uc3QgcmVzdWx0czogQ29tcGxldGVSZWNvcmRzID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgZm9yIChjb25zdCBbXywgcmVzdWx0c0Fycl0gb2YgT2JqZWN0LmVudHJpZXMobWVyZ2VkUmVjb3JkcykpIHtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZXN1bHRzQXJyKSB7XG4gICAgICBjb25zdCB7IHJlZlVpZCwgZGF0ZUNyZWF0ZWQsIGdyYWRlLCBpc1JvYW1Tck9sZFByYWN0aWNlUmVjb3JkIH0gPSByZXN1bHQ7XG5cbiAgICAgIGxldCBwcmFjdGljZUlucHV0RGF0YSA9IHtcbiAgICAgICAgcmVmVWlkLFxuICAgICAgICBncmFkZSxcbiAgICAgICAgZGF0YVBhZ2VUaXRsZSxcbiAgICAgICAgZGF0ZUNyZWF0ZWQsXG4gICAgICAgIGVGYWN0b3I6IHVuZGVmaW5lZCxcbiAgICAgICAgcmVwZXRpdGlvbnM6IHVuZGVmaW5lZCxcbiAgICAgICAgaW50ZXJ2YWw6IHVuZGVmaW5lZCxcbiAgICAgIH07XG5cbiAgICAgIGlmIChyZXN1bHRzW3JlZlVpZF0pIHtcbiAgICAgICAgY29uc3QgbGFzdFByYWN0aWNlUmVzdWx0ID0gcmVzdWx0c1tyZWZVaWRdW3Jlc3VsdHNbcmVmVWlkXS5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgeyBlRmFjdG9yLCByZXBldGl0aW9ucywgaW50ZXJ2YWwgfSA9IGxhc3RQcmFjdGljZVJlc3VsdDtcbiAgICAgICAgcHJhY3RpY2VJbnB1dERhdGEgPSB7IC4uLnByYWN0aWNlSW5wdXREYXRhLCBlRmFjdG9yLCByZXBldGl0aW9ucywgaW50ZXJ2YWwgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5ld0NhcmREYXRhID0gZ2VuZXJhdGVOZXdTZXNzaW9uKHsgZGF0ZUNyZWF0ZWQgfSk7XG4gICAgICAgIHByYWN0aWNlSW5wdXREYXRhID0geyAuLi5wcmFjdGljZUlucHV0RGF0YSwgLi4ubmV3Q2FyZERhdGEgfTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJhY3RpY2VSZXN1bHQgPSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgLi4uKGF3YWl0IHByYWN0aWNlKHByYWN0aWNlSW5wdXREYXRhLCB0cnVlKSksXG4gICAgICAgIGdyYWRlLFxuICAgICAgICBkYXRlQ3JlYXRlZCxcbiAgICAgICAgaXNSb2FtU3JPbGRQcmFjdGljZVJlY29yZDogISFpc1JvYW1Tck9sZFByYWN0aWNlUmVjb3JkLFxuICAgICAgfTtcblxuICAgICAgaWYgKHJlc3VsdHNbcmVmVWlkXSkge1xuICAgICAgICByZXN1bHRzW3JlZlVpZF0ucHVzaChwcmFjdGljZVJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRzW3JlZlVpZF0gPSBbcHJhY3RpY2VSZXN1bHRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJsb2NrSW5mbywgZmV0Y2hCbG9ja0luZm8gfSBmcm9tICd+L3F1ZXJpZXMnO1xuXG4vLyDliJvlu7rkuIDkuKrlhajlsYDnvJPlrZjmnaXlrZjlgqjlnZfkv6Hmga/vvIzpgb/lhY3ph43lpI3mn6Xor6JcbmNvbnN0IGJsb2NrSW5mb0NhY2hlID0gbmV3IE1hcDxzdHJpbmcsIEJsb2NrSW5mbz4oKTtcblxuLy8g8J+OryBORVc6IOa4hemZpOeJueWummJsb2Nr55qE57yT5a2YXG5leHBvcnQgY29uc3QgY2xlYXJCbG9ja0luZm9DYWNoZSA9IChyZWZVaWQ6IHN0cmluZykgPT4ge1xuICBibG9ja0luZm9DYWNoZS5kZWxldGUocmVmVWlkKTtcbn07XG5cbi8vIPCfjq8gTkVXOiDmuIXpmaTmiYDmnInnvJPlrZhcbmV4cG9ydCBjb25zdCBjbGVhckFsbEJsb2NrSW5mb0NhY2hlID0gKCkgPT4ge1xuICBibG9ja0luZm9DYWNoZS5jbGVhcigpO1xufTtcblxuY29uc3QgdXNlQmxvY2tJbmZvID0gKHsgcmVmVWlkIH0pID0+IHtcbiAgY29uc3QgW2Jsb2NrSW5mbywgc2V0QmxvY2tJbmZvXSA9IFJlYWN0LnVzZVN0YXRlPEJsb2NrSW5mbz4oe30gYXMgQmxvY2tJbmZvKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2ZvcmNlUmVmcmVzaCwgc2V0Rm9yY2VSZWZyZXNoXSA9IFJlYWN0LnVzZVN0YXRlKDApO1xuXG4gIC8vIPCfjq8gTkVXOiDlvLrliLbliLfmlrDlh73mlbBcbiAgY29uc3QgcmVmcmVzaEJsb2NrSW5mbyA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAocmVmVWlkKSB7XG4gICAgICBjbGVhckJsb2NrSW5mb0NhY2hlKHJlZlVpZCk7XG4gICAgICBzZXRGb3JjZVJlZnJlc2gocHJldiA9PiBwcmV2ICsgMSk7XG4gICAgfVxuICB9LCBbcmVmVWlkXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXJlZlVpZCkgcmV0dXJuO1xuXG4gICAgY29uc3QgZmV0Y2ggPSBhc3luYyAoKSA9PiB7XG4gICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICB0cnkge1xuICAgICAgICAvLyDwn46vIEZJWEVEOiDmr4/mrKHpg73ph43mlrDojrflj5bmnIDmlrDnmoRibG9ja+S/oeaBr++8jOS4jeS+nei1lue8k+WtmFxuICAgICAgICAvLyDov5nmoLflj6/ku6Xnoa7kv53lvZPlrZDlnZfooqvliKDpmaTlkI7vvIzog73lpJ/ojrflj5bliLDmnIDmlrDnirbmgIFcbiAgICAgICAgY29uc29sZS5sb2coJ/CflI0gW0Jsb2NrSW5mb10g6I635Y+W5pyA5pawYmxvY2vkv6Hmga8gZm9yOicsIHJlZlVpZCk7XG4gICAgICAgIGNvbnN0IGZyZXNoQmxvY2tJbmZvID0gYXdhaXQgZmV0Y2hCbG9ja0luZm8ocmVmVWlkKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFtCbG9ja0luZm9dIOiOt+WPlue7k+aenDonLCB7XG4gICAgICAgICAgcmVmVWlkLFxuICAgICAgICAgIGhhc0NoaWxkcmVuOiAhIWZyZXNoQmxvY2tJbmZvLmNoaWxkcmVuPy5sZW5ndGgsXG4gICAgICAgICAgaGFzQ2hpbGRyZW5VaWRzOiAhIWZyZXNoQmxvY2tJbmZvLmNoaWxkcmVuVWlkcz8ubGVuZ3RoLFxuICAgICAgICAgIGNoaWxkcmVuQ291bnQ6IGZyZXNoQmxvY2tJbmZvLmNoaWxkcmVuPy5sZW5ndGggfHwgMFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIOabtOaWsOe8k+WtmFxuICAgICAgICBibG9ja0luZm9DYWNoZS5zZXQocmVmVWlkLCBmcmVzaEJsb2NrSW5mbyk7XG4gICAgICAgIFxuICAgICAgICBzZXRCbG9ja0luZm8oeyAuLi5mcmVzaEJsb2NrSW5mbywgcmVmVWlkIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcign8J+UjSBbQmxvY2tJbmZvXSDojrflj5ZibG9ja+S/oeaBr+Wksei0pTonLCBlcnJvcik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmZXRjaCgpO1xuICB9LCBbcmVmVWlkLCBmb3JjZVJlZnJlc2hdKTsgLy8g8J+OryBORVc6IOa3u+WKoGZvcmNlUmVmcmVzaOS+nei1llxuXG4gIHJldHVybiB7XG4gICAgYmxvY2tJbmZvLFxuICAgIGlzTG9hZGluZyxcbiAgICByZWZyZXNoQmxvY2tJbmZvLCAvLyDwn46vIE5FVzog6L+U5Zue5Yi35paw5Ye95pWwXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VCbG9ja0luZm87XG4iLCJleHBvcnQgY29uc3Qgc2xlZXAgPSAobXMpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG59O1xuXG5leHBvcnQgY29uc3QgZGVib3VuY2UgPSAoZnVuYywgdGltZW91dCA9IDMwMCkgPT4ge1xuICBsZXQgdGltZXI7XG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSwgdGltZW91dCk7XG4gIH07XG59O1xuXG4vLyDmmbrog73pmLLmipbvvJrlr7nkuo7nm7jlkIznmoTplK7lgLzvvIzkvJrlj5bmtojkuYvliY3nmoTosIPnlKhcbmV4cG9ydCBjb25zdCBzbWFydERlYm91bmNlID0gKGZ1bmMsIHRpbWVvdXQgPSAzMDApID0+IHtcbiAgY29uc3QgdGltZXJzID0gbmV3IE1hcCgpO1xuICBcbiAgcmV0dXJuIChrZXksIC4uLmFyZ3MpID0+IHtcbiAgICBpZiAodGltZXJzLmhhcyhrZXkpKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJzLmdldChrZXkpKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRpbWVycy5kZWxldGUoa2V5KTtcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSwgdGltZW91dCk7XG4gICAgXG4gICAgdGltZXJzLnNldChrZXksIHRpbWVyKTtcbiAgfTtcbn07XG5cbi8vIOWPr+WPlua2iOeahFByb21pc2VcbmV4cG9ydCBjb25zdCBjYW5jZWxsYWJsZVByb21pc2UgPSAocHJvbWlzZSkgPT4ge1xuICBsZXQgaXNDYW5jZWxsZWQgPSBmYWxzZTtcbiAgXG4gIGNvbnN0IHdyYXBwZWRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHByb21pc2UudGhlbihcbiAgICAgIChyZXN1bHQpID0+IGlzQ2FuY2VsbGVkID8gcmVqZWN0KG5ldyBFcnJvcignQ2FuY2VsbGVkJykpIDogcmVzb2x2ZShyZXN1bHQpLFxuICAgICAgKGVycm9yKSA9PiBpc0NhbmNlbGxlZCA/IHJlamVjdChuZXcgRXJyb3IoJ0NhbmNlbGxlZCcpKSA6IHJlamVjdChlcnJvcilcbiAgICApO1xuICB9KTtcbiAgXG4gIHJldHVybiB7XG4gICAgcHJvbWlzZTogd3JhcHBlZFByb21pc2UsXG4gICAgY2FuY2VsOiAoKSA9PiB7IGlzQ2FuY2VsbGVkID0gdHJ1ZTsgfVxuICB9O1xufTtcblxuLy8g5om56YeP54q25oCB5pu05pawIC0g5L2/55So5Y6f55Sf55qE5om55aSE55CG5py65Yi2XG5leHBvcnQgY29uc3QgYmF0Y2hVcGRhdGUgPSAodXBkYXRlRnVuY3Rpb25zKSA9PiB7XG4gIC8vIOWcqFJlYWN0IDE45Lit77yM54q25oCB5pu05paw6buY6K6k5piv5om55aSE55CG55qEXG4gIC8vIOWvueS6juaXp+eJiOacrO+8jOaIkeS7rOWPr+S7peS9v+eUqCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlc1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlJlYWN0ICYmIHdpbmRvdy5SZWFjdC51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcykge1xuICAgIHdpbmRvdy5SZWFjdC51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcygoKSA9PiB7XG4gICAgICB1cGRhdGVGdW5jdGlvbnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICAvLyDnjrDku6NSZWFjdOS8muiHquWKqOaJueWkhOeQhui/meS6m+abtOaWsFxuICAgIHVwZGF0ZUZ1bmN0aW9ucy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICB9XG59O1xuIiwiaW1wb3J0IHsgVG9vbHRpcCBhcyBCbHVlUHJpbnRUb29sdGlwIH0gZnJvbSAnQGJsdWVwcmludGpzL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICB3cmFwcGVyQ2xhc3NOYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbjogSlNYLkVsZW1lbnQ7XG4gIGNvbnRlbnQ6IHN0cmluZyB8IEpTWC5FbGVtZW50O1xuICBwbGFjZW1lbnQ6IHN0cmluZztcbn1cblxuY29uc3QgV3JhcHBlciA9ICh7IGNsYXNzTmFtZSwgd3JhcHBlckNsYXNzTmFtZSwgLi4ucmVzdFByb3BzIH06IFByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIDxCbHVlUHJpbnRUb29sdGlwIGNsYXNzTmFtZT17d3JhcHBlckNsYXNzTmFtZX0gcG9wb3ZlckNsYXNzTmFtZT17Y2xhc3NOYW1lfSB7Li4ucmVzdFByb3BzfSAvPlxuICApO1xufTtcblxuY29uc3QgVG9vbHRpcCA9IHN0eWxlZChXcmFwcGVyKWBcbiAgJi5icDMtdG9vbHRpcCAuYnAzLXBvcG92ZXItY29udGVudCB7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIHBhZGRpbmc6IDJweCA1cHg7XG4gIH1cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXA7XG4iLCJjb25zdCBtZWRpYVF1ZXJpZXMgPSB7XG4gIHhzOiBgQG1lZGlhIChtYXgtd2lkdGg6IDQyMHB4KWAsICAgICAvLyDmiYvmnLrnq5blsY9cbiAgc206IGBAbWVkaWEgKG1pbi13aWR0aDogNDIwcHgpYCxcbiAgbWQ6IGBAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpYCxcbiAgbGc6IGBAbWVkaWEgKG1pbi13aWR0aDogMTAyNHB4KWAsXG4gIHhsOiBgQG1lZGlhIChtaW4td2lkdGg6IDEyODBweClgLFxuICAnMnhsJzogYEBtZWRpYSAobWluLXdpZHRoOiAxNTM2cHgpYCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lZGlhUXVlcmllcztcbiIsImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiDnlKjkuo7nrqHnkIZSb2FtIFVJ5YWD57Sg5bGC57qn55qEUmVhY3QgSG9va1xuICog5ZyobWVtb+eql+WPo+aJk+W8gOaXtuazqOWFpUNTU+S/ruWkje+8jOWFs+mXreaXtuenu+mZpFxuICovXG5leHBvcnQgY29uc3QgdXNlWkluZGV4Rml4ID0gKGlzT3BlbjogYm9vbGVhbikgPT4ge1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IFNUWUxFX0lEID0gJ3JvYW0tbWVtby16aW5kZXgtZml4JztcbiAgICBcbiAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAvLyDmo4Dmn6XmmK/lkKblt7Lnu4/lrZjlnKjmoLflvI9cbiAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChTVFlMRV9JRCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyDliJvlu7rmoLflvI/lhYPntKBcbiAgICAgIGNvbnN0IHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICBzdHlsZUVsZW1lbnQuaWQgPSBTVFlMRV9JRDtcbiAgICAgIHN0eWxlRWxlbWVudC50eXBlID0gJ3RleHQvY3NzJztcblxuICAgICAgLy8g5a6a5LmJQ1NT6KeE5YiZXG4gICAgICBjb25zdCBjc3NSdWxlcyA9IGBcbiAgICAgICAgLypcbiAgICAgICAgICogUm9hbSBSZXNlYXJjaCDlm77niYfmgqzmta7nqpflj6PnmoTlsYLnuqfmj5DljYdcbiAgICAgICAgICog6Kej5Yaz6KKrIE1lbW8g5o+S5Lu26YGu5oyh55qE6Zeu6aKYXG4gICAgICAgICAqL1xuICAgICAgICBcbiAgICAgICAgLyog5o+Q5Y2HIFJvYW0g5Zu+54mH5rWu5bGC55qEIFotaW5kZXggKi9cbiAgICAgICAgI3JtLW1vZGFsLXBvcnRhbCB7XG4gICAgICAgICAgei1pbmRleDogMTAwMiAhaW1wb3J0YW50OyAvKiBSb2FtIOWbvueJh+a1ruWxguaVtOS9k+eahCB6LWluZGV477yM5pyA6auYICovXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICNybS1tb2RhbC1wb3J0YWwgPiBkaXYgPiBkaXYgPiBkaXYuYnAzLWRpYWxvZy1jb250YWluZXIuYnAzLW92ZXJsYXktY29udGVudCA+IGRpdiB7XG4gICAgICAgICAgei1pbmRleDogMTAwMSAhaW1wb3J0YW50OyAvKiDnoa7kv53lm77niYflrp7pmYXlhoXlrrnkuZ/pq5ggKi9cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLyog5o+Q5Y2HIFJvYW0g5Y+M6ZO+5by55Ye66I+c5Y2V55qEIFotaW5kZXggKi9cbiAgICAgICAgLnJtLWF1dG9jb21wbGV0ZV9fcmVzdWx0cyB7XG4gICAgICAgICAgei1pbmRleDogMTAwMCAhaW1wb3J0YW50OyAvKiDkvb/nlKjkuIDkuKrpnZ7luLjpq5jnmoTlgLzvvIznoa7kv53mmL7npLrlnKjmiYDmnInlhbbku5blhYPntKDkuYvkuIogKi9cbiAgICAgICAgICB3aWR0aDogYXV0byAhaW1wb3J0YW50OyAvKiDosIPmlbTkuLroh6rpgILlupTlrr3luqYgKi9cbiAgICAgICAgICBtYXgtd2lkdGg6IHVuc2V0ICFpbXBvcnRhbnQ7IC8qIOWPlua2iOacgOWkp+WuveW6pumZkOWItiAqL1xuICAgICAgICAgIG1pbi13aWR0aDogMTUwcHggIWltcG9ydGFudDsgLyog6K6+572u5pyA5bCP5a695bqm77yM6Ziy5q2i6L+H56qEICovXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8qIOaPkOWNh+WFtuS7luWPr+iDveiiq+mBruaMoeeahCBSb2FtIFVJIOWFg+e0oCAqL1xuICAgICAgICAuYnAzLXBvcG92ZXIge1xuICAgICAgICAgIHotaW5kZXg6IDk5OSAhaW1wb3J0YW50O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAuYnAzLXRvb2x0aXAge1xuICAgICAgICAgIHotaW5kZXg6IDk5OCAhaW1wb3J0YW50O1xuICAgICAgICB9XG4gICAgICBgO1xuXG4gICAgICBzdHlsZUVsZW1lbnQudGV4dENvbnRlbnQgPSBjc3NSdWxlcztcbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ/CflKcgUm9hbSBNZW1vOiBaLWluZGV4IGZpeCDlt7Lmv4DmtLsnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8g56e76Zmk5qC35byPXG4gICAgICBjb25zdCBleGlzdGluZ1N0eWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoU1RZTEVfSUQpO1xuICAgICAgaWYgKGV4aXN0aW5nU3R5bGUpIHtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZChleGlzdGluZ1N0eWxlKTtcbiAgICAgICAgY29uc29sZS5sb2coJ/CflKcgUm9hbSBNZW1vOiBaLWluZGV4IGZpeCDlt7Lnp7vpmaQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDmuIXnkIblh73mlbDvvJrnoa7kv53nu4Tku7bljbjovb3ml7bnp7vpmaTkv67lpI1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgZXhpc3RpbmdTdHlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFNUWUxFX0lEKTtcbiAgICAgIGlmIChleGlzdGluZ1N0eWxlKSB7XG4gICAgICAgIGRvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQoZXhpc3RpbmdTdHlsZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2lzT3Blbl0pO1xufTsgIiwiZXhwb3J0IGNvbnN0IHNpbXVsYXRlTW91c2VFdmVudHMgPSAoZWxlbWVudCwgZXZlbnRzID0gW10pID0+IHtcbiAgZXZlbnRzLmZvckVhY2goKG1vdXNlRXZlbnRUeXBlKSA9PlxuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBNb3VzZUV2ZW50KG1vdXNlRXZlbnRUeXBlLCB7XG4gICAgICAgIHZpZXc6IHdpbmRvdyxcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgYnV0dG9uczogMSxcbiAgICAgIH0pXG4gICAgKVxuICApO1xufTtcbmV4cG9ydCBjb25zdCBzaW11bGF0ZU1vdXNlQ2xpY2sgPSAoZWxlbWVudCkgPT4ge1xuICBjb25zdCBtb3VzZUNsaWNrRXZlbnRzID0gWydtb3VzZWVudGVyJywgJ21vdXNlb3ZlcicsICdtb3VzZWRvd24nLCAnY2xpY2snLCAnbW91c2V1cCddO1xuICBzaW11bGF0ZU1vdXNlRXZlbnRzKGVsZW1lbnQsIG1vdXNlQ2xpY2tFdmVudHMpO1xufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFVzZUN1c3RvbUNsb3plUHJvcHMge1xuICByZW5kZXJlZEJsb2NrRWxtOiBIVE1MRWxlbWVudDtcbiAgc2V0Q2xvemVDb3VudHM6IGFueTtcbn1cblxuZnVuY3Rpb24gZ2V0QWxsVGV4dE5vZGVzKGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5jaGlsZE5vZGVzKS5maWx0ZXIoXG4gICAgKG5vZGUpID0+IG5vZGUubm9kZVR5cGUgPT09IDMgJiYgbm9kZS50ZXh0Q29udGVudC50cmltKCkubGVuZ3RoID4gMVxuICApO1xufVxuXG4vLyBUYWtlcyBhIGRvbSBub2RlIGFuZCByZWdleCBhbmQgd3JhcHMgbWF0Y2hpbmcgcGFydCBvZiB0ZXh0IGluIGEgc3BhblxuZnVuY3Rpb24gd3JhcE1hdGNoZXMobm9kZTogRWxlbWVudCwgcmVnZXg6IFJlZ0V4cCkge1xuICBsZXQgdGV4dE5vZGVzID0gZ2V0QWxsVGV4dE5vZGVzKG5vZGUpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dE5vZGVzLmxlbmd0aDsgKSB7XG4gICAgY29uc3QgdGV4dE5vZGUgPSB0ZXh0Tm9kZXNbaV07XG4gICAgY29uc3QgdGV4dCA9IHRleHROb2RlLnRleHRDb250ZW50O1xuXG4gICAgY29uc3QgbWF0Y2ggPSByZWdleC5leGVjKHRleHQpO1xuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBjb25zdCBtYXRjaGVkVGV4dCA9IG1hdGNoWzBdO1xuXG4gICAgICBjb25zdCBtYXRjaGVkVGV4dFN0YXJ0ID0gbWF0Y2guaW5kZXg7XG4gICAgICBjb25zdCBtYXRjaGVkVGV4dEVuZCA9IG1hdGNoZWRUZXh0U3RhcnQgKyBtYXRjaGVkVGV4dC5sZW5ndGg7XG4gICAgICBjb25zdCBiZWZvcmVUZXh0ID0gdGV4dC5zbGljZSgwLCBtYXRjaGVkVGV4dFN0YXJ0KTtcbiAgICAgIGNvbnN0IGFmdGVyVGV4dCA9IHRleHQuc2xpY2UobWF0Y2hlZFRleHRFbmQpO1xuXG4gICAgICAvLyBDcmVhdGUgc3BhbiBhbmQgYWRkIHRleHRcbiAgICAgIGNvbnN0IGNsb3plRWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgY2xvemVFbG0uY2xhc3NMaXN0LmFkZCgncm9hbS1tZW1vLWNsb3plJyk7XG4gICAgICBjbG96ZUVsbS50ZXh0Q29udGVudCA9IG1hdGNoZWRUZXh0O1xuXG4gICAgICAvLyBBZGQgYmVmb3JlIGFuZCBhZnRlciB0ZXh0XG4gICAgICBjb25zdCBiZWZvcmVFbG0gPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShiZWZvcmVUZXh0KTtcbiAgICAgIGNvbnN0IGFmdGVyRWxtID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYWZ0ZXJUZXh0KTtcblxuICAgICAgLy8gUmVwbGFjZSB0ZXh0IG5vZGUgd2l0aCBuZXcgZWxlbWVudHNcbiAgICAgIHRleHROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGJlZm9yZUVsbSwgdGV4dE5vZGUpO1xuICAgICAgdGV4dE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2xvemVFbG0sIHRleHROb2RlKTtcbiAgICAgIHRleHROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGFmdGVyRWxtLCB0ZXh0Tm9kZSk7XG4gICAgICB0ZXh0Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRleHROb2RlKTtcbiAgICAgIHRleHROb2RlcyA9IGdldEFsbFRleHROb2Rlcyhub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaSsrO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCB1c2VDdXN0b21DbG96ZSA9ICh7IHJlbmRlcmVkQmxvY2tFbG0sIHNldENsb3plQ291bnRzIH06IFVzZUN1c3RvbUNsb3plUHJvcHMpID0+IHtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKCFyZW5kZXJlZEJsb2NrRWxtKSByZXR1cm47XG5cbiAgICAgIGNvbnN0IG1haW5CbG9ja0VsbSA9IHJlbmRlcmVkQmxvY2tFbG0ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgJy5ybS1ibG9jay1tYWluIC5kb250LXVuZm9jdXMtYmxvY2sgc3BhbidcbiAgICAgICk7XG4gICAgICBpZiAoIW1haW5CbG9ja0VsbSkgcmV0dXJuO1xuXG4gICAgICAvLyBAVE9ETzogUGVyaGFwcyBtYWtlIHRoaXMgY3VzdG9taXphYmxlXG4gICAgICBjb25zdCBsZWZ0ID0gJ3snO1xuICAgICAgY29uc3QgcmlnaHQgPSAnfSc7XG4gICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYCR7bGVmdH0oLis/KSR7cmlnaHR9YCwgJ2dzJyk7XG4gICAgICBjb25zdCBjbG96ZVJlZ2V4ID0gbmV3IFJlZ0V4cChyZSwgJ2dzJyk7XG4gICAgICB3cmFwTWF0Y2hlcyhtYWluQmxvY2tFbG0sIGNsb3plUmVnZXgpO1xuXG4gICAgICBjb25zdCBjbG96ZUVsbXMgPSByZW5kZXJlZEJsb2NrRWxtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5yb2FtLW1lbW8tY2xvemUnKTtcblxuICAgICAgc2V0Q2xvemVDb3VudHMoKGNsb3plQ291bnRzKSA9PiAoeyAuLi5jbG96ZUNvdW50cywgY3VzdG9tOiBjbG96ZUVsbXMubGVuZ3RoIH0pKTtcbiAgICB9KSgpO1xuICB9LCBbcmVuZGVyZWRCbG9ja0VsbV0pO1xufTtcblxuaW50ZXJmYWNlIFVzZUNsb3plUHJvcHMge1xuICByZW5kZXJlZEJsb2NrRWxtOiBIVE1MRWxlbWVudDtcbiAgaGFzQ2xvemVDYWxsYmFjazogKGhhc0Nsb3plOiBib29sZWFuKSA9PiB2b2lkO1xufVxuXG5jb25zdCB1c2VDbG96ZSA9ICh7IHJlbmRlcmVkQmxvY2tFbG0sIGhhc0Nsb3plQ2FsbGJhY2sgfTogVXNlQ2xvemVQcm9wcykgPT4ge1xuICBjb25zdCBbY2xvemVDb3VudHMsIHNldENsb3plQ291bnRzXSA9IFJlYWN0LnVzZVN0YXRlKHsgZGVmYXVsdDogdW5kZWZpbmVkLCBjdXN0b206IHVuZGVmaW5lZCB9KTtcblxuICAvLyBDb3VudCBkZWZhdWx0IGNsb3plc1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIChhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoIXJlbmRlcmVkQmxvY2tFbG0pIHJldHVybjtcbiAgICAgIGNvbnN0IGNsb3plRWxtcyA9IHJlbmRlcmVkQmxvY2tFbG0ucXVlcnlTZWxlY3RvckFsbCgnLnJtLWhpZ2hsaWdodCcpO1xuXG4gICAgICBzZXRDbG96ZUNvdW50cygoKSA9PiAoeyAuLi5jbG96ZUNvdW50cywgZGVmYXVsdDogY2xvemVFbG1zLmxlbmd0aCB9KSk7XG4gICAgfSkoKTtcbiAgfSwgW3JlbmRlcmVkQmxvY2tFbG1dKTtcblxuICAvLyBTZXQgYW5kIGNvdW50IGN1c3RvbSBjbG96ZXNcbiAgdXNlQ3VzdG9tQ2xvemUoeyByZW5kZXJlZEJsb2NrRWxtLCBzZXRDbG96ZUNvdW50cyB9KTtcblxuICAvLyBVc2UgQ2xvemUgY291bnRzIHRvIGVuYWJsZS9kaXNhYmxlIFwiU2hvdyBBbnN3ZXJcIiBVSSBibG9ja2luZ1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFdhaXQgZm9yIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIGNsb3plIGNvdW50cyB0byBiZSBzZXRcbiAgICBpZiAoT2JqZWN0LnZhbHVlcyhjbG96ZUNvdW50cykuZXZlcnkoKGNvdW50KSA9PiBjb3VudCA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHN1bSA9IE9iamVjdC52YWx1ZXMoY2xvemVDb3VudHMpLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuXG4gICAgaGFzQ2xvemVDYWxsYmFjayhzdW0gPiAwKTtcbiAgfSwgW2Nsb3plQ291bnRzXSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VDbG96ZTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJyZWFkY3J1bWJzIGFzIEJyZWFkY3J1bWJzVHlwZSB9IGZyb20gJ34vcXVlcmllcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgKiBhcyBkb21VdGlscyBmcm9tICd+L3V0aWxzL2RvbSc7XG5pbXBvcnQgKiBhcyBhc3luY1V0aWxzIGZyb20gJ34vdXRpbHMvYXN5bmMnO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJ0BibHVlcHJpbnRqcy9jb3JlJztcbmltcG9ydCB1c2VDbG96ZSBmcm9tICd+L2hvb2tzL3VzZUNsb3plJztcblxuY29uc3QgQ2FyZEJsb2NrID0gKHtcbiAgcmVmVWlkLFxuICBzaG93QW5zd2VycyxcbiAgc2V0SGFzQ2xvemUsXG4gIGJyZWFkY3J1bWJzLFxuICBzaG93QnJlYWRjcnVtYnMsXG59OiB7XG4gIHJlZlVpZDogc3RyaW5nO1xuICBzaG93QW5zd2VyczogYm9vbGVhbjtcbiAgc2V0SGFzQ2xvemU6IChoYXNDbG96ZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgYnJlYWRjcnVtYnM6IEJyZWFkY3J1bWJzVHlwZVtdO1xuICBzaG93QnJlYWRjcnVtYnM6IGJvb2xlYW47XG59KSA9PiB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZjxIVE1MRGl2RWxlbWVudCB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbcmVuZGVyZWRCbG9ja0VsbSwgc2V0UmVuZGVyZWRCbG9ja0VsbV0gPSBSZWFjdC51c2VTdGF0ZTxIVE1MRWxlbWVudCB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICB1c2VDbG96ZSh7IHJlbmRlcmVkQmxvY2tFbG06IHJlbmRlcmVkQmxvY2tFbG0gYXMgSFRNTEVsZW1lbnQsIGhhc0Nsb3plQ2FsbGJhY2s6IHNldEhhc0Nsb3plIH0pO1xuXG4gIGNvbnN0IFtmb3JjZVVwZGF0ZSwgc2V0Rm9yY2VVcGRhdGVdID0gUmVhY3QudXNlU3RhdGUoMCk7XG5cbiAgLy8gU3RvcmUgdGhlIGN1cnJlbnQgcmVmVWlkIGluIGEgcmVmIHRvIGFjY2VzcyBpdCBpbnNpZGUgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICBjb25zdCByZWZVaWRSZWYgPSBSZWFjdC51c2VSZWYocmVmVWlkKTtcblxuICAvLyBDcmVhdGUgYSByZWYgZm9yIHRoZSBtdXRhdGlvbiBvYnNlcnZlclxuICBjb25zdCBvYnNlcnZlclJlZiA9IFJlYWN0LnVzZVJlZjxNdXRhdGlvbk9ic2VydmVyIHwgbnVsbD4obnVsbCk7XG5cbiAgLy8gVXBkYXRlIHRoZSByZWYgd2hlbiByZWZVaWQgY2hhbmdlc1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlZlVpZFJlZi5jdXJyZW50ID0gcmVmVWlkO1xuICB9LCBbcmVmVWlkXSk7XG5cbiAgLy8gQ3JlYXRlIGEgcmVmIHRvIHN0b3JlIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgY29uc3QgZGVib3VuY2VkRm5SZWYgPSBSZWFjdC51c2VSZWY8KCgpID0+IHZvaWQpIHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3QgaGFuZGxlQmxvY2tCbHVyID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldEZvcmNlVXBkYXRlKChwcmV2KSA9PiB7XG4gICAgICByZXR1cm4gcHJldiArIDE7XG4gICAgfSk7XG4gIH0sIFtdKTtcblxuICAvLyBTZXQgdXAgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBvbmx5IG9uY2Ugd2hlbiB0aGUgY29tcG9uZW50IG1vdW50c1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIERlZmluZSB0aGUgZnVuY3Rpb24gdG8gYmUgZGVib3VuY2VkXG4gICAgY29uc3QgcmVuZGVyQmxvY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50UmVmVWlkID0gcmVmVWlkUmVmLmN1cnJlbnQ7XG4gICAgICBpZiAoIXJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgd2luZG93LnJvYW1BbHBoYUFQSS51aS5jb21wb25lbnRzLnVubW91bnROb2RlKHsgZWw6IHJlZi5jdXJyZW50IH0pO1xuICAgICAgICBhd2FpdCB3aW5kb3cucm9hbUFscGhhQVBJLnVpLmNvbXBvbmVudHMucmVuZGVyQmxvY2soeyB1aWQ6IGN1cnJlbnRSZWZVaWQsIGVsOiByZWYuY3VycmVudCB9KTtcblxuICAgICAgICAvLyBFbnN1cmUgYmxvY2sgaXMgbm90IGNvbGxhcHNlZCAoc28gd2UgY2FuIHJldmVhbCBjaGlsZHJlbiBwcm9ncmFtYXRpY2FsbHkpXG4gICAgICAgIGNvbnN0IHJvYW1CbG9ja0VsbSA9IHJlZi5jdXJyZW50LnF1ZXJ5U2VsZWN0b3IoJy5ybS1ibG9jaycpIGFzIEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICAgICAgc2V0UmVuZGVyZWRCbG9ja0VsbShyb2FtQmxvY2tFbG0pO1xuICAgICAgICBjb25zdCBpc0NvbGxhcHNlZCA9IHJvYW1CbG9ja0VsbT8uY2xhc3NMaXN0LmNvbnRhaW5zKCdybS1ibG9jay0tY2xvc2VkJyk7XG4gICAgICAgIGlmIChpc0NvbGxhcHNlZCkge1xuICAgICAgICAgIC8vIEN1cnJlbnRseSBubyBSb2FtIEFQSSB0byB0b2dnbGUgYmxvY2sgY29sbGFwc2UsIHNvIGhhZCB0byBmaW5kIHRoaXMgaGFja3lcbiAgICAgICAgICAvLyB3YXkgdG8gZG8gaXQgYnkgc2ltdWxhdGluZyBjbGlja1xuICAgICAgICAgIGNvbnN0IGV4cGFuZENvbnRyb2xCdG4gPSByZWYuY3VycmVudC5xdWVyeVNlbGVjdG9yKCcuYmxvY2stZXhwYW5kIC5ybS1jYXJldCcpO1xuXG4gICAgICAgICAgZG9tVXRpbHMuc2ltdWxhdGVNb3VzZUNsaWNrKGV4cGFuZENvbnRyb2xCdG4pO1xuICAgICAgICAgIGF3YWl0IGFzeW5jVXRpbHMuc2xlZXAoNTApOyAvLyDlh4/lsJHlu7bov5/ku44xMDBtc+WIsDUwbXNcbiAgICAgICAgICBkb21VdGlscy5zaW11bGF0ZU1vdXNlQ2xpY2soZXhwYW5kQ29udHJvbEJ0bik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEaXNjb25uZWN0IGFueSBleGlzdGluZyBvYnNlcnZlclxuICAgICAgICBpZiAob2JzZXJ2ZXJSZWYuY3VycmVudCkge1xuICAgICAgICAgIG9ic2VydmVyUmVmLmN1cnJlbnQuZGlzY29ubmVjdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGEgbXV0YXRpb24gb2JzZXJ2ZXIgdG8gZGV0ZWN0IGR5bmFtaWNhbGx5IGFkZGVkIHRleHRhcmVhcyAoc28gd2UgY2FuIGFkZCBibHVyIGxpc3RlbmVycylcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7XG4gICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goKG11dGF0aW9uKSA9PiB7XG4gICAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcgJiYgbXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIG11dGF0aW9uLmFkZGVkTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RleHRhcmVhcyA9IG5vZGUucXVlcnlTZWxlY3RvckFsbCgndGV4dGFyZWEnKTtcbiAgICAgICAgICAgICAgICAgIGlmIChuZXdUZXh0YXJlYXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdUZXh0YXJlYXMuZm9yRWFjaCgodGV4dGFyZWEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYS5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgaGFuZGxlQmxvY2tCbHVyKTtcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgaGFuZGxlQmxvY2tCbHVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShyZWYuY3VycmVudCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XG4gICAgICAgIG9ic2VydmVyUmVmLmN1cnJlbnQgPSBvYnNlcnZlcjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIENyZWF0ZSB0aGUgc21hcnQgZGVib3VuY2VkIGZ1bmN0aW9uIHdpdGggcmVkdWNlZCB0aW1lb3V0IGZyb20gMTAwbXMgdG8gNTBtc1xuICAgIGNvbnN0IHNtYXJ0RGVib3VuY2VkUmVuZGVyID0gYXN5bmNVdGlscy5zbWFydERlYm91bmNlKHJlbmRlckJsb2NrLCA1MCk7XG4gICAgZGVib3VuY2VkRm5SZWYuY3VycmVudCA9ICgpID0+IHNtYXJ0RGVib3VuY2VkUmVuZGVyKHJlZlVpZFJlZi5jdXJyZW50KTtcblxuICAgIC8vIENsZWFuIHVwIGZ1bmN0aW9uXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRlYm91bmNlZEZuUmVmLmN1cnJlbnQgPSBudWxsO1xuXG4gICAgICAvLyBEaXNjb25uZWN0IHRoZSBtdXRhdGlvbiBvYnNlcnZlclxuICAgICAgaWYgKG9ic2VydmVyUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgb2JzZXJ2ZXJSZWYuY3VycmVudC5kaXNjb25uZWN0KCk7XG4gICAgICAgIG9ic2VydmVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtoYW5kbGVCbG9ja0JsdXJdKTtcblxuICAvLyBDYWxsIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2hlbiByZWZVaWQgY2hhbmdlc1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChkZWJvdW5jZWRGblJlZi5jdXJyZW50KSB7XG4gICAgICBkZWJvdW5jZWRGblJlZi5jdXJyZW50KCk7XG4gICAgfVxuICB9LCBbcmVmVWlkLCBmb3JjZVVwZGF0ZV0pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIHticmVhZGNydW1icyAmJiBzaG93QnJlYWRjcnVtYnMgJiYgPEJyZWFkY3J1bWJzIGJyZWFkY3J1bWJzPXticmVhZGNydW1ic30gLz59XG4gICAgICB7aXNMb2FkaW5nICYmIDxMb2FkaW5nT3ZlcmxheT7liqDovb3kuK0uLi48L0xvYWRpbmdPdmVybGF5Pn1cbiAgICAgIDxDb250ZW50V3JhcHBlciByZWY9e3JlZn0gc2hvd0Fuc3dlcnM9e3Nob3dBbnN3ZXJzfSBpc0xvYWRpbmc9e2lzTG9hZGluZ30+PC9Db250ZW50V3JhcHBlcj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IExvYWRpbmdPdmVybGF5ID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgei1pbmRleDogMTAwMDtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjkpO1xuICBwYWRkaW5nOiA4cHggMTZweDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBmb250LXNpemU6IDE0cHg7XG4gIGNvbG9yOiAjNjY2O1xuICBib3gtc2hhZG93OiAwIDJweCA4cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuYDtcblxuY29uc3QgQ29udGVudFdyYXBwZXIgPSBzdHlsZWQuZGl2PHtcbiAgc2hvd0Fuc3dlcnM6IGJvb2xlYW47XG4gIGlzTG9hZGluZz86IGJvb2xlYW47XG59PmBcbiAgLy8gVG8gYWxpZ24gYnVsbGV0IG9uIHRoZSBsZWZ0ICsgcmVmIGNvdW50IG9uIHRoZSByaWdodCBjb3JyZWN0bHlcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAtMTRweDtcbiAgd2lkdGg6IGNhbGMoMTAwJSArIDE5cHgpO1xuICBvcGFjaXR5OiAkeyhwcm9wcykgPT4gcHJvcHMuaXNMb2FkaW5nID8gMC41IDogMX07XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBlYXNlLWluLW91dDtcblxuICAmIC5ybS1ibG9jay1jaGlsZHJlbiB7XG4gICAgLyog8J+agCBGTEFTSCBGSVggVjM6IOS9v+eUqCB2aXNpYmlsaXR5ICsgb3BhY2l0eSDku6Pmm78gZGlzcGxhee+8jOmBv+WFjemXqueDgSAqL1xuICAgIHZpc2liaWxpdHk6ICR7KHByb3BzKSA9PiAocHJvcHMuc2hvd0Fuc3dlcnMgPyAndmlzaWJsZScgOiAnaGlkZGVuJyl9O1xuICAgIG9wYWNpdHk6ICR7KHByb3BzKSA9PiAocHJvcHMuc2hvd0Fuc3dlcnMgPyAxIDogMCl9O1xuICAgIGhlaWdodDogJHsocHJvcHMpID0+IChwcm9wcy5zaG93QW5zd2VycyA/ICdhdXRvJyA6ICcwJyl9O1xuICAgIG92ZXJmbG93OiAkeyhwcm9wcykgPT4gKHByb3BzLnNob3dBbnN3ZXJzID8gJ3Zpc2libGUnIDogJ2hpZGRlbicpfTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMTVzIGVhc2UtaW4tb3V0LCBoZWlnaHQgMC4xNXMgZWFzZS1pbi1vdXQ7XG4gICAgZGlzcGxheTogZmxleDsgLyog5L+d5oyBIGZsZXgg5biD5bGA77yM5LiN5pS55Y+YIGRpc3BsYXkgKi9cbiAgfVxuXG4gICYgLnJtLWJsb2NrLXNlcGFyYXRvciB7XG4gICAgbWluLXdpZHRoOiB1bnNldDsgLy8gS2VlcGluZyByb2FtIGJsb2NrIGZyb20gZXhwYW5kaW5nIDEwMFxuICB9XG5cbiAgJiAucm0taGlnaGxpZ2h0LFxuICAucm9hbS1tZW1vLWNsb3plIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyhwcm9wcykgPT4gKHByb3BzLnNob3dBbnN3ZXJzID8gJ3RyYW5zcGFyZW50JyA6ICcjZTFlM2U1Jyl9O1xuICAgIGNvbG9yOiAkeyhwcm9wcykgPT4gKHByb3BzLnNob3dBbnN3ZXJzID8gJ2luaGVyaXQnIDogJ3RyYW5zcGFyZW50Jyl9O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIC8qIPCfmoAgRkxBU0ggRklYIFYzOiDmt7vliqDlubPmu5Hov4fmuKHmlYjmnpwgKi9cbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBjb2xvciAwLjE1cyBlYXNlLWluLW91dDtcbiAgfVxuYDtcblxuY29uc3QgQnJlYWRjcnVtYnMgPSAoeyBicmVhZGNydW1icyB9KSA9PiB7XG4gIGNvbnN0IGl0ZW1zID0gYnJlYWRjcnVtYnMubWFwKChicmVhZGNydW1iLCBpbmRleCkgPT4gKHtcbiAgICBjdXJyZW50OiBpbmRleCA9PT0gYnJlYWRjcnVtYnMubGVuZ3RoIC0gMSxcbiAgICB0ZXh0OiBicmVhZGNydW1iLnRpdGxlIHx8IGJyZWFkY3J1bWIuc3RyaW5nLCAvLyByb290IHBhZ2VzIGhhdmUgdGl0bGUgYnV0IG5vIHN0cmluZ1xuICB9KSk7XG4gIHJldHVybiAoXG4gICAgPEJyZWFkQ3J1bWJXcmFwcGVyIGNsYXNzTmFtZT1cInJtLXpvb20gem9vbS1wYXRoLXZpZXdcIj5cbiAgICAgIHtpdGVtcy5tYXAoKGl0ZW0sIGkpID0+IChcbiAgICAgICAgPGRpdiBrZXk9e2l9IGNsYXNzTmFtZT1cInJtLXpvb20taXRlbVwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJtLXpvb20taXRlbS1jb250ZW50XCI+e2l0ZW0udGV4dH08L3NwYW4+eycgJ31cbiAgICAgICAgICB7aSAhPT0gaXRlbXMubGVuZ3RoIC0gMSAmJiA8SWNvbiBpY29uPVwiY2hldnJvbi1yaWdodFwiIC8+fVxuICAgICAgICA8L2Rpdj5cbiAgICAgICkpfVxuICAgIDwvQnJlYWRDcnVtYldyYXBwZXI+XG4gICk7XG59O1xuXG5jb25zdCBCcmVhZENydW1iV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIG9wYWNpdHk6IDAuNztcbiAgbWFyZ2luLWxlZnQ6IDhweCAhaW1wb3J0YW50O1xuICBtYXJnaW4tdG9wOiAtNHB4ICFpbXBvcnRhbnQ7XG5cbiAgJi5ybS16b29tLWl0ZW0ge1xuICAgIGN1cnNvcjogYXV0byAhaW1wb3J0YW50O1xuICB9XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBDYXJkQmxvY2s7XG4iLCJ2YXIgdT0oYT0+KGFbYS5OZXc9MF09XCJOZXdcIixhW2EuTGVhcm5pbmc9MV09XCJMZWFybmluZ1wiLGFbYS5SZXZpZXc9Ml09XCJSZXZpZXdcIixhW2EuUmVsZWFybmluZz0zXT1cIlJlbGVhcm5pbmdcIixhKSkodXx8e30pLGw9KGE9PihhW2EuTWFudWFsPTBdPVwiTWFudWFsXCIsYVthLkFnYWluPTFdPVwiQWdhaW5cIixhW2EuSGFyZD0yXT1cIkhhcmRcIixhW2EuR29vZD0zXT1cIkdvb2RcIixhW2EuRWFzeT00XT1cIkVhc3lcIixhKSkobHx8e30pO2NsYXNzIGR7c3RhdGljIGNhcmQodCl7cmV0dXJuey4uLnQsc3RhdGU6ZC5zdGF0ZSh0LnN0YXRlKSxkdWU6ZC50aW1lKHQuZHVlKSxsYXN0X3Jldmlldzp0Lmxhc3RfcmV2aWV3P2QudGltZSh0Lmxhc3RfcmV2aWV3KTp2b2lkIDB9fXN0YXRpYyByYXRpbmcodCl7aWYodHlwZW9mIHQ9PVwic3RyaW5nXCIpe2NvbnN0IGU9dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSxpPXQuc2xpY2UoMSkudG9Mb3dlckNhc2UoKSxzPWxbYCR7ZX0ke2l9YF07aWYocz09PXZvaWQgMCl0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcmF0aW5nOlske3R9XWApO3JldHVybiBzfWVsc2UgaWYodHlwZW9mIHQ9PVwibnVtYmVyXCIpcmV0dXJuIHQ7dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJhdGluZzpbJHt0fV1gKX1zdGF0aWMgc3RhdGUodCl7aWYodHlwZW9mIHQ9PVwic3RyaW5nXCIpe2NvbnN0IGU9dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSxpPXQuc2xpY2UoMSkudG9Mb3dlckNhc2UoKSxzPXVbYCR7ZX0ke2l9YF07aWYocz09PXZvaWQgMCl0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc3RhdGU6WyR7dH1dYCk7cmV0dXJuIHN9ZWxzZSBpZih0eXBlb2YgdD09XCJudW1iZXJcIilyZXR1cm4gdDt0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc3RhdGU6WyR7dH1dYCl9c3RhdGljIHRpbWUodCl7aWYodHlwZW9mIHQ9PVwib2JqZWN0XCImJnQgaW5zdGFuY2VvZiBEYXRlKXJldHVybiB0O2lmKHR5cGVvZiB0PT1cInN0cmluZ1wiKXtjb25zdCBlPURhdGUucGFyc2UodCk7aWYoaXNOYU4oZSkpdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGRhdGU6WyR7dH1dYCk7cmV0dXJuIG5ldyBEYXRlKGUpfWVsc2UgaWYodHlwZW9mIHQ9PVwibnVtYmVyXCIpcmV0dXJuIG5ldyBEYXRlKHQpO3Rocm93IG5ldyBFcnJvcihgSW52YWxpZCBkYXRlOlske3R9XWApfXN0YXRpYyByZXZpZXdfbG9nKHQpe3JldHVybnsuLi50LGR1ZTpkLnRpbWUodC5kdWUpLHJhdGluZzpkLnJhdGluZyh0LnJhdGluZyksc3RhdGU6ZC5zdGF0ZSh0LnN0YXRlKSxyZXZpZXc6ZC50aW1lKHQucmV2aWV3KX19fURhdGUucHJvdG90eXBlLnNjaGVkdWxlcj1mdW5jdGlvbihhLHQpe3JldHVybiBtKHRoaXMsYSx0KX0sRGF0ZS5wcm90b3R5cGUuZGlmZj1mdW5jdGlvbihhLHQpe3JldHVybiB2KHRoaXMsYSx0KX0sRGF0ZS5wcm90b3R5cGUuZm9ybWF0PWZ1bmN0aW9uKCl7cmV0dXJuIEModGhpcyl9LERhdGUucHJvdG90eXBlLmR1ZUZvcm1hdD1mdW5jdGlvbihhLHQsZSl7cmV0dXJuIHoodGhpcyxhLHQsZSl9O2Z1bmN0aW9uIG0oYSx0LGUpe3JldHVybiBuZXcgRGF0ZShlP2QudGltZShhKS5nZXRUaW1lKCkrdCoyNCo2MCo2MCoxZTM6ZC50aW1lKGEpLmdldFRpbWUoKSt0KjYwKjFlMyl9ZnVuY3Rpb24gdihhLHQsZSl7aWYoIWF8fCF0KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZGF0ZVwiKTtjb25zdCBpPWQudGltZShhKS5nZXRUaW1lKCktZC50aW1lKHQpLmdldFRpbWUoKTtsZXQgcz0wO3N3aXRjaChlKXtjYXNlXCJkYXlzXCI6cz1NYXRoLmZsb29yKGkvKDI0KjYwKjYwKjFlMykpO2JyZWFrO2Nhc2VcIm1pbnV0ZXNcIjpzPU1hdGguZmxvb3IoaS8oNjAqMWUzKSk7YnJlYWt9cmV0dXJuIHN9ZnVuY3Rpb24gQyhhKXtjb25zdCB0PWQudGltZShhKSxlPXQuZ2V0RnVsbFllYXIoKSxpPXQuZ2V0TW9udGgoKSsxLHM9dC5nZXREYXRlKCkscj10LmdldEhvdXJzKCksbj10LmdldE1pbnV0ZXMoKSxvPXQuZ2V0U2Vjb25kcygpO3JldHVybmAke2V9LSR7YihpKX0tJHtiKHMpfSAke2Iocil9OiR7YihuKX06JHtiKG8pfWB9ZnVuY3Rpb24gYihhKXtyZXR1cm4gYTwxMD9gMCR7YX1gOmAke2F9YH1jb25zdCBMPVs2MCw2MCwyNCwzMSwxMl0sTj1bXCJzZWNvbmRcIixcIm1pblwiLFwiaG91clwiLFwiZGF5XCIsXCJtb250aFwiLFwieWVhclwiXTtmdW5jdGlvbiB6KGEsdCxlLGk9Til7YT1kLnRpbWUoYSksdD1kLnRpbWUodCksaS5sZW5ndGghPT1OLmxlbmd0aCYmKGk9Tik7bGV0IHM9YS5nZXRUaW1lKCktdC5nZXRUaW1lKCkscjtmb3Iocy89MWUzLHI9MDtyPEwubGVuZ3RoJiYhKHM8TFtyXSk7cisrKXMvPUxbcl07cmV0dXJuYCR7TWF0aC5mbG9vcihzKX0ke2U/aVtyXTpcIlwifWB9ZnVuY3Rpb24gc3QoYSl7cmV0dXJuIGQudGltZShhKX1mdW5jdGlvbiBydChhKXtyZXR1cm4gZC5zdGF0ZShhKX1mdW5jdGlvbiBhdChhKXtyZXR1cm4gZC5yYXRpbmcoYSl9Y29uc3QgVD1PYmplY3QuZnJlZXplKFtsLkFnYWluLGwuSGFyZCxsLkdvb2QsbC5FYXN5XSksbnQ9W3tzdGFydDoyLjUsZW5kOjcsZmFjdG9yOi4xNX0se3N0YXJ0OjcsZW5kOjIwLGZhY3RvcjouMX0se3N0YXJ0OjIwLGVuZDoxLzAsZmFjdG9yOi4wNX1dO2Z1bmN0aW9uIFUoYSx0LGUpe2xldCBpPTE7Zm9yKGNvbnN0IG4gb2YgbnQpaSs9bi5mYWN0b3IqTWF0aC5tYXgoTWF0aC5taW4oYSxuLmVuZCktbi5zdGFydCwwKTthPU1hdGgubWluKGEsZSk7bGV0IHM9TWF0aC5tYXgoMixNYXRoLnJvdW5kKGEtaSkpO2NvbnN0IHI9TWF0aC5taW4oTWF0aC5yb3VuZChhK2kpLGUpO3JldHVybiBhPnQmJihzPU1hdGgubWF4KHMsdCsxKSkscz1NYXRoLm1pbihzLHIpLHttaW5faXZsOnMsbWF4X2l2bDpyfX1mdW5jdGlvbiBnKGEsdCxlKXtyZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgoYSx0KSxlKX1mdW5jdGlvbiBrKGEsdCl7Y29uc3QgZT1EYXRlLlVUQyhhLmdldFVUQ0Z1bGxZZWFyKCksYS5nZXRVVENNb250aCgpLGEuZ2V0VVRDRGF0ZSgpKSxpPURhdGUuVVRDKHQuZ2V0VVRDRnVsbFllYXIoKSx0LmdldFVUQ01vbnRoKCksdC5nZXRVVENEYXRlKCkpO3JldHVybiBNYXRoLmZsb29yKChpLWUpLzg2NGU1KX1jb25zdCBsdD1cIjUuMi4wXCIscT0uOSxQPTM2NTAwLGo9ITEsTz0hMCxZPU9iamVjdC5mcmVlemUoW1wiMW1cIixcIjEwbVwiXSksVz1PYmplY3QuZnJlZXplKFtcIjEwbVwiXSksb3Q9YHYke2x0fSB1c2luZyBGU1JTLTYuMGAscD0uMDAxLGR0PTM2NTAwLE09MTAwLCQ9LjUsQj0uMTU0MixEPU9iamVjdC5mcmVlemUoWy4yMTIsMS4yOTMxLDIuMzA2NSw4LjI5NTYsNi40MTMzLC44MzM0LDMuMDE5NCwuMDAxLDEuODcyMiwuMTY2NiwuNzk2LDEuNDgzNSwuMDYxNCwuMjYyOSwxLjY0ODMsLjYwMTQsMS44NzI5LC41NDI1LC4wOTEyLC4wNjU4LEJdKSxYPTIsVj1hPT5bW3AsTV0sW3AsTV0sW3AsTV0sW3AsTV0sWzEsMTBdLFsuMDAxLDRdLFsuMDAxLDRdLFsuMDAxLC43NV0sWzAsNC41XSxbMCwuOF0sWy4wMDEsMy41XSxbLjAwMSw1XSxbLjAwMSwuMjVdLFsuMDAxLC45XSxbMCw0XSxbMCwxXSxbMSw2XSxbMCxhXSxbMCxhXSxbMCwuOF0sWy4xLC44XV0sRT0oYSx0KT0+e2xldCBlPVg7aWYoTWF0aC5tYXgoMCx0KT4xKXtjb25zdCBpPS0oTWF0aC5sb2coYVsxMV0pK01hdGgubG9nKE1hdGgucG93KDIsYVsxM10pLTEpK2FbMTRdKi4zKS90O2U9ZygraS50b0ZpeGVkKDgpLC4wMSwyKX1yZXR1cm4gVihlKS5tYXAoKFtpLHNdLHIpPT5nKGFbcl0saSxzKSl9LGh0PWE9PntpZihhLmZpbmQodD0+IWlzRmluaXRlKHQpJiYhaXNOYU4odCkpIT09dm9pZCAwKXRocm93IEVycm9yKGBOb24tZmluaXRlIG9yIE5hTiB2YWx1ZSBpbiBwYXJhbWV0ZXJzICR7YX1gKTtpZighWzE3LDE5LDIxXS5pbmNsdWRlcyhhLmxlbmd0aCkpdGhyb3cgRXJyb3IoYEludmFsaWQgcGFyYW1ldGVyIGxlbmd0aDogJHthLmxlbmd0aH0uIE11c3QgYmUgMTcsIDE5IG9yIDIxIGZvciBGU1JTdjQsIDUgYW5kIDYgcmVzcGVjdGl2ZWx5LmApO3JldHVybiBhfSxSPWE9PntpZihhPT09dm9pZCAwKXJldHVyblsuLi5EXTtzd2l0Y2goYS5sZW5ndGgpe2Nhc2UgMjE6cmV0dXJuWy4uLmFdO2Nhc2UgMTk6cmV0dXJuIGNvbnNvbGUuZGVidWcoXCJbRlNSUy02XWF1dG8gZmlsbCB3IGZyb20gMTkgdG8gMjEgbGVuZ3RoXCIpLFsuLi5hLDAsJF07Y2FzZSAxNzp7Y29uc3QgdD1bLi4uYV07cmV0dXJuIHRbNF09Kyh0WzVdKjIrdFs0XSkudG9GaXhlZCg4KSx0WzVdPSsoTWF0aC5sb2codFs1XSozKzEpLzMpLnRvRml4ZWQoOCksdFs2XT0rKHRbNl0rLjUpLnRvRml4ZWQoOCksY29uc29sZS5kZWJ1ZyhcIltGU1JTLTZdYXV0byBmaWxsIHcgZnJvbSAxNyB0byAyMSBsZW5ndGhcIiksdC5jb25jYXQoWzAsMCwwLCRdKX1kZWZhdWx0OnJldHVybiBjb25zb2xlLndhcm4oXCJbRlNSU11JbnZhbGlkIHBhcmFtZXRlcnMgbGVuZ3RoLCB1c2luZyBkZWZhdWx0IHBhcmFtZXRlcnNcIiksWy4uLkRdfX0sST1hPT57Y29uc3QgdD1BcnJheS5pc0FycmF5KGE/LmxlYXJuaW5nX3N0ZXBzKT9hLmxlYXJuaW5nX3N0ZXBzOlksZT1BcnJheS5pc0FycmF5KGE/LnJlbGVhcm5pbmdfc3RlcHMpP2EucmVsZWFybmluZ19zdGVwczpXLGk9RShSKGE/LncpLGUubGVuZ3RoKTtyZXR1cm57cmVxdWVzdF9yZXRlbnRpb246YT8ucmVxdWVzdF9yZXRlbnRpb258fHEsbWF4aW11bV9pbnRlcnZhbDphPy5tYXhpbXVtX2ludGVydmFsfHxQLHc6aSxlbmFibGVfZnV6ejphPy5lbmFibGVfZnV6ej8/aixlbmFibGVfc2hvcnRfdGVybTphPy5lbmFibGVfc2hvcnRfdGVybT8/TyxsZWFybmluZ19zdGVwczp0LHJlbGVhcm5pbmdfc3RlcHM6ZX19O2Z1bmN0aW9uIEYoYSx0KXtjb25zdCBlPXtkdWU6YT9kLnRpbWUoYSk6bmV3IERhdGUsc3RhYmlsaXR5OjAsZGlmZmljdWx0eTowLGVsYXBzZWRfZGF5czowLHNjaGVkdWxlZF9kYXlzOjAscmVwczowLGxhcHNlczowLGxlYXJuaW5nX3N0ZXBzOjAsc3RhdGU6dS5OZXcsbGFzdF9yZXZpZXc6dm9pZCAwfTtyZXR1cm4gdCYmdHlwZW9mIHQ9PVwiZnVuY3Rpb25cIj90KGUpOmV9Y2xhc3MgdXR7YztzMDtzMTtzMjtjb25zdHJ1Y3Rvcih0KXtjb25zdCBlPWN0KCk7dGhpcy5jPTEsdGhpcy5zMD1lKFwiIFwiKSx0aGlzLnMxPWUoXCIgXCIpLHRoaXMuczI9ZShcIiBcIiksdD09bnVsbCYmKHQ9K25ldyBEYXRlKSx0aGlzLnMwLT1lKHQpLHRoaXMuczA8MCYmKHRoaXMuczArPTEpLHRoaXMuczEtPWUodCksdGhpcy5zMTwwJiYodGhpcy5zMSs9MSksdGhpcy5zMi09ZSh0KSx0aGlzLnMyPDAmJih0aGlzLnMyKz0xKX1uZXh0KCl7Y29uc3QgdD0yMDkxNjM5KnRoaXMuczArdGhpcy5jKjIzMjgzMDY0MzY1Mzg2OTYzZS0yNjtyZXR1cm4gdGhpcy5zMD10aGlzLnMxLHRoaXMuczE9dGhpcy5zMix0aGlzLnMyPXQtKHRoaXMuYz10fDApLHRoaXMuczJ9c2V0IHN0YXRlKHQpe3RoaXMuYz10LmMsdGhpcy5zMD10LnMwLHRoaXMuczE9dC5zMSx0aGlzLnMyPXQuczJ9Z2V0IHN0YXRlKCl7cmV0dXJue2M6dGhpcy5jLHMwOnRoaXMuczAsczE6dGhpcy5zMSxzMjp0aGlzLnMyfX19ZnVuY3Rpb24gY3QoKXtsZXQgYT00MDIyODcxMTk3O3JldHVybiBmdW5jdGlvbih0KXt0PVN0cmluZyh0KTtmb3IobGV0IGU9MDtlPHQubGVuZ3RoO2UrKyl7YSs9dC5jaGFyQ29kZUF0KGUpO2xldCBpPS4wMjUxOTYwMzI4MjQxNjkzOCphO2E9aT4+PjAsaS09YSxpKj1hLGE9aT4+PjAsaS09YSxhKz1pKjQyOTQ5NjcyOTZ9cmV0dXJuKGE+Pj4wKSoyMzI4MzA2NDM2NTM4Njk2M2UtMjZ9fWZ1bmN0aW9uIF90KGEpe2NvbnN0IHQ9bmV3IHV0KGEpLGU9KCk9PnQubmV4dCgpO3JldHVybiBlLmludDMyPSgpPT50Lm5leHQoKSo0Mjk0OTY3Mjk2fDAsZS5kb3VibGU9KCk9PmUoKSsoZSgpKjIwOTcxNTJ8MCkqMTExMDIyMzAyNDYyNTE1NjVlLTMyLGUuc3RhdGU9KCk9PnQuc3RhdGUsZS5pbXBvcnRTdGF0ZT1pPT4odC5zdGF0ZT1pLGUpLGV9Y29uc3QgSD1hPT57Y29uc3QgdD10eXBlb2YgYT09XCJudW1iZXJcIj8tYTotYVsyMF0sZT1NYXRoLmV4cChNYXRoLnBvdyh0LC0xKSpNYXRoLmxvZyguOSkpLTE7cmV0dXJue2RlY2F5OnQsZmFjdG9yOitlLnRvRml4ZWQoOCl9fTtmdW5jdGlvbiBBKGEsdCxlKXtjb25zdHtkZWNheTppLGZhY3RvcjpzfT1IKGEpO3JldHVybitNYXRoLnBvdygxK3MqdC9lLGkpLnRvRml4ZWQoOCl9Y2xhc3MgSntwYXJhbTtpbnRlcnZhbE1vZGlmaWVyO19zZWVkO2NvbnN0cnVjdG9yKHQpe3RoaXMucGFyYW09bmV3IFByb3h5KEkodCksdGhpcy5wYXJhbXNfaGFuZGxlcl9wcm94eSgpKSx0aGlzLmludGVydmFsTW9kaWZpZXI9dGhpcy5jYWxjdWxhdGVfaW50ZXJ2YWxfbW9kaWZpZXIodGhpcy5wYXJhbS5yZXF1ZXN0X3JldGVudGlvbiksdGhpcy5mb3JnZXR0aW5nX2N1cnZlPUEuYmluZCh0aGlzLHRoaXMucGFyYW0udyl9Z2V0IGludGVydmFsX21vZGlmaWVyKCl7cmV0dXJuIHRoaXMuaW50ZXJ2YWxNb2RpZmllcn1zZXQgc2VlZCh0KXt0aGlzLl9zZWVkPXR9Y2FsY3VsYXRlX2ludGVydmFsX21vZGlmaWVyKHQpe2lmKHQ8PTB8fHQ+MSl0aHJvdyBuZXcgRXJyb3IoXCJSZXF1ZXN0ZWQgcmV0ZW50aW9uIHJhdGUgc2hvdWxkIGJlIGluIHRoZSByYW5nZSAoMCwxXVwiKTtjb25zdHtkZWNheTplLGZhY3RvcjppfT1IKHRoaXMucGFyYW0udyk7cmV0dXJuKygoTWF0aC5wb3codCwxL2UpLTEpL2kpLnRvRml4ZWQoOCl9Z2V0IHBhcmFtZXRlcnMoKXtyZXR1cm4gdGhpcy5wYXJhbX1zZXQgcGFyYW1ldGVycyh0KXt0aGlzLnVwZGF0ZV9wYXJhbWV0ZXJzKHQpfXBhcmFtc19oYW5kbGVyX3Byb3h5KCl7Y29uc3QgdD10aGlzO3JldHVybntzZXQ6ZnVuY3Rpb24oZSxpLHMpe3JldHVybiBpPT09XCJyZXF1ZXN0X3JldGVudGlvblwiJiZOdW1iZXIuaXNGaW5pdGUocyk/dC5pbnRlcnZhbE1vZGlmaWVyPXQuY2FsY3VsYXRlX2ludGVydmFsX21vZGlmaWVyKE51bWJlcihzKSk6aT09PVwid1wiJiYocz1FKFIocyksZS5yZWxlYXJuaW5nX3N0ZXBzLmxlbmd0aCksdC5mb3JnZXR0aW5nX2N1cnZlPUEuYmluZCh0aGlzLHMpLHQuaW50ZXJ2YWxNb2RpZmllcj10LmNhbGN1bGF0ZV9pbnRlcnZhbF9tb2RpZmllcihOdW1iZXIoZS5yZXF1ZXN0X3JldGVudGlvbikpKSxSZWZsZWN0LnNldChlLGkscyksITB9fX11cGRhdGVfcGFyYW1ldGVycyh0KXtjb25zdCBlPUkodCk7Zm9yKGNvbnN0IGkgaW4gZSlpZihpIGluIHRoaXMucGFyYW0pe2NvbnN0IHM9aTt0aGlzLnBhcmFtW3NdPWVbc119fWluaXRfc3RhYmlsaXR5KHQpe3JldHVybiBNYXRoLm1heCh0aGlzLnBhcmFtLndbdC0xXSwuMSl9aW5pdF9kaWZmaWN1bHR5KHQpe3JldHVybisodGhpcy5wYXJhbS53WzRdLU1hdGguZXhwKCh0LTEpKnRoaXMucGFyYW0ud1s1XSkrMSkudG9GaXhlZCg4KX1hcHBseV9mdXp6KHQsZSl7aWYoIXRoaXMucGFyYW0uZW5hYmxlX2Z1enp8fHQ8Mi41KXJldHVybiBNYXRoLnJvdW5kKHQpO2NvbnN0IGk9X3QodGhpcy5fc2VlZCkoKSx7bWluX2l2bDpzLG1heF9pdmw6cn09VSh0LGUsdGhpcy5wYXJhbS5tYXhpbXVtX2ludGVydmFsKTtyZXR1cm4gTWF0aC5mbG9vcihpKihyLXMrMSkrcyl9bmV4dF9pbnRlcnZhbCh0LGUpe2NvbnN0IGk9TWF0aC5taW4oTWF0aC5tYXgoMSxNYXRoLnJvdW5kKHQqdGhpcy5pbnRlcnZhbE1vZGlmaWVyKSksdGhpcy5wYXJhbS5tYXhpbXVtX2ludGVydmFsKTtyZXR1cm4gdGhpcy5hcHBseV9mdXp6KGksZSl9bGluZWFyX2RhbXBpbmcodCxlKXtyZXR1cm4rKHQqKDEwLWUpLzkpLnRvRml4ZWQoOCl9bmV4dF9kaWZmaWN1bHR5KHQsZSl7Y29uc3QgaT0tdGhpcy5wYXJhbS53WzZdKihlLTMpLHM9dCt0aGlzLmxpbmVhcl9kYW1waW5nKGksdCk7cmV0dXJuIGcodGhpcy5tZWFuX3JldmVyc2lvbih0aGlzLmluaXRfZGlmZmljdWx0eShsLkVhc3kpLHMpLDEsMTApfW1lYW5fcmV2ZXJzaW9uKHQsZSl7cmV0dXJuKyh0aGlzLnBhcmFtLndbN10qdCsoMS10aGlzLnBhcmFtLndbN10pKmUpLnRvRml4ZWQoOCl9bmV4dF9yZWNhbGxfc3RhYmlsaXR5KHQsZSxpLHMpe2NvbnN0IHI9bC5IYXJkPT09cz90aGlzLnBhcmFtLndbMTVdOjEsbj1sLkVhc3k9PT1zP3RoaXMucGFyYW0ud1sxNl06MTtyZXR1cm4rZyhlKigxK01hdGguZXhwKHRoaXMucGFyYW0ud1s4XSkqKDExLXQpKk1hdGgucG93KGUsLXRoaXMucGFyYW0ud1s5XSkqKE1hdGguZXhwKCgxLWkpKnRoaXMucGFyYW0ud1sxMF0pLTEpKnIqbikscCwzNjUwMCkudG9GaXhlZCg4KX1uZXh0X2ZvcmdldF9zdGFiaWxpdHkodCxlLGkpe3JldHVybitnKHRoaXMucGFyYW0ud1sxMV0qTWF0aC5wb3codCwtdGhpcy5wYXJhbS53WzEyXSkqKE1hdGgucG93KGUrMSx0aGlzLnBhcmFtLndbMTNdKS0xKSpNYXRoLmV4cCgoMS1pKSp0aGlzLnBhcmFtLndbMTRdKSxwLDM2NTAwKS50b0ZpeGVkKDgpfW5leHRfc2hvcnRfdGVybV9zdGFiaWxpdHkodCxlKXtjb25zdCBpPU1hdGgucG93KHQsLXRoaXMucGFyYW0ud1sxOV0pKk1hdGguZXhwKHRoaXMucGFyYW0ud1sxN10qKGUtMyt0aGlzLnBhcmFtLndbMThdKSkscz1lPj0zP01hdGgubWF4KGksMSk6aTtyZXR1cm4rZyh0KnMscCwzNjUwMCkudG9GaXhlZCg4KX1mb3JnZXR0aW5nX2N1cnZlO25leHRfc3RhdGUodCxlLGkpe2NvbnN0e2RpZmZpY3VsdHk6cyxzdGFiaWxpdHk6cn09dD8/e2RpZmZpY3VsdHk6MCxzdGFiaWxpdHk6MH07aWYoZTwwKXRocm93IG5ldyBFcnJvcihgSW52YWxpZCBkZWx0YV90IFwiJHtlfVwiYCk7aWYoaTwwfHxpPjQpdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGdyYWRlIFwiJHtpfVwiYCk7aWYocz09PTAmJnI9PT0wKXJldHVybntkaWZmaWN1bHR5OmcodGhpcy5pbml0X2RpZmZpY3VsdHkoaSksMSwxMCksc3RhYmlsaXR5OnRoaXMuaW5pdF9zdGFiaWxpdHkoaSl9O2lmKGk9PT0wKXJldHVybntkaWZmaWN1bHR5OnMsc3RhYmlsaXR5OnJ9O2lmKHM8MXx8cjxwKXRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtZW1vcnkgc3RhdGUgeyBkaWZmaWN1bHR5OiAke3N9LCBzdGFiaWxpdHk6ICR7cn0gfWApO2NvbnN0IG49dGhpcy5mb3JnZXR0aW5nX2N1cnZlKGUsciksbz10aGlzLm5leHRfcmVjYWxsX3N0YWJpbGl0eShzLHIsbixpKSxoPXRoaXMubmV4dF9mb3JnZXRfc3RhYmlsaXR5KHMscixuKSxjPXRoaXMubmV4dF9zaG9ydF90ZXJtX3N0YWJpbGl0eShyLGkpO2xldCBfPW87aWYoaT09PTEpe2xldFt5LHddPVswLDBdO3RoaXMucGFyYW0uZW5hYmxlX3Nob3J0X3Rlcm0mJih5PXRoaXMucGFyYW0ud1sxN10sdz10aGlzLnBhcmFtLndbMThdKTtjb25zdCBmPXIvTWF0aC5leHAoeSp3KTtfPWcoK2YudG9GaXhlZCg4KSxwLGgpfXJldHVybiBlPT09MCYmdGhpcy5wYXJhbS5lbmFibGVfc2hvcnRfdGVybSYmKF89Yykse2RpZmZpY3VsdHk6dGhpcy5uZXh0X2RpZmZpY3VsdHkocyxpKSxzdGFiaWxpdHk6X319fWZ1bmN0aW9uIEsoKXtjb25zdCBhPXRoaXMucmV2aWV3X3RpbWUuZ2V0VGltZSgpLHQ9dGhpcy5jdXJyZW50LnJlcHMsZT10aGlzLmN1cnJlbnQuZGlmZmljdWx0eSp0aGlzLmN1cnJlbnQuc3RhYmlsaXR5O3JldHVybmAke2F9XyR7dH1fJHtlfWB9ZnVuY3Rpb24gZnQoYSl7cmV0dXJuIGZ1bmN0aW9uKCl7Y29uc3QgdD1SZWZsZWN0LmdldCh0aGlzLmN1cnJlbnQsYSk/PzAsZT10aGlzLmN1cnJlbnQucmVwcztyZXR1cm4gU3RyaW5nKHQrZXx8MCl9fWNvbnN0IFE9YT0+e2NvbnN0IHQ9YS5zbGljZSgtMSksZT1wYXJzZUludChhLnNsaWNlKDAsLTEpLDEwKTtpZihpc05hTihlKXx8IU51bWJlci5pc0Zpbml0ZShlKXx8ZTwwKXRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzdGVwIHZhbHVlOiAke2F9YCk7c3dpdGNoKHQpe2Nhc2VcIm1cIjpyZXR1cm4gZTtjYXNlXCJoXCI6cmV0dXJuIGUqNjA7Y2FzZVwiZFwiOnJldHVybiBlKjE0NDA7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc3RlcCB1bml0OiAke2F9LCBleHBlY3RlZCBtL2gvZGApfX0sWj0oYSx0LGUpPT57Y29uc3QgaT10PT09dS5SZWxlYXJuaW5nfHx0PT09dS5SZXZpZXc/YS5yZWxlYXJuaW5nX3N0ZXBzOmEubGVhcm5pbmdfc3RlcHMscz1pLmxlbmd0aDtpZihzPT09MHx8ZT49cylyZXR1cm57fTtjb25zdCByPWlbMF0sbj1RLG89KCk9Pm4ociksaD0oKT0+e2lmKHM9PT0xKXJldHVybiBNYXRoLnJvdW5kKG4ocikqMS41KTtjb25zdCBmPWlbMV07cmV0dXJuIE1hdGgucm91bmQoKG4ocikrbihmKSkvMil9LGM9Zj0+ZjwwfHxmPj1zP251bGw6aVtmXSxfPWY9Pm4oZikseT17fSx3PWMoTWF0aC5tYXgoMCxlKSk7aWYodD09PXUuUmV2aWV3KXJldHVybiB5W2wuQWdhaW5dPXtzY2hlZHVsZWRfbWludXRlczpuKHcpLG5leHRfc3RlcDowfSx5O3t5W2wuQWdhaW5dPXtzY2hlZHVsZWRfbWludXRlczpvKCksbmV4dF9zdGVwOjB9LHlbbC5IYXJkXT17c2NoZWR1bGVkX21pbnV0ZXM6aCgpLG5leHRfc3RlcDplfTtjb25zdCBmPWMoZSsxKTtpZihmKXtjb25zdCB4PV8oZik7eCYmKHlbbC5Hb29kXT17c2NoZWR1bGVkX21pbnV0ZXM6TWF0aC5yb3VuZCh4KSxuZXh0X3N0ZXA6ZSsxfSl9fXJldHVybiB5fTt2YXIgUz0oYT0+KGEuU0NIRURVTEVSPVwiU2NoZWR1bGVyXCIsYS5MRUFSTklOR19TVEVQUz1cIkxlYXJuaW5nU3RlcHNcIixhLlNFRUQ9XCJTZWVkXCIsYSkpKFN8fHt9KTtjbGFzcyBHe2xhc3Q7Y3VycmVudDtyZXZpZXdfdGltZTtuZXh0PW5ldyBNYXA7YWxnb3JpdGhtO3N0cmF0ZWdpZXM7ZWxhcHNlZF9kYXlzPTA7Y29uc3RydWN0b3IodCxlLGkscyl7dGhpcy5hbGdvcml0aG09aSx0aGlzLmxhc3Q9ZC5jYXJkKHQpLHRoaXMuY3VycmVudD1kLmNhcmQodCksdGhpcy5yZXZpZXdfdGltZT1kLnRpbWUoZSksdGhpcy5zdHJhdGVnaWVzPXMsdGhpcy5pbml0KCl9Y2hlY2tHcmFkZSh0KXtpZighTnVtYmVyLmlzRmluaXRlKHQpfHx0PDB8fHQ+NCl0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZ3JhZGUgXCIke3R9XCIsZXhwZWN0ZWQgMS00YCl9aW5pdCgpe2NvbnN0e3N0YXRlOnQsbGFzdF9yZXZpZXc6ZX09dGhpcy5jdXJyZW50O2xldCBpPTA7dCE9PXUuTmV3JiZlJiYoaT1rKGUsdGhpcy5yZXZpZXdfdGltZSkpLHRoaXMuY3VycmVudC5sYXN0X3Jldmlldz10aGlzLnJldmlld190aW1lLHRoaXMuZWxhcHNlZF9kYXlzPWksdGhpcy5jdXJyZW50LmVsYXBzZWRfZGF5cz1pLHRoaXMuY3VycmVudC5yZXBzKz0xO2xldCBzPUs7aWYodGhpcy5zdHJhdGVnaWVzKXtjb25zdCByPXRoaXMuc3RyYXRlZ2llcy5nZXQoUy5TRUVEKTtyJiYocz1yKX10aGlzLmFsZ29yaXRobS5zZWVkPXMuY2FsbCh0aGlzKX1wcmV2aWV3KCl7cmV0dXJue1tsLkFnYWluXTp0aGlzLnJldmlldyhsLkFnYWluKSxbbC5IYXJkXTp0aGlzLnJldmlldyhsLkhhcmQpLFtsLkdvb2RdOnRoaXMucmV2aWV3KGwuR29vZCksW2wuRWFzeV06dGhpcy5yZXZpZXcobC5FYXN5KSxbU3ltYm9sLml0ZXJhdG9yXTp0aGlzLnByZXZpZXdJdGVyYXRvci5iaW5kKHRoaXMpfX0qcHJldmlld0l0ZXJhdG9yKCl7Zm9yKGNvbnN0IHQgb2YgVCl5aWVsZCB0aGlzLnJldmlldyh0KX1yZXZpZXcodCl7Y29uc3R7c3RhdGU6ZX09dGhpcy5sYXN0O2xldCBpO3N3aXRjaCh0aGlzLmNoZWNrR3JhZGUodCksZSl7Y2FzZSB1Lk5ldzppPXRoaXMubmV3U3RhdGUodCk7YnJlYWs7Y2FzZSB1LkxlYXJuaW5nOmNhc2UgdS5SZWxlYXJuaW5nOmk9dGhpcy5sZWFybmluZ1N0YXRlKHQpO2JyZWFrO2Nhc2UgdS5SZXZpZXc6aT10aGlzLnJldmlld1N0YXRlKHQpO2JyZWFrfXJldHVybiBpfWJ1aWxkTG9nKHQpe2NvbnN0e2xhc3RfcmV2aWV3OmUsZHVlOmksZWxhcHNlZF9kYXlzOnN9PXRoaXMubGFzdDtyZXR1cm57cmF0aW5nOnQsc3RhdGU6dGhpcy5jdXJyZW50LnN0YXRlLGR1ZTplfHxpLHN0YWJpbGl0eTp0aGlzLmN1cnJlbnQuc3RhYmlsaXR5LGRpZmZpY3VsdHk6dGhpcy5jdXJyZW50LmRpZmZpY3VsdHksZWxhcHNlZF9kYXlzOnRoaXMuZWxhcHNlZF9kYXlzLGxhc3RfZWxhcHNlZF9kYXlzOnMsc2NoZWR1bGVkX2RheXM6dGhpcy5jdXJyZW50LnNjaGVkdWxlZF9kYXlzLGxlYXJuaW5nX3N0ZXBzOnRoaXMuY3VycmVudC5sZWFybmluZ19zdGVwcyxyZXZpZXc6dGhpcy5yZXZpZXdfdGltZX19fWNsYXNzIHR0IGV4dGVuZHMgR3tsZWFybmluZ1N0ZXBzU3RyYXRlZ3k7Y29uc3RydWN0b3IodCxlLGkscyl7c3VwZXIodCxlLGkscyk7bGV0IHI9WjtpZih0aGlzLnN0cmF0ZWdpZXMpe2NvbnN0IG49dGhpcy5zdHJhdGVnaWVzLmdldChTLkxFQVJOSU5HX1NURVBTKTtuJiYocj1uKX10aGlzLmxlYXJuaW5nU3RlcHNTdHJhdGVneT1yfWdldExlYXJuaW5nSW5mbyh0LGUpe2NvbnN0IGk9dGhpcy5hbGdvcml0aG0ucGFyYW1ldGVyczt0LmxlYXJuaW5nX3N0ZXBzPXQubGVhcm5pbmdfc3RlcHN8fDA7Y29uc3Qgcz10aGlzLmxlYXJuaW5nU3RlcHNTdHJhdGVneShpLHQuc3RhdGUsdGhpcy5jdXJyZW50LnN0YXRlPT09dS5MZWFybmluZz90LmxlYXJuaW5nX3N0ZXBzKzE6dC5sZWFybmluZ19zdGVwcykscj1NYXRoLm1heCgwLHNbZV0/LnNjaGVkdWxlZF9taW51dGVzPz8wKSxuPU1hdGgubWF4KDAsc1tlXT8ubmV4dF9zdGVwPz8wKTtyZXR1cm57c2NoZWR1bGVkX21pbnV0ZXM6cixuZXh0X3N0ZXBzOm59fWFwcGx5TGVhcm5pbmdTdGVwcyh0LGUsaSl7Y29uc3R7c2NoZWR1bGVkX21pbnV0ZXM6cyxuZXh0X3N0ZXBzOnJ9PXRoaXMuZ2V0TGVhcm5pbmdJbmZvKHRoaXMuY3VycmVudCxlKTtpZihzPjAmJnM8MTQ0MCl0LmxlYXJuaW5nX3N0ZXBzPXIsdC5zY2hlZHVsZWRfZGF5cz0wLHQuc3RhdGU9aSx0LmR1ZT1tKHRoaXMucmV2aWV3X3RpbWUsTWF0aC5yb3VuZChzKSwhMSk7ZWxzZSBpZih0LnN0YXRlPXUuUmV2aWV3LHM+PTE0NDApdC5sZWFybmluZ19zdGVwcz1yLHQuZHVlPW0odGhpcy5yZXZpZXdfdGltZSxNYXRoLnJvdW5kKHMpLCExKSx0LnNjaGVkdWxlZF9kYXlzPU1hdGguZmxvb3Iocy8xNDQwKTtlbHNle3QubGVhcm5pbmdfc3RlcHM9MDtjb25zdCBuPXRoaXMuYWxnb3JpdGhtLm5leHRfaW50ZXJ2YWwodC5zdGFiaWxpdHksdGhpcy5lbGFwc2VkX2RheXMpO3Quc2NoZWR1bGVkX2RheXM9bix0LmR1ZT1tKHRoaXMucmV2aWV3X3RpbWUsbiwhMCl9fW5ld1N0YXRlKHQpe2NvbnN0IGU9dGhpcy5uZXh0LmdldCh0KTtpZihlKXJldHVybiBlO2NvbnN0IGk9ZC5jYXJkKHRoaXMuY3VycmVudCk7aS5kaWZmaWN1bHR5PWcodGhpcy5hbGdvcml0aG0uaW5pdF9kaWZmaWN1bHR5KHQpLDEsMTApLGkuc3RhYmlsaXR5PXRoaXMuYWxnb3JpdGhtLmluaXRfc3RhYmlsaXR5KHQpLHRoaXMuYXBwbHlMZWFybmluZ1N0ZXBzKGksdCx1LkxlYXJuaW5nKTtjb25zdCBzPXtjYXJkOmksbG9nOnRoaXMuYnVpbGRMb2codCl9O3JldHVybiB0aGlzLm5leHQuc2V0KHQscyksc31sZWFybmluZ1N0YXRlKHQpe2NvbnN0IGU9dGhpcy5uZXh0LmdldCh0KTtpZihlKXJldHVybiBlO2NvbnN0e3N0YXRlOmksZGlmZmljdWx0eTpzLHN0YWJpbGl0eTpyfT10aGlzLmxhc3Qsbj1kLmNhcmQodGhpcy5jdXJyZW50KTtuLmRpZmZpY3VsdHk9dGhpcy5hbGdvcml0aG0ubmV4dF9kaWZmaWN1bHR5KHMsdCksbi5zdGFiaWxpdHk9dGhpcy5hbGdvcml0aG0ubmV4dF9zaG9ydF90ZXJtX3N0YWJpbGl0eShyLHQpLHRoaXMuYXBwbHlMZWFybmluZ1N0ZXBzKG4sdCxpKTtjb25zdCBvPXtjYXJkOm4sbG9nOnRoaXMuYnVpbGRMb2codCl9O3JldHVybiB0aGlzLm5leHQuc2V0KHQsbyksb31yZXZpZXdTdGF0ZSh0KXtjb25zdCBlPXRoaXMubmV4dC5nZXQodCk7aWYoZSlyZXR1cm4gZTtjb25zdCBpPXRoaXMuZWxhcHNlZF9kYXlzLHtkaWZmaWN1bHR5OnMsc3RhYmlsaXR5OnJ9PXRoaXMubGFzdCxuPXRoaXMuYWxnb3JpdGhtLmZvcmdldHRpbmdfY3VydmUoaSxyKSxvPWQuY2FyZCh0aGlzLmN1cnJlbnQpLGg9ZC5jYXJkKHRoaXMuY3VycmVudCksYz1kLmNhcmQodGhpcy5jdXJyZW50KSxfPWQuY2FyZCh0aGlzLmN1cnJlbnQpO3RoaXMubmV4dF9kcyhvLGgsYyxfLHMscixuKSx0aGlzLm5leHRfaW50ZXJ2YWwoaCxjLF8saSksdGhpcy5uZXh0X3N0YXRlKGgsYyxfKSx0aGlzLmFwcGx5TGVhcm5pbmdTdGVwcyhvLGwuQWdhaW4sdS5SZWxlYXJuaW5nKSxvLmxhcHNlcys9MTtjb25zdCB5PXtjYXJkOm8sbG9nOnRoaXMuYnVpbGRMb2cobC5BZ2Fpbil9LHc9e2NhcmQ6aCxsb2c6c3VwZXIuYnVpbGRMb2cobC5IYXJkKX0sZj17Y2FyZDpjLGxvZzpzdXBlci5idWlsZExvZyhsLkdvb2QpfSx4PXtjYXJkOl8sbG9nOnN1cGVyLmJ1aWxkTG9nKGwuRWFzeSl9O3JldHVybiB0aGlzLm5leHQuc2V0KGwuQWdhaW4seSksdGhpcy5uZXh0LnNldChsLkhhcmQsdyksdGhpcy5uZXh0LnNldChsLkdvb2QsZiksdGhpcy5uZXh0LnNldChsLkVhc3kseCksdGhpcy5uZXh0LmdldCh0KX1uZXh0X2RzKHQsZSxpLHMscixuLG8pe3QuZGlmZmljdWx0eT10aGlzLmFsZ29yaXRobS5uZXh0X2RpZmZpY3VsdHkocixsLkFnYWluKTtjb25zdCBoPW4vTWF0aC5leHAodGhpcy5hbGdvcml0aG0ucGFyYW1ldGVycy53WzE3XSp0aGlzLmFsZ29yaXRobS5wYXJhbWV0ZXJzLndbMThdKSxjPXRoaXMuYWxnb3JpdGhtLm5leHRfZm9yZ2V0X3N0YWJpbGl0eShyLG4sbyk7dC5zdGFiaWxpdHk9ZygraC50b0ZpeGVkKDgpLHAsYyksZS5kaWZmaWN1bHR5PXRoaXMuYWxnb3JpdGhtLm5leHRfZGlmZmljdWx0eShyLGwuSGFyZCksZS5zdGFiaWxpdHk9dGhpcy5hbGdvcml0aG0ubmV4dF9yZWNhbGxfc3RhYmlsaXR5KHIsbixvLGwuSGFyZCksaS5kaWZmaWN1bHR5PXRoaXMuYWxnb3JpdGhtLm5leHRfZGlmZmljdWx0eShyLGwuR29vZCksaS5zdGFiaWxpdHk9dGhpcy5hbGdvcml0aG0ubmV4dF9yZWNhbGxfc3RhYmlsaXR5KHIsbixvLGwuR29vZCkscy5kaWZmaWN1bHR5PXRoaXMuYWxnb3JpdGhtLm5leHRfZGlmZmljdWx0eShyLGwuRWFzeSkscy5zdGFiaWxpdHk9dGhpcy5hbGdvcml0aG0ubmV4dF9yZWNhbGxfc3RhYmlsaXR5KHIsbixvLGwuRWFzeSl9bmV4dF9pbnRlcnZhbCh0LGUsaSxzKXtsZXQgcixuO3I9dGhpcy5hbGdvcml0aG0ubmV4dF9pbnRlcnZhbCh0LnN0YWJpbGl0eSxzKSxuPXRoaXMuYWxnb3JpdGhtLm5leHRfaW50ZXJ2YWwoZS5zdGFiaWxpdHkscykscj1NYXRoLm1pbihyLG4pLG49TWF0aC5tYXgobixyKzEpO2NvbnN0IG89TWF0aC5tYXgodGhpcy5hbGdvcml0aG0ubmV4dF9pbnRlcnZhbChpLnN0YWJpbGl0eSxzKSxuKzEpO3Quc2NoZWR1bGVkX2RheXM9cix0LmR1ZT1tKHRoaXMucmV2aWV3X3RpbWUsciwhMCksZS5zY2hlZHVsZWRfZGF5cz1uLGUuZHVlPW0odGhpcy5yZXZpZXdfdGltZSxuLCEwKSxpLnNjaGVkdWxlZF9kYXlzPW8saS5kdWU9bSh0aGlzLnJldmlld190aW1lLG8sITApfW5leHRfc3RhdGUodCxlLGkpe3Quc3RhdGU9dS5SZXZpZXcsdC5sZWFybmluZ19zdGVwcz0wLGUuc3RhdGU9dS5SZXZpZXcsZS5sZWFybmluZ19zdGVwcz0wLGkuc3RhdGU9dS5SZXZpZXcsaS5sZWFybmluZ19zdGVwcz0wfX1jbGFzcyBldCBleHRlbmRzIEd7bmV3U3RhdGUodCl7Y29uc3QgZT10aGlzLm5leHQuZ2V0KHQpO2lmKGUpcmV0dXJuIGU7dGhpcy5jdXJyZW50LnNjaGVkdWxlZF9kYXlzPTAsdGhpcy5jdXJyZW50LmVsYXBzZWRfZGF5cz0wO2NvbnN0IGk9ZC5jYXJkKHRoaXMuY3VycmVudCkscz1kLmNhcmQodGhpcy5jdXJyZW50KSxyPWQuY2FyZCh0aGlzLmN1cnJlbnQpLG49ZC5jYXJkKHRoaXMuY3VycmVudCk7cmV0dXJuIHRoaXMuaW5pdF9kcyhpLHMscixuKSx0aGlzLm5leHRfaW50ZXJ2YWwoaSxzLHIsbiwwKSx0aGlzLm5leHRfc3RhdGUoaSxzLHIsbiksdGhpcy51cGRhdGVfbmV4dChpLHMscixuKSx0aGlzLm5leHQuZ2V0KHQpfWluaXRfZHModCxlLGkscyl7dC5kaWZmaWN1bHR5PWcodGhpcy5hbGdvcml0aG0uaW5pdF9kaWZmaWN1bHR5KGwuQWdhaW4pLDEsMTApLHQuc3RhYmlsaXR5PXRoaXMuYWxnb3JpdGhtLmluaXRfc3RhYmlsaXR5KGwuQWdhaW4pLGUuZGlmZmljdWx0eT1nKHRoaXMuYWxnb3JpdGhtLmluaXRfZGlmZmljdWx0eShsLkhhcmQpLDEsMTApLGUuc3RhYmlsaXR5PXRoaXMuYWxnb3JpdGhtLmluaXRfc3RhYmlsaXR5KGwuSGFyZCksaS5kaWZmaWN1bHR5PWcodGhpcy5hbGdvcml0aG0uaW5pdF9kaWZmaWN1bHR5KGwuR29vZCksMSwxMCksaS5zdGFiaWxpdHk9dGhpcy5hbGdvcml0aG0uaW5pdF9zdGFiaWxpdHkobC5Hb29kKSxzLmRpZmZpY3VsdHk9Zyh0aGlzLmFsZ29yaXRobS5pbml0X2RpZmZpY3VsdHkobC5FYXN5KSwxLDEwKSxzLnN0YWJpbGl0eT10aGlzLmFsZ29yaXRobS5pbml0X3N0YWJpbGl0eShsLkVhc3kpfWxlYXJuaW5nU3RhdGUodCl7cmV0dXJuIHRoaXMucmV2aWV3U3RhdGUodCl9cmV2aWV3U3RhdGUodCl7Y29uc3QgZT10aGlzLm5leHQuZ2V0KHQpO2lmKGUpcmV0dXJuIGU7Y29uc3QgaT10aGlzLmVsYXBzZWRfZGF5cyx7ZGlmZmljdWx0eTpzLHN0YWJpbGl0eTpyfT10aGlzLmxhc3Qsbj10aGlzLmFsZ29yaXRobS5mb3JnZXR0aW5nX2N1cnZlKGksciksbz1kLmNhcmQodGhpcy5jdXJyZW50KSxoPWQuY2FyZCh0aGlzLmN1cnJlbnQpLGM9ZC5jYXJkKHRoaXMuY3VycmVudCksXz1kLmNhcmQodGhpcy5jdXJyZW50KTtyZXR1cm4gdGhpcy5uZXh0X2RzKG8saCxjLF8scyxyLG4pLHRoaXMubmV4dF9pbnRlcnZhbChvLGgsYyxfLGkpLHRoaXMubmV4dF9zdGF0ZShvLGgsYyxfKSxvLmxhcHNlcys9MSx0aGlzLnVwZGF0ZV9uZXh0KG8saCxjLF8pLHRoaXMubmV4dC5nZXQodCl9bmV4dF9kcyh0LGUsaSxzLHIsbixvKXt0LmRpZmZpY3VsdHk9dGhpcy5hbGdvcml0aG0ubmV4dF9kaWZmaWN1bHR5KHIsbC5BZ2Fpbik7Y29uc3QgaD10aGlzLmFsZ29yaXRobS5uZXh0X2ZvcmdldF9zdGFiaWxpdHkocixuLG8pO3Quc3RhYmlsaXR5PWcobixwLGgpLGUuZGlmZmljdWx0eT10aGlzLmFsZ29yaXRobS5uZXh0X2RpZmZpY3VsdHkocixsLkhhcmQpLGUuc3RhYmlsaXR5PXRoaXMuYWxnb3JpdGhtLm5leHRfcmVjYWxsX3N0YWJpbGl0eShyLG4sbyxsLkhhcmQpLGkuZGlmZmljdWx0eT10aGlzLmFsZ29yaXRobS5uZXh0X2RpZmZpY3VsdHkocixsLkdvb2QpLGkuc3RhYmlsaXR5PXRoaXMuYWxnb3JpdGhtLm5leHRfcmVjYWxsX3N0YWJpbGl0eShyLG4sbyxsLkdvb2QpLHMuZGlmZmljdWx0eT10aGlzLmFsZ29yaXRobS5uZXh0X2RpZmZpY3VsdHkocixsLkVhc3kpLHMuc3RhYmlsaXR5PXRoaXMuYWxnb3JpdGhtLm5leHRfcmVjYWxsX3N0YWJpbGl0eShyLG4sbyxsLkVhc3kpfW5leHRfaW50ZXJ2YWwodCxlLGkscyxyKXtsZXQgbixvLGgsYztuPXRoaXMuYWxnb3JpdGhtLm5leHRfaW50ZXJ2YWwodC5zdGFiaWxpdHksciksbz10aGlzLmFsZ29yaXRobS5uZXh0X2ludGVydmFsKGUuc3RhYmlsaXR5LHIpLGg9dGhpcy5hbGdvcml0aG0ubmV4dF9pbnRlcnZhbChpLnN0YWJpbGl0eSxyKSxjPXRoaXMuYWxnb3JpdGhtLm5leHRfaW50ZXJ2YWwocy5zdGFiaWxpdHksciksbj1NYXRoLm1pbihuLG8pLG89TWF0aC5tYXgobyxuKzEpLGg9TWF0aC5tYXgoaCxvKzEpLGM9TWF0aC5tYXgoYyxoKzEpLHQuc2NoZWR1bGVkX2RheXM9bix0LmR1ZT1tKHRoaXMucmV2aWV3X3RpbWUsbiwhMCksZS5zY2hlZHVsZWRfZGF5cz1vLGUuZHVlPW0odGhpcy5yZXZpZXdfdGltZSxvLCEwKSxpLnNjaGVkdWxlZF9kYXlzPWgsaS5kdWU9bSh0aGlzLnJldmlld190aW1lLGgsITApLHMuc2NoZWR1bGVkX2RheXM9YyxzLmR1ZT1tKHRoaXMucmV2aWV3X3RpbWUsYywhMCl9bmV4dF9zdGF0ZSh0LGUsaSxzKXt0LnN0YXRlPXUuUmV2aWV3LHQubGVhcm5pbmdfc3RlcHM9MCxlLnN0YXRlPXUuUmV2aWV3LGUubGVhcm5pbmdfc3RlcHM9MCxpLnN0YXRlPXUuUmV2aWV3LGkubGVhcm5pbmdfc3RlcHM9MCxzLnN0YXRlPXUuUmV2aWV3LHMubGVhcm5pbmdfc3RlcHM9MH11cGRhdGVfbmV4dCh0LGUsaSxzKXtjb25zdCByPXtjYXJkOnQsbG9nOnRoaXMuYnVpbGRMb2cobC5BZ2Fpbil9LG49e2NhcmQ6ZSxsb2c6c3VwZXIuYnVpbGRMb2cobC5IYXJkKX0sbz17Y2FyZDppLGxvZzpzdXBlci5idWlsZExvZyhsLkdvb2QpfSxoPXtjYXJkOnMsbG9nOnN1cGVyLmJ1aWxkTG9nKGwuRWFzeSl9O3RoaXMubmV4dC5zZXQobC5BZ2FpbixyKSx0aGlzLm5leHQuc2V0KGwuSGFyZCxuKSx0aGlzLm5leHQuc2V0KGwuR29vZCxvKSx0aGlzLm5leHQuc2V0KGwuRWFzeSxoKX19Y2xhc3MgZ3R7ZnNycztjb25zdHJ1Y3Rvcih0KXt0aGlzLmZzcnM9dH1yZXBsYXkodCxlLGkpe3JldHVybiB0aGlzLmZzcnMubmV4dCh0LGUsaSl9aGFuZGxlTWFudWFsUmF0aW5nKHQsZSxpLHMscixuLG8pe2lmKHR5cGVvZiBlPlwidVwiKXRocm93IG5ldyBFcnJvcihcInJlc2NoZWR1bGU6IHN0YXRlIGlzIHJlcXVpcmVkIGZvciBtYW51YWwgcmF0aW5nXCIpO2xldCBoLGM7aWYoZT09PXUuTmV3KWg9e3JhdGluZzpsLk1hbnVhbCxzdGF0ZTplLGR1ZTpvPz9pLHN0YWJpbGl0eTp0LnN0YWJpbGl0eSxkaWZmaWN1bHR5OnQuZGlmZmljdWx0eSxlbGFwc2VkX2RheXM6cyxsYXN0X2VsYXBzZWRfZGF5czp0LmVsYXBzZWRfZGF5cyxzY2hlZHVsZWRfZGF5czp0LnNjaGVkdWxlZF9kYXlzLGxlYXJuaW5nX3N0ZXBzOnQubGVhcm5pbmdfc3RlcHMscmV2aWV3Oml9LGM9RihpKSxjLmxhc3RfcmV2aWV3PWk7ZWxzZXtpZih0eXBlb2Ygbz5cInVcIil0aHJvdyBuZXcgRXJyb3IoXCJyZXNjaGVkdWxlOiBkdWUgaXMgcmVxdWlyZWQgZm9yIG1hbnVhbCByYXRpbmdcIik7Y29uc3QgXz12KG8saSxcImRheXNcIik7aD17cmF0aW5nOmwuTWFudWFsLHN0YXRlOnQuc3RhdGUsZHVlOnQubGFzdF9yZXZpZXd8fHQuZHVlLHN0YWJpbGl0eTp0LnN0YWJpbGl0eSxkaWZmaWN1bHR5OnQuZGlmZmljdWx0eSxlbGFwc2VkX2RheXM6cyxsYXN0X2VsYXBzZWRfZGF5czp0LmVsYXBzZWRfZGF5cyxzY2hlZHVsZWRfZGF5czp0LnNjaGVkdWxlZF9kYXlzLGxlYXJuaW5nX3N0ZXBzOnQubGVhcm5pbmdfc3RlcHMscmV2aWV3Oml9LGM9ey4uLnQsc3RhdGU6ZSxkdWU6byxsYXN0X3JldmlldzppLHN0YWJpbGl0eTpyfHx0LnN0YWJpbGl0eSxkaWZmaWN1bHR5Om58fHQuZGlmZmljdWx0eSxlbGFwc2VkX2RheXM6cyxzY2hlZHVsZWRfZGF5czpfLHJlcHM6dC5yZXBzKzF9fXJldHVybntjYXJkOmMsbG9nOmh9fXJlc2NoZWR1bGUodCxlKXtjb25zdCBpPVtdO2xldCBzPUYodC5kdWUpO2Zvcihjb25zdCByIG9mIGUpe2xldCBuO2lmKHIucmV2aWV3PWQudGltZShyLnJldmlldyksci5yYXRpbmc9PT1sLk1hbnVhbCl7bGV0IG89MDtzLnN0YXRlIT09dS5OZXcmJnMubGFzdF9yZXZpZXcmJihvPXYoci5yZXZpZXcscy5sYXN0X3JldmlldyxcImRheXNcIikpLG49dGhpcy5oYW5kbGVNYW51YWxSYXRpbmcocyxyLnN0YXRlLHIucmV2aWV3LG8sci5zdGFiaWxpdHksci5kaWZmaWN1bHR5LHIuZHVlP2QudGltZShyLmR1ZSk6dm9pZCAwKX1lbHNlIG49dGhpcy5yZXBsYXkocyxyLnJldmlldyxyLnJhdGluZyk7aS5wdXNoKG4pLHM9bi5jYXJkfXJldHVybiBpfWNhbGN1bGF0ZU1hbnVhbFJlY29yZCh0LGUsaSxzKXtpZighaSlyZXR1cm4gbnVsbDtjb25zdHtjYXJkOnIsbG9nOm59PWksbz1kLmNhcmQodCk7cmV0dXJuIG8uZHVlLmdldFRpbWUoKT09PXIuZHVlLmdldFRpbWUoKT9udWxsOihvLnNjaGVkdWxlZF9kYXlzPXYoci5kdWUsby5kdWUsXCJkYXlzXCIpLHRoaXMuaGFuZGxlTWFudWFsUmF0aW5nKG8sci5zdGF0ZSxkLnRpbWUoZSksbi5lbGFwc2VkX2RheXMscz9yLnN0YWJpbGl0eTp2b2lkIDAscz9yLmRpZmZpY3VsdHk6dm9pZCAwLHIuZHVlKSl9fWNsYXNzIGl0IGV4dGVuZHMgSntzdHJhdGVneUhhbmRsZXI9bmV3IE1hcDtTY2hlZHVsZXI7Y29uc3RydWN0b3IodCl7c3VwZXIodCk7Y29uc3R7ZW5hYmxlX3Nob3J0X3Rlcm06ZX09dGhpcy5wYXJhbWV0ZXJzO3RoaXMuU2NoZWR1bGVyPWU/dHQ6ZXR9cGFyYW1zX2hhbmRsZXJfcHJveHkoKXtjb25zdCB0PXRoaXM7cmV0dXJue3NldDpmdW5jdGlvbihlLGkscyl7cmV0dXJuIGk9PT1cInJlcXVlc3RfcmV0ZW50aW9uXCImJk51bWJlci5pc0Zpbml0ZShzKT90LmludGVydmFsTW9kaWZpZXI9dC5jYWxjdWxhdGVfaW50ZXJ2YWxfbW9kaWZpZXIoTnVtYmVyKHMpKTppPT09XCJlbmFibGVfc2hvcnRfdGVybVwiP3QuU2NoZWR1bGVyPXM9PT0hMD90dDpldDppPT09XCJ3XCImJihzPUUoUihzKSxlLnJlbGVhcm5pbmdfc3RlcHMubGVuZ3RoKSx0LmZvcmdldHRpbmdfY3VydmU9QS5iaW5kKHRoaXMscyksdC5pbnRlcnZhbE1vZGlmaWVyPXQuY2FsY3VsYXRlX2ludGVydmFsX21vZGlmaWVyKE51bWJlcihlLnJlcXVlc3RfcmV0ZW50aW9uKSkpLFJlZmxlY3Quc2V0KGUsaSxzKSwhMH19fXVzZVN0cmF0ZWd5KHQsZSl7cmV0dXJuIHRoaXMuc3RyYXRlZ3lIYW5kbGVyLnNldCh0LGUpLHRoaXN9Y2xlYXJTdHJhdGVneSh0KXtyZXR1cm4gdD90aGlzLnN0cmF0ZWd5SGFuZGxlci5kZWxldGUodCk6dGhpcy5zdHJhdGVneUhhbmRsZXIuY2xlYXIoKSx0aGlzfWdldFNjaGVkdWxlcih0LGUpe2NvbnN0IGk9dGhpcy5zdHJhdGVneUhhbmRsZXIuZ2V0KFMuU0NIRURVTEVSKXx8dGhpcy5TY2hlZHVsZXI7cmV0dXJuIG5ldyBpKHQsZSx0aGlzLHRoaXMuc3RyYXRlZ3lIYW5kbGVyKX1yZXBlYXQodCxlLGkpe2NvbnN0IHM9dGhpcy5nZXRTY2hlZHVsZXIodCxlKS5wcmV2aWV3KCk7cmV0dXJuIGkmJnR5cGVvZiBpPT1cImZ1bmN0aW9uXCI/aShzKTpzfW5leHQodCxlLGkscyl7Y29uc3Qgcj10aGlzLmdldFNjaGVkdWxlcih0LGUpLG49ZC5yYXRpbmcoaSk7aWYobj09PWwuTWFudWFsKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZXZpZXcgYSBtYW51YWwgcmF0aW5nXCIpO2NvbnN0IG89ci5yZXZpZXcobik7cmV0dXJuIHMmJnR5cGVvZiBzPT1cImZ1bmN0aW9uXCI/cyhvKTpvfWdldF9yZXRyaWV2YWJpbGl0eSh0LGUsaT0hMCl7Y29uc3Qgcz1kLmNhcmQodCk7ZT1lP2QudGltZShlKTpuZXcgRGF0ZTtjb25zdCByPXMuc3RhdGUhPT11Lk5ldz9NYXRoLm1heCh2KGUscy5sYXN0X3JldmlldyxcImRheXNcIiksMCk6MCxuPXMuc3RhdGUhPT11Lk5ldz90aGlzLmZvcmdldHRpbmdfY3VydmUociwrcy5zdGFiaWxpdHkudG9GaXhlZCg4KSk6MDtyZXR1cm4gaT9gJHsobioxMDApLnRvRml4ZWQoMil9JWA6bn1yb2xsYmFjayh0LGUsaSl7Y29uc3Qgcz1kLmNhcmQodCkscj1kLnJldmlld19sb2coZSk7aWYoci5yYXRpbmc9PT1sLk1hbnVhbCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgcm9sbGJhY2sgYSBtYW51YWwgcmF0aW5nXCIpO2xldCBuLG8saDtzd2l0Y2goci5zdGF0ZSl7Y2FzZSB1Lk5ldzpuPXIuZHVlLG89dm9pZCAwLGg9MDticmVhaztjYXNlIHUuTGVhcm5pbmc6Y2FzZSB1LlJlbGVhcm5pbmc6Y2FzZSB1LlJldmlldzpuPXIucmV2aWV3LG89ci5kdWUsaD1zLmxhcHNlcy0oci5yYXRpbmc9PT1sLkFnYWluJiZyLnN0YXRlPT09dS5SZXZpZXc/MTowKTticmVha31jb25zdCBjPXsuLi5zLGR1ZTpuLHN0YWJpbGl0eTpyLnN0YWJpbGl0eSxkaWZmaWN1bHR5OnIuZGlmZmljdWx0eSxlbGFwc2VkX2RheXM6ci5sYXN0X2VsYXBzZWRfZGF5cyxzY2hlZHVsZWRfZGF5czpyLnNjaGVkdWxlZF9kYXlzLHJlcHM6TWF0aC5tYXgoMCxzLnJlcHMtMSksbGFwc2VzOk1hdGgubWF4KDAsaCksbGVhcm5pbmdfc3RlcHM6ci5sZWFybmluZ19zdGVwcyxzdGF0ZTpyLnN0YXRlLGxhc3RfcmV2aWV3Om99O3JldHVybiBpJiZ0eXBlb2YgaT09XCJmdW5jdGlvblwiP2koYyk6Y31mb3JnZXQodCxlLGk9ITEscyl7Y29uc3Qgcj1kLmNhcmQodCk7ZT1kLnRpbWUoZSk7Y29uc3Qgbj1yLnN0YXRlPT09dS5OZXc/MDp2KGUsci5kdWUsXCJkYXlzXCIpLG89e3JhdGluZzpsLk1hbnVhbCxzdGF0ZTpyLnN0YXRlLGR1ZTpyLmR1ZSxzdGFiaWxpdHk6ci5zdGFiaWxpdHksZGlmZmljdWx0eTpyLmRpZmZpY3VsdHksZWxhcHNlZF9kYXlzOjAsbGFzdF9lbGFwc2VkX2RheXM6ci5lbGFwc2VkX2RheXMsc2NoZWR1bGVkX2RheXM6bixsZWFybmluZ19zdGVwczpyLmxlYXJuaW5nX3N0ZXBzLHJldmlldzplfSxoPXtjYXJkOnsuLi5yLGR1ZTplLHN0YWJpbGl0eTowLGRpZmZpY3VsdHk6MCxlbGFwc2VkX2RheXM6MCxzY2hlZHVsZWRfZGF5czowLHJlcHM6aT8wOnIucmVwcyxsYXBzZXM6aT8wOnIubGFwc2VzLGxlYXJuaW5nX3N0ZXBzOjAsc3RhdGU6dS5OZXcsbGFzdF9yZXZpZXc6ci5sYXN0X3Jldmlld30sbG9nOm99O3JldHVybiBzJiZ0eXBlb2Ygcz09XCJmdW5jdGlvblwiP3MoaCk6aH1yZXNjaGVkdWxlKHQsZT1bXSxpPXt9KXtjb25zdHtyZWNvcmRMb2dIYW5kbGVyOnMscmV2aWV3c09yZGVyQnk6cixza2lwTWFudWFsOm49ITAsbm93Om89bmV3IERhdGUsdXBkYXRlX21lbW9yeV9zdGF0ZTpoPSExfT1pO3ImJnR5cGVvZiByPT1cImZ1bmN0aW9uXCImJmUuc29ydChyKSxuJiYoZT1lLmZpbHRlcih4PT54LnJhdGluZyE9PWwuTWFudWFsKSk7Y29uc3QgYz1uZXcgZ3QodGhpcyksXz1jLnJlc2NoZWR1bGUoaS5maXJzdF9jYXJkfHxGKCksZSkseT1fLmxlbmd0aCx3PWQuY2FyZCh0KSxmPWMuY2FsY3VsYXRlTWFudWFsUmVjb3JkKHcsbyx5P19beS0xXTp2b2lkIDAsaCk7cmV0dXJuIHMmJnR5cGVvZiBzPT1cImZ1bmN0aW9uXCI/e2NvbGxlY3Rpb25zOl8ubWFwKHMpLHJlc2NoZWR1bGVfaXRlbTpmP3MoZik6bnVsbH06e2NvbGxlY3Rpb25zOl8scmVzY2hlZHVsZV9pdGVtOmZ9fX1jb25zdCB5dD1hPT5uZXcgaXQoYXx8e30pO2V4cG9ydHtHIGFzIEFic3RyYWN0U2NoZWR1bGVyLFogYXMgQmFzaWNMZWFybmluZ1N0ZXBzU3RyYXRlZ3ksViBhcyBDTEFNUF9QQVJBTUVURVJTLFEgYXMgQ29udmVydFN0ZXBVbml0VG9NaW51dGVzLEsgYXMgRGVmYXVsdEluaXRTZWVkU3RyYXRlZ3ksaXQgYXMgRlNSUywkIGFzIEZTUlM1X0RFRkFVTFRfREVDQVksQiBhcyBGU1JTNl9ERUZBVUxUX0RFQ0FZLEogYXMgRlNSU0FsZ29yaXRobSxvdCBhcyBGU1JTVmVyc2lvbixmdCBhcyBHZW5TZWVkU3RyYXRlZ3lXaXRoQ2FyZElkLFQgYXMgR3JhZGVzLE0gYXMgSU5JVF9TX01BWCxsIGFzIFJhdGluZyxkdCBhcyBTX01BWCxwIGFzIFNfTUlOLHUgYXMgU3RhdGUsUyBhcyBTdHJhdGVneU1vZGUsZCBhcyBUeXBlQ29udmVydCxYIGFzIFcxN19XMThfQ2VpbGluZyxodCBhcyBjaGVja1BhcmFtZXRlcnMsZyBhcyBjbGFtcCxFIGFzIGNsaXBQYXJhbWV0ZXJzLEggYXMgY29tcHV0ZURlY2F5RmFjdG9yLEYgYXMgY3JlYXRlRW1wdHlDYXJkLGsgYXMgZGF0ZURpZmZJbkRheXMsdiBhcyBkYXRlX2RpZmYsbSBhcyBkYXRlX3NjaGVkdWxlcixqIGFzIGRlZmF1bHRfZW5hYmxlX2Z1enosTyBhcyBkZWZhdWx0X2VuYWJsZV9zaG9ydF90ZXJtLFkgYXMgZGVmYXVsdF9sZWFybmluZ19zdGVwcyxQIGFzIGRlZmF1bHRfbWF4aW11bV9pbnRlcnZhbCxXIGFzIGRlZmF1bHRfcmVsZWFybmluZ19zdGVwcyxxIGFzIGRlZmF1bHRfcmVxdWVzdF9yZXRlbnRpb24sRCBhcyBkZWZhdWx0X3csc3QgYXMgZml4RGF0ZSxhdCBhcyBmaXhSYXRpbmcscnQgYXMgZml4U3RhdGUsQSBhcyBmb3JnZXR0aW5nX2N1cnZlLEMgYXMgZm9ybWF0RGF0ZSx5dCBhcyBmc3JzLEkgYXMgZ2VuZXJhdG9yUGFyYW1ldGVycyxVIGFzIGdldF9mdXp6X3JhbmdlLFIgYXMgbWlncmF0ZVBhcmFtZXRlcnMseiBhcyBzaG93X2RpZmZfbWVzc2FnZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iLCJpbXBvcnQgeyBmc3JzLCBnZW5lcmF0b3JQYXJhbWV0ZXJzLCBjcmVhdGVFbXB0eUNhcmQsIEdyYWRlLCBSYXRpbmcsIFN0YXRlIH0gZnJvbSAndHMtZnNycyc7XG5cbi8vIEZTUlPphY3nva5cbmNvbnN0IGYgPSBmc3JzKGdlbmVyYXRvclBhcmFtZXRlcnMoKSk7XG5cbi8vIOWwhuW6lOeUqOeahGdyYWRlICgwLTUpIOaYoOWwhOWIsEZTUlPnmoRSYXRpbmdcbmNvbnN0IG1hcEdyYWRlVG9SYXRpbmcgPSAoZ3JhZGU6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIHN3aXRjaCAoZ3JhZGUpIHtcbiAgICBjYXNlIDA6IHJldHVybiAxOyAvLyBNYW51YWwvQWdhaW4gLSDlrozlhajlv5jorrBcbiAgICBjYXNlIDE6IHJldHVybiAxOyAvLyBBZ2FpbiAtIOmUmeivr1xuICAgIGNhc2UgMjogcmV0dXJuIDI7IC8vIEhhcmQgLSDlm7Dpmr5cbiAgICBjYXNlIDM6IHJldHVybiAzOyAvLyBHb29kIC0g5LiA6IisXG4gICAgY2FzZSA0OiByZXR1cm4gMzsgLy8gR29vZCAtIOiJr+WlvVxuICAgIGNhc2UgNTogcmV0dXJuIDQ7IC8vIEVhc3kgLSDnroDljZVcbiAgICBkZWZhdWx0OiByZXR1cm4gMzsgLy8gR29vZFxuICB9XG59O1xuXG4vLyBGU1JT6YCC6YWN5Zmo5o6l5Y+j77yM5qih5oufU00y55qE6L+U5Zue5qC85byPXG5leHBvcnQgaW50ZXJmYWNlIEZTUlNSZXN1bHQge1xuICBpbnRlcnZhbDogbnVtYmVyO1xuICByZXBldGl0aW9uOiBudW1iZXI7XG4gIGVmYWN0b3I6IG51bWJlcjtcbiAgZnNyc1N0YXRlPzogYW55OyAvLyDlrZjlgqhGU1JT5YaF6YOo54q25oCBXG59XG5cbi8vIEZTUlPnrpfms5Xlrp7njrDvvIzov5Tlm57kuI5TTTLlhbzlrrnnmoTmjqXlj6NcbmV4cG9ydCBjb25zdCBmc3JzQWxnb3JpdGhtID0gKGl0ZW06IGFueSwgZ3JhZGU6IG51bWJlcik6IEZTUlNSZXN1bHQgPT4ge1xuICB0cnkge1xuICAgIC8vIOS7jml0ZW3kuK3mj5Dlj5ZGU1JT54q25oCB77yM5aaC5p6c5rKh5pyJ5YiZ5Yib5bu65paw5Y2h54mHXG4gICAgbGV0IGNhcmQ7XG4gICAgaWYgKGl0ZW0uZnNyc1N0YXRlKSB7XG4gICAgICAvLyDmgaLlpI3lt7LmnInnmoRGU1JT5Y2h54mH54q25oCBXG4gICAgICAvLyDlpoLmnpzmmK/lrZfnrKbkuLLvvIzlsJ3or5Xop6PmnpDkuLpKU09O5a+56LGhXG4gICAgICBpZiAodHlwZW9mIGl0ZW0uZnNyc1N0YXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNhcmQgPSBKU09OLnBhcnNlKGl0ZW0uZnNyc1N0YXRlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignRlNSU+eKtuaAgeino+aekOWksei0pe+8jOWIm+W7uuaWsOWNoeeJhzonLCBlKTtcbiAgICAgICAgICBjYXJkID0gY3JlYXRlRW1wdHlDYXJkKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcmQgPSBpdGVtLmZzcnNTdGF0ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8g5Yib5bu65paw55qERlNSU+WNoeeJh1xuICAgICAgY2FyZCA9IGNyZWF0ZUVtcHR5Q2FyZCgpO1xuICAgIH1cblxuICAgIC8vIOi9rOaNouivhOWIhlxuICAgIGNvbnN0IHJhdGluZyA9IG1hcEdyYWRlVG9SYXRpbmcoZ3JhZGUpO1xuICAgIFxuICAgIC8vIOaJp+ihjEZTUlPosIPluqZcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHNjaGVkdWxpbmdDYXJkcyA9IGYucmVwZWF0KGNhcmQsIG5vdyk7XG4gICAgY29uc3QgbmV4dENhcmQgPSBzY2hlZHVsaW5nQ2FyZHNbcmF0aW5nXTtcbiAgICBcbiAgICBpZiAoIW5leHRDYXJkIHx8ICFuZXh0Q2FyZC5jYXJkIHx8ICFuZXh0Q2FyZC5jYXJkLmR1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGU1JT6LCD5bqm5aSx6LSlOiDml6Dms5Xojrflj5bmnInmlYjnmoRuZXh0Q2FyZC5jYXJkYCk7XG4gICAgfVxuXG4gICAgLy8g5o+Q5Y+W5a6e6ZmF55qE5Y2h54mH5pWw5o2uXG4gICAgY29uc3QgYWN0dWFsQ2FyZCA9IG5leHRDYXJkLmNhcmQ7XG4gICAgXG4gICAgLy8g6K6h566X5LiL5qyh5aSN5Lmg6Ze06ZqU77yI5aSp5pWw77yJXG4gICAgY29uc3QgaW50ZXJ2YWxNcyA9IGFjdHVhbENhcmQuZHVlLmdldFRpbWUoKSAtIG5vdy5nZXRUaW1lKCk7XG4gICAgY29uc3QgaW50ZXJ2YWxEYXlzID0gTWF0aC5tYXgoMCwgTWF0aC5yb3VuZChpbnRlcnZhbE1zIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKSk7XG5cbiAgICBjb25zb2xlLmxvZygn4pyFIEZTUlPnrpfms5XmiJDlip86Jywge1xuICAgICAgaW50ZXJ2YWxEYXlzLFxuICAgICAgbmV4dER1ZTogYWN0dWFsQ2FyZC5kdWUudG9JU09TdHJpbmcoKVxuICAgIH0pO1xuXG4gICAgLy8g6L2s5o2i5Li6U00y5YW85a6555qE5qC85byPXG4gICAgcmV0dXJuIHtcbiAgICAgIGludGVydmFsOiBpbnRlcnZhbERheXMsXG4gICAgICByZXBldGl0aW9uOiBhY3R1YWxDYXJkLnJlcHMsXG4gICAgICBlZmFjdG9yOiBhY3R1YWxDYXJkLnN0YWJpbGl0eSwgLy8g5L2/55Soc3RhYmlsaXR55L2c5Li6ZWZhY3RvcueahOi/keS8vFxuICAgICAgZnNyc1N0YXRlOiBhY3R1YWxDYXJkLCAvLyDkv53lrZhGU1JT5Y2h54mH54q25oCBXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGU1JT566X5rOV5omn6KGM6ZSZ6K+vOicsIGVycm9yKTtcbiAgICAvLyDpmY3nuqfliLDln7rmnKzosIPluqZcbiAgICByZXR1cm4ge1xuICAgICAgaW50ZXJ2YWw6IGdyYWRlID49IDMgPyBNYXRoLm1heCgxLCAoaXRlbS5pbnRlcnZhbCB8fCAxKSAqIDIpIDogMSxcbiAgICAgIHJlcGV0aXRpb246IChpdGVtLnJlcGV0aXRpb24gfHwgMCkgKyAxLFxuICAgICAgZWZhY3RvcjogaXRlbS5lZmFjdG9yIHx8IDIuNSxcbiAgICB9O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmc3JzQWxnb3JpdGhtOyAiLCJpbXBvcnQgeyBzYXZlUHJhY3RpY2VEYXRhIH0gZnJvbSAnfi9xdWVyaWVzJztcbmltcG9ydCAqIGFzIGRhdGVVdGlscyBmcm9tICd+L3V0aWxzL2RhdGUnO1xuaW1wb3J0IHsgSW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSwgUmV2aWV3TW9kZXMsIFNlc3Npb24gfSBmcm9tICd+L21vZGVscy9zZXNzaW9uJztcbmltcG9ydCB7IGZzcnNBbGdvcml0aG0gfSBmcm9tICd+L2FsZ29yaXRobXMvZnNycyc7XG5cbmV4cG9ydCBjb25zdCBzdXBlcm1lbW8gPSAoaXRlbSwgZ3JhZGUpID0+IHtcbiAgbGV0IG5leHRJbnRlcnZhbDtcbiAgbGV0IG5leHRSZXBldGl0aW9uO1xuICBsZXQgbmV4dEVmYWN0b3I7XG5cbiAgaWYgKGdyYWRlID09PSAwKSB7XG4gICAgLy8gSWYgd2UgY29tcGxldGVseSBmb3Jnb3Qgd2Ugc2hvdWxkIHJldmlldyBhZ2FpbiBBU0FQLlxuICAgIG5leHRJbnRlcnZhbCA9IDA7XG4gICAgbmV4dFJlcGV0aXRpb24gPSAwO1xuICAgIG5leHRFZmFjdG9yID0gaXRlbS5lZmFjdG9yOyAvLyDinIUg5L+u5aSNQnVnOiDlv4Xpobvorr7nva5FRlxuICB9IGVsc2UgaWYgKGdyYWRlIDwgMykge1xuICAgIG5leHRJbnRlcnZhbCA9IDE7XG4gICAgbmV4dFJlcGV0aXRpb24gPSAwO1xuICAgIG5leHRFZmFjdG9yID0gaXRlbS5lZmFjdG9yOyAvLyDkv53mjIFFRuS4jeWPmO+8jOespuWQiOWumOaWueinhOiMg1xuICB9IGVsc2Uge1xuICAgIC8vIOKchSDmiJDlip/ml7bmraPluLjorqHnrpfpl7TpmpRcbiAgICBpZiAoaXRlbS5yZXBldGl0aW9uID09PSAwKSB7XG4gICAgICBuZXh0SW50ZXJ2YWwgPSAxO1xuICAgICAgbmV4dFJlcGV0aXRpb24gPSAxO1xuICAgIH0gZWxzZSBpZiAoaXRlbS5yZXBldGl0aW9uID09PSAxKSB7XG4gICAgICBuZXh0SW50ZXJ2YWwgPSA2O1xuICAgICAgbmV4dFJlcGV0aXRpb24gPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyDinIUg5L+u5q2j5YWs5byP77ya5Lil5qC85oyJ54Wn5a6Y5pa56KeE6IyDIEkobikgPSBJKG4tMSkgKiBFRlxuICAgICAgLy8g56e76Zmk6ZSZ6K+v55qEICogKGdyYWRlIC8gNSkg5Zug5a2QXG4gICAgICBuZXh0SW50ZXJ2YWwgPSBNYXRoLnJvdW5kKGl0ZW0uaW50ZXJ2YWwgKiBpdGVtLmVmYWN0b3IpO1xuICAgICAgbmV4dFJlcGV0aXRpb24gPSBpdGVtLnJlcGV0aXRpb24gKyAxO1xuICAgIH1cbiAgICBcbiAgICAvLyDinIUg5Y+q5pyJ5oiQ5Yqf5pe25omN5pu05pawRUbvvIznrKblkIjlrpjmlrnpgLvovpFcbiAgICBuZXh0RWZhY3RvciA9IGl0ZW0uZWZhY3RvciArICgwLjEgLSAoNSAtIGdyYWRlKSAqICgwLjA4ICsgKDUgLSBncmFkZSkgKiAwLjAyKSk7XG4gICAgaWYgKG5leHRFZmFjdG9yIDwgMS4zKSBuZXh0RWZhY3RvciA9IDEuMztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaW50ZXJ2YWw6IG5leHRJbnRlcnZhbCxcbiAgICByZXBldGl0aW9uOiBuZXh0UmVwZXRpdGlvbixcbiAgICBlZmFjdG9yOiBuZXh0RWZhY3RvcixcbiAgfTtcbn07XG5cbnR5cGUgUHJhY3RpY2VEYXRhUmVzdWx0ID0gU2Vzc2lvbiAmIHtcbiAgbmV4dER1ZURhdGVGcm9tTm93Pzogc3RyaW5nO1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVByYWN0aWNlRGF0YSA9ICh7XG4gIGRhdGVDcmVhdGVkLFxuICByZXZpZXdNb2RlLFxuICBzY2hlZHVsaW5nQWxnb3JpdGhtID0gJ1NNMicsXG4gIC4uLnByb3BzXG59OiBTZXNzaW9uICYgeyBzY2hlZHVsaW5nQWxnb3JpdGhtPzogJ1NNMicgfCAnRlNSUycgfSk6IFByYWN0aWNlRGF0YVJlc3VsdCA9PiB7XG4gIGNvbnN0IHNoYXJlZCA9IHtcbiAgICByZXZpZXdNb2RlLFxuICB9O1xuXG4gIC8vIOWNj+WQjOaOkuWQjeezu+e7n++8muS4jeWGjeS/neWtmHByaW9yaXR55a2X5q615Yiwc2Vzc2lvbuaVsOaNruS4rVxuXG4gIGlmIChyZXZpZXdNb2RlID09PSBSZXZpZXdNb2Rlcy5GaXhlZEludGVydmFsKSB7XG4gICAgY29uc3QgeyBpbnRlcnZhbE11bHRpcGxpZXIsIGludGVydmFsTXVsdGlwbGllclR5cGUgfSA9IHByb3BzO1xuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgbmV4dER1ZURhdGUgPSBudWxsO1xuICAgIGlmIChpbnRlcnZhbE11bHRpcGxpZXJUeXBlID09PSBJbnRlcnZhbE11bHRpcGxpZXJUeXBlLkRheXMpIHtcbiAgICAgIG5leHREdWVEYXRlID0gZGF0ZVV0aWxzLmFkZERheXModG9kYXksIGludGVydmFsTXVsdGlwbGllcik7XG4gICAgfSBlbHNlIGlmIChpbnRlcnZhbE11bHRpcGxpZXJUeXBlID09PSBJbnRlcnZhbE11bHRpcGxpZXJUeXBlLldlZWtzKSB7XG4gICAgICBuZXh0RHVlRGF0ZSA9IGRhdGVVdGlscy5hZGREYXlzKHRvZGF5LCBpbnRlcnZhbE11bHRpcGxpZXIgKiA3KTtcbiAgICB9IGVsc2UgaWYgKGludGVydmFsTXVsdGlwbGllclR5cGUgPT09IEludGVydmFsTXVsdGlwbGllclR5cGUuTW9udGhzKSB7XG4gICAgICBuZXh0RHVlRGF0ZSA9IGRhdGVVdGlscy5hZGREYXlzKHRvZGF5LCBpbnRlcnZhbE11bHRpcGxpZXIgKiAzMCk7XG4gICAgfSBlbHNlIGlmIChpbnRlcnZhbE11bHRpcGxpZXJUeXBlID09PSBJbnRlcnZhbE11bHRpcGxpZXJUeXBlLlllYXJzKSB7XG4gICAgICBuZXh0RHVlRGF0ZSA9IGRhdGVVdGlscy5hZGREYXlzKHRvZGF5LCBpbnRlcnZhbE11bHRpcGxpZXIgKiAzNjUpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi5zaGFyZWQsXG4gICAgICByZXZpZXdNb2RlOiBSZXZpZXdNb2Rlcy5GaXhlZEludGVydmFsLFxuICAgICAgaW50ZXJ2YWxNdWx0aXBsaWVyLFxuICAgICAgaW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSxcbiAgICAgIG5leHREdWVEYXRlLFxuICAgICAgbmV4dER1ZURhdGVGcm9tTm93OiBkYXRlVXRpbHMuY3VzdG9tRnJvbU5vdyhuZXh0RHVlRGF0ZSksXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB7IGdyYWRlLCBpbnRlcnZhbCwgcmVwZXRpdGlvbnMsIGVGYWN0b3IsIGZzcnNTdGF0ZSB9ID0gcHJvcHM7XG4gICAgXG4gICAgbGV0IGFsZ29yaXRobVJlc3VsdHM7XG4gICAgaWYgKHNjaGVkdWxpbmdBbGdvcml0aG0gPT09ICdGU1JTJykge1xuICAgICAgLy8g5L2/55SoRlNSU+eul+azlVxuICAgICAgY29uc29sZS5sb2coJ/Cfp6Ag5L2/55SoRlNSU+eul+azleiwg+W6picpO1xuICAgICAgY29uc3QgZnNyc0lucHV0ID0ge1xuICAgICAgICBpbnRlcnZhbCxcbiAgICAgICAgcmVwZXRpdGlvbjogcmVwZXRpdGlvbnMsXG4gICAgICAgIGVmYWN0b3I6IGVGYWN0b3IsXG4gICAgICAgIGZzcnNTdGF0ZSxcbiAgICAgIH07XG4gICAgICBhbGdvcml0aG1SZXN1bHRzID0gZnNyc0FsZ29yaXRobShmc3JzSW5wdXQsIGdyYWRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8g5L2/55So6buY6K6kU00y566X5rOVXG4gICAgICBjb25zb2xlLmxvZygn8J+noCDkvb/nlKhTTTLnrpfms5XosIPluqYnKTtcbiAgICAgIGNvbnN0IHN1cGVybWVtb0lucHV0ID0ge1xuICAgICAgICBpbnRlcnZhbCxcbiAgICAgICAgcmVwZXRpdGlvbjogcmVwZXRpdGlvbnMsXG4gICAgICAgIGVmYWN0b3I6IGVGYWN0b3IsXG4gICAgICB9O1xuICAgICAgYWxnb3JpdGhtUmVzdWx0cyA9IHN1cGVybWVtbyhzdXBlcm1lbW9JbnB1dCwgZ3JhZGUpO1xuICAgIH1cblxuICAgIGNvbnN0IG5leHREdWVEYXRlID0gZGF0ZVV0aWxzLmFkZERheXMoZGF0ZUNyZWF0ZWQsIGFsZ29yaXRobVJlc3VsdHMuaW50ZXJ2YWwpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnNoYXJlZCxcbiAgICAgIHJldmlld01vZGU6IFJldmlld01vZGVzLkRlZmF1bHRTcGFjZWRJbnRlcnZhbCxcbiAgICAgIGdyYWRlLFxuICAgICAgcmVwZXRpdGlvbnM6IGFsZ29yaXRobVJlc3VsdHMucmVwZXRpdGlvbixcbiAgICAgIGludGVydmFsOiBhbGdvcml0aG1SZXN1bHRzLmludGVydmFsLFxuICAgICAgZUZhY3RvcjogYWxnb3JpdGhtUmVzdWx0cy5lZmFjdG9yLFxuICAgICAgLy8g5L+d5a2YRlNSU+eKtuaAge+8iOWmguaenOS9v+eUqEZTUlPvvIlcbiAgICAgIC4uLihzY2hlZHVsaW5nQWxnb3JpdGhtID09PSAnRlNSUycgJiYgYWxnb3JpdGhtUmVzdWx0cy5mc3JzU3RhdGUgJiYge1xuICAgICAgICBmc3JzU3RhdGU6IGFsZ29yaXRobVJlc3VsdHMuZnNyc1N0YXRlLFxuICAgICAgfSksXG4gICAgICBkYXRlQ3JlYXRlZCxcbiAgICAgIG5leHREdWVEYXRlLFxuICAgICAgbmV4dER1ZURhdGVGcm9tTm93OiBkYXRlVXRpbHMuY3VzdG9tRnJvbU5vdyhuZXh0RHVlRGF0ZSksXG4gICAgfTtcbiAgfVxufTtcblxuZXhwb3J0IHR5cGUgUHJhY3RpY2VQcm9wcyA9IFNlc3Npb24gJiB7XG4gIHJlZlVpZDogc3RyaW5nO1xuICBkYXRhUGFnZVRpdGxlOiBzdHJpbmc7XG4gIGlzQ3JhbW1pbmc/OiBib29sZWFuO1xuICBpc0RyeVJ1bj86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgcHJhY3RpY2UgPSBhc3luYyAocHJhY3RpY2VQcm9wczogUHJhY3RpY2VQcm9wcyAmIHsgZnNyc0VuYWJsZWQ/OiBib29sZWFuIH0pID0+IHtcbiAgY29uc29sZS5sb2coJ/Cfj4PigI3imYLvuI8gUHJhY3RpY2UgY2FsbGVkIHdpdGg6JywgcHJhY3RpY2VQcm9wcyk7XG5cbiAgY29uc3Qge1xuICAgIHJlZlVpZCxcbiAgICBkYXRhUGFnZVRpdGxlLFxuICAgIGRhdGVDcmVhdGVkLFxuICAgIGlzQ3JhbW1pbmcsXG4gICAgaXNEcnlSdW4sXG4gICAgZ3JhZGUsXG4gICAgcmV2aWV3TW9kZSxcbiAgICBlRmFjdG9yLFxuICAgIGludGVydmFsLFxuICAgIHJlcGV0aXRpb25zLFxuICAgIGludGVydmFsTXVsdGlwbGllcixcbiAgICBpbnRlcnZhbE11bHRpcGxpZXJUeXBlLFxuICAgIGZzcnNFbmFibGVkID0gZmFsc2UsXG4gICAgZnNyc1N0YXRlLFxuICB9ID0gcHJhY3RpY2VQcm9wcztcblxuICBjb25zb2xlLmxvZygn8J+Pg+KAjeKZgu+4jyBQcmFjdGljZSBtb2RlIC0gZ3JhZGU6JywgZ3JhZGUsICdpc0NyYW1taW5nOicsIGlzQ3JhbW1pbmcpO1xuXG4gIC8vIEp1c3QgZGVzdHJ1Y3R1cmluZyBuZXh0RHVlRGF0ZUZyb21Ob3cgaGVyZSBiZWNhdXNlIEkgZG9uJ3Qgd2FudCB0byBzdG9yZSBpdFxuICBjb25zdCB7XG4gICAgbmV4dER1ZURhdGVGcm9tTm93OiBuZXh0RHVlRGF0ZUZyb21Ob3dFeHRyYWN0ZWQsXG4gICAgLi4ucHJhY3RpY2VSZXN1bHREYXRhXG4gIH0gPSBnZW5lcmF0ZVByYWN0aWNlRGF0YSh7XG4gICAgZGF0ZUNyZWF0ZWQsXG4gICAgcmV2aWV3TW9kZSxcbiAgICBncmFkZSxcbiAgICBlRmFjdG9yLFxuICAgIGludGVydmFsLFxuICAgIHJlcGV0aXRpb25zLFxuICAgIGludGVydmFsTXVsdGlwbGllcixcbiAgICBpbnRlcnZhbE11bHRpcGxpZXJUeXBlLFxuICAgIHNjaGVkdWxpbmdBbGdvcml0aG06IGZzcnNFbmFibGVkID8gJ0ZTUlMnIDogJ1NNMicsXG4gICAgZnNyc1N0YXRlLFxuICB9KTtcblxuICBpZiAoIWlzRHJ5UnVuICYmICFpc0NyYW1taW5nKSB7XG4gICAgY29uc29sZS5sb2coJ/Cfj4PigI3imYLvuI8gTm9ybWFsIG1vZGUgLSBzYXZpbmcgZnVsbCBwcmFjdGljZSBkYXRhLi4uJyk7XG4gICAgYXdhaXQgc2F2ZVByYWN0aWNlRGF0YSh7XG4gICAgICByZWZVaWQsXG4gICAgICBkYXRhUGFnZVRpdGxlLFxuICAgICAgZGF0ZUNyZWF0ZWQsXG4gICAgICAuLi5wcmFjdGljZVJlc3VsdERhdGEsXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNDcmFtbWluZykge1xuICAgIGNvbnNvbGUubG9nKCfwn4+D4oCN4pmC77iPIENyYW1taW5nIG1vZGUgLSDnuq/nu4PkuaDmqKHlvI/vvIzkuI3kv53lrZjku7vkvZXmlbDmja4nKTtcbiAgfSBlbHNlIGlmIChpc0RyeVJ1bikge1xuICAgIGNvbnNvbGUubG9nKCfwn4+D4oCN4pmC77iPIERyeSBydW4gbW9kZSAtIOa1i+ivleaooeW8j++8jOS4jeS/neWtmOaVsOaNricpO1xuICB9XG5cbiAgcmV0dXJuIHByYWN0aWNlUmVzdWx0RGF0YTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByYWN0aWNlO1xuIiwiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG5jb25zdCBCdXR0b25UYWdzID0gc3R5bGVkLnNwYW48eyBraW5kPzogJ2xpZ2h0JyB9PmBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHsoeyBraW5kIH0pID0+XG4gICAga2luZCA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDEzOCwgMTU1LCAxNjgsIDAuMiknIDogJ3JnYmEoMTM4LCAxNTUsIDE2OCwgMC4xKSd9O1xuICBjb2xvcjogI2FiYmJjOTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgZm9udC1zaXplOiA5cHg7XG4gIHBhZGRpbmc6IDFweCAycHg7XG4gIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB0b3A6IC0wLjVweDtcbmA7XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvblRhZ3M7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBCbHVlcHJpbnQgZnJvbSAnQGJsdWVwcmludGpzL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0ICogYXMgYXN5bmNVdGlscyBmcm9tICd+L3V0aWxzL2FzeW5jJztcbmltcG9ydCB7IGdlbmVyYXRlUHJhY3RpY2VEYXRhIH0gZnJvbSAnfi9wcmFjdGljZSc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICd+L2NvbXBvbmVudHMvVG9vbHRpcCc7XG5pbXBvcnQgQnV0dG9uVGFncyBmcm9tICd+L2NvbXBvbmVudHMvQnV0dG9uVGFncyc7XG5pbXBvcnQgeyBJbnRlcnZhbE11bHRpcGxpZXJUeXBlLCBSZXZpZXdNb2RlcyB9IGZyb20gJ34vbW9kZWxzL3Nlc3Npb24nO1xuaW1wb3J0IHsgTWFpbkNvbnRleHQgfSBmcm9tICd+L2NvbXBvbmVudHMvb3ZlcmxheS9QcmFjdGljZU92ZXJsYXknO1xuaW1wb3J0IG1lZGlhUXVlcmllcyBmcm9tICd+L3V0aWxzL21lZGlhUXVlcmllcyc7XG5cbmludGVyZmFjZSBJbnRlcnZhbEVzdGltYXRlIHtcbiAgcmV2aWV3TW9kZTogc3RyaW5nO1xuICBncmFkZTogbnVtYmVyO1xuICByZXBldGl0aW9uczogbnVtYmVyO1xuICBpbnRlcnZhbDogbnVtYmVyO1xuICBlRmFjdG9yOiBudW1iZXI7XG4gIGRhdGVDcmVhdGVkOiBzdHJpbmc7XG4gIG5leHREdWVEYXRlOiBzdHJpbmc7XG4gIG5leHREdWVEYXRlRnJvbU5vdzogc3RyaW5nO1xufVxuXG50eXBlIEludGVydmFsRXN0aW1hdGVzID1cbiAgfCB1bmRlZmluZWRcbiAgfCB7XG4gICAgICBba2V5OiBudW1iZXJdOiBJbnRlcnZhbEVzdGltYXRlO1xuICAgIH07XG5cbmNvbnN0IEZvb3RlciA9ICh7XG4gIHNldFNob3dBbnN3ZXJzLFxuICBzaG93QW5zd2VycyxcbiAgcmVmVWlkLFxuICBvblByYWN0aWNlQ2xpY2ssXG4gIG9uU2tpcENsaWNrLFxuICBvblByZXZDbGljayxcbiAgaXNEb25lLFxuICBoYXNDYXJkcyxcbiAgb25DbG9zZUNhbGxiYWNrLFxuICBjdXJyZW50Q2FyZERhdGEsXG4gIG9uU3RhcnRDcmFtbWluZ0NsaWNrLFxuICBmc3JzRW5hYmxlZCA9IGZhbHNlLFxufSkgPT4ge1xuICBjb25zdCB7IHJldmlld01vZGUsIGludGVydmFsTXVsdGlwbGllciwgaW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSB9ID0gUmVhY3QudXNlQ29udGV4dChNYWluQ29udGV4dCk7XG5cbiAgY29uc3QgW2lzSW50ZXJ2YWxFZGl0b3JPcGVuLCBzZXRJc0ludGVydmFsRWRpdG9yT3Blbl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgdG9nZ2xlSW50ZXJ2YWxFZGl0b3JPcGVuID0gKCkgPT4gc2V0SXNJbnRlcnZhbEVkaXRvck9wZW4oKHByZXYpID0+ICFwcmV2KTtcbiAgLy8gU28gd2UgY2FuIGZsYXNoIHRoZSBhY3RpdmF0ZWQgYnV0dG9uIHdoZW4gdXNpbmcga2V5Ym9hcmQgc2hvcnRjdXRzIGJlZm9yZSB0cmFuc2l0aW9uaW5nXG4gIGNvbnN0IFthY3RpdmVCdXR0b25LZXksIHNldEFjdGl2ZUJ1dHRvbktleV0gPSBSZWFjdC51c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgYWN0aXZhdGVCdXR0b25GbiA9IGFzeW5jIChrZXksIGNhbGxiYWNrRm4pID0+IHtcbiAgICBzZXRBY3RpdmVCdXR0b25LZXkoa2V5KTtcbiAgICAvLyDwn5qAIEZMQVNIIEZJWDog5a+56Lez6L+H5pON5L2c5YeP5bCR5bu26L+f77yM5YeP5bCR562U5qGI6Zeq54OBXG4gICAgY29uc3QgZGVsYXkgPSBrZXkgPT09ICdza2lwLWJ1dHRvbicgPyA1MCA6IDEwMDtcbiAgICBhd2FpdCBhc3luY1V0aWxzLnNsZWVwKGRlbGF5KTtcbiAgICBjYWxsYmFja0ZuKCk7XG4gICAgc2V0QWN0aXZlQnV0dG9uS2V5KG51bGwpO1xuICB9O1xuXG4gIGNvbnN0IHNob3dBbnN3ZXJGbiA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzZXRTaG93QW5zd2Vycyh0cnVlKTtcbiAgICB9O1xuICB9LCBbc2V0U2hvd0Fuc3dlcnNdKTtcbiAgY29uc3QgZ3JhZGVGbiA9IFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT4gKGdyYWRlKSA9PiB7XG4gICAgICBsZXQga2V5O1xuICAgICAgc3dpdGNoIChncmFkZSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAga2V5ID0gJ2ZvcmdvdC1idXR0b24nO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAga2V5ID0gJ2hhcmQtYnV0dG9uJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGtleSA9ICdnb29kLWJ1dHRvbic7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBrZXkgPSAncGVyZmVjdC1idXR0b24nO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBhY3RpdmF0ZUJ1dHRvbkZuKGtleSwgKCkgPT4gb25QcmFjdGljZUNsaWNrKHsgZ3JhZGUsIHJlZlVpZDogcmVmVWlkIH0pKTtcbiAgICB9LFxuICAgIFtvblByYWN0aWNlQ2xpY2ssIHJlZlVpZF1cbiAgKTtcblxuICBjb25zdCBpbnRlcnZhbFByYWN0aWNlID0gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiAoKSA9PiB7XG4gICAgICBhY3RpdmF0ZUJ1dHRvbkZuKCduZXh0LWJ1dHRvbicsICgpID0+IG9uUHJhY3RpY2VDbGljayh7IHJlZlVpZDogcmVmVWlkIH0pKTtcbiAgICB9LFxuICAgIFtvblByYWN0aWNlQ2xpY2ssIHJlZlVpZF1cbiAgKTtcbiAgY29uc3Qgc2tpcEZuID0gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiAoKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSAnc2tpcC1idXR0b24nO1xuICAgICAgYWN0aXZhdGVCdXR0b25GbihrZXksICgpID0+IG9uU2tpcENsaWNrKCkpO1xuICAgIH0sXG4gICAgW29uU2tpcENsaWNrXVxuICApO1xuXG4gIGNvbnN0IGhvdGtleXMgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+IFtcbiAgICAgIHtcbiAgICAgICAgY29tYm86ICdzcGFjZScsXG4gICAgICAgIGdsb2JhbDogdHJ1ZSxcbiAgICAgICAgbGFiZWw6ICdQcmltYXJ5IEFjdGlvbiBUcmlnZ2VyJyxcbiAgICAgICAgb25LZXlEb3duOiAoKSA9PiB7XG4gICAgICAgICAgaWYgKCFzaG93QW5zd2Vycykge1xuICAgICAgICAgICAgYWN0aXZhdGVCdXR0b25Gbignc3BhY2UtYnV0dG9uJywgc2hvd0Fuc3dlckZuKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJldmlld01vZGUgPT09IFJldmlld01vZGVzLkZpeGVkSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgaW50ZXJ2YWxQcmFjdGljZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZ3JhZGVGbig1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21ibzogJ1MnLFxuICAgICAgICBnbG9iYWw6IHRydWUsXG4gICAgICAgIGxhYmVsOiAnU2tpcCcsXG4gICAgICAgIG9uS2V5RG93bjogc2tpcEZuLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tYm86ICdyaWdodCcsXG4gICAgICAgIGdsb2JhbDogdHJ1ZSxcbiAgICAgICAgbGFiZWw6ICdTa2lwJyxcbiAgICAgICAgb25LZXlEb3duOiBza2lwRm4sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21ibzogJ2xlZnQnLFxuICAgICAgICBnbG9iYWw6IHRydWUsXG4gICAgICAgIGxhYmVsOiAnUHJldmlvdXMnLFxuICAgICAgICBvbktleURvd246IG9uUHJldkNsaWNrLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tYm86ICdYJyxcbiAgICAgICAgZ2xvYmFsOiB0cnVlLFxuICAgICAgICBsYWJlbDogJ0ZvcmdvdCAoR3JhZGUgMCknLFxuICAgICAgICBvbktleURvd246ICgpID0+IGdyYWRlRm4oMCksXG4gICAgICAgIGRpc2FibGVkOiByZXZpZXdNb2RlID09PSBSZXZpZXdNb2Rlcy5GaXhlZEludGVydmFsLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tYm86ICdIJyxcbiAgICAgICAgZ2xvYmFsOiB0cnVlLFxuICAgICAgICBsYWJlbDogJ0dyYWRlIDInLFxuICAgICAgICBvbktleURvd246ICgpID0+IGdyYWRlRm4oMiksXG4gICAgICAgIGRpc2FibGVkOiByZXZpZXdNb2RlID09PSBSZXZpZXdNb2Rlcy5GaXhlZEludGVydmFsLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tYm86ICdHJyxcbiAgICAgICAgZ2xvYmFsOiB0cnVlLFxuICAgICAgICBsYWJlbDogJ0dyYWRlIDQnLFxuICAgICAgICBvbktleURvd246ICgpID0+IGdyYWRlRm4oNCksXG4gICAgICAgIGRpc2FibGVkOiByZXZpZXdNb2RlICE9PSBSZXZpZXdNb2Rlcy5EZWZhdWx0U3BhY2VkSW50ZXJ2YWwsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21ibzogJ0UnLFxuICAgICAgICBnbG9iYWw6IHRydWUsXG4gICAgICAgIGxhYmVsOiAnRWRpdCBJbnRlcnZhbCcsXG4gICAgICAgIG9uS2V5RG93bjogdG9nZ2xlSW50ZXJ2YWxFZGl0b3JPcGVuLFxuICAgICAgICBkaXNhYmxlZDogcmV2aWV3TW9kZSAhPT0gUmV2aWV3TW9kZXMuRml4ZWRJbnRlcnZhbCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICBbc2tpcEZuLCBvblByZXZDbGljaywgcmV2aWV3TW9kZSwgc2hvd0Fuc3dlcnMsIHNob3dBbnN3ZXJGbiwgaW50ZXJ2YWxQcmFjdGljZSwgZ3JhZGVGbl1cbiAgKTtcbiAgY29uc3QgeyBoYW5kbGVLZXlEb3duLCBoYW5kbGVLZXlVcCB9ID0gQmx1ZXByaW50LnVzZUhvdGtleXMoaG90a2V5cyk7XG5cbiAgY29uc3QgaW50ZXJ2YWxFc3RpbWF0ZXM6IEludGVydmFsRXN0aW1hdGVzID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFjdXJyZW50Q2FyZERhdGEpIHJldHVybjtcblxuICAgIGlmICghcmV2aWV3TW9kZSkge1xuICAgICAgY29uc29sZS5lcnJvcignUmV2aWV3IG1vZGUgbm90IHNldCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBncmFkZXMgPSBbMCwgMSwgMiwgMywgNCwgNV07XG4gICAgY29uc3QgeyBpbnRlcnZhbCwgcmVwZXRpdGlvbnMsIGVGYWN0b3IsIGZzcnNTdGF0ZSB9ID0gY3VycmVudENhcmREYXRhO1xuICAgIGNvbnN0IGVzdGltYXRlcyA9IHt9O1xuXG4gICAgY29uc3QgaXRlcmF0ZUNvdW50ID0gcmV2aWV3TW9kZSA9PT0gUmV2aWV3TW9kZXMuRml4ZWRJbnRlcnZhbCA/IDEgOiBncmFkZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlcmF0ZUNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IGdyYWRlID0gZ3JhZGVzW2ldO1xuICAgICAgY29uc3QgcHJhY3RpY2VSZXN1bHREYXRhID0gZ2VuZXJhdGVQcmFjdGljZURhdGEoe1xuICAgICAgICBncmFkZSxcbiAgICAgICAgaW50ZXJ2YWwsXG4gICAgICAgIHJlcGV0aXRpb25zLFxuICAgICAgICBlRmFjdG9yLFxuICAgICAgICBmc3JzU3RhdGUsIC8vIOa3u+WKoEZTUlPnirbmgIFcbiAgICAgICAgZGF0ZUNyZWF0ZWQ6IG5ldyBEYXRlKCksXG4gICAgICAgIHJldmlld01vZGUsXG4gICAgICAgIGludGVydmFsTXVsdGlwbGllcixcbiAgICAgICAgaW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSxcbiAgICAgICAgc2NoZWR1bGluZ0FsZ29yaXRobTogZnNyc0VuYWJsZWQgPyAnRlNSUycgOiAnU00yJyxcbiAgICAgIH0pO1xuICAgICAgZXN0aW1hdGVzW2dyYWRlXSA9IHByYWN0aWNlUmVzdWx0RGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIGVzdGltYXRlcztcbiAgfSwgW2N1cnJlbnRDYXJkRGF0YSwgaW50ZXJ2YWxNdWx0aXBsaWVyLCBpbnRlcnZhbE11bHRpcGxpZXJUeXBlLCByZXZpZXdNb2RlLCBmc3JzRW5hYmxlZF0pO1xuXG4gIHJldHVybiAoXG4gICAgPEZvb3RlcldyYXBwZXJcbiAgICAgIGNsYXNzTmFtZT1cImJwMy1tdWx0aXN0ZXAtZGlhbG9nLWZvb3RlciBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciByb3VuZGVkLWItbWQgcC0wXCJcbiAgICAgIG9uS2V5RG93bj17aGFuZGxlS2V5RG93bn1cbiAgICAgIG9uS2V5VXA9e2hhbmRsZUtleVVwfVxuICAgID5cbiAgICAgIDxGb290ZXJBY3Rpb25zV3JhcHBlclxuICAgICAgICBjbGFzc05hbWU9XCJicDMtZGlhbG9nLWZvb3Rlci1hY3Rpb25zIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiB3LWZ1bGwgbXgtNSBteS0zXCJcbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJmb290ZXItYWN0aW9ucy13cmFwcGVyXCJcbiAgICAgID5cbiAgICAgICAge2lzRG9uZSB8fCAhaGFzQ2FyZHMgPyAoXG4gICAgICAgICAgPEZpbmlzaGVkQ29udHJvbHNcbiAgICAgICAgICAgIG9uU3RhcnRDcmFtbWluZ0NsaWNrPXtvblN0YXJ0Q3JhbW1pbmdDbGlja31cbiAgICAgICAgICAgIG9uQ2xvc2VDYWxsYmFjaz17b25DbG9zZUNhbGxiYWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgICkgOiAhc2hvd0Fuc3dlcnMgPyAoXG4gICAgICAgICAgPEFuc3dlckhpZGRlbkNvbnRyb2xzXG4gICAgICAgICAgICBhY3RpdmF0ZUJ1dHRvbkZuPXthY3RpdmF0ZUJ1dHRvbkZufVxuICAgICAgICAgICAgc2hvd0Fuc3dlckZuPXtzaG93QW5zd2VyRm59XG4gICAgICAgICAgICBhY3RpdmVCdXR0b25LZXk9e2FjdGl2ZUJ1dHRvbktleX1cbiAgICAgICAgICAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxHcmFkaW5nQ29udHJvbHNXcmFwcGVyXG4gICAgICAgICAgICBhY3RpdmF0ZUJ1dHRvbkZuPXthY3RpdmF0ZUJ1dHRvbkZufVxuICAgICAgICAgICAgYWN0aXZlQnV0dG9uS2V5PXthY3RpdmVCdXR0b25LZXl9XG4gICAgICAgICAgICBza2lwRm49e3NraXBGbn1cbiAgICAgICAgICAgIGdyYWRlRm49e2dyYWRlRm59XG4gICAgICAgICAgICBpbnRlcnZhbEVzdGltYXRlcz17aW50ZXJ2YWxFc3RpbWF0ZXN9XG4gICAgICAgICAgICBpbnRlcnZhbFByYWN0aWNlPXtpbnRlcnZhbFByYWN0aWNlfVxuICAgICAgICAgICAgaXNJbnRlcnZhbEVkaXRvck9wZW49e2lzSW50ZXJ2YWxFZGl0b3JPcGVufVxuICAgICAgICAgICAgdG9nZ2xlSW50ZXJ2YWxFZGl0b3JPcGVuPXt0b2dnbGVJbnRlcnZhbEVkaXRvck9wZW59XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvRm9vdGVyQWN0aW9uc1dyYXBwZXI+XG4gICAgPC9Gb290ZXJXcmFwcGVyPlxuICApO1xufTtcblxuY29uc3QgQW5zd2VySGlkZGVuQ29udHJvbHMgPSAoeyBhY3RpdmF0ZUJ1dHRvbkZuLCBzaG93QW5zd2VyRm4sIGFjdGl2ZUJ1dHRvbktleSB9KSA9PiAoXG4gIDxBbnN3ZXJIaWRkZW5Db250cm9sc1dyYXBwZXI+XG4gICAgey8qIOW3puWMuuWfn++8muepuiAqL31cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtc2hyaW5rLTBcIj48L2Rpdj5cbiAgICBcbiAgICB7Lyog5Lit5Yy65Z+f77yaU2hvdyBBbnN3ZXLmjInpkq4gKi99XG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LTEgZmxleCBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgey8qIEB0cy1pZ25vcmUgKi99XG4gICAgICA8Q29udHJvbEJ1dHRvblxuICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWJhc2UgZm9udC1tZWRpdW0gcHktMSBtb2JpbGUtc2hvdy1hbnN3ZXJcIlxuICAgICAgICBpbnRlbnQ9XCJub25lXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIGFjdGl2YXRlQnV0dG9uRm4oJ3NwYWNlLWJ1dHRvbicsIHNob3dBbnN3ZXJGbik7XG4gICAgICAgIH19XG4gICAgICAgIGFjdGl2ZT17YWN0aXZlQnV0dG9uS2V5ID09PSAnc3BhY2UtYnV0dG9uJ31cbiAgICAgICAgb3V0bGluZWRcbiAgICAgID5cbiAgICAgICAgU2hvdyBBbnN3ZXJ7JyAnfVxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtbC0yXCI+XG4gICAgICAgICAgPEJ1dHRvblRhZ3M+U1BBQ0U8L0J1dHRvblRhZ3M+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvQ29udHJvbEJ1dHRvbj5cbiAgICA8L2Rpdj5cbiAgICBcbiAgICB7Lyog5Y+z5Yy65Z+f77ya56m6ICovfVxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1zaHJpbmstMFwiPjwvZGl2PlxuICA8L0Fuc3dlckhpZGRlbkNvbnRyb2xzV3JhcHBlcj5cbik7XG5cbmNvbnN0IEFuc3dlckhpZGRlbkNvbnRyb2xzV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xuXG4gICR7bWVkaWFRdWVyaWVzLnhzfSB7XG4gICAgcGFkZGluZzogOHB4IDA7XG4gICAgXG4gICAgLm1vYmlsZS1zaG93LWFuc3dlciB7XG4gICAgICBtaW4td2lkdGg6IDIwMHB4O1xuICAgICAgbWluLWhlaWdodDogNDJweDtcbiAgICAgIG1heC1oZWlnaHQ6IDQycHg7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgcGFkZGluZzogOHB4IDE2cHggIWltcG9ydGFudDtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IEZpbmlzaGVkQ29udHJvbHMgPSAoeyBvblN0YXJ0Q3JhbW1pbmdDbGljaywgb25DbG9zZUNhbGxiYWNrIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8RmluaXNoZWRDb250cm9sc1dyYXBwZXI+XG4gICAgICB7Lyog5bem5Yy65Z+f77ya56m6ICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LXNocmluay0wXCI+PC9kaXY+XG4gICAgICBcbiAgICAgIHsvKiDkuK3ljLrln5/vvJrlrozmiJDnirbmgIHmjInpkq4gKi99XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpbmlzaGVkLWJ1dHRvbnMtd3JhcHBlciBmbGV4LTEgZmxleCBqdXN0aWZ5LWNlbnRlciBnYXAtNFwiPlxuICAgICAgICA8VG9vbHRpcCBjb250ZW50PVwiUmV2aWV3IGFsbCBjYXJkcyB3aXRob3V0IHdhaXRpbmcgZm9yIHNjaGVkdWxpbmdcIiBwbGFjZW1lbnQ9XCJ0b3BcIj5cbiAgICAgICAgICA8Qmx1ZXByaW50LkJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1iYXNlIGZvbnQtbWVkaXVtIHB5LTEgbW9iaWxlLWZpbmlzaC1idXR0b25cIlxuICAgICAgICAgICAgaW50ZW50PVwibm9uZVwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvblN0YXJ0Q3JhbW1pbmdDbGlja31cbiAgICAgICAgICAgIG91dGxpbmVkXG4gICAgICAgICAgPlxuICAgICAgICAgICAgQ29udGludWUgQ3JhbW1pbmdcbiAgICAgICAgICA8L0JsdWVwcmludC5CdXR0b24+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgPEJsdWVwcmludC5CdXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWJhc2UgZm9udC1tZWRpdW0gcHktMSBtb2JpbGUtZmluaXNoLWJ1dHRvblwiXG4gICAgICAgICAgaW50ZW50PVwicHJpbWFyeVwiXG4gICAgICAgICAgb25DbGljaz17b25DbG9zZUNhbGxiYWNrfVxuICAgICAgICAgIG91dGxpbmVkXG4gICAgICAgID5cbiAgICAgICAgICBDbG9zZVxuICAgICAgICA8L0JsdWVwcmludC5CdXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgey8qIOWPs+WMuuWfn++8muepuiAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1zaHJpbmstMFwiPjwvZGl2PlxuICAgIDwvRmluaXNoZWRDb250cm9sc1dyYXBwZXI+XG4gICk7XG59O1xuXG5jb25zdCBGaW5pc2hlZENvbnRyb2xzV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xuXG4gICR7bWVkaWFRdWVyaWVzLnhzfSB7XG4gICAgLmZpbmlzaGVkLWJ1dHRvbnMtd3JhcHBlciB7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgZ2FwOiA4cHg7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIFxuICAgICAgLm1vYmlsZS1maW5pc2gtYnV0dG9uIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDQ0cHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IEdyYWRpbmdDb250cm9sc1dyYXBwZXIgPSAoe1xuICBhY3RpdmF0ZUJ1dHRvbkZuLFxuICBhY3RpdmVCdXR0b25LZXksXG4gIHNraXBGbixcbiAgZ3JhZGVGbixcbiAgaW50ZXJ2YWxFc3RpbWF0ZXMsXG4gIGludGVydmFsUHJhY3RpY2UsXG4gIGlzSW50ZXJ2YWxFZGl0b3JPcGVuLFxuICB0b2dnbGVJbnRlcnZhbEVkaXRvck9wZW4sXG59KSA9PiB7XG4gIGNvbnN0IHsgcmV2aWV3TW9kZSwgc2V0UmV2aWV3TW9kZU92ZXJyaWRlIH0gPSBSZWFjdC51c2VDb250ZXh0KE1haW5Db250ZXh0KTtcblxuICBjb25zdCB0b2dnbGVSZXZpZXdNb2RlID0gKCkgPT4ge1xuICAgIGlmIChzZXRSZXZpZXdNb2RlT3ZlcnJpZGUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgc2V0UmV2aWV3TW9kZU92ZXJyaWRlKChwcmV2OiBSZXZpZXdNb2RlcyB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgY29uc3QgaXNPdmVycmlkZVNldCA9IHByZXYgIT09IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzT3ZlcnJpZGVTZXQpIHtcbiAgICAgICAgLy8gSWYgc2V0IHdlIGNsZWFyIGl0XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIFRvZ2dsZSBSZXZpZXcgTW9kZVxuICAgICAgcmV0dXJuIHJldmlld01vZGUgPT09IFJldmlld01vZGVzLkRlZmF1bHRTcGFjZWRJbnRlcnZhbFxuICAgICAgICA/IFJldmlld01vZGVzLkZpeGVkSW50ZXJ2YWxcbiAgICAgICAgOiBSZXZpZXdNb2Rlcy5EZWZhdWx0U3BhY2VkSW50ZXJ2YWw7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgaXNGaXhlZEludGVydmFsTW9kZSA9IHJldmlld01vZGUgPT09IFJldmlld01vZGVzLkZpeGVkSW50ZXJ2YWw7XG4gIHJldHVybiAoXG4gICAgPEdyYWRpbmdDb250cm9sc0NvbnRhaW5lcj5cbiAgICAgIHsvKiDlt6bljLrln5/vvJpTa2lw5oyJ6ZKuIC0g5Y2g5o2u5Zu65a6a56m66Ze0ICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJza2lwLWJ1dHRvbi13cmFwcGVyIGZsZXgtc2hyaW5rLTBcIj5cbiAgICAgICAgPENvbnRyb2xCdXR0b25cbiAgICAgICAgICBrZXk9XCJza2lwLWJ1dHRvblwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1iYXNlIGZvbnQtbWVkaXVtIHB5LTEgbW9iaWxlLXNraXAtYnV0dG9uXCJcbiAgICAgICAgICB0b29sdGlwVGV4dD17YFNraXAgZm9yIG5vd2B9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4gc2tpcEZuKCl9XG4gICAgICAgICAgYWN0aXZlPXthY3RpdmVCdXR0b25LZXkgPT09ICdza2lwLWJ1dHRvbid9XG4gICAgICAgICAgb3V0bGluZWRcbiAgICAgICAgPlxuICAgICAgICAgIFNraXB7JyAnfVxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1sLTJcIj5cbiAgICAgICAgICAgIDxCdXR0b25UYWdzPlM8L0J1dHRvblRhZ3M+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L0NvbnRyb2xCdXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgey8qIOS4reWMuuWfn++8muWKn+iDveaMiemSriAtIOiHqumAguW6lOepuumXtCAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JhZGluZy1idXR0b25zLXdyYXBwZXIgZmxleC0xIGZsZXgganVzdGlmeS1jZW50ZXIgZ2FwLTIgZmxleC13cmFwXCI+XG4gICAgICAgIHtpc0ZpeGVkSW50ZXJ2YWxNb2RlID8gKFxuICAgICAgICAgIDxGaXhlZEludGVydmFsTW9kZUNvbnRyb2xzXG4gICAgICAgICAgICBhY3RpdmVCdXR0b25LZXk9e2FjdGl2ZUJ1dHRvbktleX1cbiAgICAgICAgICAgIGludGVydmFsUHJhY3RpY2U9e2ludGVydmFsUHJhY3RpY2V9XG4gICAgICAgICAgICBpc0ludGVydmFsRWRpdG9yT3Blbj17aXNJbnRlcnZhbEVkaXRvck9wZW59XG4gICAgICAgICAgICB0b2dnbGVJbnRlcnZhbEVkaXRvck9wZW49e3RvZ2dsZUludGVydmFsRWRpdG9yT3Blbn1cbiAgICAgICAgICAgIGludGVydmFsRXN0aW1hdGVzPXtpbnRlcnZhbEVzdGltYXRlc31cbiAgICAgICAgICAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxTcGFjZWRJbnRlcnZhbE1vZGVDb250cm9sc1xuICAgICAgICAgICAgYWN0aXZlQnV0dG9uS2V5PXthY3RpdmVCdXR0b25LZXl9XG4gICAgICAgICAgICBncmFkZUZuPXtncmFkZUZufVxuICAgICAgICAgICAgaW50ZXJ2YWxFc3RpbWF0ZXM9e2ludGVydmFsRXN0aW1hdGVzfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgey8qIOWPs+WMuuWfn++8muW8gOWFs+aMiemSriAtIOWbuuWumuWkp+WwjyAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9nZ2xlLXN3aXRjaC13cmFwcGVyIGZsZXgtc2hyaW5rLTBcIj5cbiAgICAgICAgPFNldEludGVydmFsVG9nZ2xlV3JhcHBlciBcbiAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBnYXAtMSBiZy1ncmF5LTUwIHB4LTIgcHktMSByb3VuZGVkLW1kIGJvcmRlciBib3JkZXItZ3JheS0yMDBcIiBcbiAgICAgICAgICBzdHlsZT17eyBtaW5XaWR0aDogJzEwMHB4JyB9fVxuICAgICAgICA+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgdGV4dC14cyAkeyFpc0ZpeGVkSW50ZXJ2YWxNb2RlID8gJ3RleHQtYmx1ZS02MDAgZm9udC1tZWRpdW0nIDogJ3RleHQtZ3JheS00MDAnfWB9PlxuICAgICAgICAgICAgQVVUT1xuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8Qmx1ZXByaW50LlN3aXRjaFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibWItMFwiXG4gICAgICAgICAgICBzdHlsZT17eyB0cmFuc2Zvcm06ICdzY2FsZSgwLjkpJyB9fVxuICAgICAgICAgICAgY2hlY2tlZD17aXNGaXhlZEludGVydmFsTW9kZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0b2dnbGVSZXZpZXdNb2RlfVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJyZXZpZXctbW9kZS1zd2l0Y2hcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgdGV4dC14cyAke2lzRml4ZWRJbnRlcnZhbE1vZGUgPyAndGV4dC1ibHVlLTYwMCBmb250LW1lZGl1bScgOiAndGV4dC1ncmF5LTQwMCd9YH0+XG4gICAgICAgICAgICBGSVhcbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvU2V0SW50ZXJ2YWxUb2dnbGVXcmFwcGVyPlxuICAgICAgPC9kaXY+XG4gICAgPC9HcmFkaW5nQ29udHJvbHNDb250YWluZXI+XG4gICk7XG59O1xuXG5jb25zdCBGaXhlZEludGVydmFsRWRpdG9yID0gKCkgPT4ge1xuICBjb25zdCB7XG4gICAgaW50ZXJ2YWxNdWx0aXBsaWVyLFxuICAgIGludGVydmFsTXVsdGlwbGllclR5cGUsXG4gICAgc2V0SW50ZXJ2YWxNdWx0aXBsaWVyLFxuICAgIHNldEludGVydmFsTXVsdGlwbGllclR5cGUsXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE1haW5Db250ZXh0KTtcbiAgY29uc3QgaGFuZGxlSW5wdXRWYWx1ZUNoYW5nZSA9IChudW1lcmljVmFsdWUpID0+IHtcbiAgICBpZiAoaXNOYU4obnVtZXJpY1ZhbHVlKSkgcmV0dXJuO1xuICAgIHNldEludGVydmFsTXVsdGlwbGllcihudW1lcmljVmFsdWUpO1xuICB9O1xuXG4gIGNvbnN0IGludGVydmFsTXVsdGlwbGllclR5cGVzID0gW1xuICAgIHsgdmFsdWU6IEludGVydmFsTXVsdGlwbGllclR5cGUuRGF5cywgbGFiZWw6ICdEYXlzJyB9LFxuICAgIHsgdmFsdWU6IEludGVydmFsTXVsdGlwbGllclR5cGUuV2Vla3MsIGxhYmVsOiAnV2Vla3MnIH0sXG4gICAgeyB2YWx1ZTogSW50ZXJ2YWxNdWx0aXBsaWVyVHlwZS5Nb250aHMsIGxhYmVsOiAnTW9udGhzJyB9LFxuICAgIHsgdmFsdWU6IEludGVydmFsTXVsdGlwbGllclR5cGUuWWVhcnMsIGxhYmVsOiAnWWVhcnMnIH0sXG4gIF07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggcC0yIGl0ZW1zLWNlbnRlciB3LTgwIGp1c3RpZnktZXZlbmx5XCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIlwiPkV2ZXJ5PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInctMjRcIj5cbiAgICAgICAgPEJsdWVwcmludC5OdW1lcmljSW5wdXRcbiAgICAgICAgICBtaW49ezF9XG4gICAgICAgICAgbWF4PXszNjV9XG4gICAgICAgICAgc3RlcFNpemU9ezF9XG4gICAgICAgICAgbWFqb3JTdGVwU2l6ZT17MzB9XG4gICAgICAgICAgbWlub3JTdGVwU2l6ZT17MX1cbiAgICAgICAgICB2YWx1ZT17aW50ZXJ2YWxNdWx0aXBsaWVyfVxuICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e2hhbmRsZUlucHV0VmFsdWVDaGFuZ2V9XG4gICAgICAgICAgZmlsbFxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJwMy1odG1sLXNlbGVjdFwiPlxuICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgdmFsdWU9e2ludGVydmFsTXVsdGlwbGllclR5cGV9XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PlxuICAgICAgICAgICAgc2V0SW50ZXJ2YWxNdWx0aXBsaWVyVHlwZShlLmN1cnJlbnRUYXJnZXQudmFsdWUgYXMgSW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSlcbiAgICAgICAgICB9XG4gICAgICAgID5cbiAgICAgICAgICB7aW50ZXJ2YWxNdWx0aXBsaWVyVHlwZXMubWFwKChvcHRpb24pID0+IChcbiAgICAgICAgICAgIDxvcHRpb25cbiAgICAgICAgICAgICAga2V5PXtvcHRpb24udmFsdWV9XG4gICAgICAgICAgICAgIHZhbHVlPXtvcHRpb24udmFsdWV9XG4gICAgICAgICAgICAgIHNlbGVjdGVkPXtvcHRpb24udmFsdWUgPT09IGludGVydmFsTXVsdGlwbGllclR5cGV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtvcHRpb24ubGFiZWx9XG4gICAgICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImJwMy1pY29uIGJwMy1pY29uLWRvdWJsZS1jYXJldC12ZXJ0aWNhbFwiPjwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgSW50ZXJ2YWxTdHJpbmcgPSAoeyBpbnRlcnZhbE11bHRpcGxpZXIsIGludGVydmFsTXVsdGlwbGllclR5cGUgfSkgPT4ge1xuICBsZXQgc2luZ3VsYXJTdHJpbmcgPSAnJztcbiAgaWYgKGludGVydmFsTXVsdGlwbGllciA9PT0gMSkge1xuICAgIHN3aXRjaCAoaW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSkge1xuICAgICAgY2FzZSBJbnRlcnZhbE11bHRpcGxpZXJUeXBlLldlZWtzOlxuICAgICAgICBzaW5ndWxhclN0cmluZyArPSAnV2Vla2x5JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEludGVydmFsTXVsdGlwbGllclR5cGUuTW9udGhzOlxuICAgICAgICBzaW5ndWxhclN0cmluZyArPSAnTW9udGhseSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBJbnRlcnZhbE11bHRpcGxpZXJUeXBlLlllYXJzOlxuICAgICAgICBzaW5ndWxhclN0cmluZyArPSAnWWVhcmx5JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzaW5ndWxhclN0cmluZyArPSAnRGFpbHknO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICBSZXZpZXd7JyAnfVxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZm9udC1tZWRpdW0gbXItM1wiPlxuICAgICAgICB7c2luZ3VsYXJTdHJpbmcgPyAoXG4gICAgICAgICAgc2luZ3VsYXJTdHJpbmdcbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgRXZlcnkge2ludGVydmFsTXVsdGlwbGllcn0ge2ludGVydmFsTXVsdGlwbGllclR5cGV9XG4gICAgICAgICAgPC8+XG4gICAgICAgICl9XG4gICAgICA8L3NwYW4+XG4gICAgPC8+XG4gICk7XG59O1xuXG5jb25zdCBGaXhlZEludGVydmFsTW9kZUNvbnRyb2xzID0gKHtcbiAgYWN0aXZlQnV0dG9uS2V5LFxuICBpbnRlcnZhbFByYWN0aWNlLFxuICBpc0ludGVydmFsRWRpdG9yT3BlbixcbiAgdG9nZ2xlSW50ZXJ2YWxFZGl0b3JPcGVuLFxuICBpbnRlcnZhbEVzdGltYXRlcyxcbn06IHtcbiAgYWN0aXZlQnV0dG9uS2V5OiBzdHJpbmc7XG4gIGludGVydmFsUHJhY3RpY2U6ICgpID0+IHZvaWQ7XG4gIGlzSW50ZXJ2YWxFZGl0b3JPcGVuOiBib29sZWFuO1xuICB0b2dnbGVJbnRlcnZhbEVkaXRvck9wZW46ICgpID0+IHZvaWQ7XG4gIGludGVydmFsRXN0aW1hdGVzOiBJbnRlcnZhbEVzdGltYXRlcztcbn0pOiBKU1guRWxlbWVudCB8IG51bGwgPT4ge1xuICBjb25zdCB7IGludGVydmFsTXVsdGlwbGllciwgaW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSB9ID0gUmVhY3QudXNlQ29udGV4dChNYWluQ29udGV4dCk7XG4gIGNvbnN0IG9uSW50ZXJhY3Rpb25oYW5kbGVyID0gKG5leHRTdGF0ZSkgPT4ge1xuICAgIGlmICghbmV4dFN0YXRlICYmIGlzSW50ZXJ2YWxFZGl0b3JPcGVuKSB0b2dnbGVJbnRlcnZhbEVkaXRvck9wZW4oKTtcbiAgfTtcbiAgaWYgKCFpbnRlcnZhbEVzdGltYXRlcykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ludGVydmFsIGVzdGltYXRlcyBub3Qgc2V0Jyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxGaXhlZEludGVydmFsQ29udHJvbHNXcmFwcGVyPlxuICAgICAgPEJsdWVwcmludC5Qb3BvdmVyIGlzT3Blbj17aXNJbnRlcnZhbEVkaXRvck9wZW59IG9uSW50ZXJhY3Rpb249e29uSW50ZXJhY3Rpb25oYW5kbGVyfT5cbiAgICAgICAgPENvbnRyb2xCdXR0b25cbiAgICAgICAgICBpY29uPVwidGltZVwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1iYXNlIGZvbnQtbm9ybWFsIHB5LTEgbW9iaWxlLWludGVydmFsLWJ1dHRvblwiXG4gICAgICAgICAgaW50ZW50PVwiZGVmYXVsdFwiXG4gICAgICAgICAgb25DbGljaz17dG9nZ2xlSW50ZXJ2YWxFZGl0b3JPcGVufVxuICAgICAgICAgIHRvb2x0aXBUZXh0PXtgQ2hhbmdlIEludGVydmFsYH1cbiAgICAgICAgICBhY3RpdmU9e2FjdGl2ZUJ1dHRvbktleSA9PT0gJ2NoYW5nZS1pbnRlcnZhbC1idXR0b24nfVxuICAgICAgICAgIG91dGxpbmVkXG4gICAgICAgID5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtbC0yXCI+XG4gICAgICAgICAgICA8SW50ZXJ2YWxTdHJpbmdcbiAgICAgICAgICAgICAgaW50ZXJ2YWxNdWx0aXBsaWVyPXtpbnRlcnZhbE11bHRpcGxpZXJ9XG4gICAgICAgICAgICAgIGludGVydmFsTXVsdGlwbGllclR5cGU9e2ludGVydmFsTXVsdGlwbGllclR5cGV9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPEJ1dHRvblRhZ3M+RTwvQnV0dG9uVGFncz5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvQ29udHJvbEJ1dHRvbj5cbiAgICAgICAgPEZpeGVkSW50ZXJ2YWxFZGl0b3IgLz5cbiAgICAgIDwvQmx1ZXByaW50LlBvcG92ZXI+XG4gICAgICA8Q29udHJvbEJ1dHRvblxuICAgICAgICBpY29uPVwidGlja1wiXG4gICAgICAgIGNsYXNzTmFtZT1cInRleHQtYmFzZSBmb250LW1lZGl1bSBweS0xIG1vYmlsZS1uZXh0LWJ1dHRvblwiXG4gICAgICAgIGludGVudD1cInN1Y2Nlc3NcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBpbnRlcnZhbFByYWN0aWNlKCl9XG4gICAgICAgIHRvb2x0aXBUZXh0PXtgUmV2aWV3ICR7aW50ZXJ2YWxFc3RpbWF0ZXNbMF0ubmV4dER1ZURhdGVGcm9tTm93fWB9XG4gICAgICAgIGFjdGl2ZT17YWN0aXZlQnV0dG9uS2V5ID09PSAnbmV4dC1idXR0b24nfVxuICAgICAgICBvdXRsaW5lZFxuICAgICAgPlxuICAgICAgICBOZXh0eycgJ31cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibWwtMlwiPlxuICAgICAgICAgIDxCdXR0b25UYWdzPlNQQUNFPC9CdXR0b25UYWdzPlxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L0NvbnRyb2xCdXR0b24+XG4gICAgPC9GaXhlZEludGVydmFsQ29udHJvbHNXcmFwcGVyPlxuICApO1xufTtcblxuY29uc3QgRml4ZWRJbnRlcnZhbENvbnRyb2xzV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogOHB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICR7bWVkaWFRdWVyaWVzLnhzfSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBnYXA6IDZweDtcblxuICAgIC5tb2JpbGUtaW50ZXJ2YWwtYnV0dG9uLFxuICAgIC5tb2JpbGUtbmV4dC1idXR0b24ge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtaW4taGVpZ2h0OiA0NHB4O1xuICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgU3BhY2VkSW50ZXJ2YWxNb2RlQ29udHJvbHMgPSAoe1xuICBhY3RpdmVCdXR0b25LZXksXG4gIGdyYWRlRm4sXG4gIGludGVydmFsRXN0aW1hdGVzLFxufToge1xuICBhY3RpdmVCdXR0b25LZXk6IHN0cmluZztcbiAgZ3JhZGVGbjogKGdyYWRlOiBudW1iZXIpID0+IHZvaWQ7XG4gIGludGVydmFsRXN0aW1hdGVzOiBJbnRlcnZhbEVzdGltYXRlcztcbn0pOiBKU1guRWxlbWVudCB8IG51bGwgPT4ge1xuICBpZiAoIWludGVydmFsRXN0aW1hdGVzKSB7XG4gICAgY29uc29sZS5lcnJvcignSW50ZXJ2YWwgZXN0aW1hdGVzIG5vdCBzZXQnKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFNwYWNlZEludGVydmFsQnV0dG9uc1dyYXBwZXI+XG4gICAgICA8Q29udHJvbEJ1dHRvblxuICAgICAgICBrZXk9XCJmb3JnZXQtYnV0dG9uXCJcbiAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1iYXNlIGZvbnQtbWVkaXVtIHB5LTEgbW9iaWxlLWJ1dHRvblwiXG4gICAgICAgIGludGVudD1cImRhbmdlclwiXG4gICAgICAgIHRvb2x0aXBUZXh0PXtgUmV2aWV3ICR7aW50ZXJ2YWxFc3RpbWF0ZXNbMF0/Lm5leHREdWVEYXRlRnJvbU5vd31gfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBncmFkZUZuKDApfVxuICAgICAgICBhY3RpdmU9e2FjdGl2ZUJ1dHRvbktleSA9PT0gJ2ZvcmdvdC1idXR0b24nfVxuICAgICAgICBvdXRsaW5lZFxuICAgICAgPlxuICAgICAgICBGb3Jnb3R7JyAnfVxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtbC0yXCI+XG4gICAgICAgICAgPEJ1dHRvblRhZ3M+WDwvQnV0dG9uVGFncz5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9Db250cm9sQnV0dG9uPlxuICAgICAgPENvbnRyb2xCdXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1iYXNlIGZvbnQtbWVkaXVtIHB5LTEgbW9iaWxlLWJ1dHRvblwiXG4gICAgICAgIGludGVudD1cIndhcm5pbmdcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBncmFkZUZuKDIpfVxuICAgICAgICB0b29sdGlwVGV4dD17YFJldmlldyAke2ludGVydmFsRXN0aW1hdGVzWzJdPy5uZXh0RHVlRGF0ZUZyb21Ob3d9YH1cbiAgICAgICAgYWN0aXZlPXthY3RpdmVCdXR0b25LZXkgPT09ICdoYXJkLWJ1dHRvbid9XG4gICAgICAgIG91dGxpbmVkXG4gICAgICA+XG4gICAgICAgIEhhcmR7JyAnfVxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtbC0yXCI+XG4gICAgICAgICAgPEJ1dHRvblRhZ3M+SDwvQnV0dG9uVGFncz5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9Db250cm9sQnV0dG9uPlxuICAgICAgPENvbnRyb2xCdXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1iYXNlIGZvbnQtbWVkaXVtIHB5LTEgbW9iaWxlLWJ1dHRvblwiXG4gICAgICAgIGludGVudD1cInByaW1hcnlcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBncmFkZUZuKDQpfVxuICAgICAgICB0b29sdGlwVGV4dD17YFJldmlldyAke2ludGVydmFsRXN0aW1hdGVzWzRdPy5uZXh0RHVlRGF0ZUZyb21Ob3d9YH1cbiAgICAgICAgYWN0aXZlPXthY3RpdmVCdXR0b25LZXkgPT09ICdnb29kLWJ1dHRvbid9XG4gICAgICAgIG91dGxpbmVkXG4gICAgICA+XG4gICAgICAgIEdvb2R7JyAnfVxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtbC0yXCI+XG4gICAgICAgICAgPEJ1dHRvblRhZ3M+RzwvQnV0dG9uVGFncz5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9Db250cm9sQnV0dG9uPlxuICAgICAgPENvbnRyb2xCdXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1iYXNlIGZvbnQtbWVkaXVtIHB5LTEgbW9iaWxlLWJ1dHRvblwiXG4gICAgICAgIGludGVudD1cInN1Y2Nlc3NcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBncmFkZUZuKDUpfVxuICAgICAgICB0b29sdGlwVGV4dD17YFJldmlldyAke2ludGVydmFsRXN0aW1hdGVzWzVdPy5uZXh0RHVlRGF0ZUZyb21Ob3d9YH1cbiAgICAgICAgYWN0aXZlPXthY3RpdmVCdXR0b25LZXkgPT09ICdwZXJmZWN0LWJ1dHRvbid9XG4gICAgICAgIG91dGxpbmVkXG4gICAgICA+XG4gICAgICAgIFBlcmZlY3R7JyAnfVxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtbC0yXCI+XG4gICAgICAgICAgPEJ1dHRvblRhZ3M+U1BBQ0U8L0J1dHRvblRhZ3M+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvQ29udHJvbEJ1dHRvbj5cbiAgICA8L1NwYWNlZEludGVydmFsQnV0dG9uc1dyYXBwZXI+XG4gICk7XG59O1xuXG4vLyDmt7vliqDlk43lupTlvI/ljIXoo4XlmahcbmNvbnN0IFNwYWNlZEludGVydmFsQnV0dG9uc1dyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDhweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgd2lkdGg6IDEwMCU7XG4gIGZsZXgtd3JhcDogd3JhcDtcblxuICAke21lZGlhUXVlcmllcy54c30ge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgZ2FwOiA4cHg7XG4gICAgcGFkZGluZzogOHB4IDA7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICAubW9iaWxlLWJ1dHRvbiB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1pbi1oZWlnaHQ6IDM4cHg7XG4gICAgICBtYXgtaGVpZ2h0OiAzOHB4O1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgcGFkZGluZzogNnB4IDEycHggIWltcG9ydGFudDtcbiAgICAgIFxuICAgICAgLmJwMy1idXR0b24tdGV4dCB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICAgIFxuICAgICAgICAubWwtMiB7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDhweDtcbiAgICAgICAgICBmb250LXNpemU6IDExcHg7XG4gICAgICAgICAgb3BhY2l0eTogMC44O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBGb290ZXJXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y2ZjlmZDtcbiAgbWluLWhlaWdodDogNTBweDtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHJnYmEoMTYsIDIyLCAyNiwgMC4xKTtcblxuICAmIC5icDMtYnV0dG9uLXRleHQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuXG4gICR7bWVkaWFRdWVyaWVzLnhzfSB7XG4gICAgcGFkZGluZzogMTJweCA4cHg7XG4gIH1cbmA7XG5cbmNvbnN0IEZvb3RlckFjdGlvbnNXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgJi5icDMtZGlhbG9nLWZvb3Rlci1hY3Rpb25zIC5icDMtYnV0dG9uIHtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgfVxuXG4gICR7bWVkaWFRdWVyaWVzLnhzfSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBnYXA6IDZweDtcbiAgICBtYXJnaW46IDAgIWltcG9ydGFudDtcbiAgICBwYWRkaW5nOiA4cHggMTJweDtcbiAgfVxuYDtcblxuY29uc3QgU2V0SW50ZXJ2YWxUb2dnbGVXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgJHttZWRpYVF1ZXJpZXMueHN9IHtcbiAgICBvcmRlcjogLTE7XG4gICAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG4gICAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICB9XG5gO1xuXG5jb25zdCBDb250cm9sQnV0dG9uV3JhcHBlciA9IHN0eWxlZChCbHVlcHJpbnQuQnV0dG9uKWBgO1xuXG5jb25zdCBDb250cm9sQnV0dG9uID0gKHsgdG9vbHRpcFRleHQsIHdyYXBwZXJDbGFzc05hbWUgPSAnJywgLi4ucHJvcHMgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICA8VG9vbHRpcCBjb250ZW50PXt0b29sdGlwVGV4dH0gcGxhY2VtZW50PVwidG9wXCIgd3JhcHBlckNsYXNzTmFtZT17d3JhcHBlckNsYXNzTmFtZX0+XG4gICAgICA8Q29udHJvbEJ1dHRvbldyYXBwZXIgey4uLnByb3BzfSAvPlxuICAgIDwvVG9vbHRpcD5cbiAgKTtcbn07XG5cbi8vIOa3u+WKoCBHcmFkaW5nQ29udHJvbHNDb250YWluZXIg5qC35byPXG5jb25zdCBHcmFkaW5nQ29udHJvbHNDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIHdpZHRoOiAxMDAlO1xuICBnYXA6IDEycHg7XG5cbiAgJHttZWRpYVF1ZXJpZXMueHN9IHtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGdhcDogNnB4O1xuICAgIHBhZGRpbmc6IDRweDtcblxuICAgIC5za2lwLWJ1dHRvbi13cmFwcGVyIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgXG4gICAgICAubW9iaWxlLXNraXAtYnV0dG9uIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDM0cHg7XG4gICAgICAgIG1heC1oZWlnaHQ6IDM0cHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICAgICAgcGFkZGluZzogNHB4IDhweCAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC5ncmFkaW5nLWJ1dHRvbnMtd3JhcHBlciB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG9yZGVyOiAyO1xuICAgICAgLyog57Sn5YeR5biD5bGA77yM56e76Zmk5aSa5L2Z56m66Ze0ICovXG4gICAgICBmbGV4OiBub25lO1xuICAgIH1cblxuICAgIC50b2dnbGUtc3dpdGNoLXdyYXBwZXIge1xuICAgICAgb3JkZXI6IDE7XG4gICAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcbiAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgICAgXG4gICAgICAvKiDnvKnlsI/lvIDlhbPlsLrlr7ggKi9cbiAgICAgIC5icDMtc3dpdGNoIHtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGRlZmF1bHQgRm9vdGVyOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuaW50ZXJmYWNlIFByaW9yaXR5U2xpZGVyUHJvcHMge1xuICBwcmlvcml0eTogbnVtYmVyOyAvLyDlvZPliY3mjpLlkI0gKDE956ysMeWQje+8jDI956ysMuWQje+8jGV0Yy4pXG4gIG9uUHJpb3JpdHlDaGFuZ2U6IChuZXdSYW5rOiBudW1iZXIpID0+IHZvaWQ7IC8vIOaOkuWQjeWPmOabtOWbnuiwg1xuICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgYWxsQ2FyZHNDb3VudDogbnVtYmVyOyAvLyDmgLvljaHniYfmlbBcbn1cblxuY29uc3QgUHJpb3JpdHlDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTJweCAyMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjZmOWZkO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgI2UxZThlZDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlMWU4ZWQ7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgei1pbmRleDogMTtcbmA7XG5cbmNvbnN0IFNsaWRlcldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAxMDAlO1xuYDtcblxuY29uc3QgU3R5bGVkU2xpZGVyID0gc3R5bGVkLmlucHV0YFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDhweDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNlNzRjM2MgMCUsICNmMzljMTIgNTAlLCAjMjdhZTYwIDEwMCUpO1xuICBvdXRsaW5lOiBub25lO1xuICBvcGFjaXR5OiAwLjg7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycztcbiAgY3Vyc29yOiBwb2ludGVyO1xuXG4gICY6aG92ZXIge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cblxuICAmOjotd2Via2l0LXNsaWRlci10aHVtYiB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAgIGFwcGVhcmFuY2U6IG5vbmU7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBiYWNrZ3JvdW5kOiAjMzQ5OGRiO1xuICAgIGN1cnNvcjogZ3JhYjtcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjZmZmO1xuICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuMTVzIGVhc2U7XG4gIH1cblxuICAmOjotd2Via2l0LXNsaWRlci10aHVtYjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogIzI5ODBiOTtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMSk7XG4gIH1cblxuICAmOjotd2Via2l0LXNsaWRlci10aHVtYjphY3RpdmUge1xuICAgIGN1cnNvcjogZ3JhYmJpbmc7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xuICB9XG5cbiAgJjo6LW1vei1yYW5nZS10aHVtYiB7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBiYWNrZ3JvdW5kOiAjMzQ5OGRiO1xuICAgIGN1cnNvcjogZ3JhYjtcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjZmZmO1xuICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuMTVzIGVhc2U7XG4gIH1cblxuICAmOjotbW96LXJhbmdlLXRodW1iOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAjMjk4MGI5O1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMS4xKTtcbiAgfVxuXG4gICY6Oi1tb3otcmFuZ2UtdGh1bWI6YWN0aXZlIHtcbiAgICBjdXJzb3I6IGdyYWJiaW5nO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMS4yKTtcbiAgfVxuXG4gICY6ZGlzYWJsZWQge1xuICAgIG9wYWNpdHk6IDAuNTtcbiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICB9XG5cbiAgJjpkaXNhYmxlZDo6LXdlYmtpdC1zbGlkZXItdGh1bWIge1xuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gICAgYmFja2dyb3VuZDogIzk1YTVhNjtcbiAgfVxuXG4gICY6ZGlzYWJsZWQ6Oi1tb3otcmFuZ2UtdGh1bWIge1xuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gICAgYmFja2dyb3VuZDogIzk1YTVhNjtcbiAgfVxuYDtcblxuY29uc3QgUHJpb3JpdHlTbGlkZXI6IFJlYWN0LkZDPFByaW9yaXR5U2xpZGVyUHJvcHM+ID0gKHsgXG4gIHByaW9yaXR5LCBcbiAgb25Qcmlvcml0eUNoYW5nZSwgXG4gIGRpc2FibGVkLFxuICBhbGxDYXJkc0NvdW50LFxufSkgPT4ge1xuICAvLyDmu5HlnZflgLzliLDmjpLlkI3nmoTovazmjaLvvIjlt6bkvqc95L2O5LyY5YWI57qn77yM5Y+z5L6nPemrmOS8mOWFiOe6p++8iVxuICBjb25zdCBzbGlkZXJWYWx1ZVRvUmFuayA9IFJlYWN0LnVzZUNhbGxiYWNrKChzbGlkZXJWYWx1ZTogbnVtYmVyLCB0b3RhbENhcmRzOiBudW1iZXIpID0+IHtcbiAgICBpZiAodG90YWxDYXJkcyA8PSAxKSByZXR1cm4gMTtcbiAgICByZXR1cm4gTWF0aC5tYXgoMSwgTWF0aC5taW4odG90YWxDYXJkcywgdG90YWxDYXJkcyAtIHNsaWRlclZhbHVlICsgMSkpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgcmFua1RvU2xpZGVyVmFsdWUgPSBSZWFjdC51c2VDYWxsYmFjaygocmFuazogbnVtYmVyLCB0b3RhbENhcmRzOiBudW1iZXIpID0+IHtcbiAgICBpZiAodG90YWxDYXJkcyA8PSAxKSByZXR1cm4gMTtcbiAgICByZXR1cm4gTWF0aC5tYXgoMSwgTWF0aC5taW4odG90YWxDYXJkcywgdG90YWxDYXJkcyAtIHJhbmsgKyAxKSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBjdXJyZW50U2xpZGVyVmFsdWUgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gcmFua1RvU2xpZGVyVmFsdWUocHJpb3JpdHksIGFsbENhcmRzQ291bnQpO1xuICB9LCBbcHJpb3JpdHksIGFsbENhcmRzQ291bnQsIHJhbmtUb1NsaWRlclZhbHVlXSk7XG5cbiAgY29uc3QgaGFuZGxlU2xpZGVyQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGlmIChkaXNhYmxlZCkgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IHNsaWRlclZhbHVlID0gcGFyc2VJbnQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICBpZiAoaXNOYU4oc2xpZGVyVmFsdWUpKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgbmV3UmFuayA9IHNsaWRlclZhbHVlVG9SYW5rKHNsaWRlclZhbHVlLCBhbGxDYXJkc0NvdW50KTtcbiAgICBvblByaW9yaXR5Q2hhbmdlKG5ld1JhbmspO1xuICB9LCBbYWxsQ2FyZHNDb3VudCwgc2xpZGVyVmFsdWVUb1JhbmssIG9uUHJpb3JpdHlDaGFuZ2UsIGRpc2FibGVkXSk7XG5cbiAgY29uc3QgbWF4U2xpZGVyVmFsdWUgPSBNYXRoLm1heCgxLCBhbGxDYXJkc0NvdW50KTtcblxuICByZXR1cm4gKFxuICAgIDxQcmlvcml0eUNvbnRhaW5lcj5cbiAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywgbWFyZ2luQm90dG9tOiAnOHB4JyB9fT5cbiAgICAgICAgPHNwYW4gc3R5bGU9e3sgZm9udFNpemU6ICcxNHB4JywgZm9udFdlaWdodDogJ2JvbGQnLCBjb2xvcjogJyMyYzNlNTAnIH19PlxuICAgICAgICAgIOS8mOWFiOe6p+aOkuWQjVxuICAgICAgICA8L3NwYW4+XG4gICAgICAgIDxzcGFuIHN0eWxlPXt7IFxuICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsIFxuICAgICAgICAgIGNvbG9yOiAnIzdmOGM4ZCcsIFxuICAgICAgICAgIG1hcmdpbkxlZnQ6ICc4cHgnLFxuICAgICAgICAgIGZvbnRTdHlsZTogJ2l0YWxpYydcbiAgICAgICAgfX0+XG4gICAgICAgICAgKOaLluWKqOiwg+aVtOaOkuWQje+8jOWFs+mXreeql+WPo+aXtuiHquWKqOS/neWtmClcbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxTbGlkZXJXcmFwcGVyPlxuICAgICAgICA8U3R5bGVkU2xpZGVyXG4gICAgICAgICAgdHlwZT1cInJhbmdlXCJcbiAgICAgICAgICBtaW49XCIxXCJcbiAgICAgICAgICBtYXg9e21heFNsaWRlclZhbHVlfVxuICAgICAgICAgIHZhbHVlPXtjdXJyZW50U2xpZGVyVmFsdWV9XG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVNsaWRlckNoYW5nZX1cbiAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIC8+XG4gICAgICA8L1NsaWRlcldyYXBwZXI+XG4gICAgICBcbiAgICAgIDxkaXYgc3R5bGU9e3sgXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JywgXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsIFxuICAgICAgICBtYXJnaW5Ub3A6ICc4cHgnLFxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICBjb2xvcjogJyM3ZjhjOGQnXG4gICAgICB9fT5cbiAgICAgICAgPHNwYW4+5L2O5LyY5YWI57qn77yI56yse2FsbENhcmRzQ291bnR95ZCN77yJPC9zcGFuPlxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4JywgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsIGFsaWduSXRlbXM6ICdjZW50ZXInIH19PlxuICAgICAgICAgIDxzcGFuIHN0eWxlPXt7IGZvbnRXZWlnaHQ6ICdib2xkJywgY29sb3I6ICcjMmMzZTUwJyB9fT5cbiAgICAgICAgICAgIOW9k+WJjeaAu+aOkuWQje+8muesrHtwcmlvcml0eX3lkI1cbiAgICAgICAgICAgIHthbGxDYXJkc0NvdW50ID4gMCAmJiBgIC8g5YWxJHthbGxDYXJkc0NvdW50feW8oOWNoeeJh2B9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNwYW4+6auY5LyY5YWI57qn77yI56ysMeWQje+8iTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvUHJpb3JpdHlDb250YWluZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcmlvcml0eVNsaWRlcjsgIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgQmx1ZXByaW50IGZyb20gJ0BibHVlcHJpbnRqcy9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuaW50ZXJmYWNlIE9mZnNldFNsaWRlclByb3BzIHtcbiAgaW5pdGlhbFByaW9yaXR5OiBudW1iZXI7XG4gIG9uUHJpb3JpdHlDaGFuZ2U6IChuZXdQcmlvcml0eTogbnVtYmVyKSA9PiB2b2lkO1xufVxuXG5jb25zdCBPZmZzZXRTbGlkZXIgPSAoeyBpbml0aWFsUHJpb3JpdHksIG9uUHJpb3JpdHlDaGFuZ2UgfTogT2Zmc2V0U2xpZGVyUHJvcHMpID0+IHtcbiAgY29uc3QgW29mZnNldCwgc2V0T2Zmc2V0XSA9IFJlYWN0LnVzZVN0YXRlKDApO1xuXG4gIGNvbnN0IGhhbmRsZU9mZnNldENoYW5nZSA9IChuZXdPZmZzZXQ6IG51bWJlcikgPT4ge1xuICAgIHNldE9mZnNldChuZXdPZmZzZXQpO1xuICAgIGNvbnN0IG5ld1ByaW9yaXR5ID0gTWF0aC5yb3VuZChpbml0aWFsUHJpb3JpdHkgKiAoMSArIG5ld09mZnNldCAvIDEwMCkpO1xuICAgIG9uUHJpb3JpdHlDaGFuZ2UoTWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCBuZXdQcmlvcml0eSkpKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxTbGlkZXJDb250YWluZXI+XG4gICAgICA8Qmx1ZXByaW50LlNsaWRlclxuICAgICAgICBtaW49ey01MH1cbiAgICAgICAgbWF4PXs1MH1cbiAgICAgICAgc3RlcFNpemU9ezF9XG4gICAgICAgIGxhYmVsU3RlcFNpemU9ezI1fVxuICAgICAgICB2YWx1ZT17b2Zmc2V0fVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlT2Zmc2V0Q2hhbmdlfVxuICAgICAgICBsYWJlbFJlbmRlcmVyPXsodmFsKSA9PiBgJHt2YWx9JWB9XG4gICAgICAvPlxuICAgICAgPE9mZnNldExhYmVsPuWBj+enuzoge29mZnNldCA+PSAwID8gJysnIDogJyd9e29mZnNldH0lPC9PZmZzZXRMYWJlbD5cbiAgICA8L1NsaWRlckNvbnRhaW5lcj5cbiAgKTtcbn07XG5cbmNvbnN0IFNsaWRlckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHdpZHRoOiAxNTBweDtcbiAgZ2FwOiA0cHg7XG5gO1xuXG5jb25zdCBPZmZzZXRMYWJlbCA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgY29sb3I6ICM1YzcwODA7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbmA7XG5cbmV4cG9ydCBkZWZhdWx0IE9mZnNldFNsaWRlcjsgIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgQmx1ZXByaW50IGZyb20gJ0BibHVlcHJpbnRqcy9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBUb29sdGlwIGZyb20gJ34vY29tcG9uZW50cy9Ub29sdGlwJztcbmltcG9ydCBPZmZzZXRTbGlkZXIgZnJvbSAnfi9jb21wb25lbnRzL09mZnNldFNsaWRlcic7XG5cbmludGVyZmFjZSBEZWNrUHJpb3JpdHlJbmZvIHtcbiAgZGVja05hbWU6IHN0cmluZztcbiAgbWVkaWFuUHJpb3JpdHk6IG51bWJlcjtcbiAgY2FyZENvdW50OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGRlY2tQcmlvcml0aWVzOiBSZWNvcmQ8c3RyaW5nLCBEZWNrUHJpb3JpdHlJbmZvPjtcbiAgc2VsZWN0ZWREZWNrPzogc3RyaW5nO1xuICBpc09wZW46IGJvb2xlYW47XG4gIG9uQ2xvc2U6ICgpID0+IHZvaWQ7XG4gIG9uQXBwbHlPZmZzZXQ6IChkZWNrTmFtZTogc3RyaW5nLCBvZmZzZXRQZXJjZW50OiBudW1iZXIpID0+IFByb21pc2U8dm9pZD47XG59XG5cbmNvbnN0IERlY2tQcmlvcml0eU1hbmFnZXIgPSAoe1xuICBkZWNrUHJpb3JpdGllcyxcbiAgc2VsZWN0ZWREZWNrLFxuICBpc09wZW4sXG4gIG9uQ2xvc2UsXG4gIG9uQXBwbHlPZmZzZXQsXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCBbZWRpdGluZ0RlY2ssIHNldEVkaXRpbmdEZWNrXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbdGVtcFByaW9yaXR5LCBzZXRUZW1wUHJpb3JpdHldID0gUmVhY3QudXNlU3RhdGU8bnVtYmVyPig1MCk7XG4gIGNvbnN0IFtvcmlnaW5hbFByaW9yaXR5LCBzZXRPcmlnaW5hbFByaW9yaXR5XSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4oNTApO1xuICBjb25zdCBbaXNBcHBseWluZywgc2V0SXNBcHBseWluZ10gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG5cbiAgY29uc3Qgc29ydGVkRGVja3MgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhkZWNrUHJpb3JpdGllcykuc29ydCgoYSwgYikgPT4ge1xuICAgICAgLy8g5YW25LuW5oyJ54Wn5LyY5YWI57qn6ZmN5bqP5o6S5YiXXG4gICAgICByZXR1cm4gYi5tZWRpYW5Qcmlvcml0eSAtIGEubWVkaWFuUHJpb3JpdHk7XG4gICAgfSk7XG4gIH0sIFtkZWNrUHJpb3JpdGllc10pO1xuXG4gIGNvbnN0IGhhbmRsZUVkaXRDbGljayA9IChkZWNrOiBEZWNrUHJpb3JpdHlJbmZvKSA9PiB7XG4gICAgc2V0RWRpdGluZ0RlY2soZGVjay5kZWNrTmFtZSk7XG4gICAgc2V0VGVtcFByaW9yaXR5KGRlY2subWVkaWFuUHJpb3JpdHkpO1xuICAgIHNldE9yaWdpbmFsUHJpb3JpdHkoZGVjay5tZWRpYW5Qcmlvcml0eSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlU2F2ZSA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAoZWRpdGluZ0RlY2sgJiYgb25BcHBseU9mZnNldCkge1xuICAgICAgc2V0SXNBcHBseWluZyh0cnVlKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIOiuoeeul+WBj+enu+eZvuWIhuavlO+8mnRlbXBQcmlvcml0eSDmmK/nm67moIfkvJjlhYjnuqfvvIxvcmlnaW5hbFByaW9yaXR5IOaYr+WOn+Wni+S8mOWFiOe6p1xuICAgICAgICBjb25zdCBvZmZzZXRQZXJjZW50ID0gKCh0ZW1wUHJpb3JpdHkgLSBvcmlnaW5hbFByaW9yaXR5KSAvIG9yaWdpbmFsUHJpb3JpdHkpICogMTAwO1xuICAgICAgICBhd2FpdCBvbkFwcGx5T2Zmc2V0KGVkaXRpbmdEZWNrLCBvZmZzZXRQZXJjZW50KTtcbiAgICAgICAgc2V0RWRpdGluZ0RlY2sobnVsbCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCflupTnlKjniYznu4TlgY/np7vlpLHotKU6JywgZXJyb3IpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNBcHBseWluZyhmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNhbmNlbCA9ICgpID0+IHtcbiAgICBzZXRFZGl0aW5nRGVjayhudWxsKTtcbiAgICBzZXRJc0FwcGx5aW5nKGZhbHNlKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxCbHVlcHJpbnQuRGlhbG9nXG4gICAgICBpc09wZW49e2lzT3Blbn1cbiAgICAgIG9uQ2xvc2U9e29uQ2xvc2V9XG4gICAgICB0aXRsZT1cIueJjOe7hOS8mOWFiOe6p+euoeeQhlwiXG4gICAgICBzdHlsZT17eyB3aWR0aDogJzYwMHB4JyB9fVxuICAgID5cbiAgICAgIDxEaWFsb2dDb250ZW50IGNsYXNzTmFtZT1cImJwMy1kaWFsb2ctYm9keVwiPlxuICAgICAgICB7T2JqZWN0LmtleXMoZGVja1ByaW9yaXRpZXMpLmxlbmd0aCA9PT0gMCA/IChcbiAgICAgICAgICA8U3Bpbm5lckNvbnRhaW5lcj5cbiAgICAgICAgICAgIDxCbHVlcHJpbnQuU3Bpbm5lciAvPlxuICAgICAgICAgIDwvU3Bpbm5lckNvbnRhaW5lcj5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8Qmx1ZXByaW50LkhUTUxUYWJsZSBjbGFzc05hbWU9XCJicDMtaHRtbC10YWJsZSBicDMtaHRtbC10YWJsZS1zdHJpcGVkXCIgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fT5cbiAgICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgIDx0aD7niYznu4TlkI3np7A8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD7ljaHniYfmlbDph488L3RoPlxuICAgICAgICAgICAgICAgIDx0aD7kuK3kvY3mlbDkvJjlhYjnuqc8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD7mk43kvZw8L3RoPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAge3NvcnRlZERlY2tzLm1hcCgoZGVjaykgPT4gKFxuICAgICAgICAgICAgICAgIDx0ciBrZXk9e2RlY2suZGVja05hbWV9IGNsYXNzTmFtZT17c2VsZWN0ZWREZWNrID09PSBkZWNrLmRlY2tOYW1lID8gJ3NlbGVjdGVkJyA6ICcnfT5cbiAgICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgICAgPERlY2tOYW1lPlxuICAgICAgICAgICAgICAgICAgICAgIHtkZWNrLmRlY2tOYW1lfVxuICAgICAgICAgICAgICAgICAgICA8L0RlY2tOYW1lPlxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZD57ZGVjay5jYXJkQ291bnR9PC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgICAge2VkaXRpbmdEZWNrID09PSBkZWNrLmRlY2tOYW1lID8gKFxuICAgICAgICAgICAgICAgICAgICAgIDxQcmlvcml0eUVkaXRvcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxPZmZzZXRTbGlkZXIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxQcmlvcml0eT17b3JpZ2luYWxQcmlvcml0eX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25Qcmlvcml0eUNoYW5nZT17c2V0VGVtcFByaW9yaXR5fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L1ByaW9yaXR5RWRpdG9yPlxuICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgIDxQcmlvcml0eURpc3BsYXk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8UHJpb3JpdHlCYXIgcHJpb3JpdHk9e2RlY2subWVkaWFuUHJpb3JpdHl9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57ZGVjay5tZWRpYW5Qcmlvcml0eX0lPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDwvUHJpb3JpdHlEaXNwbGF5PlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgICAge2VkaXRpbmdEZWNrID09PSBkZWNrLmRlY2tOYW1lID8gKFxuICAgICAgICAgICAgICAgICAgICAgIDxCbHVlcHJpbnQuQnV0dG9uR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qmx1ZXByaW50LkJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPXtpc0FwcGx5aW5nID8gPEJsdWVwcmludC5TcGlubmVyIHNpemU9ezEyfSAvPiA6IFwidGlja1wifVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnQ9XCJzdWNjZXNzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc21hbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlU2F2ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzQXBwbHlpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJsdWVwcmludC5CdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1cImNyb3NzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50PVwiZGFuZ2VyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc21hbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2FuY2VsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17aXNBcHBseWluZ31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9CbHVlcHJpbnQuQnV0dG9uR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgPFRvb2x0aXAgY29udGVudD1cIuiwg+aVtOeJjOe7hOWGheaJgOacieWNoeeJh+eahOS8mOWFiOe6p1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJsdWVwcmludC5CdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1cImVkaXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBzbWFsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVFZGl0Q2xpY2soZGVjayl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkZWNrLmNhcmRDb3VudCA9PT0gMH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgPC9CbHVlcHJpbnQuSFRNTFRhYmxlPlxuICAgICAgICApfVxuICAgICAgICBcbiAgICAgICAgPEluZm9TZWN0aW9uPlxuICAgICAgICAgIDxCbHVlcHJpbnQuQ2FsbG91dCBpbnRlbnQ9XCJwcmltYXJ5XCIgaWNvbj1cImluZm8tc2lnblwiPlxuICAgICAgICAgICAgPGg0PueJjOe7hOS8mOWFiOe6p+ivtOaYjjwvaDQ+XG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgIDxsaT7mr4/kuKrniYznu4TnmoTkvJjlhYjnuqfmmK/lhbbmiYDmnInljaHniYfkvJjlhYjnuqfnmoTkuK3kvY3mlbDjgII8L2xpPlxuICAgICAgICAgICAgICA8bGk+5Zyo57yW6L6R5qih5byP5LiL77yM5L2/55So5ruR5Z2X6K6+572u5LiA5LiqKirlgY/np7vph48qKu+8iC01MCUg6IezICs1MCXvvInjgII8L2xpPlxuICAgICAgICAgICAgICA8bGk+5L+d5a2Y5ZCO77yM6K+l54mM57uE5YaF5omA5pyJ5Y2h54mH55qE5LyY5YWI57qn5bCG5oyJ5q2k5YGP56e76YeP6L+b6KGM5om56YeP6LCD5pW044CCPC9saT5cbiAgICAgICAgICAgICAgPGxpPuS8mOWFiOe6p+i2iumrmO+8jOWNoeeJh+WcqOa3t+WQiOWtpuS5oOmYn+WIl+S4rei2iumdoOWJjeOAgjwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDwvQmx1ZXByaW50LkNhbGxvdXQ+XG4gICAgICAgIDwvSW5mb1NlY3Rpb24+XG4gICAgICA8L0RpYWxvZ0NvbnRlbnQ+XG4gICAgICBcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnAzLWRpYWxvZy1mb290ZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJicDMtZGlhbG9nLWZvb3Rlci1hY3Rpb25zXCI+XG4gICAgICAgICAgPEJsdWVwcmludC5CdXR0b24gb25DbGljaz17b25DbG9zZX0+5YWz6ZetPC9CbHVlcHJpbnQuQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvQmx1ZXByaW50LkRpYWxvZz5cbiAgKTtcbn07XG5cbmNvbnN0IERpYWxvZ0NvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICBtYXgtaGVpZ2h0OiA1MDBweDtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgXG4gIHRyLnNlbGVjdGVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE5LCAxMjQsIDE4OSwgMC4xKTtcbiAgfVxuYDtcblxuY29uc3QgRGVja05hbWUgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmb250LXdlaWdodDogNTAwO1xuYDtcblxuY29uc3QgUHJpb3JpdHlEaXNwbGF5ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiA4cHg7XG5gO1xuXG5jb25zdCBQcmlvcml0eUJhciA9IHN0eWxlZC5kaXY8eyBwcmlvcml0eTogbnVtYmVyIH0+YFxuICB3aWR0aDogNTBweDtcbiAgaGVpZ2h0OiA2cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNlMWU4ZWQ7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBcbiAgJjo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIHRvcDogMDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6ICR7cHJvcHMgPT4gcHJvcHMucHJpb3JpdHl9JTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3Byb3BzID0+IHtcbiAgICAgIGlmIChwcm9wcy5wcmlvcml0eSA+PSA3MCkgcmV0dXJuICcjMGY5OTYwJztcbiAgICAgIGlmIChwcm9wcy5wcmlvcml0eSA+PSA0MCkgcmV0dXJuICcjZDY5ZTJlJztcbiAgICAgIHJldHVybiAnI2RiMzczNyc7XG4gICAgfX07XG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgIHRyYW5zaXRpb246IHdpZHRoIDAuM3MgZWFzZTtcbiAgfVxuYDtcblxuY29uc3QgUHJpb3JpdHlFZGl0b3IgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgSW5mb1NlY3Rpb24gPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiAyMHB4O1xuYDtcblxuY29uc3QgU3Bpbm5lckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBoZWlnaHQ6IDEwMHB4O1xuYDtcblxuZXhwb3J0IGRlZmF1bHQgRGVja1ByaW9yaXR5TWFuYWdlcjsgIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmV2aWV3TW9kZXMsIFNlc3Npb24gfSBmcm9tICd+L21vZGVscy9zZXNzaW9uJztcbmltcG9ydCB7IGdlbmVyYXRlTmV3U2Vzc2lvbiB9IGZyb20gJ34vcXVlcmllcyc7XG5cbi8qKlxuICogRmluZCB0aGUgbGFzdCBzZXNzaW9uIHdpdGggbWF0Y2hpbmcgcmV2aWV3IG1vZGUgYW5kIHJldHVybnMgaXQuXG4gKiBJZiBubyBtYXRjaGluZyBzZXNzaW9uIGV4aXN0cywgZ2VuZXJhdGUgYSBuZXcgc2Vzc2lvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFJlc29sdmVkQ2FyZERhdGEgPSAoe1xuICBzZXNzaW9ucyxcbiAgcmV2aWV3TW9kZSxcbn06IHtcbiAgc2Vzc2lvbnM6IFNlc3Npb25bXTtcbiAgcmV2aWV3TW9kZTogUmV2aWV3TW9kZXM7XG59KSA9PiB7XG4gIGxldCBsYXN0U2Vzc2lvbldpdGhNYXRjaGluZ1Jldmlld01vZGU6IFNlc3Npb24gfCB1bmRlZmluZWQ7XG5cbiAgZm9yIChsZXQgaSA9IHNlc3Npb25zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgZGF0YSA9IHNlc3Npb25zW2ldO1xuICAgIGlmIChkYXRhLnJldmlld01vZGUgPT09IHJldmlld01vZGUpIHtcbiAgICAgIGxhc3RTZXNzaW9uV2l0aE1hdGNoaW5nUmV2aWV3TW9kZSA9IGRhdGE7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAobGFzdFNlc3Npb25XaXRoTWF0Y2hpbmdSZXZpZXdNb2RlKSB7XG4gICAgcmV0dXJuIGxhc3RTZXNzaW9uV2l0aE1hdGNoaW5nUmV2aWV3TW9kZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBuZXdDYXJkID0gZ2VuZXJhdGVOZXdTZXNzaW9uKHsgcmV2aWV3TW9kZSB9KTtcbiAgICByZXR1cm4gbmV3Q2FyZDtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ3VycmVudENhcmREYXRhKHtcbiAgY3VycmVudENhcmRSZWZVaWQsXG4gIHNlc3Npb25zLFxufToge1xuICBjdXJyZW50Q2FyZFJlZlVpZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBzZXNzaW9uczogU2Vzc2lvbltdO1xufSkge1xuICBjb25zdCBsYXRlc3RTZXNzaW9uID0gc2Vzc2lvbnNbc2Vzc2lvbnMubGVuZ3RoIC0gMV0gYXMgU2Vzc2lvbiB8IHVuZGVmaW5lZDtcbiAgY29uc3QgW2N1cnJlbnRDYXJkRGF0YSwgc2V0Q3VycmVudENhcmREYXRhXSA9IFJlYWN0LnVzZVN0YXRlPFNlc3Npb24gfCB1bmRlZmluZWQ+KGxhdGVzdFNlc3Npb24pO1xuICBjb25zdCBbcmV2aWV3TW9kZSwgc2V0UmV2aWV3TW9kZV0gPSBSZWFjdC51c2VTdGF0ZTxSZXZpZXdNb2RlcyB8IHVuZGVmaW5lZD4oXG4gICAgbGF0ZXN0U2Vzc2lvbj8ucmV2aWV3TW9kZVxuICApO1xuXG4gIC8vIENyZWF0ZSBzZXBhcmF0ZSByZXZpZXcgbW9kZSBvdmVycmlkZSB0b2dnbGUgVGhpcyBpcyB0byBrZWVwIHRoZSBkZWZhdWx0XG4gIC8vIGNhc2Ugb2YgcmV2aWV3IG1vZGUgYmVpbmcgdGhlIHNhbWUgYXMgdGhlIGxhdGVzdCBzZXNzaW9uIGVhc3kgdG8gdW5kZXJzdGFuZFxuICBjb25zdCBbcmV2aWV3TW9kZU92ZXJyaWRlLCBzZXRSZXZpZXdNb2RlT3ZlcnJpZGVdID0gUmVhY3QudXNlU3RhdGU8UmV2aWV3TW9kZXMgfCB1bmRlZmluZWQ+KCk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWN1cnJlbnRDYXJkUmVmVWlkKSB7XG4gICAgICBzZXRDdXJyZW50Q2FyZERhdGEodW5kZWZpbmVkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocmV2aWV3TW9kZU92ZXJyaWRlICYmIHJldmlld01vZGVPdmVycmlkZSAhPT0gbGF0ZXN0U2Vzc2lvbj8ucmV2aWV3TW9kZSkge1xuICAgICAgY29uc3QgcmVzb2x2ZWRDYXJkRGF0YSA9IGdldFJlc29sdmVkQ2FyZERhdGEoe1xuICAgICAgICBzZXNzaW9ucyxcbiAgICAgICAgcmV2aWV3TW9kZTogcmV2aWV3TW9kZU92ZXJyaWRlLFxuICAgICAgfSk7XG4gICAgICBzZXRDdXJyZW50Q2FyZERhdGEocmVzb2x2ZWRDYXJkRGF0YSk7XG4gICAgICBzZXRSZXZpZXdNb2RlKHJlc29sdmVkQ2FyZERhdGEucmV2aWV3TW9kZSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXRDdXJyZW50Q2FyZERhdGEobGF0ZXN0U2Vzc2lvbik7XG4gICAgc2V0UmV2aWV3TW9kZShsYXRlc3RTZXNzaW9uPy5yZXZpZXdNb2RlKTtcbiAgfSwgW3Jldmlld01vZGUsIHNlc3Npb25zLCBjdXJyZW50Q2FyZFJlZlVpZCwgbGF0ZXN0U2Vzc2lvbiwgcmV2aWV3TW9kZU92ZXJyaWRlXSk7XG5cbiAgLy8gSGVyZSB3ZSBqdXN0IG5lZWQgdG8gcmVzZXQgdGhlIG92ZXJyaWRlIGVhY2ggdGltZSB3ZSBjaGFuZ2UgY2FyZHNcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRSZXZpZXdNb2RlT3ZlcnJpZGUodW5kZWZpbmVkKTtcbiAgICBzZXRSZXZpZXdNb2RlKGxhdGVzdFNlc3Npb24/LnJldmlld01vZGUpO1xuICB9LCBbY3VycmVudENhcmRSZWZVaWQsIGxhdGVzdFNlc3Npb25dKTtcblxuICByZXR1cm4ge1xuICAgIGN1cnJlbnRDYXJkRGF0YSxcbiAgICByZXZpZXdNb2RlLFxuICAgIHNldFJldmlld01vZGVPdmVycmlkZSxcbiAgfTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIEJsdWVwcmludCBmcm9tICdAYmx1ZXByaW50anMvY29yZSc7XG5pbXBvcnQgKiBhcyBCbHVlcHJpbnRTZWxlY3QgZnJvbSAnQGJsdWVwcmludGpzL3NlbGVjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgdXNlQmxvY2tJbmZvIGZyb20gJ34vaG9va3MvdXNlQmxvY2tJbmZvJztcbmltcG9ydCAqIGFzIGFzeW5jVXRpbHMgZnJvbSAnfi91dGlscy9hc3luYyc7XG5pbXBvcnQgKiBhcyBkYXRlVXRpbHMgZnJvbSAnfi91dGlscy9kYXRlJztcbmltcG9ydCAqIGFzIHN0cmluZ1V0aWxzIGZyb20gJ34vdXRpbHMvc3RyaW5nJztcbmltcG9ydCBMb3R0aWUgZnJvbSAncmVhY3QtbG90dGllJztcbmltcG9ydCBkb25lQW5pbWF0aW9uRGF0YSBmcm9tICd+L2xvdHRpZXMvZG9uZS5qc29uJztcbmltcG9ydCBUb29sdGlwIGZyb20gJ34vY29tcG9uZW50cy9Ub29sdGlwJztcbmltcG9ydCBtZWRpYVF1ZXJpZXMgZnJvbSAnfi91dGlscy9tZWRpYVF1ZXJpZXMnO1xuaW1wb3J0IHsgdXNlWkluZGV4Rml4IH0gZnJvbSAnfi9ob29rcy91c2VaSW5kZXhGaXgnO1xuaW1wb3J0IHsgdXNlRm9jdXNGaXggfSBmcm9tICd+L2hvb2tzL3VzZUZvY3VzRml4JztcblxuaW1wb3J0IENhcmRCbG9jayBmcm9tICd+L2NvbXBvbmVudHMvb3ZlcmxheS9DYXJkQmxvY2snO1xuaW1wb3J0IEZvb3RlciBmcm9tICd+L2NvbXBvbmVudHMvb3ZlcmxheS9Gb290ZXInO1xuaW1wb3J0IFByaW9yaXR5U2xpZGVyIGZyb20gJ34vY29tcG9uZW50cy9vdmVybGF5L1ByaW9yaXR5U2xpZGVyJztcbmltcG9ydCBCdXR0b25UYWdzIGZyb20gJ34vY29tcG9uZW50cy9CdXR0b25UYWdzJztcbmltcG9ydCBEZWNrUHJpb3JpdHlNYW5hZ2VyIGZyb20gJ34vY29tcG9uZW50cy9EZWNrUHJpb3JpdHlNYW5hZ2VyJztcbmltcG9ydCB1c2VEZWNrUHJpb3JpdHkgZnJvbSAnfi9ob29rcy91c2VEZWNrUHJpb3JpdHknO1xuaW1wb3J0IHsgQ29tcGxldGVSZWNvcmRzLCBJbnRlcnZhbE11bHRpcGxpZXJUeXBlLCBSZXZpZXdNb2RlcyB9IGZyb20gJ34vbW9kZWxzL3Nlc3Npb24nO1xuaW1wb3J0IHVzZUN1cnJlbnRDYXJkRGF0YSBmcm9tICd+L2hvb2tzL3VzZUN1cnJlbnRDYXJkRGF0YSc7XG5pbXBvcnQgeyBnZW5lcmF0ZU5ld1Nlc3Npb24gfSBmcm9tICd+L3F1ZXJpZXMnO1xuaW1wb3J0IHsgQ29tcGxldGlvblN0YXR1cywgVG9kYXksIFJlbmRlck1vZGUgfSBmcm9tICd+L21vZGVscy9wcmFjdGljZSc7XG5pbXBvcnQgeyBoYW5kbGVQcmFjdGljZVByb3BzIH0gZnJvbSAnfi9hcHAnO1xuaW1wb3J0IHsgdXNlU2FmZUNvbnRleHQgfSBmcm9tICd+L2hvb2tzL3VzZVNhZmVDb250ZXh0JztcbmltcG9ydCB7IGJ1bGtTYXZlUmFua2luZ0NoYW5nZXMsIGdldENhcmRSYW5rIH0gZnJvbSAnfi9xdWVyaWVzL3NhdmUnO1xuXG5pbnRlcmZhY2UgTWFpbkNvbnRleHRQcm9wcyB7XG4gIHJldmlld01vZGU6IFJldmlld01vZGVzIHwgdW5kZWZpbmVkO1xuICBzZXRSZXZpZXdNb2RlT3ZlcnJpZGU6IFJlYWN0LkRpc3BhdGNoPFJlYWN0LlNldFN0YXRlQWN0aW9uPFJldmlld01vZGVzIHwgdW5kZWZpbmVkPj47XG4gIGludGVydmFsTXVsdGlwbGllcjogbnVtYmVyO1xuICBzZXRJbnRlcnZhbE11bHRpcGxpZXI6IChtdWx0aXBsaWVyOiBudW1iZXIpID0+IHZvaWQ7XG4gIGludGVydmFsTXVsdGlwbGllclR5cGU6IEludGVydmFsTXVsdGlwbGllclR5cGU7XG4gIHNldEludGVydmFsTXVsdGlwbGllclR5cGU6ICh0eXBlOiBJbnRlcnZhbE11bHRpcGxpZXJUeXBlKSA9PiB2b2lkO1xuICBvblByYWN0aWNlQ2xpY2s6IChwcm9wczogaGFuZGxlUHJhY3RpY2VQcm9wcykgPT4gdm9pZDtcbiAgdG9kYXk6IFRvZGF5O1xuICBzZWxlY3RlZFRhZzogc3RyaW5nO1xuICBjdXJyZW50SW5kZXg6IG51bWJlcjtcbiAgcmVuZGVyTW9kZTogUmVuZGVyTW9kZTtcbiAgc2V0UmVuZGVyTW9kZTogKHRhZzogc3RyaW5nLCBtb2RlOiBSZW5kZXJNb2RlKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgTWFpbkNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PE1haW5Db250ZXh0UHJvcHM+KHt9IGFzIE1haW5Db250ZXh0UHJvcHMpO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBpc09wZW46IGJvb2xlYW47XG4gIHRhZ3NMaXN0OiBzdHJpbmdbXTtcbiAgc2VsZWN0ZWRUYWc6IHN0cmluZztcbiAgb25DbG9zZUNhbGxiYWNrOiAoKSA9PiB2b2lkO1xuICBwcmFjdGljZURhdGE6IENvbXBsZXRlUmVjb3JkcztcbiAgdG9kYXk6IFRvZGF5O1xuICBoYW5kbGVQcmFjdGljZUNsaWNrOiAocHJvcHM6IGhhbmRsZVByYWN0aWNlUHJvcHMpID0+IHZvaWQ7XG4gIGhhbmRsZU1lbW9UYWdDaGFuZ2U6ICh0YWc6IHN0cmluZykgPT4gdm9pZDtcbiAgaGFuZGxlUmV2aWV3TW9yZUNsaWNrOiAoKSA9PiB2b2lkO1xuICBpc0NyYW1taW5nOiBib29sZWFuO1xuICBzZXRJc0NyYW1taW5nOiAoaXNDcmFtbWluZzogYm9vbGVhbikgPT4gdm9pZDtcbiAgcnRsRW5hYmxlZDogYm9vbGVhbjtcbiAgc2V0UmVuZGVyTW9kZTogKHRhZzogc3RyaW5nLCBtb2RlOiBSZW5kZXJNb2RlKSA9PiB2b2lkO1xuICBkYXRhUGFnZVRpdGxlOiBzdHJpbmc7XG4gIG9uRGF0YVJlZnJlc2g6ICgpID0+IHZvaWQ7XG4gIGFsbENhcmRzQ291bnQ6IG51bWJlcjtcbiAgcHJpb3JpdHlPcmRlcjogc3RyaW5nW107XG4gIGFsbENhcmRVaWRzOiBzdHJpbmdbXTtcbiAgY2FyZFVpZHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPjtcbiAgZGVmYXVsdFByaW9yaXR5OiBudW1iZXI7XG4gIGZzcnNFbmFibGVkOiBib29sZWFuO1xuICBkZWNrUHJpb3JpdGllczogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgaXNHbG9iYWxNaXhlZE1vZGU6IGJvb2xlYW47XG4gIHNldElzR2xvYmFsTWl4ZWRNb2RlOiAobW9kZTogYm9vbGVhbikgPT4gdm9pZDtcbn1cblxuY29uc3QgUHJhY3RpY2VPdmVybGF5ID0gKHtcbiAgaXNPcGVuLFxuICB0YWdzTGlzdCxcbiAgc2VsZWN0ZWRUYWcsXG4gIG9uQ2xvc2VDYWxsYmFjayxcbiAgcHJhY3RpY2VEYXRhLFxuICB0b2RheSxcbiAgaGFuZGxlUHJhY3RpY2VDbGljayxcbiAgaGFuZGxlTWVtb1RhZ0NoYW5nZSxcbiAgaGFuZGxlUmV2aWV3TW9yZUNsaWNrLFxuICBpc0NyYW1taW5nLFxuICBzZXRJc0NyYW1taW5nLFxuICBydGxFbmFibGVkLFxuICBzZXRSZW5kZXJNb2RlLFxuICBkYXRhUGFnZVRpdGxlLFxuICBvbkRhdGFSZWZyZXNoLFxuICBhbGxDYXJkc0NvdW50LFxuICBwcmlvcml0eU9yZGVyLFxuICBhbGxDYXJkVWlkcyxcbiAgY2FyZFVpZHMsXG4gIGRlZmF1bHRQcmlvcml0eSxcbiAgZnNyc0VuYWJsZWQsXG4gIGRlY2tQcmlvcml0aWVzLFxuICBpc0dsb2JhbE1peGVkTW9kZSxcbiAgc2V0SXNHbG9iYWxNaXhlZE1vZGUsXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB0b2RheVNlbGVjdGVkVGFnID0gdG9kYXkudGFnc1tzZWxlY3RlZFRhZ10gfHwgeyBjb21wbGV0ZWQ6IDAsIGR1ZVVpZHM6IFtdLCBuZXdVaWRzOiBbXSB9O1xuICBjb25zdCBjb21wbGV0ZWRUb2RheUNvdW50ID0gdG9kYXlTZWxlY3RlZFRhZy5jb21wbGV0ZWQ7XG4gIFxuICAvLyDwn5qAIOS/ruaUue+8muagueaNrua3t+WQiOWtpuS5oOaooeW8j+eUn+aIkOS4jeWQjOeahOe7g+S5oOmYn+WIl1xuICBjb25zdCBwcmFjdGljZUNhcmRVaWRzID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IGNhcmRVaWRzVG9QcmFjdGljZTogc3RyaW5nW10gPSBbXTtcblxuICAgIGlmIChpc0dsb2JhbE1peGVkTW9kZSkge1xuICAgICAgLy8g5YWo5bGA5re35ZCI5qih5byP77ya5LuO5omA5pyJ54mM57uE5pS26ZuG5Y2h54mHXG4gICAgICBjYXJkVWlkc1RvUHJhY3RpY2UgPSB0YWdzTGlzdC5mbGF0TWFwKHRhZyA9PiB7XG4gICAgICAgIGNvbnN0IHRhZ0RhdGEgPSB0b2RheS50YWdzW3RhZ107XG4gICAgICAgIHJldHVybiB0YWdEYXRhID8gWy4uLnRhZ0RhdGEuZHVlVWlkcywgLi4udGFnRGF0YS5uZXdVaWRzXSA6IFtdO1xuICAgICAgfSk7XG4gICAgICAvLyDljrvph41cbiAgICAgIGNhcmRVaWRzVG9QcmFjdGljZSA9IFsuLi5uZXcgU2V0KGNhcmRVaWRzVG9QcmFjdGljZSldO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyDljZXniYznu4TmqKHlvI/vvJrku4XmmL7npLrlvZPliY3pgInkuK3niYznu4TnmoTljaHniYdcbiAgICAgIGNhcmRVaWRzVG9QcmFjdGljZSA9IFsuLi50b2RheVNlbGVjdGVkVGFnLmR1ZVVpZHMsIC4uLnRvZGF5U2VsZWN0ZWRUYWcubmV3VWlkc107XG4gICAgfVxuICAgIFxuICAgIC8vIOaMieWFqOWxgOS8mOWFiOe6p+aOkuW6j1xuICAgIGlmIChwcmlvcml0eU9yZGVyLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHJhbmtNYXAgPSBuZXcgTWFwKHByaW9yaXR5T3JkZXIubWFwKCh1aWQsIGkpID0+IFt1aWQsIGldKSk7XG4gICAgICBjb25zdCBnZXRSYW5rID0gKHVpZDogc3RyaW5nKSA9PiByYW5rTWFwLmdldCh1aWQpID8/IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgcmV0dXJuIGNhcmRVaWRzVG9QcmFjdGljZS5zb3J0KChhLCBiKSA9PiBnZXRSYW5rKGEpIC0gZ2V0UmFuayhiKSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBjYXJkVWlkc1RvUHJhY3RpY2U7XG4gIH0sIFtpc0dsb2JhbE1peGVkTW9kZSwgdGFnc0xpc3QsIHRvZGF5LnRhZ3MsIHRvZGF5U2VsZWN0ZWRUYWcuZHVlVWlkcywgdG9kYXlTZWxlY3RlZFRhZy5uZXdVaWRzLCBwcmlvcml0eU9yZGVyXSk7XG5cbiAgY29uc3QgcmVuZGVyTW9kZSA9IHRvZGF5U2VsZWN0ZWRUYWcucmVuZGVyTW9kZTtcblxuICBjb25zdCBbY3VycmVudEluZGV4LCBzZXRDdXJyZW50SW5kZXhdID0gUmVhY3QudXNlU3RhdGUoMCk7XG5cbiAgY29uc3QgaXNGaXJzdCA9IGN1cnJlbnRJbmRleCA9PT0gMDtcblxuICBjb25zdCBjdXJyZW50Q2FyZFJlZlVpZCA9IHByYWN0aWNlQ2FyZFVpZHNbY3VycmVudEluZGV4XSBhcyBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3Qgc2Vzc2lvbnMgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gY3VycmVudENhcmRSZWZVaWQgPyBwcmFjdGljZURhdGFbY3VycmVudENhcmRSZWZVaWRdIHx8IFtdIDogW107XG4gIH0sIFtjdXJyZW50Q2FyZFJlZlVpZCwgcHJhY3RpY2VEYXRhXSk7XG4gIGNvbnN0IHsgY3VycmVudENhcmREYXRhLCByZXZpZXdNb2RlLCBzZXRSZXZpZXdNb2RlT3ZlcnJpZGUgfSA9IHVzZUN1cnJlbnRDYXJkRGF0YSh7XG4gICAgY3VycmVudENhcmRSZWZVaWQsXG4gICAgc2Vzc2lvbnMsXG4gIH0pO1xuXG4gIGNvbnN0IHRvdGFsQ2FyZHNDb3VudCA9IHRvZGF5U2VsZWN0ZWRUYWcubmV3ICsgdG9kYXlTZWxlY3RlZFRhZy5kdWU7XG4gIGNvbnN0IGhhc0NhcmRzID0gdG90YWxDYXJkc0NvdW50ID4gMDtcbiAgXG4gIGNvbnN0IGlzRG9uZSA9IHRvZGF5U2VsZWN0ZWRUYWcuc3RhdHVzID09PSBDb21wbGV0aW9uU3RhdHVzLkZpbmlzaGVkIHx8ICFjdXJyZW50Q2FyZERhdGE7XG5cbiAgY29uc3QgbmV3Rml4ZWRTZXNzaW9uRGVmYXVsdHMgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+IGdlbmVyYXRlTmV3U2Vzc2lvbih7IHJldmlld01vZGU6IFJldmlld01vZGVzLkZpeGVkSW50ZXJ2YWwgfSksXG4gICAgW11cbiAgKTtcbiAgY29uc3QgW2ludGVydmFsTXVsdGlwbGllciwgc2V0SW50ZXJ2YWxNdWx0aXBsaWVyXSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4oXG4gICAgY3VycmVudENhcmREYXRhPy5pbnRlcnZhbE11bHRpcGxpZXIgfHwgKG5ld0ZpeGVkU2Vzc2lvbkRlZmF1bHRzLmludGVydmFsTXVsdGlwbGllciBhcyBudW1iZXIpXG4gICk7XG4gIGNvbnN0IFtpbnRlcnZhbE11bHRpcGxpZXJUeXBlLCBzZXRJbnRlcnZhbE11bHRpcGxpZXJUeXBlXSA9XG4gICAgUmVhY3QudXNlU3RhdGU8SW50ZXJ2YWxNdWx0aXBsaWVyVHlwZT4oXG4gICAgICBjdXJyZW50Q2FyZERhdGE/LmludGVydmFsTXVsdGlwbGllclR5cGUgfHxcbiAgICAgICAgKG5ld0ZpeGVkU2Vzc2lvbkRlZmF1bHRzLmludGVydmFsTXVsdGlwbGllclR5cGUgYXMgSW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSlcbiAgICApO1xuXG4gIC8vIOWNj+WQjOaOkuWQjeezu+e7n+eKtuaAgeeuoeeQhlxuICBjb25zdCBbcmFua2luZ0NoYW5nZXMsIHNldFJhbmtpbmdDaGFuZ2VzXSA9IFJlYWN0LnVzZVN0YXRlPFJlY29yZDxzdHJpbmcsIG51bWJlcj4+KHt9KTtcbiAgY29uc3QgW2hhc1Vuc2F2ZWRDaGFuZ2VzLCBzZXRIYXNVbnNhdmVkQ2hhbmdlc10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIFxuICAvLyDniYznu4TkvJjlhYjnuqfnrqHnkIZcbiAgY29uc3QgW3Nob3dEZWNrUHJpb3JpdHlNYW5hZ2VyLCBzZXRTaG93RGVja1ByaW9yaXR5TWFuYWdlcl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIFxuICAvLyDwn5qAIOaWsOWinu+8mueJjOe7hOWBj+enu+WkhOeQhuWHveaVsFxuICBjb25zdCBoYW5kbGVEZWNrT2Zmc2V0QXBwbHkgPSBSZWFjdC51c2VDYWxsYmFjayhhc3luYyAoZGVja05hbWU6IHN0cmluZywgb2Zmc2V0UGVyY2VudDogbnVtYmVyKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIDEuIOiOt+WPluivpeeJjOe7hOeahOaJgOacieWNoeeJh1VJRFxuICAgICAgY29uc3QgZGVja0NhcmRVaWRzID0gY2FyZFVpZHNbZGVja05hbWVdIHx8IFtdO1xuICAgICAgaWYgKGRlY2tDYXJkVWlkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKGDniYznu4QgJHtkZWNrTmFtZX0g5rKh5pyJ5Y2h54mH77yM6Lez6L+H5YGP56e75pON5L2cYCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gMi4g5Yib5bu6cmFua01hcOS7peS+v+W/q+mAn+afpeaJvuW9k+WJjeaOkuWQjVxuICAgICAgY29uc3QgcmFua01hcCA9IG5ldyBNYXAocHJpb3JpdHlPcmRlci5tYXAoKHVpZCwgaSkgPT4gW3VpZCwgaSArIDFdKSk7XG4gICAgICBcbiAgICAgIC8vIDMuIOiuoeeul+avj+W8oOWNoeeahOaWsOaOkuWQjVxuICAgICAgY29uc3QgcmFua2luZ0NoYW5nZXM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbiAgICAgIFxuICAgICAgZm9yIChjb25zdCBjYXJkVWlkIG9mIGRlY2tDYXJkVWlkcykge1xuICAgICAgICBjb25zdCBjdXJyZW50UmFuayA9IHJhbmtNYXAuZ2V0KGNhcmRVaWQpIHx8IE1hdGguY2VpbChhbGxDYXJkc0NvdW50ICogKDEgLSBkZWZhdWx0UHJpb3JpdHkgLyAxMDApKTtcbiAgICAgICAgLy8g5YGP56e76K6h566X77ya5q2j5YGP56e7ID0g5o6S5ZCN6Z2g5YmN77yM6LSf5YGP56e7ID0g5o6S5ZCN6Z2g5ZCOXG4gICAgICAgIGNvbnN0IHRhcmdldFJhbmsgPSBNYXRoLnJvdW5kKGN1cnJlbnRSYW5rICogKDEgLSBvZmZzZXRQZXJjZW50IC8gMTAwKSk7XG4gICAgICAgIC8vIOehruS/neaOkuWQjeWcqOacieaViOiMg+WbtOWGhVxuICAgICAgICByYW5raW5nQ2hhbmdlc1tjYXJkVWlkXSA9IE1hdGgubWF4KDEsIE1hdGgubWluKGFsbENhcmRzQ291bnQsIHRhcmdldFJhbmspKTtcbiAgICAgIH1cblxuICAgICAgLy8gNC4g5om56YeP5L+d5a2Y5o6S5ZCN5Y+Y5pu0XG4gICAgICBhd2FpdCBidWxrU2F2ZVJhbmtpbmdDaGFuZ2VzKHtcbiAgICAgICAgcmFua2luZ0NoYW5nZXMsXG4gICAgICAgIGRhdGFQYWdlVGl0bGUsXG4gICAgICAgIGFsbENhcmRVaWRzXG4gICAgICB9KTtcblxuICAgICAgLy8gNS4g5Yi35paw5pWw5o2u5Lul5Y+N5pig5paw55qE5o6S5ZCNXG4gICAgICBvbkRhdGFSZWZyZXNoKCk7XG4gICAgICBcbiAgICAgIC8vIDYuIOeUqOaIt+WPjemmiFxuICAgICAgaWYgKHdpbmRvdy5yb2FtQWxwaGFBUEk/LnVpPy5zaG93VG9hc3QpIHtcbiAgICAgICAgd2luZG93LnJvYW1BbHBoYUFQSS51aS5zaG93VG9hc3Qoe1xuICAgICAgICAgIG1lc3NhZ2U6IGDniYznu4QgXCIke2RlY2tOYW1lfVwiIOS8mOWFiOe6p+WBj+enuyAke29mZnNldFBlcmNlbnQgPiAwID8gJysnIDogJyd9JHtvZmZzZXRQZXJjZW50fSUg5bey5bqU55SoYCxcbiAgICAgICAgICBpbnRlbnQ6ICdzdWNjZXNzJyxcbiAgICAgICAgICB0aW1lb3V0OiAzMDAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfniYznu4TlgY/np7vlupTnlKjlpLHotKU6JywgZXJyb3IpO1xuICAgICAgaWYgKHdpbmRvdy5yb2FtQWxwaGFBUEk/LnVpPy5zaG93VG9hc3QpIHtcbiAgICAgICAgd2luZG93LnJvYW1BbHBoYUFQSS51aS5zaG93VG9hc3Qoe1xuICAgICAgICAgIG1lc3NhZ2U6ICfniYznu4TkvJjlhYjnuqflgY/np7vlupTnlKjlpLHotKXvvIzor7fph43or5UnLFxuICAgICAgICAgIGludGVudDogJ2RhbmdlcicsXG4gICAgICAgICAgdGltZW91dDogNTAwMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtjYXJkVWlkcywgcHJpb3JpdHlPcmRlciwgYWxsQ2FyZHNDb3VudCwgZGVmYXVsdFByaW9yaXR5LCBkYXRhUGFnZVRpdGxlLCBhbGxDYXJkVWlkcywgb25EYXRhUmVmcmVzaF0pO1xuICBcbiAgLy8g4pyFIOa3u+WKoOe7hOS7tuWNuOi9veagh+W/l++8jOmYsuatouW8guatpeaTjeS9nOWcqOe7hOS7tuWNuOi9veWQjuaJp+ihjFxuICBjb25zdCBpc01vdW50ZWRSZWYgPSBSZWFjdC51c2VSZWYodHJ1ZSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW10pO1xuICBcbiAgLy8g6I635Y+W5b2T5YmN5Y2h54mH55qE5o6S5ZCNXG4gIGNvbnN0IGN1cnJlbnRDYXJkUmFuayA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmICghY3VycmVudENhcmRSZWZVaWQpIHtcbiAgICAgIHJldHVybiBNYXRoLm1heCgxLCBNYXRoLmNlaWwoYWxsQ2FyZHNDb3VudCAqICgxIC0gZGVmYXVsdFByaW9yaXR5IC8gMTAwKSkpO1xuICAgIH1cbiAgICBcbiAgICAvLyDmo4Dmn6XmmK/lkKbmnInmnKzlnLDmnKrkv53lrZjnmoTlj5jmm7RcbiAgICBpZiAocmFua2luZ0NoYW5nZXNbY3VycmVudENhcmRSZWZVaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByYW5raW5nQ2hhbmdlc1tjdXJyZW50Q2FyZFJlZlVpZF07XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGluZGV4ID0gcHJpb3JpdHlPcmRlci5pbmRleE9mKGN1cnJlbnRDYXJkUmVmVWlkKTtcbiAgICByZXR1cm4gaW5kZXggPT09IC0xID8gMSA6IGluZGV4ICsgMTtcbiAgfSwgW2N1cnJlbnRDYXJkUmVmVWlkLCBwcmlvcml0eU9yZGVyLCBhbGxDYXJkc0NvdW50LCByYW5raW5nQ2hhbmdlcywgZGVmYXVsdFByaW9yaXR5XSk7XG5cbiAgLy8g5aSE55CG5o6S5ZCN5Y+Y5pu0IC0g5Y+q5pu05paw5pys5Zyw54q25oCB77yM5LiN56uL5Y2z5L+d5a2YXG4gIGNvbnN0IGhhbmRsZVJhbmtpbmdDaGFuZ2UgPSBSZWFjdC51c2VDYWxsYmFjaygobmV3UmFuazogbnVtYmVyKSA9PiB7XG4gICAgaWYgKCFjdXJyZW50Q2FyZFJlZlVpZCkgcmV0dXJuO1xuICAgIFxuICAgIHNldFJhbmtpbmdDaGFuZ2VzKHByZXYgPT4gKHtcbiAgICAgIC4uLnByZXYsXG4gICAgICBbY3VycmVudENhcmRSZWZVaWRdOiBuZXdSYW5rXG4gICAgfSkpO1xuICAgIFxuICAgIHNldEhhc1Vuc2F2ZWRDaGFuZ2VzKHRydWUpO1xuICB9LCBbY3VycmVudENhcmRSZWZVaWRdKTtcblxuICAvLyBXaGVuIGNhcmQgY2hhbmdlcywgdXBkYXRlIG11bHRpcGxpZXIgc3RhdGVcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWN1cnJlbnRDYXJkRGF0YSkgcmV0dXJuO1xuXG4gICAgaWYgKGN1cnJlbnRDYXJkRGF0YT8ucmV2aWV3TW9kZSA9PT0gUmV2aWV3TW9kZXMuRml4ZWRJbnRlcnZhbCkge1xuICAgICAgLy8gSWYgY2FyZCBoYXMgbXVsdGlwbGllciwgdXNlIHRoYXRcbiAgICAgIHNldEludGVydmFsTXVsdGlwbGllcihjdXJyZW50Q2FyZERhdGEuaW50ZXJ2YWxNdWx0aXBsaWVyIGFzIG51bWJlcik7XG4gICAgICBzZXRJbnRlcnZhbE11bHRpcGxpZXJUeXBlKGN1cnJlbnRDYXJkRGF0YS5pbnRlcnZhbE11bHRpcGxpZXJUeXBlIGFzIEludGVydmFsTXVsdGlwbGllclR5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UsIGp1c3QgcmVzZXQgdG8gZGVmYXVsdFxuICAgICAgc2V0SW50ZXJ2YWxNdWx0aXBsaWVyKG5ld0ZpeGVkU2Vzc2lvbkRlZmF1bHRzLmludGVydmFsTXVsdGlwbGllciBhcyBudW1iZXIpO1xuICAgICAgc2V0SW50ZXJ2YWxNdWx0aXBsaWVyVHlwZShcbiAgICAgICAgbmV3Rml4ZWRTZXNzaW9uRGVmYXVsdHMuaW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSBhcyBJbnRlcnZhbE11bHRpcGxpZXJUeXBlXG4gICAgICApO1xuICAgIH1cbiAgfSwgW2N1cnJlbnRDYXJkRGF0YSwgbmV3Rml4ZWRTZXNzaW9uRGVmYXVsdHNdKTtcblxuICBjb25zdCBoYXNOZXh0RHVlRGF0ZSA9IGN1cnJlbnRDYXJkRGF0YSAmJiAnbmV4dER1ZURhdGUnIGluIGN1cnJlbnRDYXJkRGF0YTtcbiAgY29uc3QgaXNOZXcgPSBjdXJyZW50Q2FyZERhdGEgJiYgJ2lzTmV3JyBpbiBjdXJyZW50Q2FyZERhdGEgJiYgY3VycmVudENhcmREYXRhLmlzTmV3O1xuICBjb25zdCBuZXh0RHVlRGF0ZSA9IGhhc05leHREdWVEYXRlID8gY3VycmVudENhcmREYXRhLm5leHREdWVEYXRlIDogdW5kZWZpbmVkO1xuXG4gIGNvbnN0IGlzRHVlVG9kYXkgPSBkYXRlVXRpbHMuZGF5c0JldHdlZW4obmV4dER1ZURhdGUsIG5ldyBEYXRlKCkpID09PSAwO1xuICBjb25zdCBzdGF0dXMgPSBpc05ldyA/ICduZXcnIDogaXNEdWVUb2RheSA/ICdkdWVUb2RheScgOiBoYXNOZXh0RHVlRGF0ZSA/ICdwYXN0RHVlJyA6IG51bGw7XG5cbiAgY29uc3QgeyBibG9ja0luZm8sIGlzTG9hZGluZzogYmxvY2tJbmZvTG9hZGluZywgcmVmcmVzaEJsb2NrSW5mbyB9ID0gdXNlQmxvY2tJbmZvKHsgcmVmVWlkOiBjdXJyZW50Q2FyZFJlZlVpZCB9KTtcbiAgY29uc3QgaGFzQmxvY2tDaGlsZHJlbiA9ICEhYmxvY2tJbmZvLmNoaWxkcmVuICYmICEhYmxvY2tJbmZvLmNoaWxkcmVuLmxlbmd0aDtcbiAgY29uc3QgaGFzQmxvY2tDaGlsZHJlblVpZHMgPSAhIWJsb2NrSW5mby5jaGlsZHJlblVpZHMgJiYgISFibG9ja0luZm8uY2hpbGRyZW5VaWRzLmxlbmd0aDtcblxuICAvLyDwn5qAIFAxOiDpooTlj5bkuIvkuIDlvKDljaHniYfnmoQgYmxvY2tJbmZv77yM5o+Q5Y2H55So5oi35L2T6aqMXG4gIGNvbnN0IG5leHRDYXJkUmVmVWlkID0gcHJhY3RpY2VDYXJkVWlkc1tjdXJyZW50SW5kZXggKyAxXTtcbiAgY29uc3QgeyBibG9ja0luZm86IG5leHRCbG9ja0luZm8gfSA9IHVzZUJsb2NrSW5mbyh7IFxuICAgIHJlZlVpZDogbmV4dENhcmRSZWZVaWQsXG4gICAgLy8g5Y+q5Zyo5pyJ5LiL5LiA5byg5Y2h5pe25omN6aKE5Y+W77yM6YG/5YWN5LiN5b+F6KaB55qE6K+35rGCXG4gICAgc2tpcDogIW5leHRDYXJkUmVmVWlkIFxuICB9KTtcblxuICBjb25zdCBbc2hvd0Fuc3dlcnMsIHNldFNob3dBbnN3ZXJzXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2hhc0Nsb3plLCBzZXRIYXNDbG96ZV0gPSBSZWFjdC51c2VTdGF0ZSh0cnVlKTtcblxuICBjb25zdCBzaG91bGRTaG93QW5zd2VyRmlyc3QgPVxuICAgIHJlbmRlck1vZGUgPT09IFJlbmRlck1vZGUuQW5zd2VyRmlyc3QgJiYgaGFzQmxvY2tDaGlsZHJlblVpZHMgJiYgIXNob3dBbnN3ZXJzO1xuXG4gIC8vIOWNoeeJh+WIh+aNouaXtumHjee9ruetlOahiOaYvuekuueKtuaAgVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFNob3dBbnN3ZXJzKGZhbHNlKTtcbiAgfSwgW2N1cnJlbnRDYXJkUmVmVWlkXSk7XG5cbiAgLy8g6Ieq5Yqo5pi+56S6562U5qGI77yI5peg5a2Q5Z2X5LiU5pegY2xvemXvvIlcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoY3VycmVudENhcmRSZWZVaWQgJiYgIWJsb2NrSW5mb0xvYWRpbmcpIHtcbiAgICAgIGNvbnN0IHNob3VsZEF1dG9TaG93ID0gIWhhc0Jsb2NrQ2hpbGRyZW4gJiYgIWhhc0Jsb2NrQ2hpbGRyZW5VaWRzICYmICFoYXNDbG96ZTtcbiAgICAgIGlmIChzaG91bGRBdXRvU2hvdyAmJiAhc2hvd0Fuc3dlcnMpIHtcbiAgICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHNldFNob3dBbnN3ZXJzKHRydWUpLCAxMDApO1xuICAgICAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtjdXJyZW50Q2FyZFJlZlVpZCwgaGFzQmxvY2tDaGlsZHJlbiwgaGFzQmxvY2tDaGlsZHJlblVpZHMsIGhhc0Nsb3plLCBibG9ja0luZm9Mb2FkaW5nLCBzaG93QW5zd2Vyc10pO1xuXG4gIGNvbnN0IG9uVGFnQ2hhbmdlID0gYXN5bmMgKHRhZykgPT4ge1xuICAgIHNldEN1cnJlbnRJbmRleCgwKTtcbiAgICBoYW5kbGVNZW1vVGFnQ2hhbmdlKHRhZyk7XG4gICAgc2V0SXNDcmFtbWluZyhmYWxzZSk7XG5cbiAgICAvLyBUbyBwcmV2ZW50ICdzcGFjZScga2V5IGV2ZW50IGZyb20gdHJpZ2dlcmluZyBkcm9wZG93blxuICAgIGF3YWl0IGFzeW5jVXRpbHMuc2xlZXAoMTAwKTtcblxuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIGRvY3VtZW50Py5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gV2hlbiBwcmFjdGljZSBxdWV1ZSBjaGFuZ2VzLCByZXNldCBjdXJyZW50IGluZGV4XG4gIGNvbnN0IHByZXZpb3VzUXVldWVMZW5ndGggPSBSZWFjdC51c2VSZWYocHJhY3RpY2VDYXJkVWlkcy5sZW5ndGgpO1xuICBcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyDlj6rlnKjpmJ/liJfplb/luqblj5jljJbml7bph43nva7ntKLlvJVcbiAgICBpZiAocHJhY3RpY2VDYXJkVWlkcy5sZW5ndGggIT09IHByZXZpb3VzUXVldWVMZW5ndGguY3VycmVudCkge1xuICAgICAgc2V0Q3VycmVudEluZGV4KDApO1xuICAgICAgcHJldmlvdXNRdWV1ZUxlbmd0aC5jdXJyZW50ID0gcHJhY3RpY2VDYXJkVWlkcy5sZW5ndGg7XG4gICAgfVxuICB9LCBbcHJhY3RpY2VDYXJkVWlkcy5sZW5ndGhdKTtcblxuICBjb25zdCBvblByYWN0aWNlQ2xpY2sgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZ3JhZGVEYXRhKSA9PiB7XG4gICAgICBpZiAoaXNEb25lKSByZXR1cm47XG4gICAgICBcbiAgICAgIGNvbnN0IHByYWN0aWNlUHJvcHMgPSB7XG4gICAgICAgIC4uLmN1cnJlbnRDYXJkRGF0YSxcbiAgICAgICAgLi4uZ3JhZGVEYXRhLFxuICAgICAgICBpbnRlcnZhbE11bHRpcGxpZXIsXG4gICAgICAgIGludGVydmFsTXVsdGlwbGllclR5cGUsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBhZnRlclByYWN0aWNlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IGhhbmRsZVByYWN0aWNlQ2xpY2socHJhY3RpY2VQcm9wcyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign57uD5Lmg5pWw5o2u5L+d5a2Y5aSx6LSlOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgYWZ0ZXJQcmFjdGljZSgpO1xuICAgICAgc2V0Q3VycmVudEluZGV4KGN1cnJlbnRJbmRleCArIDEpO1xuICAgIH0sXG4gICAgW1xuICAgICAgaGFuZGxlUHJhY3RpY2VDbGljayxcbiAgICAgIGlzRG9uZSxcbiAgICAgIGN1cnJlbnRJbmRleCxcbiAgICAgIGN1cnJlbnRDYXJkRGF0YSxcbiAgICAgIGludGVydmFsTXVsdGlwbGllcixcbiAgICAgIGludGVydmFsTXVsdGlwbGllclR5cGUsXG4gICAgXVxuICApO1xuXG4gIGNvbnN0IG9uU2tpcENsaWNrID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChpc0RvbmUpIHJldHVybjtcbiAgICBzZXRDdXJyZW50SW5kZXgoY3VycmVudEluZGV4ICsgMSk7XG4gIH0sIFtjdXJyZW50SW5kZXgsIGlzRG9uZV0pO1xuXG4gIGNvbnN0IG9uUHJldkNsaWNrID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChpc0ZpcnN0KSByZXR1cm47XG5cbiAgICBzZXRDdXJyZW50SW5kZXgoY3VycmVudEluZGV4IC0gMSk7XG4gIH0sIFtjdXJyZW50SW5kZXgsIGlzRmlyc3RdKTtcblxuICBjb25zdCBvblN0YXJ0Q3JhbW1pbmdDbGljayA9ICgpID0+IHtcbiAgICAvLyBSZWZyZXNoIGRhdGEgdG8gYXBwbHkgYW55IHByaW9yaXR5IGNoYW5nZXMgYmVmb3JlIHN0YXJ0aW5nIGNyYW1taW5nXG4gICAgb25EYXRhUmVmcmVzaCgpO1xuICAgIHNldElzQ3JhbW1pbmcodHJ1ZSk7XG4gICAgc2V0Q3VycmVudEluZGV4KDApO1xuICB9O1xuXG4gIGNvbnN0IGxvdHRpZUFuaW1hdGlvbk9wdGlvbiA9IHtcbiAgICBsb29wOiB0cnVlLFxuICAgIGF1dG9wbGF5OiB0cnVlLFxuICAgIGFuaW1hdGlvbkRhdGE6IGRvbmVBbmltYXRpb25EYXRhLFxuICAgIHJlbmRlcmVyU2V0dGluZ3M6IHtcbiAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW86ICd4TWlkWU1pZCBzbGljZScsXG4gICAgfSxcbiAgfTtcbiAgY29uc3QgbG90dGllU3R5bGUgPSB7XG4gICAgaGVpZ2h0OiAyMDAsXG4gICAgd2lkdGg6ICdhdXRvJyxcbiAgfTtcblxuICBjb25zdCBbc2hvd0JyZWFkY3J1bWJzLCBzZXRTaG93QnJlYWRjcnVtYnNdID0gUmVhY3QudXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IGhvdGtleXMgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+IFtcbiAgICAgIHtcbiAgICAgICAgY29tYm86ICdCJyxcbiAgICAgICAgZ2xvYmFsOiB0cnVlLFxuICAgICAgICBsYWJlbDogJ1Nob3cgQnJlYWRDcnVtYnMnLFxuICAgICAgICBvbktleURvd246ICgpID0+IHNldFNob3dCcmVhZGNydW1icyghc2hvd0JyZWFkY3J1bWJzKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICBbc2hvd0JyZWFkY3J1bWJzXVxuICApO1xuICBCbHVlcHJpbnQudXNlSG90a2V5cyhob3RrZXlzKTtcblxuICAvLyDlsYLnuqfnrqHnkIbvvJrlvZPlvLnnqpfmiZPlvIDml7bms6jlhaVDU1Pkv67lpI3vvIzlhbPpl63ml7bnp7vpmaRcbiAgdXNlWkluZGV4Rml4KGlzT3Blbik7XG5cbiAgLy8g54Sm54K5566h55CG77ya5b2T5by556qX5omT5byA5pe25r+A5rS754Sm54K55L+d5oqk77yM5YWz6Zet5pe25YGc55SoXG4gIC8vIOino+WGs21lbW/nqpflj6PkuK3nvJbovpHml7bmjaLooYzliIfmjaJibG9ja+WvvOiHtOeahOeEpueCueS4ouWksemXrumimFxuICB1c2VGb2N1c0ZpeChpc09wZW4pO1xuXG4gIC8vIOWcqOa7keWdl+a2iOWkseaXtuaJuemHj+S/neWtmOS8mOWFiOe6p+aVsOaNrlxuICBjb25zdCBzaG91bGRTaG93U2xpZGVyID0gIWlzRG9uZSAmJiBoYXNDYXJkcztcbiAgY29uc3QgcHJldlNob3VsZFNob3dTbGlkZXIgPSBSZWFjdC51c2VSZWYoc2hvdWxkU2hvd1NsaWRlcik7XG4gIFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIOajgOa1i+a7keWdl+S7juaYvuekuuWPmOS4uumakOiXj++8iOWujOaIkOWkjeS5oOOAgeeql+WPo+WFs+mXreetie+8iVxuICAgIGlmIChwcmV2U2hvdWxkU2hvd1NsaWRlci5jdXJyZW50ICYmICFzaG91bGRTaG93U2xpZGVyKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMocmFua2luZ0NoYW5nZXMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8g4pyFIOWPguaVsOmqjOivgVxuICAgICAgICBjb25zdCB2YWxpZERhdGFQYWdlVGl0bGUgPSBkYXRhUGFnZVRpdGxlPy50cmltKCkgfHwgJ3JvYW0vbWVtbyc7XG4gICAgICAgIGlmICghYWxsQ2FyZFVpZHMgfHwgYWxsQ2FyZFVpZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYnVsa1NhdmVSYW5raW5nQ2hhbmdlcyh7IFxuICAgICAgICAgIHJhbmtpbmdDaGFuZ2VzLCBcbiAgICAgICAgICBkYXRhUGFnZVRpdGxlOiB2YWxpZERhdGFQYWdlVGl0bGUsXG4gICAgICAgICAgYWxsQ2FyZFVpZHNcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgLy8g4pyFIOajgOafpee7hOS7tuaYr+WQpuW3suWNuOi9vVxuICAgICAgICAgIGlmICghaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgc2V0UmFua2luZ0NoYW5nZXMoe30pOyAvLyDmiJDlip/lkI7lho3muIXpmaRcbiAgICAgICAgICBzZXRIYXNVbnNhdmVkQ2hhbmdlcyhmYWxzZSk7XG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAvLyDinIUg5qOA5p+l57uE5Lu25piv5ZCm5bey5Y246L29XG4gICAgICAgICAgaWYgKCFpc01vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCfwn46vIOS8mOWFiOe6p+S/neWtmOWksei0pTonLCBlcnJvcik7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8g4pyFIOeUqOaIt+WPjemmiFxuICAgICAgICAgIGlmICh3aW5kb3cucm9hbUFscGhhQVBJPy51aT8uc2hvd1RvYXN0KSB7XG4gICAgICAgICAgICB3aW5kb3cucm9hbUFscGhhQVBJLnVpLnNob3dUb2FzdCh7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICfkvJjlhYjnuqfkv53lrZjlpLHotKXvvIzmlbDmja7mmoLlrZjmnKzlnLDjgILor7fph43mlrDmiZPlvIDnu4PkuaDnqpflj6Pph43or5XjgIInLFxuICAgICAgICAgICAgICBpbnRlbnQ6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgICAgdGltZW91dDogNTAwMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcHJldlNob3VsZFNob3dTbGlkZXIuY3VycmVudCA9IHNob3VsZFNob3dTbGlkZXI7XG4gIH0sIFtzaG91bGRTaG93U2xpZGVyLCByYW5raW5nQ2hhbmdlcywgZGF0YVBhZ2VUaXRsZSwgYWxsQ2FyZFVpZHNdKTsgLy8g4pyFIOa3u+WKoGFsbENhcmRVaWRz5Yiw5L6d6LWWXG5cbiAgLy8g8J+agCBDTEVBTlVQOiDnp7vpmaTmnKzlnLDorqHnrpfnmoQgZ2xvYmFsU3RhdHPvvIzmlLnnlKjmnaXoh6ogdXNlUHJhY3RpY2VEYXRhIOeahCB0b2RheS5jb21iaW5lZFRvZGF577yM5a6D5piv57uP6L+H5ZCO56uv5Y676YeN5aSE55CG55qE5ZSv5LiA5pWw5o2u5rqQXG4gIGNvbnN0IHF1ZXVlTGVuZ3RoID0gcHJhY3RpY2VDYXJkVWlkcyA/IHByYWN0aWNlQ2FyZFVpZHMubGVuZ3RoIDogMDtcbiAgY29uc3QgdG9kYXlUb3RhbFRhcmdldCA9IGlzQ3JhbW1pbmcgXG4gICAgPyBxdWV1ZUxlbmd0aCBcbiAgICA6IGlzR2xvYmFsTWl4ZWRNb2RlXG4gICAgPyB0b2RheS5jb21iaW5lZFRvZGF5LmNvbXBsZXRlZCArIHF1ZXVlTGVuZ3RoXG4gICAgOiBjb21wbGV0ZWRUb2RheUNvdW50ICsgcXVldWVMZW5ndGg7XG4gIGNvbnN0IGN1cnJlbnREaXNwbGF5Q291bnQgPSBpc0NyYW1taW5nIFxuICAgID8gY3VycmVudEluZGV4ICsgMSBcbiAgICA6IGlzR2xvYmFsTWl4ZWRNb2RlXG4gICAgPyB0b2RheS5jb21iaW5lZFRvZGF5LmNvbXBsZXRlZCArIGN1cnJlbnRJbmRleCArIDFcbiAgICA6IGNvbXBsZXRlZFRvZGF5Q291bnQgKyBjdXJyZW50SW5kZXggKyAxO1xuXG4gIC8vIPCfmoAg6K6h566X5YWo5bGA5re35ZCI5qih5byP5LiL55qE57uf6K6h5pWw5o2uIC0g5q2k6YOo5YiG5bey6KKr56e76Zmk77yM5Zug5Li66YC76L6R5bey56e76IezIHRvZGF5LnRzXG4gIC8qXG4gIGNvbnN0IGdsb2JhbFN0YXRzID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFpc0dsb2JhbE1peGVkTW9kZSkgcmV0dXJuIG51bGw7XG5cbiAgICBsZXQgdG90YWxEdWUgPSAwO1xuICAgIGxldCB0b3RhbE5ldyA9IDA7XG4gICAgbGV0IHRvdGFsQ29tcGxldGVkID0gMDtcblxuICAgIGZvciAoY29uc3QgdGFnIG9mIHRhZ3NMaXN0KSB7XG4gICAgICBjb25zdCB0YWdEYXRhID0gdG9kYXkudGFnc1t0YWddO1xuICAgICAgaWYgKHRhZ0RhdGEpIHtcbiAgICAgICAgdG90YWxEdWUgKz0gdGFnRGF0YS5kdWUgfHwgMDtcbiAgICAgICAgdG90YWxOZXcgKz0gdGFnRGF0YS5uZXcgfHwgMDtcbiAgICAgICAgdG90YWxDb21wbGV0ZWQgKz0gdGFnRGF0YS5jb21wbGV0ZWQgfHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyB0b3RhbER1ZSwgdG90YWxOZXcsIHRvdGFsQ29tcGxldGVkIH07XG4gIH0sIFtpc0dsb2JhbE1peGVkTW9kZSwgdGFnc0xpc3QsIHRvZGF5LnRhZ3NdKTtcbiAgKi9cblxuICByZXR1cm4gKFxuICAgIDxNYWluQ29udGV4dC5Qcm92aWRlclxuICAgICAgdmFsdWU9e3tcbiAgICAgICAgcmV2aWV3TW9kZSxcbiAgICAgICAgc2V0UmV2aWV3TW9kZU92ZXJyaWRlLFxuICAgICAgICBpbnRlcnZhbE11bHRpcGxpZXIsXG4gICAgICAgIHNldEludGVydmFsTXVsdGlwbGllcixcbiAgICAgICAgaW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSxcbiAgICAgICAgc2V0SW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSxcbiAgICAgICAgb25QcmFjdGljZUNsaWNrLFxuICAgICAgICB0b2RheSxcbiAgICAgICAgc2VsZWN0ZWRUYWcsXG4gICAgICAgIGN1cnJlbnRJbmRleCxcbiAgICAgICAgcmVuZGVyTW9kZSxcbiAgICAgICAgc2V0UmVuZGVyTW9kZSxcbiAgICAgIH19XG4gICAgPlxuICAgICAgey8qIEB0cy1pZ25vcmUgKi99XG4gICAgICA8RGlhbG9nXG4gICAgICAgIGlzT3Blbj17aXNPcGVufVxuICAgICAgICBvbkNsb3NlPXtvbkNsb3NlQ2FsbGJhY2t9XG4gICAgICAgIGNsYXNzTmFtZT1cInBiLTAgYmctd2hpdGVcIlxuICAgICAgICBjYW5Fc2NhcGVLZXlDbG9zZT17ZmFsc2V9XG4gICAgICA+XG4gICAgICAgIDxIZWFkZXJcbiAgICAgICAgICBjbGFzc05hbWU9XCJicDMtZGlhbG9nLWhlYWRlciBvdXRsaW5lLW5vbmUgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lXCJcbiAgICAgICAgICB0YWdzTGlzdD17dGFnc0xpc3R9XG4gICAgICAgICAgb25DbG9zZUNhbGxiYWNrPXtvbkNsb3NlQ2FsbGJhY2t9XG4gICAgICAgICAgb25UYWdDaGFuZ2U9e29uVGFnQ2hhbmdlfVxuICAgICAgICAgIHN0YXR1cz17c3RhdHVzfVxuICAgICAgICAgIGlzRG9uZT17aXNEb25lfVxuICAgICAgICAgIG5leHREdWVEYXRlPXtuZXh0RHVlRGF0ZX1cbiAgICAgICAgICBzaG93QnJlYWRjcnVtYnM9e3Nob3dCcmVhZGNydW1ic31cbiAgICAgICAgICBzZXRTaG93QnJlYWRjcnVtYnM9e3NldFNob3dCcmVhZGNydW1ic31cbiAgICAgICAgICBpc0NyYW1taW5nPXtpc0NyYW1taW5nfVxuICAgICAgICAgIHByYWN0aWNlQ2FyZFVpZHM9e3ByYWN0aWNlQ2FyZFVpZHN9XG4gICAgICAgICAgb25PcGVuRGVja1ByaW9yaXR5PXsoKSA9PiBzZXRTaG93RGVja1ByaW9yaXR5TWFuYWdlcih0cnVlKX1cbiAgICAgICAgICBpc0dsb2JhbE1peGVkTW9kZT17aXNHbG9iYWxNaXhlZE1vZGV9XG4gICAgICAgICAgc2V0SXNHbG9iYWxNaXhlZE1vZGU9e3NldElzR2xvYmFsTWl4ZWRNb2RlfVxuICAgICAgICAvPlxuXG4gICAgICAgIDxEaWFsb2dCb2R5XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnAzLWRpYWxvZy1ib2R5IG92ZXJmbG93LXktc2Nyb2xsIG0tMCBwdC02IHBiLTggcHgtNFwiXG4gICAgICAgICAgZGlyPXtydGxFbmFibGVkID8gJ3J0bCcgOiB1bmRlZmluZWR9XG4gICAgICAgID5cbiAgICAgICAgICB7Y3VycmVudENhcmRSZWZVaWQgPyAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICB7c2hvdWxkU2hvd0Fuc3dlckZpcnN0ID8gKFxuICAgICAgICAgICAgICAgIGJsb2NrSW5mby5jaGlsZHJlblVpZHM/Lm1hcCgodWlkKSA9PiAoXG4gICAgICAgICAgICAgICAgICA8Q2FyZEJsb2NrXG4gICAgICAgICAgICAgICAgICAgIGtleT17dWlkfVxuICAgICAgICAgICAgICAgICAgICByZWZVaWQ9e3VpZH1cbiAgICAgICAgICAgICAgICAgICAgc2hvd0Fuc3dlcnM9e3Nob3dBbnN3ZXJzfVxuICAgICAgICAgICAgICAgICAgICBzZXRIYXNDbG96ZT17c2V0SGFzQ2xvemV9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFkY3J1bWJzPXtibG9ja0luZm8uYnJlYWRjcnVtYnN9XG4gICAgICAgICAgICAgICAgICAgIHNob3dCcmVhZGNydW1icz17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPENhcmRCbG9ja1xuICAgICAgICAgICAgICAgICAgcmVmVWlkPXtjdXJyZW50Q2FyZFJlZlVpZH1cbiAgICAgICAgICAgICAgICAgIHNob3dBbnN3ZXJzPXtzaG93QW5zd2Vyc31cbiAgICAgICAgICAgICAgICAgIHNldEhhc0Nsb3plPXtzZXRIYXNDbG96ZX1cbiAgICAgICAgICAgICAgICAgIGJyZWFkY3J1bWJzPXtibG9ja0luZm8uYnJlYWRjcnVtYnN9XG4gICAgICAgICAgICAgICAgICBzaG93QnJlYWRjcnVtYnM9e3Nob3dCcmVhZGNydW1ic31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJwcmFjdGljZS1vdmVybGF5LWRvbmUtc3RhdGVcIiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBmbGV4LWNvbFwiPlxuICAgICAgICAgICAgICA8TG90dGllIG9wdGlvbnM9e2xvdHRpZUFuaW1hdGlvbk9wdGlvbn0gc3R5bGU9e2xvdHRpZVN0eWxlfSAvPlxuICAgICAgICAgICAgICB7LyogQFRPRE9aOiBBZGQgc3VwcG9ydCBmb3IgcmV2aWV3IG1vcmUqL31cbiAgICAgICAgICAgICAgey8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb24gKi99XG4gICAgICAgICAgICAgIHtmYWxzZSA/IChcbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgUmV2aWV3ZWQge3RvZGF5U2VsZWN0ZWRUYWcuY29tcGxldGVkfXsnICd9XG4gICAgICAgICAgICAgICAgICB7c3RyaW5nVXRpbHMucGx1cmFsaXplKGNvbXBsZXRlZFRvZGF5Q291bnQsICdjYXJkJywgJ2NhcmRzJyl9IHRvZGF5LnsnICd9XG4gICAgICAgICAgICAgICAgICA8YSBvbkNsaWNrPXtoYW5kbGVSZXZpZXdNb3JlQ2xpY2t9PlJldmlldyBtb3JlPC9hPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICBZb3UmYXBvcztyZSBhbGwgY2F1Z2h0IHVwISDwn4yfeycgJ31cbiAgICAgICAgICAgICAgICAgIHt0b2RheVNlbGVjdGVkVGFnLmNvbXBsZXRlZCA+IDBcbiAgICAgICAgICAgICAgICAgICAgPyBgUmV2aWV3ZWQgJHt0b2RheVNlbGVjdGVkVGFnLmNvbXBsZXRlZH0gJHtzdHJpbmdVdGlscy5wbHVyYWxpemUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2RheVNlbGVjdGVkVGFnLmNvbXBsZXRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjYXJkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjYXJkcydcbiAgICAgICAgICAgICAgICAgICAgICApfSB0b2RheS5gXG4gICAgICAgICAgICAgICAgICAgIDogJyd9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICA8L0RpYWxvZ0JvZHk+XG4gICAgICAgIDxGb290ZXJcbiAgICAgICAgICByZWZVaWQ9e2N1cnJlbnRDYXJkUmVmVWlkfVxuICAgICAgICAgIG9uUHJhY3RpY2VDbGljaz17b25QcmFjdGljZUNsaWNrfVxuICAgICAgICAgIG9uU2tpcENsaWNrPXtvblNraXBDbGlja31cbiAgICAgICAgICBvblByZXZDbGljaz17b25QcmV2Q2xpY2t9XG4gICAgICAgICAgc2V0U2hvd0Fuc3dlcnM9e3NldFNob3dBbnN3ZXJzfVxuICAgICAgICAgIHNob3dBbnN3ZXJzPXtzaG93QW5zd2Vyc31cbiAgICAgICAgICBpc0RvbmU9e2lzRG9uZX1cbiAgICAgICAgICBoYXNDYXJkcz17aGFzQ2FyZHN9XG4gICAgICAgICAgb25DbG9zZUNhbGxiYWNrPXtvbkNsb3NlQ2FsbGJhY2t9XG4gICAgICAgICAgY3VycmVudENhcmREYXRhPXtjdXJyZW50Q2FyZERhdGF9XG4gICAgICAgICAgb25TdGFydENyYW1taW5nQ2xpY2s9e29uU3RhcnRDcmFtbWluZ0NsaWNrfVxuICAgICAgICAgIGZzcnNFbmFibGVkPXtmc3JzRW5hYmxlZH1cbiAgICAgICAgLz5cbiAgICAgICAgey8qIFByaW9yaXR5IFNsaWRlciAtIG9ubHkgc2hvdyB3aGVuIHdlIGhhdmUgY2FyZHMgYW5kIGFyZSBub3QgZG9uZSAqL31cbiAgICAgICAge3Nob3VsZFNob3dTbGlkZXIgJiYgKFxuICAgICAgICAgIDxQcmlvcml0eVNsaWRlclxuICAgICAgICAgICAgcHJpb3JpdHk9e2N1cnJlbnRDYXJkUmFua31cbiAgICAgICAgICAgIG9uUHJpb3JpdHlDaGFuZ2U9e2hhbmRsZVJhbmtpbmdDaGFuZ2V9XG4gICAgICAgICAgICBkaXNhYmxlZD17ZmFsc2V9XG4gICAgICAgICAgICBhbGxDYXJkc0NvdW50PXthbGxDYXJkc0NvdW50fVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L0RpYWxvZz5cbiAgICAgIFxuICAgICAgey8qIOeJjOe7hOS8mOWFiOe6p+euoeeQhuWZqCAqL31cbiAgICAgIDxEZWNrUHJpb3JpdHlNYW5hZ2VyXG4gICAgICAgIGlzT3Blbj17c2hvd0RlY2tQcmlvcml0eU1hbmFnZXJ9XG4gICAgICAgIG9uQ2xvc2U9eygpID0+IHNldFNob3dEZWNrUHJpb3JpdHlNYW5hZ2VyKGZhbHNlKX1cbiAgICAgICAgZGVja1ByaW9yaXRpZXM9e2RlY2tQcmlvcml0aWVzfVxuICAgICAgICBzZWxlY3RlZERlY2s9e3NlbGVjdGVkVGFnfVxuICAgICAgICBvbkFwcGx5T2Zmc2V0PXtoYW5kbGVEZWNrT2Zmc2V0QXBwbHl9XG4gICAgICAvPlxuICAgIDwvTWFpbkNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuXG5jb25zdCBEaWFsb2cgPSBzdHlsZWQoQmx1ZXByaW50LkRpYWxvZylgXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogNTBweCAxZnIgYXV0bztcbiAgbWF4LWhlaWdodDogODB2aDtcbiAgd2lkdGg6IDkwdnc7XG5cbiAgJHttZWRpYVF1ZXJpZXMueHN9IHtcbiAgICAvKiDmiYvmnLrnq6/ljaDmu6HlsY/luZUgKi9cbiAgICB3aWR0aDogMTAwdnc7XG4gICAgbWF4LXdpZHRoOiAxMDB2dztcbiAgICBoZWlnaHQ6IDEwMHZoO1xuICAgIG1heC1oZWlnaHQ6IDEwMHZoO1xuICAgIG1hcmdpbjogMDtcbiAgICBib3JkZXItcmFkaXVzOiAwO1xuICB9XG5cbiAgJHttZWRpYVF1ZXJpZXMubGd9IHtcbiAgICB3aWR0aDogODB2dztcbiAgfVxuXG4gICR7bWVkaWFRdWVyaWVzLnhsfSB7XG4gICAgd2lkdGg6IDcwdnc7XG4gIH1cbmA7XG5cbmNvbnN0IERpYWxvZ0JvZHkgPSBzdHlsZWQuZGl2YFxuICBvdmVyZmxvdy14OiBoaWRkZW47IC8vIGJlY2F1c2Ugb2YgdHdlYWtzIHdlIGRvIGluIENvbnRlbnRXcmFwcGVyIGNvbnRhaW5lciBvdmVyZmxvd3NcbiAgbWluLWhlaWdodDogMjAwcHg7XG5cbiAgJHttZWRpYVF1ZXJpZXMueHN9IHtcbiAgICAvKiDmiYvmnLrnq6/lh4/lsJHlhoXovrnot50gKi9cbiAgICBwYWRkaW5nLWxlZnQ6IDEycHggIWltcG9ydGFudDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMnB4ICFpbXBvcnRhbnQ7XG4gICAgcGFkZGluZy10b3A6IDE2cHggIWltcG9ydGFudDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTZweCAhaW1wb3J0YW50O1xuICAgIC8qIOehruS/neWGheWuueWPr+S7pea7muWKqCAqL1xuICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoOyAvKiBpT1Mgc21vb3RoIHNjcm9sbGluZyAqL1xuICB9XG5gO1xuXG5jb25zdCBIZWFkZXJXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBjb2xvcjogIzVjNzA4MDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y2ZjlmZDtcbiAgYm94LXNoYWRvdzogMCAxcHggMCByZ2IoMTYgMjIgMjYgLyAxMCUpO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgd29yZC13cmFwOiBub3JtYWw7XG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xuICBtYXJnaW46IDA7XG4gIG1pbi1oZWlnaHQ6IDUwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDAgMTZweDtcblxuICAvKiBTaG9ydGN1dCB3YXkgdG8gdGFnIHNlbGVjdG9yIGNvbG9yICovXG4gICYgLmJwMy1idXR0b24ge1xuICAgIGNvbG9yOiAjNWM3MDgwO1xuICB9XG5cbiAgJHttZWRpYVF1ZXJpZXMueHN9IHtcbiAgICBwYWRkaW5nOiAwIDhweDtcbiAgICBtaW4taGVpZ2h0OiA0OHB4O1xuICAgIFxuICAgIC8qIOe8qeWwj+Wtl+S9k+WSjOmXtOi3nSAqL1xuICAgIC50ZXh0LXNtIHtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICB9XG4gICAgXG4gICAgLyog6ZqQ6JeP5LiA5Lqb5LiN5aSq6YeN6KaB55qE5YWD57SgICovXG4gICAgLm14LTIge1xuICAgICAgbWFyZ2luLWxlZnQ6IDRweDtcbiAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgIH1cbiAgICBcbiAgICAubXgtMyB7XG4gICAgICBtYXJnaW4tbGVmdDogOHB4O1xuICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgfVxuXG4gICAgLyog6LCD5pW05byA5YWz5aSn5bCPICovXG4gICAgLmJwMy1zd2l0Y2gge1xuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjcpICFpbXBvcnRhbnQ7XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBUYWdTZWxlY3RvciA9ICh7IHRhZ3NMaXN0LCBzZWxlY3RlZFRhZywgb25UYWdDaGFuZ2UgfSkgPT4ge1xuICAvLyDoh6rlrprkuYnov4fmu6Tlh73mlbDvvIzmlK/mjIHkuK3mloflkozmi7zpn7PmkJzntKJcbiAgY29uc3QgZmlsdGVyVGFnID0gKHF1ZXJ5OiBzdHJpbmcsIHRhZzogc3RyaW5nKSA9PiB7XG4gICAgY29uc3Qgbm9ybWFsaXplZFF1ZXJ5ID0gcXVlcnkudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBub3JtYWxpemVkVGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRUYWcuaW5jbHVkZXMobm9ybWFsaXplZFF1ZXJ5KTtcbiAgfTtcblxuICAvLyDoh6rlrprkuYnovpPlhaXmoYbmuLLmn5NcbiAgY29uc3QgaW5wdXRSZW5kZXJlciA9IChxdWVyeTogc3RyaW5nLCBoYW5kbGVDaGFuZ2U6IChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQpID0+IChcbiAgICA8Qmx1ZXByaW50LklucHV0R3JvdXBcbiAgICAgIGxlZnRJY29uPVwic2VhcmNoXCJcbiAgICAgIHBsYWNlaG9sZGVyPVwi5pCc57Si54mM57uELi4uXCJcbiAgICAgIHZhbHVlPXtxdWVyeX1cbiAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICBhdXRvRm9jdXNcbiAgICAvPlxuICApO1xuXG4gIHJldHVybiAoXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIDxCbHVlcHJpbnRTZWxlY3QuU2VsZWN0XG4gICAgICBpdGVtcz17dGFnc0xpc3R9XG4gICAgICBhY3RpdmVJdGVtPXtzZWxlY3RlZFRhZ31cbiAgICAgIGZpbHRlcmFibGU9e3RydWV9XG4gICAgICBpdGVtUHJlZGljYXRlPXtmaWx0ZXJUYWd9XG4gICAgICBpbnB1dFByb3BzPXt7IHBsYWNlaG9sZGVyOiBcIuaQnOe0oueJjOe7hC4uLlwiIH19XG4gICAgICBpdGVtUmVuZGVyZXI9eyh0YWcsIHsgaGFuZGxlQ2xpY2ssIG1vZGlmaWVycywgcXVlcnkgfSkgPT4ge1xuICAgICAgICAvLyDpq5jkuq7ljLnphY3nmoTpg6jliIZcbiAgICAgICAgY29uc3QgaW5kZXggPSB0YWcudG9Mb3dlckNhc2UoKS5pbmRleE9mKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICBpZiAocXVlcnkgJiYgaW5kZXggPj0gMCkge1xuICAgICAgICAgIGNvbnN0IGJlZm9yZSA9IHRhZy5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuICAgICAgICAgIGNvbnN0IG1hdGNoID0gdGFnLnN1YnN0cmluZyhpbmRleCwgaW5kZXggKyBxdWVyeS5sZW5ndGgpO1xuICAgICAgICAgIGNvbnN0IGFmdGVyID0gdGFnLnN1YnN0cmluZyhpbmRleCArIHF1ZXJ5Lmxlbmd0aCk7XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxUYWdTZWxlY3Rvckl0ZW1cbiAgICAgICAgICAgICAgdGV4dD17XG4gICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICB7YmVmb3JlfVxuICAgICAgICAgICAgICAgICAgPHN0cm9uZyBzdHlsZT17eyBjb2xvcjogJyMxMDZiYTMnIH19PnttYXRjaH08L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgIHthZnRlcn1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3JpZ2luYWxUZXh0PXt0YWd9XG4gICAgICAgICAgICAgIHRhZ3NMaXN0PXt0YWdzTGlzdH1cbiAgICAgICAgICAgICAgYWN0aXZlPXttb2RpZmllcnMuYWN0aXZlfVxuICAgICAgICAgICAgICBrZXk9e3RhZ31cbiAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2t9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFRhZ1NlbGVjdG9ySXRlbVxuICAgICAgICAgICAgdGV4dD17dGFnfVxuICAgICAgICAgICAgb3JpZ2luYWxUZXh0PXt0YWd9XG4gICAgICAgICAgICB0YWdzTGlzdD17dGFnc0xpc3R9XG4gICAgICAgICAgICBhY3RpdmU9e21vZGlmaWVycy5hY3RpdmV9XG4gICAgICAgICAgICBrZXk9e3RhZ31cbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9fVxuICAgICAgb25JdGVtU2VsZWN0PXsodGFnKSA9PiB7XG4gICAgICAgIG9uVGFnQ2hhbmdlKHRhZyk7XG4gICAgICB9fVxuICAgICAgcG9wb3ZlclByb3BzPXt7IFxuICAgICAgICBtaW5pbWFsOiB0cnVlLFxuICAgICAgICBwb3BvdmVyQ2xhc3NOYW1lOiBcInRhZy1zZWxlY3Rvci1wb3BvdmVyXCIsXG4gICAgICAgIG1vZGlmaWVyczoge1xuICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiB0cnVlIH0sXG4gICAgICAgICAgZmxpcDogeyBlbmFibGVkOiB0cnVlIH1cbiAgICAgICAgfVxuICAgICAgfX1cbiAgICAgIHJlc2V0T25RdWVyeT17dHJ1ZX1cbiAgICAgIHJlc2V0T25TZWxlY3Q9e3RydWV9XG4gICAgPlxuICAgICAgPEJsdWVwcmludC5CdXR0b25cbiAgICAgICAgdGV4dD17c2VsZWN0ZWRUYWd9XG4gICAgICAgIHJpZ2h0SWNvbj1cImNhcmV0LWRvd25cIlxuICAgICAgICBtaW5pbWFsXG4gICAgICAgIGRhdGEtdGVzdGlkPVwidGFnLXNlbGVjdG9yLWN0YVwiXG4gICAgICAvPlxuICAgIDwvQmx1ZXByaW50U2VsZWN0LlNlbGVjdD5cbiAgKTtcbn07XG5cbmNvbnN0IFRhZ1NlbGVjdG9ySXRlbVdyYXBwZXIgPSBzdHlsZWQuZGl2PHsgYWN0aXZlOiBib29sZWFuIH0+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIHBhZGRpbmc6IDRweCA2cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7KHsgYWN0aXZlIH0pID0+IChhY3RpdmUgPyAncmdiYSgwLCAwLCAwLCAwLjA1KScgOiAndHJhbnNwYXJlbnQnKX07XG4gIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICY6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IGFjdGl2ZSB9KSA9PiAoYWN0aXZlID8gJ3JnYmEoMCwgMCwgMCwgMC4wNSknIDogJ3JnYmEoMCwgMCwgMCwgMC4wMyknKX07XG4gIH1cbmA7XG5cbmNvbnN0IFRhZyA9IHN0eWxlZChCbHVlcHJpbnQuVGFnKWBcbiAgJi5icDMtdGFnIHtcbiAgICBmb250LXNpemU6IDExcHg7XG4gICAgcGFkZGluZzogMXB4IDNweDtcbiAgICBtaW4taGVpZ2h0OiBhdXRvO1xuICAgIG1pbi13aWR0aDogYXV0bztcbiAgfVxuYDtcblxuY29uc3QgVGFnU2VsZWN0b3JJdGVtID0gKHsgdGV4dCwgb3JpZ2luYWxUZXh0LCBvbkNsaWNrLCBhY3RpdmUsIHRhZ3NMaXN0IH0pID0+IHtcbiAgY29uc3QgeyB0b2RheSwgc2V0UmVuZGVyTW9kZSB9ID0gUmVhY3QudXNlQ29udGV4dChNYWluQ29udGV4dCk7XG4gIC8vIOS9v+eUqCBvcmlnaW5hbFRleHQg5p2l5p+l5om+5pWw5o2u77yMdGV4dCDnlKjkuo7mmL7npLpcbiAgY29uc3QgdGFnS2V5ID0gb3JpZ2luYWxUZXh0IHx8IHRleHQ7XG4gIGNvbnN0IGR1ZUNvdW50ID0gdG9kYXkudGFnc1t0YWdLZXldPy5kdWUgfHwgMDtcbiAgY29uc3QgbmV3Q291bnQgPSB0b2RheS50YWdzW3RhZ0tleV0/Lm5ldyB8fCAwO1xuICBjb25zdCB0YWdSZW5kZXJNb2RlID0gdG9kYXkudGFnc1t0YWdLZXldPy5yZW5kZXJNb2RlIHx8IFJlbmRlck1vZGUuTm9ybWFsO1xuICBjb25zdCBbc2hvd1RhZ1NldHRpbmdzLCBzZXRTaG93VGFnU2V0dGluZ3NdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGluZGV4ID0gdGFnc0xpc3QuaW5kZXhPZih0YWdLZXkpO1xuICBjb25zdCBwbGFjZW1lbnQgPSBpbmRleCA9PT0gdGFnc0xpc3QubGVuZ3RoIC0gMSA/ICdib3R0b20nIDogJ3RvcCc7XG5cbiAgY29uc3QgdG9nZ2xlVGFnU2V0dGluZ3MgPSAoKSA9PiB7XG4gICAgc2V0U2hvd1RhZ1NldHRpbmdzKCFzaG93VGFnU2V0dGluZ3MpO1xuICB9O1xuXG4gIGNvbnN0IHRvZ2dsZVJlbmRlck1vZGUgPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3UmVuZGVyTW9kZSA9XG4gICAgICB0YWdSZW5kZXJNb2RlID09PSBSZW5kZXJNb2RlLk5vcm1hbCA/IFJlbmRlck1vZGUuQW5zd2VyRmlyc3QgOiBSZW5kZXJNb2RlLk5vcm1hbDtcblxuICAgIHNldFJlbmRlck1vZGUodGFnS2V5LCBuZXdSZW5kZXJNb2RlKTtcbiAgfTtcblxuICBjb25zdCB0YWdTZXR0aW5nc01lbnUgPSAoXG4gICAgPGRpdiBvbkNsaWNrPXsoZSkgPT4gZS5zdG9wUHJvcGFnYXRpb24oKX0+XG4gICAgICA8Qmx1ZXByaW50Lk1lbnUgY2xhc3NOYW1lPVwiYmctdHJhbnNwYXJlbnQgbWluLXctZnVsbCB0ZXh0LXNtXCI+XG4gICAgICAgIDxCbHVlcHJpbnQuTWVudUl0ZW1cbiAgICAgICAgICB0ZXh0PXtcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuXCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQteHNcIj5Td2FwIFEvQTwvc3Bhbj5cbiAgICAgICAgICAgICAgPEJsdWVwcmludC5Td2l0Y2hcbiAgICAgICAgICAgICAgICBhbGlnbkluZGljYXRvcj17Qmx1ZXByaW50LkFsaWdubWVudC5SSUdIVH1cbiAgICAgICAgICAgICAgICBjaGVja2VkPXt0YWdSZW5kZXJNb2RlID09PSBSZW5kZXJNb2RlLkFuc3dlckZpcnN0fVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0b2dnbGVSZW5kZXJNb2RlfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1iLTBcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgfVxuICAgICAgICAgIGNsYXNzTmFtZT1cImhvdmVyOmJnLXRyYW5zcGFyZW50IGhvdmVyOm5vLXVuZGVybGluZVwiXG4gICAgICAgIC8+XG4gICAgICAgIDxCbHVlcHJpbnQuTWVudURpdmlkZXIgLz5cbiAgICAgIDwvQmx1ZXByaW50Lk1lbnU+XG4gICAgPC9kaXY+XG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8VGFnU2VsZWN0b3JJdGVtV3JhcHBlclxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgIGFjdGl2ZT17YWN0aXZlfVxuICAgICAga2V5PXt0ZXh0fVxuICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgZGF0YS10ZXN0aWQ9XCJ0YWctc2VsZWN0b3ItaXRlbVwiXG4gICAgICBjbGFzc05hbWU9XCJmbGV4LWNvbFwiXG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXJcIj57dGV4dH08L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtbC0yXCI+XG4gICAgICAgICAge2R1ZUNvdW50ID4gMCAmJiAoXG4gICAgICAgICAgICA8VG9vbHRpcCBjb250ZW50PVwiRHVlXCIgcGxhY2VtZW50PXtwbGFjZW1lbnR9PlxuICAgICAgICAgICAgICA8VGFnXG4gICAgICAgICAgICAgICAgYWN0aXZlXG4gICAgICAgICAgICAgICAgbWluaW1hbFxuICAgICAgICAgICAgICAgIGludGVudD1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCJcbiAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cInRhZy1zZWxlY3Rvci1kdWVcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge2R1ZUNvdW50fVxuICAgICAgICAgICAgICA8L1RhZz5cbiAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtuZXdDb3VudCA+IDAgJiYgKFxuICAgICAgICAgICAgPFRvb2x0aXAgY29udGVudD1cIk5ld1wiIHBsYWNlbWVudD17cGxhY2VtZW50fT5cbiAgICAgICAgICAgICAgPFRhZ1xuICAgICAgICAgICAgICAgIGFjdGl2ZVxuICAgICAgICAgICAgICAgIG1pbmltYWxcbiAgICAgICAgICAgICAgICBpbnRlbnQ9XCJzdWNjZXNzXCJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBtbC0yXCJcbiAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cInRhZy1zZWxlY3Rvci1uZXdcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge25ld0NvdW50fVxuICAgICAgICAgICAgICA8L1RhZz5cbiAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBvbkNsaWNrPXsoZSkgPT4gZS5zdG9wUHJvcGFnYXRpb24oKX0gY2xhc3NOYW1lPVwiXCI+XG4gICAgICAgICAgPEJsdWVwcmludC5CdXR0b25cbiAgICAgICAgICAgIGljb249ezxCbHVlcHJpbnQuSWNvbiBpY29uPXtzaG93VGFnU2V0dGluZ3MgPyAnY2hldnJvbi11cCcgOiAnY29nJ30gc2l6ZT17MTF9IC8+fVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibWwtMSBicDMtc21hbGxcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJ0YWctc2V0dGluZ3MtYnV0dG9uXCJcbiAgICAgICAgICAgIG1pbmltYWxcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RvZ2dsZVRhZ1NldHRpbmdzfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8Qmx1ZXByaW50LkNvbGxhcHNlIGlzT3Blbj17c2hvd1RhZ1NldHRpbmdzfT57dGFnU2V0dGluZ3NNZW51fTwvQmx1ZXByaW50LkNvbGxhcHNlPlxuICAgIDwvVGFnU2VsZWN0b3JJdGVtV3JhcHBlcj5cbiAgKTtcbn07XG5cbmNvbnN0IFN0YXR1c0JhZGdlID0gKHsgc3RhdHVzLCBuZXh0RHVlRGF0ZSwgaXNDcmFtbWluZyB9KSA9PiB7XG4gIGlmIChpc0NyYW1taW5nKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUb29sdGlwIGNvbnRlbnQ9XCJSZXZpZXdzIGRvbid0IGFmZmVjdCBzY2hlZHVsaW5nXCIgcGxhY2VtZW50PVwibGVmdFwiPlxuICAgICAgICA8Qmx1ZXByaW50LlRhZyBpbnRlbnQ9XCJub25lXCI+Q3JhbW1pbmc8L0JsdWVwcmludC5UYWc+XG4gICAgICA8L1Rvb2x0aXA+XG4gICAgKTtcbiAgfVxuICBzd2l0Y2ggKHN0YXR1cykge1xuICAgIGNhc2UgJ25ldyc6XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Qmx1ZXByaW50LlRhZyBpbnRlbnQ9XCJzdWNjZXNzXCIgbWluaW1hbD5cbiAgICAgICAgICBOZXdcbiAgICAgICAgPC9CbHVlcHJpbnQuVGFnPlxuICAgICAgKTtcblxuICAgIGNhc2UgJ2R1ZVRvZGF5JzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxCbHVlcHJpbnQuVGFnIGludGVudD1cInByaW1hcnlcIiBtaW5pbWFsPlxuICAgICAgICAgIER1ZSBUb2RheVxuICAgICAgICA8L0JsdWVwcmludC5UYWc+XG4gICAgICApO1xuXG4gICAgY2FzZSAncGFzdER1ZSc6IHtcbiAgICAgIGNvbnN0IHRpbWVBZ28gPSBkYXRlVXRpbHMuY3VzdG9tRnJvbU5vdyhuZXh0RHVlRGF0ZSk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Qmx1ZXByaW50LlRhZyBpbnRlbnQ9XCJ3YXJuaW5nXCIgdGl0bGU9e2BEdWUgJHt0aW1lQWdvfWB9IG1pbmltYWw+XG4gICAgICAgICAgUGFzdCBEdWVcbiAgICAgICAgPC9CbHVlcHJpbnQuVGFnPlxuICAgICAgKTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5jb25zdCBCb3hJY29uID0gc3R5bGVkKEJsdWVwcmludC5JY29uKWBcbiAgbWFyZ2luLXJpZ2h0OiA1cHggIWltcG9ydGFudDtcbmA7XG5cbmNvbnN0IEJyZWFkY3J1bWJUb29sdGlwQ29udGVudCA9ICh7IHNob3dCcmVhZGNydW1icyB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGFsaWduLWNlbnRlclwiPlxuICAgICAge2Ake3Nob3dCcmVhZGNydW1icyA/ICdIaWRlJyA6ICdTaG93J30gQnJlYWRjcnVtYnNgfVxuICAgICAgPHNwYW4+XG4gICAgICAgIDxCdXR0b25UYWdzIGtpbmQ9XCJsaWdodFwiIGNsYXNzTmFtZT1cIm14LTJcIj5cbiAgICAgICAgICBCXG4gICAgICAgIDwvQnV0dG9uVGFncz5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IEhlYWRlciA9ICh7XG4gIHRhZ3NMaXN0LFxuICBvbkNsb3NlQ2FsbGJhY2ssXG4gIG9uVGFnQ2hhbmdlLFxuICBjbGFzc05hbWUsXG4gIHN0YXR1cyxcbiAgaXNEb25lLFxuICBuZXh0RHVlRGF0ZSxcbiAgc2hvd0JyZWFkY3J1bWJzLFxuICBzZXRTaG93QnJlYWRjcnVtYnMsXG4gIGlzQ3JhbW1pbmcsXG4gIHByYWN0aWNlQ2FyZFVpZHMsXG4gIG9uT3BlbkRlY2tQcmlvcml0eSxcbiAgaXNHbG9iYWxNaXhlZE1vZGUsXG4gIHNldElzR2xvYmFsTWl4ZWRNb2RlLFxufToge1xuICB0YWdzTGlzdDogc3RyaW5nW107XG4gIG9uQ2xvc2VDYWxsYmFjazogKCkgPT4gdm9pZDtcbiAgb25UYWdDaGFuZ2U6ICh0YWc6IHN0cmluZykgPT4gdm9pZDtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzdGF0dXM6IGFueTtcbiAgaXNEb25lOiBib29sZWFuO1xuICBuZXh0RHVlRGF0ZTogYW55O1xuICBzaG93QnJlYWRjcnVtYnM6IGJvb2xlYW47XG4gIHNldFNob3dCcmVhZGNydW1iczogKHNob3c6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIGlzQ3JhbW1pbmc6IGJvb2xlYW47XG4gIHByYWN0aWNlQ2FyZFVpZHM6IHN0cmluZ1tdO1xuICBvbk9wZW5EZWNrUHJpb3JpdHk/OiAoKSA9PiB2b2lkO1xuICBpc0dsb2JhbE1peGVkTW9kZTogYm9vbGVhbjtcbiAgc2V0SXNHbG9iYWxNaXhlZE1vZGU6IChtb2RlOiBib29sZWFuKSA9PiB2b2lkO1xufSkgPT4ge1xuICBjb25zdCB7IHNlbGVjdGVkVGFnLCB0b2RheSwgY3VycmVudEluZGV4IH0gPSB1c2VTYWZlQ29udGV4dChNYWluQ29udGV4dCk7XG4gIFxuICAvLyDwn5SnIOmYsuW+oeaAp+e8lueoi++8muehruS/nSB0b2RheVNlbGVjdGVkVGFnIOWtmOWcqFxuICBjb25zdCB0b2RheVNlbGVjdGVkVGFnID0gdG9kYXkudGFnc1tzZWxlY3RlZFRhZ10gfHwge1xuICAgIGNvbXBsZXRlZDogMCxcbiAgICBkdWU6IDAsXG4gICAgbmV3OiAwLFxuICAgIGR1ZVVpZHM6IFtdLFxuICAgIG5ld1VpZHM6IFtdLFxuICB9O1xuICBjb25zdCBjb21wbGV0ZWRUb2RheUNvdW50ID0gdG9kYXlTZWxlY3RlZFRhZy5jb21wbGV0ZWQ7XG4gIFxuICAvLyDwn5qAIFJFRkFDVE9SOiDkuI3lho3kvb/nlKjmnKzlnLDorqHnrpfnmoRnbG9iYWxTdGF0c++8jOaUueeUqOadpeiHquWQjuerr+eahCB0b2RheS5jb21iaW5lZFRvZGF5XG4gIGNvbnN0IGdsb2JhbFN0YXRzID0gaXNHbG9iYWxNaXhlZE1vZGUgPyB0b2RheS5jb21iaW5lZFRvZGF5IDogbnVsbDtcblxuICAvLyDorqHnrpfmmL7npLrov5vluqZcbiAgY29uc3QgcXVldWVMZW5ndGggPSBwcmFjdGljZUNhcmRVaWRzID8gcHJhY3RpY2VDYXJkVWlkcy5sZW5ndGggOiAwO1xuICBjb25zdCB0b2RheVRvdGFsVGFyZ2V0ID0gaXNDcmFtbWluZ1xuICAgID8gcXVldWVMZW5ndGhcbiAgICA6IGlzR2xvYmFsTWl4ZWRNb2RlXG4gICAgPyBnbG9iYWxTdGF0c1xuICAgICAgPyBnbG9iYWxTdGF0cy5jb21wbGV0ZWQgKyBxdWV1ZUxlbmd0aFxuICAgICAgOiAwXG4gICAgOiBjb21wbGV0ZWRUb2RheUNvdW50ICsgcXVldWVMZW5ndGg7XG4gIGNvbnN0IGN1cnJlbnREaXNwbGF5Q291bnQgPSBpc0NyYW1taW5nXG4gICAgPyBjdXJyZW50SW5kZXggKyAxXG4gICAgOiBpc0dsb2JhbE1peGVkTW9kZVxuICAgID8gZ2xvYmFsU3RhdHNcbiAgICAgID8gZ2xvYmFsU3RhdHMuY29tcGxldGVkICsgY3VycmVudEluZGV4ICsgMVxuICAgICAgOiAwXG4gICAgOiBjb21wbGV0ZWRUb2RheUNvdW50ICsgY3VycmVudEluZGV4ICsgMTtcblxuICByZXR1cm4gKFxuICAgIDxIZWFkZXJXcmFwcGVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSB0YWJJbmRleD17MH0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyXCI+XG4gICAgICAgIDxCb3hJY29uIGljb249XCJib3hcIiBzaXplPXsxNH0gLz5cbiAgICAgICAgPGRpdiB0YWJJbmRleD17LTF9PlxuICAgICAgICAgIDxUYWdTZWxlY3RvciB0YWdzTGlzdD17dGFnc0xpc3R9IHNlbGVjdGVkVGFnPXtzZWxlY3RlZFRhZ30gb25UYWdDaGFuZ2U9e29uVGFnQ2hhbmdlfSAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7Lyog8J+agCDmlrDlop7vvJrlhajlsYDmt7flkIjlrabkuaDlvIDlhbMgKi99XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXgtM1wiPlxuICAgICAgICAgIDxHbG9iYWxNaXhlZFRvZ2dsZVdyYXBwZXJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGdhcC0xIGJnLWdyYXktNTAgcHgtMiBweS0xIHJvdW5kZWQtbWQgYm9yZGVyIGJvcmRlci1ncmF5LTIwMFwiXG4gICAgICAgICAgICBzdHlsZT17eyBtaW5XaWR0aDogJzgwcHgnIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgdGV4dC14cyAkeyFpc0dsb2JhbE1peGVkTW9kZSA/ICd0ZXh0LWJsdWUtNjAwIGZvbnQtbWVkaXVtJyA6ICd0ZXh0LWdyYXktNDAwJ1xuICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICDljZXnu4RcbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxCbHVlcHJpbnQuU3dpdGNoXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1iLTBcIlxuICAgICAgICAgICAgICBzdHlsZT17eyB0cmFuc2Zvcm06ICdzY2FsZSgwLjgpJyB9fVxuICAgICAgICAgICAgICBjaGVja2VkPXtpc0dsb2JhbE1peGVkTW9kZX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eygpID0+IHNldElzR2xvYmFsTWl4ZWRNb2RlKCFpc0dsb2JhbE1peGVkTW9kZSl9XG4gICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiZ2xvYmFsLW1peGVkLW1vZGUtc3dpdGNoXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2B0ZXh0LXhzICR7aXNHbG9iYWxNaXhlZE1vZGUgPyAndGV4dC1ibHVlLTYwMCBmb250LW1lZGl1bScgOiAndGV4dC1ncmF5LTQwMCdcbiAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAg5re35ZCIXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9HbG9iYWxNaXhlZFRvZ2dsZVdyYXBwZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1lbmRcIj5cbiAgICAgICAgey8qIPCfmoAgUkVNT1ZFRDog5qC55o2u55So5oi35Y+N6aaI77yM56e76Zmk5YWo5bGA54q25oCB5o+Q56S677yM566A5YyWVUkgKi99XG5cbiAgICAgICAgey8qIOeJjOe7hOS8mOWFiOe6p+euoeeQhuaMiemSriAqL31cbiAgICAgICAge29uT3BlbkRlY2tQcmlvcml0eSAmJiAoXG4gICAgICAgICAgPFRvb2x0aXAgY29udGVudD1cIueuoeeQhueJjOe7hOS8mOWFiOe6p1wiIHBsYWNlbWVudD1cImxlZnRcIj5cbiAgICAgICAgICAgIDxCbHVlcHJpbnQuQnV0dG9uXG4gICAgICAgICAgICAgIGljb249XCJzb3J0XCJcbiAgICAgICAgICAgICAgbWluaW1hbFxuICAgICAgICAgICAgICBzbWFsbFxuICAgICAgICAgICAgICBvbkNsaWNrPXtvbk9wZW5EZWNrUHJpb3JpdHl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm14LTFcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICl9XG4gICAgICAgIHshaXNEb25lICYmIChcbiAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IHNldFNob3dCcmVhZGNydW1icyghc2hvd0JyZWFkY3J1bWJzKX0gY2xhc3NOYW1lPVwicHgtMSBjdXJzb3ItcG9pbnRlclwiPlxuICAgICAgICAgICAgey8qIEB0cy1pZ25vcmUgKi99XG4gICAgICAgICAgICA8VG9vbHRpcFxuICAgICAgICAgICAgICBjb250ZW50PXs8QnJlYWRjcnVtYlRvb2x0aXBDb250ZW50IHNob3dCcmVhZGNydW1icz17c2hvd0JyZWFkY3J1bWJzfSAvPn1cbiAgICAgICAgICAgICAgcGxhY2VtZW50PVwibGVmdFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxCbHVlcHJpbnQuSWNvblxuICAgICAgICAgICAgICAgIGljb249e3Nob3dCcmVhZGNydW1icyA/ICdleWUtb3BlbicgOiAnZXllLW9mZid9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzaG93QnJlYWRjcnVtYnMgPyAnb3BhY2l0eS0xMDAnIDogJ29wYWNpdHktNjAnfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICA8c3BhbiBkYXRhLXRlc3RpZD1cInN0YXR1cy1iYWRnZVwiPlxuICAgICAgICAgIDxTdGF0dXNCYWRnZVxuICAgICAgICAgICAgc3RhdHVzPXtzdGF0dXN9XG4gICAgICAgICAgICBuZXh0RHVlRGF0ZT17bmV4dER1ZURhdGV9XG4gICAgICAgICAgICBpc0NyYW1taW5nPXtpc0NyYW1taW5nfVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJzdGF0dXMtYmFkZ2VcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1zbSBteC0yIGZvbnQtbWVkaXVtXCI+XG4gICAgICAgICAgPHNwYW4gZGF0YS10ZXN0aWQ9XCJkaXNwbGF5LWNvdW50LWN1cnJlbnRcIj57aXNEb25lID8gMCA6IGN1cnJlbnREaXNwbGF5Q291bnR9PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm9wYWNpdHktNTAgbXgtMVwiPi88L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwib3BhY2l0eS01MFwiIGRhdGEtdGVzdGlkPVwiZGlzcGxheS1jb3VudC10b3RhbFwiPlxuICAgICAgICAgICAge2lzRG9uZSA/IDAgOiB0b2RheVRvdGFsVGFyZ2V0fVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgYXJpYS1sYWJlbD1cIkNsb3NlXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJicDMtZGlhbG9nLWNsb3NlLWJ1dHRvbiBicDMtYnV0dG9uIGJwMy1taW5pbWFsIGJwMy1pY29uLWNyb3NzXCJcbiAgICAgICAgICBvbkNsaWNrPXtvbkNsb3NlQ2FsbGJhY2t9XG4gICAgICAgID48L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvSGVhZGVyV3JhcHBlcj5cbiAgKTtcbn07XG5cbi8vIPCfmoAg5paw5aKe77ya5YWo5bGA5re35ZCI5byA5YWz55qE5qC35byP57uE5Lu2XG5jb25zdCBHbG9iYWxNaXhlZFRvZ2dsZVdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZThmNGY4O1xuICAgIGJvcmRlci1jb2xvcjogI2NjZTdmMDtcbiAgfVxuXG4gIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7XG5cbiAgJHttZWRpYVF1ZXJpZXMueHN9IHtcbiAgICBtaW4td2lkdGg6IDY1cHggIWltcG9ydGFudDtcbiAgICBcbiAgICAudGV4dC14cyB7XG4gICAgICBmb250LXNpemU6IDEwcHg7XG4gICAgfVxuICAgIFxuICAgIC8qIOWHj+WwkeWGhei+uei3nSAqL1xuICAgIHBhZGRpbmc6IDJweCA0cHggIWltcG9ydGFudDtcbiAgfVxuYDtcblxuZXhwb3J0IGRlZmF1bHQgUHJhY3RpY2VPdmVybGF5O1xuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCwgdHlwZSBDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2FmZUNvbnRleHQ8VD4oQ29udGV4dDogQ29udGV4dDxUPikge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChDb250ZXh0KTtcbiAgaWYgKGNvbnRleHQgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdDb250ZXh0IFByb3ZpZGVyIG5vdCBmb3VuZCcpO1xuICByZXR1cm4gY29udGV4dCBhcyBUO1xufVxuIiwiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIOeUqOS6jueuoeeQhlJvYW3nhKbngrnkv53miqTnmoRSZWFjdCBIb29rXG4gKiDlnKhtZW1v56qX5Y+j5omT5byA5pe25r+A5rS754Sm54K55L+d5oqk77yM5YWz6Zet5pe25YGc55SoXG4gKiBcbiAqIOino+WGs+mXrumimO+8mlxuICogLSBtZW1v56qX5Y+j5Lit57yW6L6R5pe25o2i6KGM5YiH5o2iYmxvY2vlr7zoh7TnmoTnhKbngrnkuKLlpLFcbiAqIFxuICogQHBhcmFtIGlzT3BlbiAtIG1lbW/nqpflj6PmmK/lkKbmiZPlvIBcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUZvY3VzRml4ID0gKGlzT3BlbjogYm9vbGVhbikgPT4ge1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCfwn46vIFJvYW0gTWVtbzogdXNlRm9jdXNGaXgg6Kem5Y+R77yM56qX5Y+j54q25oCBOicsIGlzT3Blbik7XG4gICAgXG4gICAgLy8g5pyA57K+56Gu55qEIFJvYW0g57yW6L6R5Z2X6YCJ5oup5Zmo77yM5Z+65LqO5a6e6ZmF5oum5oiq5Yiw55qE5YWD57Sg54m55b6BXG4gICAgLy8gJ2RvbnQtdW5mb2N1cy1ibG9jaycg6L+Z5Liq57G75ZCN5b6I5pyJ5oSP5oCd77yM5a2X6Z2i5oSP5oCd5bCx5pivXCLkuI3opoHlpLHnhKbnmoTlnZdcIlxuICAgIC8vIOi/meWPr+iDveaYryBSb2FtIOiHquW3seeUqOadpeagh+ivhuS4jeW6lOivpeWkseWOu+eEpueCueeahOe8lui+keWdl1xuICAgIGNvbnN0IFJPQU1fRURJVEFCTEVfU0VMRUNUT1IgPSAndGV4dGFyZWEuZG9udC11bmZvY3VzLWJsb2NrJztcbiAgICBsZXQgYmx1ckV2ZW50SGFuZGxlcjogKChldmVudDogRXZlbnQpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XG4gICAgXG4gICAgaWYgKGlzT3Blbikge1xuICAgICAgLy8gbWVtb+eql+WPo+aJk+W8gOaXtua/gOa0u+eEpueCueS/neaKpFxuICAgICAgY29uc29sZS5sb2coJ/Cfjq8gUm9hbSBNZW1vOiDmv4DmtLvnhKbngrnkv53miqTmnLrliLYnKTtcbiAgICAgIFxuICAgICAgLy8g5Yib5bu6IGJsdXIg5LqL5Lu25aSE55CG5ZmoXG4gICAgICBibHVyRXZlbnRIYW5kbGVyID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgRWxlbWVudDtcbiAgICAgICAgXG4gICAgICAgIC8vIOajgOafpeWkseeEpueahOWFg+e0oOaYr+WQpuS4uuaIkeS7rOWFs+W/g+eahOWPr+e8lui+keWdl1xuICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5tYXRjaGVzICYmIHRhcmdldC5tYXRjaGVzKFJPQU1fRURJVEFCTEVfU0VMRUNUT1IpKSB7XG4gICAgICAgICAgLy8g5YeP5bCR5pel5b+X6aKR546H77yM5Y+q5Zyo5byA5Y+R5qih5byP5LiL5pi+56S66K+m57uG5L+h5oGvXG4gICAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCAwLjEpIHsgLy8g5Y+q5pi+56S6MTAl55qE5oum5oiq5pel5b+XXG4gICAgICAgICAgICBjb25zb2xlLmxvZygn8J+OryBSb2FtIE1lbW86IOeEpueCueS/neaKpOato+WcqOW3peS9nCAo5bey5oum5oiq5aSa5qyh54Sm54K55Lii5aSxKScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyDpmLvmraLpu5jorqTnmoTlpLHnhKbooYzkuLpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIC8vIOmYu+atouS6i+S7tuWGkuazoVxuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyDlnKjmjZXojrfpmLbmrrXmt7vliqDkuovku7bnm5HlkKzlmajvvIzku6Xkvr/lsL3ml6nmi6bmiKpcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBibHVyRXZlbnRIYW5kbGVyLCB0cnVlKTtcbiAgICAgIGNvbnNvbGUubG9nKCfwn46vIFJvYW0gTWVtbzog54Sm54K55L+d5oqk5LqL5Lu255uR5ZCs5Zmo5bey5re75YqgJyk7XG4gICAgfVxuXG4gICAgLy8g5riF55CG5Ye95pWw77ya56Gu5L+d57uE5Lu25Y246L295oiW56qX5Y+j5YWz6Zet5pe256e76Zmk55uR5ZCs5ZmoXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChibHVyRXZlbnRIYW5kbGVyKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCBibHVyRXZlbnRIYW5kbGVyLCB0cnVlKTtcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfjq8gUm9hbSBNZW1vOiDnhKbngrnkv53miqTkuovku7bnm5HlkKzlmajlt7Lnp7vpmaQnKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbaXNPcGVuXSk7XG59OyAiLCJpbXBvcnQgKiBhcyBCbHVlcHJpbnQgZnJvbSAnQGJsdWVwcmludGpzL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnfi9jb21wb25lbnRzL1Rvb2x0aXAnO1xuaW1wb3J0IHsgQ29tcGxldGlvblN0YXR1cywgVG9kYXkgfSBmcm9tICd+L21vZGVscy9wcmFjdGljZSc7XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcbiAgZGlzcGxheTogZmxleDtcbmA7XG5cbmNvbnN0IFRhZyA9IHN0eWxlZChCbHVlcHJpbnQuVGFnKWBcbiAgJi5icDMtdGFnIHtcbiAgICBwYWRkaW5nOiAxcHggM3B4O1xuICAgIG1pbi1oZWlnaHQ6IGF1dG87XG4gICAgbWluLXdpZHRoOiBhdXRvO1xuICB9XG5gO1xuXG5pbnRlcmZhY2UgU2lkZVBhbmVsV2lkZ2V0UHJvcHMge1xuICBvbkNsaWNrQ2FsbGJhY2s6ICgpID0+IHZvaWQ7XG4gIHRvZGF5OiBUb2RheTtcbn1cbmNvbnN0IFNpZGVQYW5kZWxXaWRnZXQgPSAoeyBvbkNsaWNrQ2FsbGJhY2ssIHRvZGF5IH06IFNpZGVQYW5lbFdpZGdldFByb3BzKSA9PiB7XG4gIGNvbnN0IGFsbERvbmVUb2RheSA9IHRvZGF5LmNvbWJpbmVkVG9kYXkuc3RhdHVzID09PSBDb21wbGV0aW9uU3RhdHVzLkZpbmlzaGVkO1xuICBjb25zdCBjb21iaW5lZENvdW50cyA9IHRvZGF5LmNvbWJpbmVkVG9kYXk7XG5cbiAgY29uc3QgaWNvbkNsYXNzID0gYWxsRG9uZVRvZGF5ID8gJ2JwMy1pY29uLWNvbmZpcm0nIDogJ2JwMy1pY29uLWJveCc7XG5cbiAgcmV0dXJuIChcbiAgICA8V3JhcHBlclxuICAgICAgZGF0YS10ZXN0aWQ9XCJzaWRlLXBhbmVsLXdyYXBwZXJcIlxuICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIGp1c3RpZnktYmV0d2VlblwiXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrQ2FsbGJhY2t9XG4gICAgPlxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgYnAzLWljb24gJHtpY29uQ2xhc3N9IGljb24gYnAzLWljb24tc21hbGwgZmxleCBpdGVtcy1jZW50ZXJgfT48L3NwYW4+XG4gICAgICAgICAgPGRpdj5SZXZpZXc8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWwtMlwiPlxuICAgICAgICB7Y29tYmluZWRDb3VudHMuZHVlID4gMCAmJiAoXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIDxUb29sdGlwIGNvbnRlbnQ9XCJEdWVcIiBwbGFjZW1lbnQ9XCJ0b3BcIj5cbiAgICAgICAgICAgIDxUYWcgYWN0aXZlIG1pbmltYWwgaW50ZW50PVwicHJpbWFyeVwiIGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCIgZGF0YS10ZXN0aWQ9XCJkdWUtdGFnXCI+XG4gICAgICAgICAgICAgIHtjb21iaW5lZENvdW50cy5kdWV9XG4gICAgICAgICAgICA8L1RhZz5cbiAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICl9XG4gICAgICAgIHtjb21iaW5lZENvdW50cy5uZXcgPiAwICYmIChcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgPFRvb2x0aXAgY29udGVudD1cIk5ld1wiIHBsYWNlbWVudD1cInRvcFwiPlxuICAgICAgICAgICAgPFRhZyBhY3RpdmUgbWluaW1hbCBpbnRlbnQ9XCJzdWNjZXNzXCIgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgbWwtMlwiIGRhdGEtdGVzdGlkPVwibmV3LXRhZ1wiPlxuICAgICAgICAgICAgICB7Y29tYmluZWRDb3VudHMubmV3fVxuICAgICAgICAgICAgPC9UYWc+XG4gICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9XcmFwcGVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lkZVBhbmRlbFdpZGdldDtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRvZGF5LCBUb2RheUluaXRpYWwgfSBmcm9tICd+L21vZGVscy9wcmFjdGljZSc7XG5pbXBvcnQgeyBDb21wbGV0ZVJlY29yZHMgfSBmcm9tICd+L21vZGVscy9zZXNzaW9uJztcbmltcG9ydCAqIGFzIHF1ZXJpZXMgZnJvbSAnfi9xdWVyaWVzJztcblxuY29uc3QgdXNlUHJhY3RpY2VDYXJkc0RhdGEgPSAoe1xuICB0YWdzTGlzdCxcbiAgc2VsZWN0ZWRUYWcsXG4gIGRhdGFQYWdlVGl0bGUsXG4gIGNhY2hlZERhdGEsXG4gIGlzQ3JhbW1pbmcsXG4gIGRhaWx5TGltaXQsXG4gIHNodWZmbGVDYXJkcyxcbiAgZGVmYXVsdFByaW9yaXR5LFxufSkgPT4ge1xuICAvLyDwn5qAIFAxOiDkvb/nlKggdXNlUmVmIOWtmOWCqOWkp+Wvueixoe+8jOmBv+WFjeS4jeW/heimgeeahOmHjea4suafk1xuICBjb25zdCBwcmFjdGljZURhdGFSZWYgPSBSZWFjdC51c2VSZWY8Q29tcGxldGVSZWNvcmRzPih7fSk7XG4gIGNvbnN0IHByaW9yaXR5T3JkZXJSZWYgPSBSZWFjdC51c2VSZWY8c3RyaW5nW10+KFtdKTtcbiAgY29uc3QgYWxsQ2FyZFVpZHNSZWYgPSBSZWFjdC51c2VSZWY8c3RyaW5nW10+KFtdKTtcbiAgY29uc3QgY2FyZFVpZHNSZWYgPSBSZWFjdC51c2VSZWY8UmVjb3JkPHN0cmluZywgc3RyaW5nW10+Pih7fSk7XG4gIFxuICAvLyDwn5qAIFAxOiDlj6rlnKggc3RhdGUg5Lit5L+d5a2Y54mI5pys5Y+35ZKM5YWz6ZSu54q25oCB77yM6Kem5Y+R6YeN5riy5p+TXG4gIGNvbnN0IFtkYXRhVmVyc2lvbiwgc2V0RGF0YVZlcnNpb25dID0gUmVhY3QudXNlU3RhdGUoMCk7XG4gIGNvbnN0IFtyZWZldGNoVHJpZ2dlciwgc2V0UmVmZXRjaFRyaWdnZXJdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbdG9kYXksIHNldFRvZGF5XSA9IFJlYWN0LnVzZVN0YXRlPFRvZGF5PihUb2RheUluaXRpYWwpO1xuICBjb25zdCBbYWxsQ2FyZHNDb3VudCwgc2V0QWxsQ2FyZHNDb3VudF0gPSBSZWFjdC51c2VTdGF0ZTxudW1iZXI+KDApO1xuXG4gIGNvbnN0IHJlZmV0Y2hUcmlnZ2VyRm4gPSAoKSA9PiBzZXRSZWZldGNoVHJpZ2dlcigodHJpZ2dlcikgPT4gIXRyaWdnZXIpO1xuXG4gIGNvbnN0IHN0YWJsZURlZmF1bHRQcmlvcml0eSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgZGVmYXVsdFByaW9yaXR5ID09PSAnbnVtYmVyJyA/IGRlZmF1bHRQcmlvcml0eSA6IDcwO1xuICB9LCBbZGVmYXVsdFByaW9yaXR5XSk7XG5cbiAgY29uc3QgaXNFeGVjdXRpbmdSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzRXhlY3V0aW5nUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKCFzZWxlY3RlZFRhZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlzRXhlY3V0aW5nUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IHByYWN0aWNlRGF0YSwgdG9kYXlTdGF0cywgYWxsQ2FyZHNDb3VudCwgcHJpb3JpdHlPcmRlciwgYWxsQ2FyZFVpZHMsIGNhcmRVaWRzIH0gPSBhd2FpdCBxdWVyaWVzLmdldFByYWN0aWNlRGF0YSh7XG4gICAgICAgICAgdGFnc0xpc3QsXG4gICAgICAgICAgZGF0YVBhZ2VUaXRsZSxcbiAgICAgICAgICBkYWlseUxpbWl0LFxuICAgICAgICAgIGlzQ3JhbW1pbmcsXG4gICAgICAgICAgc2h1ZmZsZUNhcmRzLFxuICAgICAgICAgIGNhY2hlZERhdGEsXG4gICAgICAgICAgZGVmYXVsdFByaW9yaXR5OiBzdGFibGVEZWZhdWx0UHJpb3JpdHksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIPCfmoAgUDE6IOabtOaWsCBSZWYg5a2Y5YKo55qE5aSn5a+56LGhXG4gICAgICAgIHByYWN0aWNlRGF0YVJlZi5jdXJyZW50ID0gcHJhY3RpY2VEYXRhO1xuICAgICAgICBwcmlvcml0eU9yZGVyUmVmLmN1cnJlbnQgPSBwcmlvcml0eU9yZGVyO1xuICAgICAgICBhbGxDYXJkVWlkc1JlZi5jdXJyZW50ID0gYWxsQ2FyZFVpZHM7XG4gICAgICAgIGNhcmRVaWRzUmVmLmN1cnJlbnQgPSBjYXJkVWlkcztcblxuICAgICAgICAvLyDwn5qAIFAxOiDmm7TmlrAgc3RhdGUg5Lit55qE5YWz6ZSu5pWw5o2u5ZKM54mI5pys5Y+3XG4gICAgICAgIHNldFRvZGF5KHRvZGF5U3RhdHMpO1xuICAgICAgICBzZXRBbGxDYXJkc0NvdW50KGFsbENhcmRzQ291bnQpO1xuICAgICAgICBzZXREYXRhVmVyc2lvbihwcmV2ID0+IHByZXYgKyAxKTsgLy8g6Kem5Y+R57uE5Lu26YeN5riy5p+TXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfwn5OKIFt1c2VQcmFjdGljZURhdGFdIOaVsOaNruiOt+WPluWksei0pTonLCBlcnJvcik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpc0V4ZWN1dGluZ1JlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSkoKTtcbiAgfSwgW1xuICAgIHNlbGVjdGVkVGFnLFxuICAgIGRhdGFQYWdlVGl0bGUsXG4gICAgcmVmZXRjaFRyaWdnZXIsXG4gICAgaXNDcmFtbWluZyxcbiAgICBkYWlseUxpbWl0LFxuICAgIHRhZ3NMaXN0LFxuICAgIHNodWZmbGVDYXJkcyxcbiAgICBjYWNoZWREYXRhLFxuICAgIHN0YWJsZURlZmF1bHRQcmlvcml0eSxcbiAgXSk7XG5cbiAgcmV0dXJuIHtcbiAgICAvLyDwn5qAIFAxOiDov5Tlm54gZ2V0dGVyIOWHveaVsOiAjOmdnuebtOaOpeeahOWkp+WvueixoVxuICAgIGdldCBwcmFjdGljZURhdGEoKSB7IHJldHVybiBwcmFjdGljZURhdGFSZWYuY3VycmVudDsgfSxcbiAgICBnZXQgcHJpb3JpdHlPcmRlcigpIHsgcmV0dXJuIHByaW9yaXR5T3JkZXJSZWYuY3VycmVudDsgfSxcbiAgICBnZXQgYWxsQ2FyZFVpZHMoKSB7IHJldHVybiBhbGxDYXJkVWlkc1JlZi5jdXJyZW50OyB9LFxuICAgIGdldCBjYXJkVWlkcygpIHsgcmV0dXJuIGNhcmRVaWRzUmVmLmN1cnJlbnQ7IH0sXG4gICAgZmV0Y2hQcmFjdGljZURhdGE6IHJlZmV0Y2hUcmlnZ2VyRm4sXG4gICAgdG9kYXksXG4gICAgYWxsQ2FyZHNDb3VudCxcbiAgICBkYXRhVmVyc2lvbiwgLy8g55So5LqO57uE5Lu25Yaz5a6a5piv5ZCm6YeN5riy5p+TXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VQcmFjdGljZUNhcmRzRGF0YTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIEJsdWVwcmludCBmcm9tICdAYmx1ZXByaW50anMvY29yZSc7XG5pbXBvcnQgKiBhcyBxdWVyaWVzIGZyb20gJ34vcXVlcmllcyc7XG5pbXBvcnQgKiBhcyBhc3luY1V0aWxzIGZyb20gJ34vdXRpbHMvYXN5bmMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0ICogYXMgc3RyaW5nVXRpbHMgZnJvbSAnfi91dGlscy9zdHJpbmcnO1xuaW1wb3J0IHsgQ29tcGxldGVSZWNvcmRzIH0gZnJvbSAnfi9tb2RlbHMvc2Vzc2lvbic7XG5cbmNvbnN0IEJvcmRlckNvbG9yID0gJyNlNWU3ZWInO1xuXG5jb25zdCBTZXNzaW9uc1RhYmxlID0gKHsgc2Vzc2lvbnMgfSkgPT4ge1xuICBjb25zdCBoYXNOZXdTZXNzaW9uID0gc2Vzc2lvbnMuc29tZSgoc2Vzc2lvbikgPT4gIXNlc3Npb24uaXNSb2FtU3JPbGRQcmFjdGljZVJlY29yZCk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJvdmVyZmxvdy1zY3JvbGxcIj5cbiAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJicDMtaHRtbC10YWJsZSBicDMtc21hbGwgYnAzLWh0bWwtdGFibGUtc3RyaXBlZCB3LWZ1bGxcIj5cbiAgICAgICAgPHRoZWFkPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aD5HcmFkZTwvdGg+XG4gICAgICAgICAgICA8dGg+RGF0ZTwvdGg+XG4gICAgICAgICAgICA8dGg+ZUZhY3RvcjwvdGg+XG4gICAgICAgICAgICA8dGg+SW50ZXJ2YWw8L3RoPlxuICAgICAgICAgICAgPHRoPlN0cmVhazwvdGg+XG4gICAgICAgICAgICA8dGg+RHVlPC90aD5cbiAgICAgICAgICAgIHtoYXNOZXdTZXNzaW9uICYmIDx0aD5OZXc8L3RoPn1cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RoZWFkPlxuICAgICAgICA8dGJvZHk+XG4gICAgICAgICAge3Nlc3Npb25zLm1hcCgoc2Vzc2lvbiwgaSkgPT4gKFxuICAgICAgICAgICAgPHRyIGtleT17aX0+XG4gICAgICAgICAgICAgIDx0ZD57c2Vzc2lvbi5ncmFkZX08L3RkPlxuICAgICAgICAgICAgICA8dGQ+e3N0cmluZ1V0aWxzLnRvRGF0ZVN0cmluZyhzZXNzaW9uLmRhdGVDcmVhdGVkKX08L3RkPlxuICAgICAgICAgICAgICA8dGQ+e3Nlc3Npb24uZUZhY3Rvci50b0ZpeGVkKDIpfTwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD57c2Vzc2lvbi5pbnRlcnZhbH08L3RkPlxuICAgICAgICAgICAgICA8dGQ+e3Nlc3Npb24ucmVwZXRpdGlvbnN9PC90ZD5cbiAgICAgICAgICAgICAgPHRkPntzdHJpbmdVdGlscy50b0RhdGVTdHJpbmcoc2Vzc2lvbi5uZXh0RHVlRGF0ZSl9PC90ZD5cbiAgICAgICAgICAgICAge2hhc05ld1Nlc3Npb24gJiYgPHRkPnshc2Vzc2lvbi5pc1JvYW1Tck9sZFByYWN0aWNlUmVjb3JkID8gJ+Kdh++4jycgOiAnJ308L3RkPn1cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgRGl2aWRlciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtCb3JkZXJDb2xvcn07XG5gO1xuXG5jb25zdCBCbG9jayA9ICh7IHV1aWQsIHNlc3Npb25zLCBpc0xhc3QsIGlzRmlyc3QsIHNlbGVjdGVkVWlkcywgc2V0U2VsZWN0ZWRVaWRzLCBibG9ja0luZm8gfSkgPT4ge1xuICBjb25zdCBbaXNTZWxlY3RlZCwgc2V0SXNTZWxlY3RlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtpc0V4cGFuZGVkLCBzZXRJc0V4cGFuZGVkXSA9IFJlYWN0LnVzZVN0YXRlKGlzRmlyc3QgPyB0cnVlIDogZmFsc2UpO1xuXG4gIC8vIFNldCBzZWxlY3RlZFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzZWxlY3RlZFVpZHMuaW5jbHVkZXModXVpZCkpIHtcbiAgICAgIHNldElzU2VsZWN0ZWQodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldElzU2VsZWN0ZWQoZmFsc2UpO1xuICAgIH1cbiAgfSwgW3NlbGVjdGVkVWlkc10pO1xuXG4gIGNvbnN0IGhhbmRsZUNoZWNrYm94Q2hhbmdlID0gKGUpID0+IHtcbiAgICBzZXRTZWxlY3RlZFVpZHMoKGN1cnJlbnRVaWRzKSA9PiB7XG4gICAgICBpZiAoZS50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgICByZXR1cm4gWy4uLmN1cnJlbnRVaWRzLCB1dWlkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50VWlkcy5maWx0ZXIoKHVpZCkgPT4gdWlkICE9PSB1dWlkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBuZXdTZXNzaW9ucyA9IHNlc3Npb25zLmZpbHRlcigoc2Vzc2lvbikgPT4gIXNlc3Npb24uaXNSb2FtU3JPbGRQcmFjdGljZVJlY29yZCk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2BmbGV4IGZsZXgtY29sIHB4LTQgcHktNGB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgPEJsdWVwcmludC5DaGVja2JveFxuICAgICAgICAgICAgY2hlY2tlZD17aXNTZWxlY3RlZH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGVja2JveENoYW5nZX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImN1cnNvci1ub3QtYWxsb3dlZFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ0cnVuY2F0ZSB3LWZ1bGwgY3Vyc29yLXBvaW50ZXJcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0SXNFeHBhbmRlZCgoYm9vbCkgPT4gIWJvb2wpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJ1bmNhdGUgdy1mdWxsIGN1cnNvci1wb2ludGVyIHRleHQtZ3JheS02MDBcIj57YmxvY2tJbmZvPy5zdHJpbmd9PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJwMy10ZXh0LXNtYWxsIGJwMy10ZXh0LW11dGVkXCI+XG4gICAgICAgICAgICAgIEZvdW5kIHtzZXNzaW9ucy5sZW5ndGggLSBuZXdTZXNzaW9ucy5sZW5ndGh9IFByYWN0aWNlIFNlc3Npb25zeycgJ31cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ncmVlbi02MDBcIj5cbiAgICAgICAgICAgICAgICB7bmV3U2Vzc2lvbnMubGVuZ3RoID4gMCAmJiBgKG1lcmdlZCB3aXRoICR7bmV3U2Vzc2lvbnMubGVuZ3RofSBuZXcgc2Vzc2lvbnMpYH1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2BweC01IGN1cnNvci1wb2ludGVyYH0gb25DbGljaz17KCkgPT4gc2V0SXNFeHBhbmRlZCgoYm9vbCkgPT4gIWJvb2wpfT5cbiAgICAgICAgICAgIDxCbHVlcHJpbnQuSWNvblxuICAgICAgICAgICAgICBpY29uPVwiY2hldnJvbi1kb3duXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtpc0V4cGFuZGVkID8gJ3RyYW5zZm9ybSByb3RhdGUtMTgwJyA6ICcnfWB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge2lzRXhwYW5kZWQgJiYgPFNlc3Npb25zVGFibGUgc2Vzc2lvbnM9e3Nlc3Npb25zfSAvPn1cbiAgICAgIDwvZGl2PlxuICAgICAgeyFpc0xhc3QgJiYgPERpdmlkZXIgLz59XG4gICAgPC8+XG4gICk7XG59O1xuXG5jb25zdCBSZXN1bHRzV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIG1heC1oZWlnaHQ6IDUwMHB4O1xuICBvdmVyZmxvdzogc2Nyb2xsO1xuYDtcblxuY29uc3QgRGlhbG9nID0gc3R5bGVkKEJsdWVwcmludC5EaWFsb2cpYFxuICB3aWR0aDogOTAlO1xuICBtYXgtd2lkdGg6IDcwMHB4O1xuYDtcblxuY29uc3QgSGVhZGVyRWxtID0gc3R5bGVkLmRpdmBcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7Qm9yZGVyQ29sb3J9O1xuYDtcblxuY29uc3QgSGVhZGVyID0gKHtcbiAgdG90YWxDYXJkc0ZvdW5kLFxuICB0b3RhbFJlY29yZHMsXG4gIGV4ZWN1dGVJbXBvcnQsXG4gIGlzSW1wb3J0aW5nLFxuICBzZWxlY3RlZFVpZHMsXG4gIHNldExhdW5jaFBhbmVsLFxuICBpbXBvcnRlZFVpZHMsXG4gIG9uU2VsZWN0QWxsQ2xpY2ssXG4gIG9uRGVzZWxlY3RBbGxDbGljayxcbn0pID0+IChcbiAgPEhlYWRlckVsbSBjbGFzc05hbWU9XCJmbGV4IHB4LTQgcHktNCBqdXN0aWZ5LWJldHdlZW5cIj5cbiAgICA8ZGl2PlxuICAgICAgPGg0IGNsYXNzTmFtZT1cImJwMy1oZWFkaW5nIG1iLTFcIj5JbXBvcnQgUm9hbSBTci4gRGF0YTwvaDQ+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJwMy10ZXh0LXNtYWxsIGJwMy10ZXh0LW11dGVkXCI+XG4gICAgICAgIDw+XG4gICAgICAgICAgRm91bmQgPHN0cm9uZz57dG90YWxDYXJkc0ZvdW5kfTwvc3Ryb25nPiBjYXJkcyB3aXRoIGEgdG90YWwgb2Z7JyAnfVxuICAgICAgICAgIDxzdHJvbmc+e3RvdGFsUmVjb3Jkc308L3N0cm9uZz4gc2Vzc2lvbnMuXG4gICAgICAgIDwvPlxuICAgICAgPC9kaXY+XG4gICAgICB7aW1wb3J0ZWRVaWRzLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJwMy10ZXh0LXNtYWxsIGJwMy10ZXh0LW11dGVkXCI+XG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxzdHJvbmc+e2ltcG9ydGVkVWlkcy5sZW5ndGh9PC9zdHJvbmc+IGNhcmRzIGhhdmUgYWxyZWFkeSBiZWVuIGltcG9ydGVkLlxuICAgICAgICAgIDwvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICAgPGRpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWVuZCBpdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgPEJsdWVwcmludC5CdXR0b25cbiAgICAgICAgICBvbkNsaWNrPXtleGVjdXRlSW1wb3J0fVxuICAgICAgICAgIGRpc2FibGVkPXtpc0ltcG9ydGluZyB8fCAhc2VsZWN0ZWRVaWRzLmxlbmd0aH1cbiAgICAgICAgICBpbnRlbnQ9XCJwcmltYXJ5XCJcbiAgICAgICAgPlxuICAgICAgICAgIEltcG9ydCB7c2VsZWN0ZWRVaWRzLmxlbmd0aCA9PT0gdG90YWxDYXJkc0ZvdW5kID8gJ0FsbCcgOiBgKCR7c2VsZWN0ZWRVaWRzLmxlbmd0aH0pYH1cbiAgICAgICAgPC9CbHVlcHJpbnQuQnV0dG9uPlxuICAgICAgICA8Qmx1ZXByaW50LkJ1dHRvbiBpY29uPVwiY3Jvc3NcIiBvbkNsaWNrPXsoKSA9PiBzZXRMYXVuY2hQYW5lbChmYWxzZSl9IGNsYXNzTmFtZT1cIm1sLTJcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJwMy10ZXh0LXNtYWxsIGJwMy10ZXh0LW11dGVkIHB0LTJcIj5cbiAgICAgICAgPEJsdWVwcmludC5CdXR0b24gb25DbGljaz17b25TZWxlY3RBbGxDbGlja30gY2xhc3NOYW1lPVwibWwtMlwiIHNtYWxsIG1pbmltYWw+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYnAzLXRleHQtc21hbGwgYnAzLXRleHQtbXV0ZWRcIj5TZWxlY3QgQWxsPC9zcGFuPlxuICAgICAgICA8L0JsdWVwcmludC5CdXR0b24+eycgJ31cbiAgICAgICAgL3snICd9XG4gICAgICAgIDxCbHVlcHJpbnQuQnV0dG9uIG9uQ2xpY2s9e29uRGVzZWxlY3RBbGxDbGlja30gc21hbGwgbWluaW1hbD5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJicDMtdGV4dC1zbWFsbCBicDMtdGV4dC1tdXRlZFwiPkRlc2VsZWN0IEFsbDwvc3Bhbj5cbiAgICAgICAgPC9CbHVlcHJpbnQuQnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvSGVhZGVyRWxtPlxuKTtcblxuY29uc3QgRm9ybUxhYmVsID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xuICBtYXJnaW4tYm90dG9tOiA1cHg7XG5gO1xuXG5jb25zdCBUb2tlblBhZ2UgPSAoeyB0b2tlbiwgc2V0VG9rZW4sIHNldFNob3dJbXBvcnRQYWdlLCBkYXRhUGFnZVRpdGxlIH0pID0+IHtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3ZhbGlkYXRpb25NZXNzYWdlLCBzZXRWYWxpZGF0aW9uTWVzc2FnZV0gPSBSZWFjdC51c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IHRlc3RBcGlUb2tlbiA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgY29uc3QgZGF0YVBhZ2VVaWQgPSBhd2FpdCBxdWVyaWVzLmdldE9yQ3JlYXRlUGFnZShkYXRhUGFnZVRpdGxlKTtcbiAgICBjb25zdCB0ZXN0QmxvY2tVaWQgPSB3aW5kb3cucm9hbUFscGhhQVBJLnV0aWwuZ2VuZXJhdGVVSUQoKTtcbiAgICBjb25zdCBncmFwaE5hbWUgPSB3aW5kb3cucm9hbUFscGhhQVBJLmdyYXBoLm5hbWU7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgZ3JhcGhOYW1lLFxuICAgICAgZGF0YToge1xuICAgICAgICBhY3Rpb246ICdiYXRjaC1hY3Rpb25zJyxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2NyZWF0ZS1ibG9jaycsXG4gICAgICAgICAgICBsb2NhdGlvbjoge1xuICAgICAgICAgICAgICAncGFyZW50LXVpZCc6IGRhdGFQYWdlVWlkLFxuICAgICAgICAgICAgICBvcmRlcjogJ2xhc3QnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsb2NrOiB7XG4gICAgICAgICAgICAgIHVpZDogdGVzdEJsb2NrVWlkLFxuICAgICAgICAgICAgICBzdHJpbmc6ICd0ZXN0JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBhY3Rpb246ICdkZWxldGUtYmxvY2snLFxuICAgICAgICAgICAgYmxvY2s6IHtcbiAgICAgICAgICAgICAgdWlkOiB0ZXN0QmxvY2tVaWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIH07XG4gICAgY29uc3QgYmFzZVVybCA9ICdodHRwczovL3JvYW0tbWVtby1zZXJ2ZXIub25yZW5kZXIuY29tJztcbiAgICAvLyBjb25zdCBiYXNlVXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCc7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7YmFzZVVybH0vc2F2ZS1yb2FtLXNyLWRhdGFgLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0b2tlbn1gLFxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0FQSSB2YWxpZGF0aW9uIGZhaWxlZC4gUGxlYXNlIGNoZWNrIHlvdXIgdG9rZW4gYW5kIG1ha2Ugc3VyZSB5b3UgaGF2ZSBlZGl0IGFjY2VzcyB0byB0aGlzIGdyYXBoJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc2V0U2hvd0ltcG9ydFBhZ2UodHJ1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc2V0VmFsaWRhdGlvbk1lc3NhZ2UoZS5tZXNzYWdlKTtcbiAgICB9XG4gICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBweC00IHB5LTQganVzdGlmeS1iZXR3ZWVuXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyXCI+XG4gICAgICAgIHsvKkB0cy1pZ25vcmUqL31cbiAgICAgICAgPEJsdWVwcmludC5Gb3JtR3JvdXBcbiAgICAgICAgICBsYWJlbD1cIlJvYW0gR3JhcGggQVBJIFRva2VuXCJcbiAgICAgICAgICBsYWJlbEZvcj1cInRleHQtaW5wdXRcIlxuICAgICAgICAgIGxhYmVsSW5mbz1cIihyZXF1aXJlZClcIlxuICAgICAgICA+XG4gICAgICAgICAgPEZvcm1MYWJlbCBjbGFzc05hbWU9XCJicDMtZm9ybS1oZWxwZXItdGV4dFwiIHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogMTAgfX0+XG4gICAgICAgICAgICBJbiBvcmRlciB0byBpbXBvcnQgeW91ciBwcmFjdGljZSBkYXRhLCB5b3UgbmVlZCB0byBnZW5lcmF0ZSBhIFJvYW0gR3JhcGggQVBJIFRva2VuLnsnICd9XG4gICAgICAgICAgICA8YVxuICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9yb2FtcmVzZWFyY2guY29tLyMvYXBwL2RldmVsb3Blci1kb2N1bWVudGF0aW9uL3BhZ2UvYm1ZWUtRNHZmXCJcbiAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgcmVsPVwibm9yZWZlcnJlclwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIENsaWNrIGhlcmVcbiAgICAgICAgICAgIDwvYT57JyAnfVxuICAgICAgICAgICAgdG8gbGVhcm4gaG93IHRvIGdlbmVyYXRlIG9uZS5cbiAgICAgICAgICA8L0Zvcm1MYWJlbD5cbiAgICAgICAgICA8Qmx1ZXByaW50LklucHV0R3JvdXBcbiAgICAgICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICAgICAgaWQ9XCJ0ZXh0LWlucHV0XCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwicm9hbS1ncmFwaC10b2tlbi1YWFhYWC1YWFhYWFhYWFhYWFhcIlxuICAgICAgICAgICAgdmFsdWU9e3Rva2VufVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICBzZXRUb2tlbihldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uS2V5VXA9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICAgICAgdGVzdEFwaVRva2VuKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJtYi0zXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWNlbnRlciBmbGV4LWNvbFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgICA8Qmx1ZXByaW50LkJ1dHRvblxuICAgICAgICAgICAgICAgIGljb249XCJnZW9zZWFyY2hcIlxuICAgICAgICAgICAgICAgIGludGVudD1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgIGxvYWRpbmc9e2lzTG9hZGluZ31cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17IXRva2VuIHx8IGlzTG9hZGluZ31cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0ZXN0QXBpVG9rZW59XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBGZXRjaCBQcmV2aWV3IERhdGFcbiAgICAgICAgICAgICAgPC9CbHVlcHJpbnQuQnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7dmFsaWRhdGlvbk1lc3NhZ2UgJiYgKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTMgdGV4dC1jZW50ZXIgdGV4dC1zbSB0ZXh0LXJlZC00MDBcIj57dmFsaWRhdGlvbk1lc3NhZ2V9PC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L0JsdWVwcmludC5Gb3JtR3JvdXA+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IEltcG9ydFByb2dyZXNzT3ZlcmxheSA9ICh7XG4gIGlzSW1wb3J0aW5nLFxuICBzZXRMYXVuY2hQYW5lbCxcbiAgaGFzSW1wb3J0ZWQsXG4gIHNlbGVjdGVkVWlkcyxcbiAgaW1wb3J0ZWRVaWRzLFxufSkgPT4ge1xuICBjb25zdCBzZWxlY3RlZENvdW50ID0gc2VsZWN0ZWRVaWRzLmxlbmd0aDtcbiAgY29uc3QgW3RvSW1wb3J0Q291bnRdID0gUmVhY3QudXNlU3RhdGUoc2VsZWN0ZWRDb3VudCk7XG4gIGNvbnN0IFtzdGFydGluZ0ltcG9ydENvdW50XSA9IFJlYWN0LnVzZVN0YXRlKGltcG9ydGVkVWlkcy5sZW5ndGgpO1xuICBjb25zdCBjdXJyZW50SW1wb3J0ZWRDb3VudCA9IGltcG9ydGVkVWlkcy5sZW5ndGggLSBzdGFydGluZ0ltcG9ydENvdW50O1xuICBjb25zdCBmaW5pc2hlZEltcG9ydGluZyA9IGN1cnJlbnRJbXBvcnRlZENvdW50ID09PSB0b0ltcG9ydENvdW50O1xuXG4gIGlmICghaXNJbXBvcnRpbmcgJiYgIWhhc0ltcG9ydGVkKSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQtMCBmbGV4IGZsZXgtY29sIGJnLXdoaXRlIHotMTBcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHktNSBweC01IGZsZXggaC1mdWxsIGZsZXgtY29sIGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICB7aGFzSW1wb3J0ZWQgPyAoXG4gICAgICAgICAgPGg0IGNsYXNzTmFtZT1cImJwMy1oZWFkaW5nIG1iLTNcIj5JbXBvcnQgQ29tcGxldGU8L2g0PlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJicDMtaGVhZGluZyBtYi0zXCI+XG4gICAgICAgICAgICBJbXBvcnRpbmcgU2Vzc2lvbnMge2N1cnJlbnRJbXBvcnRlZENvdW50fS97dG9JbXBvcnRDb3VudH1cbiAgICAgICAgICA8L2g0PlxuICAgICAgICApfVxuICAgICAgICA8Qmx1ZXByaW50LlByb2dyZXNzQmFyXG4gICAgICAgICAgaW50ZW50PXtmaW5pc2hlZEltcG9ydGluZyA/ICdzdWNjZXNzJyA6ICdwcmltYXJ5J31cbiAgICAgICAgICBhbmltYXRlPXtmaW5pc2hlZEltcG9ydGluZyA/IGZhbHNlIDogdHJ1ZX1cbiAgICAgICAgICBzdHJpcGVzPXtmaW5pc2hlZEltcG9ydGluZyA/IGZhbHNlIDogdHJ1ZX1cbiAgICAgICAgICB2YWx1ZT17Y3VycmVudEltcG9ydGVkQ291bnQgLyB0b0ltcG9ydENvdW50fVxuICAgICAgICAgIGNsYXNzTmFtZT1cIm1iLTNcIlxuICAgICAgICAvPlxuXG4gICAgICAgIHtmaW5pc2hlZEltcG9ydGluZyA/IChcbiAgICAgICAgICA8Qmx1ZXByaW50LkJ1dHRvblxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBzZXRMYXVuY2hQYW5lbChmYWxzZSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIENsb3NlXG4gICAgICAgICAgPC9CbHVlcHJpbnQuQnV0dG9uPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxGb3JtTGFiZWwgY2xhc3NOYW1lPVwiYnAzLWZvcm0taGVscGVyLXRleHQgbWItNVwiPlxuICAgICAgICAgICAgVGhpcyBtYXkgdGFrZSBhIHdoaWxlIHRvIHN5bmMgZXNwZWNpYWxseSBpZiB5b3UgaGF2ZSBhIGxvdCBvZiBwcmFjdGljZSBkYXRhLiBHbyBncmFiXG4gICAgICAgICAgICBjb2ZmZWUuXG4gICAgICAgICAgPC9Gb3JtTGFiZWw+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IEltcG9ydFBhZ2UgPSAoeyBkYXRhUGFnZVRpdGxlLCB0b2tlbiwgc2V0TGF1bmNoUGFuZWwgfSkgPT4ge1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gUmVhY3QudXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IFtyZWZldGNoVHJpZ2dlciwgc2V0UmVmZXRjaFRyaWdnZXJdID0gUmVhY3QudXNlU3RhdGUoMCk7XG4gIGNvbnN0IFtoYXNJbXBvcnRlZCwgc2V0SGFzSW1wb3J0ZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbaXNJbXBvcnRpbmcsIHNldElzSW1wb3J0aW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3JlY29yZHMsIHNldFJlY29yZHNdID0gUmVhY3QudXNlU3RhdGU8Q29tcGxldGVSZWNvcmRzPih7fSk7XG4gIGNvbnN0IGhhc1JlY29yZHMgPSBPYmplY3Qua2V5cyhyZWNvcmRzKS5sZW5ndGggPiAwO1xuXG4gIGNvbnN0IFtzZWxlY3RlZFVpZHMsIHNldFNlbGVjdGVkVWlkc10gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuICBjb25zdCBbaW1wb3J0ZWRVaWRzLCBzZXRJbXBvcnRlZFVpZHNdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nW10+KFtdKTtcblxuICBjb25zdCBbYmxvY2tJbmZvTWFwLCBzZXRCbG9ja0luZm9NYXBdID0gUmVhY3QudXNlU3RhdGUoe30pO1xuXG4gIGNvbnN0IHRvdGFsQ2FyZHNGb3VuZCA9IE9iamVjdC5rZXlzKHJlY29yZHMpLmxlbmd0aDtcbiAgY29uc3QgdG90YWxSZWNvcmRzID0gT2JqZWN0LnZhbHVlcyhyZWNvcmRzKS5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3Vyci5sZW5ndGgsIDApO1xuXG4gIC8vIEZldGNoIHJlY29yZHNcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgYXdhaXQgYXN5bmNVdGlscy5zbGVlcCgzMDApOyAvLyBmaXhlcyBtb2RhbCBsb2FkIGRlbGF5IGphbmtcblxuICAgICAgLy8gRmV0Y2ggZXhpc3RpbmcgcHJhY3RpY2UgZGF0YSAodXNlZCB0byBtYXJrIGJsb2NrcyB0aGF0IGFscmVhZHkgZXhpc3QpXG4gICAgICBjb25zdCBleGlzdGluZ1ByYWN0aWNlRGF0YSA9IChhd2FpdCBxdWVyaWVzLmdldFBsdWdpblBhZ2VEYXRhKHtcbiAgICAgICAgZGF0YVBhZ2VUaXRsZTogZGF0YVBhZ2VUaXRsZSxcbiAgICAgICAgbGltaXRUb0xhdGVzdDogZmFsc2UsXG4gICAgICB9KSkgYXMgQ29tcGxldGVSZWNvcmRzO1xuXG4gICAgICAvLyBGZXRjaCBPbGQgUmV2aWV3IGRhdGFcbiAgICAgIGNvbnN0IG9sZFJldmlld0RhdGEgPSBhd2FpdCBxdWVyaWVzLmdldE9sZFJvYW1TclByYWN0aWNlRGF0YSgpO1xuXG4gICAgICBjb25zdCByZWNvcmRzID0gYXdhaXQgcXVlcmllcy5nZW5lcmF0ZVJlY29yZHNGcm9tUm9hbVNyRGF0YShcbiAgICAgICAgb2xkUmV2aWV3RGF0YSxcbiAgICAgICAgZXhpc3RpbmdQcmFjdGljZURhdGEsXG4gICAgICAgIGRhdGFQYWdlVGl0bGVcbiAgICAgICk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIGxpc3Qgb2YgaWRzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gaW1wb3J0ZWRcbiAgICAgIGNvbnN0IGlkc0FscmVhZHlJbXBvcnRlZDogc3RyaW5nW10gPSBbXTtcbiAgICAgIGZvciAoY29uc3QgdWlkIG9mIE9iamVjdC5rZXlzKGV4aXN0aW5nUHJhY3RpY2VEYXRhKSkge1xuICAgICAgICBpZiAoISh1aWQgaW4gb2xkUmV2aWV3RGF0YSkpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCByZWNvcmRzID0gZXhpc3RpbmdQcmFjdGljZURhdGFbdWlkXTtcbiAgICAgICAgY29uc3QgYWxyZWFkeUltcG9ydGVkID0gcmVjb3Jkcy5zb21lKChyZWNvcmQpID0+IHtcbiAgICAgICAgICByZXR1cm4gcmVjb3JkLmlzUm9hbVNyT2xkUHJhY3RpY2VSZWNvcmQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChhbHJlYWR5SW1wb3J0ZWQpIHtcbiAgICAgICAgICBpZHNBbHJlYWR5SW1wb3J0ZWQucHVzaCh1aWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEZldGNoIGJsb2NrIGluZm9cbiAgICAgIGZvciAoY29uc3QgdWlkIG9mIE9iamVjdC5rZXlzKHJlY29yZHMpKSB7XG4gICAgICAgIGlmICh1aWQgaW4gYmxvY2tJbmZvTWFwKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgYmxvY2tJbmZvID0gYXdhaXQgcXVlcmllcy5mZXRjaEJsb2NrSW5mbyh1aWQpO1xuICAgICAgICBzZXRCbG9ja0luZm9NYXAoKGN1cnJlbnRNYXApID0+ICh7IC4uLmN1cnJlbnRNYXAsIFt1aWRdOiBibG9ja0luZm8gfSkpO1xuICAgICAgfVxuXG4gICAgICBzZXRJbXBvcnRlZFVpZHMoaWRzQWxyZWFkeUltcG9ydGVkKTtcbiAgICAgIHNldFJlY29yZHMocmVjb3Jkcyk7XG4gICAgICBzZXRTZWxlY3RlZFVpZHMoT2JqZWN0LmtleXMocmVjb3JkcykuZmlsdGVyKCh1aWQpID0+ICFpZHNBbHJlYWR5SW1wb3J0ZWQuaW5jbHVkZXModWlkKSkpO1xuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICB9KSgpO1xuICB9LCBbcmVmZXRjaFRyaWdnZXJdKTtcblxuICAvLyBSZWZldGNoIHdoaWxlIGltcG9ydGluZ1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIEtlZXAgcmVmcmV0Y2hpbmcgd2hpbGUgaW1wb3J0IHBhbmVsIGlzIG9wZW4ganVzdCBpbiBjYXNlIHRoZSBBUEkgZWFybHkgcmV0dXJucyB3ZSBzdGlsbCB3YW50IHByb2dyZXNzIHRvIGtlZXAgdXBkYXRpbmcuXG4gICAgaWYgKCFpc0ltcG9ydGluZyAmJiAhaGFzSW1wb3J0ZWQpIHJldHVybjtcbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgIHNldFJlZmV0Y2hUcmlnZ2VyKChuKSA9PiBuICsgMSk7XG4gICAgfSwgMzAwMCk7XG4gICAgcmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICB9LCBbaXNJbXBvcnRpbmddKTtcblxuICBjb25zdCBleGVjdXRlSW1wb3J0ID0gYXN5bmMgKCkgPT4ge1xuICAgIHNldElzSW1wb3J0aW5nKHRydWUpO1xuICAgIGF3YWl0IHF1ZXJpZXMuYnVsa1NhdmVQcmFjdGljZURhdGEoeyB0b2tlbiwgcmVjb3Jkcywgc2VsZWN0ZWRVaWRzLCBkYXRhUGFnZVRpdGxlIH0pO1xuICAgIHNldEhhc0ltcG9ydGVkKHRydWUpO1xuICAgIHNldElzSW1wb3J0aW5nKGZhbHNlKTtcbiAgICBzZXRSZWZldGNoVHJpZ2dlcigobikgPT4gbiArIDEpO1xuICB9O1xuXG4gIHJldHVybiBpc0xvYWRpbmcgJiYgIWlzSW1wb3J0aW5nICYmICFoYXNJbXBvcnRlZCA/IChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIG15LTEwXCI+XG4gICAgICA8Qmx1ZXByaW50LlNwaW5uZXIgY2xhc3NOYW1lPVwibXItM1wiIC8+XG4gICAgICA8ZGl2PkxvYWRpbmcuLi48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKSA6IChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgcmVsYXRpdmVcIj5cbiAgICAgIDxJbXBvcnRQcm9ncmVzc092ZXJsYXlcbiAgICAgICAgaXNJbXBvcnRpbmc9e2lzSW1wb3J0aW5nfVxuICAgICAgICBoYXNJbXBvcnRlZD17aGFzSW1wb3J0ZWR9XG4gICAgICAgIHNldExhdW5jaFBhbmVsPXtzZXRMYXVuY2hQYW5lbH1cbiAgICAgICAgc2VsZWN0ZWRVaWRzPXtzZWxlY3RlZFVpZHN9XG4gICAgICAgIGltcG9ydGVkVWlkcz17aW1wb3J0ZWRVaWRzfVxuICAgICAgLz5cbiAgICAgIDxIZWFkZXJcbiAgICAgICAgdG90YWxDYXJkc0ZvdW5kPXt0b3RhbENhcmRzRm91bmR9XG4gICAgICAgIHRvdGFsUmVjb3Jkcz17dG90YWxSZWNvcmRzfVxuICAgICAgICBleGVjdXRlSW1wb3J0PXtleGVjdXRlSW1wb3J0fVxuICAgICAgICBpc0ltcG9ydGluZz17aXNJbXBvcnRpbmd9XG4gICAgICAgIHNlbGVjdGVkVWlkcz17c2VsZWN0ZWRVaWRzfVxuICAgICAgICBzZXRMYXVuY2hQYW5lbD17c2V0TGF1bmNoUGFuZWx9XG4gICAgICAgIGltcG9ydGVkVWlkcz17aW1wb3J0ZWRVaWRzfVxuICAgICAgICBvblNlbGVjdEFsbENsaWNrPXsoKSA9PiBzZXRTZWxlY3RlZFVpZHMoT2JqZWN0LmtleXMocmVjb3JkcykpfVxuICAgICAgICBvbkRlc2VsZWN0QWxsQ2xpY2s9eygpID0+IHNldFNlbGVjdGVkVWlkcyhbXSl9XG4gICAgICAvPlxuICAgICAgPFJlc3VsdHNXcmFwcGVyPlxuICAgICAgICB7aGFzUmVjb3JkcyA/IChcbiAgICAgICAgICBPYmplY3Qua2V5cyhyZWNvcmRzKVxuICAgICAgICAgICAgLnNvcnQoKHVpZCkgPT4gKCFpbXBvcnRlZFVpZHMuaW5jbHVkZXModWlkKSA/IC0xIDogMSkpXG4gICAgICAgICAgICAubWFwKCh1dWlkLCBpLCBsaXN0KSA9PiAoXG4gICAgICAgICAgICAgIDxCbG9ja1xuICAgICAgICAgICAgICAgIGtleT17dXVpZH1cbiAgICAgICAgICAgICAgICB1dWlkPXt1dWlkfVxuICAgICAgICAgICAgICAgIHNlc3Npb25zPXtyZWNvcmRzW3V1aWRdfVxuICAgICAgICAgICAgICAgIGlzTGFzdD17aSA9PT0gbGlzdC5sZW5ndGggLSAxfVxuICAgICAgICAgICAgICAgIGlzRmlyc3Q9e2kgPT09IDB9XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRVaWRzPXtzZWxlY3RlZFVpZHN9XG4gICAgICAgICAgICAgICAgc2V0U2VsZWN0ZWRVaWRzPXtzZXRTZWxlY3RlZFVpZHN9XG4gICAgICAgICAgICAgICAgYmxvY2tJbmZvPXtibG9ja0luZm9NYXBbdXVpZF19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApKVxuICAgICAgICApIDogKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXIgbXktMTBcIj5cbiAgICAgICAgICAgIDxkaXY+Tm8gcmVjb3JkcyBmb3VuZC48L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvUmVzdWx0c1dyYXBwZXI+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBQYW5lbCA9ICh7IGRhdGFQYWdlVGl0bGUsIHNldExhdW5jaFBhbmVsLCB0b2tlbiwgc2V0VG9rZW4gfSkgPT4ge1xuICBjb25zdCBbc2hvd0ltcG9ydFBhZ2UsIHNldFNob3dJbXBvcnRQYWdlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcblxuICByZXR1cm4gKFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICA8RGlhbG9nXG4gICAgICAvLyBvbkNsb3NlPXtvbkNsb3NlQ2FsbGJhY2t9XG4gICAgICBjbGFzc05hbWU9XCJicDMtdWktdGV4dCBwYi0wIGJnLXdoaXRlIHNlbGVjdC1ub25lXCJcbiAgICAgIGNhbkVzY2FwZUtleUNsb3NlPXtmYWxzZX1cbiAgICAgIGlzT3BlblxuICAgID5cbiAgICAgIHt0b2tlbiAmJiBzaG93SW1wb3J0UGFnZSA/IChcbiAgICAgICAgPEltcG9ydFBhZ2UgZGF0YVBhZ2VUaXRsZT17ZGF0YVBhZ2VUaXRsZX0gdG9rZW49e3Rva2VufSBzZXRMYXVuY2hQYW5lbD17c2V0TGF1bmNoUGFuZWx9IC8+XG4gICAgICApIDogKFxuICAgICAgICA8VG9rZW5QYWdlXG4gICAgICAgICAgdG9rZW49e3Rva2VufVxuICAgICAgICAgIHNldFRva2VuPXtzZXRUb2tlbn1cbiAgICAgICAgICBzZXRTaG93SW1wb3J0UGFnZT17c2V0U2hvd0ltcG9ydFBhZ2V9XG4gICAgICAgICAgZGF0YVBhZ2VUaXRsZT17ZGF0YVBhZ2VUaXRsZX1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC9EaWFsb2c+XG4gICk7XG59O1xuXG5jb25zdCBSb2FtU3JJbXBvcnRQYW5lbCA9ICh7IGRhdGFQYWdlVGl0bGUgfSkgPT4ge1xuICBjb25zdCBbbGF1bmNoUGFuZWwsIHNldExhdW5jaFBhbmVsXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3Rva2VuLCBzZXRUb2tlbl0gPSBSZWFjdC51c2VTdGF0ZTxudWxsIHwgc3RyaW5nPihudWxsKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8Qmx1ZXByaW50LkJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRMYXVuY2hQYW5lbCh0cnVlKX0+TGF1bmNoPC9CbHVlcHJpbnQuQnV0dG9uPlxuICAgICAge2xhdW5jaFBhbmVsICYmIChcbiAgICAgICAgPFBhbmVsXG4gICAgICAgICAgZGF0YVBhZ2VUaXRsZT17ZGF0YVBhZ2VUaXRsZX1cbiAgICAgICAgICBzZXRMYXVuY2hQYW5lbD17c2V0TGF1bmNoUGFuZWx9XG4gICAgICAgICAgdG9rZW49e3Rva2VufVxuICAgICAgICAgIHNldFRva2VuPXtzZXRUb2tlbn1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSb2FtU3JJbXBvcnRQYW5lbDtcbiIsImltcG9ydCAqIGFzIGFzeW5jVXRpbHMgZnJvbSAnfi91dGlscy9hc3luYyc7XG5pbXBvcnQgUm9hbVNySW1wb3J0UGFuZWwgZnJvbSAnfi9jb21wb25lbnRzL1JvYW1TckltcG9ydFBhbmVsJztcbmltcG9ydCB7IGRlZmF1bHRTZXR0aW5ncyB9IGZyb20gJy4vaG9va3MvdXNlU2V0dGluZ3MnO1xuXG5jb25zdCBzZXR0aW5nc1BhbmVsQ29uZmlnID0gKHsgc2V0dGluZ3MsIHNldFNldHRpbmdzIH0pID0+IHtcbiAgY29uc3Qgc3luY0ZuID0gYXN5bmMgKHsga2V5LCB2YWx1ZSB9OiB7IGtleTogc3RyaW5nOyB2YWx1ZTogYW55IH0pID0+IHtcbiAgICB3aW5kb3cucm9hbU1lbW8uZXh0ZW5zaW9uQVBJLnNldHRpbmdzLnNldChrZXksIHZhbHVlKTtcbiAgICBzZXRTZXR0aW5ncygoY3VycmVudFNldHRpbmdzKSA9PiB7XG4gICAgICByZXR1cm4geyAuLi5jdXJyZW50U2V0dGluZ3MsIFtrZXldOiB2YWx1ZSB9O1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IHByb2Nlc3NDaGFuZ2UgPSBhc3luY1V0aWxzLmRlYm91bmNlKChlKSA9PiBzeW5jRm4oZSkpO1xuXG4gIHJldHVybiB7XG4gICAgdGFiVGl0bGU6ICdNZW1vIEVuaGFuY2VkJyxcbiAgICBzZXR0aW5nczogW1xuICAgICAge1xuICAgICAgICBpZDogJ2ZzcnNFbmFibGVkJyxcbiAgICAgICAgbmFtZTogJ0VuYWJsZSBGU1JTIEFsZ29yaXRobS/lkK/nlKhGU1JT566X5rOVJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdFbmFibGUgdGhlIG1vZGVybiBGU1JTIGFsZ29yaXRobSBpbnN0ZWFkIG9mIFNNMi4gRlNSUyBwcm92aWRlcyBiZXR0ZXIgbG9uZy10ZXJtIHJldGVudGlvbiBwcmVkaWN0aW9uLiBcXG7pu5jorqTlkK/nlKjmm7TlhYjov5vnmoRGU1JT566X5rOV77yM5o+Q5L6b5Z+65LqO5py65Zmo5a2m5Lmg55qE6K6w5b+G6aKE5rWL44CC6Iul5oOz5YiH5o2i5Zue57uP5YW455qEU00y566X5rOV77yM5Y+v5YWz6Zet5q2k5byA5YWz44CCJyxcbiAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgdHlwZTogJ3N3aXRjaCcsXG4gICAgICAgICAgY2hlY2tlZDogc2V0dGluZ3MuZnNyc0VuYWJsZWQsXG4gICAgICAgICAgb25DaGFuZ2U6IChlKSA9PiB7XG4gICAgICAgICAgICBwcm9jZXNzQ2hhbmdlKHsga2V5OiAnZnNyc0VuYWJsZWQnLCB2YWx1ZTogZS50YXJnZXQuY2hlY2tlZCB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdtaWdyYXRlLXJvYW0tc3ItZGF0YScsXG4gICAgICAgIG5hbWU6ICdNaWdyYXRlIFJvYW0vU3IgRGF0YScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQSB0b29sIHRvIGltcG9ydCB5b3VyIFJvYW0vU3IgZGF0YSBpbnRvIE1lbW8gRW5oYW5jZWQuJyxcbiAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgdHlwZTogJ3JlYWN0Q29tcG9uZW50JyxcbiAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IDxSb2FtU3JJbXBvcnRQYW5lbCBkYXRhUGFnZVRpdGxlPXtzZXR0aW5ncy5kYXRhUGFnZVRpdGxlfSAvPixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAnZGF0YVBhZ2VUaXRsZScsXG4gICAgICAgIG5hbWU6ICdEYXRhIFBhZ2UgVGl0bGUnLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJOYW1lIG9mIHBhZ2Ugd2hlcmUgd2UnbGwgc3RvcmUgYWxsIHlvdXIgZGF0YVwiLFxuICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICB0eXBlOiAnaW5wdXQnLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBkZWZhdWx0U2V0dGluZ3MuZGF0YVBhZ2VUaXRsZSxcbiAgICAgICAgICBvbkNoYW5nZTogKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgcHJvY2Vzc0NoYW5nZSh7IGtleTogJ2RhdGFQYWdlVGl0bGUnLCB2YWx1ZSB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdkYWlseUxpbWl0JyxcbiAgICAgICAgbmFtZTogJ0RhaWx5IFJldmlldyBMaW1pdCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTnVtYmVyIG9mIGNhcmRzIHRvIHJldmlldyBlYWNoIGRheS4gMCBtZWFucyBubyBsaW1pdC4nLFxuICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICB0eXBlOiAnaW5wdXQnLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBkZWZhdWx0U2V0dGluZ3MuZGFpbHlMaW1pdCxcbiAgICAgICAgICBvbkNoYW5nZTogKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgY29uc3QgaXNOdW1iZXIgPSAhaXNOYU4oTnVtYmVyKHZhbHVlKSk7XG5cbiAgICAgICAgICAgIHByb2Nlc3NDaGFuZ2UoeyBrZXk6ICdkYWlseUxpbWl0JywgdmFsdWU6IGlzTnVtYmVyID8gTnVtYmVyKHZhbHVlKSA6IDAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAncnRsRW5hYmxlZCcsXG4gICAgICAgIG5hbWU6ICdSaWdodC10by1MZWZ0IChSVEwpIEVuYWJsZWQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0VuYWJsZSBSVEwgZm9yIGxhbmd1YWdlcyBsaWtlIEFyYWJpYywgSGVicmV3LCBldGMuJyxcbiAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgdHlwZTogJ3N3aXRjaCcsXG4gICAgICAgICAgY2hlY2tlZDogc2V0dGluZ3MucnRsRW5hYmxlZCxcbiAgICAgICAgICBvbkNoYW5nZTogKGUpID0+IHtcbiAgICAgICAgICAgIHByb2Nlc3NDaGFuZ2UoeyBrZXk6ICdydGxFbmFibGVkJywgdmFsdWU6IGUudGFyZ2V0LmNoZWNrZWQgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAnc2h1ZmZsZUNhcmRzJyxcbiAgICAgICAgbmFtZTogJ1NodWZmbGUgQ2FyZHMnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1JhbmRvbWx5IHNodWZmbGUgdGhlIG9yZGVyIG9mIG5ldyBhbmQgZHVlIGNhcmRzIGR1cmluZyByZXZpZXcuJyxcbiAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgdHlwZTogJ3N3aXRjaCcsXG4gICAgICAgICAgY2hlY2tlZDogc2V0dGluZ3Muc2h1ZmZsZUNhcmRzLFxuICAgICAgICAgIG9uQ2hhbmdlOiAoZSkgPT4ge1xuICAgICAgICAgICAgcHJvY2Vzc0NoYW5nZSh7IGtleTogJ3NodWZmbGVDYXJkcycsIHZhbHVlOiBlLnRhcmdldC5jaGVja2VkIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogJ2RlZmF1bHRQcmlvcml0eScsXG4gICAgICAgIG5hbWU6ICdEZWZhdWx0IFByaW9yaXR5IGZvciBOZXcgQ2FyZHMnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1NldCB0aGUgZGVmYXVsdCBwcmlvcml0eSAoMC0xMDApIGZvciBuZXcgY2FyZHMuIEhpZ2hlciBudW1iZXJzID0gaGlnaGVyIHByaW9yaXR5LiBOZXcgY2FyZHMgd2lsbCBiZSBhZGRlZCB0byB0aGUgcmFua2luZyBsaXN0IHdpdGggdGhpcyBwcmlvcml0eS4nLFxuICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICB0eXBlOiAnaW5wdXQnLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBkZWZhdWx0U2V0dGluZ3MuZGVmYXVsdFByaW9yaXR5LnRvU3RyaW5nKCksXG4gICAgICAgICAgb25DaGFuZ2U6IChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIGNvbnN0IG51bVZhbHVlID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g6aqM6K+B6L6T5YWl6IyD5Zu0IDAtMTAwXG4gICAgICAgICAgICBpZiAoIWlzTmFOKG51bVZhbHVlKSAmJiBudW1WYWx1ZSA+PSAwICYmIG51bVZhbHVlIDw9IDEwMCkge1xuICAgICAgICAgICAgICBwcm9jZXNzQ2hhbmdlKHsga2V5OiAnZGVmYXVsdFByaW9yaXR5JywgdmFsdWU6IG51bVZhbHVlIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgLy8g5YWB6K6456m66L6T5YWl77yM5L2/55So6buY6K6k5YC8XG4gICAgICAgICAgICAgIHByb2Nlc3NDaGFuZ2UoeyBrZXk6ICdkZWZhdWx0UHJpb3JpdHknLCB2YWx1ZTogZGVmYXVsdFNldHRpbmdzLmRlZmF1bHRQcmlvcml0eSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICBdLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc2V0dGluZ3NQYW5lbENvbmZpZztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc2V0dGluZ3NQYW5lbENvbmZpZyBmcm9tICd+L3NldHRpbmdzUGFuZWxDb25maWcnO1xuXG5leHBvcnQgdHlwZSBTZXR0aW5ncyA9IHtcbiAgZGF0YVBhZ2VUaXRsZTogc3RyaW5nO1xuICBkYWlseUxpbWl0OiBudW1iZXI7XG4gIHJ0bEVuYWJsZWQ6IGJvb2xlYW47XG4gIHNodWZmbGVDYXJkczogYm9vbGVhbjtcbiAgZGVmYXVsdFByaW9yaXR5OiBudW1iZXI7XG4gIGZzcnNFbmFibGVkOiBib29sZWFuO1xuICBpc0dsb2JhbE1peGVkTW9kZTogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0U2V0dGluZ3M6IFNldHRpbmdzID0ge1xuICBkYXRhUGFnZVRpdGxlOiAncm9hbS9tZW1vJyxcbiAgZGFpbHlMaW1pdDogMCwgLy8gMCA9IG5vIGxpbWl0LFxuICBydGxFbmFibGVkOiBmYWxzZSxcbiAgc2h1ZmZsZUNhcmRzOiBmYWxzZSxcbiAgZGVmYXVsdFByaW9yaXR5OiA3MCxcbiAgZnNyc0VuYWJsZWQ6IHRydWUsIC8vIOKchSDpu5jorqTlkK/nlKhGU1JT566X5rOVIC0g5pu056eR5a2m55qE6K6w5b+G6aKE5rWLXG4gIGlzR2xvYmFsTWl4ZWRNb2RlOiBmYWxzZSwgLy8g6buY6K6k5YWz6Zet5YWo5bGA5re35ZCI5qih5byPXG59O1xuXG4vLyBAVE9ETzogUmVmYWN0b3IvSG9pc3QgdGhpcyBzbyB3ZSBjYW4gY2FsbCB1c2VTZXR0aW5ncyBpbiBtdWx0aXBsZSBwbGFjZXNcbi8vIHdpdGhvdXQgZHVwbGljYXRpbmcgc2V0dGluZ3Mgc3RhdGUgKGllIG1heWJlIGluaXQgc3RhdGUgaW4gYXBwIGFuZCB1c2Vcbi8vIGNvbnRleHQgdG8gYWNjZXNzIGl0IGFueXdoZXJlKVxuY29uc3QgdXNlU2V0dGluZ3MgPSAoKTogW1NldHRpbmdzLCBSZWFjdC5EaXNwYXRjaDxSZWFjdC5TZXRTdGF0ZUFjdGlvbjxTZXR0aW5ncz4+XSA9PiB7XG4gIGNvbnN0IFtzZXR0aW5ncywgc2V0U2V0dGluZ3NdID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFNldHRpbmdzKTtcblxuICAvLyBDcmVhdGUgc2V0dGluZ3MgcGFuZWxcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cucm9hbU1lbW8uZXh0ZW5zaW9uQVBJLnNldHRpbmdzLnBhbmVsLmNyZWF0ZShcbiAgICAgIHNldHRpbmdzUGFuZWxDb25maWcoeyBzZXR0aW5ncywgc2V0U2V0dGluZ3MgfSlcbiAgICApO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW3NldFNldHRpbmdzLCBzZXR0aW5ncy5kYXRhUGFnZVRpdGxlXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBhbGxTZXR0aW5ncyA9IHdpbmRvdy5yb2FtTWVtby5leHRlbnNpb25BUEkuc2V0dGluZ3MuZ2V0QWxsKCkgfHwge307XG5cbiAgICAvLyAxLiDov4Hnp7vlkozorr7nva7pu5jorqTlgLxcbiAgICAvLyBNYW51YWxseSBzZXQgc2h1ZmZsZUNhcmRzIHRvIHRydWUgaWYgaXQgZG9lc24ndCBleGlzdC5cbiAgICBpZiAoISgnc2h1ZmZsZUNhcmRzJyBpbiBhbGxTZXR0aW5ncykpIHtcbiAgICAgIGFsbFNldHRpbmdzLnNodWZmbGVDYXJkcyA9IGRlZmF1bHRTZXR0aW5ncy5zaHVmZmxlQ2FyZHM7XG4gICAgfVxuICAgIC8vIOi/geenu+aXp+eahHNjaGVkdWxpbmdBbGdvcml0aG3orr7nva7liLDmlrDnmoRmc3JzRW5hYmxlZOW4g+WwlOWAvFxuICAgIGlmICgnc2NoZWR1bGluZ0FsZ29yaXRobScgaW4gYWxsU2V0dGluZ3MgJiYgISgnZnNyc0VuYWJsZWQnIGluIGFsbFNldHRpbmdzKSkge1xuICAgICAgYWxsU2V0dGluZ3MuZnNyc0VuYWJsZWQgPSBhbGxTZXR0aW5ncy5zY2hlZHVsaW5nQWxnb3JpdGhtID09PSAnRlNSUyc7XG4gICAgICAvLyB3aW5kb3cucm9hbU1lbW8uZXh0ZW5zaW9uQVBJLnNldHRpbmdzLnJlbW92ZSgnc2NoZWR1bGluZ0FsZ29yaXRobScpO1xuICAgIH1cbiAgICAvLyDnoa7kv51mc3JzRW5hYmxlZOaciem7mOiupOWAvFxuICAgIGlmICghKCdmc3JzRW5hYmxlZCcgaW4gYWxsU2V0dGluZ3MpKSB7XG4gICAgICBhbGxTZXR0aW5ncy5mc3JzRW5hYmxlZCA9IGRlZmF1bHRTZXR0aW5ncy5mc3JzRW5hYmxlZDtcbiAgICB9XG4gICAgXG4gICAgLy8gMi4g5ZCI5bm2IGZldGNoZWQgc2V0dGluZ3Mg5ZKMIGRlZmF1bHQgc2V0dGluZ3PvvIznoa7kv53msqHmnIkgbnVsbC91bmRlZmluZWRcbiAgICBjb25zdCBtZXJnZWRTZXR0aW5ncyA9IHsgLi4uZGVmYXVsdFNldHRpbmdzLCAuLi5hbGxTZXR0aW5ncyB9O1xuXG4gICAgLy8gMy4g57G75Z6L6L2s5o2iXG4gICAgLy8gRm9yIHNvbWUgcmVhc29uIHRoZSBnZXRBbGwoKSBtZXRob2QgY2FzdHMgbnVtYmVycyB0byBzdHJpbmdzLCBzbyBoZXJlIHdlXG4gICAgLy8gbWFwIGtleXMgaW4gdGhpcyBsaXN0IGJhY2sgdG8gbnVtYmVyc1xuICAgIGNvbnN0IG51bWJlcnMgPSBbJ2RhaWx5TGltaXQnLCAnZGVmYXVsdFByaW9yaXR5J107XG4gICAgbnVtYmVycy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgbWVyZ2VkU2V0dGluZ3Nba2V5XSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG1lcmdlZFNldHRpbmdzW2tleV0gPSBOdW1iZXIobWVyZ2VkU2V0dGluZ3Nba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIDQuIOS9v+eUqOWHgOWMluWQjueahOaVsOaNruS4gOasoeaAp+abtOaWsCBzdGF0ZVxuICAgIHNldFNldHRpbmdzKG1lcmdlZFNldHRpbmdzKTtcblxuICAgIC8vIOWwhuWHgOWMluWQjueahOm7mOiupOWAvOWGmeWbniBSb2FtIHNldHRpbmdzXG4gICAgT2JqZWN0LmtleXMoZGVmYXVsdFNldHRpbmdzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmICghKGtleSBpbiBhbGxTZXR0aW5ncykpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yb2FtTWVtby5leHRlbnNpb25BUEkuc2V0dGluZ3Muc2V0KGtleSwgZGVmYXVsdFNldHRpbmdzW2tleV0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gIH0sIFtzZXRTZXR0aW5nc10pO1xuXG4gIHJldHVybiBbc2V0dGluZ3MsIHNldFNldHRpbmdzXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVNldHRpbmdzO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgYXN5bmNVdGlscyBmcm9tICd+L3V0aWxzL2FzeW5jJztcbmltcG9ydCAqIGFzIGRvbVV0aWxzIGZyb20gJ34vdXRpbHMvZG9tJztcblxuLy8gQ29sbGFwc2UgbWVtbyBkYXRhIGJsb2NrIHJlZiBieSBkZWZhdWx0ICh0byBrZWVwIHRoaW5ncyBsZXNzIG5vaXN5KVxuLy8gQFRPRE86IE1heWJlIG1ha2UgdGhpcyBjb25maWd1cmFibGVcbmNvbnN0IHVzZUNvbGxhcHNlUmVmZXJlbmNlTGlzdCA9ICh7IGRhdGFQYWdlVGl0bGUgfSkgPT4ge1xuICBjb25zdCBjb2xsYXBzZURhdGFSZWZlcmVuY2VCbG9jayA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGZuID0gYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgYXN5bmNVdGlscy5zbGVlcCgxMDApO1xuICAgICAgY29uc3QgZWxtTGlzdCA9IFtcbiAgICAgICAgLi4uQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucm0tcmVmLXBhZ2UtdmlldyAucm0tcmVmLXBhZ2Utdmlldy10aXRsZScpKSxcbiAgICAgIF0uZmlsdGVyKChlbG0pID0+IGVsbS50ZXh0Q29udGVudCA9PT0gZGF0YVBhZ2VUaXRsZSk7XG5cbiAgICAgIGZvciAoY29uc3QgZWxtIG9mIGVsbUxpc3QpIHtcbiAgICAgICAgY29uc3QgY29sbGFwc2VDb250cm9sQnRuID0gZWxtPy5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5ybS1jYXJldC1vcGVuJyk7XG4gICAgICAgIGNvbGxhcHNlQ29udHJvbEJ0biAmJiBkb21VdGlscy5zaW11bGF0ZU1vdXNlQ2xpY2soY29sbGFwc2VDb250cm9sQnRuKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZuO1xuICB9LCBbZGF0YVBhZ2VUaXRsZV0pO1xuICBjb25zdCBbY3VycmVudFJvdXRlLCBzZXRDdXJyZW50Um91dGVdID0gUmVhY3QudXNlU3RhdGUoJycpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29sbGFwc2VEYXRhUmVmZXJlbmNlQmxvY2soKTsgLy8gdHJpZ2dlciBvbiBwYWdlIGxvYWRcblxuICAgIGNvbnN0IG9uUm91dGVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICBzZXRDdXJyZW50Um91dGUobG9jYXRpb24uaHJlZik7XG4gICAgICBjb2xsYXBzZURhdGFSZWZlcmVuY2VCbG9jaygpO1xuICAgIH07XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgb25Sb3V0ZUNoYW5nZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIG9uUm91dGVDaGFuZ2UpO1xuICAgIH07XG4gIH0sIFtkYXRhUGFnZVRpdGxlLCBjb2xsYXBzZURhdGFSZWZlcmVuY2VCbG9ja10pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XG4gICAgICBjb2xsYXBzZURhdGFSZWZlcmVuY2VCbG9jaygpO1xuICAgIH0pO1xuICAgIChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBhc3luY1V0aWxzLnNsZWVwKDEwMCk7XG4gICAgICBjb25zdCBkYWlseUxvZ3NDb250YWluZXJFbG0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucm9hbS1sb2ctY29udGFpbmVyJyk7XG5cbiAgICAgIGlmICghZGFpbHlMb2dzQ29udGFpbmVyRWxtKSByZXR1cm47XG4gICAgICBvYnNlcnZlci5vYnNlcnZlKGRhaWx5TG9nc0NvbnRhaW5lckVsbSwgeyBjaGlsZExpc3Q6IHRydWUgfSk7XG4gICAgfSkoKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH07XG4gIH0sIFtjb2xsYXBzZURhdGFSZWZlcmVuY2VCbG9jaywgY3VycmVudFJvdXRlXSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgdXNlQ29sbGFwc2VSZWZlcmVuY2VMaXN0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBBcnJpdmUgZnJvbSAnYXJyaXZlJztcblxuQXJyaXZlOyAvLyBUbyBwcmV2ZW50IHRyZWUgc2hha2luZyBlbGltaW5hdGlvblxuXG5jb25zdCB1c2VPbkJsb2NrSW50ZXJhY3QgPSAoe1xuICBvbkVudGVyQ2FsbGJhY2ssXG4gIG9uTGVhdmVDYWxsYmFjayxcbn06IHtcbiAgb25FbnRlckNhbGxiYWNrOiAoZWxtOiBIVE1MVGV4dEFyZWFFbGVtZW50KSA9PiB2b2lkO1xuICBvbkxlYXZlQ2FsbGJhY2s6IChlbG06IEhUTUxUZXh0QXJlYUVsZW1lbnQpID0+IHZvaWQ7XG59KSA9PiB7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZG9jdW1lbnQubGVhdmUoJ3RleHRhcmVhLnJtLWJsb2NrLWlucHV0Jywgb25MZWF2ZUNhbGxiYWNrKTtcbiAgICBkb2N1bWVudC5hcnJpdmUoJ3RleHRhcmVhLnJtLWJsb2NrLWlucHV0Jywgb25FbnRlckNhbGxiYWNrKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudC51bmJpbmRMZWF2ZSgndGV4dGFyZWEucm0tYmxvY2staW5wdXQnLCBvbkxlYXZlQ2FsbGJhY2spO1xuICAgICAgZG9jdW1lbnQudW5iaW5kQXJyaXZlKCd0ZXh0YXJlYS5ybS1ibG9jay1pbnB1dCcsIG9uRW50ZXJDYWxsYmFjayk7XG4gICAgfTtcbiAgfSwgW29uRW50ZXJDYWxsYmFjaywgb25MZWF2ZUNhbGxiYWNrXSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VPbkJsb2NrSW50ZXJhY3Q7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgcXVlcmllcyBmcm9tICd+L3F1ZXJpZXMnO1xuaW1wb3J0IHsgc2F2ZUNhY2hlRGF0YSB9IGZyb20gJ34vcXVlcmllcyc7XG5cbmNvbnN0IHVzZUNhY2hlZERhdGEgPSAoe1xuICBkYXRhUGFnZVRpdGxlLFxuICBzZWxlY3RlZFRhZyxcbn06IHtcbiAgZGF0YVBhZ2VUaXRsZTogc3RyaW5nO1xuICBzZWxlY3RlZFRhZz86IHN0cmluZztcbn0pID0+IHtcbiAgY29uc3QgW2RhdGEsIHNldERhdGFdID0gUmVhY3QudXNlU3RhdGUoe30pO1xuICBjb25zdCBbcmVmZXRjaFRyaWdnZXIsIHNldFJlZmV0Y2hUcmlnZ2VyXSA9IFJlYWN0LnVzZVN0YXRlKDApO1xuXG4gIGNvbnN0IGRlbGV0ZUNhY2hlRGF0YUtleSA9IGFzeW5jICh0b0RlbGV0ZUtleUlkOiBzdHJpbmcpID0+IHtcbiAgICBhd2FpdCBxdWVyaWVzLmRlbGV0ZUNhY2hlRGF0YUtleSh7IGRhdGFQYWdlVGl0bGUsIHNlbGVjdGVkVGFnLCB0b0RlbGV0ZUtleUlkIH0pO1xuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZ2V0RGF0YSA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHF1ZXJpZXMuZ2V0UGx1Z2luUGFnZUNhY2hlZERhdGEoeyBkYXRhUGFnZVRpdGxlIH0pO1xuXG4gICAgICBzZXREYXRhKHJlc3VsdCk7XG4gICAgfTtcblxuICAgIGdldERhdGEoKTtcbiAgfSwgW3JlZmV0Y2hUcmlnZ2VyLCBkYXRhUGFnZVRpdGxlLCBzZWxlY3RlZFRhZ10pO1xuXG4gIGNvbnN0IGZldGNoQ2FjaGVEYXRhID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKCkgPT4gc2V0UmVmZXRjaFRyaWdnZXIoKHByZXYpID0+IHByZXYgKyAxKSxcbiAgICBbc2V0UmVmZXRjaFRyaWdnZXJdXG4gICk7XG4gIHJldHVybiB7XG4gICAgc2F2ZUNhY2hlRGF0YTogYXN5bmMgKGRhdGE6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIG92ZXJyaWRlcz86IHsgW2tleTogc3RyaW5nXTogYW55IH0pID0+IHtcbiAgICAgIGF3YWl0IHNhdmVDYWNoZURhdGEoeyBkYXRhUGFnZVRpdGxlLCBkYXRhLCBzZWxlY3RlZFRhZywgLi4ub3ZlcnJpZGVzIH0pO1xuXG4gICAgICBzZXRSZWZldGNoVHJpZ2dlcigocHJldikgPT4gcHJldiArIDEpO1xuICAgIH0sXG4gICAgZGVsZXRlQ2FjaGVEYXRhS2V5LFxuICAgIGZldGNoQ2FjaGVEYXRhLFxuICAgIGRhdGE6IHNlbGVjdGVkVGFnID8gZGF0YVtzZWxlY3RlZFRhZ10gfHwge30gOiBkYXRhLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlQ2FjaGVkRGF0YTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFVzZUFsbFBhZ2VzUmV0dXJuIHtcbiAgYWxsUGFnZXM6IHN0cmluZ1tdO1xuICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gIHJlZnJlc2hQYWdlczogKCkgPT4gdm9pZDtcbn1cblxuY29uc3QgdXNlQWxsUGFnZXMgPSAoeyBcbiAgZGF0YVBhZ2VUaXRsZSBcbn06IHsgXG4gIGRhdGFQYWdlVGl0bGU6IHN0cmluZztcbn0pID0+IHtcbiAgY29uc3QgW2FsbFBhZ2VzLCBzZXRBbGxQYWdlc10gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gUmVhY3QudXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IGlzRXhlY3V0aW5nUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3QgW3JlZnJlc2hOb25jZSwgc2V0UmVmcmVzaE5vbmNlXSA9IFJlYWN0LnVzZVN0YXRlKDApO1xuXG4gIGNvbnN0IHJlZnJlc2hQYWdlcyA9ICgpID0+IHtcbiAgICBzZXRSZWZyZXNoTm9uY2UocHJldiA9PiBwcmV2ICsgMSk7XG4gIH07XG4gIFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGZldGNoUGFnZXMgPSBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoaXNFeGVjdXRpbmdSZWYuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpc0V4ZWN1dGluZ1JlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcXVlcnkgPSBgWzpmaW5kID90aXRsZSA6d2hlcmUgWz9wIDpub2RlL3RpdGxlID90aXRsZV0gWz9wIDpibG9jay91aWQgP3VpZF1dYDtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHdpbmRvdy5yb2FtQWxwaGFBUEkucShxdWVyeSk7XG4gICAgICAgIGNvbnN0IHBhZ2VUaXRsZXMgPSByZXN1bHRzLm1hcChyZXN1bHQgPT4gcmVzdWx0WzBdKS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICAgICAgY29uc3QgZGFpbHlOb3RlUmVnZXggPSAvKEphbnVhcnl8RmVicnVhcnl8TWFyY2h8QXByaWx8TWF5fEp1bmV8SnVseXxBdWd1c3R8U2VwdGVtYmVyfE9jdG9iZXJ8Tm92ZW1iZXJ8RGVjZW1iZXIpIFxcZHsxLDJ9KHN0fG5kfHJkfHRoKSwgXFxkezR9fF5cXGR7NH0tXFxkezJ9LVxcZHsyfSQvO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZFBhZ2VzID0gcGFnZVRpdGxlcy5maWx0ZXIodGl0bGUgPT4gXG4gICAgICAgICAgIWRhaWx5Tm90ZVJlZ2V4LnRlc3QodGl0bGUpICYmIHRpdGxlICE9PSBkYXRhUGFnZVRpdGxlXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZmluYWxQYWdlcyA9IFsuLi5uZXcgU2V0KGZpbHRlcmVkUGFnZXMpXTtcbiAgICAgICAgXG4gICAgICAgIHNldEFsbFBhZ2VzKGZpbmFsUGFnZXMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwi6I635Y+W6aG16Z2i5YiX6KGo5aSx6LSlOlwiLCBlKTtcbiAgICAgICAgLy8g5L+d55WZ5Yid5aeL5YiX6KGo5L2c5Li65aSH55SoXG4gICAgICAgIHNldEFsbFBhZ2VzKFtdKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgICAgIGlzRXhlY3V0aW5nUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZmV0Y2hQYWdlcygpO1xuICB9LCBbZGF0YVBhZ2VUaXRsZSwgcmVmcmVzaE5vbmNlXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBhbGxQYWdlcyxcbiAgICBpc0xvYWRpbmcsXG4gICAgcmVmcmVzaFBhZ2VzLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlQWxsUGFnZXM7ICIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldENhcmRSYW5rIH0gZnJvbSAnfi9xdWVyaWVzL3NhdmUnO1xuXG5pbnRlcmZhY2UgRGVja1ByaW9yaXR5SW5mbyB7XG4gIGRlY2tOYW1lOiBzdHJpbmc7XG4gIG1lZGlhblByaW9yaXR5OiBudW1iZXI7XG4gIGNhcmRDb3VudDogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgVXNlRGVja1ByaW9yaXR5UmV0dXJuIHtcbiAgZGVja1ByaW9yaXRpZXM6IFJlY29yZDxzdHJpbmcsIERlY2tQcmlvcml0eUluZm8+O1xuICB1cGRhdGVEZWNrUHJpb3JpdHk6IChkZWNrTmFtZTogc3RyaW5nLCBuZXdQcmlvcml0eTogbnVtYmVyKSA9PiB2b2lkO1xuICBpc0xvYWRpbmc6IGJvb2xlYW47XG59XG5cbmNvbnN0IGNhbGN1bGF0ZU1lZGlhbiA9IChudW1iZXJzOiBudW1iZXJbXSk6IG51bWJlciA9PiB7XG4gIGlmIChudW1iZXJzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDUwOyAvLyDpu5jorqTkuK3kvY3mlbBcbiAgXG4gIGNvbnN0IHNvcnRlZCA9IFsuLi5udW1iZXJzXS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gIGNvbnN0IG1pZGRsZSA9IE1hdGguZmxvb3Ioc29ydGVkLmxlbmd0aCAvIDIpO1xuICBcbiAgaWYgKHNvcnRlZC5sZW5ndGggJSAyID09PSAwKSB7XG4gICAgcmV0dXJuIChzb3J0ZWRbbWlkZGxlIC0gMV0gKyBzb3J0ZWRbbWlkZGxlXSkgLyAyO1xuICB9XG4gIFxuICByZXR1cm4gc29ydGVkW21pZGRsZV07XG59O1xuXG5jb25zdCB1c2VEZWNrUHJpb3JpdHkgPSAoe1xuICB0YWdzTGlzdCxcbiAgcHJhY3RpY2VEYXRhLFxuICBjYXJkVWlkcyxcbiAgcHJpb3JpdHlPcmRlcixcbiAgYWxsQ2FyZHNDb3VudCxcbiAgZGVmYXVsdFByaW9yaXR5LFxufToge1xuICB0YWdzTGlzdDogc3RyaW5nW107XG4gIHByYWN0aWNlRGF0YTogYW55O1xuICBjYXJkVWlkczogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+O1xuICBwcmlvcml0eU9yZGVyOiBzdHJpbmdbXTtcbiAgYWxsQ2FyZHNDb3VudDogbnVtYmVyO1xuICBkZWZhdWx0UHJpb3JpdHk6IG51bWJlcjtcbn0pOiBVc2VEZWNrUHJpb3JpdHlSZXR1cm4gPT4ge1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gUmVhY3QudXNlU3RhdGUodHJ1ZSk7XG5cbiAgY29uc3QgZGVja1ByaW9yaXRpZXMgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoIXByaW9yaXR5T3JkZXIpIHtcbiAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG5ld0RlY2tQcmlvcml0aWVzOiBSZWNvcmQ8c3RyaW5nLCBEZWNrUHJpb3JpdHlJbmZvPiA9IHt9O1xuXG4gICAgICBmb3IgKGNvbnN0IHRhZyBvZiB0YWdzTGlzdCkge1xuICAgICAgICBjb25zdCB0YWdDYXJkVWlkcyA9IGNhcmRVaWRzW3RhZ10gfHwgW107XG4gICAgICAgIFxuICAgICAgICBpZiAodGFnQ2FyZFVpZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgbmV3RGVja1ByaW9yaXRpZXNbdGFnXSA9IHtcbiAgICAgICAgICAgIGRlY2tOYW1lOiB0YWcsXG4gICAgICAgICAgICBtZWRpYW5Qcmlvcml0eTogZGVmYXVsdFByaW9yaXR5LFxuICAgICAgICAgICAgY2FyZENvdW50OiAwLFxuICAgICAgICAgIH07XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcmlvcml0aWVzOiBudW1iZXJbXSA9IHRhZ0NhcmRVaWRzLm1hcCh1aWQgPT4ge1xuICAgICAgICAgIGNvbnN0IGNhcmRSYW5rID0gZ2V0Q2FyZFJhbmsoe1xuICAgICAgICAgICAgcmVmVWlkOiB1aWQsXG4gICAgICAgICAgICBwcmlvcml0eU9yZGVyLFxuICAgICAgICAgICAgYWxsQ2FyZHNDb3VudCxcbiAgICAgICAgICAgIGRlZmF1bHRQcmlvcml0eSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyDlsIbmjpLlkI3ovazmjaLkuLrkvJjlhYjnuqfnmb7liIbmr5TvvIgxID0gMTAwJSwgYWxsQ2FyZHNDb3VudCA9IDAl77yJXG4gICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKDEgLSAoY2FyZFJhbmsgLSAxKSAvIE1hdGgubWF4KDEsIGFsbENhcmRzQ291bnQgLSAxKSkgKiAxMDApO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBtZWRpYW5Qcmlvcml0eSA9IGNhbGN1bGF0ZU1lZGlhbihwcmlvcml0aWVzKTtcbiAgICAgICAgXG4gICAgICAgIG5ld0RlY2tQcmlvcml0aWVzW3RhZ10gPSB7XG4gICAgICAgICAgZGVja05hbWU6IHRhZyxcbiAgICAgICAgICBtZWRpYW5Qcmlvcml0eTogTWF0aC5yb3VuZChtZWRpYW5Qcmlvcml0eSksXG4gICAgICAgICAgY2FyZENvdW50OiB0YWdDYXJkVWlkcy5sZW5ndGgsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3RGVja1ByaW9yaXRpZXM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNhbGN1bGF0aW5nIGRlY2sgcHJpb3JpdGllczonLCBlcnJvcik7XG4gICAgICByZXR1cm4ge307XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9LCBbdGFnc0xpc3QsIGNhcmRVaWRzLCBwcmlvcml0eU9yZGVyLCBhbGxDYXJkc0NvdW50LCBkZWZhdWx0UHJpb3JpdHldKTtcblxuICAvLyDmm7TmlrDniYznu4TkvJjlhYjnuqfvvIjosIPmlbTor6XniYznu4TmiYDmnInljaHniYfnmoTkvJjlhYjnuqfvvIlcbiAgY29uc3QgdXBkYXRlRGVja1ByaW9yaXR5ID0gUmVhY3QudXNlQ2FsbGJhY2soKGRlY2tOYW1lOiBzdHJpbmcsIG5ld1ByaW9yaXR5OiBudW1iZXIpID0+IHtcbiAgICBjb25zb2xlLmxvZyhg5pu05paw54mM57uEICR7ZGVja05hbWV9IOeahOS8mOWFiOe6p+WIsCAke25ld1ByaW9yaXR5fWApO1xuICAgIFxuICAgIC8vIOaaguaXtuWPquabtOaWsOacrOWcsOeKtuaAgVxuICAgIC8vIHNldERlY2tQcmlvcml0aWVzKHByZXYgPT4gKHtcbiAgICAvLyAgIC4uLnByZXYsXG4gICAgLy8gICBbZGVja05hbWVdOiB7XG4gICAgLy8gICAgIC4uLnByZXZbZGVja05hbWVdLFxuICAgIC8vICAgICBtZWRpYW5Qcmlvcml0eTogbmV3UHJpb3JpdHksXG4gICAgLy8gICB9LFxuICAgIC8vIH0pKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiB7XG4gICAgZGVja1ByaW9yaXRpZXMsXG4gICAgdXBkYXRlRGVja1ByaW9yaXR5LFxuICAgIGlzTG9hZGluZyxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZURlY2tQcmlvcml0eTsgIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgQmx1ZXByaW50IGZyb20gJ0BibHVlcHJpbnRqcy9jb3JlJztcbmltcG9ydCBQcmFjdGljZU92ZXJsYXkgZnJvbSAnfi9jb21wb25lbnRzL292ZXJsYXkvUHJhY3RpY2VPdmVybGF5JztcbmltcG9ydCBTaWRlUGFubmVsV2lkZ2V0IGZyb20gJ34vY29tcG9uZW50cy9TaWRlUGFuZWxXaWRnZXQnO1xuaW1wb3J0IHByYWN0aWNlIGZyb20gJ34vcHJhY3RpY2UnO1xuaW1wb3J0IHVzZVByYWN0aWNlRGF0YSBmcm9tICd+L2hvb2tzL3VzZVByYWN0aWNlRGF0YSc7XG5pbXBvcnQgdXNlU2V0dGluZ3MgZnJvbSAnfi9ob29rcy91c2VTZXR0aW5ncyc7XG5pbXBvcnQgdXNlQ29sbGFwc2VSZWZlcmVuY2VMaXN0IGZyb20gJ34vaG9va3MvdXNlQ29sbGFwc2VSZWZlcmVuY2VMaXN0JztcbmltcG9ydCB1c2VPbkJsb2NrSW50ZXJhY3QgZnJvbSAnfi9ob29rcy91c2VPbkJsb2NrSW50ZXJhY3QnO1xuaW1wb3J0IHVzZUNvbW1hbmRQYWxldHRlQWN0aW9uIGZyb20gJ34vaG9va3MvdXNlQ29tbWFuZFBhbGV0dGVBY3Rpb24nO1xuaW1wb3J0IHVzZUNhY2hlZERhdGEgZnJvbSAnfi9ob29rcy91c2VDYWNoZWREYXRhJztcbmltcG9ydCB1c2VPblZpc2liaWxpdHlTdGF0ZUNoYW5nZSBmcm9tICd+L2hvb2tzL3VzZU9uVmlzaWJpbGl0eVN0YXRlQ2hhbmdlJztcbmltcG9ydCB1c2VBbGxQYWdlcyBmcm9tICd+L2hvb2tzL3VzZUFsbFBhZ2VzJztcbmltcG9ydCB1c2VEZWNrUHJpb3JpdHkgZnJvbSAnfi9ob29rcy91c2VEZWNrUHJpb3JpdHknO1xuaW1wb3J0IHsgSW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSwgUmV2aWV3TW9kZXMgfSBmcm9tICd+L21vZGVscy9zZXNzaW9uJztcbmltcG9ydCB7IFJlbmRlck1vZGUgfSBmcm9tICd+L21vZGVscy9wcmFjdGljZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgaGFuZGxlUHJhY3RpY2VQcm9wcyB7XG4gIHJlZlVpZDogc3RyaW5nO1xuICBncmFkZTogbnVtYmVyO1xuICByZXZpZXdNb2RlOiBSZXZpZXdNb2RlcztcbiAgaW50ZXJ2YWxNdWx0aXBsaWVyOiBudW1iZXI7XG4gIGludGVydmFsTXVsdGlwbGllclR5cGU6IEludGVydmFsTXVsdGlwbGllclR5cGU7XG59XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgY29uc3QgW3Nob3dQcmFjdGljZU92ZXJsYXksIHNldFNob3dQcmFjdGljZU92ZXJsYXldID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbaXNDcmFtbWluZywgc2V0SXNDcmFtbWluZ10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzZWxlY3RlZFRhZywgc2V0U2VsZWN0ZWRUYWddID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPignJyk7XG5cbiAgY29uc3QgW3NldHRpbmdzLCBzZXRTZXR0aW5nc10gPSB1c2VTZXR0aW5ncygpO1xuICBjb25zdCB7IGRhdGFQYWdlVGl0bGUsIGRhaWx5TGltaXQsIHJ0bEVuYWJsZWQsIHNodWZmbGVDYXJkcywgZGVmYXVsdFByaW9yaXR5LCBmc3JzRW5hYmxlZCwgaXNHbG9iYWxNaXhlZE1vZGUgfSA9IHNldHRpbmdzO1xuICBcbiAgLy8g5L2/55SoIHVzZUFsbFBhZ2VzIOiOt+WPluaJgOaciemhtemdouS9nOS4uueJjOe7hFxuICBjb25zdCB7IGFsbFBhZ2VzOiB0YWdzTGlzdCwgaXNMb2FkaW5nOiBwYWdlc0xvYWRpbmcsIHJlZnJlc2hQYWdlcyB9ID0gdXNlQWxsUGFnZXMoeyBcbiAgICBkYXRhUGFnZVRpdGxlIFxuICB9KTtcblxuICAvLyDwn5SnIOS/ruWkje+8muehruS/nXNlbGVjdGVkVGFn5aeL57uI5Zyo5b2T5YmNdGFnc0xpc3TkuK1cbiAgY29uc3Qgc2FmZVNlbGVjdGVkVGFnID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKHRhZ3NMaXN0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICAgIGlmICh0YWdzTGlzdC5pbmNsdWRlcyhzZWxlY3RlZFRhZykpIHJldHVybiBzZWxlY3RlZFRhZztcbiAgICByZXR1cm4gdGFnc0xpc3RbMF07XG4gIH0sIFtzZWxlY3RlZFRhZywgdGFnc0xpc3RdKTtcblxuICAvLyDlvZNzYWZlU2VsZWN0ZWRUYWfmlLnlj5jml7bvvIzlkIzmraXmm7TmlrBzZWxlY3RlZFRhZ1xuICAvLyDlubblpITnkIYgdGFnc0xpc3Qg56ys5LiA5qyh5Yqg6L295ZCO55qE5oOF5Ya1XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHNhZmVTZWxlY3RlZFRhZyAmJiAoc2FmZVNlbGVjdGVkVGFnICE9PSBzZWxlY3RlZFRhZyB8fCAhc2VsZWN0ZWRUYWcpKSB7XG4gICAgICBzZXRTZWxlY3RlZFRhZyhzYWZlU2VsZWN0ZWRUYWcpO1xuICAgIH1cbiAgfSwgW3NhZmVTZWxlY3RlZFRhZywgc2VsZWN0ZWRUYWcsIHNldFNlbGVjdGVkVGFnXSk7XG5cbiAgY29uc3QgeyBmZXRjaENhY2hlRGF0YSwgc2F2ZUNhY2hlRGF0YSwgZGF0YTogY2FjaGVkRGF0YSB9ID0gdXNlQ2FjaGVkRGF0YSh7IGRhdGFQYWdlVGl0bGUgfSk7XG5cbiAgY29uc3QgeyBwcmFjdGljZURhdGEsIHRvZGF5LCBmZXRjaFByYWN0aWNlRGF0YSwgYWxsQ2FyZHNDb3VudCwgcHJpb3JpdHlPcmRlciwgYWxsQ2FyZFVpZHMsIGNhcmRVaWRzIH0gPSB1c2VQcmFjdGljZURhdGEoe1xuICAgIHRhZ3NMaXN0LFxuICAgIHNlbGVjdGVkVGFnOiBzYWZlU2VsZWN0ZWRUYWcsXG4gICAgZGF0YVBhZ2VUaXRsZSxcbiAgICBjYWNoZWREYXRhLFxuICAgIGlzQ3JhbW1pbmcsXG4gICAgZGFpbHlMaW1pdCxcbiAgICBzaHVmZmxlQ2FyZHMsXG4gICAgZGVmYXVsdFByaW9yaXR5LFxuICB9KTtcblxuICBjb25zdCB7IGRlY2tQcmlvcml0aWVzLCBpc0xvYWRpbmc6IGRlY2tQcmlvcml0aWVzTG9hZGluZyB9ID0gdXNlRGVja1ByaW9yaXR5KHtcbiAgICB0YWdzTGlzdCxcbiAgICBjYXJkVWlkcyxcbiAgICBwcmlvcml0eU9yZGVyLFxuICAgIGFsbENhcmRzQ291bnQsXG4gICAgZGVmYXVsdFByaW9yaXR5LFxuICB9KTtcblxuICBjb25zdCBoYW5kbGVTZXRJc0dsb2JhbE1peGVkTW9kZSA9IChtb2RlOiBib29sZWFuKSA9PiB7XG4gICAgc2V0U2V0dGluZ3MocyA9PiAoeyAuLi5zLCBpc0dsb2JhbE1peGVkTW9kZTogbW9kZSB9KSk7XG4gICAgd2luZG93LnJvYW1NZW1vLmV4dGVuc2lvbkFQSS5zZXR0aW5ncy5zZXQoJ2lzR2xvYmFsTWl4ZWRNb2RlJywgbW9kZSk7XG4gIH07XG5cbiAgLy8g5qC55o2u54mM57uE5LyY5YWI57qn5o6S5bqPXG4gIGNvbnN0IHNvcnRlZFRhZ3NMaXN0ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCF0YWdzTGlzdCB8fCB0YWdzTGlzdC5sZW5ndGggPT09IDAgfHwgT2JqZWN0LmtleXMoZGVja1ByaW9yaXRpZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRhZ3NMaXN0O1xuICAgIH1cblxuICAgIHJldHVybiBbLi4udGFnc0xpc3RdLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IHByaW9yaXR5QSA9IGRlY2tQcmlvcml0aWVzW2FdPy5tZWRpYW5Qcmlvcml0eSA/PyBkZWZhdWx0UHJpb3JpdHk7XG4gICAgICBjb25zdCBwcmlvcml0eUIgPSBkZWNrUHJpb3JpdGllc1tiXT8ubWVkaWFuUHJpb3JpdHkgPz8gZGVmYXVsdFByaW9yaXR5O1xuICAgICAgcmV0dXJuIHByaW9yaXR5QiAtIHByaW9yaXR5QTsgLy8g6ZmN5bqP5o6S5YiXXG4gICAgfSk7XG4gIH0sIFt0YWdzTGlzdCwgZGVja1ByaW9yaXRpZXMsIGRlZmF1bHRQcmlvcml0eV0pO1xuXG4gIGNvbnN0IGhhbmRsZVByYWN0aWNlQ2xpY2sgPSBhc3luYyAoeyByZWZVaWQsIC4uLmNhcmREYXRhIH06IGhhbmRsZVByYWN0aWNlUHJvcHMpID0+IHtcbiAgICBpZiAoIXJlZlVpZCkge1xuICAgICAgY29uc29sZS5lcnJvcignSGFuZGxlUHJhY3RpY2VGbiBFcnJvcjogTm8gcmVmVWlkIHByb3ZpZGVkJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHByYWN0aWNlUGFyYW1zID0ge1xuICAgICAgICAuLi5jYXJkRGF0YSxcbiAgICAgICAgZGF0YVBhZ2VUaXRsZSxcbiAgICAgICAgZGF0ZUNyZWF0ZWQ6IG5ldyBEYXRlKCksXG4gICAgICAgIHJlZlVpZCxcbiAgICAgICAgaXNDcmFtbWluZyxcbiAgICAgICAgZnNyc0VuYWJsZWQsIC8vIOS8oOmAkueul+azlemAieaLqVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgYXdhaXQgcHJhY3RpY2UocHJhY3RpY2VQYXJhbXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBTYXZpbmcgUHJhY3RpY2UgRGF0YScsIGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgc2V0UmVuZGVyTW9kZSA9ICh0YWc6IHN0cmluZywgbW9kZTogUmVuZGVyTW9kZSkgPT4ge1xuICAgIHNhdmVDYWNoZURhdGEoeyByZW5kZXJNb2RlOiBtb2RlIH0sIHsgc2VsZWN0ZWRUYWc6IHRhZyB9KTtcbiAgICBmZXRjaENhY2hlRGF0YSgpO1xuICB9O1xuXG4gIGNvbnN0IHJlZnJlc2hEYXRhID0gKCkgPT4ge1xuICAgIGZldGNoQ2FjaGVEYXRhKCk7XG4gICAgZmV0Y2hQcmFjdGljZURhdGEoKTtcbiAgfTtcblxuICB1c2VPblZpc2liaWxpdHlTdGF0ZUNoYW5nZSgoKSA9PiB7XG4gICAgaWYgKHNob3dQcmFjdGljZU92ZXJsYXkpIHJldHVybjtcbiAgICByZWZyZXNoRGF0YSgpO1xuICB9KTtcblxuICBjb25zdCBvblNob3dQcmFjdGljZU92ZXJsYXkgPSAoKSA9PiB7XG4gICAgcmVmcmVzaERhdGEoKTtcbiAgICBzZXRTaG93UHJhY3RpY2VPdmVybGF5KHRydWUpO1xuICAgIHNldElzQ3JhbW1pbmcoZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IG9uQ2xvc2VQcmFjdGljZU92ZXJsYXlDYWxsYmFjayA9ICgpID0+IHtcbiAgICBzZXRTaG93UHJhY3RpY2VPdmVybGF5KGZhbHNlKTtcbiAgICBzZXRJc0NyYW1taW5nKGZhbHNlKTtcbiAgICByZWZyZXNoRGF0YSgpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZU1lbW9UYWdDaGFuZ2UgPSAodGFnKSA9PiB7XG4gICAgc2V0U2VsZWN0ZWRUYWcodGFnKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVSZXZpZXdNb3JlQ2xpY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgLy8gQFRPRE9aOiBIYW5kbGUgdGhpcyBjYXNlLlxuICAgIHJlZnJlc2hEYXRhKCk7XG4gIH07XG5cbiAgdXNlQ29sbGFwc2VSZWZlcmVuY2VMaXN0KHsgZGF0YVBhZ2VUaXRsZSB9KTtcblxuICAvLyBLZWVwIGNvdW50ZXJzIGluIHN5bmMgYXMgeW91IGFkZC9yZW1vdmUgdGFncyBmcm9tIGJsb2Nrc1xuICBjb25zdCBbdGFnc09uRW50ZXIsIHNldFRhZ3NPbkVudGVyXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZ1tdPihbXSk7XG4gIGNvbnN0IG9uQmxvY2tFbnRlckhhbmRsZXIgPSAoZWxtOiBIVE1MVGV4dEFyZWFFbGVtZW50KSA9PiB7XG4gICAgY29uc3QgdGFncyA9IHRhZ3NMaXN0LmZpbHRlcigodGFnKSA9PiBlbG0udmFsdWUuaW5jbHVkZXModGFnKSk7XG4gICAgc2V0VGFnc09uRW50ZXIodGFncyk7XG4gIH07XG4gIGNvbnN0IG9uQmxvY2tMZWF2ZUhhbmRsZXIgPSAoZWxtOiBIVE1MVGV4dEFyZWFFbGVtZW50KSA9PiB7XG4gICAgLy8gRG9uJ3QgcmVmZXRjaCBkYXRhIGlmIG92ZXJsYXkgaXMgb3BlbiAodG8gYXZvaWQgcmVtb3ZpbmcgY2FyZHMgd2hpbGUgZWRpdGluZylcbiAgICBpZiAoc2hvd1ByYWN0aWNlT3ZlcmxheSkgcmV0dXJuO1xuXG4gICAgY29uc3QgdGFncyA9IHRhZ3NMaXN0LmZpbHRlcigodGFnKSA9PiBlbG0udmFsdWUuaW5jbHVkZXModGFnKSk7XG5cbiAgICBpZiAodGFnc09uRW50ZXIubGVuZ3RoICE9PSB0YWdzLmxlbmd0aCkge1xuICAgICAgZmV0Y2hQcmFjdGljZURhdGEoKTtcbiAgICB9XG4gIH07XG5cbiAgdXNlT25CbG9ja0ludGVyYWN0KHtcbiAgICBvbkVudGVyQ2FsbGJhY2s6IG9uQmxvY2tFbnRlckhhbmRsZXIsXG4gICAgb25MZWF2ZUNhbGxiYWNrOiBvbkJsb2NrTGVhdmVIYW5kbGVyLFxuICB9KTtcblxuICB1c2VDb21tYW5kUGFsZXR0ZUFjdGlvbih7IG9uU2hvd1ByYWN0aWNlT3ZlcmxheSB9KTtcblxuICByZXR1cm4gKFxuICAgIDxCbHVlcHJpbnQuSG90a2V5c1Byb3ZpZGVyPlxuICAgICAgPD5cbiAgICAgICAgPFNpZGVQYW5uZWxXaWRnZXQgb25DbGlja0NhbGxiYWNrPXtvblNob3dQcmFjdGljZU92ZXJsYXl9IHRvZGF5PXt0b2RheX0gLz5cbiAgICAgICAge3Nob3dQcmFjdGljZU92ZXJsYXkgJiYgKFxuICAgICAgICAgIDxQcmFjdGljZU92ZXJsYXlcbiAgICAgICAgICAgIGlzT3Blbj17c2hvd1ByYWN0aWNlT3ZlcmxheX1cbiAgICAgICAgICAgIG9uQ2xvc2VDYWxsYmFjaz17b25DbG9zZVByYWN0aWNlT3ZlcmxheUNhbGxiYWNrfVxuICAgICAgICAgICAgcHJhY3RpY2VEYXRhPXtwcmFjdGljZURhdGF9XG4gICAgICAgICAgICB0b2RheT17dG9kYXl9XG4gICAgICAgICAgICBoYW5kbGVQcmFjdGljZUNsaWNrPXtoYW5kbGVQcmFjdGljZUNsaWNrfVxuICAgICAgICAgICAgdGFnc0xpc3Q9e3NvcnRlZFRhZ3NMaXN0fVxuICAgICAgICAgICAgc2VsZWN0ZWRUYWc9e3NhZmVTZWxlY3RlZFRhZ31cbiAgICAgICAgICAgIGhhbmRsZU1lbW9UYWdDaGFuZ2U9e3NldFNlbGVjdGVkVGFnfVxuICAgICAgICAgICAgaGFuZGxlUmV2aWV3TW9yZUNsaWNrPXsoKSA9PiB7fX1cbiAgICAgICAgICAgIGlzQ3JhbW1pbmc9e2lzQ3JhbW1pbmd9XG4gICAgICAgICAgICBzZXRJc0NyYW1taW5nPXtzZXRJc0NyYW1taW5nfVxuICAgICAgICAgICAgcnRsRW5hYmxlZD17cnRsRW5hYmxlZH1cbiAgICAgICAgICAgIHNldFJlbmRlck1vZGU9e3NldFJlbmRlck1vZGV9XG4gICAgICAgICAgICBkYXRhUGFnZVRpdGxlPXtkYXRhUGFnZVRpdGxlfVxuICAgICAgICAgICAgb25EYXRhUmVmcmVzaD17cmVmcmVzaERhdGF9XG4gICAgICAgICAgICBhbGxDYXJkc0NvdW50PXthbGxDYXJkc0NvdW50fVxuICAgICAgICAgICAgcHJpb3JpdHlPcmRlcj17cHJpb3JpdHlPcmRlcn1cbiAgICAgICAgICAgIGFsbENhcmRVaWRzPXthbGxDYXJkVWlkc31cbiAgICAgICAgICAgIGNhcmRVaWRzPXtjYXJkVWlkc31cbiAgICAgICAgICAgIGRlY2tQcmlvcml0aWVzPXtkZWNrUHJpb3JpdGllc31cbiAgICAgICAgICAgIGRlZmF1bHRQcmlvcml0eT17ZGVmYXVsdFByaW9yaXR5fVxuICAgICAgICAgICAgZnNyc0VuYWJsZWQ9e2ZzcnNFbmFibGVkfVxuICAgICAgICAgICAgaXNHbG9iYWxNaXhlZE1vZGU9e2lzR2xvYmFsTWl4ZWRNb2RlfVxuICAgICAgICAgICAgc2V0SXNHbG9iYWxNaXhlZE1vZGU9e2hhbmRsZVNldElzR2xvYmFsTWl4ZWRNb2RlfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8Lz5cbiAgICA8L0JsdWVwcmludC5Ib3RrZXlzUHJvdmlkZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IHVzZU9uVmlzaWJpbGl0eVN0YXRlQ2hhbmdlID0gKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSA9PiB7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICd2aXNpYmxlJykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2tdKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZU9uVmlzaWJpbGl0eVN0YXRlQ2hhbmdlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmludGVyZmFjZSBDb21tYW5kUGFsZXR0ZUFjdGlvbiB7XG4gIG9uU2hvd1ByYWN0aWNlT3ZlcmxheTogKCkgPT4gdm9pZDtcbn1cblxuY29uc3QgdXNlQ29tbWFuZFBhbGV0dGVBY3Rpb24gPSAoeyBvblNob3dQcmFjdGljZU92ZXJsYXkgfTogQ29tbWFuZFBhbGV0dGVBY3Rpb24pID0+IHtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzdGFydExhYmVsID0gJ01lbW86IFN0YXJ0IFJldmlldyBTZXNzaW9uJztcbiAgICB3aW5kb3cucm9hbUFscGhhQVBJLnVpLmNvbW1hbmRQYWxldHRlLmFkZENvbW1hbmQoe1xuICAgICAgbGFiZWw6IHN0YXJ0TGFiZWwsXG4gICAgICBjYWxsYmFjazogKCkgPT4gb25TaG93UHJhY3RpY2VPdmVybGF5KCksXG4gICAgfSk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJvYW1BbHBoYUFQSS51aS5jb21tYW5kUGFsZXR0ZS5yZW1vdmVDb21tYW5kKHsgbGFiZWw6IHN0YXJ0TGFiZWwgfSk7XG4gICAgfTtcbiAgfSwgW29uU2hvd1ByYWN0aWNlT3ZlcmxheV0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlQ29tbWFuZFBhbGV0dGVBY3Rpb247XG4iLCJpbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBBcHAgZnJvbSAnLi9hcHAnO1xuaW1wb3J0IHsgRm9jdXNTdHlsZU1hbmFnZXIgfSBmcm9tICdAYmx1ZXByaW50anMvY29yZSc7XG5cbmNvbnNvbGUubG9nKCdNZW1vOiBJbml0aWFsaXppbmcuLi4nKTtcblxuY29uc3QgY29udGFpbmVyX2lkOiBzdHJpbmcgPSAncm9hbS1tZW1vLXdyYXBwZXInO1xuXG5jb25zdCBjcmVhdGVBbmRSZW5kZXJDb250YWluZXIgPSAoKSA9PiB7XG4gIC8vIEBUT0RPOiBUaGlzIGlzIHdoZXJlIEkgd2FudCBpdCBwZXJzb25hbGx5LCBidXQgbWF5YmUgbWFrZSB0aGlzIGEgY29uZmlndXJhYmxlIHNldHRpbmc/XG4gIGNvbnN0IHNpYmxpbmdFbG0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucm0tbGVmdC1zaWRlYmFyX19kYWlseS1ub3RlcycpO1xuICBjb25zdCBuZXdDb250YWluZXJFbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgbmV3Q29udGFpbmVyRWxtLmlkID0gY29udGFpbmVyX2lkO1xuICBuZXdDb250YWluZXJFbG0uY2xhc3NMaXN0LmFkZCgnbG9nLWJ1dHRvbicpOyAvLyBtYXRjaCBzdHlsZVxuICBcbiAgaWYgKHNpYmxpbmdFbG0gJiYgc2libGluZ0VsbS5wYXJlbnROb2RlKSB7XG4gICAgc2libGluZ0VsbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdDb250YWluZXJFbG0sIHNpYmxpbmdFbG0ubmV4dFNpYmxpbmcpO1xuICB9IGVsc2Uge1xuICAgIC8vIOWmguaenOaJvuS4jeWIsOmihOacn+S9jee9ru+8jOa3u+WKoOWIsGJvZHlcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5ld0NvbnRhaW5lckVsbSk7XG4gIH1cblxuICByZXR1cm4gbmV3Q29udGFpbmVyRWxtO1xufTtcbmZ1bmN0aW9uIG9ubG9hZCh7IGV4dGVuc2lvbkFQSSB9KSB7XG4gIC8vIFRoaXMganVzdCBtYWtlcyBsaWZlIGVhc2llciAoaW5zdGVhZCBvZiBoYXZpbmcgdG8gcGlwZSBpdCBkb3duIGV2ZXJ5d2hlcmUgSVxuICAvLyB3YW50IHRvIGR5bmFtaWNhbGx5IGZldGNoIHRoZSBsYXRlc3QgY29uZmlnKVxuICB3aW5kb3cucm9hbU1lbW8gPSB7XG4gICAgZXh0ZW5zaW9uQVBJLFxuICB9O1xuXG4gIEZvY3VzU3R5bGVNYW5hZ2VyLm9ubHlTaG93Rm9jdXNPblRhYnMoKTtcblxuICBjb25zdCBjb250YWluZXIgPSBjcmVhdGVBbmRSZW5kZXJDb250YWluZXIoKTtcbiAgUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIGNvbnRhaW5lcik7XG5cbiAgY29uc29sZS5sb2coJ01lbW86IEluaXRpYWxpemVkJyk7XG59XG5cbmZ1bmN0aW9uIG9udW5sb2FkKCkge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb250YWluZXJfaWQpO1xuXG4gIC8vIOebtOaOpeWvvOWFpeW5tua4heeQhueEpueCueeuoeeQhuWZqO+8jOehruS/neenu+mZpOaJgOacieS6i+S7tuebkeWQrOWZqFxuICB0cnkge1xuICAgIGNvbnN0IHsgcm9hbUZvY3VzTWFuYWdlciB9ID0gcmVxdWlyZSgnLi91dGlscy9yb2FtRm9jdXNNYW5hZ2VyJyk7XG4gICAgcm9hbUZvY3VzTWFuYWdlci5mb3JjZUNsZWFudXAoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCfwn46vIE1lbW8gRW5oYW5jZWQ6IOa4heeQhueEpueCueeuoeeQhuWZqOWksei0pTonLCBlcnJvcik7XG4gIH1cblxuICAvLyDnm7TmjqXlr7zlhaXlubbmuIXnkIblsYLnuqfnrqHnkIblmajvvIznp7vpmaTms6jlhaXnmoRDU1PmoLflvI9cbiAgdHJ5IHtcbiAgICBjb25zdCB7IHJvYW1aSW5kZXhNYW5hZ2VyIH0gPSByZXF1aXJlKCcuL3V0aWxzL3JvYW1aSW5kZXhNYW5hZ2VyJyk7XG4gICAgcm9hbVpJbmRleE1hbmFnZXIucmVtb3ZlWkluZGV4Rml4KCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign8J+UpyBNZW1vIEVuaGFuY2VkOiDmuIXnkIblsYLnuqfnrqHnkIblmajlpLHotKU6JywgZXJyb3IpO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5lcikge1xuICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUoY29udGFpbmVyKTtcbiAgICBjb250YWluZXIucmVtb3ZlKCk7XG4gIH1cblxuICBjb25zb2xlLmxvZygnTWVtbzogVW5sb2FkZWQgLSDmiYDmnInkv67lpI3ohJrmnKzlt7LmuIXnkIYnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBvbmxvYWQ6IG9ubG9hZCxcbiAgb251bmxvYWQ6IG9udW5sb2FkLFxufTtcbiJdLCJuYW1lcyI6WyJ3aW5kb3ciLCIkIiwidW5kZWZpbmVkIiwiTXV0YXRpb25PYnNlcnZlciIsIkhUTUxFbGVtZW50IiwibWF0Y2hlcyIsImFycml2ZVVuaXF1ZUlkIiwidXRpbHMiLCJwcm90b3R5cGUiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm1hdGNoZXNTZWxlY3RvciIsImVsZW0iLCJzZWxlY3RvciIsImNhbGwiLCJhZGRNZXRob2QiLCJvYmplY3QiLCJuYW1lIiwiZm4iLCJvbGQiLCJsZW5ndGgiLCJhcmd1bWVudHMiLCJhcHBseSIsInRoaXMiLCJjYWxsQ2FsbGJhY2tzIiwiY2FsbGJhY2tzVG9CZUNhbGxlZCIsInJlZ2lzdHJhdGlvbkRhdGEiLCJvcHRpb25zIiwib25jZU9ubHkiLCJmaXJlZEVsZW1zIiwiY2IiLCJpIiwiY2FsbGJhY2siLCJtZSIsInVuYmluZEV2ZW50V2l0aFNlbGVjdG9yQW5kQ2FsbGJhY2siLCJ0YXJnZXQiLCJjaGVja0NoaWxkTm9kZXNSZWN1cnNpdmVseSIsIm5vZGVzIiwibWF0Y2hGdW5jIiwibm9kZSIsInB1c2giLCJjaGlsZE5vZGVzIiwibWVyZ2VBcnJheXMiLCJmaXJzdEFyciIsInNlY29uZEFyciIsImF0dHJOYW1lIiwiaGFzT3duUHJvcGVydHkiLCJ0b0VsZW1lbnRzQXJyYXkiLCJlbGVtZW50cyIsIkV2ZW50c0J1Y2tldCIsIl9ldmVudHNCdWNrZXQiLCJfYmVmb3JlQWRkaW5nIiwiX2JlZm9yZVJlbW92aW5nIiwiYWRkRXZlbnQiLCJuZXdFdmVudCIsInJlbW92ZUV2ZW50IiwiY29tcGFyZUZ1bmN0aW9uIiwicmVnaXN0ZXJlZEV2ZW50IiwicmVtb3ZlZEV2ZW50cyIsInNwbGljZSIsImJlZm9yZUFkZGluZyIsImJlZm9yZVJlbW92aW5nIiwiTXV0YXRpb25FdmVudHMiLCJnZXRPYnNlcnZlckNvbmZpZyIsIm9uTXV0YXRpb24iLCJldmVudHNCdWNrZXQiLCJkZWZhdWx0T3B0aW9ucyIsImZpcmVPbkF0dHJpYnV0ZXNNb2RpZmljYXRpb24iLCJvYnNlcnZlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJlIiwiY29uZmlnIiwib2JzZXJ2ZSIsImV2ZW50RGF0YSIsImRpc2Nvbm5lY3QiLCJiaW5kRXZlbnQiLCJ1bmJpbmRFdmVudCIsImV2ZW50T2JqIiwidW5iaW5kRXZlbnRXaXRoU2VsZWN0b3JPckNhbGxiYWNrIiwiYXJyaXZlRXZlbnRzIiwiYXJyaXZlRGVmYXVsdE9wdGlvbnMiLCJleGlzdGluZyIsIm5vZGVNYXRjaEZ1bmMiLCJfaWQiLCJpbmRleE9mIiwibXV0YXRpb25CaW5kRXZlbnQiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsIm11dGF0aW9ucyIsImZvckVhY2giLCJtdXRhdGlvbiIsIm5ld05vZGVzIiwiYWRkZWROb2RlcyIsInRhcmdldE5vZGUiLCJ0eXBlIiwicXVlcnlTZWxlY3RvckFsbCIsImoiLCJzZXRUaW1lb3V0IiwibGVhdmVFdmVudHMiLCJsZWF2ZURlZmF1bHRPcHRpb25zIiwicmVtb3ZlZE5vZGVzIiwiZXhwb3NlQXBpIiwiTm9kZUxpc3QiLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxEb2N1bWVudCIsIldpbmRvdyIsIkFycml2ZSIsImV4cG9zZVVuYmluZEFwaSIsImV4cG9zZVRvIiwiZnVuY05hbWUiLCJhcnJpdmUiLCJsZWF2ZSIsImpRdWVyeSIsIlJvYW1Gb2N1c01hbmFnZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJfZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ2YWx1ZSIsImluc3RhbmNlIiwiX3RoaXMiLCJpc0FjdGl2ZSIsImNvbnNvbGUiLCJsb2ciLCJibHVyRXZlbnRIYW5kbGVyIiwiZXZlbnQiLCJST0FNX0VESVRBQkxFX1NFTEVDVE9SIiwidGFnTmFtZSIsImNsYXNzTmFtZSIsImlkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwid2FpdEZvclJvYW1Jbml0aWFsaXphdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpbml0Q2hlY2tJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJkZWFjdGl2YXRlRm9jdXNQcm90ZWN0aW9uIiwiYWN0aXZhdGVGb2N1c1Byb3RlY3Rpb24iLCJfdGhpczIiLCJzZXRJbnRlcnZhbCIsInJvYW1BcHAiLCJxdWVyeVNlbGVjdG9yIiwicm9hbU1haW4iLCJyb2FtRm9jdXNNYW5hZ2VyIiwiZ2V0SW5zdGFuY2UiLCJSb2FtWkluZGV4TWFuYWdlciIsInN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJTVFlMRV9JRCIsInRleHRDb250ZW50IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJpc0ZpeEFjdGl2ZSIsInJlbW92ZVpJbmRleEZpeCIsImluamVjdFpJbmRleEZpeCIsInJvYW1aSW5kZXhNYW5hZ2VyIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIm9iaiIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJkZWZhdWx0IiwiZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9hc3NpZ24yIiwic291cmNlIiwiT2JqZWN0IiwiX3NldFByb3RvdHlwZU9mMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY3JlYXRlMiIsIl90eXBlb2YzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfaXRlcmF0b3IyIiwiX3N5bWJvbDIiLCJfdHlwZW9mIiwiJE9iamVjdCIsIlAiLCJEIiwiY3JlYXRlIiwiaXQiLCJkZXNjIiwiZGVmaW5lUHJvcGVydHkiLCJpc09iamVjdCIsInRvSU9iamVjdCIsInRvTGVuZ3RoIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiTyIsImluZGV4IiwidG9TdHJpbmciLCJzbGljZSIsImNvcmUiLCJ2ZXJzaW9uIiwiX19lIiwiYUZ1bmN0aW9uIiwidGhhdCIsImEiLCJiIiwiYyIsImdldCIsImlzIiwic3BsaXQiLCJnZXRLZXlzIiwiZ09QUyIsInBJRSIsInJlc3VsdCIsImdldFN5bWJvbHMiLCJmIiwic3ltYm9scyIsImlzRW51bSIsImdsb2JhbCIsImN0eCIsImhpZGUiLCJoYXMiLCJQUk9UT1RZUEUiLCIkZXhwb3J0Iiwib3duIiwib3V0IiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJJU19CSU5EIiwiQiIsIklTX1dSQVAiLCJXIiwiZXhwUHJvdG8iLCJDIiwiRnVuY3Rpb24iLCJ2aXJ0dWFsIiwiUiIsIlUiLCJleGVjIiwiTWF0aCIsIl9fZyIsImRQIiwiY3JlYXRlRGVzYyIsImRvY3VtZW50RWxlbWVudCIsImNvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJnIiwic2V0VG9TdHJpbmdUYWciLCJJdGVyYXRvclByb3RvdHlwZSIsIk5BTUUiLCJuZXh0IiwiTElCUkFSWSIsInJlZGVmaW5lIiwiSXRlcmF0b3JzIiwiJGl0ZXJDcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsIklURVJBVE9SIiwiQlVHR1kiLCJrZXlzIiwiS0VZUyIsIlZBTFVFUyIsInJldHVyblRoaXMiLCJCYXNlIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJnZXRNZXRob2QiLCJraW5kIiwicHJvdG8iLCJUQUciLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsImVudHJpZXMiLCJ2YWx1ZXMiLCJkb25lIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIktFWSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiREVTQ1JJUFRPUlMiLCJ0b09iamVjdCIsIklPYmplY3QiLCIkYXNzaWduIiwiYXNzaWduIiwiQSIsIlN5bWJvbCIsIksiLCJrIiwiam9pbiIsIlQiLCJhTGVuIiwiY29uY2F0IiwiYW5PYmplY3QiLCJkUHMiLCJlbnVtQnVnS2V5cyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiQXR0cmlidXRlcyIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnT1BOIiwid2luZG93TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCIka2V5cyIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJPYmplY3RQcm90byIsImFycmF5SW5kZXhPZiIsIm5hbWVzIiwiZmFpbHMiLCJleHAiLCJiaXRtYXAiLCJjaGVjayIsInNldCIsInNldFByb3RvdHlwZU9mIiwidGVzdCIsImJ1Z2d5IiwiZGVmIiwidGFnIiwic3RhdCIsInNoYXJlZCIsInVpZCIsIlNIQVJFRCIsInN0b3JlIiwibW9kZSIsImNvcHlyaWdodCIsInRvSW50ZWdlciIsImRlZmluZWQiLCJUT19TVFJJTkciLCJwb3MiLCJzIiwiU3RyaW5nIiwibCIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCJtYXgiLCJtaW4iLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInZhbCIsInZhbHVlT2YiLCJweCIsInJhbmRvbSIsIndrc0V4dCIsIiRTeW1ib2wiLCJVU0VfU1lNQk9MIiwiYWRkVG9VbnNjb3BhYmxlcyIsInN0ZXAiLCJpdGVyYXRlZCIsIl90IiwiX2kiLCJfayIsIkFyZ3VtZW50cyIsIiRnZXRQcm90b3R5cGVPZiIsIiRhdCIsInBvaW50IiwiJGZhaWxzIiwid2tzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJEdPUFMiLCIkRFAiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJzZXR0ZXIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsImlzU3ltYm9sIiwiaXRlcmF0b3IiLCIkZGVmaW5lUHJvcGVydHkiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCIkc2V0IiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJhcmdzIiwiVE9fU1RSSU5HX1RBRyIsIkRPTUl0ZXJhYmxlcyIsIkNvbGxlY3Rpb24iLCJuIiwiciIsInUiLCJvIiwiaCIsImQiLCJ5IiwiTSIsIndlZWtkYXlzIiwibW9udGhzIiwib3JkaW5hbCIsInQiLCJtIiwidiIsInoiLCJ1dGNPZmZzZXQiLCJhYnMiLCJkYXRlIiwieWVhciIsIm1vbnRoIiwiY2xvbmUiLCJhZGQiLCJwIiwibXMiLCJRIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwiZyIsIl8iLCJsb2NhbGUiLCIkTCIsInV0YyIsIiR1IiwieCIsIiR4IiwiJG9mZnNldCIsInBhcnNlIiwiJGQiLCJEYXRlIiwiTmFOIiwibWF0Y2giLCJzdWJzdHJpbmciLCJVVEMiLCJpbml0IiwiJHkiLCJnZXRGdWxsWWVhciIsIiRNIiwiZ2V0TW9udGgiLCIkRCIsImdldERhdGUiLCIkVyIsImdldERheSIsIiRIIiwiZ2V0SG91cnMiLCIkbSIsImdldE1pbnV0ZXMiLCIkcyIsImdldFNlY29uZHMiLCIkbXMiLCJnZXRNaWxsaXNlY29uZHMiLCIkdXRpbHMiLCJpc1ZhbGlkIiwiaXNTYW1lIiwic3RhcnRPZiIsImVuZE9mIiwiaXNBZnRlciIsImlzQmVmb3JlIiwiJGciLCJ1bml4IiwiZ2V0VGltZSIsInRvRGF0ZSIsIiRsb2NhbGUiLCJ3ZWVrU3RhcnQiLCJkYXlzSW5Nb250aCIsIk51bWJlciIsInJvdW5kIiwic3VidHJhY3QiLCJmb3JtYXQiLCJpbnZhbGlkRGF0ZSIsIm1lcmlkaWVtIiwibW9udGhzU2hvcnQiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJnZXRUaW1lem9uZU9mZnNldCIsImRpZmYiLCJ0b0pTT04iLCJ0b0lTT1N0cmluZyIsInRvVVRDU3RyaW5nIiwiZXh0ZW5kIiwiJGkiLCJpc0RheWpzIiwiZW4iLCJMcyIsImxhc3REYXkiLCJzYW1lRGF5IiwibmV4dERheSIsIm5leHRXZWVrIiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsImNhbGVuZGFyIiwiZnV0dXJlIiwicGFzdCIsIm1tIiwiaGgiLCJkZCIsIk1NIiwieXkiLCJmcm9tVG9CYXNlIiwicmVsYXRpdmVUaW1lIiwidGhyZXNob2xkcyIsInJvdW5kaW5nIiwidG8iLCJmcm9tIiwidG9Ob3ciLCJmcm9tTm93IiwiZmFjdG9yeSIsIm5hdmlnYXRvciIsInN2Z05TIiwibG9jYXRpb25IcmVmIiwiX3VzZVdlYldvcmtlciIsImluaXRpYWxEZWZhdWx0RnJhbWUiLCJzZXRXZWJXb3JrZXIiLCJmbGFnIiwiZ2V0V2ViV29ya2VyIiwic2V0TG9jYXRpb25IcmVmIiwiZ2V0TG9jYXRpb25IcmVmIiwiY3JlYXRlVGFnIiwiZXh0ZW5kUHJvdG90eXBlIiwic291cmNlcyIsImRlc3RpbmF0aW9uIiwic291cmNlUHJvdG90eXBlIiwibGVuIiwiYXR0ciIsImdldERlc2NyaXB0b3IiLCJwcm9wIiwiY3JlYXRlUHJveHlGdW5jdGlvbiIsIlByb3h5RnVuY3Rpb24iLCJhdWRpb0NvbnRyb2xsZXJGYWN0b3J5IiwiQXVkaW9Db250cm9sbGVyIiwiYXVkaW9GYWN0b3J5IiwiYXVkaW9zIiwiX3ZvbHVtZSIsIl9pc011dGVkIiwiYWRkQXVkaW8iLCJhdWRpbyIsInBhdXNlIiwicmVzdW1lIiwic2V0UmF0ZSIsInJhdGVWYWx1ZSIsImNyZWF0ZUF1ZGlvIiwiYXNzZXRQYXRoIiwiSG93bCIsImlzUGxheWluZyIsInBsYXkiLCJzZWVrIiwicGxheWluZyIsInJhdGUiLCJzZXRWb2x1bWUiLCJzZXRBdWRpb0ZhY3RvcnkiLCJfdXBkYXRlVm9sdW1lIiwibXV0ZSIsInVubXV0ZSIsImdldFZvbHVtZSIsInZvbHVtZSIsImNyZWF0ZVR5cGVkQXJyYXkiLCJjcmVhdGVSZWd1bGFyQXJyYXkiLCJhcnIiLCJVaW50OENsYW1wZWRBcnJheSIsIkZsb2F0MzJBcnJheSIsIkludDE2QXJyYXkiLCJjcmVhdGVTaXplZEFycmF5IiwiX3R5cGVvZiQ2Iiwic3ViZnJhbWVFbmFibGVkIiwiZXhwcmVzc2lvbnNQbHVnaW4iLCJleHByZXNzaW9uc0ludGVyZmFjZXMiLCJpZFByZWZpeCQxIiwiaXNTYWZhcmkiLCJ1c2VyQWdlbnQiLCJfc2hvdWxkUm91bmRWYWx1ZXMiLCJibVBvdyIsInBvdyIsImJtU3FydCIsInNxcnQiLCJibUZsb29yIiwiYm1NYXgiLCJibU1pbiIsIkJNTWF0aCIsIlByb2plY3RJbnRlcmZhY2UkMSIsInByb3BlcnR5TmFtZXMiLCJhYnNBcnIiLCJkZWZhdWx0Q3VydmVTZWdtZW50cyIsImRlZ1RvUmFkcyIsIlBJIiwicm91bmRDb3JuZXIiLCJyb3VuZFZhbHVlcyIsImJtUm5kIiwic3R5bGVEaXYiLCJlbGVtZW50IiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwidHJhbnNmb3JtT3JpZ2luIiwid2Via2l0VHJhbnNmb3JtT3JpZ2luIiwiYmFja2ZhY2VWaXNpYmlsaXR5Iiwid2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5IiwidHJhbnNmb3JtU3R5bGUiLCJ3ZWJraXRUcmFuc2Zvcm1TdHlsZSIsIm1velRyYW5zZm9ybVN0eWxlIiwiQk1FbnRlckZyYW1lRXZlbnQiLCJjdXJyZW50VGltZSIsInRvdGFsVGltZSIsImZyYW1lTXVsdGlwbGllciIsImRpcmVjdGlvbiIsIkJNQ29tcGxldGVFdmVudCIsIkJNQ29tcGxldGVMb29wRXZlbnQiLCJ0b3RhbExvb3BzIiwiY3VycmVudExvb3AiLCJCTVNlZ21lbnRTdGFydEV2ZW50IiwiZmlyc3RGcmFtZSIsInRvdGFsRnJhbWVzIiwiQk1EZXN0cm95RXZlbnQiLCJCTVJlbmRlckZyYW1lRXJyb3JFdmVudCIsIm5hdGl2ZUVycm9yIiwiQk1Db25maWdFcnJvckV2ZW50IiwiQk1BbmltYXRpb25Db25maWdFcnJvckV2ZW50IiwiY3JlYXRlRWxlbWVudElEIiwiX2NvdW50IiwiSFNWdG9SR0IiLCJxIiwiUkdCdG9IU1YiLCJhZGRTYXR1cmF0aW9uVG9SR0IiLCJjb2xvciIsIm9mZnNldCIsImhzdiIsImFkZEJyaWdodG5lc3NUb1JHQiIsImFkZEh1ZVRvUkdCIiwicmdiVG9IZXgiLCJoZXgiLCJjb2xvck1hcCIsInNldFN1YmZyYW1lRW5hYmxlZCIsImdldFN1YmZyYW1lRW5hYmxlZCIsInNldEV4cHJlc3Npb25zUGx1Z2luIiwiZ2V0RXhwcmVzc2lvbnNQbHVnaW4iLCJzZXRFeHByZXNzaW9uSW50ZXJmYWNlcyIsImdldEV4cHJlc3Npb25JbnRlcmZhY2VzIiwic2V0RGVmYXVsdEN1cnZlU2VnbWVudHMiLCJnZXREZWZhdWx0Q3VydmVTZWdtZW50cyIsInNldElkUHJlZml4IiwiZ2V0SWRQcmVmaXgiLCJjcmVhdGVOUyIsImNyZWF0ZUVsZW1lbnROUyIsIl90eXBlb2YkNSIsImRhdGFNYW5hZ2VyIiwid29ya2VyRm4iLCJ3b3JrZXJJbnN0YW5jZSIsIl9jb3VudGVySWQiLCJwcm9jZXNzZXMiLCJ3b3JrZXJQcm94eSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwicGF0aCIsImRhdGEiLCJfd29ya2VyU2VsZiIsInNldHVwV29ya2VyIiwiV29ya2VyIiwiQmxvYiIsImJsb2IiLCJ1cmwiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJjcmVhdGVXb3JrZXIiLCJjb21wbGV0ZUxheWVycyIsImxheWVycyIsImNvbXBzIiwibGF5ZXJEYXRhIiwiakxlbiIsImtMZW4iLCJjb21wbGV0ZWQiLCJoYXNNYXNrIiwibWFza1Byb3BzIiwibWFza3NQcm9wZXJ0aWVzIiwicHQiLCJjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzIiwidHkiLCJmaW5kQ29tcExheWVycyIsInJlZklkIiwiY29tcGxldGVTaGFwZXMiLCJzaGFwZXMiLCJjb21wIiwiZmluZENvbXAiLCJfX3VzZWQiLCJrcyIsImNoZWNrVmVyc2lvbiIsIm1pbmltdW0iLCJhbmltVmVyc2lvblN0cmluZyIsImFuaW1WZXJzaW9uIiwibWluaW11bVZlcnNpb24iLCJjaGVja1RleHQiLCJpdGVyYXRlTGF5ZXJzIiwidGV4dExheWVyIiwiZG9jdW1lbnREYXRhIiwiYW5pbWF0aW9uRGF0YSIsImFzc2V0cyIsImNoZWNrQ2hhcnMiLCJjaGFycyIsImNoYXJEYXRhIiwiaXAiLCJvcCIsInN0Iiwic3IiLCJzayIsInNhIiwiY2hlY2tQYXRoUHJvcGVydGllcyIsInBhdGhEYXRhIiwiY2hlY2tDb2xvcnMiLCJpdGVyYXRlU2hhcGVzIiwiY2hlY2tTaGFwZXMiLCJjb21wbGV0ZUNsb3NpbmdTaGFwZXMiLCJjbG9zZWQiLCJjbCIsIm1vZHVsZU9iIiwiX19jb21wbGV0ZSIsImNvbXBsZXRlQ2hhcnMiLCJkYXRhRnVuY3Rpb25NYW5hZ2VyIiwiYXNzZXRMb2FkZXIiLCJmb3JtYXRSZXNwb25zZSIsInhociIsImNvbnRlbnRUeXBlSGVhZGVyIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsImxvYWQiLCJmdWxsUGF0aCIsImVycm9yQ2FsbGJhY2siLCJYTUxIdHRwUmVxdWVzdCIsImVyciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJlcnJvciIsInNlbmQiLCJjb21wbGV0ZURhdGEiLCJwYXlsb2FkIiwiYW5pbWF0aW9uIiwicHJvY2VzcyIsIm9uQ29tcGxldGUiLCJvbkVycm9yIiwiY3JlYXRlUHJvY2VzcyIsImxvYWRBbmltYXRpb24iLCJwcm9jZXNzSWQiLCJsb2NhdGlvbiIsIm9yaWdpbiIsInBhdGhuYW1lIiwibG9hZERhdGEiLCJjb21wbGV0ZUFuaW1hdGlvbiIsImFuaW0iLCJJbWFnZVByZWxvYWRlciIsInByb3h5SW1hZ2UiLCJjYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsImdldENvbnRleHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImltYWdlTG9hZGVkIiwibG9hZGVkQXNzZXRzIiwidG90YWxJbWFnZXMiLCJsb2FkZWRGb290YWdlc0NvdW50IiwidG90YWxGb290YWdlcyIsImltYWdlc0xvYWRlZENiIiwiZm9vdGFnZUxvYWRlZCIsImdldEFzc2V0c1BhdGgiLCJhc3NldERhdGEiLCJhc3NldHNQYXRoIiwib3JpZ2luYWxQYXRoIiwiaW1hZ2VQYXRoIiwidGVzdEltYWdlTG9hZGVkIiwiaW1nIiwiaW50ZXJ2YWxJZCIsImdldEJCb3giLCJfaW1hZ2VMb2FkZWQiLCJiaW5kIiwiY3JlYXRlRm9vdGFnZURhdGEiLCJvYiIsImZvb3RhZ2VEYXRhIiwiX2Zvb3RhZ2VMb2FkZWQiLCJJbWFnZVByZWxvYWRlckZhY3RvcnkiLCJpbWFnZXMiLCJsb2FkQXNzZXRzIiwiX2NyZWF0ZUltYWdlRGF0YSIsInNldEFzc2V0c1BhdGgiLCJzZXRQYXRoIiwibG9hZGVkSW1hZ2VzIiwibG9hZGVkRm9vdGFnZXMiLCJkZXN0cm95IiwiZ2V0QXNzZXQiLCJjcmVhdGVJbWdEYXRhIiwiY3Jvc3NPcmlnaW4iLCJjcmVhdGVJbWFnZURhdGEiLCJzZXRBdHRyaWJ1dGVOUyIsIl9lbGVtZW50SGVscGVyIiwiYXBwZW5kIiwic2V0Q2FjaGVUeXBlIiwiZWxlbWVudEhlbHBlciIsIkJhc2VFdmVudCIsInRyaWdnZXJFdmVudCIsImV2ZW50TmFtZSIsIl9jYnMiLCJjYWxsYmFja3MiLCJtYXJrZXJQYXJzZXIiLCJwYXJzZVBheWxvYWRMaW5lcyIsImxpbmUiLCJsaW5lcyIsImtleXNDb3VudCIsInRyaW0iLCJFcnJvciIsIl9tYXJrZXJzIiwibWFya2VycyIsIl9tYXJrZXIiLCJtYXJrZXJEYXRhIiwidGltZSIsInRtIiwiZHVyYXRpb24iLCJkciIsImNtIiwiX18iLCJQcm9qZWN0SW50ZXJmYWNlIiwicmVnaXN0ZXJDb21wb3NpdGlvbiIsImNvbXBvc2l0aW9ucyIsIl90aGlzUHJvamVjdEZ1bmN0aW9uIiwibm0iLCJwcmVwYXJlRnJhbWUiLCJ4dCIsImN1cnJlbnRGcmFtZSIsImNvbXBJbnRlcmZhY2UiLCJyZW5kZXJlcnMiLCJyZWdpc3RlclJlbmRlcmVyIiwiZ2V0UmVuZGVyZXIiLCJnZXRSZWdpc3RlcmVkUmVuZGVyZXIiLCJfdHlwZW9mJDQiLCJBbmltYXRpb25JdGVtIiwiaXNMb2FkZWQiLCJjdXJyZW50UmF3RnJhbWUiLCJmcmFtZVJhdGUiLCJmcmFtZU11bHQiLCJwbGF5U3BlZWQiLCJwbGF5RGlyZWN0aW9uIiwicGxheUNvdW50IiwiaXNQYXVzZWQiLCJhdXRvcGxheSIsImxvb3AiLCJyZW5kZXJlciIsImFuaW1hdGlvbklEIiwidGltZUNvbXBsZXRlZCIsInNlZ21lbnRQb3MiLCJpc1N1YmZyYW1lRW5hYmxlZCIsInNlZ21lbnRzIiwiX2lkbGUiLCJfY29tcGxldGVkTG9vcCIsInByb2plY3RJbnRlcmZhY2UiLCJpbWFnZVByZWxvYWRlciIsImF1ZGlvQ29udHJvbGxlciIsImNvbmZpZ0FuaW1hdGlvbiIsIm9uU2V0dXBFcnJvciIsIm9uU2VnbWVudENvbXBsZXRlIiwiZHJhd25GcmFtZUV2ZW50Iiwic2V0UGFyYW1zIiwicGFyYW1zIiwid3JhcHBlciIsImNvbnRhaW5lciIsImFuaW1UeXBlIiwiUmVuZGVyZXJDbGFzcyIsInJlbmRlcmVyU2V0dGluZ3MiLCJnbG9iYWxEYXRhIiwiZGVmcyIsInNldFByb2plY3RJbnRlcmZhY2UiLCJwYXJzZUludCIsImF1dG9sb2FkU2VnbWVudHMiLCJpbml0aWFsU2VnbWVudCIsInNldHVwQW5pbWF0aW9uIiwibGFzdEluZGV4T2YiLCJzdWJzdHIiLCJmaWxlTmFtZSIsInRyaWdnZXIiLCJzZXREYXRhIiwid3JhcHBlckF0dHJpYnV0ZXMiLCJnZXROYW1lZEl0ZW0iLCJwcmVyZW5kZXIiLCJpbmNsdWRlTGF5ZXJzIiwibmV3TGF5ZXJzIiwiZm9udHMiLCJmb250TWFuYWdlciIsImFkZENoYXJzIiwiYWRkRm9udHMiLCJpbml0RXhwcmVzc2lvbnMiLCJsb2FkTmV4dFNlZ21lbnQiLCJzZWdtZW50Iiwic2hpZnQiLCJzZWdtZW50UGF0aCIsImxvYWRTZWdtZW50cyIsImltYWdlc0xvYWRlZCIsImNoZWNrTG9hZGVkIiwicHJlbG9hZEltYWdlcyIsImFuaW1EYXRhIiwiZnIiLCJzZWFyY2hFeHRyYUNvbXBvc2l0aW9ucyIsInVwZGFGcmFtZU1vZGlmaWVyIiwid2FpdEZvckZvbnRzTG9hZGVkIiwidHJpZ2dlckNvbmZpZ0Vycm9yIiwicmVuZGVyZXJUeXBlIiwiaW5pdEl0ZW1zIiwiZ290b0ZyYW1lIiwicmVzaXplIiwiX3dpZHRoIiwiX2hlaWdodCIsInVwZGF0ZUNvbnRhaW5lclNpemUiLCJzZXRTdWJmcmFtZSIsInJlbmRlckZyYW1lIiwicmVzZXRGcmFtZSIsInRyaWdnZXJSZW5kZXJGcmFtZUVycm9yIiwidG9nZ2xlUGF1c2UiLCJzdG9wIiwic2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUiLCJnZXRNYXJrZXJEYXRhIiwibWFya2VyTmFtZSIsIm1hcmtlciIsImdvVG9BbmRTdG9wIiwiaXNGcmFtZSIsIm51bVZhbHVlIiwiZnJhbWVNb2RpZmllciIsImdvVG9BbmRQbGF5IiwicGxheVNlZ21lbnRzIiwiYWR2YW5jZVRpbWUiLCJuZXh0VmFsdWUiLCJfaXNDb21wbGV0ZSIsImNoZWNrU2VnbWVudHMiLCJhZGp1c3RTZWdtZW50Iiwic2V0U3BlZWQiLCJzZXREaXJlY3Rpb24iLCJzZXRTZWdtZW50IiwiZW5kIiwicGVuZGluZ0ZyYW1lIiwiZm9yY2VGbGFnIiwicmVzZXRTZWdtZW50cyIsIm9uRW50ZXJGcmFtZSIsIm9uTG9vcENvbXBsZXRlIiwib25TZWdtZW50U3RhcnQiLCJvbkRlc3Ryb3kiLCJzZXRMb29wIiwiaXNMb29waW5nIiwiZ2V0UGF0aCIsImdldEFzc2V0RGF0YSIsInNob3ciLCJnZXREdXJhdGlvbiIsInVwZGF0ZURvY3VtZW50RGF0YSIsImdldEVsZW1lbnRCeVBhdGgiLCJhbmltYXRpb25NYW5hZ2VyIiwicmVnaXN0ZXJlZEFuaW1hdGlvbnMiLCJpbml0VGltZSIsInBsYXlpbmdBbmltYXRpb25zTnVtIiwiX3N0b3BwZWQiLCJfaXNGcm96ZW4iLCJyZW1vdmVFbGVtZW50IiwiZXYiLCJhbmltSXRlbSIsInN1YnRyYWN0UGxheWluZ0NvdW50IiwicmVnaXN0ZXJBbmltYXRpb24iLCJhZGRQbGF5aW5nQ291bnQiLCJhY3RpdmF0ZSIsIm5vd1RpbWUiLCJlbGFwc2VkVGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZpcnN0Iiwic2VhcmNoQW5pbWF0aW9ucyIsInN0YW5kYWxvbmUiLCJhbmltRWxlbWVudHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwibGVuQW5pbXMiLCJzZXRBdHRyaWJ1dGUiLCJib2R5IiwiaW5uZXJUZXh0IiwiZGl2IiwiZnJlZXplIiwidW5mcmVlemUiLCJnZXRSZWdpc3RlcmVkQW5pbWF0aW9ucyIsImFuaW1hdGlvbnMiLCJCZXppZXJGYWN0b3J5Iiwic3RyIiwiYmV6aWVycyIsImJlekVhc2luZyIsIkJlemllckVhc2luZyIsImtTcGxpbmVUYWJsZVNpemUiLCJrU2FtcGxlU3RlcFNpemUiLCJmbG9hdDMyQXJyYXlTdXBwb3J0ZWQiLCJhQTEiLCJhQTIiLCJjYWxjQmV6aWVyIiwiYVQiLCJnZXRTbG9wZSIsInBvaW50cyIsIl9wIiwiX21TYW1wbGVWYWx1ZXMiLCJfcHJlY29tcHV0ZWQiLCJtWDEiLCJtWTEiLCJtWDIiLCJtWTIiLCJfcHJlY29tcHV0ZSIsIl9nZXRURm9yWCIsIl9jYWxjU2FtcGxlVmFsdWVzIiwiYVgiLCJtU2FtcGxlVmFsdWVzIiwiaW50ZXJ2YWxTdGFydCIsImN1cnJlbnRTYW1wbGUiLCJsYXN0U2FtcGxlIiwiZ3Vlc3NGb3JUIiwiaW5pdGlhbFNsb3BlIiwiYUd1ZXNzVCIsImN1cnJlbnRTbG9wZSIsIm5ld3RvblJhcGhzb25JdGVyYXRlIiwiYUEiLCJhQiIsImN1cnJlbnRYIiwiY3VycmVudFQiLCJiaW5hcnlTdWJkaXZpZGUiLCJwb29saW5nIiwicG9vbEZhY3RvcnkiLCJpbml0aWFsTGVuZ3RoIiwiX3JlbGVhc2UiLCJfbGVuZ3RoIiwiX21heExlbmd0aCIsInBvb2wiLCJuZXdFbGVtZW50IiwicmVsZWFzZSIsImJlemllckxlbmd0aFBvb2wiLCJhZGRlZExlbmd0aCIsInBlcmNlbnRzIiwibGVuZ3RocyIsInNlZ21lbnRzTGVuZ3RoUG9vbCIsInRvdGFsTGVuZ3RoIiwiYmV6RnVuY3Rpb24iLCJtYXRoIiwicG9pbnRPbkxpbmUyRCIsIngxIiwieTEiLCJ4MiIsInkyIiwieDMiLCJ5MyIsImRldDEiLCJnZXRCZXppZXJMZW5ndGgiLCJwdDEiLCJwdDIiLCJwdDMiLCJwdDQiLCJwdENvb3JkIiwicGVyYyIsInB0RGlzdGFuY2UiLCJjdXJ2ZVNlZ21lbnRzIiwibGFzdFBvaW50IiwibGVuZ3RoRGF0YSIsIkJlemllckRhdGEiLCJzZWdtZW50TGVuZ3RoIiwiUG9pbnREYXRhIiwicGFydGlhbCIsInBhcnRpYWxMZW5ndGgiLCJzdG9yZWREYXRhIiwiYnVpbGRCZXppZXJEYXRhIiwiYmV6aWVyTmFtZSIsImJlemllckRhdGEiLCJnZXREaXN0YW5jZVBlcmMiLCJpbml0UG9zIiwibGVuZ3RoUG9zIiwibFBlcmMiLCJkaXIiLCJiZXppZXJTZWdtZW50UG9pbnRzIiwiZ2V0U2VnbWVudHNMZW5ndGgiLCJzaGFwZURhdGEiLCJzZWdtZW50c0xlbmd0aCIsInBhdGhWIiwicGF0aE8iLCJwYXRoSSIsImdldE5ld1NlZ21lbnQiLCJzdGFydFBlcmMiLCJlbmRQZXJjIiwidDAiLCJ0MSIsInUwIiwidTEiLCJ1MHUwdTAiLCJ0MHUwdTBfMyIsInQwdDB1MF8zIiwidDB0MHQwIiwidTB1MHUxIiwidDB1MHUxXzMiLCJ0MHQwdTFfMyIsInQwdDB0MSIsInUwdTF1MSIsInQwdTF1MV8zIiwidDB0MXUxXzMiLCJ0MHQxdDEiLCJ1MXUxdTEiLCJ0MXUxdTFfMyIsInQxdDF1MV8zIiwidDF0MXQxIiwiZ2V0UG9pbnRJblNlZ21lbnQiLCJwZXJjZW50IiwicG9pbnRPbkxpbmUzRCIsInoxIiwiejIiLCJ6MyIsImRpZmZEaXN0IiwiZGlzdDEiLCJkaXN0MiIsImRpc3QzIiwiYmV6IiwiaW5pdEZyYW1lIiwibWF0aEFicyIsImludGVycG9sYXRlVmFsdWUiLCJmcmFtZU51bSIsImNhY2hpbmciLCJuZXdWYWx1ZSIsIm9mZnNldFRpbWUiLCJwcm9wVHlwZSIsInB2Iiwia2V5RGF0YSIsIm5leHRLZXlEYXRhIiwia2V5ZnJhbWVNZXRhZGF0YSIsImZuYyIsIml0ZXJhdGlvbkluZGV4IiwibGFzdEluZGV4Iiwia2V5ZnJhbWVzIiwia2V5ZnJhbWVzTWV0YWRhdGEiLCJlbmRWYWx1ZSIsIm5leHRLZXlUaW1lIiwia2V5VGltZSIsInRpIiwiaW5kIiwiX19mbmN0IiwiZ2V0QmV6aWVyRWFzaW5nIiwic2VnbWVudFBlcmMiLCJkaXN0YW5jZUluTGluZSIsImxhc3RGcmFtZSIsIl9sYXN0S2V5ZnJhbWVJbmRleCIsIl9sYXN0QWRkZWRMZW5ndGgiLCJfbGFzdFBvaW50Iiwib3V0WCIsIm91dFkiLCJpblgiLCJpblkiLCJrZXlWYWx1ZSIsInNoIiwicXVhdGVybmlvblRvRXVsZXIiLCJzbGVycCIsImNyZWF0ZVF1YXRlcm5pb24iLCJvbWVnYSIsImNvc29tIiwic2lub20iLCJzY2FsZTAiLCJzY2FsZTEiLCJheCIsImF5IiwiYXoiLCJhdyIsImJ4IiwiYnkiLCJieiIsImJ3IiwiYWNvcyIsInNpbiIsInF1YXQiLCJxeCIsInF5IiwicXoiLCJxdyIsImhlYWRpbmciLCJhdGFuMiIsImF0dGl0dWRlIiwiYXNpbiIsImJhbmsiLCJjMSIsImNvcyIsImMyIiwiYzMiLCJzMSIsInMyIiwiczMiLCJnZXRWYWx1ZUF0Q3VycmVudFRpbWUiLCJyZW5kZXJlZEZyYW1lIiwiZW5kVGltZSIsIl9jYWNoaW5nIiwicmVuZGVyUmVzdWx0Iiwic2V0VlZhbHVlIiwibXVsdGlwbGllZFZhbHVlIiwibXVsdCIsIl9tZGYiLCJwcm9jZXNzRWZmZWN0c1NlcXVlbmNlIiwiZnJhbWVJZCIsImVmZmVjdHNTZXF1ZW5jZSIsImxvY2siLCJfaXNGaXJzdEZyYW1lIiwiZmluYWxWYWx1ZSIsImtmIiwiYWRkRWZmZWN0IiwiZWZmZWN0RnVuY3Rpb24iLCJhZGREeW5hbWljUHJvcGVydHkiLCJWYWx1ZVByb3BlcnR5IiwidmVsIiwiZ2V0VmFsdWUiLCJNdWx0aURpbWVuc2lvbmFsUHJvcGVydHkiLCJLZXlmcmFtZWRWYWx1ZVByb3BlcnR5IiwiS2V5ZnJhbWVkTXVsdGlkaW1lbnNpb25hbFByb3BlcnR5IiwiYXJyTGVuIiwiUHJvcGVydHlGYWN0b3J5IiwiZ2V0UHJvcCIsInNpZCIsInNsb3RNYW5hZ2VyIiwiRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyIiwiZHluYW1pY1Byb3BlcnRpZXMiLCJfaXNBbmltYXRlZCIsIml0ZXJhdGVEeW5hbWljUHJvcGVydGllcyIsImluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIiLCJwb2ludFBvb2wiLCJTaGFwZVBhdGgiLCJzZXRQYXRoRGF0YSIsInNldExlbmd0aCIsImRvdWJsZUFycmF5TGVuZ3RoIiwic2V0WFlBdCIsInNldFRyaXBsZUF0IiwidlgiLCJ2WSIsIm9YIiwib1kiLCJpWCIsImlZIiwicmV2ZXJzZSIsIm5ld1BhdGgiLCJ2ZXJ0aWNlcyIsIm91dFBvaW50cyIsImluUG9pbnRzIiwiY250Iiwic2hhcGVQb29sIiwic2hhcGVQYXRoIiwic2hhcGUiLCJjbG9uZWQiLCJTaGFwZUNvbGxlY3Rpb24iLCJhZGRTaGFwZSIsInJlbGVhc2VTaGFwZXMiLCJzaGFwZUNvbGxlY3Rpb25Qb29sIiwibmV3U2hhcGVDb2xsZWN0aW9uIiwic2hhcGVDb2xsZWN0aW9uIiwiU2hhcGVQcm9wZXJ0eUZhY3RvcnkiLCJpbnRlcnBvbGF0ZVNoYXBlIiwicHJldmlvdXNWYWx1ZSIsImtleVByb3BTIiwia2V5UHJvcEUiLCJpc0hvbGQiLCJ2ZXJ0ZXhWYWx1ZSIsImludGVycG9sYXRlU2hhcGVDdXJyZW50VGltZSIsInJlc2V0U2hhcGUiLCJwYXRocyIsImxvY2FsU2hhcGVDb2xsZWN0aW9uIiwic2hhcGUxIiwic2hhcGUyIiwic2hhcGVzRXF1YWwiLCJTaGFwZVByb3BlcnR5IiwicmVzZXQiLCJLZXlmcmFtZWRTaGFwZVByb3BlcnR5IiwiRWxsU2hhcGVQcm9wZXJ0eSIsImNQb2ludCIsIkVsbFNoYXBlUHJvcGVydHlGYWN0b3J5IiwiY29udmVydEVsbFRvUGF0aCIsInAwIiwicDEiLCJzMCIsIl9jdyIsIl92IiwiU3RhclNoYXBlUHJvcGVydHkiLCJTdGFyU2hhcGVQcm9wZXJ0eUZhY3RvcnkiLCJzeSIsImlyIiwiY29udmVydFRvUGF0aCIsImNvbnZlcnRTdGFyVG9QYXRoIiwiY29udmVydFBvbHlnb25Ub1BhdGgiLCJvciIsIm9zIiwicmFkIiwicm91bmRuZXNzIiwicGVyaW1TZWdtZW50IiwibnVtUHRzIiwiYW5nbGUiLCJsb25nRmxhZyIsImxvbmdSYWQiLCJzaG9ydFJhZCIsImxvbmdSb3VuZCIsInNob3J0Um91bmQiLCJsb25nUGVyaW1TZWdtZW50Iiwic2hvcnRQZXJpbVNlZ21lbnQiLCJjdXJyZW50QW5nIiwib3giLCJveSIsIlJlY3RTaGFwZVByb3BlcnR5IiwiUmVjdFNoYXBlUHJvcGVydHlGYWN0b3J5IiwiY29udmVydFJlY3RUb1BhdGgiLCJ2MCIsInYxIiwiTWF0cml4IiwiX2NvcyIsIl9zaW4iLCJfdGFuIiwidGFuIiwiX3JuZCIsInJvdGF0ZSIsIm1Db3MiLCJtU2luIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwic2hlYXIiLCJzeCIsInNrZXciLCJza2V3RnJvbUF4aXMiLCJzY2FsZSIsInN6Iiwic2V0VHJhbnNmb3JtIiwidHJhbnNsYXRlIiwidHgiLCJ0eiIsInRyYW5zZm9ybSIsImEyIiwiYjIiLCJkMiIsImUyIiwiZjIiLCJnMiIsImgyIiwiaTIiLCJqMiIsImsyIiwibDIiLCJtMiIsIm4yIiwibzIiLCJwMiIsIl9pZGVudGl0eUNhbGN1bGF0ZWQiLCJhMSIsImIxIiwiZDEiLCJlMSIsImYxIiwiZzEiLCJoMSIsImkxIiwiajEiLCJrMSIsImwxIiwibTEiLCJuMSIsIm8xIiwibXVsdGlwbHkiLCJtYXRyaXgiLCJtYXRyaXhQcm9wcyIsImlzSWRlbnRpdHkiLCJfaWRlbnRpdHkiLCJlcXVhbHMiLCJtYXRyIiwiY2xvbmVGcm9tUHJvcHMiLCJhcHBseVRvUG9pbnQiLCJhcHBseVRvWCIsImFwcGx5VG9ZIiwiYXBwbHlUb1oiLCJnZXRJbnZlcnNlTWF0cml4IiwiZGV0ZXJtaW5hbnQiLCJpbnZlcnNlTWF0cml4IiwiaW52ZXJzZVBvaW50IiwiYXBwbHlUb1BvaW50QXJyYXkiLCJpbnZlcnNlUG9pbnRzIiwicHRzIiwicmV0UHRzIiwiYXBwbHlUb1RyaXBsZVBvaW50cyIsInA0IiwicDUiLCJwMTIiLCJwMTMiLCJhcHBseVRvUG9pbnRTdHJpbmdpZmllZCIsInRvQ1NTIiwiY3NzVmFsdWUiLCJyb3VuZE1hdHJpeFByb3BlcnR5IiwidG8yZENTUyIsIl90eXBlb2YkMyIsImxvdHRpZSIsInNldExvY2F0aW9uIiwiaHJlZiIsInNldFN1YmZyYW1lUmVuZGVyaW5nIiwic2V0UHJlZml4IiwicHJlZml4Iiwic2V0UXVhbGl0eSIsImluQnJvd3NlciIsImluc3RhbGxQbHVnaW4iLCJwbHVnaW4iLCJnZXRGYWN0b3J5IiwiY2hlY2tSZWFkeSIsInJlYWR5U3RhdGVDaGVja0ludGVydmFsIiwiZ2V0UXVlcnlWYXJpYWJsZSIsInZhcmlhYmxlIiwidmFycyIsInF1ZXJ5U3RyaW5nIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsInVzZVdlYldvcmtlciIsInNldElEUHJlZml4IiwiX19nZXRGYWN0b3J5Iiwic2NyaXB0cyIsIm15U2NyaXB0IiwiU2hhcGVNb2RpZmllcnMiLCJtb2RpZmllcnMiLCJyZWdpc3Rlck1vZGlmaWVyIiwiZ2V0TW9kaWZpZXIiLCJTaGFwZU1vZGlmaWVyIiwiVHJpbU1vZGlmaWVyIiwiUHVja2VyQW5kQmxvYXRNb2RpZmllciIsImluaXRNb2RpZmllclByb3BlcnRpZXMiLCJhZGRTaGFwZVRvTW9kaWZpZXIiLCJzZXRBc0FuaW1hdGVkIiwicHJvY2Vzc0tleXMiLCJzVmFsdWUiLCJlVmFsdWUiLCJwYXRoc0RhdGEiLCJjYWxjdWxhdGVTaGFwZUVkZ2VzIiwic2hhcGVMZW5ndGgiLCJ0b3RhbE1vZGlmaWVyTGVuZ3RoIiwic2VnbWVudE9iIiwic2hhcGVTZWdtZW50cyIsInNoYXBlUyIsInNoYXBlRSIsInJlbGVhc2VQYXRoc0RhdGEiLCJwcm9jZXNzU2hhcGVzIiwic2hhcGVQYXRocyIsIl9zIiwidG90YWxTaGFwZUxlbmd0aCIsImVkZ2VzIiwibmV3U2hhcGVzRGF0YSIsImFkZFNoYXBlcyIsImxhc3RTaGFwZSIsInBvcCIsImFkZFBhdGhzIiwibmV3UGF0aHMiLCJhZGRTZWdtZW50IiwibmV3U2hhcGUiLCJhZGRTZWdtZW50RnJvbUFycmF5Iiwic2hhcGVTZWdtZW50IiwiY3VycmVudExlbmd0aERhdGEiLCJzZWdtZW50Q291bnQiLCJhbW91bnQiLCJwcm9jZXNzUGF0aCIsImNlbnRlclBvaW50IiwicGF0aExlbmd0aCIsImNsb25lZFBhdGgiLCJUcmFuc2Zvcm1Qcm9wZXJ0eUZhY3RvcnkiLCJkZWZhdWx0VmVjdG9yIiwiVHJhbnNmb3JtUHJvcGVydHkiLCJwcmUiLCJhcHBsaWVkVHJhbnNmb3JtYXRpb25zIiwicHkiLCJweiIsInJ4IiwicnkiLCJyeiIsIl9pc0RpcnR5IiwiYXBwbHlUb01hdHJpeCIsIm1hdCIsImZvcmNlUmVuZGVyIiwicHJlY2FsY3VsYXRlTWF0cml4IiwiYXV0b09yaWVudGVkIiwidjIiLCJnZXRWYWx1ZUF0VGltZSIsImF1dG9PcmllbnQiLCJfYWRkRHluYW1pY1Byb3BlcnR5IiwiZ2V0VHJhbnNmb3JtUHJvcGVydHkiLCJSZXBlYXRlck1vZGlmaWVyIiwiUm91bmRDb3JuZXJzTW9kaWZpZXIiLCJmbG9hdEVxdWFsIiwiZmxvYXRaZXJvIiwibGVycCIsImxlcnBQb2ludCIsInF1YWRSb290cyIsInNpbmdsZVJvb3QiLCJkZWx0YSIsInBvbHlub21pYWxDb2VmZmljaWVudHMiLCJwMyIsInNpbmdsZVBvaW50IiwiUG9seW5vbWlhbEJlemllciIsImxpbmVhcml6ZSIsInBvaW50RXF1YWwiLCJjb2VmZngiLCJjb2VmZnkiLCJleHRyZW1hIiwiaW50ZXJzZWN0RGF0YSIsInQyIiwiYm94IiwiYm91bmRpbmdCb3giLCJjeCIsImN5Iiwic3BsaXREYXRhIiwiYm94SW50ZXJzZWN0IiwiaW50ZXJzZWN0c0ltcGwiLCJkZXB0aCIsInRvbGVyYW5jZSIsImludGVyc2VjdGlvbnMiLCJtYXhSZWN1cnNpb24iLCJkMXMiLCJkMnMiLCJjcm9zc1Byb2R1Y3QiLCJsaW5lSW50ZXJzZWN0aW9uIiwic3RhcnQxIiwiZW5kMSIsInN0YXJ0MiIsImVuZDIiLCJ2MyIsInY0IiwicG9sYXJPZmZzZXQiLCJwb2ludERpc3RhbmNlIiwiaHlwb3QiLCJaaWdaYWdNb2RpZmllciIsInNldFBvaW50Iiwib3V0cHV0QmV6aWVyIiwiYW1wbGl0dWRlIiwib3V0QW1wbGl0dWRlIiwiaW5BbXBsaXR1ZGUiLCJhbmdPIiwiYW5nSSIsImdldFBlcnBlbmRpY3VsYXJWZWN0b3IiLCJ2ZWN0b3IiLCJyb3QiLCJnZXRQcm9qZWN0aW5nQW5nbGUiLCJjdXIiLCJwcmV2SW5kZXgiLCJuZXh0SW5kZXgiLCJwVmVjdG9yIiwiemlnWmFnQ29ybmVyIiwiZnJlcXVlbmN5IiwicG9pbnRUeXBlIiwicHJldlBvaW50IiwibmV4dFBvaW50IiwicHJldkRpc3QiLCJuZXh0RGlzdCIsInppZ1phZ1NlZ21lbnQiLCJkaXN0Iiwibm9ybWFsQW5nbGUiLCJsaW5lYXJPZmZzZXQiLCJvZmZzZXRTZWdtZW50IiwicDFhIiwicDFiIiwicDJiIiwicDJhIiwiam9pbkxpbmVzIiwic2VnMSIsInNlZzIiLCJsaW5lSm9pbiIsIm1pdGVyTGltaXQiLCJhbmdsZU91dCIsInRhbmdlbnRBbmdsZSIsImFuZ2xlSW4iLCJjZW50ZXIiLCJyYWRpdXMiLCJpbnRlcnNlY3Rpb24iLCJnZXRJbnRlcnNlY3Rpb24iLCJpbnRlcnNlY3QiLCJwcnVuZVNlZ21lbnRJbnRlcnNlY3Rpb24iLCJvdXRhIiwib3V0YiIsInBydW5lSW50ZXJzZWN0aW9ucyIsIm9mZnNldFNlZ21lbnRTcGxpdCIsInJpZ2h0IiwibWlkIiwiZmxleCIsImluZmxlY3Rpb25Qb2ludHMiLCJPZmZzZXRQYXRoTW9kaWZpZXIiLCJnZXRGb250UHJvcGVydGllcyIsImZvbnREYXRhIiwic3R5bGVzIiwiZlN0eWxlIiwiZldlaWdodCIsIndlaWdodCIsInRyIiwic28iLCJlbyIsInBNYXRyaXgiLCJyTWF0cml4Iiwic01hdHJpeCIsInRNYXRyaXgiLCJhcHBseVRyYW5zZm9ybXMiLCJpbnYiLCJzY2FsZVgiLCJzY2FsZVkiLCJlbGVtc0RhdGEiLCJfY3VycmVudENvcGllcyIsIl9lbGVtZW50cyIsIl9ncm91cHMiLCJ1bnNoaWZ0IiwicmVzZXRFbGVtZW50cyIsIl9wcm9jZXNzZWQiLCJjbG9uZUVsZW1lbnRzIiwibmV3RWxlbWVudHMiLCJjaGFuZ2VHcm91cFJlbmRlciIsInJlbmRlckZsYWciLCJfcmVuZGVyIiwiaXRlbXMiLCJpdGVtc1RyYW5zZm9ybSIsImNvbnQiLCJoYXNSZWxvYWRlZCIsImNvcGllcyIsImdyb3VwIiwiaXgiLCJyZWxvYWRTaGFwZXMiLCJlbGVtcyIsInRyYW5zZm9ybURhdGEiLCJvZmZzZXRNb2R1bG8iLCJyb3VuZE9mZnNldCIsInBQcm9wcyIsInJQcm9wcyIsInNQcm9wcyIsIml0ZXJhdGlvbiIsIm1Qcm9wcyIsInJkIiwiY3VycmVudFYiLCJjdXJyZW50SSIsImN1cnJlbnRPIiwiY2xvc2VyViIsImRpc3RhbmNlIiwibmV3UG9zUGVyYyIsImRlcml2YXRpdmUiLCJkZW5vbSIsInRjdXNwIiwic3F1YXJlIiwicm9vdCIsImZpbHRlciIsInAxMCIsInAxMSIsInAyMCIsInAyMSIsImJvdW5kcyIsImJvdHRvbSIsIm90aGVyIiwic2hhcGVTZWdtZW50SW52ZXJ0ZWQiLCJwb2ludHNUeXBlIiwiY291bnQiLCJtbCIsImxqIiwiaW5wdXRCZXppZXIiLCJtdWx0aVNlZ21lbnRzIiwibGFzdFNlZyIsIm11bHRpU2VnbWVudCIsIkZvbnRNYW5hZ2VyIiwiZW1wdHlDaGFyIiwic2l6ZSIsImNvbWJpbmVkQ2hhcmFjdGVycyIsIkJMQUNLX0ZMQUdfQ09ERV9QT0lOVCIsInN1cnJvZ2F0ZU1vZGlmaWVycyIsInNldFVwTm9kZSIsImZvbnQiLCJmYW1pbHkiLCJwYXJlbnROb2RlIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwiZm9udFZhcmlhbnQiLCJmb250U3R5bGUiLCJmb250V2VpZ2h0IiwibGV0dGVyU3BhY2luZyIsIm9mZnNldFdpZHRoIiwiZmFtaWx5QXJyYXkiLCJlbmFibGVkRmFtaWxpZXMiLCJ0cmltRm9udE9wdGlvbnMiLCJwYXJlbnQiLCJjcmVhdGVIZWxwZXIiLCJoZWxwZXIiLCJlbmdpbmUiLCJmb250UHJvcHMiLCJ0SGVscGVyIiwiZkZhbWlseSIsImZDbGFzcyIsInRDYW52YXNIZWxwZXIiLCJPZmZzY3JlZW5DYW52YXMiLCJtZWFzdXJlVGV4dCIsInRleHQiLCJnZXRDb21wdXRlZFRleHRMZW5ndGgiLCJnZXRDb2RlUG9pbnQiLCJzdHJpbmciLCJjb2RlUG9pbnQiLCJzZWNvbmQiLCJpc1JlZ2lvbmFsQ29kZSIsIkZvbnQiLCJ0eXBla2l0TG9hZGVkIiwiX3dhcm5lZCIsIm5vdyIsInNldElzTG9hZGVkQmluZGVkIiwic2V0SXNMb2FkZWQiLCJjaGVja0xvYWRlZEZvbnRzQmluZGVkIiwiY2hlY2tMb2FkZWRGb250cyIsImlzTW9kaWZpZXIiLCJmaXJzdENoYXJDb2RlIiwic2Vjb25kQ2hhckNvZGUiLCJzdW0iLCJpc1plcm9XaWR0aEpvaW5lciIsImNoYXJDb2RlIiwiaXNGbGFnRW1vamkiLCJpc0NvbWJpbmVkQ2hhcmFjdGVyIiwiX2NoYXIzIiwiaXNSZWdpb25hbEZsYWciLCJpc1ZhcmlhdGlvblNlbGVjdG9yIiwiZm9udFByb3RvdHlwZSIsImZvdW5kIiwiY2giLCJsaXN0IiwiY2FjaGUiLCJmb250QXJyIiwiX3BlbmRpbmdGb250cyIsImxvYWRlZFNlbGVjdG9yIiwic2hvdWxkTG9hZEZvbnQiLCJsb2FkZWQiLCJtb25vQ2FzZSIsInNhbnNDYXNlIiwiZlBhdGgiLCJmT3JpZ2luIiwicmVsIiwic2MiLCJnZXRDaGFyRGF0YSIsIl9jaGFyIiwid2FybiIsImdldEZvbnRCeU5hbWUiLCJmTmFtZSIsIl9jaGFyMiIsImZvbnROYW1lIiwiZG91YmxlU2l6ZSIsInNpbmdsZVNpemUiLCJsb2FkZWRDb3VudCIsIlNsb3RNYW5hZ2VyIiwic2xvdEZhY3RvcnkiLCJSZW5kZXJhYmxlRWxlbWVudCIsInNsb3RzIiwiaW5pdFJlbmRlcmFibGUiLCJpc0luUmFuZ2UiLCJoaWRkZW4iLCJpc1RyYW5zcGFyZW50IiwicmVuZGVyYWJsZUNvbXBvbmVudHMiLCJhZGRSZW5kZXJhYmxlQ29tcG9uZW50IiwiY29tcG9uZW50IiwicmVtb3ZlUmVuZGVyYWJsZUNvbXBvbmVudCIsInByZXBhcmVSZW5kZXJhYmxlRnJhbWUiLCJudW0iLCJjaGVja0xheWVyTGltaXRzIiwiY2hlY2tUcmFuc3BhcmVuY3kiLCJmaW5hbFRyYW5zZm9ybSIsIm1Qcm9wIiwicmVuZGVyQ29uZmlnIiwiaGlkZU9uVHJhbnNwYXJlbnQiLCJyZW5kZXJSZW5kZXJhYmxlIiwic291cmNlUmVjdEF0VGltZSIsImdldExheWVyU2l6ZSIsInRleHREYXRhIiwiZ2V0QmxlbmRNb2RlIiwiYmxlbmRNb2RlRW51bXMiLCJTbGlkZXJFZmZlY3QiLCJBbmdsZUVmZmVjdCIsIkNvbG9yRWZmZWN0IiwiUG9pbnRFZmZlY3QiLCJMYXllckluZGV4RWZmZWN0IiwiTWFza0luZGV4RWZmZWN0IiwiQ2hlY2tib3hFZmZlY3QiLCJOb1ZhbHVlRWZmZWN0IiwiRWZmZWN0c01hbmFnZXIiLCJlZmZlY3RzIiwiZWYiLCJlZmZlY3RFbGVtZW50cyIsImVmZmVjdEl0ZW0iLCJHcm91cEVmZmVjdCIsIkJhc2VFbGVtZW50IiwiRnJhbWVFbGVtZW50IiwiRm9vdGFnZUVsZW1lbnQiLCJpbWFnZUxvYWRlciIsImluaXRCYXNlRGF0YSIsIkF1ZGlvRWxlbWVudCIsIl9pc1BsYXlpbmciLCJfY2FuUGxheSIsIl9jdXJyZW50VGltZSIsIl92b2x1bWVNdWx0aXBsaWVyIiwiX3ByZXZpb3VzVm9sdW1lIiwiX3BsYWNlaG9sZGVyIiwibHYiLCJhdSIsIkJhc2VSZW5kZXJlciIsImVmZiIsImNoZWNrTWFza3MiLCJMYXllckV4cHJlc3Npb25JbnRlcmZhY2UiLCJFZmZlY3RzRXhwcmVzc2lvbkludGVyZmFjZSIsIlNoYXBlRXhwcmVzc2lvbkludGVyZmFjZSIsIlRleHRFeHByZXNzaW9uSW50ZXJmYWNlIiwiQ29tcEV4cHJlc3Npb25JbnRlcmZhY2UiLCJsYXllckludGVyZmFjZSIsIm1hc2tNYW5hZ2VyIiwicmVnaXN0ZXJNYXNrSW50ZXJmYWNlIiwiZWZmZWN0c0ludGVyZmFjZSIsImNyZWF0ZUVmZmVjdHNJbnRlcmZhY2UiLCJyZWdpc3RlckVmZmVjdHNJbnRlcmZhY2UiLCJzaGFwZUludGVyZmFjZSIsInNoYXBlc0RhdGEiLCJpdGVtc0RhdGEiLCJjb250ZW50IiwidGV4dEludGVyZmFjZSIsInNldEJsZW5kTW9kZSIsImJsZW5kTW9kZVZhbHVlIiwiYm0iLCJiYXNlRWxlbWVudCIsImxheWVyRWxlbWVudCIsImxheWVySWQiLCJlZmZlY3RzTWFuYWdlciIsImdldFR5cGUiLCJwcmVwYXJlUHJvcGVydGllcyIsImlzVmlzaWJsZSIsIl9pc1BhcmVudCIsImdldEJhc2VFbGVtZW50IiwiRm9vdGFnZUludGVyZmFjZSIsImdldEZvb3RhZ2VEYXRhIiwidGltZVJlbWFwcGVkIiwidG90YWxWb2x1bWUiLCJ2b2x1bWVWYWx1ZSIsImNoZWNrTGF5ZXJzIiwiYnVpbGRJdGVtIiwiY2hlY2tQZW5kaW5nRWxlbWVudHMiLCJjcmVhdGVJdGVtIiwibGF5ZXIiLCJjcmVhdGVJbWFnZSIsImNyZWF0ZUNvbXAiLCJjcmVhdGVTb2xpZCIsImNyZWF0ZU51bGwiLCJjcmVhdGVTaGFwZSIsImNyZWF0ZVRleHQiLCJjcmVhdGVDYW1lcmEiLCJjcmVhdGVGb290YWdlIiwiYnVpbGRBbGxJdGVtcyIsInBJbnRlcmZhY2UiLCJwcm9ncmVzc2l2ZUxvYWQiLCJidWlsZEVsZW1lbnRQYXJlbnRpbmciLCJwYXJlbnROYW1lIiwiaGllcmFyY2h5Iiwic2V0QXNQYXJlbnQiLCJzZXRIaWVyYXJjaHkiLCJhZGRQZW5kaW5nRWxlbWVudCIsInBlbmRpbmdFbGVtZW50cyIsImdldEVsZW1lbnRCeUlkIiwicGF0aFZhbHVlIiwic2V0dXBHbG9iYWxEYXRhIiwiZm9udHNDb250YWluZXIiLCJhbmltYXRpb25JdGVtIiwiY29tcFNpemUiLCJlZmZlY3RUeXBlcyIsIlRSQU5TRk9STV9FRkZFQ1QiLCJUcmFuc2Zvcm1FbGVtZW50IiwiTWFza0VsZW1lbnQiLCJtYXNrRWxlbWVudCIsInZpZXdEYXRhIiwic29saWRQYXRoIiwicmVjdCIsImV4cGFuc29yIiwiZmVNb3JwaCIsInByb3BlcnRpZXMiLCJjdXJyZW50TWFza3MiLCJtYXNrVHlwZSIsIm1hc2tSZWYiLCJnZXRTaGFwZVByb3AiLCJsYXN0UGF0aCIsImZpbHRlcklEIiwiZXhwYW4iLCJsYXN0T3BlcmF0b3IiLCJmaWx0ZXJJZCIsImxhc3RSYWRpdXMiLCJtYXNrIiwiY3JlYXRlTGF5ZXJTb2xpZFBhdGgiLCJpbnZSZWN0IiwiZHJhd1BhdGgiLCJtYXNrZWRFbGVtZW50IiwiaW5pdFRyYW5zZm9ybSIsIl9tYXRNZGYiLCJfbG9jYWxNYXRNZGYiLCJfb3BNZGYiLCJsb2NhbE1hdCIsImxvY2FsT3BhY2l0eSIsImFvIiwicmVuZGVyVHJhbnNmb3JtIiwiZmluYWxNYXQiLCJyZW5kZXJMb2NhbFRyYW5zZm9ybSIsImxvY2FsVHJhbnNmb3JtcyIsImxtYXQiLCJsb2NhbE9wIiwib3BhY2l0eSIsInNlYXJjaEVmZmVjdFRyYW5zZm9ybXMiLCJyZW5kZXJhYmxlRWZmZWN0c01hbmFnZXIiLCJ0cmFuc2Zvcm1FZmZlY3RzIiwiZ2V0RWZmZWN0cyIsImdsb2JhbFRvTG9jYWwiLCJ0cmFuc2Zvcm1zIiwicHROZXciLCJtSGVscGVyIiwiZ2V0TWFza1Byb3BlcnR5IiwiaXNGaXJzdEZyYW1lIiwiZ2V0TWFza2VsZW1lbnQiLCJwYXRoTm9kZXMiLCJwYXRoU3RyaW5nIiwicGF0aFNoYXBlVmFsdWUiLCJmaWx0ZXJzRmFjdG9yeSIsImZpbElkIiwic2tpcENvb3JkaW5hdGVzIiwiZmlsIiwiZmVDb2xvck1hdHJpeCIsImZlYXR1cmVTdXBwb3J0Iiwic3ZnTHVtYUhpZGRlbiIsIm9mZnNjcmVlbkNhbnZhcyIsInJlZ2lzdGVyZWRFZmZlY3RzJDEiLCJpZFByZWZpeCIsIlNWR0VmZmVjdHMiLCJmaWx0ZXJNYW5hZ2VyIiwiY3JlYXRlRmlsdGVyIiwiZmlsdGVycyIsIkVmZmVjdCIsImVmZmVjdCIsImNvdW50c0FzRWZmZWN0IiwicmVnaXN0ZXJFZmZlY3QkMSIsIlNWR0Jhc2VFbGVtZW50IiwiSGllcmFyY2h5RWxlbWVudCIsIlJlbmRlcmFibGVET01FbGVtZW50IiwiSUltYWdlRWxlbWVudCIsImluaXRFbGVtZW50Iiwic291cmNlUmVjdCIsIlByb2Nlc3NlZEVsZW1lbnQiLCJJU2hhcGVFbGVtZW50IiwiaW5pdFJlbmRlcmVyRWxlbWVudCIsImNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzIiwibWF0dGVFbGVtZW50IiwidHJhbnNmb3JtZWRFbGVtZW50IiwiX3NpemVDaGFuZ2VkIiwibGF5ZXJFbGVtZW50UGFyZW50IiwidGQiLCJtYXR0ZU1hc2tzIiwiZ2ciLCJ0dCIsImxuIiwiaGQiLCJjcCIsImNsaXBJZCIsImNwR3JvdXAiLCJyZW5kZXJFbGVtZW50IiwiZGVzdHJveUJhc2VFbGVtZW50IiwiY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMiLCJnZXRNYXR0ZSIsIm1hdHRlVHlwZSIsInVzZUVsZW1lbnQiLCJtYXNrZXIiLCJjcmVhdGVBbHBoYVRvTHVtaW5hbmNlRmlsdGVyIiwibWFza0dyb3VwIiwibWFza0dyb3VwZXIiLCJmZUNUciIsImZlRnVuYyIsImFscGhhUmVjdCIsInNldE1hdHRlIiwiaW5pdEhpZXJhcmNoeSIsImNoZWNrUGFyZW50aW5nIiwiY3JlYXRlQ29udGVudCIsInJlbmRlcklubmVyQ29udGVudCIsImlubmVyRWxlbSIsInByIiwiaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvIiwiYWRkU2hhcGVUb01vZGlmaWVycyIsInNoYXBlTW9kaWZpZXJzIiwiaXNTaGFwZUluQW5pbWF0ZWRNb2RpZmllcnMiLCJpc0FuaW1hdGVkV2l0aFNoYXBlIiwicmVuZGVyTW9kaWZpZXJzIiwic2VhcmNoUHJvY2Vzc2VkRWxlbWVudCIsInByb2Nlc3NlZEVsZW1lbnRzIiwiYWRkUHJvY2Vzc2VkRWxlbWVudCIsImxpbmVDYXBFbnVtIiwibGluZUpvaW5FbnVtIiwiU1ZHU2hhcGVEYXRhIiwidHJhbnNmb3JtZXJzIiwibGV2ZWwiLCJjYWNoZXMiLCJsU3RyIiwibHZsIiwiU1ZHU3R5bGVEYXRhIiwicEVsZW0iLCJtc0VsZW0iLCJEYXNoUHJvcGVydHkiLCJkYXRhUHJvcHMiLCJkYXNoU3RyIiwiZGFzaEFycmF5IiwiZGFzaG9mZnNldCIsIlNWR1N0cm9rZVN0eWxlRGF0YSIsInN0eWxlT2IiLCJTVkdGaWxsU3R5bGVEYXRhIiwiU1ZHTm9TdHlsZURhdGEiLCJHcmFkaWVudFByb3BlcnR5IiwiY0xlbmd0aCIsIl9jbWRmIiwiX29tZGYiLCJfY29sbGFwc2FibGUiLCJjaGVja0NvbGxhcHNhYmxlIiwiX2hhc09wYWNpdHkiLCJTVkdHcmFkaWVudEZpbGxTdHlsZURhdGEiLCJpbml0R3JhZGllbnREYXRhIiwiU1ZHR3JhZGllbnRTdHJva2VTdHlsZURhdGEiLCJTaGFwZUdyb3VwRGF0YSIsInByZXZWaWV3RGF0YSIsImdyIiwiU1ZHVHJhbnNmb3JtRGF0YSIsImNvbXBhcmVQb2ludHMiLCJzdG9wcyIsInNldEdyYWRpZW50RGF0YSIsInNldEdyYWRpZW50T3BhY2l0eSIsInBhdGhFbGVtZW50IiwiZ3JhZGllbnRJZCIsImdmaWxsIiwiZ2YiLCJjc3QiLCJvcGFjaXR5SWQiLCJtYXNrSWQiLCJvcEZpbGwiLCJsYyIsIm9mIiwib3N0IiwiYnVpbGRTaGFwZVN0cmluZyIsIl9vIiwic2hhcGVTdHJpbmciLCJTVkdFbGVtZW50c1JlbmRlcmVyIiwiX2lkZW50aXR5TWF0cml4IiwiX21hdHJpeEhlbHBlciIsInJlbmRlckNvbnRlbnRUcmFuc2Zvcm0iLCJzdHlsZURhdGEiLCJpdGVtRGF0YSIsInJlbmRlck5vb3AiLCJyZW5kZXJQYXRoIiwicGF0aFN0cmluZ1RyYW5zZm9ybWVkIiwicmVkcmF3IiwiaXRlcmF0aW9ucyIsImxMZW4iLCJyZW5kZXJGaWxsIiwic3R5bGVFbGVtIiwicmVuZGVyR3JhZGllbnRTdHJva2UiLCJyZW5kZXJHcmFkaWVudCIsInJlbmRlclN0cm9rZSIsImhhc09wYWNpdHkiLCJhdHRyMSIsImF0dHIyIiwiY1ZhbHVlcyIsIm9WYWx1ZXMiLCJhbmciLCJjcmVhdGVSZW5kZXJGdW5jdGlvbiIsIlNWR1NoYXBlRWxlbWVudCIsInN0eWxlc0xpc3QiLCJhbmltYXRlZENvbnRlbnRzIiwiTGV0dGVyUHJvcHMiLCJzdyIsImZjIiwiVGV4dFByb3BlcnR5IiwiX2ZyYW1lSWQiLCJrZXlzSW5kZXgiLCJjYW5SZXNpemUiLCJtaW5pbXVtRm9udFNpemUiLCJjdXJyZW50RGF0YSIsImFzY2VudCIsImJveFdpZHRoIiwiZGVmYXVsdEJveFdpZHRoIiwianVzdGlmeU9mZnNldCIsImxoIiwibGluZVdpZHRocyIsImxzIiwicHMiLCJmaWxsQ29sb3JBbmltIiwic3Ryb2tlQ29sb3JBbmltIiwic3Ryb2tlV2lkdGhBbmltIiwieU9mZnNldCIsImZpbmFsU2l6ZSIsImZpbmFsVGV4dCIsImZpbmFsTGluZUhlaWdodCIsImNvcHlEYXRhIiwic2VhcmNoUHJvcGVydHkiLCJjb21wbGV0ZVRleHREYXRhIiwiaW5pdFNlY29uZGFyeUVsZW1lbnQiLCJpZGVudGl0eU1hdHJpeCIsImJ1aWxkRXhwcmVzc2lvbkludGVyZmFjZSIsInNlYXJjaFNoYXBlcyIsImZpbHRlclVuaXF1ZVNoYXBlcyIsInRlbXBTaGFwZXMiLCJhcmVBbmltYXRlZCIsInNldFNoYXBlc0FzQW5pbWF0ZWQiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJlbGVtZW50RGF0YSIsImFkZFRvQW5pbWF0ZWRDb250ZW50cyIsImNyZWF0ZUdyb3VwRWxlbWVudCIsImNyZWF0ZVRyYW5zZm9ybUVsZW1lbnQiLCJ0cmFuc2Zvcm1Qcm9wZXJ0eSIsImNyZWF0ZVNoYXBlRWxlbWVudCIsIm93blRyYW5zZm9ybWVycyIsInNldEVsZW1lbnRTdHlsZXMiLCJyZW5kZXIiLCJjdXJyZW50VHJhbnNmb3JtIiwibW9kaWZpZXIiLCJwcm9jZXNzZWRQb3MiLCJvd25TdHlsZXMiLCJvd25Nb2RpZmllcnMiLCJyZW5kZXJTaGFwZSIsImFuaW1hdGVkQ29udGVudCIsInVwZGF0ZSIsInVwZGF0ZWQiLCJzZXRDdXJyZW50RGF0YSIsInNlYXJjaEtleWZyYW1lcyIsImdldEtleWZyYW1lVmFsdWUiLCJfZmluYWxWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsImN1cnJlbnRJbmRleCIsInRleHRLZXlzIiwiYnVpbGRGaW5hbFRleHQiLCJjaGFyYWN0ZXJzQXJyYXkiLCJzaG91bGRDb21iaW5lIiwic2hvdWxkQ29tYmluZU5leHQiLCJjdXJyZW50Q2hhcnMiLCJuZXdMaW5lRmxhZyIsImxldHRlcnMiLCJhbmNob3JHcm91cGluZyIsImN1cnJlbnRTaXplIiwiY3VycmVudFBvcyIsImN1cnJlbnRMaW5lIiwibGluZVdpZHRoIiwibWF4TGluZVdpZHRoIiwidHJhY2tpbmdPZmZzZXQiLCJjdXJyZW50SGVpZ2h0IiwiYm94SGVpZ2h0IiwibGFzdFNwYWNlSW5kZXgiLCJjdXJyZW50Q2hhciIsInVuY29sbGFwc2VkU3BhY2VzIiwiYW4iLCJhbkluZGV4ZXMiLCJhbmltYXRvckp1c3RpZnlPZmZzZXQiLCJleHRyYSIsImFuaW1hdG9yRGF0YSIsImxldHRlckRhdGEiLCJiYXNlZCIsImFuaW1hdG9ycyIsImluZGV4ZXMiLCJmaCIsImZzIiwiZmIiLCJybiIsInRvdGFsQ2hhcnMiLCJuZXdJbmQiLCJjdXJyZW50SW5kIiwibmV3RGF0YSIsImREYXRhIiwicmVjYWxjdWxhdGUiLCJjYW5SZXNpemVGb250IiwiX2NhblJlc2l6ZSIsInNldE1pbmltdW1Gb250U2l6ZSIsIl9mb250VmFsdWUiLCJUZXh0U2VsZWN0b3JQcm9wIiwiVGV4dFNlbGVjdG9yUHJvcEZhY3RvcnkiLCJfY3VycmVudFRleHRMZW5ndGgiLCJmaW5hbFMiLCJmaW5hbEUiLCJ4ZSIsIm5lIiwic20iLCJnZXRNdWx0IiwidGV4dFByb3BlcnR5IiwiZWFzZXIiLCJ0b3QiLCJzbW9vdGhuZXNzIiwidGhyZXNob2xkIiwibmV3Q2hhcnNGbGFnIiwiZGl2aXNvciIsImdldFRleHRTZWxlY3RvclByb3AiLCJUZXh0QW5pbWF0b3JEYXRhUHJvcGVydHkiLCJhbmltYXRvclByb3BzIiwiZGVmYXVsdERhdGEiLCJ0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcyIsIlRleHRBbmltYXRvclByb3BlcnR5IiwicmVuZGVyVHlwZSIsIl9oYXNNYXNrZWRQYXRoIiwiX3RleHREYXRhIiwiX3JlbmRlclR5cGUiLCJfZWxlbSIsIl9hbmltYXRvcnNEYXRhIiwiX3BhdGhEYXRhIiwiX21vcmVPcHRpb25zIiwiYWxpZ25tZW50IiwicmVuZGVyZWRMZXR0ZXJzIiwibGV0dGVyc0NoYW5nZWRGbGFnIiwiSVRleHRFbGVtZW50Iiwic2VhcmNoUHJvcGVydGllcyIsImdldE1lYXN1cmVzIiwieFBvcyIsInlQb3MiLCJwYXRoSW5mbyIsImN1cnJlbnRMZW5ndGgiLCJjdXJyZW50UG9pbnQiLCJwb2ludEluZCIsInNlZ21lbnRJbmQiLCJ0YW5BbmdsZSIsIm1hdHJpeEhlbHBlciIsInJlbmRlcmVkTGV0dGVyc0NvdW50IiwidExlbmd0aCIsInBpIiwibGV0dGVyVmFsdWUiLCJ5T2ZmIiwiZmlyc3RMaW5lIiwib2ZmZiIsInhQYXRoUG9zIiwieVBhdGhQb3MiLCJlbGVtT3BhY2l0eSIsImxldHRlclN3IiwibGV0dGVyU2MiLCJsZXR0ZXJGYyIsImxldHRlck8iLCJpbml0UGF0aFBvcyIsImluaXRTZWdtZW50SW5kIiwiaW5pdFBvaW50SW5kIiwibGV0dGVyTSIsImxldHRlclAiLCJkZWZhdWx0UHJvcHNBcnJheSIsImFuaW1hdG9yRmlyc3RDaGFyT2Zmc2V0IiwianVzdGlmeU9mZnNldE11bHQiLCJpc05ld0xpbmUiLCJhbmltYXRvck9mZnNldCIsImF0YW4iLCJ0ZXh0QW5pbWF0b3IiLCJjcmVhdGVQYXRoU2hhcGUiLCJzaGFwZVN0ciIsIl9mb250U2l6ZSIsImFwcGx5VGV4dFByb3BlcnRpZXNUb01hdHJpeCIsImxpbmVOdW1iZXIiLCJidWlsZENvbG9yIiwiY29sb3JEYXRhIiwiZW1wdHlQcm9wIiwidmFsaWRhdGVUZXh0IiwiYnVpbGROZXdUZXh0IiwiZW1wdHlTaGFwZURhdGEiLCJTVkdUZXh0TG90dGllRWxlbWVudCIsInRleHRTcGFucyIsIklTb2xpZEVsZW1lbnQiLCJOdWxsRWxlbWVudCIsIlNWR1JlbmRlcmVyQmFzZSIsIklDb21wRWxlbWVudCIsIlNWR0NvbXBFbGVtZW50Iiwic3VwcG9ydHMzZCIsIlNWR1JlbmRlcmVyIiwic3ZnRWxlbWVudCIsImFyaWFMYWJlbCIsInRpdGxlIiwidGl0bGVFbGVtZW50IiwidGl0bGVJZCIsImRlc2NyaXB0aW9uIiwiZGVzY0VsZW1lbnQiLCJkZXNjSWQiLCJwcmVzZXJ2ZUFzcGVjdFJhdGlvIiwiY29udGVudFZpc2liaWxpdHkiLCJ2aWV3Qm94T25seSIsInZpZXdCb3hTaXplIiwiZm9jdXNhYmxlIiwiZmlsdGVyU2l6ZSIsInJ1bkV4cHJlc3Npb25zIiwiZGVzdHJveWVkIiwiU2hhcGVUcmFuc2Zvcm1NYW5hZ2VyIiwic2VxdWVuY2VzIiwic2VxdWVuY2VMaXN0IiwidHJhbnNmb3JtX2tleV9jb3VudCIsInNpbmdsZVNoYXBlIiwidGV4dENvbnRhaW5lciIsImJ1aWxkVGV4dENvbnRlbnRzIiwidGV4dEFycmF5IiwidGV4dENvbnRlbnRzIiwiY3VycmVudFRleHRDb250ZW50IiwiZnJvbUNoYXJDb2RlIiwiYnVpbGRTaGFwZURhdGEiLCJzaGFwZUl0ZW0iLCJ0U3BhbiIsInVzZXNHbHlwaHMiLCJjYWNoZWRTcGFuc0xlbmd0aCIsInNwYW4iLCJjaGlsZFNwYW4iLCJnbHlwaCIsImdseXBoRWxlbWVudCIsIl9kZWJ1ZyIsInRFbGVtZW50IiwianVzdGlmeSIsInRleHRCb3giLCJiYm94IiwicmVuZGVyZWRMZXR0ZXIiLCJ0ZXh0U3BhbiIsImZpbmRJbmRleEJ5SW5kIiwiYXBwZW5kRWxlbWVudEluUG9zIiwiZWxlbWVudEluZGV4IiwidHAiLCJtYXR0ZU1hc2siLCJuZXh0RWxlbWVudCIsImluc2VydEJlZm9yZSIsInNldEVsZW1lbnRzIiwiZ2V0RWxlbWVudHMiLCJkZXN0cm95RWxlbWVudHMiLCJhZGRUcmFuc2Zvcm1TZXF1ZW5jZSIsInNlcXVlbmNlIiwicHJvY2Vzc1NlcXVlbmNlIiwicHJvY2Vzc1NlcXVlbmNlcyIsImdldE5ld0tleSIsImx1bWFMb2FkZXIiLCJsdW1hQnVmZmVyIiwibHVtYUJ1ZmZlckN0eCIsInN2ZyIsImxvYWRMdW1hIiwiX3N2ZyIsImNyZWF0ZUNhbnZhcyIsImxvYWRMdW1hQ2FudmFzIiwiZ2V0THVtYUNhbnZhcyIsInJlZ2lzdGVyZWRFZmZlY3RzIiwiQ1ZFZmZlY3RzIiwicmVnaXN0ZXJFZmZlY3QiLCJDVk1hc2tFbGVtZW50IiwiaGFzTWFza3MiLCJDVkJhc2VFbGVtZW50IiwiY2FudmFzQ29udGV4dCIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsImJlemllckN1cnZlVG8iLCJzYXZlIiwiY2xpcCIsIm9wZXJhdGlvbnNNYXAiLCJDVlNoYXBlRGF0YSIsInRyYW5zZm9ybXNNYW5hZ2VyIiwic3R5bGVkU2hhcGVzIiwic3R5bGVkU2hhcGUiLCJ0ck5vZGVzIiwiQ1ZTaGFwZUVsZW1lbnQiLCJDVlRleHRFbGVtZW50Iiwic3Ryb2tlIiwiZmlsbCIsImN1cnJlbnRSZW5kZXIiLCJzV2lkdGgiLCJmVmFsdWUiLCJDVkltYWdlRWxlbWVudCIsIkNWU29saWRFbGVtZW50IiwiQ2FudmFzUmVuZGVyZXJCYXNlIiwiQ2FudmFzQ29udGV4dCIsInN0cm9rZVN0eWxlIiwibGluZUNhcCIsIkNWQ29udGV4dERhdGEiLCJzdGFjayIsImNBcnJQb3MiLCJjVHIiLCJuYXRpdmVDb250ZXh0IiwidHJhbnNmb3JtTWF0IiwiY3VycmVudE9wYWNpdHkiLCJjdXJyZW50RmlsbFN0eWxlIiwiYXBwbGllZEZpbGxTdHlsZSIsImN1cnJlbnRTdHJva2VTdHlsZSIsImFwcGxpZWRTdHJva2VTdHlsZSIsImN1cnJlbnRMaW5lV2lkdGgiLCJhcHBsaWVkTGluZVdpZHRoIiwiY3VycmVudExpbmVDYXAiLCJhcHBsaWVkTGluZUNhcCIsImN1cnJlbnRMaW5lSm9pbiIsImFwcGxpZWRMaW5lSm9pbiIsImFwcGxpZWRNaXRlckxpbWl0IiwiY3VycmVudE1pdGVyTGltaXQiLCJDVkNvbXBFbGVtZW50IiwiQ2FudmFzUmVuZGVyZXIiLCJjbGVhckNhbnZhcyIsImNvbnRleHQiLCJkcHIiLCJkZXZpY2VQaXhlbFJhdGlvIiwiY3VycmVudEdsb2JhbEFscGhhIiwiY29udGV4dERhdGEiLCJjdHhUcmFuc2Zvcm0iLCJjdHhPcGFjaXR5IiwiY3R4RmlsbFN0eWxlIiwiY3R4U3Ryb2tlU3R5bGUiLCJjdHhMaW5lV2lkdGgiLCJjdHhMaW5lQ2FwIiwiY3R4TGluZUpvaW4iLCJjdHhNaXRlckxpbWl0IiwiY3R4RmlsbCIsImN0eEZpbGxSZWN0IiwiY3R4U3Ryb2tlIiwiSEJhc2VFbGVtZW50IiwiSFNvbGlkRWxlbWVudCIsIkhTaGFwZUVsZW1lbnQiLCJzaGFwZXNDb250YWluZXIiLCJjdXJyZW50QkJveCIsIkhUZXh0RWxlbWVudCIsInRleHRQYXRocyIsImlzTWFza2VkIiwiSENhbWVyYUVsZW1lbnQiLCJwZSIsIl9wcmV2TWF0IiwiSEltYWdlRWxlbWVudCIsIkh5YnJpZFJlbmRlcmVyQmFzZSIsInRocmVlREVsZW1lbnRzIiwiY2FtZXJhIiwiSENvbXBFbGVtZW50IiwiSHlicmlkUmVuZGVyZXIiLCJjcmVhdGVFbGVtZW50cyIsImJ1ZmZlcnMiLCJidWZmZXJDYW52YXMiLCJidWZmZXJDYW52YXMyIiwiX2lzUHJveHkiLCJ0cmFuc2Zvcm1DYW52YXMiLCJibGVuZE1vZGUiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJoaWRlRWxlbWVudCIsInNob3dFbGVtZW50IiwiY2xlYXJSZWN0IiwicHJlcGFyZUxheWVyIiwiYnVmZmVyQ3R4IiwiZHJhd0ltYWdlIiwiZ2V0VHJhbnNmb3JtIiwiZXhpdExheWVyIiwiYnVmZmVyIiwiZm9yY2VSZWFsU3RhY2siLCJyZXN0b3JlIiwidHJhbnNmb3JtSGVscGVyIiwiZGFzaFJlc2V0dGVyIiwicHJlVHJhbnNmb3JtcyIsImNvIiwid2kiLCJkYSIsImFkZFRyYW5zZm9ybVRvU3R5bGVMaXN0IiwicmVtb3ZlVHJhbnNmb3JtRnJvbVN0eWxlTGlzdCIsImNsb3NlU3R5bGVzIiwic2hvdWxkUmVuZGVyIiwib3duVHJhbnNmb3JtcyIsIl9zaG91bGRSZW5kZXIiLCJyZW5kZXJTaGFwZVRyYW5zZm9ybSIsInBhcmVudFRyYW5zZm9ybSIsImdyb3VwVHJhbnNmb3JtIiwiZHJhd0xheWVyIiwiY3VycmVudFN0eWxlIiwiY29PcCIsImdyZCIsInNldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJjbG9zZVBhdGgiLCJpc01haW4iLCJyZW5kZXJHcmFkaWVudEZpbGwiLCJyZW5kZXJTdHlsZWRTaGFwZSIsInNoYXBlTm9kZXMiLCJncm91cFRyYW5zZm9ybU1hdCIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiY3JlYXRlUmFkaWFsR3JhZGllbnQiLCJhZGRDb2xvclN0b3AiLCJoYXNGaWxsIiwiaGFzU3Ryb2tlIiwiY29tbWFuZHMiLCJwYXRoQXJyIiwiY29tbWFuZHNDb3VudGVyIiwibGFzdEZpbGwiLCJsYXN0U3Ryb2tlIiwibGFzdFN0cm9rZVciLCJ3aWR0aENyb3AiLCJoZWlnaHRDcm9wIiwiaW1nVyIsImltZ0giLCJpbWdSZWwiLCJjYW52YXNSZWwiLCJwYXIiLCJnbG9iYWxBbHBoYSIsInJ1bGUiLCJhY3Rpb25GbGFnIiwiY29udGFpbmVyU3R5bGUiLCJtb3pUcmFuc2Zvcm1PcmlnaW4iLCJzZXRDb250ZXh0IiwiaXNEYXNoZWQiLCJlbGVtZW50V2lkdGgiLCJlbGVtZW50SGVpZ2h0IiwiZWxlbWVudFJlbCIsImFuaW1hdGlvblJlbCIsIm9mZnNldEhlaWdodCIsImZpbGxUeXBlIiwiZHVwbGljYXRlIiwibmV3TGVuZ3RoIiwiZm9yY2VSZXN0b3JlIiwiY3VycmVudENvbnRleHQiLCJwcmV2U3RhY2siLCJzYXZlT25OYXRpdmVGbGFnIiwiY3VycmVudFN0YWNrIiwibmV3U3RhY2siLCJzZXRPcGFjaXR5IiwidHJQcm9wcyIsImNoZWNrQmxlbmRNb2RlIiwidGciLCJ0cmFuc2Zvcm1lZEVsZW1lbnRTdHlsZSIsIm1hdHJpeFZhbHVlIiwid2Via2l0VHJhbnNmb3JtIiwiYWRkRWZmZWN0cyIsImJhY2tncm91bmRDb2xvciIsIl9yZW5kZXJTaGFwZUZyYW1lIiwic2hhcGVDb250IiwiZ2V0VHJhbnNmb3JtZWRQb2ludCIsImNhbGN1bGF0ZVNoYXBlQm91bmRpbmdCb3giLCJpdGVtIiwidlBvaW50Iiwib1BvaW50IiwibmV4dElQb2ludCIsIm5leHRWUG9pbnQiLCJjaGVja0JvdW5kcyIsImdldEJvdW5kc09mQ3VydmUiLCJzaGFwZUJvdW5kaW5nQm94IiwieE1heCIsInlNYXgiLCJ0ZW1wQm91bmRpbmdCb3giLCJiMmFjIiwiY2FsY3VsYXRlRiIsImNhbGN1bGF0ZUJvdW5kaW5nQm94IiwiZXhwYW5kU3Ryb2tlQm91bmRpbmdCb3giLCJ3aWR0aFByb3BlcnR5Iiwia2Z3IiwiY3VycmVudEJveENvbnRhaW5zIiwiY2hhbmdlZCIsInNoYXBlU3R5bGUiLCJzaGFwZVRyYW5zZm9ybSIsImNvbXBXIiwiY29tcEgiLCJpbm5lckVsZW1TdHlsZSIsInRleHRDb2xvciIsInN0cm9rZVdpZHRoIiwibGluZUhlaWdodCIsInRQYXJlbnQiLCJ0Q29udCIsImNoaWxkcmVuIiwidENvbnRTdHlsZSIsInRDb250VHJhbnNsYXRpb24iLCJ0U3R5bGUiLCJ0U3BhblRyYW5zbGF0aW9uIiwic3ZnU3R5bGUiLCJ0cmFuc2xhdGlvbiIsInRleHRQYXRoIiwibWFyZ2luIiwic3ZnVHJhbnNmb3JtIiwic2V0dXAiLCJwZXJzcGVjdGl2ZVN0eWxlIiwicGVyc3BlY3RpdmVFbGVtIiwicGVyc3BlY3RpdmUiLCJ3ZWJraXRQZXJzcGVjdGl2ZSIsIm1UcmFuc2YiLCJkaWZmVmVjdG9yIiwibWFnIiwibG9va0RpciIsImxvb2tMZW5ndGhPblhaIiwibVJvdGF0aW9uWCIsIm1Sb3RhdGlvblkiLCJoYXNNYXRyaXhDaGFuZ2VkIiwibWF0VmFsdWUiLCJJbWFnZSIsImltYWdlRWxlbSIsIm5ld0RPTUVsZW1lbnQiLCJkZGQiLCJhZGRUbzNkQ29udGFpbmVyIiwibmV4dERPTUVsZW1lbnQiLCJuZXh0TGF5ZXIiLCJnZXRUaHJlZURDb250YWluZXJCeVBvcyIsInN0YXJ0UG9zIiwiZW5kUG9zIiwiY3JlYXRlVGhyZWVEQ29udGFpbmVyIiwidGhyZWVEQ29udGFpbmVyRGF0YSIsImJ1aWxkM2RDb250YWluZXJzIiwibGFzdFRocmVlRENvbnRhaW5lckRhdGEiLCJjdXJyZW50Q29udGFpbmVyIiwicmVzaXplckVsZW0iLCJvdmVyZmxvdyIsImNXaWR0aCIsImNIZWlnaHQiLCJmbG9hdGluZ0NvbnRhaW5lciIsIl9jcmVhdGVCYXNlQ29udGFpbmVyRWxlbWVudHMiLCJfdGhpc0xheWVyRnVuY3Rpb24iLCJwaXhlbEFzcGVjdCIsImZyYW1lRHVyYXRpb24iLCJkaXNwbGF5U3RhcnRUaW1lIiwibnVtTGF5ZXJzIiwiX3R5cGVvZiQyIiwic2VlZFJhbmRvbSIsIm5vZGVjcnlwdG8iLCJybmduYW1lIiwic3RhcnRkZW5vbSIsInNpZ25pZmljYW5jZSIsIkFSQzQiLCJrZXlsZW4iLCJjb3B5IiwiZmxhdHRlbiIsInR5cCIsIm1peGtleSIsInNlZWQiLCJzbWVhciIsInN0cmluZ3NlZWQiLCJ0b3N0cmluZyIsInNob3J0c2VlZCIsImVudHJvcHkiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJicm93c2VyIiwicGx1Z2lucyIsInNjcmVlbiIsImF1dG9zZWVkIiwiYXJjNCIsInBybmciLCJpbnQzMiIsInF1aWNrIiwicGFzcyIsImlzX21hdGhfY2FsbCIsInN0YXRlIiwiaW5pdGlhbGl6ZSQyIiwicHJvcFR5cGVzIiwiU0hBUEUiLCJfdHlwZW9mJDEiLCJFeHByZXNzaW9uTWFuYWdlciIsImZldGNoIiwiZnJhbWVzIiwiX2xvdHRpZUdsb2JhbCIsIiRibV9pc0luc3RhbmNlT2ZBcnJheSIsImlzTnVtZXJhYmxlIiwidE9mViIsIiRibV9uZWciLCJ0T2ZBIiwibGVuQSIsInJldEFyciIsImVhc2VJbkJleiIsImVhc2VPdXRCZXoiLCJlYXNlSW5PdXRCZXoiLCJ0T2ZCIiwibGVuQiIsInN1YiIsIm11bCIsIm1vZCIsIiRibV9zdW0iLCIkYm1fc3ViIiwiJGJtX211bCIsIiRibV9kaXYiLCIkYm1fbW9kIiwiY2xhbXAiLCJyYWRpYW5zVG9EZWdyZWVzIiwicmFkaWFuc190b19kZWdyZWVzIiwiZGVncmVlc1RvUmFkaWFucyIsImRlZ3JlZXNfdG9fcmFkaWFucyIsImhlbHBlckxlbmd0aEFycmF5IiwiYXJyMSIsImFycjIiLCJub3JtYWxpemUiLCJ2ZWMiLCJyZ2JUb0hzbCIsImh1ZTJyZ2IiLCJoc2xUb1JnYiIsImxpbmVhciIsInRNaW4iLCJ0TWF4IiwidmFsdWUxIiwidmFsdWUyIiwiX3RNaW4iLCJybmQiLCJjcmVhdGVQYXRoIiwiaW5UYW5nZW50cyIsIm91dFRhbmdlbnRzIiwiaW5WZXJ0ZXhQb2ludCIsIm91dFZlcnRleFBvaW50IiwiYXJyUGxhY2Vob2xkZXIiLCJpbml0aWF0ZUV4cHJlc3Npb24iLCJwcm9wZXJ0eSIsIm5vT3AiLCJfdmFsdWUiLCJuZWVkc1ZlbG9jaXR5IiwiX25lZWRzUmFuZG9tIiwiZWxlbVR5cGUiLCIkYm1fdHJhbnNmb3JtIiwidGhpc1Byb3BlcnR5IiwidmFsdWVBdFRpbWUiLCJpblBvaW50Iiwib3V0UG9pbnQiLCJsb29wSW4iLCJsb29wX2luIiwibG9vcE91dCIsImxvb3Bfb3V0Iiwic21vb3RoIiwidG9Xb3JsZCIsImZyb21Xb3JsZCIsImZyb21Db21wIiwidG9Db21wIiwiZnJvbUNvbXBUb1N1cmZhY2UiLCJyb3RhdGlvbiIsImFuY2hvclBvaW50IiwidGhpc0xheWVyIiwidGhpc0NvbXAiLCJ2ZWxvY2l0eUF0VGltZSIsInNjb3BlZF9ibV9ydCIsImV4cHJlc3Npb25fZnVuY3Rpb24iLCJldmFsIiwibnVtS2V5cyIsImFjdGl2ZSIsIndpZ2dsZSIsImZyZXEiLCJhbXAiLCJpV2lnZ2xlIiwibGVuV2lnZ2xlIiwiYWRkZWRBbXBzIiwicGVyaW9kcyIsImxvb3BJbkR1cmF0aW9uIiwibG9vcE91dER1cmF0aW9uIiwiZ2V0VmVsb2NpdHlBdFRpbWUiLCJ2ZWxvY2l0eSIsInRleHRJbmRleCIsInRleHRUb3RhbCIsInNlbGVjdG9yVmFsdWUiLCJsb29rQXQiLCJlbGVtMSIsImVsZW0yIiwiZlZlYyIsInBpdGNoIiwiZWFzZU91dCIsInZhbDEiLCJ2YWwyIiwiYXBwbHlFYXNlIiwiZWFzZUluIiwiZWFzZSIsImlLZXkiLCJsZW5LZXkiLCJuZWFyZXN0S2V5Iiwib2JLZXkiLCJmcmFtZXNUb1RpbWUiLCJmcHMiLCJ0aW1lVG9GcmFtZXMiLCJzZWVkcmFuZG9tIiwicmFuZFNlZWQiLCJwb3N0ZXJpemVUaW1lIiwiZnJhbWVzUGVyU2Vjb25kIiwiaGFzUGFyZW50IiwiZXhlY3V0ZUV4cHJlc3Npb24iLCJmcmFtZUV4cHJlc3Npb25JZCIsIl9fcHJldmVudERlYWRDb2RlUmVtb3ZhbCIsIkV4cHJlc3Npb25zIiwic3RhY2tDb3VudCIsInJlZ2lzdGVycyIsInB1c2hFeHByZXNzaW9uIiwicG9wRXhwcmVzc2lvbiIsInJlbGVhc2VJbnN0YW5jZXMiLCJyZWdpc3RlckV4cHJlc3Npb25Qcm9wZXJ0eSIsImV4cHJlc3Npb24iLCJNYXNrTWFuYWdlckludGVyZmFjZSIsIk1hc2tJbnRlcmZhY2UiLCJfbWFzayIsIl9kYXRhIiwiX21hc2tzSW50ZXJmYWNlcyIsIkV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSIsImRlZmF1bHRVbmlkaW1lbnNpb25hbFZhbHVlIiwiZGVmYXVsdE11bHRpZGltZW5zaW9uYWxWYWx1ZSIsImNvbXBsZXRlUHJvcGVydHkiLCJleHByZXNzaW9uVmFsdWUiLCJ2YWx1ZVByb3AiLCJzcGVlZEF0VGltZSIsImdldFNwZWVkQXRUaW1lIiwicHJvcGVydHlHcm91cCIsImRlZmF1bHRHZXR0ZXIiLCJVbmlkaW1lbnNpb25hbFByb3BlcnR5SW50ZXJmYWNlIiwiYXJyVmFsdWUiLCJNdWx0aWRpbWVuc2lvbmFsUHJvcGVydHlJbnRlcmZhY2UiLCJUcmFuc2Zvcm1FeHByZXNzaW9uSW50ZXJmYWNlIiwiX3RoaXNGdW5jdGlvbiIsInhSb3RhdGlvbiIsInlSb3RhdGlvbiIsInhQb3NpdGlvbiIsInlQb3NpdGlvbiIsInpQb3NpdGlvbiIsIl9weCIsIl9weSIsIl9weiIsIl90cmFuc2Zvcm1GYWN0b3J5IiwiZ2V0TWF0cml4IiwidG9Xb3JsZE1hdCIsInRvV29ybGRWZWMiLCJhcHBseVBvaW50IiwiZnJvbVdvcmxkVmVjIiwiaW52ZXJ0UG9pbnQiLCJzYW1wbGVJbWFnZSIsInRyYW5zZm9ybUludGVyZmFjZSIsImFuY2hvclBvaW50RGVzY3JpcHRvciIsImFuY2hvcl9wb2ludCIsInN0YXJ0VGltZSIsIl9uYW1lIiwicHJvcGVydHlHcm91cEZhY3RvcnkiLCJpbnRlcmZhY2VGdW5jdGlvbiIsInBhcmVudFByb3BlcnR5R3JvdXAiLCJQcm9wZXJ0eUludGVyZmFjZSIsInByb3BlcnR5TmFtZSIsImNyZWF0ZUdyb3VwSW50ZXJmYWNlIiwiZ3JvdXBJbnRlcmZhY2UiLCJtbiIsIl9wcm9wZXJ0eUdyb3VwIiwiY3JlYXRlVmFsdWVJbnRlcmZhY2UiLCJudW1Qcm9wZXJ0aWVzIiwibnAiLCJlbmFibGVkIiwiZXhwcmVzc2lvblByb3BlcnR5Iiwic2V0R3JvdXBQcm9wZXJ0eSIsImVmZmVjdHNEYXRhIiwiU2hhcGVQYXRoSW50ZXJmYWNlIiwidmlldyIsInByb3BlcnR5SW5kZXgiLCJpdGVyYXRlRWxlbWVudHMiLCJncm91cEludGVyZmFjZUZhY3RvcnkiLCJmaWxsSW50ZXJmYWNlRmFjdG9yeSIsInN0cm9rZUludGVyZmFjZUZhY3RvcnkiLCJ0cmltSW50ZXJmYWNlRmFjdG9yeSIsImVsbGlwc2VJbnRlcmZhY2VGYWN0b3J5Iiwic3RhckludGVyZmFjZUZhY3RvcnkiLCJyZWN0SW50ZXJmYWNlRmFjdG9yeSIsInJvdW5kZWRJbnRlcmZhY2VGYWN0b3J5IiwicmVwZWF0ZXJJbnRlcmZhY2VGYWN0b3J5IiwiZ3JhZGllbnRGaWxsSW50ZXJmYWNlRmFjdG9yeSIsImludGVyZmFjZXMiLCJ0cmFuc2Zvcm1JbnRlcmZhY2VGYWN0b3J5IiwiY2l4IiwiY29udGVudHNJbnRlcmZhY2VGYWN0b3J5Iiwic3RhcnRQb2ludCIsImVuZFBvaW50IiwiX2Rhc2hQcm9wZXJ0eUdyb3VwIiwiZGFzaE9iIiwiYWRkUHJvcGVydHlUb0Rhc2hPYiIsImRhc2giLCJzdGFydCIsInNrZXdBeGlzIiwib3V0ZXJSYWRpdXMiLCJvdXRlclJvdW5kbmVzcyIsImlubmVyUm91bmRuZXNzIiwiaW5uZXJSYWRpdXMiLCJfaW50ZXJmYWNlRnVuY3Rpb24iLCJfc291cmNlVGV4dCIsInNvdXJjZVRleHQiLCJzdHJpbmdWYWx1ZSIsImZpbGxDb2xvciIsImRhdGFJbnRlcmZhY2VGYWN0b3J5Iiwib3V0bGluZUludGVyZmFjZSIsImN1cnJlbnRQcm9wZXJ0eU5hbWUiLCJjdXJyZW50UHJvcGVydHkiLCJwcm9wZXJ0eU5hbWVJbmRleCIsIm91dGxpbmVJbnRlcmZhY2VGYWN0b3J5IiwiZGF0YUludGVyZmFjZSIsImZvb3RhZ2UiLCJnZXRJbnRlcmZhY2UiLCJleHByZXNzaW9uSGVscGVycyIsInNlYXJjaEV4cHJlc3Npb25zIiwic3BlZWQiLCJfY2FjaGluZ0F0VGltZSIsImdldFN0YXRpY1ZhbHVlQXRUaW1lIiwiYWRkUHJvcGVydHlEZWNvcmF0b3IiLCJkdXJhdGlvbkZsYWciLCJjeWNsZUR1cmF0aW9uIiwiZmlyc3RLZXlGcmFtZSIsInJldCIsImxhc3RLZXlGcmFtZSIsImluaXRWIiwiZW5kViIsImN1cnJlbnQiLCJyZXBlYXRzIiwibGFzdFZhbHVlIiwibmV4dExhc3RWYWx1ZSIsImZpcnN0VmFsdWUiLCJuZXh0Rmlyc3RWYWx1ZSIsInNhbXBsZXMiLCJzYW1wbGVWYWx1ZSIsInNhbXBsZUZyZXF1ZW5jeSIsImdldFRyYW5zZm9ybVZhbHVlQXRUaW1lIiwiX3RyYW5zZm9ybUNhY2hpbmdBdFRpbWUiLCJhbmNob3IiLCJyb3RhdGlvbloiLCJyb3RhdGlvblkiLCJyb3RhdGlvblgiLCJvcmllbnRhdGlvbiIsInBvc2l0aW9uWCIsInBvc2l0aW9uWSIsInBvc2l0aW9uWiIsImdldFRyYW5zZm9ybVN0YXRpY1ZhbHVlQXRUaW1lIiwicHJvcGVydHlHZXRQcm9wIiwiU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24iLCJnZXRDb25zdHJ1Y3RvckZ1bmN0aW9uIiwiS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24iLCJnZXRLZXlmcmFtZWRDb25zdHJ1Y3RvckZ1bmN0aW9uIiwiU2hhcGVFeHByZXNzaW9ucyIsImlzQ2xvc2VkIiwicG9pbnRPblBhdGgiLCJfc2VnbWVudHNMZW5ndGgiLCJhY2N1bXVsYXRlZExlbmd0aCIsImluaXRJbmRleCIsImVuZEluZGV4IiwidmVjdG9yT25QYXRoIiwidmVjdG9yVHlwZSIsInhMZW5ndGgiLCJ5TGVuZ3RoIiwibWFnbml0dWRlIiwidGFuZ2VudE9uUGF0aCIsIm5vcm1hbE9uUGF0aCIsInNoYXBlVmFsdWUiLCJsYXN0VGltZSIsInByb3BlcnR5R2V0U2hhcGVQcm9wIiwidHJpbXMiLCJpbml0aWFsaXplJDEiLCJhZGREZWNvcmF0b3IiLCJnZXRFeHByZXNzaW9uVmFsdWUiLCJjYWxjdWxhdGVFeHByZXNzaW9uIiwiaXNLZXlmcmFtZWQiLCJoYXNFeHByZXNzaW9ucyIsImluaXRpYWxpemUiLCJTVkdDb21wb3NhYmxlRWZmZWN0IiwiY3JlYXRlTWVyZ2VOb2RlIiwicmVzdWx0SWQiLCJpbnMiLCJmZU1lcmdlTm9kZSIsImZlTWVyZ2UiLCJsaW5lYXJGaWx0ZXJWYWx1ZSIsIlNWR1RpbnRGaWx0ZXIiLCJsaW5lYXJGaWx0ZXIiLCJtYXRyaXhGaWx0ZXIiLCJTVkdGaWxsRmlsdGVyIiwiU1ZHU3Ryb2tlRWZmZWN0IiwiaW5pdGlhbGl6ZWQiLCJTVkdUcml0b25lRmlsdGVyIiwiZmVDb21wb25lbnRUcmFuc2ZlciIsImZlRnVuY1IiLCJmZUZ1bmNHIiwiZmVGdW5jQiIsIlNWR1Byb0xldmVsc0ZpbHRlciIsImNyZWF0ZUZlRnVuYyIsImZlRnVuY0EiLCJmZUZ1bmNSQ29tcG9zZWQiLCJmZUZ1bmNHQ29tcG9zZWQiLCJmZUZ1bmNCQ29tcG9zZWQiLCJTVkdEcm9wU2hhZG93RWZmZWN0IiwiZ2xvYmFsRmlsdGVyU2l6ZSIsImZlR2F1c3NpYW5CbHVyIiwiZmVPZmZzZXQiLCJmZUZsb29kIiwiZmVDb21wb3NpdGUiLCJjb2xvckJsYWNrIiwiY29sb3JXaGl0ZSIsImdyb3VwUGF0aCIsImVsZW1DaGlsZHJlbiIsInJlbW92ZUF0dHJpYnV0ZSIsInBhdGhNYXNrZXIiLCJkYXNoYXJyYXlWYWx1ZSIsImdldFRvdGFsTGVuZ3RoIiwibGluZUxlbmd0aCIsInVuaXRzIiwiY29sb3IxIiwiY29sb3IyIiwiY29sb3IzIiwidGFibGVSIiwidGFibGVHIiwidGFibGVCIiwiZ2V0VGFibGVWYWx1ZSIsImlucHV0QmxhY2siLCJpbnB1dFdoaXRlIiwiZ2FtbWEiLCJvdXRwdXRCbGFjayIsIm91dHB1dFdoaXRlIiwiY29sb3JWYWx1ZSIsInRhYmxlIiwib3V0cHV0RGVsdGEiLCJpbnB1dERlbHRhIiwiY29sIiwiX3N2Z01hdHRlU3ltYm9scyIsIlNWR01hdHRlM0VmZmVjdCIsImZpbHRlckVsZW0iLCJTVkdHYXVzc2lhbkJsdXJFZmZlY3QiLCJUcmFuc2Zvcm1FZmZlY3QiLCJTVkdUcmFuc2Zvcm1FZmZlY3QiLCJDVlRyYW5zZm9ybUVmZmVjdCIsImZpbmRTeW1ib2wiLCJyZXBsYWNlSW5QYXJlbnQiLCJzeW1ib2xJZCIsIm5leHRDaGlsZCIsInVzZUVsZW0iLCJzZXRFbGVtZW50QXNNYXNrIiwic3ltYm9sIiwic2lnbWEiLCJkaW1lbnNpb25zIiwic2lnbWFYIiwic2lnbWFZIiwiZWRnZU1vZGUiLCJmb3JjZUZyYW1lIiwiaXNVbmlmb3JtU2NhbGUiLCJzY2FsZUhlaWdodCIsInNjYWxlV2lkdGgiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYmlnaW50IiwiYm9vbCIsImZ1bmMiLCJudW1iZXIiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudFR5cGUiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJfZXh0ZW5kczMiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX2NsYXNzQ2FsbENoZWNrMyIsIl9jcmVhdGVDbGFzczMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMiLCJfaW5oZXJpdHMzIiwiX3JlYWN0MiIsIl9wcm9wVHlwZXMyIiwiX2xvdHRpZVdlYjIiLCJMb3R0aWUiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3JlZiIsIl90ZW1wIiwiX3JldCIsIl9sZW4iLCJfa2V5IiwiaGFuZGxlQ2xpY2tUb1BhdXNlIiwiX3Byb3BzIiwiZXZlbnRMaXN0ZW5lcnMiLCJyZWdpc3RlckV2ZW50cyIsIm5leHRQcm9wcyIsImRlUmVnaXN0ZXJFdmVudHMiLCJpc1N0b3BwZWQiLCJldmVudExpc3RlbmVyIiwiX3RoaXMzIiwiX3RoaXM0IiwiX3Byb3BzMiIsImFyaWFSb2xlIiwiaXNDbGlja1RvUGF1c2VEaXNhYmxlZCIsImdldFNpemUiLCJpbml0aWFsIiwibG90dGllU3R5bGVzIiwib3V0bGluZSIsIm9uQ2xpY2tIYW5kbGVyIiwicmVmIiwib25DbGljayIsInJvbGUiLCJ0YWJJbmRleCIsIkNvbXBvbmVudCIsImRlZmF1bHRQcm9wcyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJhbWRPIiwiZ2V0dGVyIiwiZGVmaW5pdGlvbiIsInRvU3RyaW5nVGFnIiwibWVtb2l6ZSIsInJlYWN0UHJvcHNSZWdleCIsImlzUHJvcFZhbGlkIiwiU3R5bGVTaGVldCIsIl9pbnNlcnRUYWciLCJiZWZvcmUiLCJ0YWdzIiwiaW5zZXJ0aW9uUG9pbnQiLCJuZXh0U2libGluZyIsInByZXBlbmQiLCJmaXJzdENoaWxkIiwiaXNTcGVlZHkiLCJzcGVlZHkiLCJjdHIiLCJub25jZSIsIl9wcm90byIsImh5ZHJhdGUiLCJpbnNlcnQiLCJjcmVhdGVUZXh0Tm9kZSIsInNoZWV0Iiwic3R5bGVTaGVldHMiLCJvd25lck5vZGUiLCJzaGVldEZvclRhZyIsImluc2VydFJ1bGUiLCJjc3NSdWxlcyIsImZsdXNoIiwicGF0dGVybiIsInJlcGxhY2VtZW50IiwiaW5kZXhvZiIsInNlYXJjaCIsImJlZ2luIiwiY29sdW1uIiwiY2hhcmFjdGVyIiwiY2hhcmFjdGVycyIsInJldHVybiIsInByZXYiLCJwZWVrIiwiY2FyZXQiLCJ0b2tlbiIsImFsbG9jIiwiZGVhbGxvYyIsImRlbGltaXQiLCJkZWxpbWl0ZXIiLCJ3aGl0ZXNwYWNlIiwiZXNjYXBpbmciLCJjb21tZW50ZXIiLCJpZGVudGlmaWVyIiwiQ09NTUVOVCIsIm91dHB1dCIsImNvbXBpbGUiLCJydWxlcyIsInJ1bGVzZXRzIiwicHNldWRvIiwiZGVjbGFyYXRpb25zIiwiYXRydWxlIiwicHJldmlvdXMiLCJzY2FubmluZyIsImFtcGVyc2FuZCIsInJlZmVyZW5jZSIsImNvbW1lbnQiLCJkZWNsYXJhdGlvbiIsInJ1bGVzZXQiLCJwb3N0IiwiaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nIiwiZml4ZWRFbGVtZW50cyIsIldlYWtNYXAiLCJjb21wYXQiLCJpc0ltcGxpY2l0UnVsZSIsInBhcnNlZCIsInRvUnVsZXMiLCJnZXRSdWxlcyIsInBhcmVudFJ1bGVzIiwicmVtb3ZlTGFiZWwiLCJoYXNoIiwiZGVmYXVsdFN0eWxpc1BsdWdpbnMiLCJtYXAiLCJjcmVhdGVDYWNoZSIsInNzclN0eWxlcyIsImdldEF0dHJpYnV0ZSIsIl9pbnNlcnQiLCJzdHlsaXNQbHVnaW5zIiwiaW5zZXJ0ZWQiLCJub2Rlc1RvSHlkcmF0ZSIsImF0dHJpYiIsImN1cnJlbnRTaGVldCIsImNvbGxlY3Rpb24iLCJmaW5hbGl6aW5nUGx1Z2lucyIsInNlcmlhbGl6ZXIiLCJzZXJpYWxpemVkIiwic2hvdWxkQ2FjaGUiLCJyZWdpc3RlcmVkIiwidW5pdGxlc3NLZXlzIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiV2Via2l0TGluZUNsYW1wIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsImh5cGhlbmF0ZVJlZ2V4IiwiYW5pbWF0aW9uUmVnZXgiLCJpc0N1c3RvbVByb3BlcnR5IiwiaXNQcm9jZXNzYWJsZVZhbHVlIiwicHJvY2Vzc1N0eWxlTmFtZSIsInN0eWxlTmFtZSIsInByb2Nlc3NTdHlsZVZhbHVlIiwiY3Vyc29yIiwiaGFuZGxlSW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwiaW50ZXJwb2xhdGlvbiIsIl9fZW1vdGlvbl9zdHlsZXMiLCJpbnRlcnBvbGF0ZWQiLCJjcmVhdGVTdHJpbmdGcm9tT2JqZWN0IiwicHJldmlvdXNDdXJzb3IiLCJjYWNoZWQiLCJsYWJlbFBhdHRlcm4iLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJFbW90aW9uQ2FjaGVDb250ZXh0IiwiUHJvdmlkZXIiLCJUaGVtZUNvbnRleHQiLCJpc1N0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCIsImdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMiLCJpc1JlYWwiLCJzaG91bGRGb3J3YXJkUHJvcCIsIm9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCIsIl9fZW1vdGlvbl9mb3J3YXJkUHJvcCIsIm5ld1N0eWxlZCIsImNyZWF0ZVN0eWxlZCIsImlkZW50aWZpZXJOYW1lIiwidGFyZ2V0Q2xhc3NOYW1lIiwiX19lbW90aW9uX3JlYWwiLCJiYXNlVGFnIiwiX19lbW90aW9uX2Jhc2UiLCJsYWJlbCIsImRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsInNob3VsZFVzZUFzIiwicmF3IiwiU3R5bGVkIiwicmVnaXN0ZXJlZFN0eWxlcyIsImNsYXNzTmFtZXMiLCJyYXdDbGFzc05hbWUiLCJGaW5hbFRhZyIsImFzIiwiY2xhc3NJbnRlcnBvbGF0aW9ucyIsInRoZW1lIiwic3RyaW5nTW9kZSIsInN0cmluZ3MiLCJmaW5hbFNob3VsZEZvcndhcmRQcm9wIiwibmV3UHJvcHMiLCJmb3J3YXJkUmVmIiwidXNlQ29udGV4dCIsImRpc3BsYXlOYW1lIiwid2l0aENvbXBvbmVudCIsIm5leHRUYWciLCJuZXh0T3B0aW9ucyIsImdldFN0cmluZ0JldHdlZW4iLCJwYXJzZVJvYW1EYXRlU3RyaW5nIiwicm9hbURhdGVTdHJpbmciLCJyb2FtQWxwaGFBUEkiLCJ1dGlsIiwicGFnZVRpdGxlVG9EYXRlIiwiZGF0ZVRvUm9hbURhdGVTdHJpbmciLCJqc0RhdGVPYmplY3QiLCJkYXRlVG9QYWdlVGl0bGUiLCJ0b0RhdGVTdHJpbmciLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJkYXlqcyIsImFkZERheXMiLCJkYXlzIiwic2V0RGF0ZSIsImRheXNCZXR3ZWVuIiwiZmlyc3REYXRlIiwic2Vjb25kRGF0ZSIsImN1c3RvbUZyb21Ob3ciLCJkYXlzRGlmZiIsImlzRGF0ZSIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJhc3luY0l0ZXJhdG9yIiwiZGVmaW5lIiwiR2VuZXJhdG9yIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsInJ2YWwiLCJoYW5kbGUiLCJjb21wbGV0ZSIsImZpbmlzaCIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJyZWplY3QiLCJfbmV4dCIsIl90aHJvdyIsImluZm8iLCJfYXN5bmNUb0dlbmVyYXRvciIsInNhdmVDYWNoZURhdGEiLCJfcmVmMiIsIl9jYWxsZWUiLCJkYXRhUGFnZVRpdGxlIiwic2VsZWN0ZWRUYWciLCJkYXRhQmxvY2tVaWQiLCJzZWxlY3RlZFRhZ0Jsb2NrVWlkIiwiX09iamVjdCRrZXlzIiwiZXhpc3RpbmdCbG9ja1VpZCIsIl9jb250ZXh0IiwiZ2V0T3JDcmVhdGVQYWdlIiwiZ2V0T3JDcmVhdGVCbG9ja09uUGFnZSIsImdldE9yQ3JlYXRlQ2hpbGRCbG9jayIsImdldENoaWxkQmxvY2siLCJleGFjdE1hdGNoIiwiZGVsZXRlQmxvY2siLCJibG9jayIsImRhdGVVdGlscyIsInN0cmluZ1V0aWxzIiwiY3JlYXRlQ2hpbGRCbG9jayIsIl94IiwiZGVsZXRlQ2FjaGVEYXRhS2V5IiwiX3JlZjQiLCJfY2FsbGVlMiIsIl9yZWYzIiwidG9EZWxldGVLZXlJZCIsIl9jb250ZXh0MiIsIl94MiIsIlJldmlld01vZGVzIiwiSW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSIsImRlZXBDbG9uZSIsIkNvbXBsZXRpb25TdGF0dXMiLCJSZW5kZXJNb2RlIiwiVG9kYXlJbml0aWFsIiwiY29tYmluZWRUb2RheSIsIlVuc3RhcnRlZCIsImR1ZSIsIm5ldyIsImR1ZVVpZHMiLCJuZXdVaWRzIiwiY29tcGxldGVkVWlkcyIsImNvbXBsZXRlZER1ZSIsImNvbXBsZXRlZER1ZVVpZHMiLCJjb21wbGV0ZWROZXciLCJjb21wbGV0ZWROZXdVaWRzIiwiZ2V0UGFyZW50Q2hhaW5JbmZvIiwicmVmVWlkIiwiZGF0YVJlc3VsdHMiLCJmZXRjaEJsb2NrSW5mbyIsIl9ibG9ja0luZm8kY2hpbGRyZW4iLCJibG9ja0luZm8iLCJwYXJlbnRDaGFpbkluZm8iLCJzb3J0ZWRDaGlsZHJlbiIsInNvcnQiLCJjaGlsZCIsImNoaWxkcmVuVWlkcyIsImJyZWFkY3J1bWJzIiwiZ2V0UGFnZSIsInBhZ2UiLCJyZXN1bHRzIiwiX2NhbGxlZTMiLCJwYWdlVGl0bGUiLCJfY29udGV4dDMiLCJnZW5lcmF0ZVVJRCIsIl94MyIsImdldEJsb2NrT25QYWdlIiwicGFyZW50X3VpZCIsInF1ZXJ5IiwiZ2V0Q2hpbGRCbG9ja3NPblBhZ2UiLCJfcmVmNSIsIl9jYWxsZWU0IiwicXVlcnlSZXN1bHRzIiwiX2NvbnRleHQ0IiwiX3g0IiwiZ2V0Q2hpbGRCbG9ja3NCeVVpZCIsIl9yZWY2IiwiX2NhbGxlZTUiLCJwYXJlbnRVaWQiLCJjaGlsZEJsb2NrcyIsIl9jb250ZXh0NSIsIl94NSIsIl9yZWY3IiwiX2NhbGxlZTYiLCJibG9ja1Byb3BzIiwiX2FyZ3M2IiwiX2NvbnRleHQ2IiwiY3JlYXRlQmxvY2siLCJfb2JqZWN0U3ByZWFkIiwiX3g2IiwiX3g3IiwiX3g4IiwiY3JlYXRlQmxvY2tPblBhZ2UiLCJfcmVmOCIsIl9jYWxsZWU3IiwicGFnZV91aWQiLCJfY29udGV4dDciLCJfeDkiLCJfeDEwIiwiX3gxMSIsIl94MTIiLCJfcmVmOSIsIl9jYWxsZWU4IiwiYmxvY2tfdWlkIiwiX2NvbnRleHQ4IiwiX3gxMyIsIl94MTQiLCJfeDE1IiwiX3gxNiIsIl9yZWYxMCIsIl9jYWxsZWU5IiwiX2NvbnRleHQ5IiwiX3gxNyIsIl94MTgiLCJfeDE5IiwiX3gyMCIsImdlbmVyYXRlTmV3U2Vzc2lvbiIsIl9yZWYxMSIsIl9yZWYxMSRyZXZpZXdNb2RlIiwicmV2aWV3TW9kZSIsIkZpeGVkSW50ZXJ2YWwiLCJfcmVmMTEkZGF0ZUNyZWF0ZWQiLCJkYXRlQ3JlYXRlZCIsIl9yZWYxMSRpc05ldyIsImlzTmV3IiwiRGVmYXVsdFNwYWNlZEludGVydmFsIiwiZUZhY3RvciIsImludGVydmFsIiwicmVwZXRpdGlvbnMiLCJpbnRlcnZhbE11bHRpcGxpZXIiLCJpbnRlcnZhbE11bHRpcGxpZXJUeXBlIiwiRGF5cyIsIm93bktleXMiLCJfdG9QcmltaXRpdmUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJhbGxvd0FycmF5TGlrZSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9lIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsIl9lMiIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiaW5pdGlhbGl6ZVRvZGF5IiwiX3N0ZXAiLCJ0YWdzTGlzdCIsImNhY2hlZERhdGEiLCJ0b2RheSIsIm9iamVjdFV0aWxzIiwiX2l0ZXJhdG9yIiwiY2FjaGVkVGFnRGF0YSIsInJlbmRlck1vZGUiLCJOb3JtYWwiLCJjYWxjdWxhdGVUb2RheVN0YXR1cyIsIl9zdGVwMiIsInJlbWFpbmluZyIsIkZpbmlzaGVkIiwiUGFydGlhbCIsImNhbGN1bGF0ZUNvbXBsZXRlZFRvZGF5Q291bnRzIiwic2Vzc2lvbkRhdGEiLCJfaXRlcmF0b3IzIiwiX3N0ZXAzIiwiX2xvb3AiLCJjdXJyZW50VGFnU2Vzc2lvbkRhdGEiLCJjYXJkVWlkIiwiY2FyZERhdGEiLCJsYXRlc3RTZXNzaW9uIiwiaXNGaXJzdFNlc3Npb24iLCJ3YXNEdWVUb2RheSIsIndhc05ldyIsImNhbGN1bGF0ZUNvbWJpbmVkQ291bnRzIiwidG9kYXlJbml0aWFsIiwiX3N0ZXA0IiwiX2l0ZXJhdG9yNCIsIl90b0NvbnN1bWFibGVBcnJheSIsIlNldCIsImFkZE5ld0NhcmRzIiwiX3N0ZXA1IiwiY2FyZFVpZHMiLCJwbHVnaW5QYWdlRGF0YSIsInNodWZmbGVDYXJkcyIsIl9yZWY2JHByaW9yaXR5T3JkZXIiLCJwcmlvcml0eU9yZGVyIiwicmFua01hcCIsImNyZWF0ZVJhbmtNYXAiLCJfaXRlcmF0b3I1IiwiX2xvb3AyIiwiY3VycmVudFRhZyIsImFsbFNlbGVjdGVkVGFnQ2FyZHNVaWRzIiwibmV3Q2FyZHNVaWRzIiwicmVmZXJlbmNlSWQiLCJnZXRSYW5rIiwiX3JhbmtNYXAkZ2V0IiwiTUFYX1NBRkVfSU5URUdFUiIsIk1hcCIsImFkZER1ZUNhcmRzIiwiX3N0ZXA2IiwiaXNDcmFtbWluZyIsIl9yZWY3JHByaW9yaXR5T3JkZXIiLCJfaXRlcmF0b3I2IiwiX2xvb3AzIiwiZHVlQ2FyZHNVaWRzIiwibmV4dER1ZURhdGUiLCJfcmFua01hcCRnZXQyIiwiZ2V0RHVlQ2FyZFVpZHMiLCJfcmFua01hcCRnZXQzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2VTeW1ib2xLZXlzIiwiZ2V0RW1vamlGcm9tR3JhZGUiLCJncmFkZSIsInNhdmVQcmFjdGljZURhdGEiLCJjYXJkRGF0YUJsb2NrVWlkIiwicmVmZXJlbmNlRGF0ZSIsImRhdGVDcmVhdGVkUm9hbURhdGVTdHJpbmciLCJlbW9qaSIsIm5ld0RhdGFCbG9ja0lkIiwiX2V4Y2x1ZGVkIiwiYnVsa1NhdmVQcmFjdGljZURhdGEiLCJyZWNvcmRzIiwic2VsZWN0ZWRVaWRzIiwiZ3JhcGhOYW1lIiwiZXhpc3RpbmdFbnRyeVVpZCIsImVudHJ5VWlkIiwic2Vzc2lvbnMiLCJzZXNzaW9uIiwic2Vzc2lvbkhlYWRpbmdVaWQiLCJfaTIiLCJfT2JqZWN0JGtleXMyIiwiZ3JhcGgiLCJhY3Rpb24iLCJhY3Rpb25zIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJsb2FkQ2FyZFJhbmtpbmdzIiwicHJpb3JpdHlDb250YWluZXJVaWQiLCJjb250YWluZXJCbG9ja3MiLCJwcmlvcml0eUJsb2NrIiwib3JkZXJTdHJpbmciLCJyYW5raW5ncyIsImZpbmQiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJzYXZlQ2FyZFJhbmtpbmdzIiwib2xkUmFua2luZ0Jsb2NrVWlkIiwib2xkQm9sZENvbnRhaW5lclVpZCIsImV4aXN0aW5nUmFua2luZ0Jsb2NrIiwicmFua2luZ1N0cmluZyIsImZ1bGxTdHJpbmciLCJuZXdCbG9ja1VpZCIsInVwZGF0ZUJsb2NrIiwiZ2V0Q2FyZFJhbmsiLCJhbGxDYXJkc0NvdW50IiwiZGVmYXVsdFByaW9yaXR5IiwiYnVsa1NhdmVSYW5raW5nQ2hhbmdlcyIsInJhbmtpbmdDaGFuZ2VzIiwiYWxsQ2FyZFVpZHMiLCJjdXJyZW50UmFua2luZ3MiLCJzZWVuIiwiY2hhbmdlZFVpZHMiLCJ1bmNoYW5nZWRDYXJkcyIsInNvcnRlZENoYW5nZXMiLCJuZXdSYW5raW5ncyIsIl9zdGVwMyR2YWx1ZSIsInRhcmdldFJhbmsiLCJpbnNlcnRJbmRleCIsIl9lcnJvciRtZXNzYWdlIiwiX2Vycm9yJG1lc3NhZ2UyIiwiX3JlZjEyIiwiX3JlZjEzIiwiX3NsaWNlZFRvQXJyYXkiLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJwcmVmaWxsU3RhdGVzIiwiZ2V0UGFnZVN0YXRlIiwiaXNJblByb2dyZXNzIiwiZGVib3VuY2VNcyIsImdldFByYWN0aWNlRGF0YSIsImRhaWx5TGltaXQiLCJfcmVmJGRlZmF1bHRQcmlvcml0eSIsIl95aWVsZCRnZXRTZXNzaW9uRGF0YSIsImN1cnJlbnRTZXNzaW9uRGF0YSIsImN1cnJlbnRDYXJkVWlkcyIsIl90YWciLCJnZXRQbHVnaW5QYWdlRGF0YSIsImxpbWl0VG9MYXRlc3QiLCJnZXRTZXNzaW9uRGF0YSIsInVwZGF0ZVByaW9yaXR5T3JkZXJXaXRoU2V0dGluZ3MiLCJsaW1pdFJlbWFpbmluZ1ByYWN0aWNlRGF0YSIsInByYWN0aWNlRGF0YSIsInRvZGF5U3RhdHMiLCJwYWdlU3RhdGUiLCJleGlzdGluZ1ByaW9yaXR5T3JkZXIiLCJtaXNzaW5nQ2FyZHMiLCJyZXZlcnNlZE1pc3NpbmdDYXJkcyIsInRvdGFsQ2FyZHNBZnRlciIsImluc2VydFBvc2l0aW9uIiwidXBkYXRlZFByaW9yaXR5T3JkZXIiLCJnZXREYXRhUGFnZVF1ZXJ5IiwiZ2V0UGFnZVJlZmVyZW5jZUlkcyIsImRhdGFQYWdlUmVzdWx0IiwiZGF0YVBhZ2VVaWQiLCJnZXRTZWxlY3RlZFRhZ1BhZ2VCbG9ja3NJZHMiLCJmaWx0ZXJlZENoaWxkcmVuIiwicGFyc2VGaWVsZFZhbHVlcyIsInJlY29yZCIsInNvbWUiLCJfcGFyc2VDb25maWdTdHJpbmcyIiwicGFyc2VGbG9hdCIsIm1hcFBsdWdpblBhZ2VEYXRhTGF0ZXN0IiwicXVlcnlSZXN1bHRzRGF0YSIsIl9xdWVyeVJlc3VsdHNEYXRhJG1hcCIsInJlZHVjZSIsImFjYyIsImxhdGVzdENoaWxkIiwibWFwUGx1Z2luUGFnZURhdGEiLCJfcXVlcnlSZXN1bHRzRGF0YSRtYXAyIiwiZ2V0UGx1Z2luUGFnZUJsb2NrRGF0YSIsImJsb2NrTmFtZSIsIl9yZWY4JGxpbWl0VG9MYXRlc3QiLCJtYXBQbHVnaW5QYWdlQ2FjaGVkRGF0YSIsIl9jdXIkY2hpbGRyZW4iLCJfY3VyJHN0cmluZyRzcGxpdCRtYXAyIiwiZ2V0UGx1Z2luUGFnZUNhY2hlZERhdGEiLCJ0YWdSZWZlcmVuY2VzSWRzIiwidGFnUGFnZUJsb2Nrc0lkcyIsImFsbFRhZ0NhcmRzVWlkcyIsInNlbGVjdGVkVGFnQ2FyZHNEYXRhIiwiX3JlZjE0IiwidG90YWxDYXJkcyIsIl9zdGVwNyIsIl9pdGVyYXRvcjciLCJfdG9kYXkkdGFncyRjdXJyZW50VGEiLCJfdG9kYXkkdGFncyRjdXJyZW50VGEyIiwicmVzdG9yZUNvbXBsZXRlZFVpZHMiLCJzZWxlY3RlZENhcmRzIiwidGFyZ2V0VG90YWxDYXJkcyIsInRhcmdldE5ld0NhcmRzIiwidGFyZ2V0RHVlQ2FyZHMiLCJ0b3RhbE5ld0FkZGVkIiwidG90YWxEdWVBZGRlZCIsInRvdGFsQWRkZWQiLCJyb3VuZFJvYmluTG9vcCIsImN1cnJlbnRDYXJkcyIsIm5leHROZXdJbmRleCIsIm5leHROZXdDYXJkIiwibmV4dER1ZUluZGV4IiwibmV4dER1ZUNhcmQiLCJzdGlsbE5lZWROZXdDYXJkcyIsInN0aWxsTmVlZER1ZUNhcmRzIiwic3RpbGxIYXZlRHVlQ2FyZHMiLCJzdGlsbEhhdmVOZXdDYXJkcyIsInRhZ1N0YXRzIiwicmVtYWluaW5nVGFyZ2V0RHVlIiwicmVtYWluaW5nVGFyZ2V0TmV3IiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX25vbkl0ZXJhYmxlUmVzdCIsIm9sZFJvYW1TckdyYWRlTWFwIiwib2xkRGlzcGxheUJ1dHRvblRleHQiLCJtZW1vRGlzcGxheUJ1dHRvblRleHQiLCJtZW1vR3JhZGUiLCJtYXBPbGRSb2FtU3JQcmFjdGljZURhdGEiLCJkYXRlU3RyaW5nIiwicm93IiwiX3ZhbHVlcyIsInJlZlVpZFN0cmluZyIsImdyYWRlU3RyaW5nIiwiaXNSb2FtU3JPbGRQcmFjdGljZVJlY29yZCIsInNvcnRPbGRSb2FtU3JQcmFjdGljZURhdGEiLCJtYXBwZWREYXRhIiwiZ2V0T2xkUm9hbVNyUHJhY3RpY2VEYXRhIiwicmV2aWV3VGFnUGFnZU5hbWUiLCJyZXZpZXdQYWdlUmVmZXJlbmNlRGF0YSIsImdldE1lcmdlZE9sZEFuZEV4aXN0aW5nUmVjb3JkcyIsIm9sZFJldmlld1JlY29yZHMiLCJleGlzdGluZ1ByYWN0aWNlRGF0YSIsIm1lcmdlZFByYWN0aWNlRGF0YSIsImdlbmVyYXRlUmVjb3Jkc0Zyb21Sb2FtU3JEYXRhIiwibWVyZ2VkUmVjb3JkcyIsIl9PYmplY3QkZW50cmllcyIsIl9PYmplY3QkZW50cmllcyRfaSIsInJlc3VsdHNBcnIiLCJwcmFjdGljZUlucHV0RGF0YSIsImxhc3RQcmFjdGljZVJlc3VsdCIsIm5ld0NhcmREYXRhIiwicHJhY3RpY2VSZXN1bHQiLCJwcmFjdGljZSIsInQzIiwidDQiLCJ0NSIsInQ2IiwidDciLCJibG9ja0luZm9DYWNoZSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJSZWFjdCIsInNldEJsb2NrSW5mbyIsIl9SZWFjdCR1c2VTdGF0ZTQiLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJfUmVhY3QkdXNlU3RhdGU2IiwiZm9yY2VSZWZyZXNoIiwic2V0Rm9yY2VSZWZyZXNoIiwicmVmcmVzaEJsb2NrSW5mbyIsImNsZWFyQmxvY2tJbmZvQ2FjaGUiLCJfZnJlc2hCbG9ja0luZm8kY2hpbGQiLCJfZnJlc2hCbG9ja0luZm8kY2hpbGQyIiwiX2ZyZXNoQmxvY2tJbmZvJGNoaWxkMyIsImZyZXNoQmxvY2tJbmZvIiwiaGFzQ2hpbGRyZW4iLCJoYXNDaGlsZHJlblVpZHMiLCJjaGlsZHJlbkNvdW50Iiwic2xlZXAiLCJzdHlsZWQiLCJ3cmFwcGVyQ2xhc3NOYW1lIiwicmVzdFByb3BzIiwiQmx1ZVByaW50VG9vbHRpcCIsIl9leHRlbmRzIiwicG9wb3ZlckNsYXNzTmFtZSIsIl90ZW1wbGF0ZU9iamVjdCIsInNpbXVsYXRlTW91c2VDbGljayIsIm1vdXNlRXZlbnRUeXBlIiwiZGlzcGF0Y2hFdmVudCIsIk1vdXNlRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImJ1dHRvbnMiLCJzaW11bGF0ZU1vdXNlRXZlbnRzIiwiZ2V0QWxsVGV4dE5vZGVzIiwibm9kZVR5cGUiLCJ3cmFwTWF0Y2hlcyIsInJlZ2V4IiwidGV4dE5vZGVzIiwidGV4dE5vZGUiLCJtYXRjaGVkVGV4dCIsIm1hdGNoZWRUZXh0U3RhcnQiLCJtYXRjaGVkVGV4dEVuZCIsImJlZm9yZVRleHQiLCJhZnRlclRleHQiLCJjbG96ZUVsbSIsImNsYXNzTGlzdCIsImJlZm9yZUVsbSIsImFmdGVyRWxtIiwicmVuZGVyZWRCbG9ja0VsbSIsImhhc0Nsb3plQ2FsbGJhY2siLCJjdXN0b20iLCJjbG96ZUNvdW50cyIsInNldENsb3plQ291bnRzIiwiY2xvemVFbG1zIiwibWFpbkJsb2NrRWxtIiwicmUiLCJjbG96ZVJlZ2V4IiwiUmVnRXhwIiwidXNlQ3VzdG9tQ2xvemUiLCJldmVyeSIsIkxvYWRpbmdPdmVybGF5IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbCIsIkNvbnRlbnRXcmFwcGVyIiwiX3RlbXBsYXRlT2JqZWN0MiIsInNob3dBbnN3ZXJzIiwiQnJlYWRjcnVtYnMiLCJicmVhZGNydW1iIiwiQnJlYWRDcnVtYldyYXBwZXIiLCJJY29uIiwiaWNvbiIsIl90ZW1wbGF0ZU9iamVjdDMiLCJzZXRIYXNDbG96ZSIsInNob3dCcmVhZGNydW1icyIsInNldFJlbmRlcmVkQmxvY2tFbG0iLCJ1c2VDbG96ZSIsImZvcmNlVXBkYXRlIiwic2V0Rm9yY2VVcGRhdGUiLCJyZWZVaWRSZWYiLCJvYnNlcnZlclJlZiIsImRlYm91bmNlZEZuUmVmIiwiaGFuZGxlQmxvY2tCbHVyIiwicmVuZGVyQmxvY2siLCJjdXJyZW50UmVmVWlkIiwicm9hbUJsb2NrRWxtIiwiZXhwYW5kQ29udHJvbEJ0biIsInVpIiwiY29tcG9uZW50cyIsInVubW91bnROb2RlIiwiY29udGFpbnMiLCJkb21VdGlscyIsImFzeW5jVXRpbHMiLCJuZXdUZXh0YXJlYXMiLCJ0ZXh0YXJlYSIsInNtYXJ0RGVib3VuY2VkUmVuZGVyIiwidGltZW91dCIsInRpbWVycyIsIl9sZW4yIiwiX2tleTIiLCJjbGVhclRpbWVvdXQiLCJ0aW1lciIsIk5ldyIsIkxlYXJuaW5nIiwiUmV2aWV3IiwiUmVsZWFybmluZyIsIk1hbnVhbCIsIkFnYWluIiwiSGFyZCIsIkdvb2QiLCJFYXN5IiwiY2FyZCIsImxhc3RfcmV2aWV3IiwicmF0aW5nIiwidG9VcHBlckNhc2UiLCJyZXZpZXdfbG9nIiwicmV2aWV3Iiwic2NoZWR1bGVyIiwiZHVlRm9ybWF0IiwiTiIsIkwiLCJudCIsImZhY3RvciIsIlkiLCJ0b0ZpeGVkIiwiViIsImRlYnVnIiwiSSIsImxlYXJuaW5nX3N0ZXBzIiwicmVsZWFybmluZ19zdGVwcyIsInJlcXVlc3RfcmV0ZW50aW9uIiwibWF4aW11bV9pbnRlcnZhbCIsImVuYWJsZV9mdXp6IiwiZW5hYmxlX3Nob3J0X3Rlcm0iLCJzdGFiaWxpdHkiLCJkaWZmaWN1bHR5IiwiZWxhcHNlZF9kYXlzIiwic2NoZWR1bGVkX2RheXMiLCJyZXBzIiwibGFwc2VzIiwidXQiLCJjdCIsIkgiLCJkZWNheSIsIkoiLCJwYXJhbSIsImludGVydmFsTW9kaWZpZXIiLCJfc2VlZCIsIlByb3h5IiwicGFyYW1zX2hhbmRsZXJfcHJveHkiLCJjYWxjdWxhdGVfaW50ZXJ2YWxfbW9kaWZpZXIiLCJmb3JnZXR0aW5nX2N1cnZlIiwiaW50ZXJ2YWxfbW9kaWZpZXIiLCJwYXJhbWV0ZXJzIiwidXBkYXRlX3BhcmFtZXRlcnMiLCJpc0Zpbml0ZSIsIlJlZmxlY3QiLCJpbml0X3N0YWJpbGl0eSIsImluaXRfZGlmZmljdWx0eSIsImFwcGx5X2Z1enoiLCJkb3VibGUiLCJpbXBvcnRTdGF0ZSIsIm1pbl9pdmwiLCJtYXhfaXZsIiwibmV4dF9pbnRlcnZhbCIsImxpbmVhcl9kYW1waW5nIiwibmV4dF9kaWZmaWN1bHR5IiwibWVhbl9yZXZlcnNpb24iLCJuZXh0X3JlY2FsbF9zdGFiaWxpdHkiLCJuZXh0X2ZvcmdldF9zdGFiaWxpdHkiLCJuZXh0X3Nob3J0X3Rlcm1fc3RhYmlsaXR5IiwibmV4dF9zdGF0ZSIsInJldmlld190aW1lIiwiWiIsInNjaGVkdWxlZF9taW51dGVzIiwibmV4dF9zdGVwIiwiU0NIRURVTEVSIiwiTEVBUk5JTkdfU1RFUFMiLCJTRUVEIiwibGFzdCIsImFsZ29yaXRobSIsInN0cmF0ZWdpZXMiLCJjaGVja0dyYWRlIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJwcmV2aWV3IiwicHJldmlld0l0ZXJhdG9yIiwibmV3U3RhdGUiLCJsZWFybmluZ1N0YXRlIiwicmV2aWV3U3RhdGUiLCJidWlsZExvZyIsImxhc3RfZWxhcHNlZF9kYXlzIiwibGVhcm5pbmdTdGVwc1N0cmF0ZWd5Iiwic3VwZXIiLCJnZXRMZWFybmluZ0luZm8iLCJuZXh0X3N0ZXBzIiwiYXBwbHlMZWFybmluZ1N0ZXBzIiwibmV4dF9kcyIsImV0IiwiaW5pdF9kcyIsInVwZGF0ZV9uZXh0IiwiZ3QiLCJmc3JzIiwicmVwbGF5IiwiaGFuZGxlTWFudWFsUmF0aW5nIiwicmVzY2hlZHVsZSIsImNhbGN1bGF0ZU1hbnVhbFJlY29yZCIsInN0cmF0ZWd5SGFuZGxlciIsIlNjaGVkdWxlciIsInVzZVN0cmF0ZWd5IiwiY2xlYXJTdHJhdGVneSIsImRlbGV0ZSIsImNsZWFyIiwiZ2V0U2NoZWR1bGVyIiwicmVwZWF0IiwiZ2V0X3JldHJpZXZhYmlsaXR5Iiwicm9sbGJhY2siLCJmb3JnZXQiLCJyZWNvcmRMb2dIYW5kbGVyIiwicmV2aWV3c09yZGVyQnkiLCJza2lwTWFudWFsIiwidXBkYXRlX21lbW9yeV9zdGF0ZSIsImZpcnN0X2NhcmQiLCJjb2xsZWN0aW9ucyIsInJlc2NoZWR1bGVfaXRlbSIsImdlbmVyYXRvclBhcmFtZXRlcnMiLCJnZW5lcmF0ZVByYWN0aWNlRGF0YSIsIl9yZWYkc2NoZWR1bGluZ0FsZ29yaSIsInNjaGVkdWxpbmdBbGdvcml0aG0iLCJXZWVrcyIsIk1vbnRocyIsIlllYXJzIiwibmV4dER1ZURhdGVGcm9tTm93IiwiYWxnb3JpdGhtUmVzdWx0cyIsImZzcnNTdGF0ZSIsImNyZWF0ZUVtcHR5Q2FyZCIsIm1hcEdyYWRlVG9SYXRpbmciLCJuZXh0Q2FyZCIsImFjdHVhbENhcmQiLCJpbnRlcnZhbE1zIiwiaW50ZXJ2YWxEYXlzIiwibmV4dER1ZSIsInJlcGV0aXRpb24iLCJlZmFjdG9yIiwiZnNyc0FsZ29yaXRobSIsIm5leHRJbnRlcnZhbCIsIm5leHRSZXBldGl0aW9uIiwibmV4dEVmYWN0b3IiLCJzdXBlcm1lbW8iLCJwcmFjdGljZVByb3BzIiwiaXNEcnlSdW4iLCJfcHJhY3RpY2VQcm9wcyRmc3JzRW4iLCJmc3JzRW5hYmxlZCIsIl9nZW5lcmF0ZVByYWN0aWNlRGF0YSIsInByYWN0aWNlUmVzdWx0RGF0YSIsIl9leGNsdWRlZDIiLCJCdXR0b25UYWdzIiwiQW5zd2VySGlkZGVuQ29udHJvbHMiLCJhY3RpdmF0ZUJ1dHRvbkZuIiwic2hvd0Fuc3dlckZuIiwiYWN0aXZlQnV0dG9uS2V5IiwiQW5zd2VySGlkZGVuQ29udHJvbHNXcmFwcGVyIiwiQ29udHJvbEJ1dHRvbiIsImludGVudCIsIm91dGxpbmVkIiwibWVkaWFRdWVyaWVzIiwiRmluaXNoZWRDb250cm9scyIsIm9uU3RhcnRDcmFtbWluZ0NsaWNrIiwib25DbG9zZUNhbGxiYWNrIiwiRmluaXNoZWRDb250cm9sc1dyYXBwZXIiLCJUb29sdGlwIiwicGxhY2VtZW50IiwiQmx1ZXByaW50IiwiR3JhZGluZ0NvbnRyb2xzV3JhcHBlciIsInNraXBGbiIsImdyYWRlRm4iLCJpbnRlcnZhbEVzdGltYXRlcyIsImludGVydmFsUHJhY3RpY2UiLCJpc0ludGVydmFsRWRpdG9yT3BlbiIsInRvZ2dsZUludGVydmFsRWRpdG9yT3BlbiIsIl9SZWFjdCR1c2VDb250ZXh0MiIsIk1haW5Db250ZXh0Iiwic2V0UmV2aWV3TW9kZU92ZXJyaWRlIiwiaXNGaXhlZEludGVydmFsTW9kZSIsIkdyYWRpbmdDb250cm9sc0NvbnRhaW5lciIsInRvb2x0aXBUZXh0IiwiRml4ZWRJbnRlcnZhbE1vZGVDb250cm9scyIsIlNwYWNlZEludGVydmFsTW9kZUNvbnRyb2xzIiwiU2V0SW50ZXJ2YWxUb2dnbGVXcmFwcGVyIiwibWluV2lkdGgiLCJjaGVja2VkIiwib25DaGFuZ2UiLCJGaXhlZEludGVydmFsRWRpdG9yIiwiX1JlYWN0JHVzZUNvbnRleHQzIiwic2V0SW50ZXJ2YWxNdWx0aXBsaWVyIiwic2V0SW50ZXJ2YWxNdWx0aXBsaWVyVHlwZSIsImludGVydmFsTXVsdGlwbGllclR5cGVzIiwic3RlcFNpemUiLCJtYWpvclN0ZXBTaXplIiwibWlub3JTdGVwU2l6ZSIsIm9uVmFsdWVDaGFuZ2UiLCJudW1lcmljVmFsdWUiLCJjdXJyZW50VGFyZ2V0Iiwib3B0aW9uIiwic2VsZWN0ZWQiLCJJbnRlcnZhbFN0cmluZyIsInNpbmd1bGFyU3RyaW5nIiwiX1JlYWN0JHVzZUNvbnRleHQ0IiwiRml4ZWRJbnRlcnZhbENvbnRyb2xzV3JhcHBlciIsImlzT3BlbiIsIm9uSW50ZXJhY3Rpb24iLCJuZXh0U3RhdGUiLCJfaW50ZXJ2YWxFc3RpbWF0ZXMkIiwiX2ludGVydmFsRXN0aW1hdGVzJDIiLCJfaW50ZXJ2YWxFc3RpbWF0ZXMkMyIsIl9pbnRlcnZhbEVzdGltYXRlcyQ0IiwiU3BhY2VkSW50ZXJ2YWxCdXR0b25zV3JhcHBlciIsIl90ZW1wbGF0ZU9iamVjdDQiLCJGb290ZXJXcmFwcGVyIiwiX3RlbXBsYXRlT2JqZWN0NSIsIkZvb3RlckFjdGlvbnNXcmFwcGVyIiwiX3RlbXBsYXRlT2JqZWN0NiIsIl90ZW1wbGF0ZU9iamVjdDciLCJDb250cm9sQnV0dG9uV3JhcHBlciIsIl90ZW1wbGF0ZU9iamVjdDgiLCJfcmVmOSR3cmFwcGVyQ2xhc3NOYW0iLCJfdGVtcGxhdGVPYmplY3Q5Iiwic2V0U2hvd0Fuc3dlcnMiLCJvblByYWN0aWNlQ2xpY2siLCJvblNraXBDbGljayIsIm9uUHJldkNsaWNrIiwiaXNEb25lIiwiaGFzQ2FyZHMiLCJjdXJyZW50Q2FyZERhdGEiLCJfcmVmJGZzcnNFbmFibGVkIiwiX1JlYWN0JHVzZUNvbnRleHQiLCJzZXRJc0ludGVydmFsRWRpdG9yT3BlbiIsInNldEFjdGl2ZUJ1dHRvbktleSIsImNhbGxiYWNrRm4iLCJkZWxheSIsImhvdGtleXMiLCJjb21ibyIsIm9uS2V5RG93biIsImRpc2FibGVkIiwiX0JsdWVwcmludCR1c2VIb3RrZXlzIiwiaGFuZGxlS2V5RG93biIsImhhbmRsZUtleVVwIiwiZ3JhZGVzIiwiZXN0aW1hdGVzIiwiaXRlcmF0ZUNvdW50Iiwib25LZXlVcCIsIlByaW9yaXR5Q29udGFpbmVyIiwiU2xpZGVyV3JhcHBlciIsIlN0eWxlZFNsaWRlciIsImlucHV0IiwicHJpb3JpdHkiLCJvblByaW9yaXR5Q2hhbmdlIiwic2xpZGVyVmFsdWVUb1JhbmsiLCJzbGlkZXJWYWx1ZSIsInJhbmtUb1NsaWRlclZhbHVlIiwicmFuayIsImN1cnJlbnRTbGlkZXJWYWx1ZSIsImhhbmRsZVNsaWRlckNoYW5nZSIsIm5ld1JhbmsiLCJtYXhTbGlkZXJWYWx1ZSIsImFsaWduSXRlbXMiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwianVzdGlmeUNvbnRlbnQiLCJtYXJnaW5Ub3AiLCJmbGV4RGlyZWN0aW9uIiwiU2xpZGVyQ29udGFpbmVyIiwiT2Zmc2V0TGFiZWwiLCJpbml0aWFsUHJpb3JpdHkiLCJzZXRPZmZzZXQiLCJsYWJlbFN0ZXBTaXplIiwibmV3T2Zmc2V0IiwibmV3UHJpb3JpdHkiLCJsYWJlbFJlbmRlcmVyIiwiRGlhbG9nQ29udGVudCIsIkRlY2tOYW1lIiwiUHJpb3JpdHlEaXNwbGF5IiwiUHJpb3JpdHlCYXIiLCJQcmlvcml0eUVkaXRvciIsIkluZm9TZWN0aW9uIiwiU3Bpbm5lckNvbnRhaW5lciIsImRlY2tQcmlvcml0aWVzIiwic2VsZWN0ZWREZWNrIiwib25DbG9zZSIsIm9uQXBwbHlPZmZzZXQiLCJlZGl0aW5nRGVjayIsInNldEVkaXRpbmdEZWNrIiwidGVtcFByaW9yaXR5Iiwic2V0VGVtcFByaW9yaXR5Iiwib3JpZ2luYWxQcmlvcml0eSIsInNldE9yaWdpbmFsUHJpb3JpdHkiLCJfUmVhY3QkdXNlU3RhdGU4IiwiaXNBcHBseWluZyIsInNldElzQXBwbHlpbmciLCJzb3J0ZWREZWNrcyIsIm1lZGlhblByaW9yaXR5IiwiaGFuZGxlU2F2ZSIsIl9vZmZzZXRQZXJjZW50Iiwib2Zmc2V0UGVyY2VudCIsImhhbmRsZUNhbmNlbCIsImRlY2siLCJkZWNrTmFtZSIsImNhcmRDb3VudCIsIk9mZnNldFNsaWRlciIsInNtYWxsIiwiaGFuZGxlRWRpdENsaWNrIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiaXRlciIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJEaWFsb2ciLCJEaWFsb2dCb2R5IiwiSGVhZGVyV3JhcHBlciIsIlRhZ1NlbGVjdG9yIiwib25UYWdDaGFuZ2UiLCJCbHVlcHJpbnRTZWxlY3QiLCJhY3RpdmVJdGVtIiwiZmlsdGVyYWJsZSIsIml0ZW1QcmVkaWNhdGUiLCJub3JtYWxpemVkUXVlcnkiLCJpbnB1dFByb3BzIiwicGxhY2Vob2xkZXIiLCJpdGVtUmVuZGVyZXIiLCJoYW5kbGVDbGljayIsImFmdGVyIiwiVGFnU2VsZWN0b3JJdGVtIiwib3JpZ2luYWxUZXh0Iiwib25JdGVtU2VsZWN0IiwicG9wb3ZlclByb3BzIiwibWluaW1hbCIsInByZXZlbnRPdmVyZmxvdyIsImZsaXAiLCJyZXNldE9uUXVlcnkiLCJyZXNldE9uU2VsZWN0IiwicmlnaHRJY29uIiwiVGFnU2VsZWN0b3JJdGVtV3JhcHBlciIsIlRhZyIsIl90b2RheSR0YWdzJHRhZ0tleSIsIl90b2RheSR0YWdzJHRhZ0tleTIiLCJfdG9kYXkkdGFncyR0YWdLZXkzIiwic2V0UmVuZGVyTW9kZSIsInRhZ0tleSIsImR1ZUNvdW50IiwibmV3Q291bnQiLCJ0YWdSZW5kZXJNb2RlIiwiX1JlYWN0JHVzZVN0YXRlMjAiLCJzaG93VGFnU2V0dGluZ3MiLCJzZXRTaG93VGFnU2V0dGluZ3MiLCJ0YWdTZXR0aW5nc01lbnUiLCJhbGlnbkluZGljYXRvciIsIlJJR0hUIiwiQW5zd2VyRmlyc3QiLCJuZXdSZW5kZXJNb2RlIiwiU3RhdHVzQmFkZ2UiLCJ0aW1lQWdvIiwiQm94SWNvbiIsIkJyZWFkY3J1bWJUb29sdGlwQ29udGVudCIsIkhlYWRlciIsInNldFNob3dCcmVhZGNydW1icyIsInByYWN0aWNlQ2FyZFVpZHMiLCJvbk9wZW5EZWNrUHJpb3JpdHkiLCJpc0dsb2JhbE1peGVkTW9kZSIsInNldElzR2xvYmFsTWl4ZWRNb2RlIiwiX3VzZVNhZmVDb250ZXh0IiwidXNlU2FmZUNvbnRleHQiLCJjb21wbGV0ZWRUb2RheUNvdW50IiwiZ2xvYmFsU3RhdHMiLCJxdWV1ZUxlbmd0aCIsInRvZGF5VG90YWxUYXJnZXQiLCJjdXJyZW50RGlzcGxheUNvdW50IiwiR2xvYmFsTWl4ZWRUb2dnbGVXcmFwcGVyIiwiX2Jsb2NrSW5mbyRjaGlsZHJlblVpIiwiaGFuZGxlUHJhY3RpY2VDbGljayIsImhhbmRsZU1lbW9UYWdDaGFuZ2UiLCJoYW5kbGVSZXZpZXdNb3JlQ2xpY2siLCJzZXRJc0NyYW1taW5nIiwicnRsRW5hYmxlZCIsIm9uRGF0YVJlZnJlc2giLCJ0b2RheVNlbGVjdGVkVGFnIiwiY2FyZFVpZHNUb1ByYWN0aWNlIiwiZmxhdE1hcCIsInRhZ0RhdGEiLCJzZXRDdXJyZW50SW5kZXgiLCJpc0ZpcnN0IiwiY3VycmVudENhcmRSZWZVaWQiLCJfdXNlQ3VycmVudENhcmREYXRhIiwic2V0Q3VycmVudENhcmREYXRhIiwic2V0UmV2aWV3TW9kZSIsInJldmlld01vZGVPdmVycmlkZSIsInJlc29sdmVkQ2FyZERhdGEiLCJsYXN0U2Vzc2lvbldpdGhNYXRjaGluZ1Jldmlld01vZGUiLCJnZXRSZXNvbHZlZENhcmREYXRhIiwidXNlQ3VycmVudENhcmREYXRhIiwibmV3Rml4ZWRTZXNzaW9uRGVmYXVsdHMiLCJzZXRSYW5raW5nQ2hhbmdlcyIsIl9SZWFjdCR1c2VTdGF0ZTEwIiwic2V0SGFzVW5zYXZlZENoYW5nZXMiLCJfUmVhY3QkdXNlU3RhdGUxMiIsInNob3dEZWNrUHJpb3JpdHlNYW5hZ2VyIiwic2V0U2hvd0RlY2tQcmlvcml0eU1hbmFnZXIiLCJoYW5kbGVEZWNrT2Zmc2V0QXBwbHkiLCJfd2luZG93JHJvYW1BbHBoYUFQSSIsImRlY2tDYXJkVWlkcyIsIl9yYW5raW5nQ2hhbmdlcyIsImN1cnJlbnRSYW5rIiwiX3dpbmRvdyRyb2FtQWxwaGFBUEkyIiwic2hvd1RvYXN0IiwiaXNNb3VudGVkUmVmIiwiY3VycmVudENhcmRSYW5rIiwiaGFuZGxlUmFua2luZ0NoYW5nZSIsImhhc05leHREdWVEYXRlIiwiaXNEdWVUb2RheSIsIl91c2VCbG9ja0luZm8iLCJ1c2VCbG9ja0luZm8iLCJibG9ja0luZm9Mb2FkaW5nIiwiaGFzQmxvY2tDaGlsZHJlbiIsImhhc0Jsb2NrQ2hpbGRyZW5VaWRzIiwibmV4dENhcmRSZWZVaWQiLCJfUmVhY3QkdXNlU3RhdGUxNCIsInNraXAiLCJfUmVhY3QkdXNlU3RhdGUxNiIsImhhc0Nsb3plIiwic2hvdWxkU2hvd0Fuc3dlckZpcnN0IiwiX2RvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsImJsdXIiLCJwcmV2aW91c1F1ZXVlTGVuZ3RoIiwiZ3JhZGVEYXRhIiwiYWZ0ZXJQcmFjdGljZSIsImxvdHRpZUFuaW1hdGlvbk9wdGlvbiIsImRvbmVBbmltYXRpb25EYXRhIiwiX1JlYWN0JHVzZVN0YXRlMTgiLCJ1c2VFZmZlY3QiLCJleGlzdGluZ1N0eWxlIiwidXNlWkluZGV4Rml4IiwidXNlRm9jdXNGaXgiLCJzaG91bGRTaG93U2xpZGVyIiwicHJldlNob3VsZFNob3dTbGlkZXIiLCJ2YWxpZERhdGFQYWdlVGl0bGUiLCJfd2luZG93JHJvYW1BbHBoYUFQSTMiLCJjYW5Fc2NhcGVLZXlDbG9zZSIsIkNhcmRCbG9jayIsIkZvb3RlciIsIlByaW9yaXR5U2xpZGVyIiwiRGVja1ByaW9yaXR5TWFuYWdlciIsIldyYXBwZXIiLCJvbkNsaWNrQ2FsbGJhY2siLCJhbGxEb25lVG9kYXkiLCJjb21iaW5lZENvdW50cyIsImljb25DbGFzcyIsIkJvcmRlckNvbG9yIiwiU2Vzc2lvbnNUYWJsZSIsImhhc05ld1Nlc3Npb24iLCJEaXZpZGVyIiwiQmxvY2siLCJ1dWlkIiwiaXNMYXN0Iiwic2V0U2VsZWN0ZWRVaWRzIiwiaXNTZWxlY3RlZCIsInNldElzU2VsZWN0ZWQiLCJpc0V4cGFuZGVkIiwic2V0SXNFeHBhbmRlZCIsIm5ld1Nlc3Npb25zIiwiY3VycmVudFVpZHMiLCJSZXN1bHRzV3JhcHBlciIsIkhlYWRlckVsbSIsInRvdGFsQ2FyZHNGb3VuZCIsInRvdGFsUmVjb3JkcyIsImV4ZWN1dGVJbXBvcnQiLCJpc0ltcG9ydGluZyIsInNldExhdW5jaFBhbmVsIiwiaW1wb3J0ZWRVaWRzIiwib25TZWxlY3RBbGxDbGljayIsIm9uRGVzZWxlY3RBbGxDbGljayIsIkZvcm1MYWJlbCIsIlRva2VuUGFnZSIsInNldFRva2VuIiwic2V0U2hvd0ltcG9ydFBhZ2UiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsInNldFZhbGlkYXRpb25NZXNzYWdlIiwidGVzdEFwaVRva2VuIiwidGVzdEJsb2NrVWlkIiwicXVlcmllcyIsImxhYmVsRm9yIiwibGFiZWxJbmZvIiwiYXV0b0ZvY3VzIiwibG9hZGluZyIsIkltcG9ydFByb2dyZXNzT3ZlcmxheSIsImhhc0ltcG9ydGVkIiwic2VsZWN0ZWRDb3VudCIsInRvSW1wb3J0Q291bnQiLCJzdGFydGluZ0ltcG9ydENvdW50IiwiY3VycmVudEltcG9ydGVkQ291bnQiLCJmaW5pc2hlZEltcG9ydGluZyIsImFuaW1hdGUiLCJzdHJpcGVzIiwiSW1wb3J0UGFnZSIsInJlZmV0Y2hUcmlnZ2VyIiwic2V0UmVmZXRjaFRyaWdnZXIiLCJzZXRIYXNJbXBvcnRlZCIsInNldElzSW1wb3J0aW5nIiwiX1JlYWN0JHVzZVN0YXRlMjIiLCJzZXRSZWNvcmRzIiwiaGFzUmVjb3JkcyIsIl9SZWFjdCR1c2VTdGF0ZTI0IiwiX1JlYWN0JHVzZVN0YXRlMjYiLCJzZXRJbXBvcnRlZFVpZHMiLCJfUmVhY3QkdXNlU3RhdGUyOCIsImJsb2NrSW5mb01hcCIsInNldEJsb2NrSW5mb01hcCIsImN1cnIiLCJvbGRSZXZpZXdEYXRhIiwiaWRzQWxyZWFkeUltcG9ydGVkIiwiY3VycmVudE1hcCIsIlBhbmVsIiwiX1JlYWN0JHVzZVN0YXRlMzAiLCJzaG93SW1wb3J0UGFnZSIsIl9SZWFjdCR1c2VTdGF0ZTMyIiwibGF1bmNoUGFuZWwiLCJfUmVhY3QkdXNlU3RhdGUzNCIsImRlZmF1bHRTZXR0aW5ncyIsInNldHRpbmdzIiwic2V0U2V0dGluZ3MiLCJyb2FtTWVtbyIsImV4dGVuc2lvbkFQSSIsInBhbmVsIiwic3luY0ZuIiwiY3VycmVudFNldHRpbmdzIiwicHJvY2Vzc0NoYW5nZSIsInRhYlRpdGxlIiwiUm9hbVNySW1wb3J0UGFuZWwiLCJpc051bWJlciIsInNldHRpbmdzUGFuZWxDb25maWciLCJhbGxTZXR0aW5ncyIsImdldEFsbCIsIm1lcmdlZFNldHRpbmdzIiwiY29sbGFwc2VEYXRhUmVmZXJlbmNlQmxvY2siLCJlbG1MaXN0IiwiZWxtIiwiY29sbGFwc2VDb250cm9sQnRuIiwiY3VycmVudFJvdXRlIiwic2V0Q3VycmVudFJvdXRlIiwib25Sb3V0ZUNoYW5nZSIsImRhaWx5TG9nc0NvbnRhaW5lckVsbSIsImNhbGN1bGF0ZU1lZGlhbiIsIm51bWJlcnMiLCJzb3J0ZWQiLCJtaWRkbGUiLCJuZXdEZWNrUHJpb3JpdGllcyIsInRhZ0NhcmRVaWRzIiwicHJpb3JpdGllcyIsImNhcmRSYW5rIiwidXBkYXRlRGVja1ByaW9yaXR5Iiwic2hvd1ByYWN0aWNlT3ZlcmxheSIsInNldFNob3dQcmFjdGljZU92ZXJsYXkiLCJzZXRTZWxlY3RlZFRhZyIsIl91c2VTZXR0aW5nczIiLCJ1c2VTZXR0aW5ncyIsIl91c2VBbGxQYWdlcyIsImFsbFBhZ2VzIiwic2V0QWxsUGFnZXMiLCJpc0V4ZWN1dGluZ1JlZiIsInJlZnJlc2hOb25jZSIsInNldFJlZnJlc2hOb25jZSIsImZldGNoUGFnZXMiLCJwYWdlVGl0bGVzIiwiZGFpbHlOb3RlUmVnZXgiLCJmaWx0ZXJlZFBhZ2VzIiwiZmluYWxQYWdlcyIsIkJvb2xlYW4iLCJyZWZyZXNoUGFnZXMiLCJ1c2VBbGxQYWdlcyIsInNhZmVTZWxlY3RlZFRhZyIsIl91c2VDYWNoZWREYXRhIiwiZ2V0RGF0YSIsIl9zYXZlQ2FjaGVEYXRhMiIsImZldGNoQ2FjaGVEYXRhIiwib3ZlcnJpZGVzIiwidXNlQ2FjaGVkRGF0YSIsIl91c2VQcmFjdGljZURhdGEiLCJwcmFjdGljZURhdGFSZWYiLCJwcmlvcml0eU9yZGVyUmVmIiwiYWxsQ2FyZFVpZHNSZWYiLCJjYXJkVWlkc1JlZiIsImRhdGFWZXJzaW9uIiwic2V0RGF0YVZlcnNpb24iLCJzZXRUb2RheSIsInNldEFsbENhcmRzQ291bnQiLCJzdGFibGVEZWZhdWx0UHJpb3JpdHkiLCJfeWllbGQkcXVlcmllcyRnZXRQcmEiLCJfYWxsQ2FyZHNDb3VudCIsImZldGNoUHJhY3RpY2VEYXRhIiwidXNlUHJhY3RpY2VEYXRhIiwiX3VzZURlY2tQcmlvcml0eSIsInVzZURlY2tQcmlvcml0eSIsInNvcnRlZFRhZ3NMaXN0IiwiX2RlY2tQcmlvcml0aWVzJGEkbWVkIiwiX2RlY2tQcmlvcml0aWVzJGEiLCJfZGVja1ByaW9yaXRpZXMkYiRtZWQiLCJfZGVja1ByaW9yaXRpZXMkYiIsInByaW9yaXR5QSIsInByYWN0aWNlUGFyYW1zIiwicmVmcmVzaERhdGEiLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0eVN0YXRlIiwib25TaG93UHJhY3RpY2VPdmVybGF5IiwidXNlQ29sbGFwc2VSZWZlcmVuY2VMaXN0Iiwib25FbnRlckNhbGxiYWNrIiwib25MZWF2ZUNhbGxiYWNrIiwidGFnc09uRW50ZXIiLCJzZXRUYWdzT25FbnRlciIsInVuYmluZExlYXZlIiwidW5iaW5kQXJyaXZlIiwic3RhcnRMYWJlbCIsImNvbW1hbmRQYWxldHRlIiwiYWRkQ29tbWFuZCIsInJlbW92ZUNvbW1hbmQiLCJ1c2VDb21tYW5kUGFsZXR0ZUFjdGlvbiIsIlNpZGVQYW5uZWxXaWRnZXQiLCJQcmFjdGljZU92ZXJsYXkiLCJjb250YWluZXJfaWQiLCJvbmxvYWQiLCJGb2N1c1N0eWxlTWFuYWdlciIsIm9ubHlTaG93Rm9jdXNPblRhYnMiLCJzaWJsaW5nRWxtIiwibmV3Q29udGFpbmVyRWxtIiwiUmVhY3RET00iLCJBcHAiLCJvbnVubG9hZCIsInJlcXVpcmUiLCJmb3JjZUNsZWFudXAiLCJyZW1vdmUiXSwic291cmNlUm9vdCI6IiJ9